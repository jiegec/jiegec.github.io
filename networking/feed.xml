<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Networkings on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jiege.ch/networking/</link>
    <description>Recent content in Networkings on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 May 2019 16:06:00 +0800</lastBuildDate>
    
	<atom:link href="https://jiege.ch/networking/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IP 和 UDP Checksum 的增量更新问题</title>
      <link>https://jiege.ch/networking/2019/05/30/ip-and-udp-checksum-incremental-update/</link>
      <pubDate>Thu, 30 May 2019 16:06:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2019/05/30/ip-and-udp-checksum-incremental-update/</guid>
      <description>之前在写 IP Checksum 的增量更新，就是当 TTL -= 1 的时候，Checksum 应该增加 0x0100 ，但是这样会有问题，在于，如果按照原来的 IP Checksum 计算方法，是不会出现 0xFFFF 的（求和，进位，然后取反写入），这种加法就有可能出现 0xFFFF 。于是翻阅了相关的RFC：
首先是 RFC 1141 相关部分：
unsigned long sum; ipptr-&amp;gt;ttl--; /* decrement ttl */ sum = ipptr-&amp;gt;Checksum + 0x100; /* increment checksum high byte*/ ipptr-&amp;gt;Checksum = (sum + (sum&amp;gt;&amp;gt;16)) /* add carry */ 这也是比较直接能想到的一种方法，但是会出现刚才提到的问题。于是 RFC 1624 纠正了这个问题：
 Although this equation appears to work, there are boundary conditions under which it produces a result which differs from the one obtained by checksum computation from scratch.</description>
    </item>
    
    <item>
      <title>OpenWRT 上配置 Gandi DDNS</title>
      <link>https://jiege.ch/networking/2018/10/22/ddns-openwrt-router/</link>
      <pubDate>Mon, 22 Oct 2018 09:53:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/10/22/ddns-openwrt-router/</guid>
      <description>一直想给自己的 OpenWRT 路由器添加 DDNS 功能，但 Gandi 不在官方的 ddns-scripts 列表中，自己在网上找了一些脚本，发现是 Python 写的，尝试把 Python 安装到路由器上又发现空间不够，虽然可以安装到 USB 上，但总归是麻烦。
最后找到了官方的一个脚本，非常适合我的需求。简单修改一下，然后安装一下支持 HTTPS 的 cURL ：
$ opkg update $ opkg install ca-bundle $ opkg install curl 然后把脚本添加到 crontab 即可。</description>
    </item>
    
    <item>
      <title>ETC 比赛无线网络搭建小记</title>
      <link>https://jiege.ch/networking/2018/10/20/etc-wireless-network/</link>
      <pubDate>Sat, 20 Oct 2018 23:44:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/10/20/etc-wireless-network/</guid>
      <description>正好上着李贺武老师的《无线移动网络技术》课，然后今天又给 ETC 比赛搭建无线网络，于是周二的时候找老师咨询了一下意见。我们大概给老师讲了一下场地的样子和尺寸（当时估计的大了），然后老师给我们提供了一个可以供参考的部署方案，包括几个 AP 分别放在哪，这些 AP 的 2.4GHz 都用哪个 channel ，然后都用多少功率。并且很友善地在周五的时候让助教来场地帮我们 survey 一下无线网络的状况。我们用 Fluke Networks 的 AirCheck Wi-Fi Tester 看了一下场地的各个频道的 AP 数量和信号强度，发现虽然 AP 挺多的，但是它们的信号都比我们的小不少，而且我们也都开到了 50mW ，所以干扰不大。
然后昨天下午一点半钟来到场地，用板车把设备都运到计算机开放实验室，然后开始部署无线网络。我们提前来踩过几次点，这边的网络是没有 DHCP 服务器的，通过一个指定的网关出去。我们发现可以利用已有的这些交换机从地下连到各个电脑上的网线，来连接我们的 AP 和交换机，这样我们就免去了走线的麻烦。于是我们先定下放 AP 的位置，然后用寻线器找到网线插到了交换机的哪一个端口上，标记好后换成连接到我们自己的交换机的网线上，从而可以通过 PoE 把我们的 AP 给启动起来。然后用我自己的路由器，把 LAN 口插到交换机上，给 AP 分发 DHCP 地址，然后把下发的默认网关配置为真实的网关（DHCP Option 3） ，没做但是也可以顺带做的是把 WLC 的地址分发下去 （DHCP Option 43 Type 241）。
当然，这个过程也遇到了一点小坑，就是交换机还保留了之前的配置，所以这次把新的几个端口划到了一个 VLAN 下，命令自然是记不住的要现查。然后起来以后还挺稳定的，也没出现什么问题，网络带宽也足够用，离千兆还有蛮多距离，一天也才跑了接近俩 TB 的流量。</description>
    </item>
    
    <item>
      <title>使用 veth 实现 IPv6-only 的 Brouter 功能</title>
      <link>https://jiege.ch/networking/2018/10/07/use-veth-for-ipv6-brouter/</link>
      <pubDate>Sun, 07 Oct 2018 11:05:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/10/07/use-veth-for-ipv6-brouter/</guid>
      <description>最近从 @shankerwangmiao 学到了一个方法：通过 veth 把两个 bridge 的 IPv6 桥接起来。方法如下：
$ ip link add veth-v6-in type veth peer name veth-v6-out $ brctl addif br-in veth-v6-in $ brctl addif br-out veth-v6-out $ ebtables -t filter -A FORWARD -p ! IPv6 -o veth-v6-in -j DROP $ ebtables -t filter -A FORWARD -p ! IPv6 -o veth-v6-out -j DROP 这样就可以看到 veth 上仅有 IPv6 的流量了。</description>
    </item>
    
    <item>
      <title>在 Android 上打开 LTE 的 IPv6</title>
      <link>https://jiege.ch/networking/2018/10/04/enable-lte-ipv6-on-android/</link>
      <pubDate>Thu, 04 Oct 2018 22:47:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/10/04/enable-lte-ipv6-on-android/</guid>
      <description>听闻北京移动给 LTE 配置了 SLAAC ，但现在需要手动打开，方法如下：
Settings -&amp;gt; Network &amp;amp; Internet -&amp;gt; Mobile Network -&amp;gt; Advanced -&amp;gt; Access Point Names -&amp;gt; 中国移动 GPRS (China Mobile) -&amp;gt; 把 APN procotol 和 APN roaming protocol 两项都改成 IPv4/IPv6
然后在 test-ipv6.com 上可以看到确实分配了 IPv6 地址，不过目前评分只有 1/10 。也就是说可用性还不佳。
而在 iOS 上，通过 HE 的 Network Tools 能看到，确实拿到了 IPv6 的地址，但是出不去，怀疑是运营商没有下发相关配置，所以还不能使用，只能继续等。
2018-11-06 更新：现在 iOS 用户也有 LTE 的 v6 了。评分是 9/10 。目前可用性已经可以了，就是国内互联还不大好。</description>
    </item>
    
    <item>
      <title>在 LEDE （OpenWrt） 上启用 wpad</title>
      <link>https://jiege.ch/networking/2018/09/11/enable-wpad-on-lede/</link>
      <pubDate>Tue, 11 Sep 2018 23:23:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/09/11/enable-wpad-on-lede/</guid>
      <description>WPAD（Web Proxy Auto-Discovery Protocol）是一个可以利用 dhcp 分发 pac 配置的协议。方法如下：
$ # ssh to router first $ vim /etc/dnsmasq.conf dhcp-option=252,&amp;#34;http://router_ip/wpad.dat&amp;#34; $ vim /www/wpad.dat # put pac here $ service dnsmasq restart $ # ensure proxy is available to lan $ # enable wpad on devices 参考文档：
 Web Proxy Auto-Discovery Protocol Automatic Proxy Configuration with WPAD Deploying WPAD Example PAC File  </description>
    </item>
    
    <item>
      <title>通过 Ipfilter Extension 实现 RFC8367</title>
      <link>https://jiege.ch/networking/2018/08/31/implementing-rfc8367-as-iptables-extension/</link>
      <pubDate>Fri, 31 Aug 2018 15:47:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/08/31/implementing-rfc8367-as-iptables-extension/</guid>
      <description>前几天无聊闲逛看到了一个很有趣的 RFC8367 - Wrongful Termination of Internet Protocol (IP) Packets ，看到日期大家应该都懂了，这是个粥客，不过里面还是反映了一些事情，咳。
之前看到闪客实现了 shankerwangmiao/xt_PROTO ，想到自己也可以做一个 iptables 扩展，于是就写了 jiegec/xt_EQUALIZE 。它是这样使用的：
$ git clone git@github.com:jiegec/xt_EQUALIZE.git $ make $ sudo make install $ sudo iptables -t filter -A INPUT -j EQUALIZE $ sudo dmesg -w &amp;amp; $ # Make some random network requests to see the effect! $ ping 1.1.1.1 $ ping 8.8.8.8 $ ping ::1 目前还没有把参数都变成可以配置的。如果真的有人需要这个模块的话，我再改吧（逃</description>
    </item>
    
    <item>
      <title>在 macOS 上 TAP Interface 上启用 IPv6 自动配置</title>
      <link>https://jiege.ch/networking/2018/08/25/enable-ipv6-autoconfiguration-on-tap-interfaces-in-macos/</link>
      <pubDate>Sat, 25 Aug 2018 19:07:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/08/25/enable-ipv6-autoconfiguration-on-tap-interfaces-in-macos/</guid>
      <description>由于 macOS 对 TAP Interface 不会自动出现一个设置中对应的服务，所以需要手动进行配置。一番测试后，发现可以通过：
$ sudo ipconfig set [tap_if] automatic-v6 $ sudo ipconfig set [tap_if] dhcp 启用系统自带的 dhcp 和 ra 功能。也许有方法可以把这些 tap 搬到系统的设置中去。
UPDATE:
可以把 TAP Interface 加到系统的设置中去。方法参考Virtual network interface in Mac OS X。完成以后可以直接通过系统设置界面进行配置。</description>
    </item>
    
    <item>
      <title>在 macOS 下实现 GRETAP</title>
      <link>https://jiege.ch/networking/2018/08/21/implementing-gretap-in-macos/</link>
      <pubDate>Tue, 21 Aug 2018 09:42:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/08/21/implementing-gretap-in-macos/</guid>
      <description>由于没有找到 macOS 下现成的 GRETAP 实现，我就想到自己实现一个。由于tuntaposx提供了一个和 Linux 下基本一样的 TAP Interface，于是自己利用 raw socket 和 TAP Interface 实现了一下，主要方法：
 打开 raw socket ，读取收到的 proto 47 的包，判断是否为 GRETAP 包，是，则写入内层包到打开的 TAP Interface 中。 从 TAP Interface 中读入包，自己加上 GRE 头和 IP 头，然后发送。  主要的难度是在 raw socket 部分，macOS 继承了 BSD ，与 Linux 不大一样。于是参考了SOCK_RAW Demystified，成功地实现了这个功能。
代码放在jiegec/gretapmac。写得并不高效，仅仅可用，用了一百多行。
UPDATE: 之后又随手实现了一个类似的协议，L2TPv3 over UDP。代码在jiegc/l2tpv3udptap。</description>
    </item>
    
    <item>
      <title>在 WireGuard 构建的 Overlay Network 上跑 babel 路由协议</title>
      <link>https://jiege.ch/networking/2018/08/10/use-babel-in-overlay-network-with-wireguard/</link>
      <pubDate>Fri, 10 Aug 2018 09:17:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/08/10/use-babel-in-overlay-network-with-wireguard/</guid>
      <description>受 Run Babeld over Wireguard - Fugoes&#39;s Blog 和 Route-based VPN on Linux with WireGuard 启发，自己也想尝试一下，在一个有多个结点的网络中，如何通过 WireGuard 构建一个 overlay network，并通过 babel 自动进行结点发现和路径选择。
首先建立点对点的 WireGuard Tunnel 。由于我们用 babel 进行路由，所以我们不能采用 Wiregurad 本身基于目的地址的端口复用，所以每一个 WireGuard interface 都只有一个 Peer 。
配置一个点对点的 WireGuard Tunnel：
$ # for wg-quick $ cat wg0.conf [Interface] Address = IPV4/32, fe80::ID/64 PrivateKey = REDACTED ListenPort = PORT1 Table = off # ask wg-quick not to insert peer address into routing table [Peer] PublicKey = REDACTED AllowedIPs = 0.</description>
    </item>
    
    <item>
      <title>向 Lenovo y1s 刷入 OpenWRT 17.01.5 固件，并把 IPv6 bridge 到内网中和配置认证脚本</title>
      <link>https://jiege.ch/networking/2018/07/26/flashing-lenovo-y1s-and-bridge-ipv6/</link>
      <pubDate>Thu, 26 Jul 2018 20:48:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/07/26/flashing-lenovo-y1s-and-bridge-ipv6/</guid>
      <description>首先参照OpenWRT Wiki - Lenovo Y1 v1找到刷固件教程：
 下载Lenovo y1s 的固件备用 断开电源，等待一段时间，插入电源同时快速按下重置按钮，如果面板双闪，则说明进入了恢复模式 电脑连接到四个 LAN 口中任意一个，配置静态地址在 192.168.1.0/24 网段 打开 192.168.1.1 可以看到刷固件的页面 上传固件，等待路由器重启 配置 IP 地址为 DHCP 模式，打开 192.168.1.1 进行配置  然后就是常规的密码设置，opkg 源设置为 tuna 的源，配置 ssh 和 公钥。
接下来，我们为了使用学校的 SLAAC ，采用 ebtables 直接把学校的 IPv6 bridge 进来，而 IPv4 由于准入系统，需要 NAT 。
参考Bridge IPv6 connections to WAN，下载v6brouter_openwrt.sh到某个地方，然后修改一下里面的一些参数：
# For Lenovo y1s WAN_DEV=eth0.2 BRIDGE=br-lan # the rest remain unchanged 然后跑起来之后，自己的电脑可以成功拿到原生的 IPv6 地址了，不需要用难用的 NAT66 技术。
下一步是采用z4yx/GoAuthing。
$ go get -u -v github.</description>
    </item>
    
    <item>
      <title>用 multicast 地址找到同一网段的主机</title>
      <link>https://jiege.ch/networking/2018/07/15/use-multicast-address-to-find-neighbours/</link>
      <pubDate>Sun, 15 Jul 2018 17:19:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/07/15/use-multicast-address-to-find-neighbours/</guid>
      <description>IPv4 :
$ ping -t1 224.0.0.1 IPv6:
$ ping -t1 ff02::1%iface </description>
    </item>
    
    <item>
      <title>通过 iptables 在同一个端口根据源地址解复用（demux）</title>
      <link>https://jiege.ch/networking/2018/07/06/use-iptables-to-serve-different-services-on-one-port/</link>
      <pubDate>Fri, 06 Jul 2018 09:36:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/07/06/use-iptables-to-serve-different-services-on-one-port/</guid>
      <description>现在遇到一个场景，原来的一个服务只给一个客户端用，但现在增加了一个客户端，由于客户端配置相同，但是服务端需要区别对待两个客户端的服务端配置，所以利用 iptables 根据源地址做了一个端口转发，实现了 demux 。
假设：服务器在 192.168.0.1 ，客户端分别在 192.168.0.2 和 192.168.0.3 。客户端配置的服务端地址是 192.168.0.1:8000 。之前，在服务器上只跑了一个服务，监听着 8000 端口。
现在，在服务器上再跑一个服务，监听 8001 端口，同时根据需求进行相应的配置。然后，加上如下 iptables 规则：
$ sudo iptables -t nat -A PREROUTING -s 192.168.0.3 -d 192.168.0.1 -p tcp -m tcp --dport 8000 -j REDIRECT --to-ports 8001 这样，在不需要更改客户端的情况下，完成了需要的效果。</description>
    </item>
    
    <item>
      <title>Wireguard 隧道搭建</title>
      <link>https://jiege.ch/networking/2018/06/29/wireguard-tunnel/</link>
      <pubDate>Fri, 29 Jun 2018 10:59:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/06/29/wireguard-tunnel/</guid>
      <description>随着 Wireguard Go 版本的开发，在 macOS 上起 WireGuard Tunnel 成为现实。于是，搭建了一个 macOS 和 Linux 之间的 WireGuard Tunnel。假设 Linux 端为服务端， macOS 端为客户端。
macOS端：
$ brew install wireguard-tools $ cd /usr/local/etc/wireguard $ wg genkey &amp;gt; privatekey $ wg pubkey &amp;lt; privatekey &amp;gt; publickey $ vim tunnel.conf [Interface] PrivateKey = MACOS_PRIVATE_KEY [Peer] PublicKey = LINUX_PUBLIC_KEY # Generated below AllowedIPs = 192.168.0.0/24 Endpoint = LINUX_PUBLIC_IP:12345 $ vim up.sh #!/bin/bash # change interface name when necessary sudo wireguard-go utun0 sudo wg setconf utun0 tunnel.</description>
    </item>
    
    <item>
      <title>在 macOS 和 Linux 之间搭建 tinc 网络</title>
      <link>https://jiege.ch/networking/2018/05/09/tinc-between-macos-and-linux/</link>
      <pubDate>Wed, 09 May 2018 10:02:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/05/09/tinc-between-macos-and-linux/</guid>
      <description>一直听说 tinc 比较科学，所以尝试自己用 tinc 搭建一个网络。这里，macOS 这段没有固定 IP 地址，Linux 机器有固定 IP 地址 linux_ip 。假设网络名称为 example , macOS 端名为 macos 地址为 192.168.0.2, linux 端名为 linux 地址为 192.168.0.1。
2018-11-11 注：本文用的 tinc 版本为 1.0.x ，而不是 1.1-pre ，两个分支命令不同，但协议可以兼容。
在 macOS 上配置：
brew install tinc mkdir -p /usr/local/etc/tinc/example 新建 /usr/local/etc/tinc/example/tinc.conf:
Name = macos Device = utun0 # use an unused number ConnectTo = linux 编辑 /usr/local/etc/tinc/example/tinc-up:
#!/bin/sh ifconfig $INTERFACE 192.168.0.2 192.168.0.1 mtu 1500 netmask 255.255.255.255 和 /usr/local/etc/tinc/example/tinc-down:</description>
    </item>
    
    <item>
      <title>使用 Nginx 转发 VMware ESXi</title>
      <link>https://jiege.ch/networking/2018/05/08/nginx-proxy-vmware-esxi/</link>
      <pubDate>Tue, 08 May 2018 19:26:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/05/08/nginx-proxy-vmware-esxi/</guid>
      <description>我们的 VMware ESXi 在一台 NAT Router 之后，但是我们希望通过域名可以直接访问 VMware ESXi 。我们首先的尝试是，把 8443 转发到它的 443 端口，比如：
socat TCP-LISTEN:8443,reuseaddr,fork TCP:esxi_addr:443 它能工作地很好（假的，如果你把 8443 换成 9443 它就不工作了），但是，我们想要的是，直接通过 esxi.example.org 就可以访问它。于是，我们需要 Nginx 在其中做一个转发的功能。在这个过程中遇到了很多的坑，最后终于是做好了 （VMware Remote Console等功能还不行，需要继续研究）。
首先讲讲为啥把 8443 换成 9443 不能工作吧 &amp;ndash; 很简单，ESXi 的网页界面会请求 8443 端口。只是恰好我用 8443 转发到 443， 所以可以正常工作。这个很迷，但是测试的结果确实如此。VMware Remote Console 还用到了别的端口，我还在研究之中。
来谈谈怎么配置这个 Nginx 转发吧。首先是 80 跳转 443:
server { listen 80; listen 8080; server_name esxi.example.org; return 301 https://$host$request_uri; } 这个很简单，接下来是转发 443 端口：
 server { listen 443 ssl; server_name esxi.</description>
    </item>
    
    <item>
      <title>搭建 FTP server behind NAT</title>
      <link>https://jiege.ch/networking/2018/05/08/ftp-behind-nat/</link>
      <pubDate>Tue, 08 May 2018 13:34:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/05/08/ftp-behind-nat/</guid>
      <description>我们出现新的需求，要把以前的 FTP 服务器迁移到 NAT 之后的一台机器上。但是，FTP 不仅用到 20 21 端口， PASV 还会用到高端口，这给端口转发带来了一些麻烦。我们一开始测试，直接在 Router 上转发 20 和 21 端口到 Server 上。但是很快发现， Filezilla 通过 PASV 获取到地址为 （内网地址，端口高8位，端口低8位），然后，Filezilla 检测出这个地址是内网地址，于是转而向 router_ip:port 发包，这自然是不会得到结果的。
此时我们去网上找了找资料，找到了一个很粗暴的方法：
iptables -A PREROUTING -i external_interface -p tcp -m tcp --dport 20 -j DNAT --to-destination internal_ip:20 iptables -A PREROUTING -i external_interface -p tcp -m tcp --dport 21 -j DNAT --to-destination internal_ip:21 iptables -A PREROUTING -i external_interface -p tcp -m tcp --dport 1024:65535 -j DNAT --to-destination internal_ip:1024-65535 有趣地是， macOS 自带的 ftp 命令（High Sierra似乎已经删去）可以正常使用。研究发现，它用 EPSV（Extended Passive Mode） 代替 PASV ，这里并没有写内网地址，因而可以正常使用。</description>
    </item>
    
    <item>
      <title>使用 iptables 和策略路由进行带源地址的 forwarding</title>
      <link>https://jiege.ch/networking/2018/05/06/nat-forwarding-with-src-address/</link>
      <pubDate>Sun, 06 May 2018 14:07:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/05/06/nat-forwarding-with-src-address/</guid>
      <description>陈老师打开他的服务器，突然发现 CPU 莫名高负载，然后发现是有一个用户被远程登录拿来挖矿了。但是这台机器在 NAT 后，所以登录的源地址全是 NAT 路由，所以不知道对方的地址是什么。我们为了能使用 fail2ban 来禁用多次尝试失败的 IP ，但又不想因为别人把 NAT 路由的地址给禁了，这样我们自己也用不了了。所以必须要让这台机器能够知道 ssh 的源地址，我们现在简单的 socat 方案不能满足这个需求。
需求：
 可以在外网连 NAT 路由的高端口（如2222）来访问这台机器。 在内网中，既可以直接连它的内网地址，也可以连 NAT 路由的高端口来访问这台服务器。此时，由于连 ssh 的机器就在同一个子网中，如果保留了源地址，服务器发的包会直接回来不经过 NAT 。所以我们还是保留了 socat 的方案。  实现方法：
在 NAT Router 上配置 DNAT ，这样发到 NAT Router 上的包就可以转发到服务器上：
iptables -t nat -A PREROUTING -i external_interface -p tcp -m tcp --dport 2222 -j DNAT --to-destination internal_server_ip:22 但是，从服务器回来的包到了 NAT Router 上后，由于路由表的配置问题，默认的路由并不能把包送达对方。
方法1: 我们首先给包打上 mark：
iptables -t mangle -A PREROUTING -i internal_interface -p tcp -m tcp --sport 22 -j MARK --set-mark 0x2222 然后配置策略路由：</description>
    </item>
    
    <item>
      <title>利用 UPnP 协议进行 mosh NAT 穿透的研究</title>
      <link>https://jiege.ch/networking/2018/05/05/mosh-behind-nat-with-upnp/</link>
      <pubDate>Sat, 05 May 2018 20:25:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/05/05/mosh-behind-nat-with-upnp/</guid>
      <description>由于经常要从宿舍、教室等不同的 Wi-Fi 之间切换，但是 ssh 连接又总是断，所以想用 mosh 代替 ssh 。但是 mosh 也有它的问题：
 不能滚动。这个可以在 mosh 中嵌套一层 tmux 解决。我目前写了一些自动 mosh 后打开 tmux 并且开启鼠标支持的脚本，但还是有缺陷。 在高端口 60000+ 监听 UDP ，这使得 NAT 后的服务器难以直接通过端口转发。如果直接转发到 NAT 后的机器，那么 NAT 后面如果有多台机器，这又失效了。  于是找了找网上的 NAT 穿透的一些文章，看到了 UPnP 的方法。大致就是，用户可以向路由器注册一个临时的转发规则，路由会自动在 iptables 上配置转发。但是，这样也会遇到一个问题：路由上的 mosh-server 不知道这个转发的存在，所以它可能会尝试监听同样的端口。解决方案下面会提到。
需求：
Server &amp;lt;---&amp;gt; NAT Router &amp;lt;---&amp;gt; My Laptop On NAT Router, port 8022 is forwarded to Server:22 1. mosh router # works 2. mosh --ssh=&amp;quot;ssh -p 8022&amp;quot; router # works 首先在 NAT Router 上配置 miniupnpd （以 Debian 为例）</description>
    </item>
    
    <item>
      <title>使用 Cisco AC &#43; AP 组合搭建网络实践</title>
      <link>https://jiege.ch/networking/2018/04/28/wifi-with-cisco-ac-and-ap/</link>
      <pubDate>Sat, 28 Apr 2018 21:58:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/04/28/wifi-with-cisco-ac-and-ap/</guid>
      <description>有一台已配置好直接可用的 AC 在地址 ac-address 。我们需要搭建交换机 + AP 的网络，并且用一台 Linux 服务器进行 DHCP 从而给 AP 分发 AC 的地址。这里以 systemd-networkd 为例。
我们约定，vlan 2 上联外网， vlan 3 为 Linux 服务器和 AP 的内部网络。
接下来，配置交换机给 Linux 服务器的端口为 trunk 口，然后将下联 Cisco AP 的端口都设为 access vlan 3 模式。接下来在 Linux 服务器上配置 DHCP 服务器和 NAT 。
如果 Linux 服务器的 interface 名称为 eno1 :
配置两个 VLAN interface:
$ cat /etc/systemd/network/eno1.network [Match] Name=eno1 [Network] VLAN=eno1.2 VLAN=eno1.3 相应添加 VLAN 配置：
$ cat /etc/systemd/network/eno1.2.network [NetDev] Name=eno1.</description>
    </item>
    
    <item>
      <title>NAT64 初尝试</title>
      <link>https://jiege.ch/networking/2018/01/02/first-trail-of-nat64/</link>
      <pubDate>Tue, 02 Jan 2018 19:41:22 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/01/02/first-trail-of-nat64/</guid>
      <description>最近宿舍里有线网络的 IPv4 总是拿不到地址，只能连无线网，不禁对计算机系学生的可怕的设备数量有了深刻的认识。不过，作为一个有道德（误）的良好青年，还是不要给已经枯竭的 IPv4 地址填堵了，还是赶紧玩玩 IPv6 的网络吧。然后在 TUNA 群里受青年千人续本达 (@heroxbd) 的安利，本地搭建一下 NAT64+DNS64 的环境。不过考虑到宿舍还是拿不到有线的 IPv4 地址，我就先利用苹果先前在强制 iOS 的应用支持 NAT64 网络的同时，在 macOS 上为了方便开发者调试，提供的便捷的建立 NAT64 网络的能力。
首先在设置中按住 Option 键打开 Sharing ， 点击 Internet Sharing ，勾上 Create NAT64 Network 然后把网络共享给设备。然后在手机上关掉 Wi-Fi 和 Cellular ，发现还能正常上网。此时可以打开 Wireshark 验证我们的成果了：
在手机上打开浏览器，浏览千度，得到如下的 Wireshark 截图： 这里，2001:2:0:aab1::1 是本机在这个子网中的地址，2001:2::aab1:cda2:5de:87f6:fd78 是我的 iOS 设备的地址，然后 iOS 向 macOS 发出了 DNS请求， macOS 发送 DNS 请求后得到 baidu.com 的 IPv4 地址之一为 111.13.101.208 ： 上图中，我们可以看到， baidu.com 的 AAAA 记录是 2001:2:0:1baa::6f0d:65d0 ，这个就是 DNS64 转译的地址，前面为网关的 prefix ，后面就是对应的 IPv4 地址： 0x6f=111, 0x0d=13, 0x65=101, 0xd0=208 ，当客户端向这个地址发包的时候，网关发现前缀符合条件，把最后的这部分 IPv4 地址取出来，自己把包发送到真实的地址上去，再把返回来的包再转为 IPv6 的地址返还给客户端。可以验证，剩下的几个地址也符合这个转译规则。</description>
    </item>
    
  </channel>
</rss>