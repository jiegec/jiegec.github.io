<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杰哥的{运维,编程}小笔记</title>
    <description>This is the personal blog of Jiajie Chen, a NANO(uNix hAcker aNd lOver).
</description>
    <link>https://jiegec.me/</link>
    <atom:link href="https://jiegec.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 07 Dec 2018 16:14:33 +0800</pubDate>
    <lastBuildDate>Fri, 07 Dec 2018 16:14:33 +0800</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>每周分享第 1 期</title>
        <description>&lt;p&gt;向阮一峰学习，把自己在一周里看到的有趣的事情分享一下。不过形式就比较随意了。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;最近写 MongoDB + NodeJS 学到的新操作：$addToSet $nin $ne Mongoose 的 setDefaultsOnInsert&lt;/li&gt;
  &lt;li&gt;Promise 真香，真好用&lt;/li&gt;
  &lt;li&gt;几天前惠老师还在说 “IE, The best Chrome Downloader Downloader, ever” 今天 EdgeHTML 就宣告死亡了&lt;/li&gt;
  &lt;li&gt;WPF, Windows Forms 和 WinUI 开源了，mono 这是要凉？ &lt;a href=&quot;https://blogs.windows.com/buildingapps/2018/12/04/announcing-open-source-of-wpf-windows-forms-and-winui-at-microsoft-connect-2018/&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;有人逆向了 FGPA 的 bitstream 格式，希望 FPGA 有朝一日可以进入 开源时代？ &lt;a href=&quot;https://github.com/mmicko/prjtang&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;造机的 baseline 就决定是 &lt;a href=&quot;https://github.com/Icenowy/ice-risc&quot;&gt;它&lt;/a&gt; 了&lt;/li&gt;
  &lt;li&gt;根据 AST 炼丹判相似度还行，好奇它跨语言的预测水准 &lt;a href=&quot;https://code2vec.org/&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;可视化 h264 nalu 的软件 &lt;a href=&quot;https://github.com/shi-yan/H264Naked&quot;&gt;H264Naked&lt;/a&gt; （做的好糙啊，想交 pr）&lt;/li&gt;
  &lt;li&gt;ffprobe -show_packets 和 ffprobe -show_frame 真好用&lt;/li&gt;
  &lt;li&gt;发现一个解决 ArchLinux 滚内核后无法 modprobe 的&lt;a href=&quot;https://github.com/saber-nyan/kernel-modules-hook&quot;&gt;方案&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;010 Editor 和 Hex Fiend 是二进制分析的神器啊… Kaitai 还有待加油&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/roman01la/cljss&quot;&gt;CSS-in-JS for ClojureScript&lt;/a&gt; 真香 有空可以试试用 ClojureScript 写前端&lt;/li&gt;
  &lt;li&gt;Safari Technology Preview 71 加入了 Web Authentication 这是要支持 U2F 的节奏？&lt;/li&gt;
  &lt;li&gt;Grafana+InfluxDB+Telegraf 真科学，随手写了一些简单的 Telegraf 的 input plugin&lt;/li&gt;
  &lt;li&gt;给 010 Editor 写了俩 .bt 文件，见我上一篇博客&lt;/li&gt;
  &lt;li&gt;海思 cc 居然支持 ASan : /opt/hisi-linux/x86-arm/arm-hisiv600-linux/arm-hisiv600-linux-gnueabi/lib/a7/libasan.so&lt;/li&gt;
  &lt;li&gt;遇到了 &lt;a href=&quot;https://github.com/influxdata/telegraf/issues/4881&quot;&gt;设备名有空格导致 telegraf 读取 S.M.A.R.T. 信息失败&lt;/a&gt; 的锅，不过似乎没人修&lt;/li&gt;
  &lt;li&gt;看到了一个很有意思的 Interview Pass Rate 关于使用的编辑器的调查，很有意思 &lt;a href=&quot;https://triplebyte.com/blog/editor-report-the-rise-of-visual-studio-code&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;发现一个 JSX 的替代品，用了 Template literal syntax ，挺好的 &lt;a href=&quot;https://github.com/developit/htm&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;也不知道能不能坚持下来，就这样了，发布（逃&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Dec 2018 15:57:00 +0800</pubDate>
        <link>https://jiegec.me/misc/2018/12/07/weekly-sharing/</link>
        <guid isPermaLink="true">https://jiegec.me/misc/2018/12/07/weekly-sharing/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>编写 010 Editor 的 FLV Template</title>
        <description>&lt;p&gt;最近在做 FLV 和 H264 方面的研究，研究了很多标准和文档，然后用 010 Editor 对着文件进行分析。这个软件真的很好用，对研究二进制结构用处特别大。不过它自带的 FLV.bt 功能不是很好，我对它加上了 H264(AVC) 的部分支持，放在了 &lt;a href=&quot;https://github.com/jiegec/tools/blob/master/myFLV.bt&quot;&gt;myFLV.bt&lt;/a&gt; 里。我也写了 H264 的解析，不过效率不高，大文件要卡好一会。&lt;/p&gt;

&lt;p&gt;除此之外，很多格式，010 editor 都有支持，特别好用，它的解析器语法也很好写。&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Dec 2018 20:33:00 +0800</pubDate>
        <link>https://jiegec.me/software/2018/12/06/010-editor-flv-parsing/</link>
        <guid isPermaLink="true">https://jiegec.me/software/2018/12/06/010-editor-flv-parsing/</guid>
        
        <category>010editor</category>
        
        <category>macos</category>
        
        <category>parser</category>
        
        <category>binary</category>
        
        <category>hex</category>
        
        <category>flv</category>
        
        <category>h264</category>
        
        <category>avc</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>配置 Grafana+InfluxDB+Telegraf 并添加 MIIO 数据来源</title>
        <description>&lt;p&gt;之前一直想配一个监控系统，现在有机会了，就简单配了一下。发现真的特别简单，用 Homebrew 安装这三个软件并且都跑起来，然后稍微动一下配置，就可以得到可观的效果了。&lt;/p&gt;

&lt;p&gt;然后想利用 miio 配置一下，把宿舍的空气净化器各项参数拿到，以 Telegraf 的插件形式定时上报，然后通过 Grafana 进行可视化。插件放在了 &lt;a href=&quot;https://github.com/jiegec/tools/blob/master/telegraf/miio.py&quot;&gt;jiegec/tools&lt;/a&gt; 下，就是一个简单的 Python 脚本。配置方法如下：&lt;/p&gt;

&lt;p&gt;编辑 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/etc/telegraf.d/miio.conf&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[[inputs.exec]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;[&quot;/usr/local/bin/python3 /Volumes/Data/tools/telegraf/miio.py MIID_HERE&quot;]&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5s&quot;&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;data_format&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;influx&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;默认了 miio 路径为 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/miio&lt;/code&gt; 。&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Nov 2018 20:33:00 +0800</pubDate>
        <link>https://jiegec.me/software/2018/11/27/grafana-influxdb-telegraf-miio/</link>
        <guid isPermaLink="true">https://jiegec.me/software/2018/11/27/grafana-influxdb-telegraf-miio/</guid>
        
        <category>macos</category>
        
        <category>grafana</category>
        
        <category>influxdb</category>
        
        <category>telegraf</category>
        
        <category>miio</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>强制启用 Google Chrome 原生的 Dark Mode</title>
        <description>&lt;p&gt;Mojave 的 Dark Mode 真香，但是 Google Chrome 并不会随着系统的 Dark Mode 设置变化，所以 NightOwl 只能让部分软件按照时间变更 Dark/Light Mode 。一番搜索，发现其实 Google Chrome 其实已经&lt;a href=&quot;https://chromium-review.googlesource.com/c/chromium/src/+/1238796&quot;&gt;支持了 Dark Mode&lt;/a&gt;，但只能设置，不能按照系统的状态自动切换，命令如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ open -a Google\ Chrome --args --force-dark-mode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后就可以看到 Google Chrome 已经是 Dark Mode 了。但可惜并不能自动切换。&lt;/p&gt;

</description>
        <pubDate>Tue, 27 Nov 2018 00:17:00 +0800</pubDate>
        <link>https://jiegec.me/software/2018/11/27/enable-dark-mode-google-chrome/</link>
        <guid isPermaLink="true">https://jiegec.me/software/2018/11/27/enable-dark-mode-google-chrome/</guid>
        
        <category>macos</category>
        
        <category>darkmode</category>
        
        <category>googlechrome</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Mac 上安装 Arch Linux ， ZFS 真香</title>
        <description>&lt;p&gt;最近在 Mac 上装了 Arch Linux ，按照 &lt;a href=&quot;https://wiki.archlinux.org/index.php/Mac&quot;&gt;Mac - Arch Linux Wiki&lt;/a&gt; 一路一路走，创建单独的一个 EFI 分区给 Arch Linux 放 GRUB 和内核，一个 ext4 作为根分区。由于 Arch ISO 不支持 Broadcom 的无线网卡，于是先拿 Apple Ethernet Adapter 连到路由器上装机。然后把一些需要的驱动装上了，桌面用的 KDE Plasma ，Trackpad 用的 xf86-input-mtrack-git ， HiDPI 设置为 2x Scale ，各种体验都还可以，就是 Wi-Fi 的 802.1X 没配置好，然后 kwalletd5 老是崩没找到原因。常见的应用除了微信基本都有，也终于可以体验 Steam Play ，利用 Proton 在 Linux 上跑一些只支持 Windows 的游戏，不过我已经很少玩游戏了。&lt;/p&gt;

&lt;p&gt;然后我就想，怎么做 macOS 和 Linux 之间的文件共享。典型的操作可能是 exFAT ，但是作为数据盘的话，这还是不大适合。或者就直接用 ext4 ，配合 extFS For Mac by Paragon 使用，也可以，最后我选择了 ZFS 。&lt;/p&gt;

&lt;p&gt;在 macOS 上安装 &lt;a href=&quot;https://openzfsonosx.org/&quot;&gt;OpenZFS on OSX&lt;/a&gt; ，在 Linux 上安装 &lt;a href=&quot;https://zfsonlinux.org/&quot;&gt;ZFS on Linux&lt;/a&gt; 。具体命令就是：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew cask install openzfs &lt;span class=&quot;c&quot;&gt;# macOS&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yay zfs-dkms-git &lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于硬盘空间所限，我只用了一个分区作为 vdev ，没有采用 mirror 、 raidz 等方案。我首先在 macOS 上创建了一个 zpool ，参考 &lt;a href=&quot;https://openzfsonosx.org/wiki/Zpool#Creating_a_pool&quot;&gt;Creating a pool - OpenZFS on OSX&lt;/a&gt; ：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;zpool create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ashift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;13 Data diskxsy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时应该能够看到 /Volumes/Data 上已经挂载了一个 ZFS Dataset 。我采用 &lt;a href=&quot;https://github.com/cbreak-black/ZetaWatch&quot;&gt;cbreak-black/ZetaWatch&lt;/a&gt; 在菜单栏里查看 ZFS 信息。此时回到 Arch Linux 上，通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;zfs import&lt;/code&gt; 可以找到并且挂载这个 ZFS Dataset 到 &lt;code class=&quot;highlighter-rouge&quot;&gt;/Data&lt;/code&gt; 处。&lt;/p&gt;

&lt;p&gt;我还尝试创建了一个加密的 ZFS Dataset ，对加密的部分的粒度控制可以很细。另外，我参考 &lt;a href=&quot;https://openzfsonosx.org/wiki/Time_Machine_Backups&quot;&gt;Time Machine Backups - OpenZFS on OSX&lt;/a&gt; 也在移动硬盘上划出一个新的分区作为 ZFS ，在上面创建了一个加密的 Sparse Bundle ，把它作为 Time Machine 的目标。之后还会尝试一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;zfs send&lt;/code&gt; 作为替代的备份方案。&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Nov 2018 20:51:00 +0800</pubDate>
        <link>https://jiegec.me/software/2018/11/26/zfs-on-macos-and-linux/</link>
        <guid isPermaLink="true">https://jiegec.me/software/2018/11/26/zfs-on-macos-and-linux/</guid>
        
        <category>linux</category>
        
        <category>zfs</category>
        
        <category>macos</category>
        
        <category>timemachine</category>
        
        <category>backup</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>USB/IP 实践</title>
        <description>&lt;p&gt;之前一直想玩 USB/IP ，但是一直没有找俩 Linux 设备然后共享，今天终于尝试了一下，没有什么大问题。这次采用的设备是 Raspberri Pi 3 和 SaltedFish Pi 。一开始尝试从后者向前者共享，但总是出现这个错误：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libusbip: error: udev_device_get_sysattr_value failed
usbip: error: open vhci_driver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我反过来做就好了，比较神奇。&lt;/p&gt;

&lt;p&gt;主要过程如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pacman -S usbip&lt;/code&gt; 安装用户态软件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl enable --now usbipd&lt;/code&gt; 启动 USB/IP 的端口监听 daemon&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;usbip list -l&lt;/code&gt; 查看本地有哪些 USB 设备可以共享&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;usbip bind -b [BUS_ID]&lt;/code&gt; 把指定的 USB 设备共享出去，其中 BUS_ID 从上个命令中查看&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;usbip list -r [IP]&lt;/code&gt; 在另一个设备上查看这个设备共享的 USB 设备，可以看到许多信息&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;usbip attach -r [IP] -b [BUS_ID]&lt;/code&gt; 把对方共享的 USB 设备 attach 到本地&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;效果：把一个 U 盘成功映射到了本地：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ lsusb -t
/:  Bus 04.Port 1: Dev 1, Class=root_hub, Driver=vhci_hcd/8p, 480M
    |__ Port 1: Dev 2, If 0, Class=Mass Storage, Driver=usb-storage, 480M
$ lsblk
NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda           8:0    1 14.9G  0 disk
`-sda1        8:1    1 14.9G  0 part /tmp/mnt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;尝试 mount 什么的，也都没有问题。以后可以考虑把本地的 LicheeTang 通过这种方式穿透到远端，然后在远端用它的 IDE 进行编程。&lt;/p&gt;

&lt;p&gt;UPDATE: LicheeTang 烧写有一些问题，直接 JTAG 写上去没有作用，但是 SPI Flash 是可以成功写入并且有作用的，虽然需要强制打断。感觉还是网络延迟导致了一些问题。&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Nov 2018 18:50:00 +0800</pubDate>
        <link>https://jiegec.me/software/2018/11/20/usb-ip/</link>
        <guid isPermaLink="true">https://jiegec.me/software/2018/11/20/usb-ip/</guid>
        
        <category>linux</category>
        
        <category>usbip</category>
        
        <category>raspi</category>
        
        <category>sfpi</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>超过 100 篇博文了！</title>
        <description>&lt;p&gt;今天看了下，发现算上这一篇，这个博客已经有 103 篇文章了，这个数量还是蛮多的，特此庆祝一下。我也顺带做了一下简单的数据处理，得到这么一张图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-11-17 07.52.06.jpg&quot; alt=&quot;graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;目测数量与干活的频率相关性很高啊。&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Nov 2018 07:35:00 +0800</pubDate>
        <link>https://jiegec.me/meta/2018/11/17/more-than-100-posts/</link>
        <guid isPermaLink="true">https://jiegec.me/meta/2018/11/17/more-than-100-posts/</guid>
        
        <category>blog</category>
        
        
        <category>meta</category>
        
      </item>
    
      <item>
        <title>向咸鱼派写入 ArchlinuxARM</title>
        <description>&lt;p&gt;之前由于我的 macOS 上不知道为啥不能把我的 TF 卡设备放到我的虚拟机里，所以之前就没能刷 ArchLinuxARM 上去。今天我想到了一个方法，完成了这件时期：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget https://mirrors.tuna.tsinghua.edu.cn/archlinuxarm/os/ArchLinuxARM-armv7-latest.tar.gz
$ dd if=/dev/zero of=archlinuxarm.img bs=1M count=1024
$ mkfs.ext4 archlinuxarm.img
$ sudo mkdir -p /mnt/archlinuxarm
$ sudo mount -o loop archlinuxarm.img /mnt/archlinuxarm
$ sudo bsdtar -xpf ArchLinuxARM-armv7-latest.tar.gz -C /mnt/archlinuxarm
$ sudo umount /mnt/archlinuxarm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就获得了一个 ext4 的 ArchlinuxARM 镜像。刚好解压出来不到 1G ，所以开了 1G 的镜像刚好放得下。然后把 archlinuxarm.img 拷回 macOS ，然后用 dd 写进去：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dd if=archlinuxarm.img of=/dev/rdisk4s2 bs=1048576
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时候可以确认，我们确实是得到了一个正确的 ext4fs ：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo /usr/local/opt/e2fsprogs/sbin/tune2fs -l /dev/disk4s2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不过，我们实际的分区大小可能不止 1G ，所以可以修改一下大小：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo /usr/local/opt/e2fsprogs/sbin/resize2fs -p /dev/disk4s2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就成功地把 ArchlinuxARM 写进去了。默认的用户名和密码都是 root ，可以成功通过串口登录。&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Nov 2018 19:18:00 +0800</pubDate>
        <link>https://jiegec.me/hardware/2018/11/06/archlinuxarm-on-sfpi/</link>
        <guid isPermaLink="true">https://jiegec.me/hardware/2018/11/06/archlinuxarm-on-sfpi/</guid>
        
        <category>sfpi</category>
        
        <category>saltedfishpi</category>
        
        <category>dd</category>
        
        <category>extfs</category>
        
        <category>ext4</category>
        
        
        <category>hardware</category>
        
      </item>
    
      <item>
        <title>咸鱼派的启动配置</title>
        <description>&lt;p&gt;最近刚拿到了一个&lt;a href=&quot;https://github.com/sbc-fish/sfpi&quot;&gt;咸鱼派&lt;/a&gt;的测试板子，准备自己把 U-Boot 和 Linux 内核这一套东西跑通，都用主线的东西，尽量减少魔改的部分。首先是编译 u-boot ，我用的是现在的 master 分支的最新版 99431c1c ：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ # Archlinux
$ sudo pacman -Sy arm-none-eabi-gcc
$ make LicheePi_Zero_defconfig
$ make ARCH=arm CROSS_COMPILE=arm-none-eabi- -j24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时候会得到一个 u-boot-sunxi-with-spl.bin 的文件。我们只要把它写到 SD 卡的 8192 偏移处，就可以把 U-Boot 跑起来了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ diskutil unmountDisk /dev/disk4
$ sudo dd if=u-boot-sunxi-with-spl.bin of=/dev/disk4 bs=1024 seek=8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接着我们做一下分区。我采用的是 MBR 分区，这样保证不会和 U-Boot 冲突。使用 fdisk进行分区，我从 1M 处开始分了一个 10M 的 FAT-32 分区作为启动分区，然后之后都是 EXT4 的系统盘分区。接着就是编译内核。&lt;/p&gt;

&lt;p&gt;我用的是八月份时候的 4.18.2 内核，虽然不是很新但也足够新了。一番调整内核参数后，得到了一个可用的内核，然后把 zImage 和 sun8i-v3s-licheepi-zero.dtb 都复制到刚才创建的 FAT-32 启动分区，然后进入 U-Boot 进行启动：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ setenv bootcmd 'fatload mmc 0 0x41000000 zImage; fatload mmc 0 0x41800000 sun8i-v3s-licheepi-zero.dtb; setenv bootargs console=ttyS0,115200 root=/dev/mmcblk0p2 rw rootwait; bootz 0x41000000 - 0x41800000'
$ saveenv # optional
$ boot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里一开始遇到了很多坑，比如一直看不到 console ，这个是找了 @Gaoyichuan 拿到的一份 Kernel Config 进行修改修好的。另一个是进去以后找不到 root ，我先是搞了一个有 busybox 的 initrd ，进去看发现是能找到 mmc 的，但是有延迟，那么添加上 rootwait 就好了。进去以后就差 rootfs 。由于我缺少一个写 ext4 的工具，又发现手上有一个 Raspbian 的镜像，它里面也正好是两个分区，而且架构也同样是 armv7l ，我就直接把它烧到 SD 卡中，把 U-Boot 写进去，然后往 boot 分区里写内核和 dtb ，然后就成功进去，并且跑起来了。最喜感的就是，进去以后是个 pi@raspberrypi ，实际上确是另一个东西。不过，只有当我 &lt;code class=&quot;highlighter-rouge&quot;&gt;apt update&lt;/code&gt; 发现用了半小时的时候，我才想起来这其实是是一个嵌入式系统。。&lt;/p&gt;

&lt;p&gt;进去以后发现，没有识别到网卡驱动。网上找了 LicheePi Zero 的一个解决方案，但是并不能用，还出现了神奇的 Kernel Oops ，怀疑是内核版本太新的问题。我又找到 @Icenowy 的一个 &lt;a href=&quot;https://lore.kernel.org/patchwork/patch/884656/&quot;&gt;Patch&lt;/a&gt; ，它终于是解决了这个问题，成功地找到了网卡，并且愉快地 &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh pi@raspberrypi.local&lt;/code&gt; 。之后会在咸鱼派那边公布一下我们做的修改。&lt;/p&gt;

&lt;p&gt;现在的想法是，把 HomeBridge 搭建到它上面，不过目前来看硬件资源有点紧张，放着会有点慢。可能还是用树莓派做这个事情比较合适。&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Nov 2018 22:17:00 +0800</pubDate>
        <link>https://jiegec.me/hardware/2018/11/05/salted-fish-pi/</link>
        <guid isPermaLink="true">https://jiegec.me/hardware/2018/11/05/salted-fish-pi/</guid>
        
        <category>sfpi</category>
        
        <category>saltedfishpi</category>
        
        <category>uboot</category>
        
        <category>linux</category>
        
        <category>kernel</category>
        
        <category>dts</category>
        
        <category>devicetree</category>
        
        
        <category>hardware</category>
        
      </item>
    
      <item>
        <title>使用 HomeBridge 把小米空气净化器加入到 HomeKit 中</title>
        <description>&lt;p&gt;受 @NSBlink 安利，自己部署了一下 &lt;a href=&quot;https://github.com/nfarina/homebridge&quot;&gt;HomeBridge&lt;/a&gt; ，然后在 iOS 的家庭上就可以看到它。然后，通过 &lt;a href=&quot;https://www.npmjs.com/package/homebridge-mi-airpurifier&quot;&gt;homebrdige-mi-airpurifier&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/aholstenson/miio&quot;&gt;miio&lt;/a&gt; 按照教程进行配置。然后就可以在家庭里看到小米空气净化器，包括空气质量，湿度，睡眠模式，温度，打开状态。然后我就可以做一些配置，如离开宿舍的时候自动关闭空气净化器，回来的时候自动打开。不过由于自己没有一个一直放在宿舍的 iPad、Apple TV 或者 HomePod ，失去了中枢，这个功能可能会打折扣。&lt;/p&gt;

&lt;p&gt;后续想买一些智能的灯啊，然后就可以用 Siri 进行打开 / 关闭了。&lt;/p&gt;

&lt;p&gt;此外，我又试了下，可以用 &lt;a href=&quot;https://github.com/KhaosT/homebridge-camera-ffmpeg&quot;&gt;homebridge-camera-ffmpeg&lt;/a&gt; 把摄像头配置到 HomeKit 中。这样，就可以远程查看视频流了。&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Nov 2018 10:47:00 +0800</pubDate>
        <link>https://jiegec.me/software/2018/11/04/mi-air-purifier-homekit/</link>
        <guid isPermaLink="true">https://jiegec.me/software/2018/11/04/mi-air-purifier-homekit/</guid>
        
        <category>homebridge</category>
        
        <category>xiaomi</category>
        
        <category>airpurifier</category>
        
        <category>homekit</category>
        
        
        <category>software</category>
        
      </item>
    
  </channel>
</rss>
