<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/</link>
    <description>Recent content on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Jun 2023 23:10:00 +0800</lastBuildDate><atom:link href="https://jia.je/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>生成树协议</title>
      <link>https://jia.je/networking/2023/06/20/spanning-tree-protocol/</link>
      <pubDate>Tue, 20 Jun 2023 23:10:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2023/06/20/spanning-tree-protocol/</guid>
      <description>&lt;h2 id=&#34;spanning-tree-protocol&#34;&gt;Spanning Tree Protocol&lt;/h2&gt;
&lt;p&gt;STP（Spanning Tree Protocol）可以在 &lt;a href=&#34;https://ieeexplore.ieee.org/document/1389253&#34;&gt;802.1D-1998&lt;/a&gt; 第 8 章中找到。STP 协议工作在交换机上，需要根据交换机连接的拓扑，自动计算出一个生成树，并且把不在生成树上的边禁用，这样即使连接的拓扑有环路，禁用以后就没有环了。有了 STP 以后，连接交换机的时候就可以刻意连成环，从而提供冗余。&lt;/p&gt;
&lt;p&gt;在 STP 协议提出的时候，网络还不像现在这样以点对点为主，因此需要考虑共享介质的场景，也就是多个交换机连到同一个局域网，并且这个局域网通过 Hub 来共享介质。因此，实际上局域网也属于拓扑的一部分，对应生成树的一个结点。为了统一点对点和共享介质，不妨认为点对点连接中，也连接了一个共享介质的局域网，只不过这个局域网没有其他网络设备。这样设定以后，从网络拓扑上来看，就是很多个独立的局域网，用交换机连接起来。&lt;/p&gt;
&lt;p&gt;STP 协议工作的第一步是选举出一个 Root Bridge，也就是生成树的根结点。为了保证选举出唯一的 Root Bridge，选择的标准是，找到最小的 Bridge ID，ID 由人为设定的优先级以及 MAC 地址组成。由于 MAC 地址是唯一的，所以 Bridge ID 也是唯一的，因此一定可以找到一个最小的 ID，那么它就是 Root Bridge。&lt;/p&gt;
&lt;p&gt;实际工作的时候，交换机会收发 BPDU，并且把其他交换机发给自己的 Root ID 和自己的 ID 进行比较：如果自己的 ID 比别人发的 Root ID 都小，那么自己是 Root；如果别人发的 Root ID 比自己小，那自己肯定不是 Root。经过一段时间，拥有最小 ID 的 Bridge 信息会逐渐传播到整个网络，最后所有交换机都会对 Root Bridge 达成共识。&lt;/p&gt;
&lt;p&gt;确定好 Root Bridge 之后，接下来就是得到生成树。每个交换机会接收相邻交换机发送的 BPDU，得知相邻交换机到 Root Bridge 的距离，然后像路由协议那样，计算出走从哪个 Port 走到达 Root Bridge 的距离最短，就把这个 Port 标记为 Root Port，意思是沿着这个方向走，就会一跳一跳地到达 Root Bridge。同时也会更新自己到 Root Bridge 的距离，发给相邻的交换机。这些 Root Port 的方向就对应了生成树里面的父亲节点。&lt;/p&gt;
&lt;p&gt;得到生成树以后，就知道如何禁用不在生成树的边了：如果在某个非 Root 端口上监听到了其他交换机发送的 BPDU，那就说明交换机在这个端口方向上存在一条不在生成树上的边。但是，这条边上有一个局域网（前面提到，即使是交换机之间点对点连接，也可以认为有一个没有网络设备的局域网在中间），这个局域网依然需要能够访问其他局域网。因此，连接到同一个局域网的多个交换机，需要选择出一个交换机，负责这个局域网的所有流量，也就是 Designated Bridge。Designated Bridge 连向局域网的 Port 就是 Designated Port。而连接到局域网的非 Designated Bridge，就需要禁用端口，不收不发数据，只处理 BPDU，此时就是 Block Port。&lt;/p&gt;
&lt;p&gt;因此，从交换机的视角，如果是 Root Bridge，看到的就是若干个 Designated Port；如果不是 Root Bridge，那么会看到一个 Root Port，若干个 Designated Port，可能还有 Blocked Port。&lt;/p&gt;
&lt;p&gt;需要区分两个概念：Role 和 State。每个交换机在每个 Port 上，都有一个 Role 和一个 State：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Role：Root，Designated，Blocked&lt;/li&gt;
&lt;li&gt;State：Disabled，Blocking，Listening，Learning，Forwarding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Role 指的是端口的属性，用于 STP 内部：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Root：连向 Root 的最短路径的方向&lt;/li&gt;
&lt;li&gt;Designated：负责转发局域网流量&lt;/li&gt;
&lt;li&gt;Blocked：出现了环导致不能转发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;State 指的是端口的状态，可以认为是 STP 的输出，把端口设置为对应的状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blocking：不转发以太网帧&lt;/li&gt;
&lt;li&gt;Listening：不转发以太网帧，但是收发 BPDU&lt;/li&gt;
&lt;li&gt;Learning：在 Listening 的基础上，监听流量，学习 MAC 地址，添加到转发表&lt;/li&gt;
&lt;li&gt;Forwarding：正常工作&lt;/li&gt;
&lt;li&gt;Disabled：被管理员禁用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;小结一下 STP 的工作流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选举出 Root Bridge&lt;/li&gt;
&lt;li&gt;对于每个 LAN Segment，选举出 Designated Switch&lt;/li&gt;
&lt;li&gt;把不在生成树上的端口设置为 Blocking&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;rapid-spanning-tree-protocol&#34;&gt;Rapid Spanning Tree Protocol&lt;/h2&gt;
&lt;p&gt;RSTP（Rapid Spanning Tree Protocol）是 STP 协议的升级，在 &lt;a href=&#34;https://ieeexplore.ieee.org/document/1309630&#34;&gt;802.1D-2004&lt;/a&gt; 标准中定义。&lt;/p&gt;
&lt;p&gt;和 STP 不同，RSTP 定义了五个 Role：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Root：连向 Root 的最短路径的方向&lt;/li&gt;
&lt;li&gt;Designated：负责转发局域网流量&lt;/li&gt;
&lt;li&gt;Alternate：连向 Root 的另一条路径的方向&lt;/li&gt;
&lt;li&gt;Backup：已经有另一个交换机连接的局域网方向&lt;/li&gt;
&lt;li&gt;Disabled：被管理员禁用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了 Disabled 以外，RSTP 和 STP 的区别在于，RSTP 把 Blocked 改成了 Alternate 和 Backup：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alternate 作为 Root 的备份：记录交换机到 Root 的第二条路径，当 Root Port 出问题了，那么 Alternate Port 可以成为新的 Root Port&lt;/li&gt;
&lt;li&gt;Backup 作为 Designated 的备份：连接的局域网有别的 Designated Bridge，如果 Designated Bridge 出问题了，自己可以成为新的 Designated Bridge&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样的好处是，如果 Root Port 出问题了，可以及时切换到别的路径上，提高收敛速度。&lt;/p&gt;
&lt;p&gt;相比 STP，RSTP 把 State 简化成了三个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discarding：不转发以太网帧，对应 STP 的 Blocking 和 Listening&lt;/li&gt;
&lt;li&gt;Learning：不转发以太网帧，学习 MAC 地址&lt;/li&gt;
&lt;li&gt;Forwarding：正常工作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vlan&#34;&gt;VLAN&lt;/h2&gt;
&lt;p&gt;STP 和 RSTP 都没有考虑 VLAN，只考虑了交换机的拓扑。但实际上，每个 VLAN 可能是不同的一个拓扑，可能只有部分交换机参与到特定的 VLAN 中，这时候就希望可以做一个 Per VLAN 的 STP。&lt;/p&gt;
&lt;p&gt;Per VLAN 的 STP 相关协议有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STP + VLAN: Per-VLAN Spanning Tree(PVST/PVST+) by Cisco&lt;/li&gt;
&lt;li&gt;RSTP + VLAN: Rapid Per-VLAN Spanning Tree(Rapid PVST/Rapid PVST+) by Cisco&lt;/li&gt;
&lt;li&gt;RSTP + VLAN: Vlan-based Spanning Tree(VBST) by Huawei&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据文档，VBST 和 Rapid PVST 是兼容的，虽然名字不同，但大概率是一样的协议。&lt;/p&gt;
&lt;p&gt;此外还有 Multiple Spanning Tree Protocol(MSTP)，定义在 IEEE 802.1s-2002 标准中，它并不是 Per-VLAN Spanning Tree，而支持跨 VLAN 的生成树计算。&lt;/p&gt;
&lt;p&gt;下面是在不同型号的交换机上观察到支持的协议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dell：stp pvst rstp rapid-pvst mstp&lt;/li&gt;
&lt;li&gt;Huawei：stp rstp mstp vbst&lt;/li&gt;
&lt;li&gt;Mellanox：rst mst rpvst&lt;/li&gt;
&lt;li&gt;Cisco：mst rapid-pvst&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实践中，可以使用 rapid-pvst/vbst/rpvst 的配置。&lt;/p&gt;
&lt;h2 id=&#34;stp-port-type&#34;&gt;STP Port Type&lt;/h2&gt;
&lt;p&gt;在交换机设置中，经常可以看到对 STP Port Type 的支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edge：仅主机&lt;/li&gt;
&lt;li&gt;Network：仅交换机&lt;/li&gt;
&lt;li&gt;Normal：自适应&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;STP 协议在工作的时候，为了防止协议初始化过程中引入了不必要的环路，初始化时是不转发流量的。那么，如果事先知道端口连接的只有主机，没有交换机，就可以跳过这个过程，直接开始进入 Forwarding 状态，此时就可以设置为 Edge 模式。在 Edge 模式下，交换机不会发送 BPDU。&lt;/p&gt;
&lt;p&gt;如果事先知道连接的是交换机，可以选择 Network，但是需要注意的是，Cisco 实现了 Bridge Assurance，也就是说，如果设置为 Network 模式，&lt;strong&gt;必须要求对方也设置为 Network 模式&lt;/strong&gt;，否则就不会工作。&lt;/p&gt;
&lt;p&gt;普适的方法是设置为 Normal，此时就会按照正常的方法来初始化。&lt;/p&gt;
&lt;h2 id=&#34;bpdu-filter&#34;&gt;BPDU Filter&lt;/h2&gt;
&lt;p&gt;BPDU Filter 顾名思义，在特定端口上禁用 STP 协议：不发送 BPDU，收到的 BPDU 都忽略，可以用来限制 STP 工作的范围。&lt;/p&gt;
&lt;h2 id=&#34;virtual-port-channel-vpc&#34;&gt;Virtual Port Channel (vPC)&lt;/h2&gt;
&lt;p&gt;STP 解决了环路的问题，使得网络管理员在设计拓扑的时候，可以添加更多边来提供冗余。但是，STP 的工作原理决定了，冗余链路平时是被禁用的，不会走流量。是否有办法，在提供冗余的同时，又能够利用上冗余链路的带宽？&lt;/p&gt;
&lt;p&gt;针对这个场景，厂商提供了不同的解决方案，这里以 Cisco 的 vPC 作为一个例子来介绍。vPC 就是虚拟的 Port Channel 的意思，Port Channel 就是链路聚合，把两个交换机之间的多条链路当成一个用；Virtual Port Channel(vPC) 则是把 Port Channel 扩展到了跨交换机，二对一，一部分链路连到 Switch 1，剩下的链路连到 Switch 2，但是从外面看过来，等价于只有一个交换机：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/vpc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&#34;https://www.ciscopress.com/articles/article.asp?p=3150966&amp;amp;seqNum=2&#34;&gt;Port Channels and vPCs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这样就实现了对冗余链路的利用。&lt;/p&gt;
&lt;p&gt;在 vPC 的 Peer Switch 模式下，为了让 Switch 3 看到的只是一个交换机，它把 Switch 1 和 Switch 2 伪装成同一个交换机：STP 的 Bridge ID 相同，在 STP 协议中看起来到就是一个 Root Bridge。&lt;/p&gt;
&lt;p&gt;在 Dell 和 Mellanox 交换机中，类似的功能叫做 MLAG(Multi-switch LAG/Multi-chassis LAG)。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>从 libvirtd 迁移到 Proxmox VE</title>
      <link>https://jia.je/software/2023/06/15/libvirtd-migrate-proxmox-ve/</link>
      <pubDate>Thu, 15 Jun 2023 16:03:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2023/06/15/libvirtd-migrate-proxmox-ve/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;之前用 libvirtd + virt-manager 做 Linux 上的虚拟化，好处是比较轻量级，但是远程控制起来比较麻烦，要么通过 RDP 访问 virt-manager 的 UI，要么就用 cockpit 在网页里去配置虚拟机。此时就会比较怀念 VMware ESXi 的网页，但是 ESXi 装完以后，宿主机就很不自由了，很多东西没法自定义。最后就想到在 Debian 上装一个 Proxmox VE，希望得到一个比较好的中间态。&lt;/p&gt;
&lt;h2 id=&#34;proxmox-ve-安装&#34;&gt;Proxmox VE 安装&lt;/h2&gt;
&lt;p&gt;按照官方的 &lt;a href=&#34;https://pve.proxmox.com/wiki/Install_Proxmox_VE_on_Debian_11_Bullseye&#34;&gt;Install Proxmox VE on Debian 11 Bullseye&lt;/a&gt; 去安装即可。我的环境是 Debian Bookworm，把路径改成 Bookworm 的 pvetest 即可。安装的时候可能会遇到一些小问题，例如用 ifupdown2 替换 ifupdown 的时候会检查 config 是否正确等等。安装完以后重启，就可以用 root 用户访问 Proxmox VE 了。&lt;/p&gt;
&lt;h2 id=&#34;迁移-libvirtd-虚拟机&#34;&gt;迁移 libvirtd 虚拟机&lt;/h2&gt;
&lt;p&gt;下一步是迁移 libvirtd 虚拟机。在网上搜索，会看到提供的方法是，在 Proxmox VE 里创建一个同样大小的镜像，然后把原来的 qcow2 的数据复制一份，但是这样复制的时候得存两份数据，而且对稀疏 qcow2 的支持也不太好。&lt;/p&gt;
&lt;p&gt;最后实际的解决办法是：在 Proxmox VE 里创建一个和 qcow2 大小一样的镜像，设置为 qcow2 格式，然后去 &lt;code&gt;/var/lib/vz/images&lt;/code&gt; 路径下找到新建的 qcow2，直接用原来 libvirtd 创建的 qcow2 覆盖过去。目前来看，还没有遇到问题，毕竟 ProxmoxVE 用的也是 QEMU，和 libvirtd 一样。&lt;/p&gt;
&lt;h2 id=&#34;uefi&#34;&gt;UEFI&lt;/h2&gt;
&lt;p&gt;在 Proxmox VE 创建虚拟机，如果选的是 UEFI，由于它会采用新的 EFI vars 镜像，所以原来的 UEFI vars 就丢失了，启动的时候，如果 grub 的 EFI 程序不在标准的路径下，可能会找不到 grub。&lt;/p&gt;
&lt;p&gt;解决办法是，先删掉网卡，然后修改 boot order，把 ESP 分区所在的盘加上去，这样 UEFI 启动的时候直接进 shell，然后在 fs0 里找到 grub 的 EFI 程序再启动。&lt;/p&gt;
&lt;p&gt;在启动 NixOS 的时候，还发现运行 systemd-boot 的 EFI 程序的时候会 Access Denied，查询了一下，是因为 Secure Boot。进入 UEFI Firmware Setup，把 Secure Boot 关掉再重启，就可以正常进入了。&lt;/p&gt;
&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;
&lt;p&gt;在创建虚拟机的时候，如果指定了 Windows 11，就会自动勾选上 TPM 相关的配置。但启动的时候，说 swtpm 报错无法启动，按照错误信息查询了一下，找到了 &lt;a href=&#34;https://github.com/quickemu-project/quickemu/issues/487&#34;&gt;Apparmor &amp;gt; swtpm: Could not open UnixIO socket: Permission denied&lt;/a&gt;：原因是 AppArmor 拦截了 swtpm 的操作，可以用命令来解除 AppArmor 的拦截：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo aa-complain /usr/bin/swtpm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apparmor_parser -r /etc/apparmor.d/usr.bin.swtpm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样处理以后就可以正常启动 Windows 了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LoongArch 初尝试</title>
      <link>https://jia.je/hardware/2023/06/12/try-loongarch/</link>
      <pubDate>Mon, 12 Jun 2023 22:51:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/06/12/try-loongarch/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近应龙芯要求把监控程序移植到了 LoongArch 32 Reduced 架构上，趁此机会体验了一下 LoongArch 相关的软件和系统。&lt;/p&gt;
&lt;h2 id=&#34;在-qemu-中运行-loongarch-arch-linux&#34;&gt;在 QEMU 中运行 LoongArch Arch Linux&lt;/h2&gt;
&lt;p&gt;主页：https://github.com/loongarchlinux&lt;/p&gt;
&lt;p&gt;环境：Debian Bookworm&lt;/p&gt;
&lt;p&gt;QEMU 启动流程，参考&lt;a href=&#34;https://mirrors.wsyu.edu.cn/loongarch/archlinux/images/README.html&#34;&gt;官方文档&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://mirrors.wsyu.edu.cn/loongarch/archlinux/images/archlinux-xfce4-2023.05.10-loong64.qcow2.zst
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;zstd -d archlinux-xfce4-2023.05.10-loong64.qcow2.zst
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://mirrors.wsyu.edu.cn/loongarch/archlinux/images/QEMU_EFI_7.2.fd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以启动 QEMU 7.2.2 了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-system-loongarch64 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -m 4G &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -cpu la464-loongarch-cpu &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -machine virt &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -smp &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -bios ./QEMU_EFI_7.2.fd &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -serial stdio &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -device virtio-gpu-pci &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -net nic -net user &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -device nec-usb-xhci,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;xhci,addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x1b &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -device usb-tablet,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tablet,bus&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;xhci.0,port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -device usb-kbd,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;keyboard,bus&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;xhci.0,port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -hda archlinux-xfce4-2023.05.10-loong64.qcow2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动后，可以正常看到 Xfce4 的界面，用 loongarch:loongarch 登录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/loongarchlinux.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果不想用 UI，可以先在虚拟机里启动 SSHD，再打开 SSH 转发：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in vm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl enable --now sshd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in host&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-system-loongarch64 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -m 4G &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -cpu la464-loongarch-cpu &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -machine virt &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -smp &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -bios ./QEMU_EFI_7.2.fd &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -nographic &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -device virtio-net,netdev&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;net0 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -netdev user,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;net0,hostfwd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tcp::4444-:22 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -hda archlinux-xfce4-2023.05.10-loong64.qcow2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以通过 SSH 访问 LoongArch 虚拟机了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ssh loongarch@localhost -p &lt;span style=&#34;color:#ae81ff&#34;&gt;4444&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loongarch@localhost&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s password:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;loongarch@archlinux ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ uname -a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Linux archlinux 6.3.0-12 &lt;span style=&#34;color:#75715e&#34;&gt;#1 SMP Thu, 27 Apr 2023 12:24:56 +0000 loongarch64 GNU/Linux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;loongarch-架构&#34;&gt;LoongArch 架构&lt;/h2&gt;
&lt;p&gt;LoongArch 分为三个版本：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LoongArch 32 Reduced：精简版本，系统和用户态都是 32 位&lt;/li&gt;
&lt;li&gt;LoongArch 32：系统和用户态都是 32 位&lt;/li&gt;
&lt;li&gt;LoongArch 64：系统是 64 位，用户态可以是 32 位，也可以是 64 位&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;目前上游工具链支持的是 LoongArch 64。&lt;/p&gt;
&lt;p&gt;龙芯杯采用的是 LoongArch 32 Reduced 版本，相比 LoongArch 32 的区别有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;删掉了部分算术指令&lt;/li&gt;
&lt;li&gt;删掉了位操作指令&lt;/li&gt;
&lt;li&gt;删除了边界检查访存指令&lt;/li&gt;
&lt;li&gt;删除了 Atomic 原子指令，只保留了 LL+SC&lt;/li&gt;
&lt;li&gt;删除了部分浮点运算指令&lt;/li&gt;
&lt;li&gt;删除了 IOCSR 访问指令&lt;/li&gt;
&lt;li&gt;删除了软件页表遍历指令&lt;/li&gt;
&lt;li&gt;TLB Refill 异常的相关 CSR（ERA/BADV/PRMD/EHI/ELO0/ELO1/SAVE）不再单独提供一份，而是和其他异常共用&lt;/li&gt;
&lt;li&gt;去掉了 STLB，只保留了 MTLB&lt;/li&gt;
&lt;li&gt;去掉了部分 CSR&lt;/li&gt;
&lt;li&gt;直接映射配置窗口数量砍到了两个&lt;/li&gt;
&lt;li&gt;删除了 RAS，PMU，Watchpoint 和硬件调试功能&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从用户态来看，主要是差了一些运算指令，需要编译器注意生成的指令范围。内核态上删减的比较多。&lt;/p&gt;
&lt;h2 id=&#34;loongarch-32-reduced&#34;&gt;LoongArch 32 Reduced&lt;/h2&gt;
&lt;p&gt;龙芯提供了一些 LoongArch 32 Reduced 的工具链：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GCC + Binutils：&lt;a href=&#34;https://gitee.com/loongson-edu/la32r-toolchains/releases/download/v0.0.2/loongarch32r-linux-gnusf-2022-05-20-x86.tar.gz&#34;&gt;loongarch32r-linux-gnusf-2022-05-20-x86.tar.gz
&lt;/a&gt;，有源码。&lt;/li&gt;
&lt;li&gt;GDB：&lt;a href=&#34;https://gitee.com/loongson-edu/la32r-toolchains/releases/download/v0.0.2/loongarch32r-linux-gnusf-gdb-x86&#34;&gt;loongarch32r-linux-gnusf-gdb-x86&lt;/a&gt;，依赖的动态库较多，建议起一个 CentOS Docker。没有找到源码。&lt;/li&gt;
&lt;li&gt;QEMU：&lt;a href=&#34;https://gitee.com/loongson-edu/la32r-QEMU/releases/download/v0.0.1-alpha/qemu-system-loongarch32_centos_x86_64&#34;&gt;qemu-system-loongarch32_centos_x86_64&lt;/a&gt;，依赖的动态库较多，建议克隆下来自己编译：&lt;code&gt;mkdir build; cd build; ../configure --target-list=loongarch32-softmmu --disable-werror --enable-debug&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 &lt;a href=&#34;https://gitee.com/loongson-edu/la32r-QEMU&#34;&gt;la32r-QEMU&lt;/a&gt; 中运行 &lt;a href=&#34;https://gitee.com/loongson-edu/la32r-Linux/&#34;&gt;la32r-Linux&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://gitee.com/loongson-edu/la32r-Linux/releases/download/v0.2/vmlinux
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-system-loongarch32 -m 4G -kernel vmlinux -M ls3a5k32 -nographic
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loongson32_init: num_nodes &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loongson32_init: node &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; mem 0x100000000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Linux version 5.14.0-rc2-g32a8c74db8fc-dirty &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mengfanrui@5.5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;loongarch32r-linux-gnusf-gcc &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GCC&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 8.3.0, GNU ld &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GNU Binutils&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 2.31.1.20190122&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#26 PREEMPT Tue May 31 13:46:54 CST 2022&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Standard 32-bit Loongson Processor probed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; the link is empty!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Scan bootparam failed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; printk: bootconsole &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;early0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; enabled
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Can&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t find EFI system table.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] start_pfn=0x0, end_pfn=0x8000, num_physpages:0x8000
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] The BIOS Version: (null)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Initrd not found or empty - disabling initrd
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] CPU0 revision is: 00004200 (Loongson-32bit)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Primary instruction cache 8kB, 2-way, VIPT, linesize 16 bytes.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Primary data cache 8kB, 2-way, VIPT, no aliases, linesize 16 bytes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Zone ranges:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000]   DMA32    [mem 0x0000000000000000-0x00000000ffffffff]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000]   Normal   empty
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Movable zone start for each node
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Early memory node ranges
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000]   node   0: [mem 0x0000000000000000-0x0000000007ffffff]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000000007ffffff]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] eentry = 0xa0210000,tlbrentry = 0xa0201000
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Built 1 zonelists, mobility grouping on.  Total pages: 32480
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Kernel command line: earlycon
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Dentry cache hash table entries: 16384 (order: 4, 65536 bytes, linear)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Inode-cache hash table entries: 8192 (order: 3, 32768 bytes, linear)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] mem auto-init: stack:off, heap alloc:off, heap free:off
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Memory: 117732K/131072K available (4926K kernel code, 1114K rwdata, 944K rodata, 2480K init, 473K bss, 13340K reserved, 0K cma-reserved)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] rcu: Preemptible hierarchical RCU implementation.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] rcu:     RCU event tracing is enabled.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000]  Trampoline variant of Tasks RCU enabled.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000]  Tracing variant of Tasks RCU enabled.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] rcu: RCU calculated value of scheduler-enlistment delay is 25 jiffies.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] NR_IRQS: 320
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] ------------[ cut here ]------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] WARNING: CPU: 0 PID: 0 at kernel/time/clockevents.c:38 cev_delta2ns.isra.15+0x17c/0x1c8
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] CPU: 0 PID: 0 Comm: swapper Not tainted 5.14.0-rc2-g32a8c74db8fc-dirty #26
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Stack :
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Call Trace:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] random: get_random_bytes called from print_oops_end_marker+0x30/0x68 with crng_init=0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] ---[ end trace a8581308883ff14d ]---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Constant clock event device register
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] clocksource: Constant: mask: 0xffffffffffffffff max_cycles: 0xffffffffffffffff, max_idle_ns: 9007199254740991 ns
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Constant clock source device register
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.752000] Console: colour dummy device 80x25
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.816000] printk: console [tty0] enabled
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.856000] printk: bootconsole [early0] disabled
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Linux version 5.14.0-rc2-g32a8c74db8fc-dirty (mengfanrui@5.5) (loongarch32r-linux-gnusf-gcc (GCC) 8.3.0, GNU ld (GNU Binutils) 2.31.1.20190122) #26 PREEMPT Tue May 31 13:46:54 CST 2022
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Standard 32-bit Loongson Processor probed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] the link is empty!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Scan bootparam failed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] printk: bootconsole [early0] enabled
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[    0.000000] Can&amp;#39;&lt;/span&gt;t find EFI system table.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; start_pfn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x0, end_pfn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x8000, num_physpages:0x8000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; The BIOS Version: &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;null&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Initrd not found or empty - disabling initrd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; CPU0 revision is: &lt;span style=&#34;color:#ae81ff&#34;&gt;00004200&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Loongson-32bit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Primary instruction cache 8kB, 2-way, VIPT, linesize &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; bytes.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Primary data cache 8kB, 2-way, VIPT, no aliases, linesize &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; bytes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Zone ranges:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;   DMA32    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;mem 0x0000000000000000-0x00000000ffffffff&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;   Normal   empty
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Movable zone start &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each node
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Early memory node ranges
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;   node   0: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;mem 0x0000000000000000-0x0000000007ffffff&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Initmem setup node &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;mem 0x0000000000000000-0x0000000007ffffff&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; eentry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0xa0210000,tlbrentry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0xa0201000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Built &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; zonelists, mobility grouping on.  Total pages: &lt;span style=&#34;color:#ae81ff&#34;&gt;32480&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Kernel command line: earlycon
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Dentry cache hash table entries: &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;order: 4, &lt;span style=&#34;color:#ae81ff&#34;&gt;65536&lt;/span&gt; bytes, linear&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Inode-cache hash table entries: &lt;span style=&#34;color:#ae81ff&#34;&gt;8192&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;order: 3, &lt;span style=&#34;color:#ae81ff&#34;&gt;32768&lt;/span&gt; bytes, linear&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem auto-init: stack:off, heap alloc:off, heap free:off
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Memory: 117732K/131072K available &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;4926K kernel code, 1114K rwdata, 944K rodata, 2480K init, 473K bss, 13340K reserved, 0K cma-reserved&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; SLUB: HWalign&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;64, Order&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0-3, MinObjects&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, CPUs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1, Nodes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; rcu: Preemptible hierarchical RCU implementation.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; rcu:     RCU event tracing is enabled.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  Trampoline variant of Tasks RCU enabled.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  Tracing variant of Tasks RCU enabled.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; rcu: RCU calculated value of scheduler-enlistment delay is &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; jiffies.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; NR_IRQS: &lt;span style=&#34;color:#ae81ff&#34;&gt;320&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ------------&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; cut here &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; WARNING: CPU: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; PID: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; at kernel/time/clockevents.c:38 cev_delta2ns.isra.15+0x17c/0x1c8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; CPU: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; PID: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Comm: swapper Not tainted 5.14.0-rc2-g32a8c74db8fc-dirty &lt;span style=&#34;color:#75715e&#34;&gt;#26&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Stack :
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Call Trace:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; random: get_random_bytes called from print_oops_end_marker+0x30/0x68 with crng_init&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ---&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; end trace a8581308883ff14d &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Constant clock event device register
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; clocksource: Constant: mask: 0xffffffffffffffff max_cycles: 0xffffffffffffffff, max_idle_ns: &lt;span style=&#34;color:#ae81ff&#34;&gt;9007199254740991&lt;/span&gt; ns
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Constant clock source device register
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.752000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Console: colour dummy device 80x25
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.816000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; printk: console &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;tty0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; enabled
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    0.856000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; printk: bootconsole &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;early0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; disabled
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    1.024000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; random: fast init &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    1.240000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Calibrating delay loop... 0.65 BogoMIPS &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;lpj&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1312&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    1.444000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pid_max: default: &lt;span style=&#34;color:#ae81ff&#34;&gt;32768&lt;/span&gt; minimum: &lt;span style=&#34;color:#ae81ff&#34;&gt;301&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    1.860000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Mount-cache hash table entries: &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;order: 0, &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; bytes, linear&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    1.868000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Mountpoint-cache hash table entries: &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;order: 0, &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; bytes, linear&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   10.740000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; rcu: Hierarchical SRCU implementation.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   13.408000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; devtmpfs: initialized
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   15.948000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: &lt;span style=&#34;color:#ae81ff&#34;&gt;7645041785100000&lt;/span&gt; ns
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   15.980000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; futex hash table entries: &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;order: -1, &lt;span style=&#34;color:#ae81ff&#34;&gt;3072&lt;/span&gt; bytes, linear&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   16.948000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; NET: Registered PF_NETLINK/PF_ROUTE protocol family
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   28.832000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pps_core: LinuxPPS API ver. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; registered
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   28.840000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &amp;lt;giometti@linux.it&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; clocksource: Switched to clocksource Constant
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; FS-Cache: Loaded
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; NET: Registered PF_INET protocol family
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; IP idents hash table entries: &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;order: 2, &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; bytes, linear&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; tcp_listen_portaddr_hash hash table entries: &lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;order: 0, &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; bytes, linear&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; TCP established hash table entries: &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;order: 0, &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; bytes, linear&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; TCP bind hash table entries: &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;order: 0, &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; bytes, linear&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; TCP: Hash tables configured &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;established &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; bind 1024&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; UDP hash table entries: &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;order: 0, &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; bytes, linear&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; UDP-Lite hash table entries: &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;order: 0, &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; bytes, linear&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; NET: Registered PF_UNIX/PF_LOCAL protocol family
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; workingset: timestamp_bits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; max_order&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; bucket_order&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; IPMI message handler: version 39.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ipmi device interface
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ipmi_si: IPMI System Interface driver
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ipmi_si: Unable to find any System Interface&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Serial: 8250/16550 driver, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; ports, IRQ sharing enabled
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 1fe001e0.serial: ttyS0 at MMIO 0x1fe001e0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;irq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 18, base_baud &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 2062500&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; is a 16550A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; printk: console &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ttyS0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; enabled
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ls1a-nand driver initializing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ls1a_nand : mtd struct base address is a102b800
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; info-&amp;gt;data_buff&lt;span style=&#34;color:#f92672&#34;&gt;===================&lt;/span&gt;0x81130000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; nand: No NAND device found
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ls1a-nand 1fe78000.nand: failed to scan nand
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ITC MAC 10/100M Fast Ethernet Adapter driver 1.0 init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; libphy: Fixed MDIO Bus: probed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mousedev: PS/2 mouse device common &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; all mice
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; IR MCE Keyboard/mouse protocol handler initialized
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; hid: raw HID events driver &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Jiri Kosina
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; NET: Registered PF_INET6 protocol family
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; random: crng init &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Segment Routing with IPv6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Warning: unable to open an initial console.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Freeing unused kernel image &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;initmem&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; memory: 2480K
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; This architecture does not have kernel memory protection.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;   32.492000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Run /init as init process
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Processing /etc/profile... Done
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/ &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我在 la32r-QEMU 的基础上，把 LoongArch 32 Reduced 的支持部分移植到了 QEMU 8.0.0 上：&lt;a href=&#34;https://github.com/jiegec/qemu/commits/la32r-8.0.0&#34;&gt;https://github.com/jiegec/qemu/commits/la32r-8.0.0&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;虚实地址映射&#34;&gt;虚实地址映射&lt;/h2&gt;
&lt;p&gt;LoongArch 有两种虚实地址映射方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接地址翻译模式（CSR.CRMD.DA=1，CSR.CRMD.PG=0），此时物理地址等于虚拟地址，如果虚拟地址位数更多，则截断高位。&lt;/li&gt;
&lt;li&gt;映射地址翻译模式（CSR.CRMD.DA=0，CSR.CRMD.PG=1），此时按照顺序进行下面的翻译：
&lt;ol&gt;
&lt;li&gt;直接映射模式：CSR.DMW 定义了四个（LA32R 只有两个）窗口，这些窗口内的虚拟地址与物理地址是平移的关系。&lt;/li&gt;
&lt;li&gt;页表映射模式：如果没有匹配上直接映射模式，则会查询 TLB。虽说是页表映射模式，但依然是 MIPS 传统的 TLB 做法。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;相比 MIPS 来讲，LoongArch 的地址映射还是容易理解一些。&lt;/p&gt;
&lt;p&gt;从复位中出来的时候，CSR.CRMD.DA=1，CSR.CRMD.PG=0，意味着是直接地址翻译模式。PC 是 0x1C000000，由于是直接地址翻译模式，所以物理地址也是 0x1C000000。&lt;/p&gt;
&lt;p&gt;在遇到 TLB Refill 异常的时候，处理器会跳到 CSR.TLBRENTRY 的地址，同时进入直接地址翻译模式（CSR.CRMD.DA=1，CSR.CRMD.PG=0），意味着虚拟地址直接对应物理地址，所以此时需要做好相应的准备。LoongArch 提供了 lddir 和 ldpte 指令来加快页表到 TLB 项目的查询性能，例如下面是 &lt;a href=&#34;https://github.com/tianocore/edk2-platforms/blob/4c3e742e931538a1ee6cb3b571b1281e7fba2564/Platform/Loongson/LoongArchQemuPkg/Library/MmuLib/Mmu.S#L37&#34;&gt;EDK2 的 TLB Refill 异常处理函数&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ASM_PFX&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;HandleTlbRefill&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;csrwr&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;LOONGARCH_CSR_TLBRSAVE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;csrrd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;LOONGARCH_CSR_PGD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;lddir&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;T0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#Put pud BaseAddress into T0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;lddir&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;T0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#Put pmd BaseAddress into T0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;lddir&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;T0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#Put pte BaseAddress into T0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;ldpte&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;ldpte&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;tlbfill&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;csrrd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;LOONGARCH_CSR_TLBRSAVE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;ertn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比较有意思的是，csrwr 指令会把旧的 CSR 值写回到通用寄存器里，所以看起来名字是 write，其实是 swap。为了方便查表，还给用户态和内核态分别一个页表基地址：CSR.PGDL，CSR.PGDH，根据异常的高位判断要选择哪一个页表基地址。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tar 文件格式</title>
      <link>https://jia.je/software/2023/05/23/tar-format/</link>
      <pubDate>Tue, 23 May 2023 21:24:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2023/05/23/tar-format/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/software/tar.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;最近在解压 tar.gz 文件的时候，发现如果用 unar 解压，就会出现文件名截断到 100 个字节的问题，而如果用 gnu tar 解压，文件名就是正常的，因此深入研究了一下 Tar 的文件格式。实际上，这是因为早期 tar 格式设计的时候，就设定了路径最长 100 字节的限制，后来的扩展解决了这个问题，但是 unar 没能正确地识别扩展，导致解压路径出错。&lt;/p&gt;
&lt;h1 id=&#34;tar-文件格式&#34;&gt;Tar 文件格式&lt;/h1&gt;
&lt;p&gt;Tar 的文件格式比较简单，就是一系列的 File Entry，最后是两个 512 字节的全 0，表示结束。每个 File Entry 由头部和数据组成，头部的格式是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* tar Header Block, from POSIX 1003.1-1990.  */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* POSIX header.  */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; posix_header
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{                              &lt;span style=&#34;color:#75715e&#34;&gt;/* byte offset */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; name[&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;];               &lt;span style=&#34;color:#75715e&#34;&gt;/*   0 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; mode[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];                 &lt;span style=&#34;color:#75715e&#34;&gt;/* 100 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; uid[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];                  &lt;span style=&#34;color:#75715e&#34;&gt;/* 108 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; gid[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];                  &lt;span style=&#34;color:#75715e&#34;&gt;/* 116 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; size[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;];                &lt;span style=&#34;color:#75715e&#34;&gt;/* 124 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; mtime[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;];               &lt;span style=&#34;color:#75715e&#34;&gt;/* 136 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; chksum[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];               &lt;span style=&#34;color:#75715e&#34;&gt;/* 148 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; typeflag;                &lt;span style=&#34;color:#75715e&#34;&gt;/* 156 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; linkname[&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;];           &lt;span style=&#34;color:#75715e&#34;&gt;/* 157 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; magic[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;];                &lt;span style=&#34;color:#75715e&#34;&gt;/* 257 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; version[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];              &lt;span style=&#34;color:#75715e&#34;&gt;/* 263 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; uname[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;];               &lt;span style=&#34;color:#75715e&#34;&gt;/* 265 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; gname[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;];               &lt;span style=&#34;color:#75715e&#34;&gt;/* 297 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; devmajor[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];             &lt;span style=&#34;color:#75715e&#34;&gt;/* 329 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; devminor[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];             &lt;span style=&#34;color:#75715e&#34;&gt;/* 337 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; prefix[&lt;span style=&#34;color:#ae81ff&#34;&gt;155&lt;/span&gt;];             &lt;span style=&#34;color:#75715e&#34;&gt;/* 345 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#75715e&#34;&gt;/* 500 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;来源：&lt;a href=&#34;https://www.gnu.org/software/tar/manual/html_node/Standard.html&#34;&gt;Basic Tar Format&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以看到，就是一系列的 char 数组，里面的很多数字字段，例如 mode，uid 和 gid 等，都是用 ASCII 码写的。由于头部需要对齐到 512 字节，所以实际上后面还有 12 字节的 padding。&lt;/p&gt;
&lt;p&gt;头部的 512 字节结束后，紧接着就是文件的内容，内容的大小在头部的 size 字段已经保存，把字符串当成 8 进制数转换，就可以得到文件长度。文件也要对齐到 512 字节，所以文件后面还有若干个 0 作为 padding。&lt;/p&gt;
&lt;p&gt;总结一下，Tar 文件的格式就是：&lt;code&gt;(头部，数据)*结尾&lt;/code&gt;。每一个部分都对齐到 512 字节。&lt;/p&gt;
&lt;h1 id=&#34;pax-扩展&#34;&gt;PAX 扩展&lt;/h1&gt;
&lt;p&gt;如果仔细观察，会发现上面的 &lt;code&gt;posix_header&lt;/code&gt; 里面，&lt;code&gt;name&lt;/code&gt; 字段只有 100 个字节，意味着如果文件路径特别长，那就放不下，只能截断了。为了解决这个问题，Tar 引入了 PAX 扩展。&lt;/p&gt;
&lt;p&gt;具体来说，PAX 扩展以特殊的文件形式存在。例如要记录一个名字很长的文件 &lt;code&gt;&#39;X&#39;*101&lt;/code&gt;，实际上 Tar 中记录了两个文件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PaxHeader：特殊的 PAX 文件，不对应实际的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;X&#39;*100&lt;/code&gt;：文件名被截断，其他不变&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个 PaxHeader 在解压的时候，不会生成实际的文件。它的内容是一些键值对，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;123 path=XXXXXXXXXXXXXXXXX...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;格式是：&lt;code&gt;length key=value\n&lt;/code&gt;，然后可以有多个这样的键值对。这样就可以解决 &lt;code&gt;posix_header&lt;/code&gt; 里名字长度限制的问题：只要在 PaxHeader 文件里，保存一个 key 为 path，value 为实际名字的信息。那么 tar 在看到 PaxHeader 的时候，记录下来，再遇到下一个文件的时候，就知道要用 PaxHeader 中的 path，而不是保存在 &lt;code&gt;posix_header&lt;/code&gt; 中的 &lt;code&gt;name[100]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;类似地，PaxHeader 还可以存很多其他 &lt;code&gt;posix_header&lt;/code&gt; 中没有的信息，例如 &lt;code&gt;atime&lt;/code&gt;、&lt;code&gt;ctime&lt;/code&gt; 和 &lt;code&gt;uid&lt;/code&gt; 等等。完整列表可以参考 &lt;a href=&#34;https://www.ibm.com/docs/en/zos/2.4.0?topic=descriptions-pax-interchange-portable-archives#r4paxsh__pxchk&#34;&gt;Extended header keywords&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;bard&#34;&gt;Bard&lt;/h1&gt;
&lt;p&gt;Bard 讲解 Tar 格式：&lt;/p&gt;
&lt;p&gt;A tar file is an archive file format that is used to store a collection of files in a single file. The tar format is a standard format on Unix-like operating systems and is also supported by many other operating systems.&lt;/p&gt;
&lt;p&gt;A tar file consists of a series of blocks, each of which contains 512 bytes of data. Each block contains a header and a body. The header contains information about the file, such as the file name, the file size, and the file permissions. The body contains the actual contents of the file.&lt;/p&gt;
&lt;p&gt;The tar format is a simple and efficient format for storing files. It is also a portable format, which means that tar files can be moved from one computer to another without any problems.&lt;/p&gt;
&lt;p&gt;Here is a more detailed description of the tar file format:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The header of a tar file is 512 bytes long. It contains the following information:
&lt;ul&gt;
&lt;li&gt;The name of the file&lt;/li&gt;
&lt;li&gt;The size of the file&lt;/li&gt;
&lt;li&gt;The permissions of the file&lt;/li&gt;
&lt;li&gt;The modification time of the file&lt;/li&gt;
&lt;li&gt;The owner of the file&lt;/li&gt;
&lt;li&gt;The group of the file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The body of a tar file contains the actual contents of the file. The body is padded to a multiple of 512 bytes.&lt;/li&gt;
&lt;li&gt;Tar files can be compressed using a variety of compression algorithms, such as gzip, bzip2, and xz.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tar files are a versatile format that can be used for a variety of purposes. They are commonly used for backing up files, distributing software, and archiving files.&lt;/p&gt;
&lt;p&gt;Here are some of the benefits of using tar files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tar files are a standard format that is supported by many operating systems.&lt;/li&gt;
&lt;li&gt;Tar files are a portable format, which means that they can be moved from one computer to another without any problems.&lt;/li&gt;
&lt;li&gt;Tar files can be compressed using a variety of compression algorithms, which can significantly reduce the size of the archive.&lt;/li&gt;
&lt;li&gt;Tar files can be easily created and managed using the tar command-line tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need to store a collection of files in a single file, then a tar file is a good option to consider.&lt;/p&gt;
&lt;p&gt;Bard 讲解 PAX 扩展：&lt;/p&gt;
&lt;p&gt;The POSIX 1003.1-2001 (pax) format for tar archives supports file names longer than 256 characters by using a different format for storing file names and metadata than the traditional ustar format. In the pax format, file names are stored as null-terminated strings, which means that they can be any length up to the maximum file size supported by the underlying file system. The metadata for each file is also stored in a separate record, which allows for more flexibility in the types of metadata that can be stored.&lt;/p&gt;
&lt;p&gt;To create a tar archive in the pax format, you can use the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tar cf - --format=pax /path/to/files
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To extract a tar archive in the pax format, you can use the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tar xvf - --format=pax archive.tar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The pax format is a more flexible and powerful format than the ustar format, and it is recommended for use when creating or extracting tar archives that may contain file names longer than 256 characters.&lt;/p&gt;
&lt;p&gt;Here are some additional details about the pax format:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;File names are stored as null-terminated strings, which means that they can be any length up to the maximum file size supported by the underlying file system.&lt;/li&gt;
&lt;li&gt;The metadata for each file is stored in a separate record, which allows for more flexibility in the types of metadata that can be stored.&lt;/li&gt;
&lt;li&gt;The pax format is supported by most modern tar implementations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some examples of file names that can be stored in the pax format:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;This is a file name with more than 256 characters.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;/path/to/a/file/with/a/long/name.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;file.with.spaces.in.its.name&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The pax format is a good choice for storing file names that may be long, contain special characters, or be stored in a directory hierarchy with a long path.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Docker 部署 OpenLDAP</title>
      <link>https://jia.je/software/2023/05/13/openldap-in-docker/</link>
      <pubDate>Sat, 13 May 2023 15:57:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2023/05/13/openldap-in-docker/</guid>
      <description>&lt;h2 id=&#34;docker-compose&#34;&gt;Docker-Compose&lt;/h2&gt;
&lt;p&gt;OpenLDAP 可以用现成的 Docker 镜像：&lt;a href=&#34;https://hub.docker.com/r/bitnami/openldap/&#34;&gt;bitnami/openldap&lt;/a&gt;，配合 Docker-Compose 进行部署：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;openldap&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bitnami/openldap:2.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1389:1389&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# LDAP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;LDAP_ROOT=dc=example,dc=com&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;env_file&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.env&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# admin password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./data:/bitnami/openldap&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# data storage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;admin 密码建议单独保存，例如写在 &lt;code&gt;.env&lt;/code&gt; 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LDAP_ADMIN_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;12345678REDACTED
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# prepare data folder&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo rm -rf data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chown 1001:root data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# launch docker compose&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo docker-compose up -d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以通过 ldapsearch 列出所有对象，默认情况下不需要登录（Bind DN），可以只读访问：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# search elements under dc=example,dc=com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -x: Simple authentication without user and password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -b dc=example,dc=com: base dn for search&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -H: ldap server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldapsearch -x -b dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com -H ldap://localhost:1389/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# user01, users, example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dn: cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user01,ou&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;users,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cn: User1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cn: user01
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sn: Bar1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: inetOrgPerson
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: posixAccount
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: shadowAccount
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userPassword:: Yml0bmFtaTE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uid: user01
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uidNumber: &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gidNumber: &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;homeDirectory: /home/user01
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# user02, users, example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dn: cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user02,ou&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;users,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cn: User2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cn: user02
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sn: Bar2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: inetOrgPerson
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: posixAccount
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: shadowAccount
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userPassword:: Yml0bmFtaTI&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uid: user02
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uidNumber: &lt;span style=&#34;color:#ae81ff&#34;&gt;1001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gidNumber: &lt;span style=&#34;color:#ae81ff&#34;&gt;1001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;homeDirectory: /home/user02
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 Docker 镜像初始化了两个用户，仅供测试用，它用的密码比较弱。&lt;/p&gt;
&lt;h1 id=&#34;tls&#34;&gt;TLS&lt;/h1&gt;
&lt;p&gt;接着，给 OpenLDAP 配置 TLS。首先用 OpenSSL 生成 CA 和证书：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://arminreiter.com/2022/01/create-your-own-certificate-authority-ca-using-openssl/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# setup CA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf certs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p certs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl genrsa -out certs/ldap_ca.key &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl req -x509 -new -nodes -key certs/ldap_ca.key -sha256 -days &lt;span style=&#34;color:#ae81ff&#34;&gt;1826&lt;/span&gt; -out certs/ldap_ca.crt -subj &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/CN=Example Com CA/ST=Somewhere/L=Earth/O=ExampleOrg&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# setup cert&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# CN must match hostname&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl req -new -nodes -out certs/ldap_server.csr -newkey rsa:4096 -keyout certs/ldap_server.key -subj &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/CN=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;hostname&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/ST=Somewhere/L=Earth/O=ExampleOrg&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl x509 -req -in certs/ldap_server.csr -CA certs/ldap_ca.crt -CAkey certs/ldap_ca.key -CAcreateserial -out certs/ldap_server.crt -days &lt;span style=&#34;color:#ae81ff&#34;&gt;730&lt;/span&gt; -sha256
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chown -R 1001:root certs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后修改 docker-compose.yml：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;openldap&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bitnami/openldap:2.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1389:1389&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# LDAP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1636:1636&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# LDAPS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;LDAP_ROOT=dc=example,dc=com&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;LDAP_ENABLE_TLS=yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;LDAP_TLS_CERT_FILE=/opt/bitnami/openldap/certs/ldap_server.crt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;LDAP_TLS_KEY_FILE=/opt/bitnami/openldap/certs/ldap_server.key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;LDAP_TLS_CA_FILE=/opt/bitnami/openldap/certs/ldap_ca.crt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;env_file&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.env&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# admin password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./data:/bitnami/openldap&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# data storage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./certs:/opt/bitnami/openldap/certs&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再重新启动，就可以用 LDAPS 来访问 LDAP Server：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# LDAP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldapsearch -x -b dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com -H ldap://localhost:1389/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# LDAPS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ LDAPTLS_CACERT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PWD/certs/ldap_ca.crt ldapsearch -x -b dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com -H ldaps://localhost:1636/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;修改密码&#34;&gt;修改密码&lt;/h1&gt;
&lt;p&gt;管理员修改用户的密码，使用 ldappasswd 修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Generate a new password for cn=user01,ou=users,dc=example,dc=com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -W: prompt for bind(login) password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -D cn=admin,dc=example,dc=com: bind(login) to admin user&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldappasswd -x -W -D cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;admin,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com -H ldap://localhost:1389/ cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user01,ou&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;users,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Enter LDAP Password:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;New password: REDACTED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Set password for for cn=user01,ou=users,dc=example,dc=com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -S: prompt for new password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldappasswd -x -W -S -D cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;admin,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com -H ldap://localhost:1389/ cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user01,ou&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;users,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;New password:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Re-enter new password:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Enter LDAP Password:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认情况下，用户没有权限修改自己的密码。可以进入 Docker 容器，修改数据库的权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo docker-compose exec openldap bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Authenticate using local user&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openldap$ ldapmodify -Y EXTERNAL -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ldapi:///&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SASL/EXTERNAL authentication started
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SASL username: gidNumber&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0+uidNumber&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1001,cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;peercred,cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;external,cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SASL SSF: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Paste the following lines&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Allow user to change its own password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dn: olcDatabase&lt;span style=&#34;color:#f92672&#34;&gt;={&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;mdb,cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;changetype: modify
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;replace: olcAccess
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;olcAccess: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;to attrs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;userPassword
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  by anonymous auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  by self write
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  by * none
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;olcAccess: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;to *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  by * read
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时用户就可以自己修改密码了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldappasswd -x -W -S -D cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user01,ou&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;users,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com -H ldap://localhost:1389/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;New password:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Re-enter new password:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Enter LDAP Password:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并且 userPassword 也对非 admin 用户被隐藏了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldapsearch -x -b dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com -H ldap://localhost:1389/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# user01, users, craft.cn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dn: cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user01,ou&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;users,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;craft,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cn: User1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cn: user01
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sn: Bar1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: inetOrgPerson
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: posixAccount
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: shadowAccount
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uid: user01
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uidNumber: &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gidNumber: &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;homeDirectory: /home/user01
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;ldap-ui&#34;&gt;ldap-ui&lt;/h1&gt;
&lt;p&gt;如果想要 Web 管理界面，可以用 ldap-ui，在 docker-compose 添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ldap-ui&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dnknth/ldap-ui&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;5000:5000&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;links&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;openldap&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;LDAP_URL=ldap://openldap:1389/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;BASE_DN=dc=example,dc=com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;BIND_PATTERN=cn=%s,dc=example,dc=com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问 localhost:5000，就可以用 admin 用户登录了。如果想用其他用户登录，由于 BIND 路径多了一级 ou=users，所以要么修改 BIND_PATTERN，要么用户名要写成 user01,ou=users&lt;/p&gt;
&lt;h1 id=&#34;权限管理&#34;&gt;权限管理&lt;/h1&gt;
&lt;p&gt;前面修改了权限，从而允许用户修改自己的密码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo docker-compose exec openldap bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Authenticate using local user&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openldap$ ldapmodify -Y EXTERNAL -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ldapi:///&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SASL/EXTERNAL authentication started
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SASL username: gidNumber&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0+uidNumber&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1001,cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;peercred,cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;external,cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SASL SSF: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Paste the following lines&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Allow user to change its own password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dn: olcDatabase&lt;span style=&#34;color:#f92672&#34;&gt;={&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;mdb,cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;changetype: modify
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;replace: olcAccess
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;olcAccess: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;to attrs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;userPassword
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  by anonymous auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  by self write
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  by * none
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;olcAccess: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;to *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  by * read
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;核心部分的含义如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;to attrs=userPassword：针对 userPassword 这个字段，任何人都可以认证，用户自己可以写，其他人没有权限&lt;/li&gt;
&lt;li&gt;to *：任何人可以读&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果想要进一步收缩权限，例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不登录看不到任何信息&lt;/li&gt;
&lt;li&gt;普通用户登录后，只能读取自己的信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么，可以写出如下的配置：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-ldif&#34; data-lang=&#34;ldif&#34;&gt;dn: olcDatabase={2}mdb,cn=config
changetype: modify
replace: olcAccess
olcAccess: {0}to attrs=userPassword
  by anonymous auth
  by self write
  by * none
olcAccess: {1}to *
  by self read
  by * none
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于从前往后匹配，找到第一个匹配就不看后面的规则的原因，更精确的过滤要放在前面。&lt;/p&gt;
&lt;h1 id=&#34;ldap-用于其他软件的认证&#34;&gt;LDAP 用于其他软件的认证&lt;/h1&gt;
&lt;p&gt;LDAP 很重要的一个用途是用于其他软件的认证，一般来说有两种用法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LDAP 自身带了认证的功能（Simple Auth），那么就需要把用户名（user01）映射到 LDAP 的 Bind DN 上（cn=user01,ou=users,cn=example,cn=com），Bind DN 和密码会传输到 LDAP Server；在 LDAP Server 上密码会与用户的 userPassword 进行匹配，如果 Bind 成功，就认为用户登录成功&lt;/li&gt;
&lt;li&gt;LDAP 附带了列用户的功能（Search），那么这个时候，一般是要创建一个用于搜索的 DN 来控制权限；然后其他软件 Bind 到用于搜索的 DN 上，搜索用户，把用户信息同步到本地&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一种使用方法要求用户和 DN 有直接映射关系，例如上面的 &lt;code&gt;cn=%s,ou=users,cn=example=com&lt;/code&gt;，好处是比较简单，缺点是要把所有用户放在同一个 DN 下面，不适合比较复杂的组织结构。&lt;/p&gt;
&lt;p&gt;第二种使用方法，则是其他软件先进行搜索（搜索本身可能需要 Bind 到用于搜索的 DN 上），找到匹配用户名或者邮箱的用户，再进行 Simple Auth。这样的好处是灵活性更好，用户不需要放在同一个 DN 下面，可以有更多层级。&lt;/p&gt;
&lt;p&gt;由于使用了 Simple Auth，密码会明文发送给 LDAP Server，因此为了安全性，建议配置 TLS。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 JLink 操作 SPI NOR Flash</title>
      <link>https://jia.je/hardware/2023/05/08/jlink-spi-nor-flash/</link>
      <pubDate>Mon, 08 May 2023 23:18:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/05/08/jlink-spi-nor-flash/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近设计了一款 &lt;a href=&#34;https://github.com/jiegec/PMOD-SPI-NOR-FLASH&#34;&gt;PMOD SPI NOR Flash&lt;/a&gt; 扩展板，搭载了 W25Q128 SPI NOR Flash 芯片。在 jlc 生产回来以后，通过 JLink 连接到电脑上进行测试。&lt;/p&gt;
&lt;h2 id=&#34;连接到-jlink&#34;&gt;连接到 JLink&lt;/h2&gt;
&lt;p&gt;JLink 提供了 20 pin 的引脚，如果要连接 SPI，那么引脚定义如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://c.a.segger.com/fileadmin/images/products/J-Link/Software/pinout-spi-20-pin.gif.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图源 &lt;a href=&#34;https://www.segger.com/products/debug-probes/j-link/tools/j-flash-spi/&#34;&gt;JFlash SPI 文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;连接的时候，至少需要连接以下的引脚：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JLink GND(pin 4/6/8/10) - SPI NOR Flash GND&lt;/li&gt;
&lt;li&gt;JLink VTref(pin 1) - 3.3V - SPI NOR Flash VCC&lt;/li&gt;
&lt;li&gt;JLink CLK(pin 9) - SPI NOR Flash CLK&lt;/li&gt;
&lt;li&gt;JLink DI(pin 5) - SPI NOR Flash D0/DI/MOSI&lt;/li&gt;
&lt;li&gt;JLink DO(pin 13) - SPI NOR Flash D1/DO/MISO&lt;/li&gt;
&lt;li&gt;JLink nCS(pin 7) - SPI NOR Flash CS#&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于 SPI NOR Flash 无法接受 5V 的电压，所以要用额外的 3.3V 作为电源，同时接到 JLink 的 VTref 引脚上。&lt;/p&gt;
&lt;p&gt;JFlash SPI 还支持 Quad SPI 模式，可以在它的文档里找到连接方式。&lt;/p&gt;
&lt;h2 id=&#34;jflash-spi&#34;&gt;JFlash SPI&lt;/h2&gt;
&lt;p&gt;连接了以后，就可以在 JFlash SPI 软件中识别出 SPI Flash 了：Flash ID 0xEF 40 18。有意思的是，JFlash SPI 软件会认为这个芯片是 Infineon 的 S25FL128K，而不是 Winbond 的 W25Q128。发邮件问了一下 SEGGER，得到的回复是这两个芯片的 Flash ID 都是 0xEF4018，所以无法区分。&lt;/p&gt;
&lt;h2 id=&#34;flashrom&#34;&gt;flashrom&lt;/h2&gt;
&lt;p&gt;如果想用开源软件，可以用 flashrom，编译的时候打开 jlink 支持，就可以用 flashrom 来通过 JLink 读写 SPI NOR Flash。&lt;/p&gt;
&lt;p&gt;但是 flashrom 的 cs 信号并不是上面的 nCS(pin 7)，而是 nRESET(pin 15，默认) 或者 nTRST(pin 3，可以添加参数 &lt;code&gt;cs=trst&lt;/code&gt;)。这就导致如果想用 flashrom 的话，就要修改引脚连接方式，把 pin 15 连接到 SPI NOR Flash 的 CS# 上。修改连接以后，就可以检测到芯片了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ flashrom --programmer jlink_spi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flashrom v1.3.0 on Darwin 22.4.0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arm64&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flashrom is free software, get the source code at https://flashrom.org
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Calibrating delay loop... OK.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Found Winbond flash chip &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;W25Q128.V&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; kB, SPI&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; on jlink_spi.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This flash part has status UNTESTED &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; operations: WP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The test status of this chip may have been updated in the latest development
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;version of flashrom. If you are running the latest development version,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;please email a report to flashrom@flashrom.org &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; any of the above operations
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;work correctly &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you with this flash chip. Please include the flashrom log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; all operations you tested &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;see the man page &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; details&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, and mention
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which mainboard or programmer you tested in the subject line.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thanks &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; your help!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;No operations were specified.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了解决这个问题，我给 &lt;a href=&#34;https://review.coreboot.org/c/flashrom/+/75011&#34;&gt;flashrom&lt;/a&gt; 提交了 patch，如果合并了，就可以支持 &lt;code&gt;--programmer jlink_spi:cs=tms&lt;/code&gt; 选项，此时就不需要修改连接方式了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How a Linux 6.2.13 BUG stops Vivado from recognizing FPGA</title>
      <link>https://jia.je/software/2023/05/06/linux-regression-vivado-en/</link>
      <pubDate>Sat, 06 May 2023 22:16:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2023/05/06/linux-regression-vivado-en/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://jia.je/software/2023/05/06/linux-regression-vivado/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TLDR&lt;/h2&gt;
&lt;p&gt;In short, the commit introduced by Linux 6.2.13:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;commit 0d30989fe9a176565d360376d4bc2ea1c61cbbac
Author: Liam R. Howlett &amp;lt;Liam.Howlett@oracle.com&amp;gt;
Date:   Fri Apr 14 14:59:19 2023 -0400

    mm/mmap: regression fix for unmapped_area{_topdown}
    
    commit 58c5d0d6d522112577c7eeb71d382ea642ed7be4 upstream.
    
    The maple tree limits the gap returned to a window that specifically fits
    what was asked.  This may not be optimal in the case of switching search
    directions or a gap that does not satisfy the requested space for other
    reasons.  Fix the search by retrying the operation and limiting the search
    window in the rare occasion that a conflict occurs.
    
    Link: https://lkml.kernel.org/r/20230414185919.4175572-1-Liam.Howlett@oracle.com
    Fixes: 3499a13168da (&amp;#34;mm/mmap: use maple tree for unmapped_area{_topdown}&amp;#34;)
    Signed-off-by: Liam R. Howlett &amp;lt;Liam.Howlett@oracle.com&amp;gt;
    Reported-by: Rick Edgecombe &amp;lt;rick.p.edgecombe@intel.com&amp;gt;
    Cc: &amp;lt;stable@vger.kernel.org&amp;gt;
    Signed-off-by: Andrew Morton &amp;lt;akpm@linux-foundation.org&amp;gt;
    Signed-off-by: Greg Kroah-Hartman &amp;lt;gregkh@linuxfoundation.org&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While fixing a BUG, a new BUG is introduced, causing MAP_32BIT to fail to work sometimes, and Xilinx&amp;rsquo;s Digilent driver uses this parameter, causing mmap to fail and unable to recognize the FPGA.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;The background is that after @vowstar upgraded the kernel to 6.2.14, he found that Vivado could not find the FPGA. But restarting and switching to 6.2.12, it works.&lt;/p&gt;
&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;Because the kernel has been upgraded, the first reaction is whether it is a problem with the ftdi_sio driver. Comparing the dmesg logs of the two kernel versions, We found that Linux 6.2.12 will display &lt;code&gt;ftdi_sio: device disconnected&lt;/code&gt; message: this is because the FPGA programmer has a built-in FTDI chip, which supports multiple modes. By default, after the kernel detects the usb device, the ftdi_sio driver will initialize the FTDI chip to the serial port mode to create a &lt;code&gt;/dev/ttyUSB*&lt;/code&gt; device; and Vivado needs to use the MPSSE mode to communicate with the FPGA using the JTAG protocol. MPSSE mode conflicts with the serial port mode, so Vivado has to detach the kernel module so that it no longer occupies the USB device, and then let the FTDI chip enter MPSSE mode.&lt;/p&gt;
&lt;p&gt;Following this line of thought, the first thing that comes to mind is the permission issue: by default, the USB device permissions are strict, so when Vivado is installed, it will install udev rules, to change the permissions of the usb device file of the Digilent programmer to 666, so that all users are allowed to access USB devices. But after checking, the device file permissions under /dev/bus/usb are correct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kernel 6.2.12: crw-rw-rw- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root usb 189, &lt;span style=&#34;color:#ae81ff&#34;&gt;271&lt;/span&gt; May  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; 15:31 /dev/bus/usb/003/016
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kernel 6.2.14: crw-rw-rw- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root usb 189, &lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt; May  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; 15:32 /dev/bus/usb/003/016
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At this time, we feel very strange. Only the kernel has been updated, and nothing else has changed. Why is the behavior different? So we looked through the ChangeLog of the Linux kernel, because 6.2.12 is good, while 6.2.14 is not working, so you only need to look at the changelog between the two:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cdn.kernel.org/pub/linux/kernel/v6.x/ChangeLog-6.2.13&#34;&gt;6.2.13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cdn.kernel.org/pub/linux/kernel/v6.x/ChangeLog-6.2.14&#34;&gt;6.2.14&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Searching for keywords such as ftdi or usb, only one commit seems to be related: &lt;code&gt;USB: serial: option: add UNISOC vendor and TOZED LT70C product&lt;/code&gt;, but after a closer look, it only adds a new VID/PID, and it has no conflict with Digilent programmer.&lt;/p&gt;
&lt;p&gt;At this time, we feel that it is not a Linux problem. We continue to control the variables, by seeing if there is something wrong with the FTDI chip. At this time, OpenOCD was used to see if OpenOCD can configure the FTDI chip to enter MPSSE mode and find the FPGA. We tried it, it worked, ftdi_sio detached normally, and OpenOCD also found FPGA.&lt;/p&gt;
&lt;p&gt;But at this time, when Vivado is opened again, the FPGA is still not found, indicating that it is not a problem in MPSSE mode. Considering that the process that Vivado accesses the hardware is hw_server, we wonder if we can look at the log of hw_server.&lt;/p&gt;
&lt;p&gt;Run hw_server, printing all log types:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ hw_server -L- -l alloc,eventcore,waitpid,events,protocol,context,children,discovery,asyncreq,proxy,tcflog,elf,stack,plugin,shutdown,disasm,jtag2,jtag,pcie,slave,dpc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here &lt;code&gt;-L-&lt;/code&gt; means to output the log to stderr, and the following &lt;code&gt;-l&lt;/code&gt; string of parameters are various log switches. It is ran on both kernels, and the difference is found by comparing the logs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Success &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.2.12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TCF 08:39:37.247: jtagpoll: add node 0xxxxxxxx&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;jsn-JTAG-SMT2NC-XXXXXXXXXXXX&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TCF 08:39:37.247: Node 000000FF, added jsn-JTAG-SMT2NC-XXXXXXXXXXXX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Failed &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.2.14&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TCF 08:45:12.385: jtagpoll: cannot get port description list: ftdidb_lock failed: FTDMGR wasn&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t properly initialized
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TCF 08:45:12.391: jtagpoll: cannot get port description list: JTAG device enumeration failed: Initialization of the DPCOMM library failed.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally saw the error message: &lt;code&gt;jtagpoll: cannot get port description list: ftdidb_lock failed: FTDMGR wasn&#39;t properly initialized&lt;/code&gt;. Use it as a keyword to search, and sure enough, someone else has encountered the same problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.xilinx.com/s/article/000033531?language=en_US&#34;&gt;XSDB fails with &amp;ldquo;ftdidb_lock failed: FTDMGR wasn&amp;rsquo;t properly initialized&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.t123yh.xyz:2/index.php/archives/1013&#34;&gt;Linux 多用户环境下 Vivado 无法连接 Digilent JTAG 适配器的解决方法 (Solution to Vivado unable to connect to Digilent JTAG adapter in Linux multi-user environment)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We tried the solution from the first post, it didn&amp;rsquo;t work. The problem pointed out in the second article is that in a multi-user environment, multiple users use the same file, and then there is a permission problem, so the file must be deleted. We tried the method in the second document, but it didn&amp;rsquo;t solve the problem.&lt;/p&gt;
&lt;p&gt;But the second article gives a debugging method: run the dadutil program provided by Digilent to see if it can recognize the programmer, and the problem reappears:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ERROR: DmgrSetNetworkEnumTimeout failed, erc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3090&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Found &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; device&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Found &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; device&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ERROR: DmgrSetNetworkEnumTimeout failed, erc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3090&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have tried many times here and found that there is a one-third probability of failure, but it is enough to explain why hw_server does not work: there is a high probability that it also calls the code provided by Digilent and gets the same result, so it fails.&lt;/p&gt;
&lt;p&gt;The second article above used strace to find the problem, so we use strace to locate the error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ strace dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AT_FDCWD, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/dev/shm/digilent-adept2-mtx-ftdmgr&amp;#34;&lt;/span&gt;, O_RDWR|O_NOFOLLOW|O_CLOEXEC&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ftruncate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;7, 4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                         &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 4, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_32BIT, 7, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -1 ENOMEM &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cannot allocate memory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;close&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;7&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                                &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem is that ENOMEM is returned, which is very strange, because &lt;code&gt;/dev/shm&lt;/code&gt; is a tmpfs, and there is still a lot of space, how can it return ENOMEM?&lt;/p&gt;
&lt;h2 id=&#34;found-the-culprit&#34;&gt;Found the culprit&lt;/h2&gt;
&lt;p&gt;Continue to research according to new clues: mmap returns an error that should not be returned, is that 6.2.13 or 6.2.14 introduced related changes? After checking, there are really:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# https://cdn.kernel.org/pub/linux/kernel/v6.x/ChangeLog-6.2.13
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;commit 0d30989fe9a176565d360376d4bc2ea1c61cbbac
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Author: Liam R. Howlett &amp;lt;Liam.Howlett@oracle.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Date:   Fri Apr 14 14:59:19 2023 -0400
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mm/mmap: regression fix for unmapped_area{_topdown}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    commit 58c5d0d6d522112577c7eeb71d382ea642ed7be4 upstream.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    The maple tree limits the gap returned to a window that specifically fits
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    what was asked.  This may not be optimal in the case of switching search
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    directions or a gap that does not satisfy the requested space for other
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    reasons.  Fix the search by retrying the operation and limiting the search
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    window in the rare occasion that a conflict occurs.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Link: https://lkml.kernel.org/r/20230414185919.4175572-1-Liam.Howlett@oracle.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Fixes: 3499a13168da (&amp;#34;mm/mmap: use maple tree for unmapped_area{_topdown}&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Signed-off-by: Liam R. Howlett &amp;lt;Liam.Howlett@oracle.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Reported-by: Rick Edgecombe &amp;lt;rick.p.edgecombe@intel.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Cc: &amp;lt;stable@vger.kernel.org&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Signed-off-by: Andrew Morton &amp;lt;akpm@linux-foundation.org&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Signed-off-by: Greg Kroah-Hartman &amp;lt;gregkh@linuxfoundation.org&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is related to mmap, click on the &lt;a href=&#34;https://lkml.kernel.org/r/20230414185919.4175572-1-Liam.Howlett@oracle.com&#34;&gt;email link&lt;/a&gt; to have a look, and found that this commit was proposed to fix a BUG, but introduced a new BUG:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Re: [PATCH v2] mm/mmap: Regression fix for unmapped_area{_topdown}
  2023-04-14 18:59   ` [PATCH v2] &amp;#34; Liam R. Howlett
  2023-04-14 19:09     ` Andrew Morton
@ 2023-04-29 14:32     ` Tad
  2023-04-30 22:41       ` Michael Keyes
  1 sibling, 1 reply; 18+ messages in thread
From: Tad @ 2023-04-29 14:32 UTC (permalink / raw)
  To: liam.howlett; +Cc: akpm, linux-kernel, linux-mm, rick.p.edgecombe

This reintroduces the issue described in
https://lore.kernel.org/linux-mm/cb8dc31a-fef2-1d09-f133-e9f7b9f9e77a@sony.com/

Linux 6.2.13 can no longer successfully run the mmap-test reproducer linked
there.

Linux 6.2.12 passes.

Regards,
Tad.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Continue to follow the above &lt;a href=&#34;https://lore.kernel.org/linux-mm/cb8dc31a-fef2-1d09-f133-e9f7b9f9e77a@sony.com/&#34;&gt;link&lt;/a&gt;, and you can see that in the error log inside, there is also a similar mmap call:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 131072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_32BIT, -1, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x40720000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 131072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_32BIT, -1, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x4124e000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 131072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_32BIT, -1, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -1 ENOMEM &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cannot allocate memory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; dex2oatd F 03-01 10:32:33 &lt;span style=&#34;color:#ae81ff&#34;&gt;74063&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74063&lt;/span&gt; mem_map_arena_pool.cc:65&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Check failed: map.IsValid&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; Failed anonymous mmap&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;nil&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, 131072, 0x3, 0x22, -1, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: Cannot allocate memory. See process maps in the log.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Look at the mmap log reported above by &lt;code&gt;dadutil enum&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 4, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_32BIT, 7, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -1 ENOMEM &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cannot allocate memory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The parameter also contains MAP_32BIT, and the result is also ENOMEM. Combined with other discussions on the mailing list, it can be basically confirmed that the author ignored the situation of MAP_32BIT, and the BUG is introduced by the commit.&lt;/p&gt;
&lt;p&gt;After reverting the commit from Linux 6.2.14, the problem is gone.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;This is the whole debugging process. From the fact that Vivado can&amp;rsquo;t find the FPGA, to the internal Linux kernel BUG, they seem irrelevant, but we can find the connection behind the scene.&lt;/p&gt;
&lt;p&gt;I went through the whole debugging process with @vowstar and learned a lot, hence the blog post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux 6.2.13 引入的 BUG 导致 Vivado 无法识别 FPGA</title>
      <link>https://jia.je/software/2023/05/06/linux-regression-vivado/</link>
      <pubDate>Sat, 06 May 2023 22:16:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2023/05/06/linux-regression-vivado/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://jia.je/software/2023/05/06/linux-regression-vivado-en/&#34;&gt;English version&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TLDR&lt;/h2&gt;
&lt;p&gt;简单来说，Linux 6.2.13 引入的 commit：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;commit 0d30989fe9a176565d360376d4bc2ea1c61cbbac
Author: Liam R. Howlett &amp;lt;Liam.Howlett@oracle.com&amp;gt;
Date:   Fri Apr 14 14:59:19 2023 -0400

    mm/mmap: regression fix for unmapped_area{_topdown}
    
    commit 58c5d0d6d522112577c7eeb71d382ea642ed7be4 upstream.
    
    The maple tree limits the gap returned to a window that specifically fits
    what was asked.  This may not be optimal in the case of switching search
    directions or a gap that does not satisfy the requested space for other
    reasons.  Fix the search by retrying the operation and limiting the search
    window in the rare occasion that a conflict occurs.
    
    Link: https://lkml.kernel.org/r/20230414185919.4175572-1-Liam.Howlett@oracle.com
    Fixes: 3499a13168da (&amp;#34;mm/mmap: use maple tree for unmapped_area{_topdown}&amp;#34;)
    Signed-off-by: Liam R. Howlett &amp;lt;Liam.Howlett@oracle.com&amp;gt;
    Reported-by: Rick Edgecombe &amp;lt;rick.p.edgecombe@intel.com&amp;gt;
    Cc: &amp;lt;stable@vger.kernel.org&amp;gt;
    Signed-off-by: Andrew Morton &amp;lt;akpm@linux-foundation.org&amp;gt;
    Signed-off-by: Greg Kroah-Hartman &amp;lt;gregkh@linuxfoundation.org&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修复了 BUG 的同时，引入了新的 BUG，导致 MAP_32BIT 有时无法工作，而 Xilinx 的 Digilent 下载器代码使用了这个参数，导致 mmap 失败，无法识别 FPGA。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;事情的背景是，@vowstar 升级内核到 6.2.14 以后，发现 Vivado 找不到 FPGA 了，重启回到 6.2.12 就好了。&lt;/p&gt;
&lt;h2 id=&#34;排查&#34;&gt;排查&lt;/h2&gt;
&lt;p&gt;因为升级了内核，第一反应是不是 ftdi_sio 驱动的问题。比对了一下二者的 dmesg 日志，发现 Linux 6.2.12 会显示 &lt;code&gt;ftdi_sio: device disconnected&lt;/code&gt; 消息：这是因为 FPGA 下载器内置的是 FTDI 芯片，它支持多种模式，默认情况下，内核检测到设备以后，会由 ftdi_sio 驱动初始化为串口模式，创建 &lt;code&gt;/dev/ttyUSB*&lt;/code&gt; 设备；而 Vivado 需要用的是 MPSSE 模式，从而使用 JTAG 协议与 FPGA 通讯。这与串口模式冲突，因此 Vivado 要做的事情，首先是把内核模块 detach，也就是不再占用 USB 设备，然后再让 FTDI 芯片进入 MPSSE 模式。&lt;/p&gt;
&lt;p&gt;沿着这个思路，首先想到的是权限问题：默认情况下，USB 设备权限比较严格，所以 Vivado 在安装的时候，会安装 udev rule，把 Digilent 下载器的 usb 设备文件的权限改为 666，这样就允许所有用户访问 USB 设备。但是检查了一下，/dev/bus/usb 下的设备文件权限是正确的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kernel 6.2.12: crw-rw-rw- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root usb 189, &lt;span style=&#34;color:#ae81ff&#34;&gt;271&lt;/span&gt; May  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; 15:31 /dev/bus/usb/003/016
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kernel 6.2.14: crw-rw-rw- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root usb 189, &lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt; May  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; 15:32 /dev/bus/usb/003/016
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时候就觉得很蹊跷，只更新了内核，其他都没有变，为什么行为就会不同。于是翻了翻 Linux 内核的 ChangeLog，因为 6.2.12 是好的，6.2.14 是不工作的，所以只需要看两者之间的 changelog：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cdn.kernel.org/pub/linux/kernel/v6.x/ChangeLog-6.2.13&#34;&gt;6.2.13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cdn.kernel.org/pub/linux/kernel/v6.x/ChangeLog-6.2.14&#34;&gt;6.2.14&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以 ftdi 或 usb 为关键词搜索，只有一个看起来有一些相关的 commit：&lt;code&gt;USB: serial: option: add UNISOC vendor and TOZED LT70C product&lt;/code&gt;，但是仔细一看，只是添加了新的 VID/PID，也没有和 Digilent 下载器冲突。&lt;/p&gt;
&lt;p&gt;这时候，就觉得不是 Linux 的问题了。按照这个思路，继续控制变量法，看看是不是 FTDI 芯片出了问题。这时候就祭出了 OpenOCD，看看 OpenOCD 能否配置 FTDI 芯片进入 MPSSE 模式，并且找到 FPGA。试了一下，还真可以，ftdi_sio 正常 detach，然后 OpenOCD 也找到 FPGA 了。&lt;/p&gt;
&lt;p&gt;但此时再打开 Vivado，还是找不到设备，说明不是 MPSSE 模式的问题。考虑到 Vivado 访问硬件的进程是 hw_server，想到能不能看看 hw_server 的日志。&lt;/p&gt;
&lt;p&gt;运行 hw_server，打印所有日志类型：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ hw_server -L- -l alloc,eventcore,waitpid,events,protocol,context,children,discovery,asyncreq,proxy,tcflog,elf,stack,plugin,shutdown,disasm,jtag2,jtag,pcie,slave,dpc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里 &lt;code&gt;-L-&lt;/code&gt; 表示输出日志到 stderr，后面的 &lt;code&gt;-l&lt;/code&gt; 一串参数就是各种日志开关。在两个内核里都运行一次，比对日志，发现了不同：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Success &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.2.12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TCF 08:39:37.247: jtagpoll: add node 0xxxxxxxx&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;jsn-JTAG-SMT2NC-XXXXXXXXXXXX&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TCF 08:39:37.247: Node 000000FF, added jsn-JTAG-SMT2NC-XXXXXXXXXXXX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Failed &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.2.14&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TCF 08:45:12.385: jtagpoll: cannot get port description list: ftdidb_lock failed: FTDMGR wasn&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t properly initialized
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TCF 08:45:12.391: jtagpoll: cannot get port description list: JTAG device enumeration failed: Initialization of the DPCOMM library failed.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;终于看到了错误信息：&lt;code&gt;jtagpoll: cannot get port description list: ftdidb_lock failed: FTDMGR wasn&#39;t properly initialized&lt;/code&gt;。把这个作为关键词一搜索，果然有别人也遇到了同样的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.xilinx.com/s/article/000033531?language=en_US&#34;&gt;XSDB fails with &amp;ldquo;ftdidb_lock failed: FTDMGR wasn&amp;rsquo;t properly initialized&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.t123yh.xyz:2/index.php/archives/1013&#34;&gt;Linux 多用户环境下 Vivado 无法连接 Digilent JTAG 适配器的解决方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尝试了第一篇文章的解决方案，没有效果。第二篇文章指出的问题是，多用户环境下，多个用户抢同一个文件，然后出现权限问题，所以要删掉文件再启动。按照第二篇文档的方法尝试了一下，也没有解决问题。&lt;/p&gt;
&lt;p&gt;但是第二篇文章给出了一个调试方法：运行 Digilent 提供的 dadutil 程序，看看它是否可以识别下载器，果然复现出问题了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ERROR: DmgrSetNetworkEnumTimeout failed, erc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3090&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Found &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; device&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Found &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; device&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ERROR: DmgrSetNetworkEnumTimeout failed, erc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3090&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到这里多次尝试，发现有三分之一的概率会失败，但已经足够解释为什么 hw_server 不工作了：大概率它也调用了 Digilent 提供的代码，得到了同样的结果，所以失败了。&lt;/p&gt;
&lt;p&gt;上面第二篇文章用 strace 的方法找到了问题，照葫芦画瓢，用 strace 找到出错的日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ strace dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AT_FDCWD, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/dev/shm/digilent-adept2-mtx-ftdmgr&amp;#34;&lt;/span&gt;, O_RDWR|O_NOFOLLOW|O_CLOEXEC&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ftruncate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;7, 4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                         &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 4, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_32BIT, 7, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -1 ENOMEM &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cannot allocate memory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;close&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;7&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                                &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以发现问题是返回了 ENOMEM，这就很奇怪了，&lt;code&gt;/dev/shm&lt;/code&gt; 是个 tmpfs，还有很多空间，怎么会返回 ENOMEM 呢？&lt;/p&gt;
&lt;h2 id=&#34;柳暗花明又一村&#34;&gt;柳暗花明又一村&lt;/h2&gt;
&lt;p&gt;按照新线索继续研究：mmap 返回了不应该返回的错误，那是不是 6.2.13 或 6.2.14 引入了相关改动呢？一查，还真有：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# https://cdn.kernel.org/pub/linux/kernel/v6.x/ChangeLog-6.2.13
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;commit 0d30989fe9a176565d360376d4bc2ea1c61cbbac
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Author: Liam R. Howlett &amp;lt;Liam.Howlett@oracle.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Date:   Fri Apr 14 14:59:19 2023 -0400
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mm/mmap: regression fix for unmapped_area{_topdown}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    commit 58c5d0d6d522112577c7eeb71d382ea642ed7be4 upstream.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    The maple tree limits the gap returned to a window that specifically fits
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    what was asked.  This may not be optimal in the case of switching search
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    directions or a gap that does not satisfy the requested space for other
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    reasons.  Fix the search by retrying the operation and limiting the search
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    window in the rare occasion that a conflict occurs.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Link: https://lkml.kernel.org/r/20230414185919.4175572-1-Liam.Howlett@oracle.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Fixes: 3499a13168da (&amp;#34;mm/mmap: use maple tree for unmapped_area{_topdown}&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Signed-off-by: Liam R. Howlett &amp;lt;Liam.Howlett@oracle.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Reported-by: Rick Edgecombe &amp;lt;rick.p.edgecombe@intel.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Cc: &amp;lt;stable@vger.kernel.org&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Signed-off-by: Andrew Morton &amp;lt;akpm@linux-foundation.org&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Signed-off-by: Greg Kroah-Hartman &amp;lt;gregkh@linuxfoundation.org&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和 mmap 相关，点进&lt;a href=&#34;https://lkml.kernel.org/r/20230414185919.4175572-1-Liam.Howlett@oracle.com&#34;&gt;邮件链接&lt;/a&gt;看看，发现有人提出这个 commit 虽然修复了一个 BUG，但是引入了新的 BUG：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Re: [PATCH v2] mm/mmap: Regression fix for unmapped_area{_topdown}
  2023-04-14 18:59   ` [PATCH v2] &amp;#34; Liam R. Howlett
  2023-04-14 19:09     ` Andrew Morton
@ 2023-04-29 14:32     ` Tad
  2023-04-30 22:41       ` Michael Keyes
  1 sibling, 1 reply; 18+ messages in thread
From: Tad @ 2023-04-29 14:32 UTC (permalink / raw)
  To: liam.howlett; +Cc: akpm, linux-kernel, linux-mm, rick.p.edgecombe

This reintroduces the issue described in
https://lore.kernel.org/linux-mm/cb8dc31a-fef2-1d09-f133-e9f7b9f9e77a@sony.com/

Linux 6.2.13 can no longer successfully run the mmap-test reproducer linked
there.

Linux 6.2.12 passes.

Regards,
Tad.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再继续跟踪上面的&lt;a href=&#34;https://lore.kernel.org/linux-mm/cb8dc31a-fef2-1d09-f133-e9f7b9f9e77a@sony.com/&#34;&gt;链接&lt;/a&gt;，赫然看到里面的错误日志里，也出现了类似的 mmap 调用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 131072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_32BIT, -1, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x40720000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 131072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_32BIT, -1, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x4124e000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 131072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_32BIT, -1, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -1 ENOMEM &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cannot allocate memory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; dex2oatd F 03-01 10:32:33 &lt;span style=&#34;color:#ae81ff&#34;&gt;74063&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74063&lt;/span&gt; mem_map_arena_pool.cc:65&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Check failed: map.IsValid&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; Failed anonymous mmap&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;nil&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, 131072, 0x3, 0x22, -1, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: Cannot allocate memory. See process maps in the log.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再看看上面 &lt;code&gt;dadutil enum&lt;/code&gt; 报错的 mmap 日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 4, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_32BIT, 7, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -1 ENOMEM &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cannot allocate memory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;赫然也是 MAP_32BIT，结果也是 ENOMEM，那说明就是这个问题了。结合邮件列表的其他讨论，基本可以确认是作者忽略了 MAP_32BIT 的情况，所以出现了问题。&lt;/p&gt;
&lt;p&gt;从 Linux 6.2.14 回滚出问题的 commit 以后，问题解决了。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;这就是整个 Debug 流程，从 Vivado 找不到 FPGA 的表象，到内在的 Linux 内核 BUG，看起来毫不相关，但却能发现背后的逻辑。&lt;/p&gt;
&lt;p&gt;我和 @vowstar 一起完成了整个调试的流程，学到了许多，因此写了这篇博客。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>链接器的工作原理</title>
      <link>https://jia.je/software/2023/05/06/linker/</link>
      <pubDate>Sat, 06 May 2023 12:09:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2023/05/06/linker/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近和同学讨论一些比较复杂的链接问题，遇到一些比较复杂的情况，因此复习一遍链接器的工作原理。&lt;/p&gt;
&lt;h2 id=&#34;编译&#34;&gt;编译&lt;/h2&gt;
&lt;p&gt;编译器会把源文件编译成 obj，obj 里面有符号表，定义了不同的符号类型。常见的代码与符号的对应关系：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .bss section if -fno-common
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// common symbol if -fcommon
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; uninitialized;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .bss section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; initialized &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .data section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; initialized_one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .rodata section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; const_initialized &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .rodata section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; const_initialized_one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global undefined symbol
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; external;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// local in .bss section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; static_uninitialized;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// local in .bss section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; static_initialized &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// local in .data section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; static_initialized_one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// local in .rodata section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; const_static_initialized &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// local in .rodata section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; const_static_initialized_one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .text section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;simple_function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// local in .bss section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; static_in_function &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .text section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;access_external&lt;/span&gt;() { external &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global undefined symbol
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;external_function&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .text section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;call_external&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;external_function&lt;/span&gt;(); }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// local in .text section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;static_function&lt;/span&gt;() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// weak in .text section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;__attribute__&lt;/span&gt; ((weak)) &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weak_function&lt;/span&gt;() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .text section marked .hidden
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;__attribute__&lt;/span&gt; ((&lt;span style=&#34;color:#a6e22e&#34;&gt;visibility&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt;))) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hidden_function&lt;/span&gt;() {}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;readelf -s&lt;/code&gt; 查看符号表：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;   Num:    Value          Size Type    Bind   Vis      Ndx Name
     6: 0000000000000008     4 OBJECT  LOCAL  DEFAULT    4 static_uninitialized
     7: 000000000000000c     4 OBJECT  LOCAL  DEFAULT    4 static_initialized
     8: 0000000000000004     4 OBJECT  LOCAL  DEFAULT    3 static_initializ[...]
     9: 0000000000000008     4 OBJECT  LOCAL  DEFAULT    5 const_static_ini[...]
    10: 000000000000000c     4 OBJECT  LOCAL  DEFAULT    5 const_static_ini[...]
    11: 0000000000000029     7 FUNC    LOCAL  DEFAULT    1 static_function
    12: 0000000000000010     4 OBJECT  LOCAL  DEFAULT    4 static_in_function.0
    16: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    4 uninitialized
    17: 0000000000000004     4 OBJECT  GLOBAL DEFAULT    4 initialized
    18: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    3 initialized_one
    19: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    5 const_initialized
    20: 0000000000000004     4 OBJECT  GLOBAL DEFAULT    5 const_initialized_one
    21: 0000000000000000     7 FUNC    GLOBAL DEFAULT    1 simple_function
    22: 0000000000000007    17 FUNC    GLOBAL DEFAULT    1 access_external
    23: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND external
    24: 0000000000000018    17 FUNC    GLOBAL DEFAULT    1 call_external
    25: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _GLOBAL_OFFSET_TABLE_
    26: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND external_function
    27: 0000000000000030    11 FUNC    WEAK   DEFAULT    1 weak_function
    28: 000000000000003b     7 FUNC    GLOBAL HIDDEN     1 hidden_function
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;总结一下，每个符号有如下属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bind：Local（static）、Global（extern 或者非 static）、Weak（标记 &lt;code&gt;__attribute__ ((weak))&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;Vis(Visibility): Default、Hidden（标记 &lt;code&gt;__attribute__ ((visibility (&amp;quot;hidden&amp;quot;)))&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;Ndx：
&lt;ol&gt;
&lt;li&gt;COMMON：如果打开了 -fcommon，那么没有初始化的全局变量（上面的 &lt;code&gt;uninitialized&lt;/code&gt;）会生成 COMMON 符号；如果打开了 -fno-common，则不会有 COMMON 符号&lt;/li&gt;
&lt;li&gt;UNDEFINED：extern 符号&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Section:
&lt;ol&gt;
&lt;li&gt;const 变量放在 .rodata section&lt;/li&gt;
&lt;li&gt;非 const 变量，如果没有初始化，如果开了 -fcommon，则生成 COMMON 符号；如果开了 -fno-common，则放在 .bss section&lt;/li&gt;
&lt;li&gt;非 const 变量，如果初始化了，放在 .data section&lt;/li&gt;
&lt;li&gt;函数放在 .text section&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于 COMMON 符号的详细内容，建议阅读 &lt;a href=&#34;https://maskray.me/blog/2022-02-06-all-about-common-symbols&#34;&gt;All about COMMON symbols - MaskRay&lt;/a&gt; 和 &lt;a href=&#34;https://jia.je/software/2022/07/11/archive-common-linking/&#34;&gt;COMMON 符号&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;链接&#34;&gt;链接&lt;/h2&gt;
&lt;p&gt;链接要做的是把多个 obj 合并成一个可执行文件或者动态库，主要目的是将一个 obj 中定义的符号与另一个 obj 中 undefined 的符号对应起来。&lt;/p&gt;
&lt;p&gt;链接器运行时，传入若干个 obj 文件，然后按照下面的流程进行：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;维护一个全局的符号表&lt;/li&gt;
&lt;li&gt;循环每个 obj 文件，循环其中的符号，找到其中的 GLOBAL/WEAK 符号&lt;/li&gt;
&lt;li&gt;把 GLOBAL/WEAK 符号插入到符号表中，处理各种情况，例如：
&lt;ol&gt;
&lt;li&gt;如果出现两个 defined 符号冲突，报告 multiple definition 错误&lt;/li&gt;
&lt;li&gt;如果出现重名的 weak 符号和 strong 符号，选择保留 strong 的符号&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;如果存在没有找到匹配的 defined 符号的 undefined 符号，报告 undefined reference 错误&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;符号表是在解析 obj 文件的同时动态更新的，因此，如果 A 使用了 B 的符号，那么应该把 A 放在前面，这样链接器解析 A 的时候会在符号表中创建 undefined 符号，然后 B 在后面，当链接器解析 B 的时候，就可以把 B 的 defined 符号与 A 的 undefined 符号进行匹配。&lt;/p&gt;
&lt;h2 id=&#34;静态库&#34;&gt;静态库&lt;/h2&gt;
&lt;p&gt;静态库将多个 .o 合并为一个 .a，并且创建了索引。具体来说，创建一个静态库的时候：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ar rcs libxxx.a obj1.o obj2.o obj3.o ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成的 .a 会包括所有的 .o，然后创建索引（&lt;code&gt;ar rcs&lt;/code&gt; 中的 &lt;code&gt;s&lt;/code&gt;，会运行 &lt;code&gt;ranlib&lt;/code&gt; 命令），索引的内容是一个符号到 .o 文件的映射：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nm -s /lib/x86_64-linux-gnu/libc.a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Archive index:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;__printf in printf.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_IO_printf in printf.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;printf in printf.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;__scanf in scanf.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scanf in scanf.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此，链接器在遇到参数是 .a 的静态库的时候，不会查看里面的每个 .o 文件，而是从 Archive index 入手，如果当前的符号表依赖了 Archive index 中的符号，那就加载相应的 .o 文件。&lt;/p&gt;
&lt;h2 id=&#34;动态库&#34;&gt;动态库&lt;/h2&gt;
&lt;p&gt;生成动态库的方法是，编译的时候添加 &lt;code&gt;-fPIC&lt;/code&gt; 选项，链接的时候添加 &lt;code&gt;-shared&lt;/code&gt; 编译参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc -fPIC -c source1.c -o source1.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc -shared source1.o -o libtest.so.0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# oneliner:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc -fPIC -shared source1.c -o libtest.so.0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时代码中定义的函数会出现在 Dynamic Symbol Table 中，可以用 &lt;code&gt;objdump -T&lt;/code&gt; 命令查看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat source1.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;int simple_function&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -T libtest.so.0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libtest.so.0.0.0:     file format elf64-x86-64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DYNAMIC SYMBOL TABLE:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  w   D  *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; __cxa_finalize
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  w   D  *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; _ITM_registerTMCloneTable
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  w   D  *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; _ITM_deregisterTMCloneTable
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  w   D  *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; __gmon_start__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000000010f9 g    DF .text  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000007&lt;/span&gt; simple_function
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果代码中用了 libc 的一些函数，那么这些函数则会以 undefined symbol 的形式出现在 Dynamic Symbol Table 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat source1.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;int simple_function&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Simple function&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -T libtest.so.0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libtest.so.0.0.0:     file format elf64-x86-64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DYNAMIC SYMBOL TABLE:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  w   D  *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  Base        _ITM_deregisterTMCloneTable
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;      DF *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GLIBC_2.2.5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; printf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  w   D  *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  Base        __gmon_start__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  w   D  *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  Base        _ITM_registerTMCloneTable
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  w   DF *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GLIBC_2.2.5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; __cxa_finalize
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000001109&lt;/span&gt; g    DF .text  000000000000001b  Base        simple_function
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;符号版本&#34;&gt;符号版本&lt;/h3&gt;
&lt;p&gt;中间出现的 Base 或者 GLIBC_2.2.5 是符号的版本号，这样做的目的是为了兼容性：假如某天 glibc 想要给一个函数添加一个新的参数，但是现有的程序编译的时候动态链接了旧版本的 glibc，新旧两个版本的函数名字一样，但是功能却不一样，如果直接让旧程序用新 glibc 的函数，就会出现问题。即使参数不变，如果函数的语义变了，也可能带来不兼容的问题。&lt;/p&gt;
&lt;p&gt;解决办法是给符号添加版本号，这样旧版本的程序会继续找到旧版本的符号，解决了兼容性的问题。例如 memcpy 在 glibc 中就有两个版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -T /lib/x86_64-linux-gnu/libc.so.6 | grep memcpy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000000a2b70 g    DF .text  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000028&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GLIBC_2.2.5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; memcpy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000000000009bc50 g   iD  .text  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000109&lt;/span&gt;  GLIBC_2.14  memcpy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;a href=&#34;https://github.com/bminor/glibc/blob/a363f7075125fa654342c69331e6c075518ec28c/sysdeps/x86_64/multiarch/memcpy.c#LL38C11-L38C11&#34;&gt;glibc 代码&lt;/a&gt;中，通过 &lt;code&gt;versioned_symbol&lt;/code&gt; 宏来实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;versioned_symbol&lt;/span&gt; (libc, __new_memcpy, memcpy, GLIBC_2_14);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更多关于符号版本的内容，可以阅读 &lt;a href=&#34;https://maskray.me/blog/2020-11-26-all-about-symbol-versioning&#34;&gt;All about symbol versioning&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;动态链接&#34;&gt;动态链接&lt;/h3&gt;
&lt;p&gt;编译好动态链接库以后，可以在链接的时候，作为参数引入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat main.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;extern void simple_function&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;int main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; simple_function&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc main.c libtest.so.0.0.0 -o main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ LD_LIRBARY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PWD ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Simple &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以观察一下发生了什么事情：首先，链接的时候，会找到 &lt;code&gt;libtest.so.0.0.0&lt;/code&gt; 导出的符号表，发现它定义了 &lt;code&gt;main.c&lt;/code&gt; 缺少的 &lt;code&gt;simple_function&lt;/code&gt; 函数，因此链接不会出错。但是，函数本身没有被链接到 &lt;code&gt;main&lt;/code&gt; 里面，需要在运行时去加载动态库，这样 &lt;code&gt;main&lt;/code&gt; 才可以调用函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -t main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;       F *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;              simple_function
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -T main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;      DF *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  Base        simple_function
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ readelf -d ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dynamic section at offset 0x2dd0 contains &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; entries:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Tag        Type                         Name/Value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libtest.so.0.0.0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libc.so.6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./main: error &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; loading shared libraries: libtest.so.0.0.0: cannot open shared object file: No such file or directory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldd ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        linux-vdso.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007ffe07dbc000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libtest.so.0.0.0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; not found
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f83ee3fb000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        /lib64/ld-linux-x86-64.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f83ee602000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ LD_LIBRARY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PWD ldd ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        linux-vdso.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007fffb0bd5000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libtest.so.0.0.0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /tmp/libtest.so.0.0.0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f985b3db000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f985b1db000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        /lib64/ld-linux-x86-64.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f985b3e7000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先可以看到，二进制里面 &lt;code&gt;simple_function&lt;/code&gt; 依然属于 undefined 状态。但 &lt;code&gt;main&lt;/code&gt; 也指定了 NEEDED libtest.so.0.0.0，那么在运行的时候，ld.so 就会去寻找这个动态库。由于当前路径不在系统默认路径中，直接运行是找不到的（&lt;code&gt;not found&lt;/code&gt;），这里的解决办法是添加动态库的路径到 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; 中。&lt;/p&gt;
&lt;h3 id=&#34;soname&#34;&gt;soname&lt;/h3&gt;
&lt;p&gt;上述例子中，编译出来的动态库名称带有完整的版本号：&lt;code&gt;major.minor.patch=0.0.0&lt;/code&gt;，但一般认为，如果 &lt;code&gt;major&lt;/code&gt; 版本号没有变，可以认为是 ABI 兼容的，可以更新动态库的版本，而不用重新编译程序。但是，上面的例子里，&lt;code&gt;readelf -d main&lt;/code&gt; 显示 NEEDED 的动态库名字里也包括了完整的版本号，那就没有办法寻找到同 major 的不同版本了。&lt;/p&gt;
&lt;p&gt;解决办法是让同 major 的不同版本共享同一个 soname，常见的做法就是只保留 major 版本号：&lt;code&gt;libtest.so.0&lt;/code&gt;，而不是 &lt;code&gt;libtest.so.0.0.0&lt;/code&gt;。在编译动态库的时候，通过 &lt;code&gt;-Wl,-soname,libtest.so.0&lt;/code&gt; 参数来指定 soname：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc -fPIC -shared source1.c -Wl,-soname,libtest.so.0 -o libtest.so.0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc main.c libtest.so.0.0.0 -o main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ readelf -d main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Tag        Type                         Name/Value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libtest.so.0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libc.so.6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时可以看到 NEEDED 的动态库名字已经是预期的 &lt;code&gt;libtest.so.0&lt;/code&gt;，这意味着 &lt;code&gt;main&lt;/code&gt; 函数在动态加载的时候，不考虑小版本，只指定了 &lt;code&gt;major&lt;/code&gt; 版本为 0 的 libtest 动态库。但单是这样还不能运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ LD_LIBRARY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PWD ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./main: error &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; loading shared libraries: libtest.so.0: cannot open shared object file: No such file or directory
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;毕竟 ld.so 要找的是 &lt;code&gt;libtest.so.0&lt;/code&gt;，但是文件系统里只有 &lt;code&gt;libtest.so.0.0.0&lt;/code&gt;，最后的这一步用符号链接来实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ln -s libtest.so.0.0.0 libtest.so.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ LD_LIBRARY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PWD ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Simple &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样，如果哪天发布了 libtest.so 的 0.0.1 版本，只需要修改符号链接 &lt;code&gt;libtest.so.0 -&amp;gt; libtest.so.0.0.1&lt;/code&gt; 即可，不需要重新编译 &lt;code&gt;main&lt;/code&gt; 程序。&lt;/p&gt;
&lt;p&gt;想要查看动态库的 soname，可以用 &lt;code&gt;readelf -d&lt;/code&gt; 查看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ readelf -d libtest.so.0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Tag        Type                         Name/Value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libc.so.6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x000000000000000e &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SONAME&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Library soname: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libtest.so.0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cuda&#34;&gt;cuda&lt;/h3&gt;
&lt;p&gt;在 CUDA 中，如果程序需要访问 NVML 或者一些底层的 CUDA 函数，会链接到 libcuda（而不是 libcudart），但是如果在 CUDA 目录下寻找 libcuda，只会找到一个 &lt;code&gt;targets/x86_64-linux/lib/stubs/libcuda.so&lt;/code&gt;，里面的函数都是空的，只有一个 &lt;code&gt;retq&lt;/code&gt; 指令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -S ./targets/x86_64-linux/lib/stubs/libcuda.so
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./targets/x86_64-linux/lib/stubs/libcuda.so:     file format elf64-x86-64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Disassembly of section .text:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000007370&lt;/span&gt; &amp;lt;cuGetErrorString&amp;gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    7370:       b8 &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;          mov    $0x22,%eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    7375:       c3                      retq
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    7376:       &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; 2e 0f 1f &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;    nopw   %cs:0x0&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rax,%rax,1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    737d:       &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000007380&lt;/span&gt; &amp;lt;cuGetErrorName&amp;gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    7380:       b8 &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;          mov    $0x22,%eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    7385:       c3                      retq
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    7386:       &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; 2e 0f 1f &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;    nopw   %cs:0x0&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rax,%rax,1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    738d:       &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个 &lt;code&gt;libcuda.so&lt;/code&gt; 用途就是导出了所有可能会用到的符号，并且设置 &lt;code&gt;soname&lt;/code&gt; 为 &lt;code&gt;libcuda.so.1&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ readelf -d ./targets/x86_64-linux/lib/stubs/libcuda.so
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dynamic section at offset 0xdf30 contains &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; entries:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Tag        Type                         Name/Value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x000000000000000e &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SONAME&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Library soname: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libcuda.so.1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就意味着，&lt;code&gt;ld.so&lt;/code&gt; 会去寻找 &lt;code&gt;libcuda.so.1&lt;/code&gt;，而不是 &lt;code&gt;libcuda&lt;/code&gt;。前者才是真正实现了 CUDA Driver 的动态库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dpkg -S libcuda.so.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libnvidia-compute-470:amd64: /usr/lib/x86_64-linux-gnu/libcuda.so.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls -alh /usr/lib/x86_64-linux-gnu/libcuda.so.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; May &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2022&lt;/span&gt; /usr/lib/x86_64-linux-gnu/libcuda.so.1 -&amp;gt; libcuda.so.470.129.06
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而 CUDA Driver 的实现和 NVIDIA Driver 的版本是绑定的，因此 &lt;code&gt;libcuda.so.1&lt;/code&gt; 是软链接，软链接到对应驱动版本的 &lt;code&gt;libcuda.so&lt;/code&gt;。这样做的好处就是，编译 CUDA 的机器，不需要安装 NVIDIA Driver，CUDA 也不需要自己带一份 CUDA Driver 进来，节省了空间。&lt;/p&gt;
&lt;p&gt;像 pytorch 这种支持 CUDA 的程序，不会在链接的时候链接到 &lt;code&gt;libcuda&lt;/code&gt; 上，而是在用户需要的时候，去 &lt;code&gt;dlopen&lt;/code&gt;。这样即使用户的电脑上没有装 NVIDIA Driver，也可以运行支持 CUDA 的 pytorch。&lt;/p&gt;
&lt;h3 id=&#34;dynamic-linkerloader&#34;&gt;dynamic linker/loader&lt;/h3&gt;
&lt;p&gt;前文讲到，动态链接库参与链接的时候，实际上函数本身没有链接进可执行程序，最后的加载是由 dynamic linker/loader 完成的，在 linux 上是 ld.so，在 macOS 上是 dyld。它在程序启动的时候，负责根据 NEEDED 信息，知道程序要加载哪些动态库，然后去文件系统里找，如果找到了，就把相应的动态库加载到内存中，然后把可执行程序中对动态链接库的函数调用，变成真实的地址。相当于把原来静态链接的时候，链接器做的事情，挪到了程序运行开始时，即 linking at run time。&lt;/p&gt;
&lt;p&gt;那么这里就涉及到一个问题了：NEEDED 只记录了文件名，但是却没有路径。这意味着动态库也需要用类似 PATH 的机制，在一些路径里去寻找一个想要的动态库。例如前文修改 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;，实际上就是告诉 ld.so，可以在这个环境变量指向的路径中寻找动态库的文件。&lt;/p&gt;
&lt;p&gt;而用系统包管理器安装的动态库，一般不需要修改 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; 也可以用。这是靠 &lt;code&gt;/etc/ld.so.cache&lt;/code&gt; 文件实现的。在动态库相关的问题里，经常会看到运行 &lt;code&gt;ldconfig&lt;/code&gt; 命令。这个命令的用途是，收集系统目录里的动态库，建立一个索引，保存在 &lt;code&gt;/etc/ld.so.cache&lt;/code&gt; 文件中。然后 ld.so 直接去 &lt;code&gt;/etc/ld.so.cache&lt;/code&gt; 中寻找 NEEDED 的动态库对应的文件系统中的路径，不需要再重新扫描一遍目录了。所以 &lt;code&gt;/etc/ld.so.cache&lt;/code&gt; 就是一个文件系统中动态库的缓存，这也就是为啥叫做 &lt;code&gt;ld.so.cache&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;既然是缓存，就要考虑缓存和实际对不上的情况，这就是为啥要运行 &lt;code&gt;ldconfig&lt;/code&gt; 命令更新缓存。当然了，包管理器会自动运行 &lt;code&gt;ldconfig&lt;/code&gt;，只有自己 &lt;code&gt;make install&lt;/code&gt; 一些库的时候，才需要手动进行 &lt;code&gt;ldconfig&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ldconfig&lt;/code&gt; 会从 &lt;code&gt;/etc/ld.so.conf&lt;/code&gt; 中配置的路径中扫描动态链接库，常见的路径包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/lib/x86_64-linux-gnu&lt;/li&gt;
&lt;li&gt;/usr/lib/x86_64-linux-gnu&lt;/li&gt;
&lt;li&gt;/usr/local/lib&lt;/li&gt;
&lt;li&gt;/usr/local/lib/x86_64-linux-gnu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;包管理器安装的动态库基本都在这些目录中。可以用 &lt;code&gt;ldconfig -p&lt;/code&gt; 来查看缓存 &lt;code&gt;ld.so.cache&lt;/code&gt; 的内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ /sbin/ldconfig -p
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1967&lt;/span&gt; libs found in cache &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;/etc/ld.so.cache&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libz3.so.4 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;libc6,x86-64&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libz3.so.4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libz3.so &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;libc6,x86-64&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libz3.so
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ld-linux.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ELF&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/i386-linux-gnu/ld-linux.so.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ld-linux.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ELF&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib32/ld-linux.so.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ld-linux.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ELF&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/ld-linux.so.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ld-linux-x86-64.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;libc6,x86-64&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ld-linux-x32.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;libc6,x32&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /libx32/ld-linux-x32.so.2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;维护了 soname 到文件系统中动态库文件的映射。并且添加了一些属性来帮助 ld.so 进行过滤和选择。&lt;/p&gt;
&lt;h3 id=&#34;rpath&#34;&gt;rpath&lt;/h3&gt;
&lt;p&gt;除了 LD_LIBRARY_PATH 和 &lt;code&gt;/etc/ld.so.cache&lt;/code&gt;，ld.so 还可以通过 rpath 来寻找动态库。设想要打包一个 Qt 程序，希望在别人的机器上可以直接跑，但是别人的机器上不一定有 Qt，因此需要把程序和 Qt 的各种动态库打包在一起。但是，这时候 Qt 的动态库不会在系统路径中，不会被 &lt;code&gt;ldconfig&lt;/code&gt; 索引。一种办法就是写一个脚本，设置一下 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;，再启动 Qt 程序。另一种办法，就是利用 rpath：在程序中就告诉 ld.so 去哪里找它依赖（NEEDED）的动态库。这个路径可以是相对于可执行文件的路径。&lt;/p&gt;
&lt;p&gt;设置 &lt;code&gt;rpath&lt;/code&gt; 的方法是，编译的时候添加 &lt;code&gt;-Wl,-rpath,RPATH&lt;/code&gt; 选项，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc main.c libtest.so.0.0.0 -o main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./main: error &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; loading shared libraries: libtest.so.0: cannot open shared object file: No such file or directory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc main.c libtest.so.0.0.0 -Wl,-rpath,$PWD -o main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Simple &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ readelf -d main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Tag        Type                         Name/Value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libtest.so.0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libc.so.6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x000000000000001d &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;RUNPATH&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;            Library runpath: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;/tmp&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc main.c libtest.so.0.0.0 -Wl,-rpath,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$ORIGIN&amp;#39;&lt;/span&gt; -o main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Simple &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ readelf -d main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Tag        Type                         Name/Value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libtest.so.0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libc.so.6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x000000000000001d &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;RUNPATH&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;            Library runpath: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;$ORIGIN&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一个编译命令不带 &lt;code&gt;rpath&lt;/code&gt;，因此 ld.so 会找不到动态库，可以添加 LD_LIBRARY_PATH 的办法来解决。第二个和第三个编译命令带 &lt;code&gt;rpath&lt;/code&gt;，其中第二个使用了绝对路径，第三个使用了相对路径（&lt;code&gt;$ORIGIN&lt;/code&gt; 表示可执行文件所在的目录）。那么，ld.so 在寻找 libtest.so.0 的时候，会在 RUNPATH 中进行寻找。&lt;/p&gt;
&lt;h3 id=&#34;调试&#34;&gt;调试&lt;/h3&gt;
&lt;p&gt;动态链接经常会遇到各种找不到动态库的问题，需要使用一些工具来帮助找到问题。最常用的就是 &lt;code&gt;ldd&lt;/code&gt; 命令，显示一个程序依赖的动态库以及路径：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldd &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;which vim&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        linux-vdso.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007fff599a4000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libm.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libm.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f0504dfc000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libtinfo.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libtinfo.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f0504dc9000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libselinux.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libselinux.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f0504d9b000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libsodium.so.23 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libsodium.so.23 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f05049a6000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libacl.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libacl.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f0504d90000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libgpm.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libgpm.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f050499e000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f05047bd000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        /lib64/ld-linux-x86-64.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f0504f07000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libpcre2-8.so.0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libpcre2-8.so.0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f0504723000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libpthread.so.0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f0504d89000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然了，&lt;code&gt;ldd&lt;/code&gt; 有一定的风险，不建议在不信任的程序上运行 &lt;code&gt;ldd&lt;/code&gt;，详情见 &lt;a href=&#34;https://man7.org/linux/man-pages/man1/ldd.1.html&#34;&gt;ldd.1&lt;/a&gt;。更稳妥的方法是用 &lt;code&gt;objdump -p&lt;/code&gt; 或者 &lt;code&gt;readelf -d&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -p &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;which vim&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; | grep NEEDED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ readelf -d &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;which vim&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; | grep NEEDED
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是 ldd 可以打印出动态库依赖的动态库，而 objdump 和 readelf 只会打印直接依赖。也可以设置环境变量，让 ld.so 打印出加载的动态库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ export LD_DEBUG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;files
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;libtest.so.0 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;  needed by ./main &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;libtest.so.0 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;  generating link map
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:       dynamic: 0x00007fcd57c23df8  base: 0x00007fcd57c20000   size: 0x0000000000004018
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:         entry: 0x00007fcd57c20000  phdr: 0x00007fcd57c20040  phnum:                  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;  needed by ./main &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;  generating link map
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:       dynamic: 0x00007fcd57bf1b60  base: 0x00007fcd57a20000   size: 0x00000000001e0f50
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:         entry: 0x00007fcd57a47350  phdr: 0x00007fcd57a20040  phnum:                 &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     calling init: /lib64/ld-linux-x86-64.so.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     calling init: /lib/x86_64-linux-gnu/libc.so.6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     calling init: /tmp/libtest.so.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     initialize program: ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     transferring control: ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     calling fini: ./main &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     calling fini: /tmp/libtest.so.0 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Simple &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;macos&#34;&gt;macOS&lt;/h3&gt;
&lt;p&gt;macOS 与 Linux 下动态库的使用方法基本类似，但有一些细微的差别。首先是 macOS 上的动态库的后缀用的是 dylib 而不是 so：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc -fPIC -shared source1.c -o libtest.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc main.c libtest.dylib -o main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -t libtest.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libtest.dylib:  file format mach-o arm64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SYMBOL TABLE:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000003f7c g     F __TEXT,__text _simple_function
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;         *UND* _printf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -t main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main:   file format mach-o arm64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SYMBOL TABLE:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000100000000&lt;/span&gt; g     F __TEXT,__text __mh_execute_header
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000100003f94 g     F __TEXT,__text _main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;         *UND* _simple_function
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;虽然这里用的是 gcc 命令，但实际上 macOS 上的 gcc 命令是 clang。这里直接用 clang 命令也是一样的。可以看到，这里的可执行文件中 &lt;code&gt;simple_function&lt;/code&gt; 函数也是处于 undefined 状态，需要在运行时由 &lt;code&gt;libtest.dylib&lt;/code&gt; 提供。&lt;/p&gt;
&lt;p&gt;macOS 下的动态链接器是 dyld，它会解析 MachO 的 Load command 去加载动态库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -p main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Load command &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          cmd LC_LOAD_DYLIB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      cmdsize &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         name libtest.dylib &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;offset 24&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   time stamp &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; Thu Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:00:02 &lt;span style=&#34;color:#ae81ff&#34;&gt;1970&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      current version 0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compatibility version 0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Load command &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          cmd LC_LOAD_DYLIB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      cmdsize &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         name /usr/lib/libSystem.B.dylib &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;offset 24&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   time stamp &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; Thu Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:00:02 &lt;span style=&#34;color:#ae81ff&#34;&gt;1970&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      current version 1319.100.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compatibility version 1.0.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就相当于 Linux 中的 NEEDED，告诉动态链接器要加载哪些动态库。可以用 &lt;code&gt;otool -L&lt;/code&gt; 或者 &lt;code&gt;dyld_info&lt;/code&gt; 命令列出可执行文件所有依赖的动态库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ otool -L main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libtest.dylib &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;compatibility version 0.0.0, current version 0.0.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        /usr/lib/libSystem.B.dylib &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;compatibility version 1.0.0, current version 1319.100.3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dyld_info -dependents main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;arm64&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -dependents:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        attributes     load path
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       libtest.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       /usr/lib/libSystem.B.dylib
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;macOS 也提供了 rpath 的机制，在 &lt;code&gt;LC_LOAD_DYLIB&lt;/code&gt; 中指定 &lt;code&gt;@rpath&lt;/code&gt;，然后通过 &lt;code&gt;LC_RPATH&lt;/code&gt; 指定有哪些 rpath，那么动态链接器就可以根据可执行文件的相对路径去寻找动态库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -p /Applications/Visual&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;Studio&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;Code.app/Contents/MacOS/Electron
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Load command &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          cmd LC_RPATH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      cmdsize &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         path @executable_path/../Frameworks &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;offset 12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Load command &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          cmd LC_LOAD_DYLIB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      cmdsize &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         name @rpath/Electron Framework.framework/Electron Framework &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;offset 24&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   time stamp &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Thu Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1970&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      current version 22.5.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compatibility version 0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Load command &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          cmd LC_LOAD_DYLIB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      cmdsize &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         name /usr/lib/libSystem.B.dylib &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;offset 24&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   time stamp &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Thu Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1970&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      current version 1311.100.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ otool -L /Applications/Visual&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;Studio&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;Code.app/Contents/MacOS/Electron
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/Applications/Visual Studio Code.app/Contents/MacOS/Electron:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        @rpath/Electron Framework.framework/Electron Framework &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;compatibility version 0.0.0, current version 22.5.2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        /usr/lib/libSystem.B.dylib &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;compatibility version 1.0.0, current version 1311.100.3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以让 dyld 动态打印日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ export DYLD_PRINT_LIBRARIES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;F4E9A9E0-E958-3D0C-8D5A-7DC3ABA8E8C4&amp;gt; /Volumes/Data/temp/main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;DD5E30FB-753D-3746-8034-50C56971C47B&amp;gt; /Volumes/Data/temp/libtest.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;4BEBCD61-9E62-39BE-BFD2-C7D0689A826D&amp;gt; /usr/lib/libSystem.B.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;FEA038BA-CC59-3085-93B0-AB8437AA6CE2&amp;gt; /usr/lib/system/libcache.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;34AC4B05-E145-3C58-8C24-1190770EAB31&amp;gt; /usr/lib/system/libcommonCrypto.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;1D6552C4-49C4-374F-8371-198BCFC4174D&amp;gt; /usr/lib/system/libcompiler_rt.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;E61C2838-9EA2-33CE-B96B-85FF38DB7744&amp;gt; /usr/lib/system/libcopyfile.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;4A9F9101-A1B1-3FB7-89EA-746CFCE95099&amp;gt; /usr/lib/system/libcorecrypto.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;C2FD3094-B465-39A4-B774-16583FF53C4B&amp;gt; /usr/lib/system/libdispatch.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;A2947B47-B494-36D4-96C6-95977FFB51FB&amp;gt; /usr/lib/system/libdyld.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;C4512BA5-7CA3-30AE-9793-5CC5417F0FC3&amp;gt; /usr/lib/system/libkeymgr.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;91A88FDF-FD27-32AF-A2CE-70F7E4065C3B&amp;gt; /usr/lib/system/libmacho.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;A2D17FF6-CBC6-3D19-89E1-F5E57191E8A3&amp;gt; /usr/lib/system/libquarantine.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;2213EE66-253B-3234-AA4D-B46F07C3540E&amp;gt; /usr/lib/system/libremovefile.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;68D76774-F8B4-36EA-AA35-0AB4044D56C7&amp;gt; /usr/lib/system/libsystem_asl.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;5541DF62-A795-3F57-A54C-1AEC4DD3E44C&amp;gt; /usr/lib/system/libsystem_blocks.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;95A70E20-1DF3-3DDF-900C-315ED0B2C067&amp;gt; /usr/lib/system/libsystem_c.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;BEB9DE52-6F49-370A-B45B-CBE6780E7083&amp;gt; /usr/lib/system/libsystem_collections.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;121F8B4D-3939-300D-BE22-979D6B476361&amp;gt; /usr/lib/system/libsystem_configuration.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;7CE9526A-B673-363A-8905-71D080974C0E&amp;gt; /usr/lib/system/libsystem_containermanager.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;54BF691A-0908-3548-95F2-34CFD58E5617&amp;gt; /usr/lib/system/libsystem_coreservices.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;579733C7-851D-3B3E-83B5-FD203BA50D02&amp;gt; /usr/lib/system/libsystem_darwin.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;4EFF0147-928F-3321-8268-655FE71DC209&amp;gt; /usr/lib/system/libsystem_dnssd.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;5068382F-DC0F-3824-8ED5-18A24B35FEF9&amp;gt; /usr/lib/system/libsystem_featureflags.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;4448FB99-7B1D-3E15-B7EE-3340FF0DA88D&amp;gt; /usr/lib/system/libsystem_info.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;82E529F5-C4DF-3D42-9113-3A4F87FEF1A0&amp;gt; /usr/lib/system/libsystem_m.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;0AC99C6E-CB01-30E5-AB10-65AB990652A5&amp;gt; /usr/lib/system/libsystem_malloc.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;3B2CC4A9-A5EE-3627-8293-4AF4D891074E&amp;gt; /usr/lib/system/libsystem_networkextension.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;E4AA6E5F-2501-3382-BFB3-64464E6D8254&amp;gt; /usr/lib/system/libsystem_notify.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;99FDEFF2-36F1-3436-B8B2-DE0003B5A4BF&amp;gt; /usr/lib/system/libsystem_sandbox.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;E529D1AC-D20A-3308-9033-E1712A9C655E&amp;gt; /usr/lib/system/libsystem_secinit.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;42F503E2-9273-360A-A086-C1B19BBD3962&amp;gt; /usr/lib/system/libsystem_kernel.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;F80C6971-C080-31F5-AB6E-BE01311154AF&amp;gt; /usr/lib/system/libsystem_platform.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;46D35233-A051-3F4F-BBA4-BA56DDDC4D1A&amp;gt; /usr/lib/system/libsystem_pthread.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;F9F1F4BE-D97F-37A7-8382-552C22DF1BB4&amp;gt; /usr/lib/system/libsystem_symptoms.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;3F3E75B7-F0A7-30BB-9FD7-FD1307FE6055&amp;gt; /usr/lib/system/libsystem_trace.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;E3BF7A76-2CBE-3DB9-8496-8BB6DBBE0CFC&amp;gt; /usr/lib/system/libunwind.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;F3F19227-FF8F-389C-A094-6F4C16E458AF&amp;gt; /usr/lib/system/libxpc.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;52AA13E2-567C-36C2-9494-7B892FDBF245&amp;gt; /usr/lib/libc++abi.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;5BEAFA2B-3AF4-3ED2-B054-1F58A7C851EF&amp;gt; /usr/lib/libobjc.A.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;FB664621-26AE-3F46-8F5A-DD5D890A5CE7&amp;gt; /usr/lib/liboah.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;54E8FBE1-DF0D-33A2-B8FA-356565C12929&amp;gt; /usr/lib/libc++.1.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Simple &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与 Linux 上的 &lt;code&gt;/etc/ld.so.cache&lt;/code&gt; 类似，macOS 也针对动态库的加载做了优化，但是 macOS 做的更彻底：由于 macOS 的系统库是只读的，于是直接把所有系统库打包成一个文件，这个文件就是 dyld shared cache。可以用 &lt;a href=&#34;https://github.com/keith/dyld-shared-cache-extractor&#34;&gt;keith/dyld-shared-cache-extractor&lt;/a&gt; 来还原出内部的 dylib。在 macOS Ventura 13.4 中，可以解出 2499 个动态库。&lt;/p&gt;
&lt;h2 id=&#34;relocation&#34;&gt;relocation&lt;/h2&gt;
&lt;p&gt;链接器找到符号以后，就需要进行 relocation。在编译的时候，为了准备未来链接时的需要，提前做了一些准备：因为符号的地址还不知道，所以生成一条指令，指令的立即数内包括了符号的地址的信息，但此时还不知道立即数应该是多少，所以编译器把指令的立即数填充为 0，同时生成一个 relocation。当链接器看到 relocation 的时候，在已经排好所有符号的地址的时候，就可以按照 relocation 更新代码。&lt;/p&gt;
&lt;p&gt;由于动态链接库可能会被加载到不同的基地址上，所以为了解决动态链接库内部的符号链接问题，采用 PIC 的方法，即通过指令本身的地址进行相对运算，计算出另一个符号的地址。这样动态链接库加载到不同地址的时候，内部的符号之间都可以正常引用，不需要修改指令，使得动态库可以在不同的进程间共享。&lt;/p&gt;
&lt;p&gt;但是还需要考虑动态链接库使用了其他动态链接库的符号（全局变量）。这个时候，PIC 的方法失效了，因为无法确定其他动态链接库会加载到什么地址。此时的解决办法是用 GOT，程序在引用符号的时候，去 GOT 里查找实际的地址。动态链接器负责填 GOT 表的内容，这样动态库本身还是不会修改，只会修改 GOT。&lt;/p&gt;
&lt;p&gt;如果动态链接库调用了其他动态链接库的函数，也可以用类似的方法，但是实践起来稍有不同。函数也在 GOT 表的 PLT 表里有实际的地址，但动态链接库不会自动替换，而是让编译器生成一个 PLT stub。PLT stub 做的事情是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果初始化过，那么直接跳转到实际的函数&lt;/li&gt;
&lt;li&gt;如果没有初始化过，调用 ld.so 提供的函数，函数会找到实际的函数，并且对 PLT 进行初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这一系列的做法都是为了让动态库的大部分内容保持不变，只修改少部分数据使得 relocation 可以工作。完整的内容建议阅读&lt;a href=&#34;https://www.technovelty.org/linux/plt-and-got-the-key-to-code-sharing-and-dynamic-libraries.html&#34;&gt;PLT and GOT - the key to code sharing and dynamic libraries&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;relocation-truncated-to-fit&#34;&gt;relocation truncated to fit&lt;/h3&gt;
&lt;p&gt;常见的 &lt;code&gt;relocation truncated to fit&lt;/code&gt; 错误的意思是，链接器在进行 relocation 的时候，无法把想要的值填入到编译器预留的立即数里面。这是因为，编译器在编译的时候，其实不知道偏移具体是多少，那么这时候就可以选择用不同的指令序列，有的指令序列比较短，但是立即数位数也比较少；有的指令序列比较长，但是可以访问更大范围的偏移。如果编译器选择了比较小的范围，但是链接器链接的时候，发现放不下，就会出现 &lt;code&gt;relocation truncated to fit&lt;/code&gt; 的错误。&lt;/p&gt;
&lt;p&gt;解决方法，一是查看是否真的有那么大的偏移，例如是否不小心分配了一个超级大的全局数组，是的话是否砍掉一些大小；二是修改 Code Model，也就是让编译器选择更大的 Code Model，以更长的指令的代价，支持更大范围的 relocation。完整内容推荐阅读 &lt;a href=&#34;https://maskray.me/blog/2023-05-14-relocation-overflow-and-code-models&#34;&gt;Relocation overflow and code models by MaskRay&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I2C 协议</title>
      <link>https://jia.je/hardware/2023/05/03/i2c/</link>
      <pubDate>Wed, 03 May 2023 22:53:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/05/03/i2c/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/i2c.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近数设课上，同学们开始购买外设，其中就涉及到 I2C 协议，因此顺带写一下 I2C 协议的教程，帮助同学们进行理解。&lt;/p&gt;
&lt;h2 id=&#34;接口&#34;&gt;接口&lt;/h2&gt;
&lt;p&gt;I2C 协议涉及到两个信号：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SCL: 时钟信号，Master -&amp;gt; Slave&lt;/li&gt;
&lt;li&gt;SDA：数据信号，Master &amp;lt;-&amp;gt; Slave&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于只有一个数据信号，所以 SDA 由 Master 和 Slave 轮流输出。一次请求的开始条件是，SDA 从 1 变成 0，之后 SCL 从 1 变成 0。开始请求以后，每次 SCL 上升沿采样一位的数据。请求结束时，SCL 从 0 变成 1，然后 SDA 从 0 变成 1。一次请求的波形如下：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;{
  signal:
    [
      { name: &#34;scl&#34;, wave: &#34;1.0101010|.101...&#34;},
      { name: &#34;sda&#34;, wave: &#34;10....1..|0....1.&#34;},
      { name: &#34;i2c&#34;, wave: &#34;34.5.....|6.7....&#34;, data: [&#34;idle&#34;, &#34;start&#34;, &#34;data&#34;, &#34;ack&#34;, &#34;stop&#34;]},
    ]
}
&lt;/script&gt;&lt;ol&gt;
&lt;li&gt;idle 阶段，scl 和 sda 都是 1&lt;/li&gt;
&lt;li&gt;start 阶段，首先是 sda 变成 0，之后是 scl 变成 0&lt;/li&gt;
&lt;li&gt;data/ack 阶段，在 scl 上升沿采样数据，在 scl 下降沿（准确来说，负半周期）修改数据&lt;/li&gt;
&lt;li&gt;stop 阶段，首先是 scl 变成 1，之后是 sda 变成 1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;传输数据的时候，需要保证 sda 在 scl 正半周期的时候保持不变。如果变了，那就是 start 或者 stop。因此，在 data/ack 阶段，建议 sda 的变化相比 scl 下降沿有一个延迟（Hold Time，一般的要求是 Min 0us）。实现方法可能是在分频的时候，延迟一个周期。&lt;/p&gt;
&lt;p&gt;这里的 data/ack 指的则是传输的具体内容：例如 master 要传输 7 位的地址和 1 位的读使能，响应地址的 slave 要返回 ack；之后，无论是 master 还是 slave 发送数据，接收的一方都要返回 ack。ack 是低有效，意味着 0 表示成功，1 表示失败。&lt;/p&gt;
&lt;p&gt;由于 sda 带有上拉电阻，所以如果没有 slave 响应，ack 阶段的 sda 就会变成 1，意味着失败。&lt;/p&gt;
&lt;h2 id=&#34;i2c-控制器实现&#34;&gt;I2C 控制器实现&lt;/h2&gt;
&lt;p&gt;结合上面的 I2C 波形，可以设计一个状态机：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;INIT 状态：初始情况下，SCL 和 SDA 都为 1，要发送数据的时候，转移到 START1 状态&lt;/li&gt;
&lt;li&gt;START1 状态：设置 SDA=0，当达到分频条件时，转移到 START2 状态&lt;/li&gt;
&lt;li&gt;START2 状态：设置 SCL=0，当达到分频条件时，START 发送完成，转移到 SEND 状态&lt;/li&gt;
&lt;li&gt;SEND 状态：当达到分频条件时，SCL 取反，如果 SCL 要从 1 变成 0，延迟一个周期，再输出 1 位的数据到 SDA 上，保证 SDA 的变化在 SCL 的负半周期；同时统计传输位数，每传输 8 位，就要等待一个周期让 Slave 响应 ACK，此时要设置 inout 输出为高阻态；如果要转换传输方向，即 Master 要读取数据，那么转移到 RECV 状态；如果传输结束，转移到 STOP1 状态&lt;/li&gt;
&lt;li&gt;RECV 状态：当达到分频条件时，SCL 取反，如果 SCL 从 0 变成 1，对 SDA 进行采样并且保存下来；同时统计传输位数，每传输 8 位，就要在 SDA 输出一次 ACK；如果传输结束，转移到 STOP1 状态&lt;/li&gt;
&lt;li&gt;STOP1 状态：设置 SCL=1，当达到分频条件时，转移到 STOP2 状态&lt;/li&gt;
&lt;li&gt;STOP2 状态：设置 SDA=1，当达到分频条件时，转移到 INIT 状态&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;分频是因为一般 I2C 的频率比较低，是 kHz 的量级。需要按照控制逻辑的主频，结合外设能接受的 I2C 频率范围，计算出分频的倍数。&lt;/p&gt;
&lt;h2 id=&#34;上层协议&#34;&gt;上层协议&lt;/h2&gt;
&lt;p&gt;在此基础上，可以设计上层协议，例如 &lt;a href=&#34;http://cdn.sparkfun.com/datasheets/Dev/Arduino/Shields/WolfsonWM8731.pdf&#34;&gt;WM8731&lt;/a&gt;，支持通过 I2C 写入内部寄存器，一次写操作分为以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;li&gt;master 发送 7 位的设备地址和 0（表示写），slave 发送 ack&lt;/li&gt;
&lt;li&gt;master 发送 7 位的寄存器地址 和 1 位的寄存器数据，slave 发送 ack&lt;/li&gt;
&lt;li&gt;master 发送 8 位的寄存器数据，slave 发送 ack&lt;/li&gt;
&lt;li&gt;stop&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里的第二步发送的 7 位地址 + 读/写位是标准的，I2C Slave 都会根据 7 位地址来决定是否由自己来响应。此后的数据的定义，则是各个芯片按照各自的协议来进行。&lt;/p&gt;
&lt;p&gt;为了让多个同型号 I2C 芯片可以同时使用，通常芯片提供了一些引脚来配置它的地址，那么在设计的时候，给不同的芯片设置不同的地址，就解决了地址冲突的问题。&lt;/p&gt;
&lt;h2 id=&#34;i2c-eeprom&#34;&gt;I2C EEPROM&lt;/h2&gt;
&lt;p&gt;以 &lt;a href=&#34;https://ww1.microchip.com/downloads/en/devicedoc/doc0336.pdf&#34;&gt;AT24C32/AT24C64&lt;/a&gt; 为例，它提供了一个 I2C 接口的 EEPROM，支持如下操作：&lt;/p&gt;
&lt;p&gt;写入数据：start，7 位设备地址，W，ACK；写入地址的高 8 位，ack；写入地址的低 8 位，ack；数据的每个字节，ack；最终 stop。&lt;/p&gt;
&lt;p&gt;读取数据：start，7 位设备地址，W，ack；读取地址的高 8 位，ack；读取地址的低 8 位，ack；start，7 位设备地址，R，ack；数据的每个字节，ack；最终不想读的时候 nack，stop。&lt;/p&gt;
&lt;p&gt;可以看到，这里设计成写操作的时候，只有 Master 到 Slave 的数据传输，反过来读操作的时候，只有 Slave 到 Master 的数据传输。因此，为了传输读取的地址，要首先“写入”读取的地址，再进行一次读操作，把数据读出来。&lt;/p&gt;
&lt;h2 id=&#34;i2c-audio-codec&#34;&gt;I2C Audio Codec&lt;/h2&gt;
&lt;p&gt;上面的例子中的 &lt;a href=&#34;http://cdn.sparkfun.com/datasheets/Dev/Arduino/Shields/WolfsonWM8731.pdf&#34;&gt;WM8731&lt;/a&gt; 实际上就是一个 Audio Codec，可以通过 I2C 对其寄存器进行写入。WM8731 的寄存器地址有 9 位，每个寄存器有 8 位的数据，因此写入流程是：start，7 位设备地址，W，ack；7 位寄存器地址，1 位寄存器数据，ack；8 位寄存器数据，ack；stop。&lt;/p&gt;
&lt;h2 id=&#34;i2c-sensor&#34;&gt;I2C Sensor&lt;/h2&gt;
&lt;p&gt;举一个传感器的例子：&lt;a href=&#34;https://m5stack.oss-cn-shenzhen.aliyuncs.com/resource/docs/datasheet/unit/gesture/paj7620u2_datasheet.pdf&#34;&gt;PAJ7620U2: Integrated Gesture Recognition Sensor &lt;/a&gt;，它也提供了一个寄存器读写的接口，支持如下操作：&lt;/p&gt;
&lt;p&gt;单次写入：start，7 位设备地址，W，ack；8 位地址，ack；8 位数据，ack；stop。&lt;/p&gt;
&lt;p&gt;单次读取：start，7 位设备地址，W，ack；8 位地址，ack；stop；start，7 位设备地址，R，ack；8 位数据，nack；stop。这里的读取也拆成了两步：第一步“写入”读取的地址，第二步读取出数据。最后的 nack 表示 master 不需要读取更多的数据。&lt;/p&gt;
&lt;p&gt;如果要批量读取的话，只要在单次读取的基础上，读取数据的时候发 ack，等到不需要继续读的时候再发 nack，就可以连续读取多个寄存器的数据。&lt;/p&gt;
&lt;p&gt;这些命令格式和上面的 I2C EEPROM 基本是一样的。&lt;/p&gt;
&lt;p&gt;颜色传感器 &lt;a href=&#34;https://cdn-shop.adafruit.com/datasheets/TCS34725.pdf&#34;&gt;TCS3472&lt;/a&gt; 的命令格式也是类似的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPI 协议</title>
      <link>https://jia.je/hardware/2023/04/26/spi/</link>
      <pubDate>Wed, 26 Apr 2023 00:28:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/04/26/spi/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/spi.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近数设课上，同学们开始购买外设，其中就涉及到 SPI 协议，因此顺带写一下 SPI 协议的教程，帮助同学们进行理解。&lt;/p&gt;
&lt;h2 id=&#34;接口&#34;&gt;接口&lt;/h2&gt;
&lt;p&gt;SPI 协议涉及到四个信号：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SCLK: 时钟信号，Master -&amp;gt; Slave&lt;/li&gt;
&lt;li&gt;MOSI：数据信号，Master -&amp;gt; Slave&lt;/li&gt;
&lt;li&gt;MISO：数据信号，Slave -&amp;gt; Master&lt;/li&gt;
&lt;li&gt;CS：芯片使能，一般是低有效&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要通过 SPI 协议发送命令的时候，通常需要先拉低 CS，然后启动 SCLK 时钟，同时收发数据。注意 SPI 是全双工的，也就是发送的同时也在接收，只不过通常来说，外设等到主机发送了命令本身，才知道要回复什么，所以很多时候命令设计成了事实上的半双工：前半部分主机在发命令，外设发送无用的数据；后半部分外设在发送响应，主机发送无用的数据。&lt;/p&gt;
&lt;h2 id=&#34;波形&#34;&gt;波形&lt;/h2&gt;
&lt;p&gt;SPI 有不同的类型，下面讲一种比较常见的配置（即 CPOL=0，CPHA=0），在这种模式下，Master 和 Slave 都是在时钟的下降沿修改输出的数据，然后在时钟（&lt;code&gt;sclk&lt;/code&gt;）的上升沿对接收到的数据进行采样：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;{
  signal:
    [
      { name: &#34;clk&#34;, wave: &#34;p........&#34;},
      { name: &#34;sclk&#34;, wave: &#34;0.101010.&#34;},
      { name: &#34;mosi&#34;, wave: &#34;03.4.5.x.&#34;},
      { name: &#34;miso&#34;, wave: &#34;06.7.8.x.&#34;},
      { name: &#34;cs_n&#34;, wave: &#34;10......1&#34;},
    ]
}
&lt;/script&gt;&lt;p&gt;波形图中，时钟（&lt;code&gt;sclk&lt;/code&gt;）上升沿时，数据处于稳定的状态，所以此时 Master 对 MISO 采样，Slave 对 MOSI 采样，可以得到稳定的数据；时钟下降沿时，Master 和 Slave 修改输出的数据。&lt;/p&gt;
&lt;p&gt;实际在 RTL 中实现的时候，Master 可以不写 negedge 逻辑，而是写一个分频器，在分频出来的负半周期里，实现数据的修改，如上图中的 &lt;code&gt;clk&lt;/code&gt; 分频到 &lt;code&gt;sclk&lt;/code&gt;。一般使用一个状态机来实现 SPI Master，记录当前传输到哪一个 bit，以及记录当前是 &lt;code&gt;sclk&lt;/code&gt; 的正半周期还是负半周期。&lt;/p&gt;
&lt;p&gt;SPI 本身很简单，所以核心不在 SPI，而是在 SPI 之上定义的各种协议。&lt;/p&gt;
&lt;h2 id=&#34;spi-flash&#34;&gt;SPI Flash&lt;/h2&gt;
&lt;p&gt;SPI Flash 是一种很常见的 SPI 外设，可以用来访问 NAND/NOR Flash。&lt;/p&gt;
&lt;p&gt;为了提升性能，很多 SPI Flash 还会提供 Dual SPI 和 Quad SPI 模式。标准的 SPI 中，Master 到 Slave 和 Slave 到 Master 分别是一根信号线，如果要继续提高性能，那就要引入更多的信号线来进行数据传输，所以 Dual SPI 就是让原来的 MISO 和 MOSI 都可以同时发送数据；Quad SPI 则是又额外添加了两个信号线来进行数据传输。&lt;/p&gt;
&lt;p&gt;常见的 SPI Flash 厂家：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spansion -&amp;gt; Cypress -&amp;gt; Infineon&lt;/li&gt;
&lt;li&gt;Numonyx -&amp;gt; Micron&lt;/li&gt;
&lt;li&gt;Winbond&lt;/li&gt;
&lt;li&gt;GigaDevice&lt;/li&gt;
&lt;li&gt;Macronix&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spi-nand-flash&#34;&gt;SPI NAND Flash&lt;/h3&gt;
&lt;p&gt;下面以 &lt;a href=&#34;https://www.alliancememory.com/wp-content/uploads/pdf/flash/AllianceMemory_SPI_NAND_Flash_July2020_Rev1.0.pdf&#34;&gt;Alliance Memory SPI NAND Flash Datasheet&lt;/a&gt; 为例子，看看通常 SPI Flash 都支持哪些命令，都是如何传输数据的。&lt;/p&gt;
&lt;p&gt;这款 SPI NAND Flash 的内部存储分为三层：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Block：数量不定&lt;/li&gt;
&lt;li&gt;Page：每个 Block 包括 64 个 Page&lt;/li&gt;
&lt;li&gt;Byte：每个 Page 包括一定数量的 Byte，常见的有 2112(2048+64)、2176(2048+128)、4352(4096+256)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;NAND Flash 的读取粒度是 Page，这就是为什么 NAND Flash 更像块设备。一次读取过程分为三个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发送 13H(Page Read to Cache) 命令，把一个 Page 的数据读取到 NAND Flash 内部的 Cache 中&lt;/li&gt;
&lt;li&gt;不断发送 0FH(Get Feature) 命令，直到 NAND Flash 表示 Page Read to Cache 命令完成&lt;/li&gt;
&lt;li&gt;发送 Read from Cache 命令，考虑到传输的方式不同，有以下几种：
&lt;ol&gt;
&lt;li&gt;Read from Cache x1 IO(03H/0BH): Master 给出 1 字节命令，2 字节地址和 1 字节 dummy 数据，共 8(COMMAND)+16(ADDR)+8(DUMMY) 个周期，之后 Slave 从 MISO 给出数据&lt;/li&gt;
&lt;li&gt;Read from Cache x2 IO(3BH): Slave 同时通过 MISO 和 MOSI 给出数据&lt;/li&gt;
&lt;li&gt;Read from Cache x4 IO(6BH): Slave 同时通过 MISO、MOSI、WP# 和 HOLD# 给出数据&lt;/li&gt;
&lt;li&gt;Read from Cache Dual IO(BBH): 在 3BH 的基础上，Master 也同时通过 MISO 和 MOSI 给出地址和 dummy 字节，所以 Master 只占用 8(COMMAND)+8(ADDR)+4(DUMMY) 个周期的时间发送&lt;/li&gt;
&lt;li&gt;Read from Cache Quad IO(EBH): 在 6BH 的基础上，Master 也同时通过四个数据信号给出地址和 dummy 字节，所以 Master 只占用 8(COMMAND)+4(ADDR)+2(DUMMY) 个周期的时间发送&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;写入的时候，由于 NAND Flash 的特性，首先需要擦除，把一个 Block 的内容全部擦除，需要注意每个 Block 包括多个 Page，所以擦除的粒度是很粗的。擦除过的 Page 才可以进行写入，具体步骤是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发送 06H(Write Enable) 允许写入&lt;/li&gt;
&lt;li&gt;发送 02H(Program Load) 或 32H(Program Load x4) 把要写入的数据传输给 NAND Flash 中的 Cache；02H 和 32H 的区别就是后者同时在四个信号线上传输数据&lt;/li&gt;
&lt;li&gt;发送 10H(Program Execute) 进行实际的写入操作，从 Cache 到 Flash 存储&lt;/li&gt;
&lt;li&gt;不断发送 0FH(Get Feature) 命令，直到 Program Execute 操作完成&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;spi-nor-flash&#34;&gt;SPI NOR Flash&lt;/h3&gt;
&lt;p&gt;NOR Flash 和 NAND Flash 的区别在于，NOR Flash 可以随机访问，可以提供 XIP 支持。下面以 &lt;a href=&#34;https://www.micron.com/-/media/client/global/documents/products/data-sheet/nor-flash/serial-nor/n25q/n25q_128mb_3v_65nm.pdf&#34;&gt;128Mb, 3V, Multiple I/O Serial Flash Memory&lt;/a&gt; 为例子看看它是如何读写的。&lt;/p&gt;
&lt;p&gt;SPI NOR Flash 读取的时候，只需要一条命令就可以了：READ/FAST READ。其中 READ 命令比较简单：发送 Command，发送地址，然后 Slave 紧接着就会发送数据；FAST READ 可以达到更高的频率，但是为了让 NOR Flash 有时间读取数据，在 Master 发送 Command 和地址后，还需要发送 Dummy cycles，然后 Slave 才会发送数据。和前面一样，FAST READ 也支持不同的 IO 类型，例如 Dual Output，Dual Input/Output，Quad Output，Quad Input/Output。一些比较高端的 SPI NOR Flash 还支持 DTR（Double Transfer Rate），实际上就是 DDR，在时钟上升沿和下降沿都采样数据。&lt;/p&gt;
&lt;p&gt;写入的时候，和 NAND Flash 一样，也需要先擦除，再写入。SPI Flash 的存储层级是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sector&lt;/li&gt;
&lt;li&gt;Subsector&lt;/li&gt;
&lt;li&gt;Page&lt;/li&gt;
&lt;li&gt;Byte&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;擦除的粒度是 Sector 或者 Subsector，写入的粒度是 Page。写入的时候，也需要首先发送 WRITE ENABLE 命令，再发送 PAGE PROGRAM 命令。NOR Flash 在 Program 上也比较简化，直接 Program 即可，不需要先写入到 Cache，再进行 Program。&lt;/p&gt;
&lt;p&gt;NOR Flash 还提供了 XIP Mode 来加快随机访问：启用 XIP 模式后，给出一个地址，等待 Dummy cycles 后，就可以读出数据，不需要像前面那样发送 COMMAND，减少了延迟。当然了，即使不打开 NOR Flash 的 XIP Mode，也可以在 SPI 控制器里实现 XIP，只不过每次读取都要发一次 READ 命令。&lt;/p&gt;
&lt;h2 id=&#34;spi-eeprom&#34;&gt;SPI EEPROM&lt;/h2&gt;
&lt;p&gt;SPI EEPROM 和 SPI NOR Flash 比较类似，但是 EEPROM 更小，也更加简单，例如写入的时候，不需要擦除。感兴趣的可以在 &lt;a href=&#34;http://ww1.microchip.com/downloads/en/DeviceDoc/22040c_cn.pdf&#34;&gt;SPI 串行 EEPROM 系列数据手册&lt;/a&gt; 中查看命令列表，这里就不赘述了。&lt;/p&gt;
&lt;h2 id=&#34;sd-卡&#34;&gt;SD 卡&lt;/h2&gt;
&lt;p&gt;SD 卡除了 SD Bus 以外，还支持 SPI 模式（最新的 SDUC 不支持 SPI 模式），所以也可以用 SPI 来读写 SD 卡。&lt;/p&gt;
&lt;p&gt;SD 卡比较特别的一点是，它需要比较复杂的初始化流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先要发送 CMD0 命令，同时 CS 拉低，使得 SD 卡进入 SPI 模式&lt;/li&gt;
&lt;li&gt;对于 SDHC SD 卡，需要发送 CMD8 来协商工作电压范围&lt;/li&gt;
&lt;li&gt;重复发送 ACMD41 命令（CMD55 + CMD41 = ACMD41）进行初始化，直到 SD 卡回复初始化完成&lt;/li&gt;
&lt;li&gt;发送 CMD58 命令以读取 OCR 寄存器的值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比较有意思的是命令的传输方式。每个命令有一个 6 位的命令编号，例如 CMD0 的编号就是 0，CMD55 的编号就是 55；还带有四字节的参数。每个命令会组装成一个 48 位的分组：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bit[47]=0: Start Bit&lt;/li&gt;
&lt;li&gt;bit[46]=1: Transmission Bit&lt;/li&gt;
&lt;li&gt;bit[45:40]: Command Index&lt;/li&gt;
&lt;li&gt;bit[39:8]: Argument&lt;/li&gt;
&lt;li&gt;bit[7:1]: CRC7&lt;/li&gt;
&lt;li&gt;bit[0]=1: End Bit&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可见额外多了一个 CRC7 的校验和。&lt;/p&gt;
&lt;p&gt;SD 卡规定，SPI 模式下，所有的数据传输都是对齐到 8 位，也就是从 CS 拉低开始算，每 8 个时钟上升沿是一个字节，无论命令还是响应，都在 8 位的边界上传输。&lt;/p&gt;
&lt;p&gt;想要读取数据的话，就要发送 READ_SINGLE_BLOCK 命令，参数就是要读取的 Block 地址。SD 卡回先回复一个字节的响应，然后开始发数据，数据从 Start Block Token 开始，然后是一个 Block 的数据（通常是 512 字节），最后再两个字节的 CRC16。&lt;/p&gt;
&lt;p&gt;写数据则是发送 WRITE_BLOCK 命令，SD 卡回复一个字节的响应，然后控制器开始传输数据，数据从 Start Block Token 开始，接着是要写入的数据，最后是两个字节的 CRC16，然后 SD 卡回复一个字节的响应，标志着写入成功。&lt;/p&gt;
&lt;h2 id=&#34;spi-以太网控制器&#34;&gt;SPI 以太网控制器&lt;/h2&gt;
&lt;p&gt;有一些以太网产品提供了 SPI 接口，例如 &lt;a href=&#34;https://ww1.microchip.com/downloads/aemDocuments/documents/UNG/ProductDocuments/DataSheets/KSZ8851SNL-Single-Port-Ethernet-Controller-with-SPI-DS00002381C.pdf&#34;&gt;KSZ8851SNL/SNLI&lt;/a&gt;，集成了 MAC 和 PHY，直接连接 MDI/MDI-X 接口，虽然最高只支持百兆网，但是接口上确实非常简单。&lt;/p&gt;
&lt;p&gt;SPI 上发送的命令就两类：一类是读写寄存器，一类是读写 RX/TX FIFO。&lt;/p&gt;
&lt;h2 id=&#34;键盘和触摸板&#34;&gt;键盘和触摸板&lt;/h2&gt;
&lt;p&gt;一些型号的苹果电脑的键盘和触摸板是通过 SPI 接口访问的，在 Linux 中有相应的 applespi 驱动。&lt;/p&gt;
&lt;h2 id=&#34;spi-vs-i2c&#34;&gt;SPI vs I2C&lt;/h2&gt;
&lt;p&gt;SPI 和 I2C 的区别在于，前者信号更多，全双工传输；后者信号更少，半双工传输。SPI 通过 CS 信号选择 Slave 芯片，I2C 通过地址进行区分。此外 I2C 还需要 Pull up resistor，这样如果没有设备响应，就会 NACK。&lt;/p&gt;
&lt;p&gt;一些芯片提供了 SPI 或 I2C 的选项：共用两个信号，允许用户选择用 I2C 还是 SPI。例如 &lt;a href=&#34;http://cdn.sparkfun.com/datasheets/Dev/Arduino/Shields/WolfsonWM8731.pdf&#34;&gt;WM8731&lt;/a&gt;，既支持 I2C（记为 2-wire mode），又支持 SPI（记为 3-wire mode）。一般这种时候，SPI 和 I2C 就是用来配置一些寄存器的，另外可能还有一些接口，例如 WM8731 负责声音数据传输的实际上是 I2S。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 LiteX 中使用 UART over JTAG</title>
      <link>https://jia.je/hardware/2023/04/24/litex-uart-over-jtag/</link>
      <pubDate>Mon, 24 Apr 2023 17:19:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/04/24/litex-uart-over-jtag/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;在给 Alinx AX7021 适配 LiteX 的时候，遇到一个问题：PL 上没有连接串口，只有 PS 连接了串口，如果用 RISC-V 软核的话，就会面临无串口可用的情况，除非在扩展 IO 上自己定义一个串口。&lt;/p&gt;
&lt;p&gt;因此研究了一下 LiteX 自带的 UART over JTAG 功能，在 Alinx AX7021 中调试出来了。&lt;/p&gt;
&lt;h2 id=&#34;litex-配置&#34;&gt;LiteX 配置&lt;/h2&gt;
&lt;p&gt;启用很简单，直接在命令里添加 &lt;code&gt;--uart-name jtag_uart&lt;/code&gt; 即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python3 -m litex_boards.targets.alinx_ax7021 --build --uart-name jtag_uart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果要设置成默认的话，也可以在代码中添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; kwargs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uart_name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;serial&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;serial&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Defaults to JTAG-UART since UART is connected to PS instead of PL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            kwargs[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uart_name&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jtag_uart&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么 FPGA 部分的准备就完成了，把 bitstream 下载到 FPGA 即可进入下一步。&lt;/p&gt;
&lt;h2 id=&#34;openocd-配置&#34;&gt;OpenOCD 配置&lt;/h2&gt;
&lt;p&gt;下一步是使用 litex_term 来连接 UART over JTAG。它的启动方式是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ litex_term --jtag-config alinx_ax7021.cfg jtag
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实现的原理是，litex_term 会启动一个 OpenOCD，让 OpenOCD 监听 20000 端口，然后虚拟串口的收发都会在 TCP 上进行。那么，首先第一步是要让 OpenOCD 找到 Zynq 中的 PL。首先可以找到 Zynq 的 OpenOCD 配置模板：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;find interface&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ftdi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;digilent_jtag_smt2.cfg&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reset_config srst_only srst_push_pull
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;find target&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;zynq_7000.cfg&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个模板可以找到 ARM 核和 FPGA PL 部分，但是因为名字和 litex_term 期望的不同，所以无法工作。去掉那些不需要的，只保留想要的 PL 部分的 JTAG 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;find interface&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ftdi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;digilent_jtag_smt2.cfg&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reset_config srst_only srst_push_pull
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adapter speed &lt;span style=&#34;color:#ae81ff&#34;&gt;15000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jtag newtap zynq_pl bs &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;irlen &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ignore-version &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ircapture &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;irmask &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03723093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03722093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0373c093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03728093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0373B093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03732093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03727093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0372C093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03731093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03736093&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，就可以启动 OpenOCD：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openocd -f alinx_ax7021.cfg -f stream.cfg -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;init; irscan zynq_pl.bs 2; jtagstream_serve zynq_pl.bs 20000&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 stream.cfg 是 litex_term 生成的，没有用 litex_term 启动是因为它写死了 tap 的名字，需要适配，不如直接绕过它去启动 OpenOCD，然后用 nc 连接：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nc localhost &lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;litex&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就可以看到熟悉的串口了。但是跑命令的时候，经常出现重复字幕的输出：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;LiteX BIOS, available commands:

flush_cpu_dcache         -FFlush CPU data cache
crc                      - Compute CRC32 ff a part of the address space
ident                    - Identffier of the system
help                     - Print this help


serialboot               - Boot from Serial (SFL)
reboot                   - Reboot
boot                     - Boot from Meoory

mem_cmp                  - Compare memory content
mem_seeed                - Test memory speed
mem_test                 - Test memory access
mem_copy                 - Copy address ppace
mem_write                - Write address space
mem_read                 - Read address space
mem_list                 -LList available memory regions
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;怀疑是哪里速率不匹配，导致同一份数据被读出来两次。之后用一个更低的 CPU 主频再试一次。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DRAM 的拓扑和训练</title>
      <link>https://jia.je/hardware/2023/04/20/dram-topology-training/</link>
      <pubDate>Thu, 20 Apr 2023 09:11:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/04/20/dram-topology-training/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/sdram.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;dram-training&#34;&gt;DRAM Training&lt;/h2&gt;
&lt;p&gt;DRAM 一直有一个比较麻烦的初始化过程，就是 DRAM Training，其中很重要的一步就是计算出各个数据线相对于时钟的偏移（skew）。这个偏移是怎么来的呢？&lt;/p&gt;
&lt;p&gt;我们知道，对于 SRAM，如果想要更多的位宽，只需要把地址线和控制信号连接到多个 SRAM 上，然后把 SRAM 的数据信号并行连接到 FPGA 上就可以了，但是前提是要尽量保证等长，否则一样有偏移的问题。DRAM 也是采用类似的方法进行扩展的，但是 DRAM 通常需要并行连接很多个芯片，例如 8 个 x8 的芯片的合并成一个 64 位的 DDR SDRAM。此时数据线依然是并行连接，但是地址线和控制信号就出现了走线困难：很难在那么小的空间里，等长地把地址和控制信号分布到各个芯片上，而且还有信号完整性的问题。&lt;/p&gt;
&lt;h2 id=&#34;fly-by-topology&#34;&gt;Fly-by topology&lt;/h2&gt;
&lt;p&gt;因此，实际上地址和控制信号是采用了串联的方式连接，也就是下图的右边的连接方式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ddr_fly_by.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图源 &lt;a href=&#34;https://docs.xilinx.com/r/en-US/ug863-versal-pcb-design/Signals-and-Connections-for-DDR4-Interfaces&#34;&gt;Versal ACAP PCB Design User Guide (UG863)&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但是数据信号（DQ 和 DQS）依然是并行点对点连接到 DRAM 上的（上图左侧）。这就出现了问题：不同的 DRAM 芯片，数据和时钟的偏差不同，数据可能差不多时间到，但是时钟的延迟越来越大：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;{
  signal:
    [
      { name: &#34;clock&#34;, wave: &#34;p....&#34;},
      { name: &#34;data&#34;, wave: &#34;01010&#34;},
      { name: &#34;clock_dram0&#34;, wave: &#34;p....&#34;, phase: -0.1},
      { name: &#34;clock_dram1&#34;, wave: &#34;p....&#34;, phase: -0.2},
      { name: &#34;clock_dram2&#34;, wave: &#34;p....&#34;, phase: -0.3},
      { name: &#34;clock_dram3&#34;, wave: &#34;p....&#34;, phase: -0.4},
      { name: &#34;clock_dram4&#34;, wave: &#34;p....&#34;, phase: -0.5},
      { name: &#34;clock_dram5&#34;, wave: &#34;p....&#34;, phase: -0.6},
      { name: &#34;clock_dram6&#34;, wave: &#34;p....&#34;, phase: -0.7},
      { name: &#34;clock_dram7&#34;, wave: &#34;p....&#34;, phase: -0.8},
    ]
}
&lt;/script&gt;&lt;p&gt;注：这里简化了，当成 SDR 来画。&lt;/p&gt;
&lt;p&gt;不做任何处理的话，DRAM 采样得到的数据就不正确了。为了解决这个问题，就需要人为地在数据信号上也加上可变的延迟，保证时钟和数据同步，这样 DRAM 才可以实现正确的写入：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;{
  signal:
    [
      { name: &#34;clock&#34;, wave: &#34;p.p..&#34;},
      { name: &#34;data&#34;, wave: &#34;01010&#34;},
      { name: &#34;clock_dram0&#34;, wave: &#34;p.p..&#34;, phase: -0.1},
      { name: &#34;data_dram0&#34;, wave: &#34;01010&#34;, phase: -0.1},
      { name: &#34;clock_dram1&#34;, wave: &#34;p.p..&#34;, phase: -0.2},
      { name: &#34;data_dram1&#34;, wave: &#34;01010&#34;, phase: -0.2},
      { name: &#34;clock_dram2&#34;, wave: &#34;p.p..&#34;, phase: -0.3},
      { name: &#34;data_dram2&#34;, wave: &#34;01010&#34;, phase: -0.3},
      { name: &#34;clock_dram3&#34;, wave: &#34;p.p..&#34;, phase: -0.4},
      { name: &#34;data_dram3&#34;, wave: &#34;01010&#34;, phase: -0.4},
    ]
}
&lt;/script&gt;&lt;h2 id=&#34;write-leveling&#34;&gt;Write Leveling&lt;/h2&gt;
&lt;p&gt;为了解决写入时，时钟和数据有偏移的问题，需要采用 Write Leveling 方法来解决。具体思路是这样的：如果 DRAM 以时钟信号去采样数据信号可以得到正确的结果，那反过来，如果认为数据信号是时钟信号，在数据信号的上升沿去采样时钟，应该也可以观测到稳定的结果。&lt;/p&gt;
&lt;p&gt;所以 Write Leveling 的工作方式就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置 DRAM 进入 Write Leveling 模式，此时 DRAM 会使用 DQS 信号来采样 CK 信号，把结果输出到 DQ 上&lt;/li&gt;
&lt;li&gt;DDR 控制器不断地修改 DQS 的输出延迟，然后统计 DQ 上的输出&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示意图如下：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;{
  signal:
    [
      { name: &#34;ck&#34;, wave: &#34;p.p..&#34;},
      { name: &#34;dqs_0&#34;, wave: &#34;010..&#34;, phase: -0.5},
      { name: &#34;dq_0&#34;, wave: &#34;0....&#34;, phase: -0.55},
      { name: &#34;dqs_1&#34;, wave: &#34;010..&#34;, phase: -0.7},
      { name: &#34;dq_1&#34;, wave: &#34;0....&#34;, phase: -0.75},
      { name: &#34;dqs_2&#34;, wave: &#34;010..&#34;, phase: -0.9},
      { name: &#34;dq_2&#34;, wave: &#34;01...&#34;, phase: -0.95},
      { name: &#34;dqs_3&#34;, wave: &#34;010..&#34;, phase: -1.1},
      { name: &#34;dq_3&#34;, wave: &#34;01...&#34;, phase: -1.15},
    ]
}
&lt;/script&gt;&lt;p&gt;上图中，用不断增大的四种延迟的 &lt;code&gt;dqs&lt;/code&gt; 对 &lt;code&gt;ck&lt;/code&gt; 进行采样：用 &lt;code&gt;dqs_0&lt;/code&gt; 和 &lt;code&gt;dqs_1&lt;/code&gt; 采样得到了 0，用 &lt;code&gt;dqs_2&lt;/code&gt; 和 &lt;code&gt;dqs_3&lt;/code&gt; 采样得到了 1。把这些结果列出来，可能会得到类似下面的结果：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;001111111111111111110000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也就是说，随着延迟增大，采样的数据从 0 变成 1，再从 1 变成 0。我们的目标是，让 &lt;code&gt;dqs&lt;/code&gt; 和 &lt;code&gt;ck&lt;/code&gt; 同步。在上图中，&lt;code&gt;dqs_2&lt;/code&gt; 的上升沿和 &lt;code&gt;ck&lt;/code&gt; 上升沿是最接近的，而刚好 &lt;code&gt;dqs_2&lt;/code&gt; 也正好出现在采样 0 变成采样 1 的位置。这意味着，只要找到采样数据从 0 变成 1 的位置，就知道如何让 DQS 与 CK 同步了。&lt;/p&gt;
&lt;p&gt;这样就完成了 Write Leveling 的步骤，实现了 DQS 与 CK 同步的目标，那么在写入数据的时候，DRAM 就可以得到正确的 DQS 信号了。&lt;/p&gt;
&lt;h2 id=&#34;read-leveling&#34;&gt;Read Leveling&lt;/h2&gt;
&lt;p&gt;在上一步的 Write Leveling 当中，通过修改内存控制器的输出延迟，保证了 DRAM 可以得到同步的 DQS 和 CK 信号，解决了 Fly by topology 引入的延迟不一致的问题。但是，对于读操作，数据从 DRAM 输出，输入到内存控制器，又会引入一定的延迟。所以对读操作，也需要进行校准。&lt;/p&gt;
&lt;p&gt;回顾 SRAM，当想要测试读取功能的时候，会首先写入一些数据，再读出来，判断读取的数据和之前写入的数据是否一致。DRAM 也是类似的：先向 MPR 写入一些伪随机数据，然后要求 DRAM 从 MPR 中读取数据，而不是从 memory cell 中读取数据；然后内存控制器一侧不断进行读取操作，在不同的延迟下，比较读取的数据与预期的随机数据是否一致。最后也会得到一个延迟的区间，在这个区间内可以读取出正确的结果。最后，把延迟设定在区间的中央位置。&lt;/p&gt;
&lt;h2 id=&#34;clam-shell-topology&#34;&gt;Clam Shell Topology&lt;/h2&gt;
&lt;p&gt;再回到拓扑的问题上来，实际上除了 Fly by topology，还有一种拓扑是 Clam shell topology：把 DRAM 分布在 PCB 的上面和下面，这样可以节省 PCB 的面积，但是走线就会比较困难：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ddr_clam_shell.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图源 &lt;a href=&#34;https://docs.xilinx.com/r/en-US/pg313-network-on-chip/Clamshell-Topology&#34;&gt;Versal ACAP Programmable Network on Chip and Integrated Memory Controller LogiCORE IP Product Guide (PG313) &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;直观地讲，两个芯片都放在 PCB 的正面，如果要连线的话，如果保证引脚顺序接近一致，就可以比较容易地连接，不会有很多交叉的地方。但如果一个在正面，另一个在背面，引脚的顺序就倒转过来了，连线的时候就比较困难。解决的办法是，修改引脚的顺序，把一些引脚的功能进行对调，使得走线更加简单：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ddr_mirror.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图源 &lt;a href=&#34;https://docs.xilinx.com/r/en-US/ug863-versal-pcb-design/Utilizing-Address-Mirroring-to-Ease-Clamshell-Routing&#34;&gt;Versal ACAP PCB Design User Guide (UG863)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里特意挑选了一些不影响特殊功能的引脚来交换，使得大部分功能，即使交换了引脚，也可以正常工作。但是，对于 Mode Register Set 操作，必须要内存控制器自己先内部交换位的顺序，才能保证在 DRAM 一侧得到正确的结果。&lt;/p&gt;
&lt;p&gt;此外，Clam Shell Topology 的正面和背面各有一个 cs_n 片选信号，但是这和 Dual Rank 不同：Dual Rank 是正面和背面都有同样数量的 DRAM 芯片，共享地址信号、数据信号和控制信号，总线上同一时间只有一侧的 DRAM 芯片在使用，好处是内存容量翻倍，并且两个 rank 可以互相掩盖延迟；而 Clam Shell Topology 的两个 cs_n 是为了给 Mode Register Set 操作指定正面或背面，而其余的大部分操作，可以正面和背面同时使用，因为它们的数据信号并没有共享。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ddr_rank.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图源 &lt;a href=&#34;https://blog.memory4less.com/2022/09/16/difference-between-dual-rank-and-single-rank-ram/&#34;&gt;DIFFERENCE BETWEEN DUAL RANK AND SINGLE RANK RAM&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;实际上，前面的整个研究过程，来自于我对 VCU128 LiteX 移植的观察：&lt;a href=&#34;https://github.com/litex-hub/litex-boards/issues/496&#34;&gt;VCU128 DDR4 memory calibration failure&lt;/a&gt;。我在配置 litedram 的时候，发现总是有一半的 DRAM 芯片无法使用，和 Datasheet 对照了以后，发现正好是 PCB 背面的那一半。接着，发现它是 Clam Shell Topology 方式来分布的，然后 Top 和 Bottom 各有一个 cs_n 信号，这一点在 UG1302 里是没有写的，在 xdc 里才可以找到：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_property PACKAGE_PIN BK48       &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PL_DDR4_BOT_CS_B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Bank  66 VCCO - DDR4_VDDQ_1V2 - IO_L7P_T1L_N0_QBC_AD13P_66
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;set_property IOSTANDARD  SSTL12_DCI &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PL_DDR4_BOT_CS_B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Bank  66 VCCO - DDR4_VDDQ_1V2 - IO_L7P_T1L_N0_QBC_AD13P_66
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;set_property PACKAGE_PIN BP49     &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PL_DDR4_CS_B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Bank  66 VCCO - DDR4_VDDQ_1V2 - IO_L1N_T0L_N1_DBC_66
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;set_property IOSTANDARD  SSTL12   &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PL_DDR4_CS_B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Bank  66 VCCO - DDR4_VDDQ_1V2 - IO_L1N_T0L_N1_DBC_66
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以 Xilinx 文档也是可能出错的，需要结合多个信息源来判断。这里有 xdc 和 schematic 可以参考，都可以发现这个结论。&lt;/p&gt;
&lt;p&gt;沿着这个思路，我给 litedram 添加了 clam shell topology 的支持：&lt;a href=&#34;https://github.com/enjoy-digital/litedram/pull/332&#34;&gt;https://github.com/enjoy-digital/litedram/pull/332&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/enjoy-digital/litex/pull/1673&#34;&gt;https://github.com/enjoy-digital/litex/pull/1673&lt;/a&gt;，实现方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在校准阶段，把 Top 和 Bottom 两个 cs_n 暴露给软件，软件在 MRS 的时候，分两次写入，第一次原样写到 Top，第二次交换地址顺序，再写入 Bottom。&lt;/li&gt;
&lt;li&gt;正常工作阶段，把 Top 和 Bottom 的两个 cs_n 当成一个用，也就是当成 single rank dram。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;训练代码&#34;&gt;训练代码&lt;/h2&gt;
&lt;p&gt;下面结合 litex 和 litedram 的代码，以及 DDR4 标准，来验证上面的观察。&lt;/p&gt;
&lt;h3 id=&#34;write-leveling-1&#34;&gt;Write Leveling&lt;/h3&gt;
&lt;p&gt;Write Leveling 的核心函数是 &lt;code&gt;sdram_write_leveling_scan&lt;/code&gt;，它的核心思路是：&lt;/p&gt;
&lt;p&gt;第一步调用 &lt;code&gt;sdram_write_leveling_on&lt;/code&gt; 打开 DRAM 的 Write Leveling 模式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;sdram_write_leveling_on&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;循环每个 DRAM 芯片的每个 DQS 信号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;SDRAM_PHY_MODULES;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (dq_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; dq_line &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; DQ_COUNT; dq_line&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* 设置 DQS 初始延迟为 0 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;sdram_leveling_action&lt;/span&gt;(i, dq_line, write_rst_delay);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* 循环 DQS 延迟 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;err_ddrphy_wdly;j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; zero_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; one_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;loops; k&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/* 发送 DQS 序列：00000001 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ddrphy_wlevel_strobe_write&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/* 统计 1 和 0 的个数 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (buf[SDRAM_PHY_MODULES&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          one_count&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          zero_count&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (one_count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; zero_count)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/* DQS 采样到了 CK 的正半周期 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        taps_scan[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/* DQS 采样到了 CK 的负半周期 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        taps_scan[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;/* 每次循环增加一次 DQS 延迟 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;sdram_leveling_action&lt;/span&gt;(i, dq_line, write_inc_delay);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* 找到一个最长的连续 1 的序列 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    one_window_active &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    one_window_start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    one_window_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    one_window_best_start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    one_window_best_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;err_ddrphy_wdly&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (one_window_active) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; err_ddrphy_wdly) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (taps_scan[j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;/* 结束了一段连续的 1 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          one_window_active &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          one_window_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; one_window_start;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;/* 记录最长的连续 1 的长度和位置 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (one_window_count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; one_window_best_count) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            one_window_best_start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; one_window_start;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            one_window_best_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; one_window_count;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/* 找到连续的 1 的开头 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; err_ddrphy_wdly &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; taps_scan[j]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          one_window_active &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          one_window_start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* 要找的延迟就是连续的 1 序列的开始位置 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    delays[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; one_window_best_start;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sdram_write_leveling_off&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就实现了 Write Leveling 的全流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置 DRAM 进入 Write Leveling 模式，DRAM 用 DQS 对 CK 采样，结果输出到 DQ&lt;/li&gt;
&lt;li&gt;在不同的 DQS 延迟下，发送同样的 00000001 DQS 模式，观察 DQ 上的数据&lt;/li&gt;
&lt;li&gt;统计 DQ 上的 1 和 0 的个数，如果 1 更多，就认为当前 DQS 延迟下，DQS 采样到了 CK 的正半周期；反之如果 0 更多，就认为当前 DQS 延迟下，DQS 采样到了 CK 的负半周期&lt;/li&gt;
&lt;li&gt;在第三步的结果中，找到最长的连续的 1 序列，那么这个序列的开始，就对应了采样值从 0 到 1 的变化，此时 DQS 与 CK 基本同步&lt;/li&gt;
&lt;li&gt;最后设置 DRAM 退出 Write Leveling 模式&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.systemverilog.io/design/ddr4-initialization-and-calibration/&#34;&gt;https://www.systemverilog.io/design/ddr4-initialization-and-calibration/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.xilinx.com/r/en-US/ug863-versal-pcb-design/Signals-and-Connections-for-DDR4-Interfaces&#34;&gt;https://docs.xilinx.com/r/en-US/ug863-versal-pcb-design/Signals-and-Connections-for-DDR4-Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.xilinx.com/r/en-US/pg353-versal-acap-soft-ddr4-mem-ip/Calibration-Overview&#34;&gt;https://docs.xilinx.com/r/en-US/pg353-versal-acap-soft-ddr4-mem-ip/Calibration-Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.xilinx.com/r/en-US/pg313-network-on-chip/Clamshell-Topology&#34;&gt;https://docs.xilinx.com/r/en-US/pg313-network-on-chip/Clamshell-Topology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.xilinx.com/r/en-US/ug863-versal-pcb-design/Utilizing-Address-Mirroring-to-Ease-Clamshell-Routing&#34;&gt;https://docs.xilinx.com/r/en-US/ug863-versal-pcb-design/Utilizing-Address-Mirroring-to-Ease-Clamshell-Routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.memory4less.com/2022/09/16/difference-between-dual-rank-and-single-rank-ram/&#34;&gt;https://blog.memory4less.com/2022/09/16/difference-between-dual-rank-and-single-rank-ram/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://daffy1108.wordpress.com/2010/09/02/understanding-ddr3-write-leveling-and-read-leveling/&#34;&gt;https://daffy1108.wordpress.com/2010/09/02/understanding-ddr3-write-leveling-and-read-leveling/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>在 Arty A7 上用 LiteX 和 VexRiscv 跑 Linux</title>
      <link>https://jia.je/hardware/2023/04/19/litex-digilent-arty-a7/</link>
      <pubDate>Wed, 19 Apr 2023 15:55:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/04/19/litex-digilent-arty-a7/</guid>
      <description>&lt;h2 id=&#34;litex-安装&#34;&gt;litex 安装&lt;/h2&gt;
&lt;p&gt;litex 安装过程按照 &lt;a href=&#34;https://github.com/enjoy-digital/litex/wiki/Installation&#34;&gt;https://github.com/enjoy-digital/litex/wiki/Installation&lt;/a&gt; 进行，由于需要 pip install，建议用 venv 来开一个干净的环境：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m venv venv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source venv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd litex
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./litex_setup.py --init --install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;构建-bitstream&#34;&gt;构建 bitstream&lt;/h2&gt;
&lt;p&gt;litex-boards 已经内建了 Arty A7 的支持，直接运行下列命令，就可以得到 bitstream：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m litex_boards.targets.digilent_arty --build --with-ethernet
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以在 build/digilent_arty/gateware 目录下找到 bitstream。可以通过命令行参数来自定义需要的功能，详见 &lt;a href=&#34;https://github.com/litex-hub/litex-boards/blob/f5e51d72bca6ed0325c1213791a78362326002f8/litex_boards/targets/digilent_arty.py#L162-L180&#34;&gt;https://github.com/litex-hub/litex-boards/blob/f5e51d72bca6ed0325c1213791a78362326002f8/litex_boards/targets/digilent_arty.py#L162-L180&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果想切换 CPU 为 Rocket Chip 的话，克隆并安装 &lt;a href=&#34;https://github.com/litex-hub/pythondata-cpu-rocket&#34;&gt;https://github.com/litex-hub/pythondata-cpu-rocket&lt;/a&gt;，添加 &lt;code&gt;--cpu-type rocket --cpu-variant small&lt;/code&gt; 参数即可。&lt;/p&gt;
&lt;h2 id=&#34;下载-bitstream&#34;&gt;下载 bitstream&lt;/h2&gt;
&lt;p&gt;最后，连接 microUSB 和网线到电脑，然后下载 bitstream：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openFPGALoader -b arty digilent_arty.bit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;screen /dev/tty.usbserial-XXXXXXXXXXXXX &lt;span style=&#34;color:#ae81ff&#34;&gt;115200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就可以看到 litex 的输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;===============&lt;/span&gt; SoC &lt;span style=&#34;color:#f92672&#34;&gt;==================&lt;/span&gt;--
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CPU:            VexRiscv @ 100MHz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BUS:            WISHBONE 32-bit @ 4GiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CSR:            32-bit data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ROM:            128.0KiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SRAM:           8.0KiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L2:             8.0KiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SDRAM:          256.0MiB 16-bit @ 800MT/s &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;CL-7 CWL-5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MAIN-RAM:       256.0MiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;==========&lt;/span&gt; Initialization &lt;span style=&#34;color:#f92672&#34;&gt;============&lt;/span&gt;--
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Ethernet init...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Initializing SDRAM @0x40000000...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Switching SDRAM to software control.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Read leveling:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m0, b00: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m0, b01: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m0, b02: |11111111110000000000000000000000| delays: 04+-04
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m0, b03: |00000000000000111111111111000000| delays: 19+-05
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m0, b04: |00000000000000000000000000000011| delays: 30+-00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m0, b05: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m0, b06: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m0, b07: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  best: m0, b03 delays: 19+-05
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m1, b00: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m1, b01: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m1, b02: |11111111110000000000000000000000| delays: 04+-04
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m1, b03: |00000000000000111111111111000000| delays: 19+-05
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m1, b04: |00000000000000000000000000000011| delays: 30+-00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m1, b05: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m1, b06: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m1, b07: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  best: m1, b03 delays: 19+-05
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Switching SDRAM to hardware control.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Memtest at 0x40000000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2.0MiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Write: 0x40000000-0x40200000 2.0MiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   Read: 0x40000000-0x40200000 2.0MiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Memtest OK
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Memspeed at 0x40000000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Sequential, 2.0MiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Write speed: 37.0MiB/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   Read speed: 48.7MiB/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;==============&lt;/span&gt; Boot &lt;span style=&#34;color:#f92672&#34;&gt;==================&lt;/span&gt;--
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Booting from serial...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Press Q or ESC to abort boot completely.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sL5DdSMmkekro
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Timeout
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Booting from network...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Local IP: 192.168.1.50
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Remote IP: 192.168.1.100
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Booting from boot.json...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Booting from boot.bin...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Copying boot.bin to 0x40000000...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Network boot failed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;No boot medium found
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;=============&lt;/span&gt; Console &lt;span style=&#34;color:#f92672&#34;&gt;================&lt;/span&gt;--
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;litex&amp;gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可见是非常方便的。之后可以用 litex_term 来往里面传程序，也可以直接通过 TFTP 来传。&lt;/p&gt;
&lt;h2 id=&#34;启动-linux&#34;&gt;启动 Linux&lt;/h2&gt;
&lt;p&gt;接下来，可以使用项目 &lt;a href=&#34;https://github.com/litex-hub/linux-on-litex-vexriscv&#34;&gt;https://github.com/litex-hub/linux-on-litex-vexriscv&lt;/a&gt; 来启动 Linux。参考项目 README，编译 Linux 并启动。不想折腾的话，可以从 &lt;a href=&#34;https://github.com/litex-hub/linux-on-litex-vexriscv/issues/164&#34;&gt;https://github.com/litex-hub/linux-on-litex-vexriscv/issues/164&lt;/a&gt; 下载编译好的结果。&lt;/p&gt;
&lt;p&gt;首先克隆项目到本地，然后运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/litex-hub/linux-on-litex-vexriscv.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd linux-on-litex-vexriscv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./make.py --board&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;arty
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就生成了 bitstream，接下来构建 Linux 和 rootfs：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone http://github.com/buildroot/buildroot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd buildroot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make BR2_EXTERNAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;../linux-on-litex-vexriscv/buildroot/ litex_vexriscv_defconfig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再构建 OpenSBI：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/litex-hub/opensbi --branch 0.8-linux-on-litex-vexriscv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd opensbi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# riscv32-unknown-elf toolchain is built by ct-ng&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make CROSS_COMPILE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;riscv32-unknown-elf- PLATFORM&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;litex/vexriscv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是实践过程中发现 ct-ng 编译的是 hardfloat 工具链，而默认配置下 vexriscv 不带 FPU，所以编译时用的是 rv32ima 作为 target，链接的时候报错，最后就直接用编译好的版本。&lt;/p&gt;
&lt;p&gt;最后得到如下的几个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boot.json: linux-on-litex-vexriscv/images/boot.json&lt;/li&gt;
&lt;li&gt;rv32.dtb: linux-on-litex-vexriscv/images/rv32.dtb&lt;/li&gt;
&lt;li&gt;Image: buildroot/output/images/Image&lt;/li&gt;
&lt;li&gt;rootfs.cpio: buildroot/output/images/rootfs.cpio&lt;/li&gt;
&lt;li&gt;opensbi.bin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把这些文件复制到 TFTP 服务的目录下，重新 Program linux-on-litex-vexriscv/build/arty/gateware/arty.bit，即可启动 Linux：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;--============== Boot ==================--
Booting from serial...
Press Q or ESC to abort boot completely.
sL5DdSMmkekro
Timeout
Booting from SDCard in SD-Mode...
Booting from boot.json...
Booting from boot.bin...
SDCard boot failed.
Booting from network...
Local IP: 192.168.1.50
Remote IP: 192.168.1.100
Booting from boot.json...
Copying Image to 0x40000000... (7726264 bytes)
Copying rv32.dtb to 0x40ef0000... (5294 bytes)
Copying rootfs.cpio to 0x41000000... (3566592 bytes)
Copying opensbi.bin to 0x40f00000... (53640 bytes)
Executing booted program at 0x40f00000

--============= Liftoff! ===============--

OpenSBI v0.8-1-gecf7701
   ____                    _____ ____ _____
  / __ \                  / ____|  _ \_   _|
 | |  | |_ __   ___ _ __ | (___ | |_) || |
 | |  | | &amp;#39;_ \ / _ \ &amp;#39;_ \ \___ \|  _ &amp;lt; | |
 | |__| | |_) |  __/ | | |____) | |_) || |_
  \____/| .__/ \___|_| |_|_____/|____/_____|
        | |
        |_|

Platform Name       : LiteX / VexRiscv-SMP
Platform Features   : timer,mfdeleg
Platform HART Count : 8
Boot HART ID        : 0
Boot HART ISA       : rv32imas
BOOT HART Features  : time
BOOT HART PMP Count : 0
Firmware Base       : 0x40f00000
Firmware Size       : 124 KB
Runtime SBI Version : 0.2

MIDELEG : 0x00000222
MEDELEG : 0x0000b101
[    0.000000] Linux version 6.1.0-rc2 (jiegec@linux) (riscv32-buildroot-linux-gnu-gcc.br_real (Buildroot 2023.02-270-gb100440bff) 11.3.0, GNU ld (GNU Binutils) 2.38) #1 SMP Wed Apr 19 16:21:39 CST 2023
[    0.000000] earlycon: liteuart0 at I/O port 0x0 (options &amp;#39;&amp;#39;)
[    0.000000] Malformed early option &amp;#39;console&amp;#39;
[    0.000000] earlycon: liteuart0 at MMIO 0xf0001000 (options &amp;#39;&amp;#39;)
[    0.000000] printk: bootconsole [liteuart0] enabled
[    0.000000] Zone ranges:
[    0.000000]   Normal   [mem 0x0000000040000000-0x000000004fffffff]
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000040000000-0x000000004fffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000040000000-0x000000004fffffff]
[    0.000000] SBI specification v0.2 detected
[    0.000000] SBI implementation ID=0x1 Version=0x8
[    0.000000] SBI TIME extension detected
[    0.000000] SBI IPI extension detected
[    0.000000] SBI RFENCE extension detected
[    0.000000] SBI HSM extension detected
[    0.000000] riscv: base ISA extensions aim
[    0.000000] riscv: ELF capabilities aim
[    0.000000] percpu: Embedded 8 pages/cpu s11732 r0 d21036 u32768
[    0.000000] Built 1 zonelists, mobility grouping on.  Total pages: 65024
[    0.000000] Kernel command line: console=liteuart earlycon=liteuart,0xf0001000 rootwait root=/dev/ram0
[    0.000000] Dentry cache hash table entries: 32768 (order: 5, 131072 bytes, linear)
[    0.000000] Inode-cache hash table entries: 16384 (order: 4, 65536 bytes, linear)
[    0.000000] mem auto-init: stack:off, heap alloc:off, heap free:off
[    0.000000] Memory: 243336K/262144K available (5848K kernel code, 571K rwdata, 906K rodata, 215K init, 254K bss, 18808K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
[    0.000000] rcu: Hierarchical RCU implementation.
[    0.000000] rcu:     RCU restricting CPUs from NR_CPUS=32 to nr_cpu_ids=1.
[    0.000000] rcu: RCU calculated value of scheduler-enlistment delay is 25 jiffies.
[    0.000000] rcu: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=1
[    0.000000] NR_IRQS: 64, nr_irqs: 64, preallocated irqs: 0
[    0.000000] riscv-intc: 32 local interrupts mapped
[    0.000000] plic: interrupt-controller@f0c00000: mapped 32 interrupts with 1 handlers for 2 contexts.
[    0.000000] rcu: srcu_init: Setting srcu_struct sizes based on contention.
[    0.000000] riscv-timer: riscv_timer_init_dt: Registering clocksource cpuid [0] hartid [0]
[    0.000000] clocksource: riscv_clocksource: mask: 0xffffffffffffffff max_cycles: 0x171024e7e0, max_idle_ns: 440795205315 ns
[    0.000018] sched_clock: 64 bits at 100MHz, resolution 10ns, wraps every 4398046511100ns
[    0.010246] Console: colour dummy device 80x25
[    0.014169] Calibrating delay loop (skipped), value calculated using timer frequency.. 200.00 BogoMIPS (lpj=400000)
[    0.024255] pid_max: default: 32768 minimum: 301
[    0.033262] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
[    0.039790] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
[    0.080128] ASID allocator using 9 bits (512 entries)
[    0.086947] rcu: Hierarchical SRCU implementation.
[    0.090826] rcu:     Max phase no-delay instances is 1000.
[    0.103556] smp: Bringing up secondary CPUs ...
[    0.107186] smp: Brought up 1 node, 1 CPU
[    0.118798] devtmpfs: initialized
[    0.169571] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
[    0.178637] futex hash table entries: 256 (order: 2, 16384 bytes, linear)
[    0.214981] NET: Registered PF_NETLINK/PF_ROUTE protocol family
[    0.455944] pps_core: LinuxPPS API ver. 1 registered
[    0.460007] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &amp;lt;giometti@linux.it&amp;gt;
[    0.469508] PTP clock support registered
[    0.476324] FPGA manager framework
[    0.493464] clocksource: Switched to clocksource riscv_clocksource
[    0.722433] NET: Registered PF_INET protocol family
[    0.731210] IP idents hash table entries: 4096 (order: 3, 32768 bytes, linear)
[    0.752236] tcp_listen_portaddr_hash hash table entries: 512 (order: 0, 4096 bytes, linear)
[    0.760269] Table-perturb hash table entries: 65536 (order: 6, 262144 bytes, linear)
[    0.767834] TCP established hash table entries: 2048 (order: 1, 8192 bytes, linear)
[    0.775654] TCP bind hash table entries: 2048 (order: 3, 32768 bytes, linear)
[    0.783026] TCP: Hash tables configured (established 2048 bind 2048)
[    0.789689] UDP hash table entries: 256 (order: 1, 8192 bytes, linear)
[    0.795620] UDP-Lite hash table entries: 256 (order: 1, 8192 bytes, linear)
[    0.816406] Unpacking initramfs...
[    0.926651] workingset: timestamp_bits=30 max_order=16 bucket_order=0
[    1.186672] io scheduler mq-deadline registered
[    1.190309] io scheduler kyber registered
[    1.570624] No litex,nclkout entry in the dts file
[    1.607895] LiteX SoC Controller driver initialized
[    2.358518] Initramfs unpacking failed: invalid magic at start of compressed archive
[    2.448554] Freeing initrd memory: 8192K
[    3.423827] f0001000.serial: ttyLXU0 at MMIO 0x0 (irq = 0, base_baud = 0) is a liteuart
[    3.431446] printk: console [liteuart0] enabled
[    3.431446] printk: console [liteuart0] enabled
[    3.440068] printk: bootconsole [liteuart0] disabled
[    3.440068] printk: bootconsole [liteuart0] disabled
[    3.499884] liteeth f0002000.mac eth0: irq 2 slots: tx 2 rx 2 size 2048
[    3.510055] i2c_dev: i2c /dev entries driver
[    3.520573] i2c i2c-0: Not I2C compliant: can&amp;#39;t read SCL
[    3.525314] i2c i2c-0: Bus may be unreliable
[    3.577560] litex-mmc f0009000.mmc: LiteX MMC controller initialized.
[    3.623272] NET: Registered PF_INET6 protocol family
[    3.653652] Segment Routing with IPv6
[    3.657870] In-situ OAM (IOAM) with IPv6
[    3.662630] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver
[    3.683817] NET: Registered PF_PACKET protocol family
[    3.699016] Freeing unused kernel image (initmem) memory: 208K
[    3.704055] Kernel memory protection not selected by kernel config.
[    3.710506] Run /init as init process
Starting syslogd: OK
Starting klogd: OK
Running sysctl: OK
Saving 256 bits of non-creditable seed for next boot
Starting network: OK

Welcome to Buildroot
buildroot login: root
                   __   _
                  / /  (_)__  __ ____ __
                 / /__/ / _ \/ // /\ \ /
                /____/_/_//_/\_,_//_\_\
                      / _ \/ _ \
   __   _ __      _  _\___/_//_/         ___  _
  / /  (_) /____ | |/_/__| | / /____ __ / _ \(_)__ _____  __
 / /__/ / __/ -_)&amp;gt;  &amp;lt;/___/ |/ / -_) \ // , _/ (_-&amp;lt;/ __/ |/ /
/____/_/\__/\__/_/|_|____|___/\__/_\_\/_/|_/_/___/\__/|___/
                  / __/  |/  / _ \
                 _\ \/ /|_/ / ___/
                /___/_/  /_/_/
  32-bit RISC-V Linux running on LiteX / VexRiscv-SMP.

login[70]: root login on &amp;#39;console&amp;#39;
root@buildroot:~# 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Linux 中也可以访问网络（通过主线内的 liteeth 驱动）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dmesg | grep liteeth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    3.499861&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; liteeth f0002000.mac eth0: irq &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; slots: tx &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; rx &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; size &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ip link set eth0 up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ip a add 192.168.1.50/24 dev eth0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ping 192.168.1.100
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;其他开发板&#34;&gt;其他开发板&lt;/h2&gt;
&lt;p&gt;除了 Digilent Arty A7，我还做了以下开发板的 LiteX 支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/litex-boards/tree/vcu128&#34;&gt;VCU128&lt;/a&gt;，支持 UART，SDRAM 和 HBM；以太网因为是 SGMII 暂时无法解决&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/litex-boards/tree/ma703fa-35t&#34;&gt;MA703FA-35T&lt;/a&gt;，支持 UART，SDRAM，ETH、SD 卡和 HDMI；MA703FA-35T 的文档中 TF_DAT3 引脚绑定有误，AB12 应该改为 AB20&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/litex-boards/tree/alinx_ax7021&#34;&gt;Alinx AX7021&lt;/a&gt;，支持 UART over JTAG 和 HDMI&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lab.cs.tsinghua.edu.cn/digital-design/doc/hardware/board/&#34;&gt;THU Digital Design&lt;/a&gt;，基于 @gaoyichuan 的实现，支持 UART，SDRAM，ETH，SD 卡和 VGA&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; 数参数个数的特别方法</title>
      <link>https://jia.je/programming/2023/04/14/counting-arguments/</link>
      <pubDate>Fri, 14 Apr 2023 09:24:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2023/04/14/counting-arguments/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;群友上个月提了一个未知来源问题：&lt;/p&gt;
&lt;p&gt;实现一个你自己的 &lt;code&gt;printf(int, ...)&lt;/code&gt; 函数，该函数包含可变参数。为简便期间，假设所有参数均为 int 类型。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一个参数是一个普通参数，不表示后续可变参数的数目&lt;/li&gt;
&lt;li&gt;在 printf 中逐个输出所有传入的整数值（可使用系统自带的 kprintf 实现输出）&lt;/li&gt;
&lt;li&gt;思考如何判定参数结束，是否有副作用&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;va_args&#34;&gt;va_args&lt;/h2&gt;
&lt;p&gt;我们知道，传统的处理可变参数的方法是 va_args，但是它无法知道传入了多少参数，而要像 POSIX printf 那样，解析 format 参数，然后一个一个去取。&lt;/p&gt;
&lt;p&gt;所以问题的关键是，如何获取参数的个数？一个思路是宏，尝试用宏的魔法来计算出参数个数，这个方法可能是可以的，但是没有深究。另一个思路是利用 ABI 的特点，例如 i386 上参数是通过栈传递的，那或许可以在栈上找到所有的 int，但是问题是无法确认参数在哪里结束。&lt;/p&gt;
&lt;h2 id=&#34;__builtin_va_arg_pack_len&#34;&gt;__builtin_va_arg_pack_len&lt;/h2&gt;
&lt;p&gt;今天，另一位群友发了一个链接：&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Constructing-Calls.html#Constructing-Calls&#34;&gt;https://gcc.gnu.org/onlinedocs/gcc/Constructing-Calls.html#Constructing-Calls&lt;/a&gt;，讲述了 GCC 中一些特别的 builtin 函数，用于函数调用相关的魔法，其中一段描述吸引了我的眼球：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Built-in Function: int __builtin_va_arg_pack_len ()

This built-in function returns the number of anonymous arguments of an
inline function. It can be used only in inline functions that are always
inlined, never compiled as a separate function, such as those using
__attribute__ ((__always_inline__)) or __attribute__ ((__gnu_inline__))
extern inline functions. For example following does link- or run-time
checking of open arguments for optimized code:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这正好实现了前面提到的获取参数个数，实现思路也可以想到，就是编译器在 inline 的时候，顺便做了一次替换。也因此，这个函数必须被 inline，不能正常调用。有了这个思路以后，经过一番尝试，写入了下面的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdarg.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;my_printf_inner&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count, ...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    va_list args;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;va_start&lt;/span&gt;(args, count);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; count;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;va_arg&lt;/span&gt;(args, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;va_end&lt;/span&gt;(args);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;__attribute__&lt;/span&gt; ((__always_inline__)) &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;my_printf&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, ...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__builtin_va_arg_pack_len&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, a);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;my_printf_inner&lt;/span&gt;(count, &lt;span style=&#34;color:#a6e22e&#34;&gt;__builtin_va_arg_pack&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;my_printf&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个代码在 GCC 中可以正确地输出 1-10 的十个数字。我一开始尝试的时候，把循环也写到 &lt;code&gt;my_printf&lt;/code&gt; 函数中，但是 GCC 的 inline 就罢工了，最后只好拆成两个函数，把不知道参数个数的问题，转化成知道参数的问题，剩下就好解决了。&lt;/p&gt;
&lt;p&gt;最后生成的汇编如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;rbp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;rbp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;rsp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;rsp&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PTR&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-4&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PTR&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-8&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PTR&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-4&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;esi&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;edi&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;OFFSET&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FLAT&lt;/span&gt;:.&lt;span style=&#34;color:#66d9ef&#34;&gt;LC0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;printf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PTR&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-8&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;r9d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;r8d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;edx&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;esi&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;edi&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my_printf_inner&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;rsp&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;nop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它 inline 了 &lt;code&gt;my_printf&lt;/code&gt; 的实现，先调用了第一个 &lt;code&gt;printf&lt;/code&gt;，然后把剩下的参数个数 &lt;code&gt;9&lt;/code&gt; 赋值给了 &lt;code&gt;edi&lt;/code&gt;，剩下就是正常的传参了。&lt;/p&gt;
&lt;p&gt;以上实验都在 Godbolt Compiler Explorer 中进行：&lt;a href=&#34;https://godbolt.org/z/KjYzETn5Y&#34;&gt;https://godbolt.org/z/KjYzETn5Y&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;继续挖掘，会发现在 libc 中出现了 __builtin_va_arg_pack_len 的身影，在 fcntl2.h 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;__errordecl&lt;/span&gt; (__open_too_many_args,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;open can be called either with 2 or 3 arguments, not more&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;__errordecl&lt;/span&gt; (__open_missing_mode,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;open with O_CREAT or O_TMPFILE in second argument needs 3 arguments&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;__fortify_function &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;__path, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; __oflag, ...)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;__va_arg_pack_len&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;__open_too_many_args&lt;/span&gt; ();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;__builtin_constant_p&lt;/span&gt; (__oflag))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;__OPEN_NEEDS_MODE&lt;/span&gt; (__oflag) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__va_arg_pack_len&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;__open_missing_mode&lt;/span&gt; ();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__open_2&lt;/span&gt; (__path, __oflag);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__open_alias&lt;/span&gt; (__path, __oflag, &lt;span style=&#34;color:#a6e22e&#34;&gt;__va_arg_pack&lt;/span&gt; ());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;__va_arg_pack_len&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__open_2&lt;/span&gt; (__path, __oflag);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__open_alias&lt;/span&gt; (__path, __oflag, &lt;span style=&#34;color:#a6e22e&#34;&gt;__va_arg_pack&lt;/span&gt; ());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它核心的思想就是根据 open 第三个参数的有无，调用相应的 &lt;code&gt;__open_2&lt;/code&gt; 或者 &lt;code&gt;__open_alias&lt;/code&gt; 函数，这样就不用再用 &lt;code&gt;va_args&lt;/code&gt; 方法了，并且如果传入了过多的参数，可以直接在编译期指出错误。例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;报错：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In file included from &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;usr&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;include&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;fcntl.h:&lt;span style=&#34;color:#ae81ff&#34;&gt;301&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 from &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;source&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In function &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;open&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inlined from &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;main&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; at &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;source&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;usr&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;include&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;x86_64&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gnu&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;fcntl2.h:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; error: call to &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;__open_too_many_args&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; declared with attribute error: open can be called either with &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; or &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; arguments, not more
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;__open_too_many_args&lt;/span&gt; ();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;^~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ASM generation compiler returned: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In file included from &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;usr&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;include&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;fcntl.h:&lt;span style=&#34;color:#ae81ff&#34;&gt;301&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 from &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;source&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In function &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;open&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inlined from &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;main&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; at &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;source&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;usr&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;include&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;x86_64&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gnu&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;fcntl2.h:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; error: call to &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;__open_too_many_args&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; declared with attribute error: open can be called either with &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; or &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; arguments, not more
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;__open_too_many_args&lt;/span&gt; ();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;^~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Execution build compiler returned: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compiler Explorer:&lt;a href=&#34;https://godbolt.org/z/hebshz3P5&#34;&gt;https://godbolt.org/z/hebshz3P5&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;使用-c-宏&#34;&gt;使用 C 宏&lt;/h2&gt;
&lt;p&gt;和 Claude 聊了一下，是否能够用 C 宏来实现，它的回答是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PRINTF(...) printf(__VA_ARGS__)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define NARG(...)  (sizeof((int[]){__VA_ARGS__})/sizeof(int))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;format, ...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    va_list args;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;va_start&lt;/span&gt;(args, format);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Access the variable arguments using va_arg based on 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// the number of arguments passed, obtained using NARG
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;va_end&lt;/span&gt;(args);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Usage:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PRINTF&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);     &lt;span style=&#34;color:#75715e&#34;&gt;// Prints 1 2 3 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PRINTF&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Prints 1 2 3 4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;核心思路就是把参数列表放到数组里，然后让编译器去推断数组大小。沿着这个思路，实现出代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdarg.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;my_printf_inner&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count, ...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    va_list args;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;va_start&lt;/span&gt;(args, count);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; count;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;va_arg&lt;/span&gt;(args, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;va_end&lt;/span&gt;(args);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MY_PRINTF(...) do {int len=(sizeof((int[]){__VA_ARGS__})/sizeof(int)); my_printf_inner(len, __VA_ARGS__); } while(0);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;MY_PRINTF&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也是可以工作的。Compiler Explorer 链接：&lt;a href=&#34;https://godbolt.org/z/TxKb3YEcf&#34;&gt;https://godbolt.org/z/TxKb3YEcf&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT&lt;/h2&gt;
&lt;p&gt;尝试询问了一下 ChatGPT：&lt;a href=&#34;https://shareg.pt/IXUKjYK&#34;&gt;https://shareg.pt/IXUKjYK&lt;/a&gt;，它可以写出额外传入 int 个数的版本，可以写出哨兵（传入 &lt;code&gt;-1&lt;/code&gt; 表示结束）的版本，提示了 builtin 以后，再提示 inline 和 always_inline，最后让它拆分成两个函数，得到的代码距离正确结果已经比较接近，但还是有一些问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SCO OpenServer 6.0.0 虚拟机安装</title>
      <link>https://jia.je/system/2023/04/10/sco6/</link>
      <pubDate>Mon, 10 Apr 2023 20:21:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2023/04/10/sco6/</guid>
      <description>&lt;h2 id=&#34;安装过程&#34;&gt;安装过程&lt;/h2&gt;
&lt;p&gt;首先从 &lt;a href=&#34;https://www.sco.com/support/update/download/product.php?pfid=12&amp;amp;prid=20&#34;&gt;https://www.sco.com/support/update/download/product.php?pfid=12&amp;amp;prid=20&lt;/a&gt; 下载 SCO OpenServer 的安装 ISO。尝试过用 QEMU 启动，但是会卡在无法读取硬盘的错误上。&lt;/p&gt;
&lt;p&gt;最后使用 VirtualBox 7.0.6 成功启动，注意创建虚拟机的时候不要给太多内存，例如 4GB 就起不来，2GB 可以。硬盘我也只给了 4GB 的空间。&lt;/p&gt;
&lt;p&gt;安装过程中会询问 License number 和 License code，可以选择使用 Evaluation License，或者使用下面参考文档中提供的 License。按照流程一直走就可以了。如果重启出现无法 mount root 的问题，就 poweroff 再开机。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;p&gt;本博客参考了以下文档中的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://virtuallyfun.com/2020/11/21/fun-with-openserver-6-and-mergepro/&#34;&gt;https://virtuallyfun.com/2020/11/21/fun-with-openserver-6-and-mergepro/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>UnixWare 7.1.4 虚拟机安装</title>
      <link>https://jia.je/system/2023/04/10/unixware7/</link>
      <pubDate>Mon, 10 Apr 2023 19:11:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2023/04/10/unixware7/</guid>
      <description>&lt;h2 id=&#34;安装过程&#34;&gt;安装过程&lt;/h2&gt;
&lt;p&gt;在 &lt;a href=&#34;https://www.sco.com/support/update/download/product.php?pfid=1&amp;amp;prid=6&#34;&gt;https://www.sco.com/support/update/download/product.php?pfid=1&amp;amp;prid=6&lt;/a&gt; 可以看到 UnixWare 7.1.4 的相关下载，其中首先要下载 UnixWare 的安装 ISO：&lt;a href=&#34;https://www.sco.com/support/update/download/release.php?rid=346&#34;&gt;https://www.sco.com/support/update/download/release.php?rid=346&lt;/a&gt;，尝试过用 QEMU 启动，会遇到找不到 CD-ROM 的问题，虽然通过设置 &lt;code&gt;ATAPI_DMA_DISABLE=YES&lt;/code&gt; 解决了，但是又遇到了找不到硬盘的问题。&lt;/p&gt;
&lt;p&gt;最后换成了 VirtualBox 7.0.6。用 VirtualBox 创建虚拟机的时候，不要给太多内存，4GB 就会无法启动，2GB 可以，硬盘也不要给太多，4GB 就足够。&lt;/p&gt;
&lt;p&gt;剩下就是按照安装界面一路默认即可，License 可以选择 Defer，使用 Evaluation License。&lt;/p&gt;
&lt;p&gt;关机以后，修改启动顺序，把硬盘放到 CD 前，然后启动，就可以进入系统了。如果重启出现无法 mount root 的问题，就 poweroff 再开机。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;p&gt;本博客参考了以下文档中的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://virtuallyfun.com/2018/01/31/revisiting-a-unixware-7-1-1-install-on-qemu-kvm/&#34;&gt;https://virtuallyfun.com/2018/01/31/revisiting-a-unixware-7-1-1-install-on-qemu-kvm/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SCO OpenServer 5.0.7 虚拟机安装</title>
      <link>https://jia.je/system/2023/04/09/sco5/</link>
      <pubDate>Sun, 09 Apr 2023 23:03:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2023/04/09/sco5/</guid>
      <description>&lt;h2 id=&#34;安装过程&#34;&gt;安装过程&lt;/h2&gt;
&lt;p&gt;首先从 &lt;a href=&#34;https://www.sco.com/support/update/download/release.php?rid=218&#34;&gt;https://www.sco.com/support/update/download/release.php?rid=218&lt;/a&gt; 下载 SCO OpenServer 的安装 ISO 和从 &lt;a href=&#34;https://www.sco.com/support/update/download/release.php?rid=187&#34;&gt;https://www.sco.com/support/update/download/release.php?rid=187&lt;/a&gt; 下载 Supplement CD 5 ISO，然后用 QEMU 启动，这次需要用图形界面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-system-i386 -accel kvm -m &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; -serial mon:stdio -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sco-hdd.qcow2,if&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ide -cdrom ../../ISOs/OpenServer-5.0.7Hw-10Jun05_1800.iso
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装过程中会询问 License number 和 License code，按照 &lt;a href=&#34;https://virtuallyfun.com/2020/11/03/fun-with-openserver-and-merge/&#34;&gt;https://virtuallyfun.com/2020/11/03/fun-with-openserver-and-merge/&lt;/a&gt; 进行输入。&lt;/p&gt;
&lt;p&gt;安装的时候，在 hard disk setup 那一步，记得关掉 bad tracking，否则会把整个盘扫一遍，我一开始建了 20GB 的 qcow2，结果这一步跑了一晚上，而且把 qcow2 撑满了。&lt;/p&gt;
&lt;p&gt;安装后，重新启动，这次打开网络，同时挂载 Supplement CD 5 ISO：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-system-i386 -accel kvm -m &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; -serial chardev:mouse -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sco-hdd.qcow2,if&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ide -cdrom osr507suppcd5.iso -net nic -net tap,script&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;no,ifname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tap0 -chardev msmouse,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mouse
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动以后，运行 custom 命令，然后从 CD-ROM 安装 Graphics and NIC Drivers。我尝试了安装 Maintenance Pack 5，但是启动以后会找不到硬盘，只好恢复之前的 qcow2 备份。可能是缺少了运行 &lt;code&gt;/etc/conf/cf.d/link_unix&lt;/code&gt; 命令。&lt;/p&gt;
&lt;p&gt;为了让图形界面的鼠标工作，在命令行里运行 &lt;code&gt;mkdev mouse&lt;/code&gt;，然后创建一个 Serial mouse -&amp;gt; Microsoft Serial Mouse，Relink kernel 再重启。注意要和 QEMU 的 &lt;code&gt;-serial chardev:mouse -chardev msmouse,id=mouse&lt;/code&gt; 配合。但是外面鼠标和里面鼠标移动的距离不一样。&lt;/p&gt;
&lt;p&gt;然后运行 &lt;code&gt;netconfig&lt;/code&gt; 命令，添加 LAN adapter，选择 Intel 网卡，然后退出，Relink kernel 然后重启，就可以访问网络了。可以用 &lt;code&gt;ifconfig net0 10.0.2.16&lt;/code&gt; 设置 IP 地址， &lt;code&gt;route add default 10.0.2.15&lt;/code&gt; 来设置默认路由。可以通过降低安全性，兼容老系统来 SSH：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh -oCiphers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aes128-cbc -oHostKeyAlgorithms&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ssh-rsa -oKexAlgorithms&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;+diffie-hellman-group1-sha1 root@10.0.2.16
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类似地，scp 也要带上上面的参数，再打开 &lt;code&gt;-O&lt;/code&gt; 模式。&lt;/p&gt;
&lt;h2 id=&#34;安装软件&#34;&gt;安装软件&lt;/h2&gt;
&lt;p&gt;OpenServer 有自带的工具链：挂载安装 ISO，使用 custom 命令安装 OpenServer Development System 和 SCO OpenServer Linker and Application Development Libraries。但是需要 License 才能使用。&lt;/p&gt;
&lt;p&gt;另一个方法是通过 FTP 访问 &lt;a href=&#34;ftp://ftp2.sco.com/pub/skunkware/osr5/vols/&#34;&gt;ftp://ftp2.sco.com/pub/skunkware/osr5/vols/&lt;/a&gt;，可以看到一些软件的安装包，在里面下载软件并安装。例如，要安装 gcc：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget ftp://ftp2.sco.com/pub/skunkware/osr5/vols/gcc-2.95.2-VOLS.tar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp -r -O -oCiphers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aes128-cbc -oHostKeyAlgorithms&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ssh-rsa -oKexAlgorithms&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;+diffie-hellman-group1-sha1 gcc-2.95.2-VOLS.tar root@10.0.2.16:/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in sco5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar xf gcc-2.95.2-VOLS.tar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install from Media Images&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;custom
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/local/bin/gcc --version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;依法炮制，可以安装 gcc、bash、make、git 等常用软件，只不过版本都很老。&lt;/p&gt;
&lt;h2 id=&#34;virtualbox&#34;&gt;VirtualBox&lt;/h2&gt;
&lt;p&gt;测试了一下，在 VirtualBox 7.0.6 中，可以正常安装 SCO OpenServer 5，不需要额外的设置，按照上面一样的方法进行安装即可，鼠标选择 PS/2 Microsoft Mouse，和 QEMU 一样有移动距离不对的情况。安装完，把硬盘启动顺序调到前面，重启即可。&lt;/p&gt;
&lt;p&gt;网卡的话，照常 &lt;code&gt;netconfig&lt;/code&gt;，然后添加 AMD PCNet 网卡即可。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;p&gt;本博客参考了以下文档中的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://virtuallyfun.com/2020/11/03/fun-with-openserver-and-merge/&#34;&gt;https://virtuallyfun.com/2020/11/03/fun-with-openserver-and-merge/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AIX 7.2 虚拟机安装</title>
      <link>https://jia.je/system/2023/04/09/aix/</link>
      <pubDate>Sun, 09 Apr 2023 12:47:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2023/04/09/aix/</guid>
      <description>&lt;h2 id=&#34;安装过程&#34;&gt;安装过程&lt;/h2&gt;
&lt;p&gt;宿主机环境是 Debian bookworm，不需要像其他教程那样自己编译 qemu，直接 apt install 即可。&lt;/p&gt;
&lt;p&gt;通过 google 可以搜索到 AIX 7.2 的 ISO，下载第一个 ISO 到本地，然后在 QEMU 中启动安装镜像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-img create -f qcow2 aix-hdd.qcow2 20G
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-system-ppc64 -cpu POWER8 -machine pseries -m &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; -serial mon:stdio -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aix-hdd.qcow2,if&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;none,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;drive-virtio-disk0 -device virtio-scsi-pci,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;scsi -device scsi-hd,drive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;drive-virtio-disk0 -cdrom aix_7200-04-02-2027_1of2_072020.iso -prom-env boot-command&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;boot cdrom:\ppc\chrp\bootfile.exe&amp;#39;&lt;/span&gt; -display none
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进去以后，耐心等待，直到进入安装界面，按照提示进行安装，建议安装上 SSH Server，关掉图形界面，这样安装会比较快。安装需要几十分钟，安装完成后会进入 bootloop，关掉 QEMU。接着，准备好网络：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ip tuntap add tap0 mode tap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ip link set tap0 up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ip a add 10.0.2.15/24 dev tap0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再启动虚拟机，注意启动选项修改了，并且多了网络的配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-system-ppc64 -cpu POWER8 -machine pseries -m &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; -serial mon:stdio -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aix-hdd.qcow2,if&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;none,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;drive-virtio-disk0 -device virtio-scsi-pci,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;scsi -device scsi-hd,drive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;drive-virtio-disk0 -cdrom aix_7200-04-02-2027_1of2_072020.iso -prom-env boot-command&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;boot disk:&amp;#39;&lt;/span&gt; -display none -net nic -net tap,script&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;no,ifname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tap0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一次启动系统时，会进入配置界面，修改好 root 密码，然后配置网络：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chdev -l en0 -a netaddr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10.0.2.16 -a netmask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;255.255.255.0 -a state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到这里了以后，就可以通过 ssh 访问虚拟机：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh root@10.0.2.16
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;kvm&#34;&gt;KVM&lt;/h2&gt;
&lt;p&gt;另外测试了一下，在 powerpc64 机器上，可以开启 KVM 来加速 QEMU，但是需要首先关掉 SMT。另外在使用过程中出现了玄学问题，最后还是在 x86 上跑了虚拟机。&lt;/p&gt;
&lt;h2 id=&#34;安装软件&#34;&gt;安装软件&lt;/h2&gt;
&lt;p&gt;接下来，可以从 &lt;a href=&#34;https://www.ibm.com/support/pages/node/882892&#34;&gt;AIX Toolbox for Open Source Software&lt;/a&gt; 安装软件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in aix&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chfs -a size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;+200M /home
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chfs -a size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;+400M /opt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chfs -a size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;+400M /tmp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# setup default gateway&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;route add &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 10.0.2.15 -if en0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# edit /etc/resolv.conf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nameserver 1.1.1.1&amp;#34;&lt;/span&gt; &amp;gt; /etc/resolv.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in host&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://public.dhe.ibm.com/aix/freeSoftware/aixtoolbox/ezinstall/ppc/dnf_aixtoolbox.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp dnf_aixtoolbox.sh root@10.0.2.16:/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in aix&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rpm --rebuilddb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ksh /dnf_aixtoolbox.sh -y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/freeware/bin/dnf update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/freeware/bin/dnf install gcc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装好的包会放到 /opt/freeware 路径下。&lt;/p&gt;
&lt;p&gt;安装过程中可能需要继续扩大各个 fs 的大小。&lt;/p&gt;
&lt;p&gt;dnf 如果提示缺少 &lt;code&gt;libssl.a&lt;/code&gt;，参考 &lt;a href=&#34;https://www.ibm.com/support/pages/resolving-rpm-libssla-and-libcryptoa-errors&#34;&gt;https://www.ibm.com/support/pages/resolving-rpm-libssla-and-libcryptoa-errors&lt;/a&gt; 进行解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;访问 &lt;a href=&#34;https://www.ibm.com/resources/mrs/assets?source=aixbp&amp;amp;S_PKG=openssl&#34;&gt;https://www.ibm.com/resources/mrs/assets?source=aixbp&amp;amp;S_PKG=openssl&lt;/a&gt; 下载安装包，例如 &lt;code&gt;openssl-1.1.2.2000.tar.Z&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;scp 到 AXI 上安装：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uncompress openssl-1.1.2.2000.tar.Z
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -xvf openssl-1.1.2.2000.tar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# install openssl.base using smitty&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了方便，可以修改 &lt;code&gt;/etc/environment&lt;/code&gt; 文件，把 &lt;code&gt;/opt/freeware/bin&lt;/code&gt; 目录加到 PATH 目录中。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;p&gt;本博客参考了以下文档中的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aix4admins.blogspot.com/2020/04/qemu-aix-on-x86-qemu-quick-emulator-is.html&#34;&gt;https://aix4admins.blogspot.com/2020/04/qemu-aix-on-x86-qemu-quick-emulator-is.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://virtuallyfun.com/2019/04/22/installing-aix-on-qemu/&#34;&gt;https://virtuallyfun.com/2019/04/22/installing-aix-on-qemu/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/support/pages/resolving-rpm-libssla-and-libcryptoa-errors&#34;&gt;https://www.ibm.com/support/pages/resolving-rpm-libssla-and-libcryptoa-errors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RAM 读写冲突</title>
      <link>https://jia.je/hardware/2023/04/07/ram-read-write-collision/</link>
      <pubDate>Fri, 07 Apr 2023 00:48:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/04/07/ram-read-write-collision/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;在 FPGA 或者 ASIC 中，通常都需要使用 RAM，通过读口、写口或者读写口来进行访问。常见的配置有单读写口（1RW），一读一写（1R1W）等等，读口通常有 1 个周期的延时。那么，如果在同一个周期内，读口和写口访问了同一个地址，会发生什么呢？可能会想到几种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读和写都失败，读出的数据未定义，数据没写进去&lt;/li&gt;
&lt;li&gt;数据写进去了，读出的数据未定义&lt;/li&gt;
&lt;li&gt;数据写进去了，读出了写之前的旧数据&lt;/li&gt;
&lt;li&gt;数据写进去了，读出了同一个周期写入的新数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面以具体的例子来看看，实际情况是什么样子。&lt;/p&gt;
&lt;h2 id=&#34;xilinx-fpga&#34;&gt;Xilinx FPGA&lt;/h2&gt;
&lt;p&gt;首先测试的是 Xilinx FPGA 上的 RAM，测试的对象是 XPM，统一设置读延迟为一个周期，使用 Vivado 仿真。&lt;/p&gt;
&lt;h3 id=&#34;一读一写&#34;&gt;一读一写&lt;/h3&gt;
&lt;p&gt;首先测试一读一写，也就是 xpm_memory_sdpram 模块。模块支持三种模式：NO_CHANGE（默认值）、READ_FIRST 和 WRITE_FIRST，因此我例化了三份，输入一样的信号，设置为三种不同的模式，然后比较输出结果。为了简化，读写使用一个时钟。下面是测试的波形：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;{
  signal:
    [
      { name: &#34;clk&#34;, wave: &#34;p....&#34;},
      { name: &#34;w_addr&#34;, wave: &#34;2....&#34;, data: [&#34;0000&#34;]},
      { name: &#34;w_data&#34;, wave: &#34;2x2xx&#34;, data: [&#34;1111&#34;, &#34;2222&#34;]},
      { name: &#34;w_en&#34;, wave: &#34;1010.&#34;},
      { name: &#34;r_addr&#34;, wave: &#34;2....&#34;, data: [&#34;0000&#34;]},
      { name: &#34;r_en&#34;, wave: &#34;0.1.0&#34;},
      { name: &#34;r_data_no_change&#34;, wave: &#34;xxx22&#34;, data: [&#34;xxxx&#34;, &#34;2222&#34;]},
      { name: &#34;r_data_read_first&#34;, wave: &#34;xxx22&#34;, data: [&#34;1111&#34;, &#34;2222&#34;]},
      { name: &#34;r_data_write_first&#34;, wave: &#34;xxx22&#34;, data: [&#34;xxxx&#34;, &#34;2222&#34;]},
    ]
}
&lt;/script&gt;&lt;p&gt;图中第一个周期向地址 0 写入了 1111，然后第三个周期同时读写地址 0 的数据，此时 NO_CHANGE 和 WRITE_FIRST 两种模式中，写入成功，读取失败；READ_FIRST 模式读取成功，并且读取的是写入之前的数据。第四个周期时，读写没有出现冲突，三种模式都可以读出写入的新数据。&lt;/p&gt;
&lt;p&gt;这有些出乎我的意料：之前在很多地方用过 XPM，但是都没考虑过读写地址相同的情况，而且默认设置（NO_CHANGE）下，输出结果是不确定的。实际上这个行为在 PG058 Block Memory Generator 里面提到了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synchronous Write-Read Collisions: A synchronous Write-Read collision might occur if a port attempts to Write a memory location and the other port reads the same location. While memory contents are not corrupted in Write-Read collisions, the validity of the output data depends on the Write port operating mode.
&lt;ul&gt;
&lt;li&gt;If the Write port is in READ_FIRST mode, the other port can reliably read the old memory contents.&lt;/li&gt;
&lt;li&gt;If the Write port is in WRITE_FIRST or NO_CHANGE mode, data on the output of the Read port is invalid.&lt;/li&gt;
&lt;li&gt;In the case of byte-writes, only updated bytes are invalid on the Read port output.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与上面观察到的结果基本吻合，另外这里提到了带 Mask 的情况：即使是 WRITE_FIRST 或者 NO_CHANGE，也可以读出没写入的那部分（即 WEA[i] = 0）旧的数据。&lt;/p&gt;
&lt;p&gt;对此，Xilinx 的建议是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;For Synchronous Clocking and during a collision, the Write mode of port A
can be configured so that a Read operation on port B either produces data
(acting like READ_FIRST), or produces undefined data (Xs). For this reason,
it is always advised to use READ_FIRST when configured as a Simple Dual-port
RAM. For asynchronous clocking, Xilinx recommends setting the Write mode of
Port A to WRITE_FIRST for collision safety.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也就是说同步时钟用 READ_FIRST，异步时钟用 WRITE_FIRST。甚至 Vivado 还可以贴心地帮你设置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;For 7 series devices, the selected operating mode is passed to the block RAM
when the RAM_MODE is set to TDP. For the primitives with RAM_MODE set to
SDP, the write mode is READ_FIRST for synchronous clocking and WRITE_FIRST
for asynchronous clocking.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是 XPM 似乎就没有这个设定了，而是由用户来传入。&lt;/p&gt;
&lt;p&gt;而对于异步时钟，文档直接说不要让冲突发生：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Using asynchronous clocks, when one port writes data to a memory location,
the other port must not Read or Write that location for a specified amount
of time.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这点似乎经常被我们忽略。&lt;/p&gt;
&lt;p&gt;那么，如果在 Verilog 中实现一个语义上 WRITE_FIRST 的 RAM，会发生什么呢：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;`timescale&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;ns&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;ps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; mem_1r1w (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; clk,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] R0_addr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; R0_en,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] R0_data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] W0_addr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; W0_en,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] W0_data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] reg_R0_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] mem [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; clk) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (W0_en) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      mem[W0_addr] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; W0_data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; clk) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (R0_en) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      reg_R0_addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; R0_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;assign&lt;/span&gt; R0_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mem[reg_R0_addr];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;奇怪的是，综合出来会使用 BRAM 实现，并且采用 READ_FIRST 作为 RAMB36E1 的 WRITE_MODE_A 和 WRITE_MODE_B。如果写成语义 READ_FIRST：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;`timescale&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;ns&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;ps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; mem_1r1w (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; clk,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] R0_addr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; R0_en,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] R0_data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] W0_addr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; W0_en,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] W0_data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] reg_R0_data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] mem [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; clk) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (W0_en) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      mem[W0_addr] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; W0_data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; clk) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (R0_en) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      reg_R0_data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; mem[R0_addr];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;assign&lt;/span&gt; R0_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reg_R0_data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会发现生成的 RAMB36E1 原语的 WRITE_MODE 依然是 READ_FIRST。经过测试发现，如果综合的时候用两个时钟信号，就会用 WRITE_FIRST；如果用了一个，就会用 READ_FIRST，与语义无关。所以如果依赖 Vivado 的 infer RAM，得到的结果和预期可能不一致，和前面的文档一致：&lt;code&gt;For the primitives with RAM_MODE set to SDP, the write mode is READ_FIRST for synchronous clocking and WRITE_FIRST for asynchronous clocking.&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;又额外测试了一下 yosys：&lt;code&gt;yosys mem_1r1w.v -p &amp;quot;synth_xilinx&amp;quot;&lt;/code&gt;，结果发现 yosys 会忠实地按照语义为 WRITE_FIRST 生成 bypass 逻辑。虽然 yosys 可以做的更好：把识别出来的 READ_FIRST 或 WRITE_FIRST 传给 RAMB36E1，但 yosys 至少尊重了代码。&lt;/p&gt;
&lt;h3 id=&#34;一读写&#34;&gt;一读写&lt;/h3&gt;
&lt;p&gt;接下来测试单读写口的场景。单读写口和上面不同，它的冲突点在于，写入的时候，读取的数据如何变化。下面用同样的方法，测试三种模式下 xpm_memory_spram 的行为，得到如下波形：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;{
  signal:
    [
      { name: &#34;clk&#34;, wave: &#34;p......&#34;},
      { name: &#34;rw_addr&#34;, wave: &#34;2...2..&#34;, data: [&#34;0000&#34;, &#34;0001&#34;]},
      { name: &#34;rw_wdata&#34;, wave: &#34;2..22..&#34;, data: [&#34;1111&#34;, &#34;2222&#34;, &#34;3333&#34;]},
      { name: &#34;rw_en&#34;, wave: &#34;101....&#34;},
      { name: &#34;rw_we&#34;, wave: &#34;10.1...&#34;},
      { name: &#34;ram[0]&#34;, wave: &#34;x2..2..&#34;, data: [&#34;1111&#34;, &#34;2222&#34;]},
      { name: &#34;ram[1]&#34;, wave: &#34;2....2.&#34;, data: [&#34;0000&#34;, &#34;3333&#34;]},
      { name: &#34;rw_rdata_no_change&#34;, wave: &#34;xxx2...&#34;, data: [&#34;1111&#34;]},
      { name: &#34;rw_rdata_read_first&#34;, wave: &#34;xxx2.22&#34;, data: [&#34;1111&#34;, &#34;0000&#34;, &#34;3333&#34;]},
      { name: &#34;rw_rdata_write_first&#34;, wave: &#34;x2..22.&#34;, data: [&#34;1111&#34;, &#34;2222&#34;, &#34;3333&#34;]},
    ]
}
&lt;/script&gt;&lt;p&gt;这个结果就比较有意思了，三种模式得到了三种不同的结果。第一个周期依然是写入 1111 到地址 0，然后 WRITE_FIRST 模式的输出结果第二个周期跟着变，就好像在写的时候同时也在读，只不过读取的结果就是最后一次写入的结果。第三个周期读取地址 0 的数据，然后第四个周期写入 2222 到地址 0，此时三种情况的读取都得到了写入前的值（也就是 1111）。第五个周期 WRITE_FIRST 模式的输出跟着变成了 2222，和预期一致。同时第五个周期写入 3333 到地址 1，接着第六个周期的时候，READ_FIRST 出现了 0000，实际上是读取了地址 1 的旧数据，也就是写入前的数据，而 WRITE_FIRST 更新为了 3333，也就是新写入的数据；NO_CHANGE 则是保持了最后一次读取的结果。&lt;/p&gt;
&lt;p&gt;简单总结一下上面的现象，就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NO_CHANGE：顾名思义，写的时候 rdata 不变，只有在读的下一个周期才会变&lt;/li&gt;
&lt;li&gt;WRITE_FIRST：写的同时也在读，只不过读取的是写入的新数据&lt;/li&gt;
&lt;li&gt;READ_FIRST：写的同时也在读，只不过读取的是写入前的旧数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于这个行为，在 &lt;a href=&#34;https://xilinx.eetrend.com/blog/2020/100055273.html&#34;&gt;RAM IP Core 中 Write First Read First 和 No Change 的区别&lt;/a&gt; 处可以看到比较清晰的解释。&lt;/p&gt;
&lt;h2 id=&#34;sram-ip&#34;&gt;SRAM IP&lt;/h2&gt;
&lt;p&gt;接下来在仿真中看看 SRAM IP 的行为是什么样子。SRAM IP 有一个引脚 COLLDISN，其语义为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 COLLDISN 为 1，那么如果出现读写冲突，那么写入是被保证的，但是读取会失败&lt;/li&gt;
&lt;li&gt;如果 COLLDISN 为 0，那么如果出现读写冲突，读写都会失败&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仿真得到如下波形：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;{
  signal:
    [
      { name: &#34;clk&#34;, wave: &#34;p.......&#34;},
      { name: &#34;w_addr&#34;, wave: &#34;2.......&#34;, data: [&#34;0000&#34;]},
      { name: &#34;w_data&#34;, wave: &#34;2x...2x.&#34;, data: [&#34;1111&#34;, &#34;2222&#34;]},
      { name: &#34;w_en&#34;, wave: &#34;10...10.&#34;},
      { name: &#34;r_addr&#34;, wave: &#34;2.......&#34;, data: [&#34;0000&#34;]},
      { name: &#34;r_en&#34;, wave: &#34;0.10.1.0&#34;},
      { name: &#34;mem_colldisn_0[0]&#34;, wave: &#34;x2....2.&#34;, data: [&#34;1111&#34;, &#34;xxxx&#34;]},
      { name: &#34;r_data_colldisn_0&#34;, wave: &#34;xxx2..2.&#34;, data: [&#34;1111&#34;, &#34;xxxx&#34;]},
      { name: &#34;mem_colldisn_1[0]&#34;, wave: &#34;x2....2.&#34;, data: [&#34;1111&#34;, &#34;2222&#34;]},
      { name: &#34;r_data_colldisn_1&#34;, wave: &#34;xxx2..22&#34;, data: [&#34;1111&#34;, &#34;xxxx&#34;, &#34;2222&#34;]},
    ]
}
&lt;/script&gt;&lt;p&gt;第一个周期没有读写冲突，所以成功写入，第三个周期也可以正确地都出来。第六个周期读写冲突，此时如果 COLLDISN 等于 0，那么读写都失败，下一个周期读取结果是 xxxx，并且之后继续读取依然是 xxxx，因为内存中的数据被破坏了；而如果 COLLDISN 等于 1，那么写入成功，内存中的值变为 2222，但读取失败，下一个周期读取结果是 xxxx，但是再下一个周期就可以正常读取，得到 2222。&lt;/p&gt;
&lt;p&gt;这就与 Xilinx FPGA 不一样：这里如果 COLLDISN 等于 0，读写冲突的时候，可能写入会失效，内存中的值变为不确定的内容。所以为了保证正确性，要么在 SRAM IP 外部进行读写冲突检查，如果要冲突了，就关掉读口，然后从写口 bypass 数据到读口；要么在 SRAM IP 内部进行读写冲突检查（设置 COLLDISN 等于 1），然后不要使用冲突时读取的数据。&lt;/p&gt;
&lt;h2 id=&#34;chisel&#34;&gt;Chisel&lt;/h2&gt;
&lt;p&gt;Chisel 中 RAM 对应的是 SyncReadMem，它可以指定 Read under Write behavior：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SyncReadMem()&lt;/code&gt;: unspecified in FIRRTL, &lt;code&gt;WriteFirst&lt;/code&gt; in behavior model&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SyncReadMem(Undefined)&lt;/code&gt;: unspecified in FIRRTL, &lt;code&gt;WriteFirst&lt;/code&gt; in behavior model&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SyncReadMem(ReadFirst)&lt;/code&gt;: &lt;code&gt;old&lt;/code&gt; in FIRRTL, &lt;code&gt;ReadFirst&lt;/code&gt; in behavior model&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SyncReadMem(WriteFirst)&lt;/code&gt;: &lt;code&gt;new&lt;/code&gt; in FIRRTL, &lt;code&gt;WriteFirst&lt;/code&gt; in behavior model&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是说，在行为级模型中，只有 WriteFirst 和 ReadFirst 两种行为，并且默认是 &lt;code&gt;WriteFirst&lt;/code&gt;。但是，前面也提到，实际上 XPM 只支持 &lt;code&gt;Undefined&lt;/code&gt;（生成 &lt;code&gt;x&lt;/code&gt;）和 &lt;code&gt;ReadFirst&lt;/code&gt;（READ_FIRST）两种；上面的 SRAM IP 更是只支持 &lt;code&gt;Undefined&lt;/code&gt;（生成 &lt;code&gt;x&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;这就导致写 Chisel 代码的时候，如果不小心用了 1R1W，并且代码依赖了 Read Under Write 在行为级模型下的行为，那么在使用 XPM 或者 SRAM IP 进行替换的时候，就需要额外的逻辑来处理这个不同。例如，如果要模拟 &lt;code&gt;WriteFirst&lt;/code&gt;，就比较地址，然后进行 bypass；但是 &lt;code&gt;ReadFirst&lt;/code&gt; 就没办法模拟了。最好的解决方法还是，不要出现冲突，即使要冲突，也要在上层进行处理。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>firtool 尝试</title>
      <link>https://jia.je/hardware/2023/04/04/firtool/</link>
      <pubDate>Tue, 04 Apr 2023 20:33:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/04/04/firtool/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;Chisel 3.6 很快就要发布了（目前最新版本是 3.6.0-RC2），这个大版本的主要更新内容就是引入了 CIRCT 的 firtool 作为 FIRRTL 到 Verilog 的转换流程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The primary change in Chisel v3.6.0 is the transition from the Scala FIRRTL
Compiler to the new MLIR FIRRTL Compiler. This will have a minimal impact on
typical Chisel user APIs but a large impact on custom compiler flows. For
more information, please see the ROADMAP.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因此提前测试一下 firtool，看看其和 Scala FIRRTL Compiler 有哪些区别，是否有更好的输出。&lt;/p&gt;
&lt;h2 id=&#34;使用-firtool&#34;&gt;使用 firtool&lt;/h2&gt;
&lt;p&gt;使用 firtool 有两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 chisel3 3.6 的 &lt;code&gt;circt.stage.ChiselStage&lt;/code&gt; 对象：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;circt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ChiselStage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;emitSystemVerilogFile&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Top&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码中会生成 Chisel 模块对应的 FIRRTL 文件，然后喂给 firtool。也可以通过 &lt;code&gt;circt.stage.ChiselMain&lt;/code&gt; 来运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sbt &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runMain circt.stage.ChiselMain --help&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;info&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; running circt.stage.ChiselMain --help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage: circt &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;options&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;arg&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Shell Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;arg&amp;gt;...                 optional unbounded args
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -td, --target-dir &amp;lt;directory&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Work directory &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;default: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -faf, --annotation-file &amp;lt;file&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           An input annotation file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -foaf, --output-annotation-file &amp;lt;file&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           An output annotation file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --show-registrations     print discovered registered libraries and transforms
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --help                   prints this usage text
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Logging Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -ll, --log-level &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;error|warn|info|debug|trace&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Set global logging verbosity &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;default: None
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -cll, --class-log-level &amp;lt;FullClassName:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;error|warn|info|debug|trace&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&amp;gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Set per-class logging verbosity
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --log-file &amp;lt;file&amp;gt;        Log to a file instead of STDOUT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -lcn, --log-class-names  Show class names and log level in logging output
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CIRCT &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MLIR FIRRTL Compiler&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --target &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;chirrtl|firrtl|hw|verilog|systemverilog&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           The CIRCT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --preserve-aggregate &amp;lt;value&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Do not lower aggregate types to ground types
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --module &amp;lt;package&amp;gt;.&amp;lt;module&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           The name of a Chisel module to elaborate &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;module must be in the classpath&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --full-stacktrace        Show full stack trace when an exception is thrown
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --throw-on-first-error   Throw an exception on the first error instead of continuing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --warnings-as-errors     Treat warnings as errors
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --source-root &amp;lt;file&amp;gt;     Root directory &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; source files, used &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; enhanced error reporting
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --split-verilog          Indicates that &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;firtool&amp;#34;&lt;/span&gt; should emit one-file-per-module and write separate outputs to separate files
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FIRRTL Transform Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --no-dce                 Disable dead code elimination
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --no-check-comb-loops    Disable combinational loop checking
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -fil, --inline &amp;lt;circuit&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;.&amp;lt;module&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;.&amp;lt;instance&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]][&lt;/span&gt;,...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Inline selected modules
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -clks, --list-clocks -c:&amp;lt;circuit&amp;gt;:-m:&amp;lt;module&amp;gt;:-o:&amp;lt;filename&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           List which signal drives each clock of every descendent of specified modules
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --no-asa                 Disable assert submodule assumptions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --no-constant-propagation
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Disable constant propagation elimination
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AspectLibrary
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --with-aspect &amp;lt;package&amp;gt;.&amp;lt;aspect&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           The name/class of an aspect to compile with &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;must be a class/object without arguments!&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MemLib Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -firw, --infer-rw        Enable read/write port inference &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; memories
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -frsq, --repl-seq-mem -c:&amp;lt;circuit&amp;gt;:-i:&amp;lt;file&amp;gt;:-o:&amp;lt;file&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Blackbox and emit a configuration file &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each sequential memory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -gmv, --gen-mem-verilog &amp;lt;blackbox|full&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Blackbox and emit a Verilog behavior model &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each sequential memory
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在 Scala 中生成 FIRRTL 文件，然后用 firtool 命令转换 &lt;code&gt;.fir&lt;/code&gt; 为 &lt;code&gt;.sv&lt;/code&gt;。由于 Rocket Chip 还没有迁移，所以需要通过 firtool 来转换。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于目前 chisel3 并没有打包 firtool，目前需要自己装 firtool，例如通过 nix 或下载 GitHub 上的 Release 文件。本文采用的是 firtool 1.34.0。&lt;/p&gt;
&lt;h2 id=&#34;对比&#34;&gt;对比&lt;/h2&gt;
&lt;p&gt;把同一份源码，通过两种方式来生成 Verilog 然后进行观察，下面是一些生成的代码的区别。&lt;/p&gt;
&lt;h3 id=&#34;状态机&#34;&gt;状态机&lt;/h3&gt;
&lt;p&gt;首先是一个状态机的例子（取自 chisel3 的 DetectTwoOnes 样例）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sTwo1s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  when&lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sNone
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Scala FIRRTL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] _GEN_2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;io_in &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&amp;#39;h0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; state; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/DetectTwoOnes.scala 33:20 34:15 15:22]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&amp;#39;h2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; state) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/DetectTwoOnes.scala 19:17]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; _GEN_2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CIRCT firtool:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (state &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&amp;#39;h2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;io_in)	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/DetectTwoOnes.scala:15:22, :17:20, :19:17, :33:{12,20}, :34:15
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&amp;#39;h0&lt;/span&gt;;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/DetectTwoOnes.scala:15:22, :29:15
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个例子里，Scala FIRRTL Compiler 多生成了一个 &lt;code&gt;_GEN_2&lt;/code&gt;，需要把前后一起看才知道是什么意思，而 CIRCT 生成的与源码比较接近，可读性较好。&lt;/p&gt;
&lt;h3 id=&#34;syncreadmem&#34;&gt;SyncReadMem&lt;/h3&gt;
&lt;p&gt;接下来看 SyncReadMem。在 Scala FIRRTL Compiler 中，默认是直接在模块中嵌入代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  reg &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  wire  mem_rdata_MPORT_en&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_rdata_MPORT_addr&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_rdata_MPORT_data&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_MPORT_data&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_MPORT_addr&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  wire  mem_MPORT_mask&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  wire  mem_MPORT_en&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  reg  mem_rdata_MPORT_en_pipe_0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  reg &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_rdata_MPORT_addr_pipe_0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_rdata_MPORT_en &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; mem_rdata_MPORT_en_pipe_0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_rdata_MPORT_addr &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; mem_rdata_MPORT_addr_pipe_0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_rdata_MPORT_data &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; mem&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mem_rdata_MPORT_addr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  assign mem_MPORT_data &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; wdata&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_MPORT_addr &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; waddr&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_MPORT_mask &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&amp;#39;h1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_MPORT_en &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&amp;#39;h1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign rdata &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; mem_rdata_MPORT_data&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 11:9]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  always &lt;span style=&#34;color:#f92672&#34;&gt;@(&lt;/span&gt;posedge clock&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; begin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_MPORT_en &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; mem_MPORT_mask&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; begin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      mem&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mem_MPORT_addr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; mem_MPORT_data&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    end
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mem_rdata_MPORT_en_pipe_0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&amp;#39;h1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&amp;#39;h1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; begin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      mem_rdata_MPORT_addr_pipe_0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; raddr&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    end
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  end
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然了，它有 repl-seq-mem 的选项，可以生成 BlackBox 方便替换为实际的 SRAM IP：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sbt &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runMain firrtl.stage.FirrtlMain -i Memory.fir --repl-seq-mem -c:Memory:-o:Memory.conf&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat Memory.v
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;module mem&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  input  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;4:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  R0_addr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  input         R0_clk,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  output &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;31:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; R0_data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  input  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;4:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  W0_addr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  input         W0_clk,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  input  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;31:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; W0_data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;4:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_ext_R0_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wire  mem_ext_R0_en;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wire  mem_ext_R0_clk;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;31:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_ext_R0_data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;4:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_ext_W0_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wire  mem_ext_W0_en;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wire  mem_ext_W0_clk;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;31:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_ext_W0_data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mem_ext mem_ext &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .R0_addr&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_ext_R0_addr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .R0_en&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_ext_R0_en&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .R0_clk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_ext_R0_clk&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .R0_data&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_ext_R0_data&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .W0_addr&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_ext_W0_addr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .W0_en&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_ext_W0_en&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .W0_clk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_ext_W0_clk&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .W0_data&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_ext_W0_data&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_ext_R0_clk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; R0_clk;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_ext_R0_en &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h1;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  assign mem_ext_R0_addr = R0_addr;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  assign R0_data = mem_ext_R0_data;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  assign mem_ext_W0_clk = W0_clk;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  assign mem_ext_W0_en = 1&amp;#39;&lt;/span&gt;h1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_ext_W0_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; W0_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_ext_W0_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; W0_data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endmodule
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat Memory.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name mem_ext depth &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; width &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; ports write,read  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下游工具读取 Memory.conf 去生成对应的 mem_ext 模块。这里只考虑了 Read Latency 为 1 的情况，如果是 Mem，就不会生成 BlackBox，毕竟参数名字是 sequential memory。&lt;/p&gt;
&lt;p&gt;CIRCT firtool 也有类似的表现，只不过默认情况下就会用一个单独的模块：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Memory(	&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;stdin&amp;gt;:3:10
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;         clock,	&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;stdin&amp;gt;:4:11
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                reset,	&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;stdin&amp;gt;:5:11
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;  [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]  raddr,	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:4:17
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                waddr,	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:7:17
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;  [&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] wdata,	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:8:17
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] rdata	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:5:17
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mem_combMem mem_ext (	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    .R0_addr (raddr),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .R0_en   (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&amp;#39;h1&lt;/span&gt;),	&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;stdin&amp;gt;:3:10
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    .R0_clk  (clock),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .W0_addr (waddr),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .W0_en   (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&amp;#39;h1&lt;/span&gt;),	&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;stdin&amp;gt;:3:10
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    .W0_clk  (clock),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .W0_data (wdata),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .R0_data (rdata)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; mem_combMem(	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;  [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]  R0_addr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;         R0_en,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                R0_clk,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;  [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]  W0_addr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;         W0_en,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                W0_clk,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;  [&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] W0_data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] R0_data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] Memory[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;];	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt;        _GEN;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]  _GEN_0;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; R0_clk) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    _GEN &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; R0_en;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    _GEN_0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; R0_addr;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// always @(posedge)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; W0_clk) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (W0_en)	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      Memory[W0_addr] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; W0_data;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// always @(posedge)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;assign&lt;/span&gt; R0_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _GEN &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; Memory[_GEN_0] &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&amp;#39;bx;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;firtool 也支持 &lt;code&gt;-repl-seq-mem&lt;/code&gt; 参数，用法和输出与 Scala FIRRTL Compiler 类似。&lt;/p&gt;
&lt;p&gt;我最近也写了一个小工具：&lt;a href=&#34;https://github.com/jiegec/chisel-memory-lower&#34;&gt;chisel-memory-lower&lt;/a&gt;来解析生成的 conf 文件，生成对应的 BlackBox。&lt;/p&gt;
&lt;h3 id=&#34;复杂组合逻辑&#34;&gt;复杂组合逻辑&lt;/h3&gt;
&lt;p&gt;再来看 Hardfloat 的例子。代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; exp &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; in&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;expWidth &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sigWidth &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sigWidth &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; isZero    &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; exp&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;expWidth&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; expWidth &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;U
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; isSpecial &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; exp&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;expWidth&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; expWidth &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;U
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; out &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Wire&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RawFloat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;expWidth&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sigWidth&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isNaN  &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; isSpecial &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;   exp&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;expWidth &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Scala FIRRTL Compiler:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; rawA_exp &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; io_a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[submodules/berkeley-hardfloat/src/main/scala/rawFloatFromRecFN.scala 51:21]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;wire  rawA_isZero &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; rawA_exp&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&amp;#39;h0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[submodules/berkeley-hardfloat/src/main/scala/rawFloatFromRecFN.scala 52:53]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;wire  rawA_isSpecial &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; rawA_exp&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&amp;#39;h3&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[submodules/berkeley-hardfloat/src/main/scala/rawFloatFromRecFN.scala 53:53]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;wire  rawA__isNaN &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; rawA_isSpecial &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; rawA_exp&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[submodules/berkeley-hardfloat/src/main/scala/rawFloatFromRecFN.scala 56:33]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;基本是忠实的翻译。&lt;/p&gt;
&lt;p&gt;CIRCT Firtool:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt;        rawA_isNaN &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(io_a[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;])) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; io_a[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;];	&lt;span style=&#34;color:#75715e&#34;&gt;// submodules/berkeley-hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :53:{28,53}, :56:{33,41}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，这里对代码进行了变换，把 &lt;code&gt;=== 3.U&lt;/code&gt; 变成了 AND，不再忠实原来的代码，而是采取了更加间接的表达方式。&lt;/p&gt;
&lt;p&gt;再看一个类似的例子，源码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; signProd &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; rawA&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sign &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; rawB&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sign &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;op&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Scala FIRRTL Compiler:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt;  rawA__sign &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; io_a[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// @[submodules/berkeley-hardfloat/src/main/scala/rawFloatFromRecFN.scala 59:25]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt;  rawB__sign &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; io_b[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// @[submodules/berkeley-hardfloat/src/main/scala/rawFloatFromRecFN.scala 59:25]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt;  signProd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rawA__sign &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; rawB__sign &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; io_op[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// @[submodules/berkeley-hardfloat/src/main/scala/MulAddRecFN.scala 96:42]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CIRCT firtool:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt;        signProd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; io_a[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; io_b[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; io_op[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];	&lt;span style=&#34;color:#75715e&#34;&gt;// submodules/berkeley-hardfloat/src/main/scala/MulAddRecFN.scala:96:{42,49}, submodules/berkeley-hardfloat/src/main/scala/rawFloatFromRecFN.scala:59:25
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，CIRCT firtool 比较倾向于内联一些简单的连线。当然了，这个不是绝对的，通过修改命令行参数，可能得到不同的结果。&lt;/p&gt;
&lt;h3 id=&#34;rocket-chip&#34;&gt;Rocket Chip&lt;/h3&gt;
&lt;p&gt;在 rocket-chip-vcu128 项目中测试了一下，迁移到 CIRCT firtool 比较简单，只需要把 FirrtlMain 的调用改成直接运行 firtool。但是，在综合的时候，发现 Vivado 无法推断出一个 SyncReadMem，导致 LUT 和 Register 占用特别多。解决思路有两个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用上面所说的 &lt;code&gt;--repl-seq-mem&lt;/code&gt; 生成 BlackBox，然后生成 XPM Macro 接起来&lt;/li&gt;
&lt;li&gt;添加 &lt;code&gt;--lower-memories&lt;/code&gt; 参数，简化 SRAM，然后 Vivado 就可以识别出来了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;速度&#34;&gt;速度&lt;/h3&gt;
&lt;p&gt;运行大项目的时候，Scala FIRRTL Compiler 的速度明显比 CIRCT Firtool 慢，体验还是不错的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>单核处理器的协同仿真</title>
      <link>https://jia.je/hardware/2023/03/23/core-cosim/</link>
      <pubDate>Thu, 23 Mar 2023 11:18:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/03/23/core-cosim/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;今年的龙芯杯又开始报名了，我来写一篇关于协同仿真（cosim）的博客蹭蹭热度。下面的内容参考了一些已有的协同仿真的框架，例如 &lt;a href=&#34;https://ibex-core.readthedocs.io/en/latest/03_reference/cosim.html&#34;&gt;ibex co-sim&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/OpenXiangShan/difftest&#34;&gt;OpenXiangShan/difftest&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;协同仿真&#34;&gt;协同仿真&lt;/h2&gt;
&lt;p&gt;RTL 层次的协同仿真可以做不同层次的，这里讨论的是指令提交层次，具体来讲，就是把 CPU 和一个模拟器放在一起协同仿真，检查每条指令执行完以后的状态是否一致。基于代码样例的测试虽然可以覆盖很多情况，但是如果出了错误，报错的地方不一定是出现问题的地方，有些时候就需要往回找很久，才能找到刚出现问题的地方。软件上，大家经常苦于内存错误，经常找不到刚出现溢出的地方，所以要用 valgrind 或者 asan 等工具来直接定位第一次出错的地方。硬件上也是类似，为了精确定位到出错的波形，可以用 cosim。&lt;/p&gt;
&lt;p&gt;cosim 是怎么工作的呢？模拟器是软件实现的，它原子地执行一条条指令，同时记录下当前的状态，例如寄存器的取值、内存的状态等等。如果可以让 CPU 和模拟器锁步运行，也就是 CPU 执行一条指令，模拟器执行一条指令，然后比对状态，一旦出现不一致，就直接报错。但实际上 CPU 可能会更加复杂，因为它指令的执行拆分成了很多部分，需要针对流水线进行一些修改，使得它可以生成一个匹配模拟器的原子的执行流。&lt;/p&gt;
&lt;p&gt;整体的工作流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择一个模拟器，自己写或者使用一个现成的。考虑到模拟器实现的功能和 CPU 不一定一致，有时候需要修改模拟器的源码，所以可以考虑使用一些现成的开源软件，如果是为了 cosim 设计的就更好了。&lt;/li&gt;
&lt;li&gt;找到模拟器的单步执行接口，并且让模拟器可以把内部状态暴露出来。这一步可能需要修改源代码。&lt;/li&gt;
&lt;li&gt;修改 RTL，把指令的提交信息、寄存器堆的内容通过一些方法传递出来。&lt;/li&gt;
&lt;li&gt;修改仿真顶层，每当指令提交的时候，单步执行模拟器，然后比对双方的状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;模拟器&#34;&gt;模拟器&lt;/h2&gt;
&lt;p&gt;选择模拟器，要根据你所实现的指令集来选择。下面以 Spike 为例，用来和 RISC-V CPU 进行协同仿真。spike 实现了比较完整的 RISC-V 指令集，并且以库的形式提供了它的 API，但还需要一些修改，让它更加适合协同仿真。这一部分参考了 &lt;a href=&#34;https://ibex-core.readthedocs.io/en/latest/03_reference/cosim.html&#34;&gt;ibex co-sim&lt;/a&gt;的文档。&lt;/p&gt;
&lt;p&gt;首先，spike 提供了 step 函数，就是我们想要的单步执行。但是，spike 的 step 在遇到异常或者中断的时候也会返回，但实际上在处理器一侧，通常异常是单独处理的，所以这时候就要修改 spike 的 step 函数，如果遇到异常了，继续执行，直到执行了一条指令为止。与此同时，spike 没有记录最后一次执行的指令的 pc，只记录了下一个 PC，那么在发生异常的时候，就不会记录异常处理的第一条指令的 PC，这里也要进行针对性的修改。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;state.last_inst_pc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pc;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;execute_insn_logged&lt;/span&gt;(this, pc, fetch);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;advance_pc&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;做了这些修改以后，就足够在 cosim 中运行一些简单的程序了。&lt;/p&gt;
&lt;h2 id=&#34;处理器&#34;&gt;处理器&lt;/h2&gt;
&lt;p&gt;接下来，需要修改处理器，让它可以汇报每个周期完成执行的指令情况，具体的格式因实现而异，最后都需要把这些信息暴露给仿真顶层，可能的方法有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过多级的 module output 一路传到顶层，最终是顶层模块的输出信号。这种方法改动比较大，而且麻烦。&lt;/li&gt;
&lt;li&gt;通过 DPI 函数，每个周期调用一次，把信息通过 DPI 的参数传递给 C 函数。这种方法比较推荐。&lt;/li&gt;
&lt;li&gt;通过仿真器的功能，例如 verilator 可以通过添加注释的方法，把信号暴露出去。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;仿真顶层拿到信息以后，就可以进行 cosim 了：CPU 执行一条指令，就让模拟器也 step 一步，然后比较二者的状态。状态怎么比对呢？常见的有通用寄存器，RISC-V 的 CSR。既可以通过记录寄存器堆的写入来比对，又可以直接把整个寄存器堆的内容导出来比对。实际上这些部分的性能影响都是很小的。&lt;/p&gt;
&lt;p&gt;那么，内存怎么比对呢？对于简单的顺序处理器，读写也是顺序的，那么可以把读写的日志放到一个队列 deque 中，然后让模拟器也记录下内存的读写，从 deque 进行 pop 和比对。但实际情况可能会比较复杂，例如更复杂的处理器里可能会出现乱序访存等情况，同时处理器还可能会进行写合并等操作，这时候就需要在仿真顶层做一些匹配和合并的操作。实在觉得麻烦，也可以先不管内存，直接比对寄存器，也足够定位很多内存问题，因为 RISC-V 读内存总是要加载到寄存器中的。&lt;/p&gt;
&lt;h2 id=&#34;特殊情况&#34;&gt;特殊情况&lt;/h2&gt;
&lt;p&gt;实现了前面的部分，就可以跑很多程序了，但是对于一些复杂的程序，例如 Linux，还缺少一样东西：外设和中断。能想到的第一种方法就是，用 C 代码再写一个外设的模型，然后接到模拟器的虚拟总线上。但是中断就会比较麻烦，因为中断的时机比较难保证同步，所以通常的方法是，把模拟器的中断处理关掉，当 CPU 发送 trap 的时候，让模拟器也发生一次 trap。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// handle trap
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (interrupt) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;trap_t&lt;/span&gt; trap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8000000000000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; interrupt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  proc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;take_trap&lt;/span&gt;(trap, proc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get_state&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  interrupt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但有一些外设不容易保证完全一致，例如 mtime 读取时间，很难保证 CPU 里读取的时间值和模拟器里的 mtime 一致。这时候就可以采用另一个办法：记录所有对外设的 load 指令，因为有副作用的关系，一定是顺序的，这时候就可以像前面提到的队列的方式，CPU 进行 uncached load 的时候，就把 load 的地址、数据和长度记录到队列中，当模拟器也要进行 load 的时候，匹配上地址和长度，返回数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// match rtl uncached load event
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;uncached_load_events.&lt;span style=&#34;color:#a6e22e&#34;&gt;empty&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  uncached_load_event ev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uncached_load_events.&lt;span style=&#34;color:#a6e22e&#34;&gt;front&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ev.addr &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ev.len &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;memcpy&lt;/span&gt;(bytes, (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ev.data, len);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    uncached_load_events.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop_front&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但这样实际上就假设了外设实现是正确的。如果还需要验证外设实现是否正确，需要结合两种方法，对于不确定结果的 load（例如 mtime），就按照 CPU 的结果来，否则就用 C 实现的外设模型进行比对。&lt;/p&gt;
&lt;p&gt;除了这些意外，处理器实现的 feature 可能会和模拟器有一些出入，这些都比较容易解决，直接修改代码，屏蔽掉没有实现的功能，保持一致即可。&lt;/p&gt;
&lt;h2 id=&#34;chatgptbard-的回复&#34;&gt;ChatGPT/Bard 的回复&lt;/h2&gt;
&lt;p&gt;提问：&lt;/p&gt;
&lt;p&gt;How can I verify my RISC-V processor design via co-simulation with spike?&lt;/p&gt;
&lt;p&gt;ChatGPT:&lt;/p&gt;
&lt;p&gt;Co-simulation with Spike can be a great way to verify your RISC-V processor design. Here&amp;rsquo;s a high-level overview of the process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Write a testbench: You&amp;rsquo;ll need to create a testbench that can generate inputs to your processor and check the outputs. This testbench can be written in any language you prefer, but most people use a hardware description language like Verilog or VHDL.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connect your processor to Spike: To run a co-simulation with Spike, you&amp;rsquo;ll need to connect your processor design to Spike using a TLM (transaction-level modeling) interface. Spike has a built-in TLM interface called the &amp;ldquo;Spike External Debug Interface&amp;rdquo; (S-EDI) that you can use.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注：查不到 Spike External Debug Interface&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Configure the co-simulation: You&amp;rsquo;ll need to configure the co-simulation by specifying the parameters of your processor design and Spike, such as the clock frequency and the reset signal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the simulation: Once your testbench is written, your processor is connected to Spike, and the co-simulation is configured, you can run the simulation. Your testbench will generate inputs to your processor, which will be processed by Spike and your processor design. The output of your processor will be checked by your testbench to verify that it&amp;rsquo;s correct.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Debug any issues: If you encounter any issues during the simulation, you&amp;rsquo;ll need to debug them. This can involve looking at waveforms or logs to understand where things went wrong.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are some more detailed steps to follow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Write your testbench in Verilog or VHDL. Your testbench should be able to generate inputs to your processor design and check the outputs. You can use any verification methodology you prefer, such as directed tests or random tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connect your processor design to Spike using the S-EDI interface. The S-EDI interface is a TLM interface that allows Spike to communicate with your processor design. You&amp;rsquo;ll need to instantiate the S-EDI module in your testbench and connect it to your processor design. You can find more information about the S-EDI interface in the Spike documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure the co-simulation. You&amp;rsquo;ll need to specify the clock frequency and reset signal for your processor design and Spike. You may also need to specify other parameters, such as the memory map for your processor design.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the simulation. Once your testbench is written, your processor is connected to Spike, and the co-simulation is configured, you can run the simulation. You can use a simulator like ModelSim or QuestaSim to run the simulation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Debug any issues. If you encounter any issues during the simulation, you&amp;rsquo;ll need to debug them. You can use the waveform viewer in your simulator to understand what&amp;rsquo;s happening in your design. You can also use the Spike debugger to debug your processor design. The Spike debugger allows you to step through your code and examine the processor state.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By following these steps, you can use co-simulation with Spike to verify your RISC-V processor design.&lt;/p&gt;
&lt;p&gt;Bard:&lt;/p&gt;
&lt;p&gt;Co-simulation is a technique used in verification to run two or more models of a system in lockstep, with each model executing a different part of the system. This allows the models to be used together to verify that the system behaves as expected.&lt;/p&gt;
&lt;p&gt;To co-simulate your RISC-V processor design with Spike, you will need to create a model of your processor in Spike and a model of the system that your processor will be embedded in. You will then need to configure the two models to run in lockstep, with each model communicating with the other through a shared memory buffer.&lt;/p&gt;
&lt;p&gt;Once the co-simulation is running, you can use it to verify that your processor design behaves as expected. You can do this by running test cases on the system model and observing the behavior of your processor model. If the processor model behaves as expected, then you can be confident that your design is correct.&lt;/p&gt;
&lt;p&gt;Here are some of the benefits of using co-simulation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It can help you to find errors in your design early in the development process.&lt;/li&gt;
&lt;li&gt;It can help you to verify that your design meets the requirements of the system that it will be embedded in.&lt;/li&gt;
&lt;li&gt;It can help you to optimize your design for performance and power consumption.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some of the challenges of using co-simulation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It can be difficult to create accurate models of both your processor and the system that it will be embedded in.&lt;/li&gt;
&lt;li&gt;It can be difficult to configure the co-simulation to run in lockstep.&lt;/li&gt;
&lt;li&gt;It can be difficult to interpret the results of the co-simulation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, co-simulation is a powerful technique that can be used to verify your RISC-V processor design. However, it is important to be aware of the challenges involved in using co-simulation.&lt;/p&gt;
&lt;h2 id=&#34;多核&#34;&gt;多核&lt;/h2&gt;
&lt;p&gt;以上的方法都是针对单核 CPU 进行协同仿真的，但多核会更加复杂，多核涉及到不同核心之间的同步、通信等等，很难把一个周期精确的 CPU 和一个不精确的模拟器匹配起来。香山提供了一个思路：&lt;a href=&#34;https://github.com/OpenXiangShan/XiangShan-doc/blob/main/slides/20210624-RVWC-SMP-Difftest%20%E6%94%AF%E6%8C%81%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E5%B7%AE%E5%88%86%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.pdf&#34;&gt;https://github.com/OpenXiangShan/XiangShan-doc/blob/main/slides/20210624-RVWC-SMP-Difftest%20%E6%94%AF%E6%8C%81%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E5%B7%AE%E5%88%86%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.pdf&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>软硬件队列接口</title>
      <link>https://jia.je/networking/2023/03/22/hardware-queue-interface/</link>
      <pubDate>Wed, 22 Mar 2023 22:30:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2023/03/22/hardware-queue-interface/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;在网卡等场景下，经常会需要在软硬件之间传输大量的数据，通常的方法是建立循环队列，例如 H2C（Host to Chip）方向，是 Host 作为 Producer 增加数据到队尾，Chip 作为 Consumer 从队头读取数据。由于每次传输的数据不定长，为了方便，队列的项是一个定长的 Descriptor，Descriptor 指向了数据的地址。但具体的细节，不同的实现还不太一样。下面逐个案例进行分析。&lt;/p&gt;
&lt;h2 id=&#34;axi-dma&#34;&gt;AXI DMA&lt;/h2&gt;
&lt;p&gt;文档：&lt;a href=&#34;https://docs.xilinx.com/r/en-US/pg021_axi_dma&#34;&gt;https://docs.xilinx.com/r/en-US/pg021_axi_dma&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果在 Xilinx FPGA 上使用过以太网，那大概率会接触到 AXI DMA 这个 IP，它负责把以太网 MAC 的 AXI Stream 数据用 DMA 的形式通过内存来与操作系统交互。&lt;/p&gt;
&lt;h3 id=&#34;发送队列&#34;&gt;发送队列&lt;/h3&gt;
&lt;p&gt;它的收和发各是一个队列，首先来看发送队列：&lt;/p&gt;
&lt;p&gt;发送队列由一个头指针（MM2S_CURDESC）和一个尾指针定义（MM2S_TAILDESC），指针指向的是一个 Scatter Gather Descriptor，Descriptor 的内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NXTDESC：队列下一项的地址&lt;/li&gt;
&lt;li&gt;BUFFER_ADDRESS：要传输的数据的地址&lt;/li&gt;
&lt;li&gt;CONTROL：控制信息&lt;/li&gt;
&lt;li&gt;STATUS：状态信息&lt;/li&gt;
&lt;li&gt;APP0 to APP4：附带的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可见这个发送队列实际上是一个链表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; axi_dma_desc {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; axi_dma_desc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nxtdesc;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;buffer_address;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当 MM2S_TAILDESC 被更新的时候，硬件会从 CURDESC 开始逐个 Descriptor 处理，直到遇到 TAILDESC 为止：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// when taildesc is changed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;taildesc_changed&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_send&lt;/span&gt;(curdesc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (curdesc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; taildesc) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      curdesc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curdesc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;nxtdesc;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (curdesc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; taildesc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以，实际上是驱动不断地提供一个链表给 AXI DMA 去发送，至于这个链表是只有一个元素的数组，还是用一个循环队列去实现，都是可能的。&lt;/p&gt;
&lt;h4 id=&#34;u-boot&#34;&gt;U-Boot&lt;/h4&gt;
&lt;p&gt;下面来看 U-Boot 的例子，驱动是 &lt;a href=&#34;https://github.com/u-boot/u-boot/blob/v2023.01/drivers/net/xilinx_axi_emac.c&#34;&gt;xilinx_axi_emac.c&lt;/a&gt;。这个驱动的实现很简单：每次需要发送的时候，只准备一个 Descriptor，发完就轮询直到发送成功。显然这个写法没有很好地利用 DMA 的异步特性，但胜在简单。下面是 &lt;code&gt;axiemac_send&lt;/code&gt; 的部分源码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axiemac_send&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; udevice &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dev, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Setup Tx BD */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tx_bd, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(tx_bd));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* At the end of the ring, link the last BD back to the top */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tx_bd.next_desc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lower_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tx_bd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tx_bd.next_desc_msb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upper_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tx_bd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tx_bd.buf_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lower_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)ptr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tx_bd.buf_addr_msb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upper_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)ptr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Save len */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tx_bd.cntrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; XAXIDMA_BD_CTRL_TXSOF_MASK &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            XAXIDMA_BD_CTRL_TXEOF_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_write&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tx_bd, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmatx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;current);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  u32 temp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Start the hardware */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readl&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmatx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;control);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  temp &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; XAXIDMA_CR_RUNSTOP_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;writel&lt;/span&gt;(temp, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmatx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;control);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Start transfer */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_write&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tx_bd, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmatx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tail);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for transmission to complete */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;axiemac: Waiting for tx to be done&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  timeout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (timeout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;readl&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmatx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;status) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (XAXIDMA_IRQ_DELAY_MASK &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; XAXIDMA_IRQ_IOC_MASK)))) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    timeout&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;udelay&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;linux&#34;&gt;Linux&lt;/h4&gt;
&lt;p&gt;再来看 Linux 的 驱动：&lt;a href=&#34;https://github.com/torvalds/linux/blob/v6.2/drivers/net/ethernet/xilinx/xilinx_axienet_main.c&#34;&gt;xilinx_axienet_main.c&lt;/a&gt;。它采取的方法是分配一个 Descriptor 数组，然后把数组的每一项都指向下一项（最后一项指向第一项），形成一个链表形式的循环队列，维护一个尾指针。下面是初始化代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_bd_init&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; net_device &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ndev) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Allocate the Tx and Rx buffer descriptors. */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_alloc_coherent&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_v) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_num,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_p, GFP_KERNEL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_num; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;dma_addr_t&lt;/span&gt; addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_v) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          ((i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_num);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_v[i].next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lower_32_bits&lt;/span&gt;(addr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_v[i].next_msb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upper_32_bits&lt;/span&gt;(addr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Write to the RS (Run-stop) bit in the Tx channel control register.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * Tx channel is now ready to run. But only after we write to the
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * tail pointer register that the Tx channel will start transmitting.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_out_addr&lt;/span&gt;(lp, XAXIDMA_TX_CDESC_OFFSET, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_dma_cr &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; XAXIDMA_CR_RUNSTOP_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_out32&lt;/span&gt;(lp, XAXIDMA_TX_CR_OFFSET, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_dma_cr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;初始化好了以后，每当要发送数据的时候，就写入 tail 指针指向的 Descriptor，然后增加 tail 指针，同时告诉硬件开始 DMA：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;netdev_tx_t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_start_xmit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sk_buff &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;skb, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; net_device &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ndev) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  u32 num_frag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_shinfo&lt;/span&gt;(skb)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;nr_frags;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_check_tx_bd_space&lt;/span&gt;(lp, num_frag &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NETDEV_TX_BUSY;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  phys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_map_single&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, skb&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_headlen&lt;/span&gt;(skb), DMA_TO_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;desc_set_phys_addr&lt;/span&gt;(lp, phys, cur_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cntrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_headlen&lt;/span&gt;(skb) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; XAXIDMA_BD_CTRL_TXSOF_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (ii &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; ii &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; num_frag; ii&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;new_tail_ptr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_num)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      new_tail_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_v[new_tail_ptr];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    frag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;skb_shinfo&lt;/span&gt;(skb)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;frags[ii];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    phys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_map_single&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_frag_address&lt;/span&gt;(frag),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_frag_size&lt;/span&gt;(frag),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              DMA_TO_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;desc_set_phys_addr&lt;/span&gt;(lp, phys, cur_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cntrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_frag_size&lt;/span&gt;(frag);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cntrl &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; XAXIDMA_BD_CTRL_TXEOF_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; skb;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tail_p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_v) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; new_tail_ptr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;new_tail_ptr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_num)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_tail_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;WRITE_ONCE&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_tail, new_tail_ptr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Start the transfer */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_out_addr&lt;/span&gt;(lp, XAXIDMA_TX_TDESC_OFFSET, tail_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实现思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查是否有足够的空闲 Descriptor&lt;/li&gt;
&lt;li&gt;对于要发送的数据的每一段，都填入一个 Descriptor&lt;/li&gt;
&lt;li&gt;写入新的 tail 指针，启动 DMA&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么，又有一个问题：如何知道硬件完成了 DMA 传输，释放了 Descriptor 呢？答案是，AXI DMA 传输完成时，会通过中断通知 CPU，Linux 最终会调用 &lt;code&gt;axienet_free_tx_chain&lt;/code&gt; 函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_free_tx_chain&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; axienet_local &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lp, u32 first_bd,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nr_bds, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; force, u32 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sizep, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; budget) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; axidma_bd &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cur_p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;dma_addr_t&lt;/span&gt; phys;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nr_bds; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_v[(first_bd &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_num];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* If force is not specified, clean up only descriptors
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * that have been completed by the MAC.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;force &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(status &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; XAXIDMA_BD_STS_COMPLETE_MASK))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Ensure we see complete descriptor update */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_rmb&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    phys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;desc_get_phys_addr&lt;/span&gt;(lp, cur_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_unmap_single&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, phys,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cntrl &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; XAXIDMA_BD_CTRL_LENGTH_MASK),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         DMA_TO_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skb &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (status &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; XAXIDMA_BD_STS_COMPLETE_MASK))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;napi_consume_skb&lt;/span&gt;(cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skb, budget);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;app0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;app1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;app2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;app4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* ensure our transmit path and device don&amp;#39;t prematurely see status cleared */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;wmb&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cntrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从代码来看，其实也很简单：AXI DMA 传输完成后，会设置 status 的内容，标记已经传输完成。这时候只要从最后一次完成传输的 Descriptor 开始扫描，把所有完成传输的 Descriptor 回收即可。&lt;/p&gt;
&lt;h3 id=&#34;接收队列&#34;&gt;接收队列&lt;/h3&gt;
&lt;p&gt;接收队列结构与发送队列相似，但不同的是，生产者和消费者的角色对调，驱动为了保证随时可以接收数据，需要预先准备好 Descriptor，当 AXI DMA 从以太网 MAC 收到数据的时候，随时有 Descriptor 可以使用，写入数据后，再通知 CPU。和发送队列一样，接收队列由一个头指针（S2MM_CURDESC）和一个尾指针定义（S2MM_TAILDESC），指针指向的 Descriptor 结构与发送队列一致。硬件的接收逻辑和发送逻辑类似，只不过方向相反。&lt;/p&gt;
&lt;h4 id=&#34;u-boot-1&#34;&gt;U-Boot&lt;/h4&gt;
&lt;p&gt;首先还是来看 U-Boot 的实现。前面提到，为了简化，U-Boot 的网卡驱动每次同时只会发送一个帧，接收的时候其实也一样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(some net &lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt; (ping &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; tftp &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; whatever...))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eth_init&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ops&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eth_send&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ops&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eth_rx&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ops&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;recv&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (process packet)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ops&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;free_pkt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ops&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;free_pkt&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eth_halt&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ops&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stop&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先看 AXI EMAC 驱动如何初始化接收队列：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; u8 rxframe[PKTSIZE_ALIGN] &lt;span style=&#34;color:#a6e22e&#34;&gt;__attribute&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;aligned&lt;/span&gt;(DMAALIGN)));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axiemac_start&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; udevice &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dev) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Start DMA RX channel. Now it&amp;#39;s ready to receive data.*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_write&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmarx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;current);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Setup the BD. */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rx_bd));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.next_desc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lower_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.next_desc_msb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upper_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.buf_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lower_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rxframe);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.buf_addr_msb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upper_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rxframe);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.cntrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rxframe);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Flush the last BD so DMA core could see the updates */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;flush_cache&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;phys_addr_t&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rx_bd));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* It is necessary to flush rxframe because if you don&amp;#39;t do it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * then cache can contain uninitialized data */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;flush_cache&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;phys_addr_t&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rxframe, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rxframe));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Start the hardware */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readl&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmarx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;control);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  temp &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; XAXIDMA_CR_RUNSTOP_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;writel&lt;/span&gt;(temp, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmarx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;control);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Rx BD is ready - start */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_write&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmarx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tail);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到它只初始化了一个 Descriptor，并且把 CURDESC 和 TAILDESC 都指向它，并且提供了一个缓冲区 &lt;code&gt;rxframe&lt;/code&gt;。当 AXI DMA 接收到数据的时候，就会把数据写入 &lt;code&gt;rxframe&lt;/code&gt;，更新 &lt;code&gt;rx_bd&lt;/code&gt; 并发送中断。U-Boot 处理中断的方法也很简单：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axiemac_recv&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; udevice &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dev, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flags, uchar &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;packetp) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Disable IRQ for a moment till packet is handled */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readl&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmarx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;control);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  temp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;XAXIDMA_IRQ_ALL_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;writel&lt;/span&gt;(temp, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmarx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;control);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rx_bd.status &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; XAXIDMA_BD_STS_ACTUAL_LEN_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;packetp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rxframe;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; length;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它关闭了 AXI DMA 的中断，然后直接读取长度，把 &lt;code&gt;rxframe&lt;/code&gt; 作为数据指针传给网络栈处理的函数。网络栈处理完以后，就会调用 &lt;code&gt;free_pkt&lt;/code&gt; 进行收尾：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axiemac_free_pkt&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; udevice &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dev, uchar &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;packet, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef DEBUG
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* It is useful to clear buffer to be sure that it is consistent */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(rxframe, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rxframe));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Setup RxBD */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Clear the whole buffer and setup it again - all flags are cleared */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rx_bd));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.next_desc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lower_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.next_desc_msb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upper_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.buf_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lower_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rxframe);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.buf_addr_msb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upper_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rxframe);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.cntrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rxframe);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Write bd to HW */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;flush_cache&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;phys_addr_t&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rx_bd));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* It is necessary to flush rxframe because if you don&amp;#39;t do it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * then cache will contain previous packet */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;flush_cache&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;phys_addr_t&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rxframe, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rxframe));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Rx BD is ready - start again */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_write&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmarx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tail);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;收尾工作也很简单，把接收队列恢复到可以接收数据的状态即可，因为 &lt;code&gt;rxframe&lt;/code&gt; 是全局变量，也不需要进行 &lt;code&gt;free&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;linux-1&#34;&gt;Linux&lt;/h4&gt;
&lt;p&gt;Linux 的驱动实现里，接收队列和发送队列类似，也是用一个数组来实现循环链表，只不过接收队列还需要提前准备好缓冲区，供 AXI DMA 写入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_bd_init&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; net_device &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ndev) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_alloc_coherent&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_num,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_p, GFP_KERNEL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_num; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;dma_addr_t&lt;/span&gt; addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ((i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_num);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v[i].next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lower_32_bits&lt;/span&gt;(addr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v[i].next_msb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upper_32_bits&lt;/span&gt;(addr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;netdev_alloc_skb_ip_align&lt;/span&gt;(ndev, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_frm_size);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v[i].skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; skb;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_map_single&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, skb&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_frm_size, DMA_FROM_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;desc_set_phys_addr&lt;/span&gt;(lp, addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v[i].cntrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_frm_size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Populate the tail pointer and bring the Rx Axi DMA engine out of
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * halted state. This will make the Rx side ready for reception.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_out_addr&lt;/span&gt;(lp, XAXIDMA_RX_CDESC_OFFSET, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_dma_cr &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; XAXIDMA_CR_RUNSTOP_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_out32&lt;/span&gt;(lp, XAXIDMA_RX_CR_OFFSET, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_dma_cr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_out_addr&lt;/span&gt;(lp, XAXIDMA_RX_TDESC_OFFSET, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_num &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，数组的每一项的指针指向下一项，然后把头地址写入 CURDESC，尾地址写入 TAILDESC，这样硬件就可以开始接收数据。AXI DMA 收到数据以后，会把数据写入 Descriptor 指向的缓冲区地址，然后发送中断，Linux 执行下列代码处理中断：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_rx_poll&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; napi_struct &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;napi, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; budget) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cur_p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v[lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_ci];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (packets &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; budget &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;status &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; XAXIDMA_BD_STS_COMPLETE_MASK)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;dma_addr_t&lt;/span&gt; phys;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Ensure we see complete descriptor update */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_rmb&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skb;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* skb could be NULL if a previous pass already received the
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * packet for this slot in the ring, but failed to refill it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * with a newly allocated buffer. In this case, don&amp;#39;t try to
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * receive it again.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;likely&lt;/span&gt;(skb)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;app4 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000FFFF&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      phys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;desc_get_phys_addr&lt;/span&gt;(lp, cur_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_unmap_single&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, phys, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_frm_size,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           DMA_FROM_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_put&lt;/span&gt;(skb, length);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      skb&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;protocol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eth_type_trans&lt;/span&gt;(skb, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ndev);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;napi_gro_receive&lt;/span&gt;(napi, skb);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      size &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; length;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      packets&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;napi_alloc_skb&lt;/span&gt;(napi, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_frm_size);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    phys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_map_single&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, new_skb&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_frm_size,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              DMA_FROM_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;desc_set_phys_addr&lt;/span&gt;(lp, phys, cur_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cntrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_frm_size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_skb;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Only update tail_p to mark this slot as usable after it has
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * been successfully refilled.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tail_p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_ci;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_ci &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_num)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_ci &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v[lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_ci];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tail_p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_out_addr&lt;/span&gt;(lp, XAXIDMA_RX_TDESC_OFFSET, tail_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，接收逻辑顺序扫描了 Descriptor，找到那些传输完成的，把其中的数据交给网络栈处理，然后分配一个新的 skb，绑定到 Descriptor 上，把它恢复到可以接收数据的状态，最后更新 TAILDESC。&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;AXI DMA 提供了一个 Descriptor 链来异步地传输数据，U-Boot 为了简化，把链表退化成只有一个节点，串行地收和发；Linux 使用数组实现了一个循环的链表，通过 TAILDESC 提供新的 Descriptor，然后从 CURDESC 回收 Descriptor。Descriptor 不断在硬件和软件之间交替，CURDESC 到 TAILDESC 的部分归硬件，其余的归软件。这种设计模式在其他很多地方也可以看到。&lt;/p&gt;
&lt;h2 id=&#34;intel-82599&#34;&gt;Intel 82599&lt;/h2&gt;
&lt;p&gt;Intel 82599 是一个有线网卡，Linux 的驱动是 ixgbe。Intel 82599 为收和发都提供了多个队列，每个队列都对应了一个 Descriptor 数组，在内存中连续存放。Linux 驱动使用了 64 个接收队列和发送队列。&lt;/p&gt;
&lt;p&gt;文档链接：&lt;a href=&#34;https://cdrdv2-public.intel.com/331520/82599-datasheet-v3-4.pdf&#34;&gt;https://cdrdv2-public.intel.com/331520/82599-datasheet-v3-4.pdf&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;接收队列-1&#34;&gt;接收队列&lt;/h3&gt;
&lt;p&gt;和 AXI DMA 的链表形式不同。每个接收队列都由如下的寄存器定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDBAL/RDBAH[n]: Receive Descriptor Base Address Low/High&lt;/li&gt;
&lt;li&gt;RDLEN[n]: Receive Descriptor Length&lt;/li&gt;
&lt;li&gt;RDH[n]: Receive Descriptor Head&lt;/li&gt;
&lt;li&gt;RDT[n]: Receive Descriptor Tail&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由基地址 + 长度定义了一个循环队列，然后从 Head 到 Tail 的部分是当前有效的队列，软件从 Tail 插入新的 Descriptor，硬件从 Head 取 Descriptor。当 Head 等于 Tail 的时候，队列是空的，也就是说 Tail 表示的是合法的下一个，这样队列满的时候 Tail + 1 == Head。&lt;/p&gt;
&lt;p&gt;ixgbe 的实现代码在 &lt;code&gt;ixgbe_main.c&lt;/code&gt; 中，首先看如何初始化接收队列：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ixgbe_configure_rx&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; ixgbe_adapter &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;adapter) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * Setup the HW Rx Head and Tail Descriptor Pointers and
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * the Base and Length of the Rx Descriptor Ring
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; adapter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;num_rx_queues; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ixgbe_configure_rx_ring&lt;/span&gt;(adapter, adapter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_ring[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ixgbe_configure_rx_ring&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; ixgbe_adapter &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;adapter,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; ixgbe_ring &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ring) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  u64 rdba &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dma;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_WRITE_REG&lt;/span&gt;(hw, &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_RDBAL&lt;/span&gt;(reg_idx), (rdba &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DMA_BIT_MASK&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_WRITE_REG&lt;/span&gt;(hw, &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_RDBAH&lt;/span&gt;(reg_idx), (rdba &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_WRITE_REG&lt;/span&gt;(hw, &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_RDLEN&lt;/span&gt;(reg_idx),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;count &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;union&lt;/span&gt; ixgbe_adv_rx_desc));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_WRITE_REG&lt;/span&gt;(hw, &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_RDH&lt;/span&gt;(reg_idx), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_WRITE_REG&lt;/span&gt;(hw, &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_RDT&lt;/span&gt;(reg_idx), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; adapter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;io_addr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_RDT&lt;/span&gt;(reg_idx);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* enable receive descriptor ring */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rxdctl &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; IXGBE_RXDCTL_ENABLE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_WRITE_REG&lt;/span&gt;(hw, &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_RXDCTL&lt;/span&gt;(reg_idx), rxdctl);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* in ixgbe_alloc_rx_buffers */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bufsz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ixgbe_rx_bufsz&lt;/span&gt;(rx_ring);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ixgbe_alloc_mapped_page&lt;/span&gt;(rx_ring, bi))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* sync the buffer for use by the device */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_sync_single_range_for_device&lt;/span&gt;(rx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, bi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dma,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             bi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;page_offset, bufsz,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             DMA_FROM_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Refresh the desc even if buffer_addrs didn&amp;#39;t change
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * because each write-back erases this info.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rx_desc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;read.pkt_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cpu_to_le64&lt;/span&gt;(bi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dma &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; bi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;page_offset);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rx_desc&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* clear the length for the next_to_use descriptor */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rx_desc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;wb.upper.length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cleaned_count&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cleaned_count);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;writel&lt;/span&gt;(i, rx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tail);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;具体到实现上，可以看到和 AXI DMA 驱动基本是一样的：分配 Descriptor 数组空间，然后给每个 Descriptor 分配一个 Buffer，然后更新 tail 指针，让硬件可以开始进行接收。&lt;/p&gt;
&lt;h3 id=&#34;发送队列-1&#34;&gt;发送队列&lt;/h3&gt;
&lt;p&gt;发送队列和接收队列类似，也是先分配好 Descriptor 数组，只不过先不填内容，等到要发送数据的时候，再从 tail 取出一个 Descriptor，写入 buffer 地址，然后更新 tail 指针让硬件发送。代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;netdev_tx_t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ixgbe_xmit_frame_ring&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sk_buff &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;skb,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; ixgbe_adapter &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;adapter,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; ixgbe_ring &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tx_ring) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* record the location of the first descriptor for this packet */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  first &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_buffer_info[tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next_to_use];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  first&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; skb;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  first&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bytecount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; skb&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;len;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* in ixgbe_tx_map */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  dma &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_map_single&lt;/span&gt;(tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, skb&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data, size, DMA_TO_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (frag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;skb_shinfo&lt;/span&gt;(skb)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;frags[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];; frag&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;dma_mapping_error&lt;/span&gt;(tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, dma))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; dma_error;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* record length, and DMA address */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_unmap_len_set&lt;/span&gt;(tx_buffer, len, size);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_unmap_addr_set&lt;/span&gt;(tx_buffer, dma, dma);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tx_desc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;read.buffer_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cpu_to_le64&lt;/span&gt;(dma);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;unlikely&lt;/span&gt;(size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; IXGBE_MAX_DATA_PER_TXD)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tx_desc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;read.cmd_type_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;cpu_to_le32&lt;/span&gt;(cmd_type &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; IXGBE_MAX_DATA_PER_TXD);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tx_desc&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;count) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tx_desc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_TX_DESC&lt;/span&gt;(tx_ring, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tx_desc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;read.olinfo_status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      dma &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; IXGBE_MAX_DATA_PER_TXD;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      size &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; IXGBE_MAX_DATA_PER_TXD;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tx_desc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;read.buffer_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cpu_to_le64&lt;/span&gt;(dma);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tx_desc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;read.cmd_type_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cpu_to_le32&lt;/span&gt;(cmd_type &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; size);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tx_desc&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;count) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tx_desc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_TX_DESC&lt;/span&gt;(tx_ring, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tx_desc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;read.olinfo_status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_frag_size&lt;/span&gt;(frag);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data_len &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dma &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_frag_dma_map&lt;/span&gt;(tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, frag, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, size,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               DMA_TO_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tx_buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_buffer_info[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;count)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next_to_use &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;ixgbe_maybe_stop_tx&lt;/span&gt;(tx_ring, DESC_NEEDED);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;netif_xmit_stopped&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txring_txq&lt;/span&gt;(tx_ring)) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;netdev_xmit_more&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;writel&lt;/span&gt;(i, tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tail);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这一段代码的思路是，对于 skb 的每个 frag，尝试填入 Descriptor，如果发现填不下，就填多个，直到填完位置，最后更新 tail 指针，让硬件开始发送。&lt;/p&gt;
&lt;h3 id=&#34;小结-1&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;在了解 AXI DMA 的工作原理的基础上，Intel 82599 的队列其实也不复杂，只不过直接采取了以 Descriptor 数组作为循环队列的方式，并且这里归属于硬件的 Descriptor 空间其实是 [Head, Tail) 左闭右开区间的形式（AXI DMA 是链表的头和尾，都属于硬件），这样就可以用 Head == Tail 来表示空队列，当然了，队列也永远会差一项才能满（除非额外记录队列中合法元素个数）。最后贴一张 Intel 82599 Datasheet 中的图片来帮助理解：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/82599_queue.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;connectx-4&#34;&gt;ConnectX-4&lt;/h2&gt;
&lt;p&gt;接下来看看 ConnectX-4 是如何设计它的各个队列的。首先，它有 Work Queue，用于发送数据（Send Queue）和准备接收数据的缓冲区（Receive Queue），然后硬件处理 Work Queue 中的 Entry 后，就会把结果写入到 Completion Queue，并且通过 Event Queue 通知 CPU。&lt;/p&gt;
&lt;p&gt;文档：&lt;a href=&#34;https://network.nvidia.com/files/doc-2020/ethernet-adapters-programming-manual.pdf&#34;&gt;https://network.nvidia.com/files/doc-2020/ethernet-adapters-programming-manual.pdf&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;work-queue&#34;&gt;Work Queue&lt;/h3&gt;
&lt;p&gt;Work Queue 和前面 Intel 82599 的设计很像，也是一个 Descriptor 的数组的形式，只不过 Work Queue Entry 是不定长的，支持不同的 Entry Format，例如 Send WQE、Receive WQE 和 Shared Receive WQE。&lt;/p&gt;
&lt;p&gt;驱动初始化的时候，创建好 Work Queue：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mlx5e_open_queues&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; mlx5e_channel &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; mlx5e_params &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;params,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; mlx5e_channel_param &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cparam) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  err &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mlx5e_open_sqs&lt;/span&gt;(c, params, cparam);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  err &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mlx5e_open_rxq_rq&lt;/span&gt;(c, params, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cparam&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rq);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后，和 Intel 82599 类似，发送的时候就向 Send Queue 插入 Entry，然后更新 Doorbell 让硬件开始发送；为了接收，先分配好缓冲区，初始化 Receive Queue，更新 Doorbell 让硬件开始接收数据。&lt;/p&gt;
&lt;h3 id=&#34;completion-queue&#34;&gt;Completion Queue&lt;/h3&gt;
&lt;p&gt;和 Intel 82599 不同的是，这里表示项目完成是通过 Completion Queue 完成的，也就是说，硬件会向 Completion Queue 插入一项，来表示对应的 Work Queue Entry 完成情况。这样的设计下，Work Queue 完全由软件写入，Completion Queue 完全由硬件写入，不像前面 AXI DMA 和 Intel 82599 那样硬件会更新 Descriptor 里面的状态位。Completion Queue 也有两个 Counter，相当于队列的头和尾指针：Producer Counter 记录了硬件写入的 Completion Queue Entry（CQE）数量，Consumer Counter 记录了软件已经处理了的 CQE 数量。在这里有一个比较有意思的设计：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ownership &lt;span style=&#34;color:#a6e22e&#34;&gt;cqe_ownership&lt;/span&gt;(cqe) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cqe.owner &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ((consumer_counter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; log2_cq_size) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; SW ownership
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; HW ownership
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它根据 consumer_counter 的当前值的高位（mask 掉 CQ 大小对应的 bits）与 CQE 的 owner 字段进行比对，如果相等，就认为是属于软件；否则则是属于硬件。软件在轮询的时候，只有遇到 SW ownership 的 CQE 才会处理，否则就忽略。乍一看，这个设计挺奇怪的，因为溢出的问题，&lt;code&gt;((consumer_counter &amp;gt;&amp;gt; log2_cq_size) &amp;amp; 1)&lt;/code&gt; 每次溢出就会取反，所以相应的 ownership 的对应关系也会取反。回想一下，之前 AXI DMA 的做法，接收的时候，软件设置一个状态位，硬件完成接收以后，也设置一个状态位，软件完成处理以后，再恢复状态位为可以接收的状态，这样来回操作比较麻烦。在 ConnectX-4 的这种设计下，硬件只需要在填 CQE 的时候，toggle 一下 owner 位即可，软件不需要修改内容，只需要修改 consumer_counter。&lt;/p&gt;
&lt;p&gt;这样看可能比较迷糊，来拆解一下整个过程。首先是 AXI DMA 的接收队列的 Descriptor 的处理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;软件设置 status = 0 表示这个 Descriptor 可以接收&lt;/li&gt;
&lt;li&gt;硬件设置 status |= COMPLETED&lt;/li&gt;
&lt;li&gt;软件读取 status 发现 COMPLETED，处理数据，然后重新设置 status = 0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，Descriptor 的内容是软件和硬件来回修改。ConnectX-4 的设计下，软件不需要对 CQE 做任何修改：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始情况下，owner = 1 和 consumer_counter = 0，对应 HW owner，所以软件不会认为是合法的 CQE&lt;/li&gt;
&lt;li&gt;硬件开始向 CQ 插入 CQE，此时 owner ^=1 变为 0，对应 SW owner，所以软件可以开始读取并处理 CQE&lt;/li&gt;
&lt;li&gt;硬件不断插入，出现了第一次溢出，软件跟着处理，也第一次溢出了，此时 &lt;code&gt;((consumer_counter &amp;gt;&amp;gt; log2_cq_size) &amp;amp; 1) = 1&lt;/code&gt;，此时 1 对应 SW owner，0 对应 HW owner。当硬件插入 CQE 以后，owner 才从 0（HW owner）又变回 1（SW owner），软件就知道，可以继续读取并处理 CQE&lt;/li&gt;
&lt;li&gt;这个过程继续下去，owner 的含义不断翻转&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，整个过程软件不需要写入 CQE 的内容，只需要不断轮询并更新 consumer_counter。硬件实现也很简单，不断地对 owner 进行异或，就实现了通知软件的功能。这就类似于，每当 counter 溢出的时候，就自动“清空”所有 CQE 的“valid”位，然后硬件再设置“valid = 1”。硬件只需要保证 producer_counter 不会追上 consumer_counter 就可以了，硬件也不需要去读取 CQE 的内容来判断软件是否处理完成。这个方式还是比较有意思的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get_sw_cqe&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; mlx5_ib_cq &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cq, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cqe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_cqe&lt;/span&gt;(cq, n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; cq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ibcq.cqe);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; mlx5_cqe64 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cqe64;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cqe64 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (cq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;mcq.cqe_sz &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; cqe : cqe &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;likely&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;get_cqe_opcode&lt;/span&gt;(cqe64) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; MLX5_CQE_INVALID) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;((cqe64&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;op_own &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; MLX5_CQE_OWNER_MASK) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt;(n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (cq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ibcq.cqe &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cqe;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际上，写这篇博客就是因为有同学看到了 CQE 的 owner 的奇怪设定，我才来研究的这个问题。我就是为了这点醋，才包的这顿饺子，前面做了一大堆的引入。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt-时间&#34;&gt;ChatGPT 时间&lt;/h2&gt;
&lt;p&gt;问：What does network driver do to send/receive network packets to/from NIC?&lt;/p&gt;
&lt;p&gt;答：A network driver is a software component that allows the operating system to communicate with the network interface card (NIC) and send and receive network packets. The NIC is a hardware device that connects a computer to a network and enables it to communicate with other devices on that network.&lt;/p&gt;
&lt;p&gt;When the computer wants to send a network packet, the operating system hands the packet off to the network driver, which then converts it into a format that the NIC can understand. The network driver also sets the appropriate control bits and headers in the packet to ensure that it is correctly transmitted over the network.&lt;/p&gt;
&lt;p&gt;When a network packet is received by the NIC, the network driver intercepts it and passes it on to the operating system. The network driver then verifies the packet&amp;rsquo;s integrity, checks if it is destined for the local machine, and if so, hands it over to the appropriate application.&lt;/p&gt;
&lt;p&gt;In summary, the network driver acts as a bridge between the operating system and the NIC, enabling the computer to send and receive network packets over the network.&lt;/p&gt;
&lt;p&gt;问：Can you give me a detailed description? e.g. the ring buffer and notification mechanism&lt;/p&gt;
&lt;p&gt;答：Sure, I can provide a more detailed description of how network drivers use ring buffers and notification mechanisms to send and receive network packets.&lt;/p&gt;
&lt;p&gt;A ring buffer is a circular buffer that is used by the network driver to store incoming and outgoing network packets. The buffer is divided into multiple sections or &amp;ldquo;rings,&amp;rdquo; each of which can hold one or more packets. The ring buffer is used to manage the flow of data between the network driver and the NIC.&lt;/p&gt;
&lt;p&gt;When a packet is received by the NIC, it is stored in the receive ring buffer. The network driver then reads the packet from the ring buffer, processes it, and hands it over to the appropriate application.&lt;/p&gt;
&lt;p&gt;When the computer wants to send a packet, the network driver first checks if there is space available in the transmit ring buffer. If there is, it writes the packet to the next available slot in the buffer and sets the appropriate control bits and headers.&lt;/p&gt;
&lt;p&gt;The network driver then uses a notification mechanism to inform the NIC that there is data available in the transmit ring buffer. This notification mechanism can take different forms, depending on the specific hardware and driver implementation. For example, it might involve writing to a specific memory location or sending an interrupt signal to the NIC.&lt;/p&gt;
&lt;p&gt;注：没听说过给 NIC 发送中断。&lt;/p&gt;
&lt;p&gt;When the NIC receives the notification, it reads the packet from the transmit ring buffer and sends it over the network.&lt;/p&gt;
&lt;p&gt;The ring buffer and notification mechanisms are critical components of network drivers because they enable efficient communication between the operating system and the NIC. By using a circular buffer, the driver can handle multiple packets at once and avoid the need for expensive memory allocations or deallocations. The notification mechanism allows the driver to inform the NIC of data availability without constantly polling the buffer, which would waste CPU cycles and reduce system performance.&lt;/p&gt;
&lt;p&gt;注：这里说反了，应该是告诉网卡驱动有数据可用。&lt;/p&gt;
&lt;p&gt;问：Can you take Xilinx AXI DMA for example?&lt;/p&gt;
&lt;p&gt;答：Sure, let me provide an example of how the Xilinx AXI DMA uses a ring buffer and notification mechanism to send and receive network packets.&lt;/p&gt;
&lt;p&gt;The Xilinx AXI DMA is a DMA controller that is commonly used in embedded systems to handle data transfers between a host processor and peripherals, including network interfaces. The AXI DMA uses a scatter-gather DMA engine, which means it can transfer data between non-contiguous memory regions.&lt;/p&gt;
&lt;p&gt;In the context of network communication, the AXI DMA is typically used to transfer packets between the network interface card and the host memory. The AXI DMA driver sets up a ring buffer in host memory that is used to store incoming and outgoing packets.&lt;/p&gt;
&lt;p&gt;When a packet is received by the NIC, it is stored in a receive ring buffer that is allocated in the host memory. The AXI DMA driver sets up the receive ring buffer and configures the AXI DMA to use it as the destination for incoming packets.&lt;/p&gt;
&lt;p&gt;To enable the notification mechanism, the AXI DMA driver configures the AXI DMA to generate an interrupt when a packet is received and stored in the receive ring buffer. The interrupt is sent to the host processor, which then reads the packet from the receive ring buffer and processes it.&lt;/p&gt;
&lt;p&gt;When the host processor wants to send a packet, it writes the packet data to a transmit ring buffer that is also allocated in host memory. The AXI DMA driver sets up the transmit ring buffer and configures the AXI DMA to use it as the source for outgoing packets.&lt;/p&gt;
&lt;p&gt;To enable the notification mechanism for outgoing packets, the AXI DMA driver configures the AXI DMA to generate an interrupt when the transmit ring buffer is empty and ready to accept a new packet. This interrupt is sent to the host processor, which then writes the next packet to the transmit ring buffer.&lt;/p&gt;
&lt;p&gt;The AXI DMA driver manages the ring buffers and interrupt handling to ensure that incoming and outgoing packets are processed efficiently and without data loss.&lt;/p&gt;
&lt;p&gt;In summary, the Xilinx AXI DMA uses a ring buffer and notification mechanism to enable efficient transfer of network packets between the NIC and the host memory. The ring buffer is used to manage the flow of incoming and outgoing packets, while the notification mechanism enables the DMA engine to inform the host processor when new data is available or when the buffer is ready to accept new data.&lt;/p&gt;
&lt;p&gt;问：How about Intel 82599? What&amp;rsquo;s the difference between Intel 82599 and AXI DMA?&lt;/p&gt;
&lt;p&gt;答：The Intel 82599 is a high-performance Ethernet controller that is commonly used in data center and cloud computing environments. Like the AXI DMA, the Intel 82599 also uses a ring buffer and notification mechanism to send and receive network packets.&lt;/p&gt;
&lt;p&gt;However, there are some key differences between the Intel 82599 and the AXI DMA. The most significant difference is that the Intel 82599 is a hardware-based Ethernet controller, while the AXI DMA is a DMA controller that is typically used in embedded systems.&lt;/p&gt;
&lt;p&gt;As a hardware-based Ethernet controller, the Intel 82599 is optimized for high-speed data transfer and advanced networking features. It includes hardware offloading capabilities that can offload tasks such as TCP/IP checksum calculation, packet segmentation, and packet filtering from the host CPU. This offloading reduces the CPU load and improves overall system performance.&lt;/p&gt;
&lt;p&gt;The Intel 82599 uses multiple receive and transmit ring buffers to support parallel data processing and enable high-speed data transfer. The receive ring buffers are used to store incoming packets, while the transmit ring buffers are used to store outgoing packets.&lt;/p&gt;
&lt;p&gt;The notification mechanism used by the Intel 82599 is called Interrupt Moderation. This mechanism is used to reduce the number of interrupts generated by the Ethernet controller and improve system efficiency. Interrupt Moderation groups multiple network packets together and generates a single interrupt to notify the host CPU that the packets are ready to be processed.&lt;/p&gt;
&lt;p&gt;In summary, the Intel 82599 and the AXI DMA both use ring buffers and notification mechanisms to transfer network packets, but they differ in their design and application. The Intel 82599 is a high-performance Ethernet controller that is optimized for data center and cloud computing environments, while the AXI DMA is a DMA controller that is typically used in embedded systems. The Intel 82599 includes advanced networking features such as hardware offloading and Interrupt Moderation, which improve system performance and efficiency.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>802.11 学习</title>
      <link>https://jia.je/hardware/2023/03/20/wireless-network/</link>
      <pubDate>Mon, 20 Mar 2023 16:56:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/03/20/wireless-network/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/networking/wlan.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在学习 802.11，在博客上记录一下我的学习过程。&lt;/p&gt;
&lt;p&gt;本文参考了 &lt;a href=&#34;https://ieeexplore.ieee.org/document/654749&#34;&gt;802.11-1997&lt;/a&gt; 并使用了标准中的图片。&lt;/p&gt;
&lt;h2 id=&#34;mac-层帧格式&#34;&gt;MAC 层帧格式&lt;/h2&gt;
&lt;p&gt;802.11 MAC 层的帧格式，如 802.11-1997 Figure 12：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/80211_mac.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;前两个字节 Frame Control 的定义如 802.11-1997 Figure 13：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/80211_frame_control.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据 Type 和 Subtype 字段决定了帧的类型，如管理（Management）帧，控制（Control）帧和数据（Data）帧。&lt;/p&gt;
&lt;p&gt;无线路由器定期发送 Beacon frame，告诉客户端自己广播了哪些 SSID。客户端也可以主动发送 Probe Request frame 来询问有没有路由器有对应的 SSID，如果有，路由器回复一个 Probe Response frame。&lt;/p&gt;
&lt;h2 id=&#34;phy&#34;&gt;PHY&lt;/h2&gt;
&lt;p&gt;802.11 支持很多种 PHY，常见的有 802.11 b/g/n/ac/ax。起名也很有意思：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;802.11b: High Rate，最高 11 Mbps&lt;/li&gt;
&lt;li&gt;802.11g: Extended Rate，最高 54 Mbps&lt;/li&gt;
&lt;li&gt;802.11n: High Throughput，最高 600 Mbps&lt;/li&gt;
&lt;li&gt;802.11ac: Very High Throughput，最高 6933 Mbps&lt;/li&gt;
&lt;li&gt;802.11ax: High Efficiency，最高 9608 Mbps&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;80211b&#34;&gt;802.11b&lt;/h3&gt;
&lt;p&gt;首先看 &lt;a href=&#34;https://ieeexplore.ieee.org/document/972833&#34;&gt;802.11b&lt;/a&gt;，802.11b 是对 802.11 的补充，主要定义了第 18 章 &lt;code&gt;High Rate, direct sequence spread spectrum PHY specification&lt;/code&gt;，缩写 HR-DSSS。&lt;/p&gt;
&lt;p&gt;HR-DSSS 工作在 2.4 GHz 频段上，常用的是 13 个 channel，中心频率从 2412 MHz 到 2472 MHz 不等，呈等差数列，公差是 5 MHz。HR-DSSS 会占用 22MHz 的频谱，从中心频率减 11 MHz 到中心频率加 11 MHz，所以相邻 channel 会有干扰，见下图（取自 &lt;a href=&#34;https://en.wikipedia.org/wiki/IEEE_802.11&#34;&gt;Wikipedia&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/80211_channels.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这就是为什么通常会把 2.4GHz 无线路由器的 channel 固定为 1、6 或 11。&lt;/p&gt;
&lt;p&gt;那么，HR-DSSS 如何把数据调制为 2.4GHz 上的信号呢？HR-DSSS 支持不同的速率，例如 1、2、5.5 和 11 Mbps，这些二进制的数据需要按照一定的方法调制到 2.4 GHz 的载波上。&lt;/p&gt;
&lt;p&gt;首先是最简单的情况，例如在 channel 1 上传输 1 Mbps 的数据，802.11 采用的是 DSSS 的方法。简单来说，对于输入的每个位，扩展成 11 个 bit，这样就得到了一个 11 MHz 的基带信号，然后再把基带信号通过 DBPSK 调制到 2412 MHz 的载波信号上。&lt;/p&gt;
&lt;p&gt;这个扩展过程是这样的：如果数据位是 0，那就输出 10110111000（Barker 码）；如果数据位是 1，那就输出 01001000111。实际上就是把 1 位的信息重复了 11 次再发出去，看起来很浪费，但很好地解决了干扰的问题，即使传输中出现了错误，接受方也很容易从 11 位的数据中恢复出原来的数据。&lt;/p&gt;
&lt;p&gt;2 Mbps 的传输方式类似，只不过每个 symbol 传输两位的数据，所以采用 DQPSK 的调制方法，频率保持不变，实现了两倍的数据传输速率。&lt;/p&gt;
&lt;p&gt;5.5 Mbps 和 11 Mbps 则采用了其他方法。由于上面的 1 比 11 的转换比例太浪费了，所以为了提升速度，5.5 Mbps 和 11 Mbps 时采用的是 CCK 编码方式，具体来说，5.5 Mbps 的时候，输入的 4 个 bit 会映射为 8 个 chip，类似地 11 Mbps 的时候，输入的 8 个 bit 也映射到 8 个 chip。每个 chip 都是复数，采用 DQPSK 进行调制。&lt;/p&gt;
&lt;p&gt;可以看到，整个过程都是在冗余：速率低的时候，就冗余很多份；速率高的时候，冗余就比较少。实际上，5.5 Mbps 和 11 Mbps 还可以采用可选的 PBCC 进行编码，下面摘抄了 &lt;a href=&#34;https://rfmw.em.keysight.com/wireless/helpfiles/89600b/webhelp/subsystems/wlan-dsss/content/dsss_about_datamodfmt.htm&#34;&gt;About Data Modulation Format (802.11b/g DSSS/CCK/PBCC)&lt;/a&gt; 中 802.11b 不同速率和编码方式的表格：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data Modulation Formats&lt;/th&gt;
&lt;th&gt;Spread Sequence Code scheme&lt;/th&gt;
&lt;th&gt;Data Rate(Mbps)&lt;/th&gt;
&lt;th&gt;Symbol Rate(Msps)&lt;/th&gt;
&lt;th&gt;Chip Rate (Mcps)&lt;/th&gt;
&lt;th&gt;Bits per Symbol&lt;/th&gt;
&lt;th&gt;Modulation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Barker 1&lt;/td&gt;
&lt;td&gt;11 Chip Barker&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;DBPSK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Barker 2&lt;/td&gt;
&lt;td&gt;11 Chip Barker&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;DQPSK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CCK 5.5&lt;/td&gt;
&lt;td&gt;8 chip CCK&lt;/td&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;1.375&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;DQPSK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CCK 11&lt;/td&gt;
&lt;td&gt;8 chip CCK&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;1.375&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;DQPSK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PBCC 5.5&lt;/td&gt;
&lt;td&gt;PBCC&lt;/td&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;QPSK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PBCC 11&lt;/td&gt;
&lt;td&gt;PBCC&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;QPSK&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;80211g&#34;&gt;802.11g&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/document/1210624&#34;&gt;802.11g&lt;/a&gt; 定义了第 19 章 &lt;code&gt;Extended Rate PHY specification&lt;/code&gt;，也就是 ERP(Extended Rate PHY)，其主要采用的技术是 OFDM，连起来就是 ERP-OFDM，额外支持更多速率：6、9、12、18、24、36、48 和 54 Mbps。各种调制技术的速率对比：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DSSS: 802.11 1/2 Mbps&lt;/li&gt;
&lt;li&gt;CCK: 802.11b 5.5/11 Mbps&lt;/li&gt;
&lt;li&gt;OFDM: 802.11g 6/9/12/18/24/36/48/54 Mbps&lt;/li&gt;
&lt;li&gt;PBCC: 802.11b 5.5/11 Mbps, 802.11g 22/33 Mbps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OFDM 的核心思想就是采用多个载波信号，这些载波信号的频率呈等差数列，同时保证各载波相互正交，这样就提高了数据传输速率。为了保证正交，相邻载波信号的频率的差要满足 \( \Delta{f} = k / T_U \)，其中 k 是正整数，\( T_U \) 是每个 symbol 的时间（引用 &lt;a href=&#34;https://zh.wikipedia.org/zh-cn/%E6%AD%A3%E4%BA%A4%E9%A0%BB%E5%88%86%E5%A4%8D%E7%94%A8#%E6%AD%A3%E4%BA%A4&#34;&gt;wikipedia&lt;/a&gt;）。下面是 802.11 标准中的 OFDM PHY 的组成：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ofdm_circuit.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中的缩写：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FEC: Forward Error Correction&lt;/li&gt;
&lt;li&gt;IFFT/FFT: Inverse Fast Fourier Transform/Fast Fourier Transform&lt;/li&gt;
&lt;li&gt;GI: Guard Interval&lt;/li&gt;
&lt;li&gt;I/Q: In-phase/Quadrature&lt;/li&gt;
&lt;li&gt;HPA: High Power Amplifier&lt;/li&gt;
&lt;li&gt;LNA: Low Noise Amplifier&lt;/li&gt;
&lt;li&gt;AGC: Automatic Gain Control&lt;/li&gt;
&lt;li&gt;AFC: Automatic Frequency Control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;802.11g 的信号带宽是 20MHz，分成 52 个子载波，子载波的间距是 0.3125 MHz（20 MHz / 64，\( T_{FFT}=3.2 \mu s, \Delta{f} = 1 / T_{FFT} \)），所以实际上只占了 \( 0.3125 \textit{MHz} * 52 = 16.25 \textit{MHz} \) 的频谱。其中 48 个用于传输数据，每个载波上可以采用不同的调制方法。54 Mbps 是怎么算的呢？802.11g 的 Symbol rate 是 250000 每秒（因为 \( T_{SYM} = 3.2 + 0.8 = 4 \mu s\)），如果使用 64-QAM 调制，那么每个 symbol 对应 6 个 bit，然后使用纠错码，纠错的时候浪费了 1/4 的位，实际数据占 3/4，一共 48 个载波，那么数据速率就是 \( 48 * 250000 * 6 * 3/4 = 54 \textit{Mbps} \)。&lt;/p&gt;
&lt;h3 id=&#34;80211n&#34;&gt;802.11n&lt;/h3&gt;
&lt;p&gt;802.11n 在 802.11g 的基础上添加了 MIMO，也就是可以用多个天线同时传输。&lt;/p&gt;
&lt;p&gt;首先还是考虑单天线的情况，基本和 802.11g 相同，区别是采用了 52（\(N_{SD}\)）个 OFDM 子载波用于传输数据，同时纠错码带来的浪费比例从 1/4 降到了 1/6，所以数据速率是 \( 52 * 250000 * 6 * 5/6 = 65 \textit{Mbps} \)。802.11n 还提供了 Short GI（Guard Interval）选项，把 GI 从 800 ns 降低到 400ns，使得每个 symbol 的时间可以从 \(3.2 + 0.8 = 4 \mu s \) 降低到 \( 3.2 + 0.4 = 3.6 \mu s \)，此时的数据速率达到 \( 52 * 1000000 / 3.6 * 6 * 5/6 = 72.2 \textit{Mbps} \)。&lt;/p&gt;
&lt;p&gt;除此之外，802.11n 还引入了 40 MHz 频宽的选项，以占用更多频谱为代价，换来可以用 108 个子载波来传输数据，此时数据速率可以达到 \( 108 * 1000000 / 3.6 * 6 * 5 / 6 = 150 \textit{Mbps} \)。&lt;/p&gt;
&lt;p&gt;考虑多天线，如果同时两根天线传输数据，那么数据速率就是两倍，达到 \( 300 \textit{Mbps} \)；最高可以同时四根天线传输数据，所以数据速率最高理论值是 \( 600 \textit{Mbps} \)。&lt;/p&gt;
&lt;h3 id=&#34;80211ac&#34;&gt;802.11ac&lt;/h3&gt;
&lt;p&gt;802.11ac 添加了 160 MHz 频宽的选项，可以提供 468 个子载波，调制方式从 64-QAM 提升到 256-QAM，同时最大可以有 8 根天线同时传输数据，最大数据速率是 \( 468 * 1000000 / 3.6 * 8 * 5 / 6 * 8 = 6933.3 \textit{Mbps} \)。&lt;/p&gt;
&lt;p&gt;由此可见，提高无线网络的速率的方法就是提高上式的各个系数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子载波数量：增加频宽，或者在频宽一定的时候，留出更多的子载波用于数据，提升较大，但频率不能太宽&lt;/li&gt;
&lt;li&gt;Symbol 时间：减少 Guard Interval，提升不大&lt;/li&gt;
&lt;li&gt;QAM 位数：从 PSK 到 4-QAM 到 64-QAM 到 256-QAM，提升难度较大&lt;/li&gt;
&lt;li&gt;纠错码开销：不会超过 1，难以提升&lt;/li&gt;
&lt;li&gt;更多天线：从 1 到 4 到 8，未来到 16，逐步提升&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以要进一步提升性能，主要从子载波数量、QAM 位数和 MIMO 数量上做文章。&lt;/p&gt;
&lt;h3 id=&#34;80211ax&#34;&gt;802.11ax&lt;/h3&gt;
&lt;p&gt;802.11ax 可以提供 1960 个子载波（间距从 312.5 kHz 缩小到 78.125 kHz，\( \Delta{f} = 78.125 kHz, T_{FFT} = 1 / \Delta{f} = 12.8 \mu s \)），调制方式从 256-QAM 提升到 1024-QAM，但是 \( T_{SYM} \) 也提高到了 \( 12.8 + 0.8 = 13.6 \mu s \)，最大数据速率是 \( 1960 * 1000000 / 13.6 * 10 * 5 / 6 * 8 = 9607.8 \textit{Mbps} \)。&lt;/p&gt;
&lt;h3 id=&#34;ofdm-对比&#34;&gt;OFDM 对比&lt;/h3&gt;
&lt;p&gt;下面总结了使用 OFDM 的 PHY 的各项参数，其中 Data rate 的计算公式：&lt;code&gt;Subcarrier * 1000000 / T_{SYM} * Coding Rate * MIMO streams&lt;/code&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Standard&lt;/th&gt;
&lt;th&gt;Subcarrier&lt;/th&gt;
&lt;th&gt;T_{SYM}&lt;/th&gt;
&lt;th&gt;QAM bits&lt;/th&gt;
&lt;th&gt;Coding Rate&lt;/th&gt;
&lt;th&gt;MIMO streams&lt;/th&gt;
&lt;th&gt;Data rate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;802.11g&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;4 us&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3/4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;54 Mbps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;802.11n&lt;/td&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;td&gt;3.6 us&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5/6&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;600 Mbps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;802.11ac&lt;/td&gt;
&lt;td&gt;468&lt;/td&gt;
&lt;td&gt;3.6 us&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5/6&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6933.3 Mbps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;802.11ax&lt;/td&gt;
&lt;td&gt;1960&lt;/td&gt;
&lt;td&gt;13.6 us&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;5/6&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;9607.8 Mbps&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>数字调制</title>
      <link>https://jia.je/hardware/2023/03/19/digital-modulation/</link>
      <pubDate>Sun, 19 Mar 2023 12:26:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/03/19/digital-modulation/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在学习 802.11，需要学习很多数字调制相关的知识，因此自学了一下通信原理。&lt;/p&gt;
&lt;h2 id=&#34;ask&#34;&gt;ASK&lt;/h2&gt;
&lt;p&gt;Amplitude-Shift Keying 调整载波信号的幅度&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ask.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;fsk&#34;&gt;FSK&lt;/h2&gt;
&lt;p&gt;Frequency-Shift Keying 调整载波信号的频率&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/bfsk.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;psk&#34;&gt;PSK&lt;/h2&gt;
&lt;p&gt;Phase-Shift Keying 调整载波信号的相位&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/bpsk.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;DPSK(Differential Phase-Shift Keying) 是在 PSK 的基础上，把相位的绝对值变成相位的差。例如 BPSK 传输 0 对应 0 度相位，传输 1 对应 180 度相位，那么 DBPSK 传输 0 时保持相位和上一个 symbol 一样，传输 1 时相位相对上一个 symbol 增加 180 度。&lt;/p&gt;
&lt;h2 id=&#34;qam&#34;&gt;QAM&lt;/h2&gt;
&lt;p&gt;Quadrature Amplitude Modulation 两个正交载波信号之和，调整两个信号的相位和幅度&lt;/p&gt;
&lt;h3 id=&#34;4-qam&#34;&gt;4-QAM&lt;/h3&gt;
&lt;p&gt;4-QAM 也等价于 4-PSK（Phase-Shift Keying），相当于调整一个载波信号的相位。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/4qam.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;16-qam&#34;&gt;16-QAM&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/16qam.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 Linux 上使用 Netgear A6210 USB 无线网卡</title>
      <link>https://jia.je/hardware/2023/02/26/netgear-a6210-linux-wifi-dongle/</link>
      <pubDate>Sun, 26 Feb 2023 14:48:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/02/26/netgear-a6210-linux-wifi-dongle/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近要让一台 Linux 机器连接无线网，所以要买一个对 Linux 支持比较好的 USB 无线网卡。以前曾经用过一些 USB 无线网卡，但对 Linux 的支持大多不好，要么是需要 out of tree module，要么就忽然不能工作。因此前期的调研十分重要。&lt;/p&gt;
&lt;h2 id=&#34;挑选-usb-无线网卡&#34;&gt;挑选 USB 无线网卡&lt;/h2&gt;
&lt;p&gt;在调研的时候，发现了 &lt;a href=&#34;https://github.com/morrownr/USB-WiFi&#34;&gt;morrownr/USB-WiFi&lt;/a&gt; 仓库，里面总结了一些 Linux 支持比较好的 USB 无线网卡，由于是外国人写的，所以里面很多型号在国内都买不到，但实际上 USB 无线网卡的芯片组一般就是那些，所以需要先确定芯片组，再根据芯片组找对应的 USB 无线网卡。&lt;/p&gt;
&lt;p&gt;开发用于 USB 无线网卡的厂商常见的是：Mediatek（2011 年 MediaTek 收购了 Ralink）和 Realtek。国内直接买到的 USB 无线网卡大部分是 Realtek，但是 Realtek 的 Linux 驱动很长一段时间都是 out of tree 的状态，只有比较新的一些芯片组有内核支持，而 Mediatek 系列的芯片内核支持较好，缺点是比较贵。下面从上面的仓库里摘录了一些芯片组的 Linux 内核支持情况：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chipset&lt;/th&gt;
&lt;th&gt;Linux&lt;/th&gt;
&lt;th&gt;Commit&lt;/th&gt;
&lt;th&gt;802.11&lt;/th&gt;
&lt;th&gt;USB&lt;/th&gt;
&lt;th&gt;Bluetooth&lt;/th&gt;
&lt;th&gt;Package&lt;/th&gt;
&lt;th&gt;Links&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MT7601u&lt;/td&gt;
&lt;td&gt;4.2+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/c869f77d6abb5d5f9f2f1a661d5c53862a9cad34&#34;&gt;mt7601u&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.mediatek.cn/products/broadband-wifi/mt7601u&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT7610u&lt;/td&gt;
&lt;td&gt;4.19+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/ff69c75ee5392320ab3a8dd01db46d3cd097eb46&#34;&gt;mt76x0u&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.mediatek.cn/products/broadband-wifi/mt7610u&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT7612u&lt;/td&gt;
&lt;td&gt;4.19+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/ee676cd5017c5f71b8aac1f2d1016ba0f6e4f348&#34;&gt;mt76x2u&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.mediatek.cn/products/broadband-wifi/mt7612u&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT7662u&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.mediatek.cn/products/broadband-wifi/mt7662u&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT7921au&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT7922u&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8188eus&lt;/td&gt;
&lt;td&gt;3.12+&lt;/td&gt;
&lt;td&gt;rtl8188eu/r8188eu/&lt;a href=&#34;https://github.com/torvalds/linux/commit/3dfb8e844fa30cceb4b810613e2c35f628eb3e70&#34;&gt;rtl8xxxu&lt;/a&gt; &lt;a href=&#34;https://cateee.net/lkddb/web-lkddb/R8188EU.html&#34;&gt;LKDDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;QFN-46&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8188eus&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8188gu&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/McMCCRU/rtl8188gu&#34;&gt;3rd party&lt;/a&gt; &lt;a href=&#34;https://patchwork.kernel.org/project/linux-wireless/patch/5a9a264d-a59b-0d91-04f0-e5b38e6aaea0@gmail.com/&#34;&gt;patch&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8723bu&lt;/td&gt;
&lt;td&gt;4.6+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/35a741febfae3cfc2a27d3b4935e255585ecfd81&#34;&gt;rtl8xxxu&lt;/a&gt; &lt;a href=&#34;https://cateee.net/lkddb/web-lkddb/RTL8XXXU.html&#34;&gt;LKDDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;QFN-56&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://linux-hardware.org/?id=usb:0bda-b720&#34;&gt;USB 0bda:b720&lt;/a&gt;，&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8723bu&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8723du&lt;/td&gt;
&lt;td&gt;6.2+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/87caeef032fc3921bc866ad7becb6ed51aa8b27b&#34;&gt;rtw88&lt;/a&gt; &lt;a href=&#34;https://cateee.net/lkddb/web-lkddb/RTW88_8723DU.html&#34;&gt;LKDDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4.2&lt;/td&gt;
&lt;td&gt;QFN-48&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8723du&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8811au&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://docs.alfa.com.tw/Support/Linux/RTL8811AU/&#34;&gt;3rd party&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;QFN-56&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8811au&#34;&gt;Official&lt;/a&gt; &lt;a href=&#34;https://datasheet.lcsc.com/lcsc/2205121200_Realtek-Semicon-RTL8811AU-CG_C3013607.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8821au&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;QFN-56&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8821au&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8811cu&lt;/td&gt;
&lt;td&gt;6.2+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/aff5ffd718de23cb8603f2e229204670e2644334&#34;&gt;rtw88&lt;/a&gt; &lt;a href=&#34;https://cateee.net/lkddb/web-lkddb/RTW88_8821CU.html&#34;&gt;LKDDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;QFN-56&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8811cu&#34;&gt;Official&lt;/a&gt;，&lt;a href=&#34;https://datasheet.lcsc.com/lcsc/2302141730_Realtek-Semicon-RTL8811CU-CG_C2687136.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8821cu&lt;/td&gt;
&lt;td&gt;6.2+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/aff5ffd718de23cb8603f2e229204670e2644334&#34;&gt;rtw88&lt;/a&gt; &lt;a href=&#34;https://cateee.net/lkddb/web-lkddb/RTW88_8821CU.html&#34;&gt;LKDDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;4.2&lt;/td&gt;
&lt;td&gt;QFN-56&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8821cu&#34;&gt;Official&lt;/a&gt;，&lt;a href=&#34;https://datasheet.lcsc.com/lcsc/2202211630_Realtek-Semicon-RTL8821CU-CG_C2761145.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8812au&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://docs.alfa.com.tw/Support/Linux/RTL8812AU/&#34;&gt;3rd party&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;QFN-76&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8812au&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8812bu&lt;/td&gt;
&lt;td&gt;6.2+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/45794099f5e1d7abc5eb07e6eec7e1e5c6cb540d&#34;&gt;rtw88&lt;/a&gt; &lt;a href=&#34;https://cateee.net/lkddb/web-lkddb/RTW88_8822BU.html&#34;&gt;LKDDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;TFBGA&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8812bu&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8822bu&lt;/td&gt;
&lt;td&gt;6.2+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/45794099f5e1d7abc5eb07e6eec7e1e5c6cb540d&#34;&gt;rtw88&lt;/a&gt; &lt;a href=&#34;https://cateee.net/lkddb/web-lkddb/RTW88_8822BU.html&#34;&gt;LKDDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;4.1&lt;/td&gt;
&lt;td&gt;TFBGA&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8822bu&#34;&gt;Official&lt;/a&gt;，&lt;a href=&#34;https://datasheet.lcsc.com/lcsc/2204071230_Realtek-Semicon-RTL8822BU-CG_C2803244.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8822cu&lt;/td&gt;
&lt;td&gt;6.2+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/07cef03b8d44dee7488de3d1585387e603c78676&#34;&gt;rtw88&lt;/a&gt; &lt;a href=&#34;https://cateee.net/lkddb/web-lkddb/RTW88_8822CU.html&#34;&gt;LKDDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8814au&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://docs.alfa.com.tw/Support/Linux/RTL8814AU/&#34;&gt;3rd party&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;QFN-128&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8814au&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以观察到规律：Realtek 的产品型号中，881x 和 882x 有对应的关系，前者不带蓝牙，后者带。最后一位数字越大，则越新。&lt;/p&gt;
&lt;p&gt;在内核源码中可以找到一些使用这个芯片组的 USB 无线网卡型号，但需要注意的是，有时候同样的型号，有 v1v2v3 之分，可能用的是不同的芯片组，购买前需要问清楚。&lt;/p&gt;
&lt;p&gt;购买的时候，考虑芯片组的支持情况，Linux 内核版本等等因素，我最后购买了 Netgeat A6210 认证翻新版，使用芯片组 MT7612u，价格是 138 人民币。&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;p&gt;使用的 Linux 内核版本是 5.10，插上 USB 无线网卡即可使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ lsusb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Bus &lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt; Device 002: ID 0846:9053 NetGear, Inc. A6210
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在使用 iwd 的连接无线网的时候，还出现一个小插曲，就是 iwd 遇到很长的中文 SSID 时会崩溃，于是我进行了修复，并且发送给 iwd mailing list（&lt;a href=&#34;https://lore.kernel.org/iwd/20230226062526.3115588-1-c@jia.je/T/#u&#34;&gt;link&lt;/a&gt;），并等待修复。原理很简单，一是打印十六进制字符的时候没有考虑符号，二是缺少了缓冲区溢出的检查。&lt;/p&gt;
&lt;h2 id=&#34;realtek-上游-linux-内核驱动支持&#34;&gt;Realtek 上游 Linux 内核驱动支持&lt;/h2&gt;
&lt;p&gt;归功于 Sascha Hauer &lt;a href=&#34;mailto:s.hauer@pengutronix.de&#34;&gt;s.hauer@pengutronix.de&lt;/a&gt; 老哥，最近 Linux 上游增加了不少对 realtek 网卡的支持，因此只要系统足够新，realtek 的网卡也值得考虑，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RTL8723du: Linux 6.2+&lt;/li&gt;
&lt;li&gt;RTL8811cu: Linux 6.2+&lt;/li&gt;
&lt;li&gt;RTL8821cu: Linux 6.2+&lt;/li&gt;
&lt;li&gt;RTL8812bu: Linux 6.2+&lt;/li&gt;
&lt;li&gt;RTL8822bu: Linux 6.2+&lt;/li&gt;
&lt;li&gt;RTL8822cu: Linux 6.2+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RTL8188gu 也有正在 review 的 &lt;a href=&#34;https://patchwork.kernel.org/project/linux-wireless/patch/5a9a264d-a59b-0d91-04f0-e5b38e6aaea0@gmail.com/&#34;&gt;patch&lt;/a&gt;。经过我的测试也是工作的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Transport Layer Interface 考古</title>
      <link>https://jia.je/networking/2023/02/12/transport-layer-interface/</link>
      <pubDate>Sun, 12 Feb 2023 20:52:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2023/02/12/transport-layer-interface/</guid>
      <description>&lt;h2 id=&#34;transport-layer-interface&#34;&gt;Transport Layer Interface&lt;/h2&gt;
&lt;p&gt;现在网络编程主要采用的是 BSD Sockets API，但实际上当年还有另一套 API，就是 TLI（Transport Layer Interface），后来 BSD Sockets 胜出，进入了 POSIX 标准，TLI 后面也标准化为了 XTI，现在可以在部分 Unix 系统中找到。TLI/XTI 的使用方法和 Sockets API 有些类似，但是比较特别的一点在于，Sockets API 第一步是 &lt;code&gt;socket&lt;/code&gt; 调用，传的参数就决定了这是 TCP 还是 UDP 还是其他什么协议，而 TLI 是通过打开不同的设备文件来进行区分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t_open&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/dev/udp&amp;#34;&lt;/span&gt;, O_RDWR, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比如 TCP 就是 &lt;code&gt;/dev/tcp&lt;/code&gt;，UDP 就是 &lt;code&gt;/dev/udp&lt;/code&gt;，同理还有 &lt;code&gt;/dev/icmp&lt;/code&gt; 等等。这颇有 Unix 的哲学：everything is a file。而 BSD Sockets API 则是有对应的系统调用，libc 基本不需要做什么事情。&lt;/p&gt;
&lt;p&gt;沿着这个思路，既然 TLI 第一步是打开一个文件，难道后面的一系列的 bind、connect、send、recv 等操作也是对文件读写吗？是的！如果我们查看 illumos 的&lt;a href=&#34;https://github.com/illumos/illumos-gate/blob/46f52c84cb830d1636c093bd5c2d83074aeaf21c/usr/src/lib/libnsl/nsl/_conn_util.c#L76-L82&#34;&gt;源码&lt;/a&gt;，会发现 &lt;code&gt;t_connect&lt;/code&gt; 函数的核心实现是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	creq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; T_conn_req &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)ctlbufp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;buf;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	creq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;PRIM_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T_CONN_REQ;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	creq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;DEST_length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; call&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;addr.len;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	creq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;DEST_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	creq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;OPT_length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; call&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;opt.len;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	creq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;OPT_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;putmsg&lt;/span&gt;(fd, ctlbufp,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; strbuf &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(call&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;udata.len&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;call&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;udata: NULL), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		t_errno &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TSYSERR;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，这段在 libnsl 中的代码构造了一个结构体 &lt;code&gt;struct T_conn_req&lt;/code&gt;，然后通过 &lt;code&gt;putmsg&lt;/code&gt; 系统调用发送出去。可以预想，内核那边虚拟了一个 &lt;code&gt;/dev/tcp&lt;/code&gt; 设备，这个设备注册了 putmsg 的回调函数。在回调函数中，解析结构体的字段，然后执行相应的操作。用户调用 TLI 函数，然后 libnsl 负责把函数的参数封装成一个结构体，然后向 &lt;code&gt;t_open&lt;/code&gt; 打开的设备文件发送结构体的内容。内核和 libnsl 约定好了结构体，然后不同的操作根据结构体的 &lt;code&gt;PRIM_type&lt;/code&gt; 字段来区分。实际上，这个约定也是一个标准，叫做 TPI(Transport Provider Interface)。&lt;/p&gt;
&lt;h2 id=&#34;transport-provider-interface&#34;&gt;Transport Provider Interface&lt;/h2&gt;
&lt;p&gt;TPI(Transport Provider Interface) 约定了内核和 libnsl 之间的接口。内核和用户态之间互相发送消息，有点像 HTTP，一个请求过去，一个响应回来。只不过请求是“connect”或者“accept”等等。相比 Sockets API，确实绕了很多，首先要封装到 struct 里面，然后通过统一的读写 syscall 进入到内核，再解析一遍 struct，再做实际的操作。如果直接 syscall 的话，内核实现会比较简单，只不过不“Unix”了。实际上，如过你阅读 Illumos 源码，它在解析 struct 以后，也会转而执行相应的 Sockets 处理函数，然后把返回值再封装成 TLI 的响应，发送给用户程序。&lt;/p&gt;
&lt;p&gt;比较有意思的是，TPI 本身也是有状态的：Idle，Unbound，Data Transfer，等待 ACK 等等。所以如果你在 Solaris 上跑 netstat，会发现 UDP 也有状态（Idle/Unbound），那实际上不是 UDP 的状态，而是 TPI 的状态。正因此，我在维护 lsof 的时候，经常看到 TCP/TPI state，不明所以，才会研究 TPI 的历史，然后找到 TLI，才知道除了 Sockets 以外，还有一套 Unix 上的网络 API。有趣的是，TLI 是 System V 提供的，以前经常听到 System V ABI 的说法，却不知道 System V 是一个 Unix 操作系统，现在依然还可以在很多地方看到它的身影。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/9647699/toc.pdf&#34;&gt;Networking Services (XNS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.openss7.org/docs/tpi.pdf&#34;&gt;Transport Provider Interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT&lt;/h2&gt;
&lt;p&gt;问：What is Transport Layer Interface?&lt;/p&gt;
&lt;p&gt;答：The Transport Layer Interface (TLI) is an application programming interface (API) that provides a standard interface for communication between an application program and the transport layer protocols of a network. It was originally developed by AT&amp;amp;T for the Unix operating system and is now used in many other operating systems.&lt;/p&gt;
&lt;p&gt;The TLI provides a set of functions that allow applications to communicate with the transport layer protocols, such as TCP and UDP, in a network-independent manner. Applications can use TLI to establish connections, send and receive data, and manage network resources.&lt;/p&gt;
&lt;p&gt;One of the advantages of TLI is that it provides a layer of abstraction between the application and the transport layer protocols, which allows the application to be independent of the underlying network. This means that an application can be developed using TLI on one operating system and run on another operating system with different transport layer protocols.&lt;/p&gt;
&lt;p&gt;However, TLI is an older interface and has largely been replaced by newer interfaces such as the sockets API, which is now the de facto standard for network programming.&lt;/p&gt;
&lt;p&gt;问：What&amp;rsquo;s the relationship between Transport Layer Interface and Transport Provider Interface?&lt;/p&gt;
&lt;p&gt;答：The Transport Layer Interface (TLI) and Transport Provider Interface (TPI) are both application programming interfaces (APIs) that provide a standard way for applications to communicate with the transport layer protocols of a network. However, they are different interfaces that serve different purposes.&lt;/p&gt;
&lt;p&gt;TLI is an API that was developed by AT&amp;amp;T for the Unix operating system to provide a network-independent interface for applications to communicate with transport layer protocols such as TCP and UDP. It provides a set of functions that allow applications to establish connections, send and receive data, and manage network resources.&lt;/p&gt;
&lt;p&gt;On the other hand, TPI is an API that was developed by the X/Open consortium to provide a standard interface for communication between the transport layer protocols and network drivers or hardware. It provides a set of functions that allow transport providers to interact with network drivers or hardware and handle network-specific issues such as congestion control, flow control, and error handling.&lt;/p&gt;
&lt;p&gt;In other words, TLI is an interface for applications to communicate with the transport layer protocols, while TPI is an interface for transport providers to communicate with network drivers or hardware. The two interfaces are related in that TLI can be implemented using TPI, but they are distinct and serve different purposes in the network architecture.&lt;/p&gt;
&lt;p&gt;问：Please write a UDP echo server in Transport Layer Interface&lt;/p&gt;
&lt;p&gt;答：Sure, here is an example of a UDP echo server using the Transport Layer Interface (TLI) in C language:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;netdb.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;tiuser.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define BUFSIZE 1024
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define SERVICE_NAME &amp;#34;echo&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd, len, n;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; t_call call;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; t_unitdata ud;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; t_uderr uderr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; netbuf &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;recvbuf;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[BUFSIZE];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in servaddr, cliaddr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; hostent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;server;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; portno &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5001&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// can be any available port number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// create socket
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((sockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t_open&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/dev/udp&amp;#34;&lt;/span&gt;, O_RDWR, NULL)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t_open&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// bind socket to port
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;servaddr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(servaddr));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    servaddr.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    servaddr.sin_addr.s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INADDR_ANY;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    servaddr.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htons&lt;/span&gt;(portno);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t_bind&lt;/span&gt;(sockfd, NULL, NULL) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t_bind&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// listen for incoming requests
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;call, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(call));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cliaddr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cliaddr));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ud, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ud));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        call.addr.buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cliaddr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        call.addr.maxlen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cliaddr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        call.addr.len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        call.opt.len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        call.udata.len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// receive message
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        recvbuf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; netbuf &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;t_alloc&lt;/span&gt;(sockfd, T_UNITDATA, T_ALL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t_rcvudata&lt;/span&gt;(sockfd, recvbuf, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ud, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;uderr) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t_rcvudata&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;memcpy&lt;/span&gt;(buf, recvbuf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;buf, recvbuf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;len);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        buf[recvbuf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;len] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buf);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// send message back to client
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        ud.udata.buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buf;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ud.udata.len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; recvbuf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;len;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ud.addr.buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cliaddr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ud.addr.len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cliaddr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ud.addr.maxlen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cliaddr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t_sndudata&lt;/span&gt;(sockfd, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ud) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t_sndudata&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This UDP echo server listens on a specific port and waits for incoming messages from clients. When it receives a message, it sends the same message back to the client as a response. Note that this example assumes that the TLI library is already installed on your system, and the program is compiled with the appropriate TLI library flags.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenBSD xonly 实现原理</title>
      <link>https://jia.je/system/2023/02/07/openbsd-xonly/</link>
      <pubDate>Tue, 07 Feb 2023 21:57:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2023/02/07/openbsd-xonly/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近看到 &lt;a href=&#34;https://marc.info/?l=openbsd-tech&amp;amp;m=167501519712725&amp;amp;w=2&#34;&gt;xonly status&lt;/a&gt;，看到 OpenBSD 最近在实现 xonly，也就是让一些页只能执行，不能读不能写。以往类似的做法是 &lt;code&gt;W^X&lt;/code&gt;，也就是可以执行的时候不能写，可以写的时候不能执行。显然，xonly 是更加严格的，连读都不可以。查了一下历史，&lt;code&gt;W^X&lt;/code&gt; 最早也是在 OpenBSD 中实现的，说不定以后 xonly 也会被各个操作系统实现。&lt;/p&gt;
&lt;h2 id=&#34;amd64-上的实现&#34;&gt;amd64 上的实现&lt;/h2&gt;
&lt;p&gt;在 amd64 的页表中，决定执行/读/写权限的是（见 Intel 文档 &lt;code&gt;Table 4-20. Format of a Page-Table Entry that Maps a 4-KByte Page&lt;/code&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bit 1(R/W): &lt;code&gt;Read/write; if 0, writes may not be allowed to the 4-KByte page referenced by this entry (see Section 4.6)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Bit 63(XD): &lt;code&gt;If IA32_EFER.NXE = 1, execute-disable (if 1, instruction fetches are not allowed from the 4-KByte page controlled by this entry; see Section 4.6); otherwise, reserved (must be 0)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，在这个定义下，可能出现的权限组合：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;R&lt;/th&gt;
&lt;th&gt;W&lt;/th&gt;
&lt;th&gt;X&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;R/W=0, NXE=0&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R/W=1, NXE=0&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R/W=0, NXE=1, XD=0&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R/W=1, NXE=1, XD=0&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R/W=0, NXE=1, XD=1&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R/W=1, NXE=1, XD=1&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;需要注意的是，&lt;code&gt;IA32_EFER.NXE&lt;/code&gt; 是全局的，而 &lt;code&gt;R/W&lt;/code&gt; 和 &lt;code&gt;XD&lt;/code&gt; 的粒度是页。可以看到，上面的所有组合中，都是可以读的。&lt;/p&gt;
&lt;p&gt;那么，怎么实现 x-only 呢？OpenBSD 的实现方法是 Protection Keys。在比较新的 CPU 中，页表的 4 个位用来表示使用的 Protection Key 下标，一共有 16 个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bits 62:59: &lt;code&gt;Protection key; if CR4.PKE = 1 or CR4.PKS = 1, this may control the page&#39;s access rights (see Section 4.6.2); otherwise, it is ignored and not used to control access rights.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么 CPU 在查页表的时候，如果 &lt;code&gt;CR4.PKE=1 or CR4.PKS=1&lt;/code&gt;，就会根据这四个位去查找 PKRU 寄存器的取值。PKRU 是一个 32 位的寄存器，每两位对应一个 Protection Key，这两位表示是否允许读写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The PKRU register (protection-key rights for user pages) is a 32-bit
register with the following format: for each i (0 ≤ i ≤ 15), PKRU[2i] is
the access-disable bit for protection key i (ADi); PKRU[2i+1] is the
write-disable bit for protection key i (WDi). The IA32_PKRS MSR has the
same format (bits 63:32 of the MSR are reserved and must be zero).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有了这个机制以后，就可以构造出 xonly 的页表项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R/W=0：不允许写&lt;/li&gt;
&lt;li&gt;NXE=1, XD=0：允许执行&lt;/li&gt;
&lt;li&gt;设置 62:59 位为一个 Key 编号，将对应的 PKRU 的两个位设为 1：不允许读，不允许写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来看 OpenBSD 的&lt;a href=&#34;https://github.com/openbsd/src/commit/e9e0c464329db9b56e1f2db65b0f536e53aa7e5f#diff-ab04285d8fd81f41887d9c9de2eb231be5e44c2d465f5c479943a1e21cf977ce&#34;&gt;代码&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;首先，检测 CPU 是否支持 PKU 机制：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * If PKU is available, initialize PROT_EXEC entry correctly,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * and enable the feature before it gets used
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * XXX Some Hypervisors forget to save/restore PKU
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cpuid_level &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; ecx, dummy;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	CPUID_LEAF(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, dummy, dummy, ecx, dummy);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((ecx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SEFF0ECX_PKU) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    (cpu_ecxfeature &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; CPUIDECX_HV) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		lcr4(rcr4() &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; CR4_PKE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		pg_xo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PG_XO;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;PG_XO&lt;/code&gt; 的值是 &lt;code&gt;0x0800000000000000UL&lt;/code&gt;，也就是只有 bit 59 位 1，对应 Protection Key #1。OpenBSD 内核设置 PKRU 寄存器为 &lt;code&gt;0xfffffffc&lt;/code&gt;，即只有 Protection Key #0 不修改权限，其他 Protection Key 都是禁止读写。剩下的代码就是维护 PKRU 寄存器的取值，然后把 xonly 的页的 Protection Key 都设为 1，否则设为 0。&lt;/p&gt;
&lt;p&gt;但需要注意的是，PKRU 寄存器用户态也可以读写。Linux 把 PKRU 暴露给了&lt;a href=&#34;https://www.kernel.org/doc/html/latest/core-api/protection-keys.html&#34;&gt;用户态&lt;/a&gt;，允许用户态来自己设置页表的 Protection Key。OpenBSD 的实现方法则是进内核以后，检查 PKRU 寄存器，如果值修改了，就 SIGABRT。这有一定的风险，如果攻击代码修改了 PKRU 寄存器的内容，是有可能读取本来 xonly 的页的内容的。&lt;/p&gt;
&lt;h2 id=&#34;powerpc64-上的实现&#34;&gt;powerpc64 上的实现&lt;/h2&gt;
&lt;p&gt;powerpc64 的实现方法和 amd64 类似，见 &lt;a href=&#34;https://github.com/openbsd/src/commit/6bd9427e6879f79e0e2c1e03d8411439da5bb69&#34;&gt;commit&lt;/a&gt;。机制和 AMD64 很像，下面引用一段 PowerISA 文档：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The Virtual Page Class Key Protection mechanism provides the means to
assign virtual pages to one of 32 classes, and to modify data access
permissions for each class by modifying the Authority Mask Register
(AMR), shown in Figure 28, and to modify instruction access permissions
for each class by modifying the Instruction Authority Mask Register
(IAMR) shown in Figure 29.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对应如下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// sys/arch/powerpc64/powerpc64/cpu.c
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * Set AMR to inhibit loads and stores for all virtual page
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * class keys, except for Key0 which is used for normal kernel
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * access.  This means we can pick any other key to implement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * execute-only mappings.  But we pick Key1 since that allows
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * us to use the same bit in the PTE as was used to enable the
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * Data Access Compare mechanism on CPUs based on older
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * versions of the architecture (such as the PowerPC 970).
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * Set UAMOR (and AMOR just to be safe) to zero to prevent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * userland from modifying any bits in AMR.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mtamr&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x3fffffffffffffff&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mtuamor&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mtamor&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;isync&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到方法是一样的，Key0 正常，其他 Key 禁止读写。额外地，PowerISA 还可以设置 Protection Key 禁止执行。并且通过设置 UAMOR 寄存器，用户态不可以修改 AMR 寄存器，这让 xonly 比 AMD64 上更为完备。&lt;/p&gt;
&lt;p&gt;最后一步，就是修改 PTE 属性，指定 Key 即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// sys/arch/powerpc64/include/pte.h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PTE_AC			0x0000000000000200ULL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// sys/arch/powerpc64/powerpc64/pmap.c
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((prot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (PROT_READ &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PROT_WRITE)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		pte&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pte_lo &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; PTE_AC;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;其他指令集架构&#34;&gt;其他指令集架构&lt;/h2&gt;
&lt;p&gt;一些指令集架构的页表在设计的时候，就有独立的 R W X 权限位，于是不需要特殊的处理，直接把 mmap 的参数映射过去即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solaris 11.4 安装</title>
      <link>https://jia.je/system/2023/02/03/solaris/</link>
      <pubDate>Fri, 03 Feb 2023 12:26:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2023/02/03/solaris/</guid>
      <description>&lt;h2 id=&#34;下载安装镜像&#34;&gt;下载安装镜像&lt;/h2&gt;
&lt;p&gt;访问 &lt;a href=&#34;https://www.oracle.com/solaris/solaris11/downloads/solaris-downloads.html&#34;&gt;https://www.oracle.com/solaris/solaris11/downloads/solaris-downloads.html&lt;/a&gt;，点击下载，登录后跳转到一个新的页面。在 Platform 下拉框选择 x86，会出现一系列可以下载的文件。以 11.4.42.111.0 为例，需要下载的是：V1019840-01.iso Oracle Solaris 11.4.42.111.0 Interactive Text Install ISO (x86) for (Oracle Solaris on x86-64 (64-bit)), 890.5 MB。可以直接在浏览器中下载，也可以点击网页中的 WGET Options，用 wget 脚本下载。&lt;/p&gt;
&lt;p&gt;下载以后，挂载 ISO 到虚拟机，正常按照指示进行安装&lt;/p&gt;
&lt;h2 id=&#34;配置软件源&#34;&gt;配置软件源&lt;/h2&gt;
&lt;p&gt;Solaris 的在线软件源需要订阅，如果不想订阅，需要下载和 Solaris &lt;strong&gt;版本一致&lt;/strong&gt; 的 IPS 仓库。下载的地址和上面一样，需要 7 个 zip 文件，如 V1019847-01_1of7.zip Oracle Solaris 11.4.42.111.0 IPS Repository (SPARC, x86) for (Oracle Solaris on x86-64 (64-bit)), 2.2 GB。建议用 wget 脚本批量下载。&lt;/p&gt;
&lt;p&gt;UPDATE: 根据 &lt;a href=&#34;https://blogs.oracle.com/solaris/post/building-open-source-software-on-oracle-solaris-114-cbe-release&#34;&gt;https://blogs.oracle.com/solaris/post/building-open-source-software-on-oracle-solaris-114-cbe-release&lt;/a&gt;，实际上可以不下载 IPS 仓库，而是用在线的仓库，内容和下载的一致：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo pkg set-publisher -G &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; -g http://pkg.oracle.com/solaris/release/ solaris
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下载好了以后，全部解压到一个目录中，如 &lt;code&gt;/export/home/user/solaris&lt;/code&gt;，然后启动本地的软件源服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo svccfg -s application/pkg/server setprop pkg/inst_root&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/export/home/user/solaris
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo svccfg -s application/pkg/server setprop pkg/readonly&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo svccfg -s application/pkg/server setprop pkg/port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8081&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo svcadm refresh application/pkg/server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo svcadm enable application/pkg/server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后配置 &lt;code&gt;pkg&lt;/code&gt; 使用本地软件源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo pkg set-publisher -G &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; -g http://localhost:8081 solaris
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后就可以正常使用了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo pkg install gcc-11
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;命令参考：&lt;a href=&#34;https://www.oracle.com/docs/tech/solaris-11-cheat-sheet.pdf&#34;&gt;https://www.oracle.com/docs/tech/solaris-11-cheat-sheet.pdf&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FreeBSD/NetBSD/OpenBSD/DragonFlyBSD Cookbook</title>
      <link>https://jia.je/system/2023/01/21/bsd-cookbook/</link>
      <pubDate>Sat, 21 Jan 2023 20:18:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2023/01/21/bsd-cookbook/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在维护 lsof 的时候，需要在 FreeBSD/NetBSD/OpenBSD/DragonFlyBSD 上进行开发和测试，于是就装了虚拟机，特此记录我在使用过程中，与 Linux 不一样的一些常用 FreeBSD/NetBSD/OpenBSD/DragonFlyBSD 命令。&lt;/p&gt;
&lt;h2 id=&#34;freebsd&#34;&gt;FreeBSD&lt;/h2&gt;
&lt;p&gt;文档参考：&lt;a href=&#34;https://docs.freebsd.org/en/books/handbook&#34;&gt;https://docs.freebsd.org/en/books/handbook&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;在 &lt;a href=&#34;https://www.freebsd.org/where/&#34;&gt;https://www.freebsd.org/where/&lt;/a&gt; 找到最新版下载，对于虚拟机的需求，用 &lt;code&gt;-disk1.iso&lt;/code&gt;，1 GB 左右。安装过程按照 UI 一步步走即可。&lt;/p&gt;
&lt;h3 id=&#34;root-权限&#34;&gt;root 权限&lt;/h3&gt;
&lt;p&gt;FreeBSD 的 su 默认只有 wheel 组可以 su 到 root，所以安装的时候，建议给创建的帐号加上 wheel 组。也可以通过 pw 命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pw groupmod wheel -m freebsd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;sudo 需要通过包管理器安装，用法和 Linux 一样。&lt;/p&gt;
&lt;h3 id=&#34;包管理&#34;&gt;包管理&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;pkg&lt;/code&gt; 命令进行包管理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg install -U sudo vim fish
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-U&lt;/code&gt; 表示在 install 的时候不要再 update。&lt;/p&gt;
&lt;p&gt;也可以从 Ports 源码编译，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://git.FreeBSD.org/ports.git /usr/ports
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /usr/ports/sysutils/lsof
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;升级&#34;&gt;升级&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;freebsd-update&lt;/code&gt; 命令升级：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;freebsd-update fetch
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;freebsd-update install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;网络配置&#34;&gt;网络配置&lt;/h3&gt;
&lt;p&gt;显示路由表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;netstat -nr
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改路由：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ip route add 1.2.3.0/24 via 4.5.6.7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;route add -net 1.2.3.0/24 4.5.6.7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ip route del 1.2.3.0/24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;route delete -net 1.2.3.0/24
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;网络接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ip a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ifconfig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ip link set dev abc up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ifconfig abc up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ip a add 1.2.3.4/24 dev abc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iconfig abc inet 1.2.3.4/24
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;网路配置在 &lt;code&gt;/etc/rc.conf&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# DHCP
ifconfig_xxx=&amp;#34;DHCP&amp;#34;
# Default Gateway
defaultrouter=&amp;#34;1.2.3.4&amp;#34;
# Static IP
ifconfig_xxx=&amp;#34;inet 1.2.3.4/24&amp;#34;
# Static route
static_routes=&amp;#34;name1 name2&amp;#34;
route_name1=&amp;#34;-net 1.2.3.0/24 4.5.6.7&amp;#34;
route_name2=&amp;#34;-net 3.2.1.0/24 7.6.5.4&amp;#34;
# Bridge
cloned_interfaces=&amp;#34;bridge0&amp;#34;
ifconfig_bridge0=&amp;#34;addm net0 addm net1 up&amp;#34;
ifconfig_net0=&amp;#34;up&amp;#34;
ifconfig_net1=&amp;#34;up&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;换源&#34;&gt;换源&lt;/h3&gt;
&lt;p&gt;USTC &lt;a href=&#34;https://mirrors.ustc.edu.cn/help/freebsd-pkg.html&#34;&gt;https://mirrors.ustc.edu.cn/help/freebsd-pkg.html&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p /usr/local/etc/pkg/repos/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FreeBSD: { url: &amp;#34;pkg+http://mirrors.ustc.edu.cn/freebsd-pkg/${ABI}/quarterly&amp;#34; }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        &amp;gt; /usr/local/etc/pkg/repos/FreeBSD.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;truss&#34;&gt;truss&lt;/h3&gt;
&lt;p&gt;truss 相当于 Linux 中的 strace。&lt;/p&gt;
&lt;h3 id=&#34;编译内核&#34;&gt;编译内核&lt;/h3&gt;
&lt;p&gt;文档：&lt;a href=&#34;https://docs.freebsd.org/en/books/handbook/kernelconfig/&#34;&gt;https://docs.freebsd.org/en/books/handbook/kernelconfig/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先下载内核源码，然后创建内核配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /path/to/kernel/src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd sys/amd64/conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp GENERIC MYKERNEL
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译和安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make buildkernel KERNCONF&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;MYKERNEL
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make installkernel KERNCONF&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;MYKERNEL
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;提交 patch：&lt;a href=&#34;https://wiki.freebsd.org/Phabricator&#34;&gt;https://wiki.freebsd.org/Phabricator&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;关机&#34;&gt;关机&lt;/h3&gt;
&lt;p&gt;FreeBSD 的 shutdown 默认会停留在 halt 的状态，但是不会断电，需要添加 &lt;code&gt;-p&lt;/code&gt; 选项。&lt;/p&gt;
&lt;h2 id=&#34;netbsd&#34;&gt;NetBSD&lt;/h2&gt;
&lt;h3 id=&#34;包管理-1&#34;&gt;包管理&lt;/h3&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://www.netbsd.org/docs/pkgsrc/using.html&#34;&gt;https://www.netbsd.org/docs/pkgsrc/using.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 pkgin 做二进制包的包管理，首先安装 pkgin：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/pkg/sbin:/usr/pkg/bin:&lt;/span&gt;$PATH&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PKG_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdn.NetBSD.org/pub/pkgsrc/packages&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PKG_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PKG_PATH&lt;span style=&#34;color:#e6db74&#34;&gt;/NetBSD/amd64/9.3/All/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export PATH PKG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg_add pkgin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;包管理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkgin install sudo vim fish
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkgin upgrade
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和 FreeBSD 一样，NetBSD 的 su 默认只有 wheel 组可以 su 到 root，建议在安装创建新用户的时候就把自己的帐号加入到 wheel 组中。sudo 使用之前需要 visudo 修改配置。&lt;/p&gt;
&lt;p&gt;也可以从源码 pkgsrc 进行编译，在 /usr/pkgsrc 路径下，编译好的程序会安装到 /usr/pkg/bin。&lt;/p&gt;
&lt;p&gt;克隆并初始化 pkgsrc：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /usr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cvs -q -z2 -d anoncvs@anoncvs.NetBSD.org:/cvsroot checkout -P pkgsrc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /usr/pkgsrc/bootstrap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./bootstrap
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译 pkgsrc 中的软件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /usr/pkgsrc/sysutils/lsof
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;网络配置-1&#34;&gt;网络配置&lt;/h3&gt;
&lt;p&gt;网络配置的命令和 FreeBSD 基本一样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;netstat -nr&lt;/code&gt;：查看路由表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;route&lt;/code&gt;：修改路由表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ifconfig&lt;/code&gt;：配置网络接口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是 &lt;code&gt;/etc/rc.conf&lt;/code&gt; 的配置语法不同，见 &lt;code&gt;man rc.conf&lt;/code&gt; 和 &lt;a href=&#34;https://www.netbsd.org/docs/network/#configuration_files&#34;&gt;https://www.netbsd.org/docs/network/#configuration_files&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;升级-1&#34;&gt;升级&lt;/h3&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://www.netbsd.org/docs/guide/en/chap-upgrading.html&#34;&gt;https://www.netbsd.org/docs/guide/en/chap-upgrading.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 sysupgrade 命令升级：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pkgin install sysupgrade
sysupgrade auto https://cdn.NetBSD.org/pub/NetBSD/NetBSD-9.3/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;安装内核源码&#34;&gt;安装内核源码&lt;/h3&gt;
&lt;p&gt;内核源码可以从 &lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/NetBSD/NetBSD-9.3/source/sets/&#34;&gt;https://mirrors.tuna.tsinghua.edu.cn/NetBSD/NetBSD-9.3/source/sets/&lt;/a&gt; 下载。对于 lsof 只需要其中的 syssrc.tgz。&lt;/p&gt;
&lt;p&gt;解压：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -xzf syssrc.tgz -C /
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;openbsd&#34;&gt;OpenBSD&lt;/h2&gt;
&lt;h3 id=&#34;安装-1&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;文档：&lt;a href=&#34;https://www.openbsd.org/faq/faq4.html&#34;&gt;https://www.openbsd.org/faq/faq4.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载 &lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/OpenBSD/7.2/amd64/install72.iso&#34;&gt;https://mirrors.tuna.tsinghua.edu.cn/OpenBSD/7.2/amd64/install72.iso&lt;/a&gt;，然后按照 UI 提示进行安装。使用 virt-manager 安装 OpenBSD 虚拟机的时候，在安装界面会遇到无法输入的问题，可以创建一个 USB Keyboard 来解决。&lt;/p&gt;
&lt;h3 id=&#34;包管理-2&#34;&gt;包管理&lt;/h3&gt;
&lt;p&gt;文档：&lt;a href=&#34;https://www.openbsdhandbook.com/package_management/&#34;&gt;https://www.openbsdhandbook.com/package_management/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;常用命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Use TUNA Mirrors&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://mirrors.tuna.tsinghua.edu.cn/OpenBSD/&amp;#34;&lt;/span&gt; &amp;gt; /etc/installurl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Search&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg_info -Q fish
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg_add sudo fish vim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Update packages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg_add -u
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另一个方法是从源码编译，首先下载 ports：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://mirrors.tuna.tsinghua.edu.cn/OpenBSD/7.2/ports.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /usr/src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar xzf /path/to/ports.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;系统升级&#34;&gt;系统升级&lt;/h3&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://www.openbsdhandbook.com/system_management/updates/&#34;&gt;https://www.openbsdhandbook.com/system_management/updates/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;syspatch -c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;syspatch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;autotools&#34;&gt;autotools&lt;/h3&gt;
&lt;p&gt;OpenBSD 允许存在多个版本的 autoconf/automake，所以在运行的时候需要用环境变量指定版本，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AUTOCONF_VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2.71
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AUTOMAKE_VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1.16
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;获取内核源码&#34;&gt;获取内核源码&lt;/h3&gt;
&lt;p&gt;文档：&lt;a href=&#34;https://www.openbsd.org/faq/faq5.html&#34;&gt;https://www.openbsd.org/faq/faq5.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add exampleuser to group wsrc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user mod -G wsrc exampleuser
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Download and extract&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://mirrors.tuna.tsinghua.edu.cn/OpenBSD/7.2/sys.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /usr/src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar xzf /path/to/sys.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ktrace&#34;&gt;ktrace&lt;/h3&gt;
&lt;p&gt;ktrace 相当于 Linux 中的 strace。结果会保存在文件中，用 kdump 命令显示。&lt;/p&gt;
&lt;h2 id=&#34;dragonflybsd&#34;&gt;DragonFlyBSD&lt;/h2&gt;
&lt;h3 id=&#34;安装-2&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;下载 ISO 文件：&lt;a href=&#34;https://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-6.4.0_REL.iso&#34;&gt;https://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-6.4.0_REL.iso&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用 installer 用户登录开始安装。&lt;/p&gt;
&lt;h3 id=&#34;用户管理&#34;&gt;用户管理&lt;/h3&gt;
&lt;p&gt;和 FreeBSD 一样，su 需要 wheel 组，所以需要手动添加用户到 wheel 组中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pw groupmod wheel -m username
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sshd&#34;&gt;SSHD&lt;/h3&gt;
&lt;p&gt;DragonFlyBSD 默认 sshd 配置不允许密码登录，如果要允许，需要修改 &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;，然后重启 ssh：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/etc/rc.d/sshd restart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;包管理-3&#34;&gt;包管理&lt;/h3&gt;
&lt;p&gt;DragonFlyBSD 可以下载二进制包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg upgrade
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg install sudo vim fish
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以从源码编译，见 &lt;a href=&#34;https://www.dragonflybsd.org/docs/howtos/HowToDPorts/&#34;&gt;https://www.dragonflybsd.org/docs/howtos/HowToDPorts/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 FreeBSD 上运行 code-server</title>
      <link>https://jia.je/software/2023/01/13/vscode-server-on-freebsd/</link>
      <pubDate>Fri, 13 Jan 2023 19:23:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2023/01/13/vscode-server-on-freebsd/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在 FreeBSD 上移植开源软件，但是因为 vscode 官方不支持 FreeBSD，所以尝试使用 code-server&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;p&gt;首先按照官方文档安装 code-server：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -fsSL https://code-server.dev/install.sh | sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动 code-server：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code-server --bind-addr 0.0.0.0:8080
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是很快你会发现，运行日志中会报告很多错误，缺少了一些包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo npm i -g yazl yauzl @microsoft/1ds-core-js vscode-regexpp xterm-headless vscode-proxy-agent --unsafe-perm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到这里就能在网页里看到 UI 了，但是发现很多功能都不工作。例如搜索的时候，会告诉你找不到 rg，是因为 ripgrep 没有提供 FreeBSD 的 prebuilt binary，但是可以用 pkg 安装：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo pkg install ripgrep
cd /usr/local/lib/node_modules/@vscode/ripgrep/bin &amp;amp;&amp;amp; ln -s /usr/local/bin/rg
cd /usr/local/lib/node_modules/code-server/lib/vscode/node_modules/@vscode/ripgrep/bin &amp;amp;&amp;amp; ln -s /usr/local/bin/rg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，日志中会显示 @parcel/watcher 启动失败，显示 Undefined symbol，这是因为这个库没有做 FreeBSD 支持。需要使用 &lt;a href=&#34;https://github.com/parcel-bundler/watcher/pull/128&#34;&gt;https://github.com/parcel-bundler/watcher/pull/128&lt;/a&gt; 版本，编译出 watcher.node 文件，替换：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd watcher
npm install
sudo cp build/Release/watcher.node /usr/local/lib/node_modules/@parcel/watcher/build/Release/
sudo cp build/Release/watcher.node /usr/local/lib/node_modules/code-server/lib/vscode/node_modules/@parcel/watcher/build/Release/watcher.node
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就解决了 watcher 的问题。&lt;/p&gt;
&lt;p&gt;最后一个问题是无法打开 Terminal，因为在 VSCode 代码中，检测到不支持的 Platform 的时候，会抛出异常：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[IPC Library: Pty Host] The factory function of &amp;#34;vs/platform/terminal/node/ptyHostMain&amp;#34; has thrown an exception
[IPC Library: Pty Host] Error: Platform not supported
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以修改源码：&lt;code&gt;sudo vim /usr/local/lib/node_modules/code-server/lib/vscode/out/vs/platform/terminal/node/ptyHostMain.js&lt;/code&gt; 把这个检查改掉，例如替换 linux 为 freebsd，当成 linux 来检测。&lt;/p&gt;
&lt;p&gt;接下来的问题和 &lt;a href=&#34;https://github.com/coder/code-server/issues/5760&#34;&gt;https://github.com/coder/code-server/issues/5760&lt;/a&gt; 一致，安装依赖，重新 &lt;code&gt;npm install&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo pkg install libsecret pkgconf
cd /usr/local/lib/node_modules/code-server
sudo npm install --unsafe-perm
# go back to @parcel/watcher
cd watcher
sudo cp build/Release/watcher.node /usr/local/lib/node_modules/code-server/lib/vscode/node_modules/@parcel/watcher/build/Release
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完成这些步骤以后，Terminal 也正常了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CHI 学习笔记</title>
      <link>https://jia.je/hardware/2023/01/12/chi-notes/</link>
      <pubDate>Thu, 12 Jan 2023 00:10:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/01/12/chi-notes/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/cache_coherence_protocol.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;chi-介绍&#34;&gt;CHI 介绍&lt;/h2&gt;
&lt;p&gt;CHI 协议是 AMBA 5 标准中的缓存一致性协议，前身是 ACE 协议。最新的 CHI 标准可以从 &lt;a href=&#34;https://developer.arm.com/documentation/ihi0050/latest&#34;&gt;AMBA 5 CHI Architecture Specification&lt;/a&gt; 处下载。&lt;/p&gt;
&lt;p&gt;相比 AXI，CHI 更加复杂，进行了分层：协议层，物理层和链路层。因此，CHI 适用于片上网络，支持根据 Node ID 进行路由，而不像 AXI 那样只按照物理地址进行路由。CHI 的地位就相当于 Intel 的环形总线。CHI 也可以桥接到 CCIX 上，用 CCIX 连接 SMP 的的多个 Socket，或者连接支持 CCIX 的显卡等等。&lt;/p&gt;
&lt;h2 id=&#34;缓存行状态&#34;&gt;缓存行状态&lt;/h2&gt;
&lt;p&gt;首先回顾 ACE 的缓存行状态，共有五种，与 MOESI 相对应：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UniqueDirty: Modified&lt;/li&gt;
&lt;li&gt;SharedDirty: Owned&lt;/li&gt;
&lt;li&gt;UniqueClean: Exclusive&lt;/li&gt;
&lt;li&gt;SharedClean: Shared&lt;/li&gt;
&lt;li&gt;Invalid: Invalid&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在此基础上，CHI 考虑缓存行只有部分字节有效的情况，即 Full，Partial 或者 Empty。因此 CHI 的缓存行状态共有七种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UniqueDirty: Modified&lt;/li&gt;
&lt;li&gt;UniqueDirtyPartial: 新增，可能有部分字节合法，在写回的时候，需要和下一级缓存或者内存中的合法缓存行内容进行合并&lt;/li&gt;
&lt;li&gt;SharedDirty: Owned&lt;/li&gt;
&lt;li&gt;UniqueClean: Exclusive&lt;/li&gt;
&lt;li&gt;UniqueCleanEmpty: 新增，所有字节都不合法，但是本缓存占有该缓存行，如果要修改的话，不需要通知其他缓存&lt;/li&gt;
&lt;li&gt;SharedClean: Shared&lt;/li&gt;
&lt;li&gt;Invalid: Invalid&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，比较特别的就是 UniqueDirtyPartial 和 UniqueCleanEmpty。CHI 标准在 4.1.1 章节给出了使用场景：如果一个 CPU 即将要写入一片内存，那么可以先转换到 UniqueCleanEmpty 状态中，把其他缓存中的数据都清空，这样后续写入的时候，不需要询问其他缓存，性能比较好。但此时因为数据还没写进去，所以就是 Empty，只更新状态，不占用缓存的空间。另一方面，如果 CPU 只写了缓存行的一部分字节，其他部分没有碰，那么引入 UniqueDirtyPartial 以后，可以把合并新旧缓存行数据这一步，下放到比较靠近内存的层级上，减少了数据搬运的次数。&lt;/p&gt;
&lt;h2 id=&#34;chi-网络节点&#34;&gt;CHI 网络节点&lt;/h2&gt;
&lt;p&gt;CHI 的节点组织成一个网络，可能是片上网络，也可能是片间的连接。CHI 的节点分成三种类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Request Node：发起 CHI 请求的节点，对应 CPU 的缓存，或者是网卡等外设&lt;/li&gt;
&lt;li&gt;Home Node：管理 Request Node 来的请求，对应最后一级缓存&lt;/li&gt;
&lt;li&gt;Subordinate Node：处理 Home Node 来的请求，对应内存或者显存等有内存的外设&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这种设计下，Node 之间可以互相通信，因此方便做一些新的优化。例如传统的缓存层次里，请求是一级一级下去，响应再一级一级上来。但是 CHI 可能是 Request Node 发给 Home Node 的请求，响应直接由 Subordinate Node 发送回 Request Node 了。&lt;/p&gt;
&lt;h2 id=&#34;读请求&#34;&gt;读请求&lt;/h2&gt;
&lt;p&gt;CHI 提供了复杂性的同时，也带来了很多的灵活性，也意味着潜在的性能优化的可能。例如在 CHI 中实现一个读操作，可能有很多种过程（CHI 标准第 2.3.1 章节）：&lt;/p&gt;
&lt;p&gt;第一种是 Home Node 直接提供了数据（Combined response from home）：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    Requester-&gt;&gt;Home: Read*
    Home-&gt;&gt;Requester: CompData
    Requester-&gt;&gt;Home: CompAck
&lt;/div&gt;
&lt;p&gt;第二种是 Home Node 把响应拆成两份，一份表示读取结果，一份携带读取的数据（Separate data and response from Home）：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    Requester-&gt;&gt;Home: Read*
    Home-&gt;&gt;Requester: RespSepData
    Home-&gt;&gt;Requester: DataSepResp
    Requester-&gt;&gt;Home: CompAck
&lt;/div&gt;
&lt;p&gt;第三种是 Home Node 没有数据，转而询问 Subordinate，Subordinate 把结果直接发回给了 Requester（Combined response from Subordinate）：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    participant Subordinate
    Requester-&gt;&gt;Home: Read*
    Home-&gt;&gt;Subordinate: ReadNoSnp
    Subordinate-&gt;&gt;Requester: CompData
    Requester-&gt;&gt;Home: CompAck
&lt;/div&gt;
&lt;p&gt;第四种是 Home Node 没有数据，转而询问 Subordinate，但这次提前告诉 Requester 读取的结果，最后 Subordinate 把结果发回给了 Requester（Response from Home, Data from Subordinate）：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    participant Subordinate
    Requester-&gt;&gt;Home: Read*
    Home-&gt;&gt;Requester: RespSepData
    Home-&gt;&gt;Subordinate: ReadNoSnpSep
    Subordinate-&gt;&gt;Home: ReadReceipt
    Subordinate-&gt;&gt;Requester: DataSepResp
    Requester-&gt;&gt;Home: CompAck
&lt;/div&gt;
&lt;p&gt;第五种是数据在其他的 Requester Node 中，此时 Home 负责 Snoop（Forwarding snoop）：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    participant Snoopee
    Requester-&gt;&gt;Home: Read*
    Home-&gt;&gt;Snoopee: Snp*Fwd
    Snoopee-&gt;&gt;Requester: CompData
    Snoopee-&gt;&gt;Home: SnpRespFwded
    Requester-&gt;&gt;Home: CompAck
&lt;/div&gt;
&lt;p&gt;第六种是 MakeReadUnique，此时只更新权限，不涉及数据的传输（MakeReadUnique only）：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    Requester-&gt;&gt;Home: MakeReadUnique
    Home-&gt;&gt;Requester: Comp
    Requester-&gt;&gt;Home: CompAck
&lt;/div&gt;
&lt;h2 id=&#34;写请求&#34;&gt;写请求&lt;/h2&gt;
&lt;p&gt;CHI 标准第 2.3.2 描述了写请求的流程。和读请求一样，写请求也有很多类型，下面进行介绍。与读请求不同的点在于，写入的时候，并不是直接把写入的地址和数据等一次性发送过去，而是先发一个写消息，对方回复可以发送数据了（DBIDResp），再把实际的数据传输过去（NCBWrData）。当然了，也可以中途反悔（WriteDataCancel）。&lt;/p&gt;
&lt;p&gt;第一种是 Direct Write-data Transfer，意思是数据要从 Requester 直接传到 Subordinate 上：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    participant Subordinate
    Requester-&gt;&gt;Home: Write*
    Home-&gt;&gt;Subordinate: Write*
    Subordinate-&gt;&gt;Requester: DBIDResp
    Requester-&gt;&gt;Subordinate: NCBWrData/WriteDataCancel
    Subordinate-&gt;&gt;Home: Comp
    Home-&gt;&gt;Requester: Comp
&lt;/div&gt;
&lt;p&gt;第二种比较常规，就是把数据写给 Home Node，其中 Comp 表示读取结果，DBIDResp 表示可以发写入的内容了：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    Requester-&gt;&gt;Home: Write*
    Home-&gt;&gt;Requester: DBIDResp/DBIDRespOrd
    Home-&gt;&gt;Requester: Comp
    Requester-&gt;&gt;Home: NCBWrData/WriteDataCancel
&lt;/div&gt;
&lt;p&gt;第三种是把第二种的 DBIDResp 和 Comp 合并成一个响应：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    Requester-&gt;&gt;Home: Write*
    Home-&gt;&gt;Requester: CompDBIDResp
    Requester-&gt;&gt;Home: NCBWrData/WriteDataCancel
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Intel 处理器</title>
      <link>https://jia.je/hardware/2023/01/11/intel-cpu/</link>
      <pubDate>Wed, 11 Jan 2023 08:59:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/01/11/intel-cpu/</guid>
      <description>&lt;h2 id=&#34;xeon-系列&#34;&gt;Xeon 系列&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/support/articles/000059657/processors/intel-xeon-processors.html&#34;&gt;命名方式&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一位数字：8-9 对应 Platinum，5-6 对应 Gold，4 对应 Silver，3 对应 Bronze&lt;/li&gt;
&lt;li&gt;第二位数字：对应代次，1 对应 1st Generation，2 对应 2nd Generation，依此类推&lt;/li&gt;
&lt;li&gt;第三位第四位数字：一般越大性能越好&lt;/li&gt;
&lt;li&gt;后缀：H/L/M/N/P/Q/S/T/U/V/Y/Y+/+
&lt;ul&gt;
&lt;li&gt;L：大内存&lt;/li&gt;
&lt;li&gt;M：媒体/大内存&lt;/li&gt;
&lt;li&gt;N：网络&lt;/li&gt;
&lt;li&gt;P：虚拟化，IaaS&lt;/li&gt;
&lt;li&gt;Q: 水冷&lt;/li&gt;
&lt;li&gt;S：存储/搜索&lt;/li&gt;
&lt;li&gt;T：长寿命&lt;/li&gt;
&lt;li&gt;U：单插槽&lt;/li&gt;
&lt;li&gt;V：虚拟化，SaaS&lt;/li&gt;
&lt;li&gt;Y: Speed Select&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4th-generation-intel-xeon-scalable-processorsxeon-cpu-max-series&#34;&gt;4th Generation Intel® Xeon® Scalable Processors/Xeon CPU Max Series&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/228622/4th-generation-intel-xeon-scalable-processors.html&#34;&gt;CPU 型号列表&lt;/a&gt; &lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/232643/intel-xeon-cpu-max-series.html&#34;&gt;Xeon CPU Max 型号列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发布时间：Q1&#39;23&lt;/li&gt;
&lt;li&gt;代号：Sapphire Rapids/Sapphire Rapids HBM&lt;/li&gt;
&lt;li&gt;用途：Server&lt;/li&gt;
&lt;li&gt;旗舰：Xeon CPU Max 9480(56C112T，112.5 MB L3，HBM)/Xeon Platinum 8490H(60C120T，Golden Cove，112.5 MB L3)/Xeon Platinum 8480+(56C112T，105 MB L3)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3rd-generation-intel-xeon-scalable-processors&#34;&gt;3rd Generation Intel® Xeon® Scalable Processors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/204098/3rd-generation-intel-xeon-scalable-processors.html&#34;&gt;CPU 型号列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发布时间：Q2&#39;21(Ice Lake), Q2&#39;20(Cooper Lake)&lt;/li&gt;
&lt;li&gt;代号：Cooper Lake/Ice Lake&lt;/li&gt;
&lt;li&gt;用途：Server&lt;/li&gt;
&lt;li&gt;旗舰：Xeon Platinum 8380(40C80T，Sunny Cove，60 MB L3)&lt;/li&gt;
&lt;li&gt;相关阅读：&lt;a href=&#34;https://www.anandtech.com/show/16594/intel-3rd-gen-xeon-scalable-review&#34;&gt;Ice Lake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2nd-generation-intel-xeon-scalable-processors&#34;&gt;2nd Generation Intel® Xeon® Scalable Processors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/192283/2nd-generation-intel-xeon-scalable-processors.html&#34;&gt;CPU 型号列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发布时间：Q1&#39;20, Q2&#39;19&lt;/li&gt;
&lt;li&gt;代号：Cascade Lake&lt;/li&gt;
&lt;li&gt;用途：Server&lt;/li&gt;
&lt;li&gt;旗舰：Xeon Platinum 9282(56C112T)，Xeon Platinum 8280(28C56T，38.5 MB L3)&lt;/li&gt;
&lt;li&gt;相关阅读：&lt;a href=&#34;https://www.anandtech.com/show/14146/intel-xeon-scalable-cascade-lake-deep-dive-now-with-optane&#34;&gt;Cascade Lake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1st-generation-intel-xeon-scalable-processors&#34;&gt;1st Generation Intel® Xeon® Scalable Processors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/125191/intel-xeon-scalable-processors.html&#34;&gt;CPU 型号列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发布时间：Q2&#39;18, Q3&#39;17&lt;/li&gt;
&lt;li&gt;代号：Skylake&lt;/li&gt;
&lt;li&gt;用途：Server&lt;/li&gt;
&lt;li&gt;旗舰：Xeon Platinum 8180(28C56T)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;core-系列&#34;&gt;Core 系列&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/processors/processor-numbers.html&#34;&gt;命名方式&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i3/i5/i7/i9：数字越大越高端&lt;/li&gt;
&lt;li&gt;万位 + 千位：对应代次，13 对应 13 代&lt;/li&gt;
&lt;li&gt;百位 + 十位 + 千位：型号，一般越大越高端&lt;/li&gt;
&lt;li&gt;后缀：F/H/HK/HX/K/P/U/X/XE/Y
&lt;ul&gt;
&lt;li&gt;F：桌面，无核显&lt;/li&gt;
&lt;li&gt;H：笔记本，高性能&lt;/li&gt;
&lt;li&gt;HK：笔记本，高性能，可超频&lt;/li&gt;
&lt;li&gt;HX：笔记本，高高性能，可超频&lt;/li&gt;
&lt;li&gt;K：桌面，高性能，可超频&lt;/li&gt;
&lt;li&gt;P：笔记本，轻薄本&lt;/li&gt;
&lt;li&gt;S：桌面，特别版&lt;/li&gt;
&lt;li&gt;U：笔记本，节能&lt;/li&gt;
&lt;li&gt;X/XE：桌面，高高性能，可超频&lt;/li&gt;
&lt;li&gt;Y：特别节能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13th-generation-intel-core-processors&#34;&gt;13th Generation Intel® Core™ Processors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/230485/13th-generation-intel-core-i9-processors.html&#34;&gt;i9 CPU 型号列表&lt;/a&gt; &lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/230486/13th-generation-intel-core-i7-processors.html&#34;&gt;i7 CPU 型号列表&lt;/a&gt; &lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/230487/13th-generation-intel-core-i5-processors.html&#34;&gt;i5 CPU 型号列表&lt;/a&gt; &lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/230488/13th-generation-intel-core-i3-processors.html&#34;&gt;i3 CPU 型号列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发布时间：Q1&#39;23，Q4&#39;22&lt;/li&gt;
&lt;li&gt;代号：Raptor Lake，大小核&lt;/li&gt;
&lt;li&gt;用途：桌面，笔记本&lt;/li&gt;
&lt;li&gt;旗舰：i9-13900K（8+16C32T）/i9-13900KF&lt;/li&gt;
&lt;li&gt;相关阅读：&lt;a href=&#34;https://www.anandtech.com/show/17601/intel-core-i9-13900k-and-i5-13600k-review&#34;&gt;Intel Core i9-13900K and i5-13600K Review: Raptor Lake Brings More Bite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12th-generation-intel-core-processors&#34;&gt;12th Generation Intel® Core™ Processors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/217839/12th-generation-intel-core-i9-processors.html&#34;&gt;i9 CPU 型号列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发布时间：Q1&#39;22，Q4&#39;21&lt;/li&gt;
&lt;li&gt;代号：Alder Lake，大小核&lt;/li&gt;
&lt;li&gt;旗舰：i9-12900KS（8+8C24T）&lt;/li&gt;
&lt;li&gt;相关阅读：&lt;a href=&#34;https://www.anandtech.com/show/17479/the-intel-core-i9-12900ks-review-the-best-of-intel-s-alder-lake-and-the-hottest&#34;&gt;The Intel Core i9-12900KS Review: The Best of Intel&amp;rsquo;s Alder Lake, and the Hottest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11th-generation-intel-core-processors&#34;&gt;11th Generation Intel® Core™ Processors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/202984/11th-generation-intel-core-i9-processors.html&#34;&gt;i9 CPU 型号列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发布时间：Q2&#39;21，Q1&#39;21&lt;/li&gt;
&lt;li&gt;代号：Rocket Lake&lt;/li&gt;
&lt;li&gt;旗舰：i9-11900K（8C16T）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;10th-generation-intel-core-processors&#34;&gt;10th Generation Intel® Core™ Processors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/195735/10th-generation-intel-core-i9-processors.html&#34;&gt;i9 CPU 型号列表&lt;/a&gt; &lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/123588/intel-core-x-series-processors.html&#34;&gt;Intel® Core™ X-series Processors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发布时间：Q3&#39;20，Q2&#39;20，Q4&#39;19&lt;/li&gt;
&lt;li&gt;代号：Comet Lake&lt;/li&gt;
&lt;li&gt;旗舰：i9-10900K（10C20T，Comet Lake）；特别地，在 X-series 系列中还有 i9-10980XE（18C36T，Cascade Lake）&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AMD 处理器</title>
      <link>https://jia.je/hardware/2023/01/09/amd-cpu/</link>
      <pubDate>Mon, 09 Jan 2023 19:37:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/01/09/amd-cpu/</guid>
      <description>&lt;h2 id=&#34;ryzen-系列&#34;&gt;Ryzen 系列&lt;/h2&gt;
&lt;h3 id=&#34;ryzen-5000&#34;&gt;Ryzen 5000&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代号&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;核显&lt;/th&gt;
&lt;th&gt;插槽&lt;/th&gt;
&lt;th&gt;微架构&lt;/th&gt;
&lt;th&gt;型号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vermeer&lt;/td&gt;
&lt;td&gt;桌面&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;AM4&lt;/td&gt;
&lt;td&gt;Zen 3&lt;/td&gt;
&lt;td&gt;5950X/5900(X)/5800(X(3D))/5700X/5600(X)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chagall&lt;/td&gt;
&lt;td&gt;工作站&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;sWRX8&lt;/td&gt;
&lt;td&gt;Zen 3&lt;/td&gt;
&lt;td&gt;5995WX/5975WX/5965WX/5955WX/5945WX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cezanne&lt;/td&gt;
&lt;td&gt;桌面&lt;/td&gt;
&lt;td&gt;GCN5&lt;/td&gt;
&lt;td&gt;AM4&lt;/td&gt;
&lt;td&gt;Zen 3&lt;/td&gt;
&lt;td&gt;5750G/5700G(E)/5650G/5600G(E)/5500/5300G(E)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cezanne&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;GCN5&lt;/td&gt;
&lt;td&gt;FP6&lt;/td&gt;
&lt;td&gt;Zen 3&lt;/td&gt;
&lt;td&gt;5980HX/5980HS/5900HX/5900HS/5800H(S)/5800U/5600H(S)/5600U/5560U/5400U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Barceló&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;GCN5&lt;/td&gt;
&lt;td&gt;FP6&lt;/td&gt;
&lt;td&gt;Zen 3&lt;/td&gt;
&lt;td&gt;5825U/5825C/5625U/5625C/5425U/5425C/5125C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lucienne&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;GCN5&lt;/td&gt;
&lt;td&gt;FP6&lt;/td&gt;
&lt;td&gt;Zen 2&lt;/td&gt;
&lt;td&gt;5700U/5500U/5300U&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：Ryzen 5 5500 虽然代号是 Cezanne，但是去掉了核显。&lt;/p&gt;
&lt;h3 id=&#34;ryzen-6000&#34;&gt;Ryzen 6000&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代号&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;核显&lt;/th&gt;
&lt;th&gt;插槽&lt;/th&gt;
&lt;th&gt;微架构&lt;/th&gt;
&lt;th&gt;型号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Rembrandt&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;RDNA2&lt;/td&gt;
&lt;td&gt;FP7&lt;/td&gt;
&lt;td&gt;Zen 3+&lt;/td&gt;
&lt;td&gt;6980HX/6980HS/6900HX/6900HS/6800H(S)/6800U/6600H(S)/6600U&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;ryzen-7000&#34;&gt;Ryzen 7000&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代号&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;核显&lt;/th&gt;
&lt;th&gt;插槽&lt;/th&gt;
&lt;th&gt;微架构&lt;/th&gt;
&lt;th&gt;型号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Raphael&lt;/td&gt;
&lt;td&gt;桌面&lt;/td&gt;
&lt;td&gt;RDNA2&lt;/td&gt;
&lt;td&gt;AM5&lt;/td&gt;
&lt;td&gt;Zen 4&lt;/td&gt;
&lt;td&gt;7950X(3D)/7900(X(3D))/7800X3D/7700(X)/7600(X)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dragon Range&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;RDNA2&lt;/td&gt;
&lt;td&gt;FL1&lt;/td&gt;
&lt;td&gt;Zen 4&lt;/td&gt;
&lt;td&gt;7945HX/7845HX/7745HX/7645HX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Phoenix&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;RDNA3&lt;/td&gt;
&lt;td&gt;FP7/FP7r2/FP8&lt;/td&gt;
&lt;td&gt;Zen 4&lt;/td&gt;
&lt;td&gt;7940H(S)/7840H(S)/7840U/7640H(S)/7640U/7540U/7440U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rembrandt R&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;RDNA2&lt;/td&gt;
&lt;td&gt;FP7/FP7r2&lt;/td&gt;
&lt;td&gt;Zen 3+&lt;/td&gt;
&lt;td&gt;7735HS/7736U/7735U/7535HS/7535U/7335U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Barcelo R&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;GCN5&lt;/td&gt;
&lt;td&gt;FP6&lt;/td&gt;
&lt;td&gt;Zen 3&lt;/td&gt;
&lt;td&gt;7730U/7530U/7330U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mendocino&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;RDNA2&lt;/td&gt;
&lt;td&gt;FT6&lt;/td&gt;
&lt;td&gt;Zen 2&lt;/td&gt;
&lt;td&gt;7520U/7320U&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;AMD 笔记本处理器产品从 2023 年到 2025 年采用新的&lt;a href=&#34;https://www.anandtech.com/show/18718/amd-2023-ryzen-mobile-7000-cpus-unveiled-zen-4-phoenix-takes-point&#34;&gt;命名方式&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数字第一位：7 对应 2023，8 对应 2024，9 对应 2025，约等于 Intel 的代次&lt;/li&gt;
&lt;li&gt;数字第二位：1 对应 Athlon Silver，2 对应 Athlon Gold，3-4 对应 Ryzen 3，5-6 对应 Ryzen 5，7-8 对应 Ryzen 7，8-9 对应 Ryzen 9，类似 Intel 的 i3/i5/i7/i9&lt;/li&gt;
&lt;li&gt;数字第三位：1 对应 Zen/Zen+，2 对应 Zen 2，依次类推&lt;/li&gt;
&lt;li&gt;数字第四位：0 表示低端，5 表示高端&lt;/li&gt;
&lt;li&gt;后缀：性能从高到低 HX，HS，U/C&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此代号和编号有直接的对应关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dragon Range: 7045, Extreme Gaming and Creator&lt;/li&gt;
&lt;li&gt;Phoenix: 7040, Elite Ultrathin&lt;/li&gt;
&lt;li&gt;Rembrandt R: 7035, Premium Thin &amp;amp; Light&lt;/li&gt;
&lt;li&gt;Bracelo R: 7030, Mainstream Thin &amp;amp; Light&lt;/li&gt;
&lt;li&gt;Mendocino: 7020, Everyday Computing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;参考资料&#34;&gt;参考资料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_AMD_Ryzen_processors&#34;&gt;List of AMD Ryzen processors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vermeer: &lt;a href=&#34;https://www.anandtech.com/show/16214/amd-zen-3-ryzen-deep-dive-review-5950x-5900x-5800x-and-5700x-tested&#34;&gt;AMD Zen 3 Ryzen Deep Dive Review: 5950X, 5900X, 5800X and 5600X Tested&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chagall: &lt;a href=&#34;https://www.anandtech.com/show/17296/amd-announces-ryzen-threadripper-pro-5000-wx-series-zen-3-core-for-oem-workstations&#34;&gt;AMD Announces Ryzen Threadripper Pro 5000 WX-Series: Zen 3 For OEM Workstations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cezanne: &lt;a href=&#34;https://www.anandtech.com/show/16405/amd-launches-ryzen-5000-mobile-zen-3-and-cezanne-for-notebooks&#34;&gt;AMD Launches Ryzen 5000 Mobile: Zen 3 and Cezanne for Notebooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cezanne: &lt;a href=&#34;https://www.anandtech.com/show/16446/amd-ryzen-9-5980hs-cezanne-review-ryzen-5000-mobile-tested&#34;&gt;AMD Ryzen 9 5980HS Cezanne Review: Ryzen 5000 Mobile Tested&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cezanne: &lt;a href=&#34;https://www.anandtech.com/show/16824/amd-ryzen-7-5700g-and-ryzen-5-5600g-apu-review&#34;&gt;The AMD Ryzen 7 5700G, Ryzen 5 5600G, and Ryzen 3 5300G Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Barcelo: &lt;a href=&#34;https://www.anandtech.com/show/17190/amds-barcelo-zen-3-apu-refresh-for-2022&#34;&gt;AMD’s Barcelo: Zen 3 APU Refresh for 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Barcelo: &lt;a href=&#34;https://www.anandtech.com/show/17373/amd-announces-ryzen-5000-cseries-for-highend-chromebooks&#34;&gt;AMD Announces Ryzen 5000 C-Series For High-End Chromebooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lucienne: &lt;a href=&#34;https://www.anandtech.com/show/16451/amds-ryzen-5000-lucienne-not-simply-rebranded-ryzen-4000-renoir-&#34;&gt;AMD&amp;rsquo;s Ryzen 5000 Lucienne: Not Simply Rebranded Ryzen 4000 Renoir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rembrandt: &lt;a href=&#34;https://www.anandtech.com/show/17276/amd-ryzen-9-6900hs-rembrandt-benchmark-zen3-plus-scaling&#34;&gt;AMD&amp;rsquo;s Ryzen 9 6900HS Rembrandt Benchmarked: Zen3+ Power and Performance Scaling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Raphael: &lt;a href=&#34;https://www.anandtech.com/show/17585/amd-zen-4-ryzen-9-7950x-and-ryzen-5-7600x-review-retaking-the-high-end&#34;&gt;AMD Zen 4 Ryzen 9 7950X and Ryzen 5 7600X Review: Retaking The High-End&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mendocino: &lt;a href=&#34;https://www.anandtech.com/show/17584/amd-launches-mendocino-apus-zen-2-ryzen-and-athlon-7020-series-with-rdna-2-graphics&#34;&gt;AMD Launches Mendocino APUs: Zen 2-based Ryzen and Athlon 7020 Series with RDNA 2 Graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Barcelo R: &lt;a href=&#34;https://www.notebookcheck.net/Barcelo-R-Ryzen-5-7530U-brings-Zen-3-into-the-mix-for-the-messy-AMD-Ryzen-7000-mobile-APU-lineup.662046.0.html&#34;&gt;Barcelo-R Ryzen 5 7530U brings Zen 3 into the mix for the messy AMD Ryzen 7000 mobile APU lineup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dragon Range: &lt;a href=&#34;https://www.anandtech.com/show/18716/amd-announces-ryzen-7045-hx-series-cpus-for-laptops-up-to-16-cores-and-5-4-ghz&#34;&gt;AMD Announces Ryzen Mobile 7045 HX-Series CPUs, Up to 16-Cores and 5.4 GHz for Laptops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Phoenix/Rembrandt R: &lt;a href=&#34;https://www.anandtech.com/show/18718/amd-2023-ryzen-mobile-7000-cpus-unveiled-zen-4-phoenix-takes-point&#34;&gt;AMD Lays Out 2023 Ryzen Mobile 7000 CPUs: Top-to-Bottom Updates, New Zen 4 &amp;lsquo;Phoenix&amp;rsquo; CPU Takes Point&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;epyc-系列&#34;&gt;EPYC 系列&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代号&lt;/th&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;最大核心数&lt;/th&gt;
&lt;th&gt;微架构&lt;/th&gt;
&lt;th&gt;插槽&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Naples&lt;/td&gt;
&lt;td&gt;7001&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;Zen 1&lt;/td&gt;
&lt;td&gt;SP3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rome&lt;/td&gt;
&lt;td&gt;7002&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;Zen 2&lt;/td&gt;
&lt;td&gt;SP3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Milan&lt;/td&gt;
&lt;td&gt;7003&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;Zen 3&lt;/td&gt;
&lt;td&gt;SP3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Milan-X&lt;/td&gt;
&lt;td&gt;7003&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;Zen 3&lt;/td&gt;
&lt;td&gt;SP3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Genoa&lt;/td&gt;
&lt;td&gt;9004&lt;/td&gt;
&lt;td&gt;96&lt;/td&gt;
&lt;td&gt;Zen 4&lt;/td&gt;
&lt;td&gt;SP5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bergamo&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;Zen 4c&lt;/td&gt;
&lt;td&gt;SP5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;参考资料-1&#34;&gt;参考资料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.anandtech.com/show/17055/amd-gives-details-on-epyc-zen4-genoa-and-bergamo-up-to-96-and-128-cores&#34;&gt;AMD Gives Details on EPYC Zen4: Genoa and Bergamo, up to 96 and 128 Cores&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PCIe Bifurcation</title>
      <link>https://jia.je/hardware/2023/01/05/pcie-bifurcation/</link>
      <pubDate>Thu, 05 Jan 2023 15:41:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/01/05/pcie-bifurcation/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/pcie.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近看到两篇关于 PCIe Bifurcation 的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/read/cv15596863&#34;&gt;intel 部分桌面级 CPU 的 pcie 通道拆分另类低成本实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/read/cv16530665&#34;&gt;Intel Alder Lake 12 代酷睿 CPU PCIe 拆分实现方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文章讲的是如何在 CPU 上进行跳线，从而实现 PCIe Bifurcation 的配置。正好借此机会来研究一下 PCIe Bifurcation。&lt;/p&gt;
&lt;h2 id=&#34;pcie-bifurcation&#34;&gt;PCIe Bifurcation&lt;/h2&gt;
&lt;p&gt;PCIe Bifurcation 的目的是让 PCIe 有更好的灵活性。从 CPU 出来的几路 PCIe，它的宽度一般是确定的，比如有一个 x16，但是实际使用的时候，想要接多个设备，例如把 x16 当成两个 x8 来用，这就是 PCIe Bifurcation。这需要 PCIe 两端的支持，CPU 端需要可配置 PCIe Bifurcation，不然只能从一个 x16 降级到一个 x8，剩下的 8x 就没法利用了；设备端需要拆分卡，把 x16 的信号分成两路，然后提供两个 PCIe 插槽以及使用 Clock Buffer 来提供下游设备的时钟，有时则是主板设计时就做了拆分，不需要额外的拆分卡。&lt;/p&gt;
&lt;p&gt;那么怎么配置 CPU 端的 PCIe Bifurcation 呢？其实就是上面两篇文章提到的办法：CPU 根据 CFG 信号来决定 PCIe Bifurcation 配置，例如要选择 1x16，2x8 还是 1x8+2x4 等等。简单总结一下实现思路都是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据 CPU 型号（如 i7-12700K）找到 datasheet，如 &lt;a href=&#34;https://cdrdv2.intel.com/v1/dl/getContent/655258&#34;&gt;12th Generation Intel Core Processors Datasheet Volume 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;寻找 datasheet 中关于 PCIe Bifurcation 的配置，找到 CFG 信号的取值&lt;/li&gt;
&lt;li&gt;找到 CPU 的引脚定义图（如 LGA1700），找到 CFG 引脚，然后找到附近的地或者电源&lt;/li&gt;
&lt;li&gt;连接跳线&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体细节这里就不赘述了，可以查看上面的两篇文章。&lt;/p&gt;
&lt;h2 id=&#34;可配置性&#34;&gt;可配置性&lt;/h2&gt;
&lt;p&gt;这时候就有一个疑问了，如果 PCIe Bifurcation 配置是通过引脚输入的，一般电路是固定的，那是不是就不可以动态配置了？&lt;/p&gt;
&lt;h3 id=&#34;桌面平台&#34;&gt;桌面平台&lt;/h3&gt;
&lt;p&gt;实际找一个主板来研究一下。型号是 ASRock Fatal1ty Z97X Killer，从主板的描述中，可以看到：&lt;code&gt;3 x PCI Express 3.0 x16 Slots (PCIE2/PCIE4/PCIE6: single at x16 (PCIE2); dual at x8 (PCIE2) / x8 (PCIE4); triple at x8 (PCIE2) / x4 (PCIE4) / x4 (PCIE6)&lt;/code&gt;，说明它是支持 PCIe Bifurcation 的，涉及到三个 PCIe Slot，支持三种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PCIE2 Slot x16&lt;/li&gt;
&lt;li&gt;PCIE2 Slot x8, PCIE4 Slot x8&lt;/li&gt;
&lt;li&gt;PCIE2 Slot x8, PCIE4 Slot x4, PCIE6 Slot x4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 &lt;a href=&#34;https://schematic-x.blogspot.com/2018/04/asus-pack-198-files.html&#34;&gt;网上&lt;/a&gt; 找到该主板的 &lt;a href=&#34;https://drive.google.com/file/d/1j9tUFJ7n60OLIoboVuPIWZA9cNJtwsCt/view&#34;&gt;原理图&lt;/a&gt;，可以用 &lt;a href=&#34;https://github.com/OpenBoardView/OpenBoardView&#34;&gt;OpenBoardView&lt;/a&gt; 软件打开。这个主板上的 CPU 插槽是 LGA1150，找到一个兼容的 CPU 版本 i7-4771，下载 &lt;a href=&#34;https://cdrdv2.intel.com/v1/dl/getcontent/328897&#34;&gt;Datasheet&lt;/a&gt;，可以看到决定 PCIe Bifurcation 的引脚是 &lt;code&gt;CFG[6:5]&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CFG[6:5]=00&lt;/code&gt;: 1x8, 2x4&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CFG[6:5]=10&lt;/code&gt;: 2x8&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CFG[6:5]=11&lt;/code&gt;: 1x16&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，这三种配置和主板网站上描述的是一致的。既然主板支持 Bifurcation，说明一定有办法设置 &lt;code&gt;CFG[6:5]&lt;/code&gt; 为以上三种取值。&lt;/p&gt;
&lt;p&gt;接下来，要找到主板上怎么连接 &lt;code&gt;CFG[6:5]&lt;/code&gt;。在原理图中，可以找到 LGA1150 的 &lt;code&gt;U39 CPU_CFG5&lt;/code&gt; 和 &lt;code&gt;U40 V_CFG6&lt;/code&gt;，继续往下找，可以看到它们通过电阻连到了同一个 &lt;a href=&#34;https://www.vishay.com/docs/85508/bat54.pdf&#34;&gt;BAT54C&lt;/a&gt; 芯片上，所以只需要看 BAT54C 第三个引脚 N105955695 的电平。N105955695 接到了一个 &lt;a href=&#34;https://assets.nexperia.com/documents/data-sheet/2N7002BKS.pdf&#34;&gt;2N7002BKS&lt;/a&gt; 芯片上，根据电路图，最后是要看 &lt;code&gt;X4_PRSNT1#&lt;/code&gt; 信号。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X4_PRSTN1#&lt;/code&gt; 信号连接到了 PCIE6 上，如果 PCIE6 Slot 插入了设备，那么 &lt;code&gt;X4_PRSTN1#&lt;/code&gt; 信号生效，根据分析出来的电路，它会使得 &lt;code&gt;CFG[6:0]&lt;/code&gt; 变为 00，对应 1x8+2x4 的 Bifurcation 模式。回想一下，在主板支持的三种 PCIe Bifurcation 模式下，只有这一种涉及到了 PCIE6 Slot。所以如果用户在 PCIE6 Slot 插入了设备，那说明用户需要的是 1x8+2x4 的模式，自动配置 CPU 的 &lt;code&gt;CFG[6:5]&lt;/code&gt; 信号为预期值。&lt;/p&gt;
&lt;p&gt;另一方面，设置 &lt;code&gt;CFG[6:5]&lt;/code&gt; 还不够，上面提到过，主板需要负责把 PCIE2/4/6 的信号连接到原来的完整的 x16 上，并且根据实际情况连接不同的线。具体的实现方式也可以在原理图中找到：信号 &lt;code&gt;X4_PRSTN1#&lt;/code&gt; 连接到了 &lt;a href=&#34;https://www.nxp.com.cn/docs/en/data-sheet/CBTL04083A_CBTL04083B.pdf&#34;&gt;CBTL04083BBS&lt;/a&gt;，这是一个 PCIe Mux/Demux 芯片，也就是把同样一组差分线连到不同 PCIe Slot 上所需要的芯片。&lt;/p&gt;
&lt;p&gt;于是目前推断出了一部分的工作原理：用户在 PCIE6 Slot 插入设备，电路计算出 &lt;code&gt;CFG[6:5]=00&lt;/code&gt;，同时配置好了 PCIe Mux/Demux 芯片，把 1x16 切分为 1x8+2x4。&lt;/p&gt;
&lt;p&gt;继续往下看，主板如何实现剩下两种配置：&lt;code&gt;CFG[6:5]=10&lt;/code&gt; 对应 2x8，&lt;code&gt;CFG[6:5]=11&lt;/code&gt; 对应 1x16。这两种编码里，CFG6 都为 1，只需要考虑如何处理 CFG5。CFG5 除了连接上面提到的 BAT54C 以外，还通过另一个 2N7002BKS 芯片连接到了 &lt;code&gt;NB_X8_PRSENT#&lt;/code&gt; 信号上。如果你想明白了前面的过程，应该可以推断出来，这里的 &lt;code&gt;NB_X8_PRSENT#&lt;/code&gt; 连接到了 PCIE4 Slot 上。当 PCIE4 Slot 插入了设备，同时 PCIE6 Slot 没有插入设备，那么根据相应的 PRESENT 信号，可以得到 &lt;code&gt;CFG[6:5]=10&lt;/code&gt;。如果 PCIE4 Slot 和 PCIE6 Slot 都没有插入设备，那就 &lt;code&gt;CFG[6:5]=11&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;总结一下，动态检测并计算出 &lt;code&gt;CFG[6:5]&lt;/code&gt; 的逻辑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果 PCIE6 Slot 插入了设备，说明要配置为 1x8+2x4，设置 &lt;code&gt;CFG[6:5]=00&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;否则，如果 PCIE4 Slot 插入了设备，说明要配置为 2x8，设置 &lt;code&gt;CFG[6:5]=10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;否则，说明要配置为 1x16，设置 &lt;code&gt;CFG[6:5]=11&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而主板设计者就是要把这个逻辑转化为电路，用 BAT54C 和 CBTL04083BBS 芯片来实现逻辑运算。&lt;/p&gt;
&lt;p&gt;顺便一提，这里的 PCIE2/4/6 物理尺寸都是 x16，只不过实际分配到的宽度不一定与物理尺寸一致。&lt;/p&gt;
&lt;h3 id=&#34;服务器平台&#34;&gt;服务器平台&lt;/h3&gt;
&lt;p&gt;在服务器平台上，Intel CPU 的 Bifurcation 变成运行时可配置的，例如在 &lt;a href=&#34;https://cdrdv2-public.intel.com/333810/xeon-e5-v4-datasheet-vol-2.pdf&#34;&gt;Xeon E5 v4 Datasheet Volume 2&lt;/a&gt; 中，可以找到寄存器 &lt;code&gt;pcie_iou_bif_ctrl&lt;/code&gt; 寄存器的定义：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_bifurcation.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个寄存器在 PCIe 配置空间中，可以通过 &lt;code&gt;setpci&lt;/code&gt; 命令来读取或写入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ setpci -s 00:00.0 190.B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ setpci -s 00:01.0 190.B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# x8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ setpci -s 00:02.0 190.B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# x16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ setpci -s 00:03.0 190.B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# x8x8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ setpci -s 80:02.0 190.B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# x16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过 &lt;code&gt;lspci -bPP&lt;/code&gt; 命令以及 &lt;code&gt;lspci -vvv&lt;/code&gt;，可以看到在这几个 PCIe Root Port 下的设备以及速度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;00:01.0(x8)/02:00.0 RAID 控制器 PCIe 3.0 x8&lt;/li&gt;
&lt;li&gt;00:02.0(x16)/03:00.0 NVIDIA 显卡 PCIe 3.0 x16&lt;/li&gt;
&lt;li&gt;00:03.0(x8x8)/01:00.0 BCM 2x10G+2x1G 网卡 PCIe 2.0 x8&lt;/li&gt;
&lt;li&gt;80:02.0(x16)/82:00.0 NVIDIA 显卡 PCIe 3.0 x16&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中前三个设备连接到 CPU1，后三个设备连接到 CPU2&lt;/p&gt;
&lt;p&gt;在 BIOS 设置中，进入 Integrated Devices -&amp;gt; Slot Bifurcation 可以看到设置，可选项有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slot 1/2/3/5: Default Bifurcation, x4+x4 Bifurcation&lt;/li&gt;
&lt;li&gt;Slot 4/6: Default Bifurcation, x4+x4+x4+x4 Bifurcation, x8+x8 Bifurcation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;阅读 R730 文档，可以发现它最多可以有 7 个 Slot，其中 Slot 1/2/3/5/7 是 PCIe 3.0x8，Slot 4 是 PCIe 3.0 x16，Slot 6 根据不同的 Riser 可以提供 PCIe 3.0 x8 或 x16，对应关系如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PCIe Slot 1: x8, CPU2&lt;/li&gt;
&lt;li&gt;PCIe Slot 2: x8, CPU2&lt;/li&gt;
&lt;li&gt;PCIe Slot 3: x8, CPU2&lt;/li&gt;
&lt;li&gt;PCIe Slot 4: x16, CPU2&lt;/li&gt;
&lt;li&gt;PCIe Slot 5: x8, CPU1&lt;/li&gt;
&lt;li&gt;PCIe Slot 6: x8/x16, CPU1&lt;/li&gt;
&lt;li&gt;PCIe Slot 7: x8, CPU1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;阅读 E5 v4 CPU 文档，可以发现它有三个 PCIe Port，一共有 40 PCIe lanes（x8+x16+x16）。由此可知，其中一个 x16 连接到 Slot4/6 上，另一个 x16 拆分成 x8+x8，连接到其余的 Slot。有些奇怪的是 CPU1 少了一个 x8 不知去向，怀疑是连接到了 RAID 卡或者网卡上。缺少主板的原理图，无法继续深入研究。&lt;/p&gt;
&lt;p&gt;遗憾的是，这个寄存器的 &lt;code&gt;iou_start_bifurcation&lt;/code&gt; 字段只能写入一次 1 来初始化 Bifurcation，而这一般是由 BIOS 完成的。如果 BIOS 没有做，或许可以后面再写入一次；如果 BIOS 已经写入了，但是没有提供可选项，那么可以考虑逆向 BIOS，使用 UEFITool 查看是否有隐藏的配置，如果有，则可以尝试绕过 BIOS 设置去修改隐藏的配置，如果没有，可以考虑修改 BIOS 的指令。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;简单总结一下，PCIe Bifurcation 的目的是保证总 lane 数不变的情况下，连接更多设备的较低成本的方法。它需要 CPU 一侧和设备一侧的支持。桌面级别的 CPU 通过 CFG 信号来配置，服务器端的 CPU 通过 PCIe 配置空间来配置。设备一侧，可以由主板进行拆分，此时主板上会有多余的 PCIe 接口，根据插在主板上的设备的情况，主板自适应出一个 PCIe Bifurcation 配置；主板也可以什么都不做，直接把 CPU 的 PCIe 接到 Slot 上，此时需要用户自己购买 PCIe 拆分卡。淘宝上可以搜到不少 &lt;a href=&#34;https://www.taobao.com/list/product/pcie%E6%8B%86%E5%88%86%E5%8D%A1.htm&#34;&gt;PCIe 拆分卡&lt;/a&gt;，其中用于 NVMe 的较多，毕竟 M.2 接口面积小，而且只需要 PCIe x4。&lt;/p&gt;
&lt;p&gt;另一种方案是 PCIe 交换机（如 &lt;a href=&#34;https://docs.broadcom.com/doc/12351854&#34;&gt;PEX 8747&lt;/a&gt;），缺点是成本较高，增加了延迟，好处是灵活性很强，不需要 CPU 额外配置，可以外接更多设备，并且设备空闲时可以让出带宽。例如一个 x16 使用 Bifurcation 方法可以拆成两个 x8，也可以使用 PCIe 交换机连接两个 x16，类似网络，这两个 x16 共享带宽，下游的两个设备之间也可以直接通信，这个在 HPC 场景下会比较常见，例如使用 PCIe 交换机连接显卡和 IB 网卡。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ACPI 学习笔记</title>
      <link>https://jia.je/hardware/2022/12/10/acpi-notes/</link>
      <pubDate>Sat, 10 Dec 2022 20:44:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/12/10/acpi-notes/</guid>
      <description>&lt;h2 id=&#34;标准&#34;&gt;标准&lt;/h2&gt;
&lt;p&gt;ACPI 标准可以从&lt;a href=&#34;https://uefi.org/specifications&#34;&gt;官网&lt;/a&gt;下载。&lt;/p&gt;
&lt;p&gt;ACPI 的表现形式为一颗树加若干个表，表的结构比较规整，里面每个字段都有固定的含义。树的结点可能是属性，或者是一些函数。操作系统可以操作上面的属性，调用 ACPI 中的函数，来进行一些硬件相关的操作。ACPI 一般与主板密切相关，主板厂家配置好 ACPI 后，操作系统就不需要给每个主板都写一遍代码了。&lt;/p&gt;
&lt;h2 id=&#34;asl&#34;&gt;ASL&lt;/h2&gt;
&lt;p&gt;为了开发 ACPI，需要使用 ACPI Source Language(ASL) 来进行编程，使用 iasl 编译成 ACPI 表以后，由操作系统进行解释执行。推荐阅读一个比较好的 ASL 教程：&lt;a href=&#34;https://acpica.org/sites/acpica/files/asl_tutorial_v20190625.pdf&#34;&gt;ACPI Source Language (ASL) Tutorial&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;简单来说，ASL 中的变量类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integer: &lt;code&gt;int32_t/int64_t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;String: &lt;code&gt;char *&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Buffer: &lt;code&gt;uint8_t []&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Package: &lt;code&gt;object []&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Object Reference: &lt;code&gt;object &amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Method&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ACPI 需要访问硬件，一般是通过 MMIO 或者 IO Port 来进行访问。在内核开发的时候，MMIO 一般是用一系列 volatile 指针来对应硬件的寄存器定义。ASL 中也可以做类似的事情，分为两步：&lt;code&gt;OperationRegion&lt;/code&gt; 和 &lt;code&gt;Field&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OperationRegion&lt;/code&gt; 就是声明了一片地址空间，以及对应的类型，常见的类型有 SystemMemory、SystemIO、PCI_Config、SMBus 等等。当 ACPI 中的代码要访问 &lt;code&gt;OperationRegion&lt;/code&gt; 中的数据的时候，内核按照类型去进行实际的访问。&lt;/p&gt;
&lt;p&gt;有了地址空间以后，还需要根据寄存器的定义，给各个字段起个名字，这就是 &lt;code&gt;Field&lt;/code&gt;。&lt;code&gt;Field&lt;/code&gt; 给 &lt;code&gt;OperationRegion&lt;/code&gt; 中的字段起名，与硬件的定义想对应，这就像在内核中定义一个结构体，保证结构体的成员的偏移和硬件是一致的。这样就可以通过成员来访问，而不是每次都去计算一次偏移。&lt;/p&gt;
&lt;h2 id=&#34;获取当前系统的-acpi-表&#34;&gt;获取当前系统的 ACPI 表&lt;/h2&gt;
&lt;p&gt;使用以下命令获取 ACPI 表并转换为可以阅读的格式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo acpidump -o acpi.raw
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;acpixtract -a acpi.raw
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iasl -d *.dat
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;串口&#34;&gt;串口&lt;/h2&gt;
&lt;h3 id=&#34;x86_64&#34;&gt;x86_64&lt;/h3&gt;
&lt;p&gt;下面来看一个具体的例子，主板 &lt;code&gt;WS X299 PRO/SE&lt;/code&gt; 的 ACPI 表中记录的串口信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// UART 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (UAR1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0501&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* 16550A-compatible COM Serial Port */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_UID, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _UID: Unique ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (LDN, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_STA, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _STA: Status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;^^&lt;/span&gt;SIO1.&lt;span style=&#34;color:#a6e22e&#34;&gt;DSTA&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;// Device Status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_DIS, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _DIS: Disable Device
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;^^&lt;/span&gt;SIO1.&lt;span style=&#34;color:#a6e22e&#34;&gt;DCNT&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Device Control
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_CRS, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _CRS: Current Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;^^&lt;/span&gt;SIO1.&lt;span style=&#34;color:#a6e22e&#34;&gt;DCRS&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_SRS, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _SRS: Set Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;^^&lt;/span&gt;SIO1.&lt;span style=&#34;color:#a6e22e&#34;&gt;DSRS&lt;/span&gt; (Arg0, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_PRS, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceTemplate&lt;/span&gt; ()  &lt;span style=&#34;color:#75715e&#34;&gt;// _PRS: Possible Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;StartDependentFn&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03F8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03F8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IRQNoFlags&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;DMA&lt;/span&gt; (Compatibility, NotBusMaster, Transfer8, )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;StartDependentFnNoPri&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03F8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03F8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IRQNoFlags&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;DMA&lt;/span&gt; (Compatibility, NotBusMaster, Transfer8, )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;StartDependentFnNoPri&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02F8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02F8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IRQNoFlags&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;DMA&lt;/span&gt; (Compatibility, NotBusMaster, Transfer8, )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;StartDependentFnNoPri&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03E8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03E8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IRQNoFlags&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;DMA&lt;/span&gt; (Compatibility, NotBusMaster, Transfer8, )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;StartDependentFnNoPri&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02E8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02E8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IRQNoFlags&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;DMA&lt;/span&gt; (Compatibility, NotBusMaster, Transfer8, )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;EndDependentFn&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个设备在 Linux 中的路径是 &lt;code&gt;/sys/devices/LNXSYSTM:00/LNXSYBUS:00/PNP0A08:00/device:86/PNP0501:00&lt;/code&gt;，进一步可以发现，它的 &lt;code&gt;path&lt;/code&gt; 是 &lt;code&gt;\_SB_.PC00.LPC0.UAR1&lt;/code&gt;，与 DSDT 中的路径一致。进一步探索，可以发现它匹配到了 Linux 的 &lt;code&gt;serial&lt;/code&gt; 驱动，并且最终对应到了 &lt;code&gt;/dev/ttyS0&lt;/code&gt; 设备。还可以看到 Linux 生成的 &lt;code&gt;resources&lt;/code&gt; 描述：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;state = active
io 0x3f8-0x3ff
irq 4
dma disabled
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这和上面看到的是一致的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03F8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03F8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里表达的正是 &lt;code&gt;0x3F8-0x3FF&lt;/code&gt; 这一段 IO Port。这个地址和 &lt;a href=&#34;https://wiki.osdev.org/Serial_Ports#Port_Addresses&#34;&gt;OSDev&lt;/a&gt; 上看到的也是吻合的。&lt;/p&gt;
&lt;p&gt;进一步分析代码，&lt;code&gt;_STA&lt;/code&gt; 函数返回设备当前的状态。可以在 Linux 的 ACPI 结点路径下看 &lt;code&gt;status&lt;/code&gt; 文件，其内容是 &lt;code&gt;15&lt;/code&gt;，表示工作正常。实现中，它调用了 &lt;code&gt;^^SIO1.DSTA(0x00)&lt;/code&gt;，这里的 &lt;code&gt;^&lt;/code&gt; 表示上一级命名空间。进一步找到 &lt;code&gt;DSTA&lt;/code&gt; 的实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Device Status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (DSTA, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, NotSerialized)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Enter Configuration Mode
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ENFG&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;CGLD&lt;/span&gt; (Arg0))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Local0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ACTR &lt;span style=&#34;color:#75715e&#34;&gt;/* \_SB_.PC00.LPC0.SIO1.ACTR */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Exit Configuration Mode
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;EXFG&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; ((Local0 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Local0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; ((Arg0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// IO State
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        IOST &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; (Local0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Arg0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; (Local0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ElseIf&lt;/span&gt; ((Arg0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; (((&lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Arg0) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; IOST))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Else
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Else
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，核心是要判断 &lt;code&gt;ACTR&lt;/code&gt; 的取值，继续寻找，可以发现 &lt;code&gt;ACTR&lt;/code&gt; 是一个 SuperIO 的寄存器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Super IO
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (SP1O, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2E&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;OperationRegion&lt;/span&gt; (IOID, SystemIO, SP1O, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Field&lt;/span&gt; (IOID, ByteAcc, NoLock, Preserve)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    INDX,   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATA,   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;IndexField&lt;/span&gt; (INDX, DATA, ByteAcc, NoLock, Preserve)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Offset&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ACTR,   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;// Activate Register
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ACTR&lt;/code&gt; 寄存器需要通过 0x2E/0x2F 这两个 IO Port 来访问，所以这里使用了 &lt;code&gt;IndexField&lt;/code&gt;，例如要读取 &lt;code&gt;ACTR&lt;/code&gt; 的当前值的话，首先要往 &lt;code&gt;0x2E&lt;/code&gt; 处写入 &lt;code&gt;ACTR&lt;/code&gt; 的偏移，再从 &lt;code&gt;0x2F&lt;/code&gt; 处读出当前值。这些寄存器应该就属于 SuperIO 了。&lt;/p&gt;
&lt;p&gt;其他的几个函数含义是，&lt;code&gt;_CRS&lt;/code&gt; 返回当前的资源配置，&lt;code&gt;_SRS&lt;/code&gt; 可以修改资源配置，&lt;code&gt;_PRS&lt;/code&gt; 列出可能的资源配置，&lt;code&gt;_DIS&lt;/code&gt; 禁用设备。&lt;/p&gt;
&lt;p&gt;从 Linux 内核日志，可以发现这款主板用的是 NCT6796D 兼容的 SuperIO 芯片：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nct6775: Found NCT6796D or compatible chip at 0x2e:0x290
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查询 &lt;a href=&#34;https://www.nuvoton.com/resource-files/NCT6796D_Datasheet_V0_6.pdf&#34;&gt;NCT6796D Datasheet&lt;/a&gt;，可以发现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;芯片通过 LPC 总线与 CPU 连接，支持多种外设接口，包括 UART，PS/2，红外，GPIO，SMBus 等等&lt;/li&gt;
&lt;li&gt;偏移 0x30 的寄存器 &lt;code&gt;ACTR&lt;/code&gt; 的最低位表示了 logical device 的当前状态。&lt;/li&gt;
&lt;li&gt;读取 &lt;code&gt;ACTR&lt;/code&gt; 之前需要设置 LDN(Logical Device Number) 为 2，2 对应 Serial Port 1(UARTA)。这一步是在 &lt;code&gt;ENFG(CGLD(Arg0))&lt;/code&gt; 中完成的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CGLD&lt;/code&gt; 函数查询了 &lt;code&gt;DCAT&lt;/code&gt;，可以发现，串口在 &lt;code&gt;DCAT&lt;/code&gt; 的下标是 0，查表得到的是 2，也就是 Logial Device Number 为 2，和上面的发现是吻合的。&lt;code&gt;DCAT&lt;/code&gt; 的下一项是 &lt;code&gt;0x3&lt;/code&gt;，也就是 Logical Device Number 为 3，在 Datasheet 中可以看到是 Serial Port 2(UARTB)。&lt;/li&gt;
&lt;li&gt;DSDT 中还可以找到 &lt;code&gt;PS2K&lt;/code&gt; 的结点，就是 PS/2 键鼠，属性中标记了 &lt;code&gt;LDN=5&lt;/code&gt;，和 Datasheet 也是一致的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;arm64&#34;&gt;ARM64&lt;/h3&gt;
&lt;p&gt;前面看过了 x86_64 平台的串口，是需要通过 IO Port 进行访问的。在 ARM 平台上，则一般是通过 MMIO 访问。搜索内核日志，可以发现内核从 SPCR(Serial Port Console Redirection table) 表获取得到串口的信息：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-dmesg&#34; data-lang=&#34;dmesg&#34;&gt;ACPI: SPCR: console: uart,mmio,0x3f00002f8,115200
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SPCR 表的内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[024h 0036   1]               Interface Type : 00
[025h 0037   3]                     Reserved : 000000

[028h 0040  12]         Serial Port Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 01 [Byte Access:8]
[02Ch 0044   8]                      Address : 00000003F00002F8

[034h 0052   1]               Interrupt Type : 08
[035h 0053   1]          PCAT-compatible IRQ : 00
[036h 0054   4]                    Interrupt : 000001E4
[03Ah 0058   1]                    Baud Rate : 07
[03Bh 0059   1]                       Parity : 00
[03Ch 0060   1]                    Stop Bits : 01
[03Dh 0061   1]                 Flow Control : 00
[03Eh 0062   1]                Terminal Type : 03
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SPCR 表的定义可以在 &lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/drivers/serports/serial-port-console-redirection-table&#34;&gt;Serial Port Console Redirection Table (SPCR)&lt;/a&gt; 处看到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type(00): Full 16550 interface&lt;/li&gt;
&lt;li&gt;Interrupt Type(08): ARMH GIC interrupt (Global System Interrupt)&lt;/li&gt;
&lt;li&gt;Baud Rate(07): 115200&lt;/li&gt;
&lt;li&gt;Terminal Type(03): ANSI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和内核得到的信息是一致的。内核中解析 SPCR 表的函数是 &lt;code&gt;acpi_sparse_spcr&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; __init &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_parse_spcr&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; enable_earlycon, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; enable_console)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (table&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;serial_port.space_id &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ACPI_ADR_SPACE_SYSTEM_MEMORY) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;ACPI_ACCESS_BIT_WIDTH&lt;/span&gt;((bit_width))) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			iotype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mmio&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (table&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;interface_type) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; ACPI_DBG2_16550_COMPATIBLE:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		uart &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uart&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (table&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;baud_rate) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		baud_rate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115200&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;baud_rate) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;snprintf&lt;/span&gt;(opts, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(opts), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s,%s,0x%llx&amp;#34;&lt;/span&gt;, uart, iotype,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			 table&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;serial_port.address);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// uart,mmio,0x3f00002f8,115200
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;snprintf&lt;/span&gt;(opts, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(opts), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s,%s,0x%llx,%d&amp;#34;&lt;/span&gt;, uart, iotype,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			 table&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;serial_port.address, baud_rate);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ipmi&#34;&gt;IPMI&lt;/h2&gt;
&lt;h3 id=&#34;x86_64-1&#34;&gt;x86_64&lt;/h3&gt;
&lt;p&gt;接下来，再来看 ACPI 中是如何声明 IPMI 的。主板依然是 &lt;code&gt;WS X299 PRO/SE&lt;/code&gt;，主板自带了 BMC，可以在 DSDT 中搜到相关的部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (IDTP, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0CA2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (ICDP, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0CA3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (SRVV, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0200&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (SPMI)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IPI0001&amp;#34;&lt;/span&gt;))  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_STR, &lt;span style=&#34;color:#a6e22e&#34;&gt;Unicode&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IPMI_KCS&amp;#34;&lt;/span&gt;))  &lt;span style=&#34;color:#75715e&#34;&gt;// _STR: Description String
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_UID, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _UID: Unique ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// IPMI Status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;OperationRegion&lt;/span&gt; (IPST, SystemIO, ICDP, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Field&lt;/span&gt; (IPST, ByteAcc, NoLock, Preserve)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        STAS,   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_STA, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _STA: Status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Local0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; STAS &lt;span style=&#34;color:#75715e&#34;&gt;/* \_SB_.PC00.LPC0.SPMI.STAS */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; ((Local0 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Else
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (ICRS, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceTemplate&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            _Y1E)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            _Y1F)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_CRS, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _CRS: Current Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; (IDTP)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateWordField&lt;/span&gt; (ICRS, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PC00.LPC0.SPMI._Y1E._MIN, IPDB)  &lt;span style=&#34;color:#75715e&#34;&gt;// _MIN: Minimum Base Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateWordField&lt;/span&gt; (ICRS, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PC00.LPC0.SPMI._Y1E._MAX, IPDH)  &lt;span style=&#34;color:#75715e&#34;&gt;// _MAX: Maximum Base Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateByteField&lt;/span&gt; (ICRS, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PC00.LPC0.SPMI._Y1E._LEN, IPDL)  &lt;span style=&#34;color:#75715e&#34;&gt;// _LEN: Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            IPDB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; IDTP &lt;span style=&#34;color:#75715e&#34;&gt;/* \IDTP */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            IPDH &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; IDTP &lt;span style=&#34;color:#75715e&#34;&gt;/* \IDTP */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            IPDL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; (ICDP)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateWordField&lt;/span&gt; (ICRS, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PC00.LPC0.SPMI._Y1F._MIN, IPCB)  &lt;span style=&#34;color:#75715e&#34;&gt;// _MIN: Minimum Base Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateWordField&lt;/span&gt; (ICRS, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PC00.LPC0.SPMI._Y1F._MAX, IPCH)  &lt;span style=&#34;color:#75715e&#34;&gt;// _MAX: Maximum Base Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateByteField&lt;/span&gt; (ICRS, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PC00.LPC0.SPMI._Y1F._LEN, IPCL)  &lt;span style=&#34;color:#75715e&#34;&gt;// _LEN: Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            IPCB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ICDP &lt;span style=&#34;color:#75715e&#34;&gt;/* \ICDP */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            IPCH &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ICDP &lt;span style=&#34;color:#75715e&#34;&gt;/* \ICDP */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            IPCL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (ICRS) &lt;span style=&#34;color:#75715e&#34;&gt;/* \_SB_.PC00.LPC0.SPMI.ICRS */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_IFT, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _IFT: IPMI Interface Type
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_SRV, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _SRV: IPMI Spec Revision
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (SRVV) &lt;span style=&#34;color:#75715e&#34;&gt;/* \SRVV */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Linux 中可以找到相应的结点：&lt;code&gt;/sys/devices/LNXSYSTM:00/LNXSYBUS:00/PNP0A08:00/device:86/IPI0001:00&lt;/code&gt;。可以发现匹配到了 &lt;code&gt;ipmi_si&lt;/code&gt; 驱动，并且可以正常工作。&lt;/p&gt;
&lt;p&gt;函数 &lt;code&gt;_STA&lt;/code&gt; 返回设备的当前状态，它读取了 IO Port 0x0CA3 的内容，进而判断 IPMI 是否正常。&lt;/p&gt;
&lt;p&gt;函数 &lt;code&gt;_CRS&lt;/code&gt; 返回当前的资源配置，它动态地计算出一个资源配置，对应 IO Port 是 0x0CA2 和 0x0CA3。&lt;/p&gt;
&lt;p&gt;函数 &lt;code&gt;_IFT&lt;/code&gt; 返回 IPMI Interface Type，0x01 表示 KCS(Keyboard Controller Style)，&lt;code&gt;_SRV&lt;/code&gt; 返回 IPMI Spec Revision，在这里是 0x0200，也就是 IPMI 2.0。&lt;/p&gt;
&lt;p&gt;这些内容可以在 Linux 下 ACPI 结点的 &lt;code&gt;physical_node/params&lt;/code&gt; 文件中看到：&lt;code&gt;kcs,i/o,0xca2,rsp=1,rsi=1,rsh=0,irq=0,ipmb=32&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;查阅 Linux 源码，可以找到 &lt;code&gt;acpi_ipmi_probe&lt;/code&gt; 函数，这个函数负责从 ACPI 中寻找 IPMI 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_ipmi_probe&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; platform_device &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pdev)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;dev_info&lt;/span&gt;(dev, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;probing via ACPI&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/* _IFT tells us the interface type: KCS, BT, etc */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_evaluate_integer&lt;/span&gt;(handle, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_IFT&amp;#34;&lt;/span&gt;, NULL, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tmp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (tmp) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		io.si_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SI_KCS;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		io.si_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SI_SMIC;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		io.si_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SI_BT;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* SSIF, just ignore */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ENODEV;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;dev_info&lt;/span&gt;(dev, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unknown IPMI type %lld&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, tmp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;EINVAL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ipmi_get_info_from_resources&lt;/span&gt;(pdev, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;io);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;res)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;EINVAL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; acpi_device_id acpi_ipmi_match[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IPI0001&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{ },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和上面的分析是可以对上的。&lt;/p&gt;
&lt;h4 id=&#34;ipmi-kcs&#34;&gt;IPMI KCS&lt;/h4&gt;
&lt;p&gt;查阅 IPMI 标准文档，可以看到 KCS(Keyboard Controller Style) Interface 下，操作系统通过两个 IO Port 来访问 BMC：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ipmi_kcs.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中的 &lt;code&gt;base&lt;/code&gt; 就是上面 ACPI 表记录的 &lt;code&gt;IDTP=0x0CA2&lt;/code&gt;，&lt;code&gt;base+1&lt;/code&gt; 就是 ACPI 表记录的 &lt;code&gt;ICDP=0x0CA3&lt;/code&gt;。结合寄存器的用途，可以猜测 IDTP 是 IPMI Data Transfer Port 的缩写，因为这个 Port 对应的是 &lt;code&gt;Data_In&lt;/code&gt; 和 &lt;code&gt;Data_Out&lt;/code&gt;；ICDP 是 IPMI Command Data Port 的缩写。&lt;/p&gt;
&lt;h3 id=&#34;arm64-1&#34;&gt;ARM64&lt;/h3&gt;
&lt;p&gt;再看一个 ARM64 平台上的 IPMI：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (IPI0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IPI0001&amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_IFT, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _IFT: IPMI Interface Type
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// BT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_CRS, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceTemplate&lt;/span&gt; ()  &lt;span style=&#34;color:#75715e&#34;&gt;// _CRS: Current Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;QWordMemory&lt;/span&gt; (ResourceConsumer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000000&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000003F00000E4&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000003F00000E7&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000000&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000004&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, , AddressRangeMemory, TypeStatic)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Interrupt&lt;/span&gt; (ResourceConsumer, Level, ActiveHigh, Shared, ,, )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000001E4&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;_IFT&lt;/code&gt; 返回值是 0x3，查阅文档可知这表示的是 BT 类型。&lt;code&gt;_CRS&lt;/code&gt; 中使用了 QWordMemory 宏来描述地址空间，这里实际上就是表示内存地址 &lt;code&gt;0x3F00000E4-0x3F00000E7&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;io-apic&#34;&gt;IO APIC&lt;/h2&gt;
&lt;p&gt;在 DSDT 中，可以找到 IO APIC 的基地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (APIC)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0003&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* IO-APIC Interrupt Controller */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_CRS, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceTemplate&lt;/span&gt; ()  &lt;span style=&#34;color:#75715e&#34;&gt;// _CRS: Current Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Memory32Fixed&lt;/span&gt; (ReadOnly,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFEC00000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Address Base
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00100000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Address Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 IO APIC 基地址是 0xFEC00000，在网上也可以查到同样的结果。实际上，在 Multiple APIC Description Table (MADT) 中也可以找到 IO APIC 的基地址：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[1ECh 0492   1]                Subtable Type : 01 [I/O APIC]
[1EDh 0493   1]                       Length : 0C
[1EEh 0494   1]                  I/O Apic ID : 08
[1EFh 0495   1]                     Reserved : 00
[1F0h 0496   4]                      Address : FEC00000
[1F4h 0500   4]                    Interrupt : 00000000

[1F8h 0504   1]                Subtable Type : 01 [I/O APIC]
[1F9h 0505   1]                       Length : 0C
[1FAh 0506   1]                  I/O Apic ID : 09
[1FBh 0507   1]                     Reserved : 00
[1FCh 0508   4]                      Address : FEC01000
[200h 0512   4]                    Interrupt : 00000018

[204h 0516   1]                Subtable Type : 01 [I/O APIC]
[205h 0517   1]                       Length : 0C
[206h 0518   1]                  I/O Apic ID : 0A
[207h 0519   1]                     Reserved : 00
[208h 0520   4]                      Address : FEC08000
[20Ch 0524   4]                    Interrupt : 00000020

[210h 0528   1]                Subtable Type : 01 [I/O APIC]
[211h 0529   1]                       Length : 0C
[212h 0530   1]                  I/O Apic ID : 0B
[213h 0531   1]                     Reserved : 00
[214h 0532   4]                      Address : FEC10000
[218h 0536   4]                    Interrupt : 00000028

[21Ch 0540   1]                Subtable Type : 01 [I/O APIC]
[21Dh 0541   1]                       Length : 0C
[21Eh 0542   1]                  I/O Apic ID : 0C
[21Fh 0543   1]                     Reserved : 00
[220h 0544   4]                      Address : FEC18000
[224h 0548   4]                    Interrupt : 00000030
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;dma&#34;&gt;DMA&lt;/h2&gt;
&lt;p&gt;继续搜索 &lt;code&gt;_HID&lt;/code&gt;，还可以找到一些传统的设备，比如 DMA Controller：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// DMA Controller
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (DMAC)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0200&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* PC-class DMA Controller */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_CRS, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceTemplate&lt;/span&gt; ()  &lt;span style=&#34;color:#75715e&#34;&gt;// _CRS: Current Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0081&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0081&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0087&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0087&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0089&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0089&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x008F&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x008F&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00C0&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00C0&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;DMA&lt;/span&gt; (Compatibility, NotBusMaster, Transfer8, )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它定义了如下的 IO Port 范围：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0x00-0x0F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;0x81, 0x87, 0x89, 0x8F&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0xC0-0xDE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;寄存器定义可以在 &lt;a href=&#34;https://wiki.osdev.org/ISA_DMA&#34;&gt;ISA DMA - OSDev&lt;/a&gt; 处找到。&lt;/p&gt;
&lt;h2 id=&#34;cmosrtc&#34;&gt;CMOS/RTC&lt;/h2&gt;
&lt;p&gt;经典的 CMOS/RTC 的 IO 端口定义也可以找到：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (RTC)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0B00&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* AT Real-Time Clock */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_CRS, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceTemplate&lt;/span&gt; ()  &lt;span style=&#34;color:#75715e&#34;&gt;// _CRS: Current Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0070&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0070&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0074&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0074&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IRQNoFlags&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_STA, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _STA: Status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; ((STAS &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Else
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它的 IO Port 是 0x70-0x71 和 0x74-0x78，中断号 8，和 &lt;a href=&#34;https://wiki.osdev.org/CMOS&#34;&gt;CMOS - OSDev&lt;/a&gt; 是一致的。&lt;/p&gt;
&lt;h2 id=&#34;启动图片&#34;&gt;启动图片&lt;/h2&gt;
&lt;p&gt;启动图片以 BMP 格式保存在内存中，基地址记录在 BGRT 表中。可以直接从 &lt;code&gt;/sys/firmware/acpi/bgrt/image&lt;/code&gt; 获取启动的图片内容。&lt;/p&gt;
&lt;h2 id=&#34;pcie&#34;&gt;PCIe&lt;/h2&gt;
&lt;h3 id=&#34;root-bridge&#34;&gt;Root Bridge&lt;/h3&gt;
&lt;p&gt;PCIe 总线是自带枚举功能的，所以只需要找到 Root Bridge，其他设备都可以枚举出来。而 ACPI 就提供了寻找 Root Bridge 的方法。&lt;/p&gt;
&lt;p&gt;搜索 &lt;code&gt;PNP0A08&lt;/code&gt; 可以找到 PCIe 总线：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// PCIe Bus 00
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (PC00)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0A08&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* PCI Express Bus */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_CID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0A03&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* PCI Bus */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _CID: Compatible ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (P0RS, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceTemplate&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;WordBusNumber&lt;/span&gt; (ResourceProducer, MinFixed, MaxFixed, PosDecode,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0015&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0016&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0CF8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0CF8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;WordIO&lt;/span&gt; (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0CF7&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0CF8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, , TypeStatic, DenseTranslation)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;WordIO&lt;/span&gt; (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x57FF&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4800&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, , TypeStatic, DenseTranslation)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;DWordMemory&lt;/span&gt; (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000A0000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000BFFFF&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00020000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, , AddressRangeMemory, TypeStatic)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;DWordMemory&lt;/span&gt; (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, _Y00, AddressRangeMemory, TypeStatic)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;DWordMemory&lt;/span&gt; (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFE010000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFE010FFF&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00001000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, , AddressRangeMemory, TypeStatic)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;DWordMemory&lt;/span&gt; (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFD000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFE7FFFFF&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01800000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, , AddressRangeMemory, TypeStatic)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;DWordMemory&lt;/span&gt; (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x70000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x92FFFFFF&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x23000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, , AddressRangeMemory, TypeStatic)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;QWordMemory&lt;/span&gt; (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000000&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000000&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000000&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000000&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000000&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, , AddressRangeMemory, TypeStatic)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_CRS, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _CRS: Current Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;EROM&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (P0RS) &lt;span style=&#34;color:#75715e&#34;&gt;/* \_SB_.PC00.P0RS */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面省略掉了很多内容，只保留了 Root Bridge 的资源 &lt;code&gt;_CRS&lt;/code&gt;，这部分内容和 Linux 的 dmesg 是一致的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ACPI: PCI Root Bridge [PC00] (domain 0000 [bus 00-15])
acpi PNP0A08:00: _OSC: OS supports [ExtendedConfig ASPM ClockPM Segments MSI]
acpi PNP0A08:00: _OSC: platform does not support [SHPCHotplug AER LTR]
acpi PNP0A08:00: _OSC: OS now controls [PCIeHotplug PME PCIeCapability]
acpi PNP0A08:00: host bridge window expanded to [mem 0xfd000000-0xfe7fffff window]; [mem 0xfd000000-0xfe7fffff window] ignored
PCI host bridge to bus 0000:00
pci_bus 0000:00: root bus resource [io  0x0000-0x0cf7 window]
pci_bus 0000:00: root bus resource [io  0x1000-0x57ff window]
pci_bus 0000:00: root bus resource [mem 0x000a0000-0x000bffff window]
pci_bus 0000:00: root bus resource [mem 0x000c4000-0x000c7fff window]
pci_bus 0000:00: root bus resource [mem 0xfd000000-0xfe7fffff window]
pci_bus 0000:00: root bus resource [mem 0x70000000-0x92ffffff window]
pci_bus 0000:00: root bus resource [bus 00-15]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Linux 相关代码在 &lt;code&gt;acpi_pci_root_create&lt;/code&gt; 函数中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; pci_bus &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_pci_root_create&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; acpi_pci_root &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;root,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				     &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; acpi_pci_root_ops &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ops,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				     &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; acpi_pci_root_info &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;info,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				     &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sysdata)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_pci_probe_root_resources&lt;/span&gt;(info);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pci_acpi_root_add_resources&lt;/span&gt;(info);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;pci_add_resource&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;info&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;resources, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;secondary);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	bus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pci_create_root_bus&lt;/span&gt;(NULL, busnum, ops&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pci_ops,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				  sysdata, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;info&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;resources);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mcfg&#34;&gt;MCFG&lt;/h3&gt;
&lt;p&gt;除了上面的 Root Bridge 以外，还有一个很重要的问题是，如何访问 PCIe 的 Configuration Space。传统的办法是通过 IO Port 0xCF8 和 0xCFC，但是这个方法慢，并且有局限性。而较新的办法是 Enhanced Configuration Access Mechanism (ECAM)，把 PCIe 设备的 Configuration Space 映射到内存中，那么就需要一个基地址。这个基地址是在 MCFG 表中给出的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[02Ch 0044   8]                 Base Address : 0000000060000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;内核输出：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PCI: MMCONFIG for domain 0000 [bus 00-ff] at [mem 0x60000000-0x6fffffff] (base 0x60000000)
PCI: MMCONFIG at [mem 0x60000000-0x6fffffff] reserved in E820
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有了这个信息以后，就可以计算出要访问 Configuration Space 时 MMIO 的地址了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_ecam.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;相关文档&#34;&gt;相关文档&lt;/h3&gt;
&lt;p&gt;Linux 的文档 &lt;a href=&#34;https://docs.kernel.org/PCI/acpi-info.html&#34;&gt;ACPI considerations for PCI host bridges&lt;/a&gt; 对 ACPI PCIe 描述的比较详细，摘录如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The general rule is that the ACPI namespace should describe everything the
OS might use unless there’s another way for the OS to find it [1, 2].

For example, there’s no standard hardware mechanism for enumerating PCI host
bridges, so the ACPI namespace must describe each host bridge, the method
for accessing PCI config space below it, the address space windows the host
bridge forwards to PCI (using _CRS), and the routing of legacy INTx
interrupts (using _PRT).

PCI devices, which are below the host bridge, generally do not need to be
described via ACPI. The OS can discover them via the standard PCI
enumeration mechanism, using config accesses to discover and identify
devices and read and size their BARs. However, ACPI may describe PCI devices
if it provides power management or hotplug functionality for them or if the
device has INTx interrupts connected by platform interrupt controllers and a
_PRT is needed to describe those connections.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;文档和上面讲的是一致的，对于 PCIe 自己可以枚举出来的，ACPI 就不需要再重复；但是枚举需要首先知道有哪些 Root Bridge 以及 ECAM 的基地址，这个信息只能由 ACPI 来提供。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The PCIe spec requires the Enhanced Configuration Access Method (ECAM)
unless there’s a standard firmware interface for config access, e.g., the
ia64 SAL interface [7]. A host bridge consumes ECAM memory address space and
converts memory accesses into PCI configuration accesses. The spec defines
the ECAM address space layout and functionality; only the base of the
address space is device-specific. An ACPI OS learns the base address from
either the static MCFG table or a _CBA method in the PNP0A03 device.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这一段讲的其实就是 ECAM 与 MCFG 的关系。&lt;/p&gt;
&lt;h3 id=&#34;pcie-设备&#34;&gt;PCIe 设备&lt;/h3&gt;
&lt;p&gt;虽然有了 Root Bridge 以后，PCIe 总线下的设备都可以枚举出来，但是 ACPI 表中也可以记录 PCIe 设备，可以提供更多信息，例如 Power State 等等。具体来说，只需要在 Root Bridge 的结点下继续增加 Device 就可以了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Scope&lt;/span&gt; (_SB)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (PC00)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 00:00.0 DMI3 Registers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (DMI0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 00:04.0 CBDMA Registers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (CB0A)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00040000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (CB0B)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00040001&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 00:05.0 MM/Vt-d Configuration Registers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (IIM0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00050000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 00:08.0 Ubox Registers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (UBX0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00080000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (ALZA)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000E0000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (DISP)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000F0000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (IHC1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00100000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (IHC2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00100001&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (IIDR)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00100002&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (IMKT)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00100003&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (IHC3)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00100004&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (MRO0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00110000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (MRO1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00110001&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 00:14.0 USB 3.0 xHCI Controller
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (XHCI)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00140000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (OTG0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00140001&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 00:14.2 PCH Thermal Subsystem
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (TERM)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00140002&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (CAMR)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00140003&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (NTHP)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00140004&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 00:16.0 PCH CSME HECI #1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (HEC1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00160000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (HEC2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00160001&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (IDER)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00160002&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (MEKT)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00160003&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (HEC3)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00160004&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (NAN1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00180000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;_ADR&lt;/code&gt; 编码了设备的 Device 和 Function，ACPI 标准 Table 6.2 定义：高 word 表示 Device，低 word 表示 Function。所以上面的 &lt;code&gt;DMI0&lt;/code&gt; 就是 &lt;code&gt;Device=0, Function=0&lt;/code&gt;，&lt;code&gt;CB0A&lt;/code&gt; 就是 &lt;code&gt;Device=4, Function=0&lt;/code&gt;，&lt;code&gt;CB0B&lt;/code&gt; 就是 &lt;code&gt;Device=4, Function=1&lt;/code&gt;。这些与 &lt;code&gt;lspci&lt;/code&gt; 的输出基本是一致的，有一些设备没有出现，可能和具体的 CPU 型号有关：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;00:00.0 Host bridge: Intel Corporation Sky Lake-E DMI3 Registers (rev 07)
00:04.0 System peripheral: Intel Corporation Sky Lake-E CBDMA Registers (rev 07)
00:04.1 System peripheral: Intel Corporation Sky Lake-E CBDMA Registers (rev 07)
00:04.2 System peripheral: Intel Corporation Sky Lake-E CBDMA Registers (rev 07)
00:04.3 System peripheral: Intel Corporation Sky Lake-E CBDMA Registers (rev 07)
00:04.4 System peripheral: Intel Corporation Sky Lake-E CBDMA Registers (rev 07)
00:04.5 System peripheral: Intel Corporation Sky Lake-E CBDMA Registers (rev 07)
00:04.6 System peripheral: Intel Corporation Sky Lake-E CBDMA Registers (rev 07)
00:04.7 System peripheral: Intel Corporation Sky Lake-E CBDMA Registers (rev 07)
00:05.0 System peripheral: Intel Corporation Sky Lake-E MM/Vt-d Configuration Registers (rev 07)
00:05.2 System peripheral: Intel Corporation Sky Lake-E RAS (rev 07)
00:05.4 PIC: Intel Corporation Sky Lake-E IOAPIC (rev 07)
00:08.0 System peripheral: Intel Corporation Sky Lake-E Ubox Registers (rev 07)
00:08.1 Performance counters: Intel Corporation Sky Lake-E Ubox Registers (rev 07)
00:08.2 System peripheral: Intel Corporation Sky Lake-E Ubox Registers (rev 07)
00:14.0 USB controller: Intel Corporation 200 Series/Z370 Chipset Family USB 3.0 xHCI Controller
00:14.2 Signal processing controller: Intel Corporation 200 Series PCH Thermal Subsystem
00:16.0 Communication controller: Intel Corporation 200 Series PCH CSME HECI #1
00:17.0 SATA controller: Intel Corporation 200 Series PCH SATA controller [AHCI mode]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;前面提到的一些传统的设备，比如 DMA Controller，RTC 等，其实就是在 PCIe 下的 ISA bridge 下声明的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Scope&lt;/span&gt; (_SB)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (PC00)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 00:1f.0 ISA bridge: Intel Corporation X299 Chipset LPC/eSPI Controller
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (LPC0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x001F0000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (DMAC)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0200&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* PC-class DMA Controller */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (RTC)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0B00&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* AT Real-Time Clock */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (PIC)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0000&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* 8259-compatible Programmable Interrupt Controller */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (FPU)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0C04&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* x87-compatible Floating Point Processing Unit */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (TMR)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0100&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* PC-class System Timer */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (HPET)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0103&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* HPET System Timer */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;修改-acpi-表内容&#34;&gt;修改 ACPI 表内容&lt;/h2&gt;
&lt;p&gt;想要修改 ACPI 表内容，最根本的办法是修改固件，但是修改起来比较麻烦。Linux 提供了一些方法来运行时打补丁：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/acpi/initrd_table_override.html&#34;&gt;Upgrading ACPI tables via initrd&lt;/a&gt;：覆盖 ACPI 表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/acpi/ssdt-overlays.html&#34;&gt;SSDT Overlays&lt;/a&gt;：添加额外的 SSDT 表，类似 DT Overlay&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在黑苹果中，一般则是在 Bootloader(Clover/OpenCore) 一步把 ACPI 表修改了，如 &lt;a href=&#34;https://elitemacx86.com/threads/how-to-patch-laptop-dsdt-and-ssdts.178/&#34;&gt;How to Patch Laptop DSDT and SSDTs&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;acpi-硬件规范&#34;&gt;ACPI 硬件规范&lt;/h2&gt;
&lt;p&gt;除了用来描述系统中已有的设备，ACPI 还对硬件做出了一些要求，在标准的 Chapter 4 ACPI Hardware Specification 中定义。例如，电源按钮是如何通知操作系统的？操作系统的重启和关机是怎么实现的？&lt;/p&gt;
&lt;h3 id=&#34;电源按钮&#34;&gt;电源按钮&lt;/h3&gt;
&lt;p&gt;首先来看电源按钮（Power Button）。在 ACPI 中，定义了两种 Power Button 的实现方法，第一种就是比较经典的硬件按钮 + 中断的模式，当按下按钮的时候，中断状态（&lt;code&gt;PWRBTN_STS&lt;/code&gt;）拉高，如果此时中断使能（&lt;code&gt;PWRBTN_EN&lt;/code&gt;）也为高，就触发中断。这时候操作系统就知道电源键被按下了，开始进行关机操作。&lt;/p&gt;
&lt;p&gt;第二种实现方法则利用了 ACPI 的可编程性。具体来说，当按下电源键的时候，操作系统会收到一个 SCI（System Control Interrupt），此时操作系统会根据中断编号，去执行 ACPI 中的函数，函数去读取当前的电源键状态，然后调用 &lt;code&gt;Notify&lt;/code&gt; 函数来通知操作系统，电源键被按下了。&lt;/p&gt;
&lt;p&gt;在使用虚拟机的时候，会知道 ACPI Shutdown 的说法，其实就是模拟了按下电源键的行为。QEMU 的相关代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_pm1_evt_power_down&lt;/span&gt;(ACPIREGS &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ar)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ar&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pm1.evt.en &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; ACPI_BITMASK_POWER_BUTTON_ENABLE) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ar&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pm1.evt.sts &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; ACPI_BITMASK_POWER_BUTTON_STATUS;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ar&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tmr.&lt;span style=&#34;color:#a6e22e&#34;&gt;update_sci&lt;/span&gt;(ar);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个函数模拟了电源按钮，如果 &lt;code&gt;PWRBTN_EN=1&lt;/code&gt;，就设置 &lt;code&gt;PWRBTN_STS=1&lt;/code&gt; 并发送 SCI 中断。&lt;/p&gt;
&lt;p&gt;那么，操作系统如何访问 &lt;code&gt;PWRBTN_EN&lt;/code&gt; 和 &lt;code&gt;PWRBTN_STS&lt;/code&gt; 呢？在 FADP(Fixed ACPI Descrption Table) 表中，可以找到 PM1A/B Event Block Address 和 PM1A/B Control Block Address：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[038h 0056   4]     PM1A Event Block Address : 0000B000
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 0000B004
[044h 0068   4]   PM1B Control Block Address : 00000000

[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么就可以通过 IO Port 来访问这些寄存器了。&lt;code&gt;PWNBTN_STS&lt;/code&gt; 属于 PM1 Status Registers，地址是 &lt;code&gt;PM1A/B Event Block Address=0xB000&lt;/code&gt;；&lt;code&gt;PWNBTN_EN&lt;/code&gt; 属于 PM1 Enable Registers，地址是 &lt;code&gt;PM1A/B Event Block Register + PM1 Event Block Length / 2=0xB002&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这里的 PM1A/B 是 Register Grouping，使得硬件上可以把寄存器实现在两个不同的芯片上，分别实现一部分功能。操作系统读取的时候，要读取 A 和 B 然后 OR 起来，写入的时候则是 A 和 B 都要写。像上面的情况，就是只有 A 没有 B，那就直接读写 A 就可以了。&lt;/p&gt;
&lt;h3 id=&#34;关机&#34;&gt;关机&lt;/h3&gt;
&lt;p&gt;另一方面，如果 OS 想要关机，那要怎么告诉硬件呢？还是通过 ACPI。在 PM1 Control Registers 中，可以通过写入 &lt;code&gt;SLP_TYPx&lt;/code&gt; 和 &lt;code&gt;SLP_EN&lt;/code&gt; 字段来进行休眠或者关机操作。&lt;/p&gt;
&lt;p&gt;下面是 QEMU 针对 &lt;code&gt;SLP_EN&lt;/code&gt; 写入的处理代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* ACPI PM1aCNT */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_pm1_cnt_write&lt;/span&gt;(ACPIREGS &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ar, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ar&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pm1.cnt.cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(ACPI_BITMASK_SLEEP_ENABLE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; ACPI_BITMASK_SLEEP_ENABLE) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/* change suspend type */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; sus_typ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (sus_typ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* soft power off */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;qemu_system_shutdown_request&lt;/span&gt;(SHUTDOWN_CAUSE_GUEST_SHUTDOWN);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;qemu_system_suspend_request&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sus_typ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ar&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pm1.cnt.s4_val) { &lt;span style=&#34;color:#75715e&#34;&gt;/* S4 request */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;qapi_event_send_suspend_disk&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;qemu_system_shutdown_request&lt;/span&gt;(SHUTDOWN_CAUSE_GUEST_SHUTDOWN);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pm-timer&#34;&gt;PM Timer&lt;/h3&gt;
&lt;p&gt;ACPI 还提供了一个 3.579545 MHz 的时钟 PM_TMR。QEMU 相关代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* PM Timer ticks per second (HZ) */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PM_TIMER_FREQUENCY  3579545
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64_t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_pm_tmr_get_clock&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;muldiv64&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;qemu_clock_get_ns&lt;/span&gt;(QEMU_CLOCK_VIRTUAL), PM_TIMER_FREQUENCY,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    NANOSECONDS_PER_SECOND);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Linux 也可以把它当成一个时钟源：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-dmesg&#34; data-lang=&#34;dmesg&#34;&gt;clocksource: acpi_pm: mask: 0xffffff max_cycles: 0xffffff, max_idle_ns: 2085701024 ns
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;相关代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * The I/O port the PMTMR resides at.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * The location is detected during setup_arch(),
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * in arch/i386/kernel/acpi/boot.c
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;u32 pmtmr_ioport __read_mostly;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; u32 &lt;span style=&#34;color:#a6e22e&#34;&gt;read_pmtmr&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/* mask the output to 24 bits */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inl&lt;/span&gt;(pmtmr_ioport) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; ACPI_PM_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; u64 &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_pm_read&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; clocksource &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (u64)&lt;span style=&#34;color:#a6e22e&#34;&gt;read_pmtmr&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; clocksource clocksource_acpi_pm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	.name		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;acpi_pm&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	.rating		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	.read		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; acpi_pm_read,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	.mask		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (u64)ACPI_PM_MASK,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	.flags		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CLOCK_SOURCE_IS_CONTINUOUS,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Number of PMTMR ticks expected during calibration run */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PMTMR_TICKS_PER_SEC 3579545
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; __init &lt;span style=&#34;color:#a6e22e&#34;&gt;init_acpi_pm_clocksource&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clocksource_register_hz&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;clocksource_acpi_pm,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;						PMTMR_TICKS_PER_SEC);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gpe&#34;&gt;GPE&lt;/h3&gt;
&lt;p&gt;除了上面 PM1 中提到的一些中断来源，ACPI 还提供了通用的 General Purpose Event，硬件可以自定义一些中断编号，依然是通过 SCI 中断通知操作系统，操作系统根据 GPE 的 STS 寄存器来判断哪个 GPE 触发了中断，然后执行对应的 ACPI 函数。GPE 的地址也是在 FADT 中提供：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[050h 0080   4]           GPE0 Block Address : 0000AFE0

[05Ch 0092   1]            GPE0 Block Length : 04
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 DSDT 的 &lt;code&gt;\_GPE&lt;/code&gt; 下面，可以定义函数，在 GPE 到达的时候，会被操作系统执行。格式是 &lt;code&gt;\_GPE._Exx&lt;/code&gt; 或 &lt;code&gt;\_GPE._Lxx&lt;/code&gt;，E 表示 Edge sensitive，L 表示 Level sensitive。例如操作系统判断收到了 GPE 4，那可能会执行 &lt;code&gt;\_GPE._L04&lt;/code&gt; 或 &lt;code&gt;\_GPE._E04&lt;/code&gt; 函数。&lt;/p&gt;
&lt;h2 id=&#34;pcie-hot-plug&#34;&gt;PCIe Hot Plug&lt;/h2&gt;
&lt;p&gt;在 QEMU 中，如果虚拟机要进行 PCIe Hot Plug 的时候，例如要增加 PCIe 设备，或者删除已有的 PCIe 设备，需要设法通知操作系统，告知操作系统哪个地方有新的设备，或者哪个已有的设备被弹出。QEMU 的实现文档是&lt;a href=&#34;https://www.qemu.org/docs/master/specs/acpi_pci_hotplug.html&#34;&gt;QEMU&amp;lt;-&amp;gt;ACPI BIOS PCI hotplug interface&lt;/a&gt;，这里结合代码来解释一下。&lt;/p&gt;
&lt;p&gt;在 QEMU 中，要插入一个新的 PCIe 设备的时候，按照设备的 bus 和 slot 设置位为 1，并且发送 GPE：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_pcihp_device_plug_cb&lt;/span&gt;(HotplugHandler &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;hotplug_dev, AcpiPciHpState &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               DeviceState &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dev, Error &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;errp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bsel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_pcihp_get_bsel&lt;/span&gt;(bus);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;g_assert&lt;/span&gt;(bsel &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;acpi_pcihp_pci_status[bsel].up &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1U&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; slot);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_send_event&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;DEVICE&lt;/span&gt;(hotplug_dev), ACPI_PCI_HOTPLUG_STATUS);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// acpi_send_event eventually calls piix4_send_gpe
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;piix4_send_gpe&lt;/span&gt;(AcpiDeviceIf &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;adev, AcpiEventStatusBits ev)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PIIX4PMState &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PIIX4_PM&lt;/span&gt;(adev);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_send_gpe_event&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ar, s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;irq, ev);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_send_gpe_event&lt;/span&gt;(ACPIREGS &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ar, qemu_irq irq,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         AcpiEventStatusBits status)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ar&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;gpe.sts[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_update_sci&lt;/span&gt;(ar, irq);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看头文件，可知 &lt;code&gt;ACPI_PCI_HOTPLUG_STATUS=2&lt;/code&gt;，根据上面的代码，可知这实际上就是发送了 GPE1。操作系统会执行 &lt;code&gt;\_GPE._E01&lt;/code&gt; 函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Scope&lt;/span&gt; (_GPE)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ACPI0006&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* GPE Block Device */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_E01, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _Exx: Edge-Triggered GPE, xx=0x00-0xFF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Acquire&lt;/span&gt; (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PCI0.BLCK, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFFF&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PCI0.&lt;span style=&#34;color:#a6e22e&#34;&gt;PCNT&lt;/span&gt; () &lt;span style=&#34;color:#75715e&#34;&gt;// PCIe Notify
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Release&lt;/span&gt; (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PCI0.BLCK)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个代码上了锁，然后调用 &lt;code&gt;\_SB.PCI0.PCNT&lt;/code&gt; 函数，&lt;code&gt;PCNT&lt;/code&gt; 函数定义如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// PCIe Status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;OperationRegion&lt;/span&gt; (PCST, SystemIO, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAE00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Field&lt;/span&gt; (PCST, DWordAcc, NoLock, WriteAsZeros)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PCIU,   &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Up
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    PCID,   &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Down
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// PCIe Notify
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (PCNT, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BNUM &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Zero &lt;span style=&#34;color:#75715e&#34;&gt;// Bus Num = 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;DVNT&lt;/span&gt; (PCIU, One) &lt;span style=&#34;color:#75715e&#34;&gt;// Device Notify
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;DVNT&lt;/span&gt; (PCID, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Device Notify
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码中，PCIU 的意思是 PCIe Up，就是新出现的设备；PCID 的意思是 PCIe Down，就是要删除的设备。PCIU 和 PCID 都要通过 IO Port 访问，根据上面的 &lt;code&gt;OperationRegion&lt;/code&gt; 可知 &lt;code&gt;PCIU=0xAE00&lt;/code&gt;，&lt;code&gt;PCID=0xAE04&lt;/code&gt;。你可能已经猜到了 &lt;code&gt;PCIU&lt;/code&gt; 和 &lt;code&gt;PCID&lt;/code&gt; 的实现：当 CPU 读取这两个 IO Port 的时候，就会返回前面 &lt;code&gt;acpi_pcihp_device_plug_cb&lt;/code&gt; 函数写入的 &lt;code&gt;acpi_pcihp_pci_status&lt;/code&gt; 数组：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pci_read&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;opaque, hwaddr addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (addr) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; PCI_UP_BASE:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;acpi_pcihp_pci_status[bsel].up;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;legacy_piix) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;acpi_pcihp_pci_status[bsel].up &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;trace_acpi_pci_up_read&lt;/span&gt;(val);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; PCI_DOWN_BASE:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;acpi_pcihp_pci_status[bsel].down;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;trace_acpi_pci_down_read&lt;/span&gt;(val);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此在 &lt;code&gt;PCNT&lt;/code&gt; 函数中，读取 &lt;code&gt;PCIU&lt;/code&gt; 和 &lt;code&gt;PCID&lt;/code&gt; 就可以知道一个 Bitmap，记录了哪些设备出现了变化。最后一步就是通知操作系统了。在 ACPI 中，可以调用 &lt;code&gt;Notify&lt;/code&gt; 函数，用于通知操作系统，通知的参数见 Table 5.187，这里列出来前面几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0: Bus Check, This notification is performed on a device object to indicate to OSPM that it needs to perform a Plug and Play re-enumeration operation on the device tree starting from the point where it has been notified&lt;/li&gt;
&lt;li&gt;1: Device Check, Used to notify OSPM that the device either appeared or disappeared. If the device has appeared, OSPM will re-enumerate from the parent.&lt;/li&gt;
&lt;li&gt;2: Device Wake, Used to notify OSPM that the device has signaled its wake event, and that OSPM needs to notify OSPM native device driver for the device.&lt;/li&gt;
&lt;li&gt;3: Eject Request, Used to notify OSPM that the device should be ejected, and that OSPM needs to perform the Plug and Play ejection operation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;PCNT&lt;/code&gt; 函数调用 &lt;code&gt;DVNT&lt;/code&gt; 函数来进行最终的 &lt;code&gt;Notify&lt;/code&gt;，对于 PCI Up，需要发送 1(Device Check) 让操作系统新的设备出现；对于 PCI Down，需要发送 3(Eject Request) 让操作系统弹出设备。这就解释了 &lt;code&gt;PCNT&lt;/code&gt; 为什么要这样实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// PCIe Notify
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (PCNT, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BNUM &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Zero &lt;span style=&#34;color:#75715e&#34;&gt;// Bus Num = 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;DVNT&lt;/span&gt; (PCIU, One) &lt;span style=&#34;color:#75715e&#34;&gt;// Device Notify(1=Device Check)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;DVNT&lt;/span&gt; (PCID, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Device Notify(3=Eject Request)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;DVNT&lt;/code&gt; 的实现方法很粗暴，就是检查各个位，然后发送 &lt;code&gt;Notify&lt;/code&gt; 到相应的 PCIe Slot 上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Device Notify
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (DVNT, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, NotSerialized)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; ((Arg0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Notify&lt;/span&gt; (S18, Arg1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; ((Arg0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Notify&lt;/span&gt; (S20, Arg1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; ((Arg0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Notify&lt;/span&gt; (S28, Arg1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就完成了整个 PCIe Hot Plug 的过程。回顾一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QEMU 要进行 PCIe Hot Plug&lt;/li&gt;
&lt;li&gt;QEMU 记录要 Hot Plug 设备到数组中&lt;/li&gt;
&lt;li&gt;QEMU 发送 GPE&lt;/li&gt;
&lt;li&gt;OS 执行 GPE 1 Handler&lt;/li&gt;
&lt;li&gt;Handler 读取 PCIU/PCID，根据 Bitmap 去 Notify&lt;/li&gt;
&lt;li&gt;OS 根据 Notify 的设备进行对应的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，大部分的工作其实是 QEMU 完成的，OS 只需要在收到 SCI 的时候，判断是 GPE 1 事件，执行对应的处理函数，等待 Notify 的到来。&lt;/p&gt;
&lt;h2 id=&#34;power-state&#34;&gt;Power State&lt;/h2&gt;
&lt;p&gt;ACPI 定义的 Power State：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/acpi_power.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G0-G3: 全局状态，G0 表示正在工作&lt;/li&gt;
&lt;li&gt;S0-S5：睡眠状态，S0 表示正在工作，S5 表示关机&lt;/li&gt;
&lt;li&gt;D0-D3：设备状态&lt;/li&gt;
&lt;li&gt;C0-Cn：CPU 状态&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>InfiniBand 学习笔记</title>
      <link>https://jia.je/hardware/2022/12/06/infiniband-notes/</link>
      <pubDate>Tue, 06 Dec 2022 18:47:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/12/06/infiniband-notes/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/networking/infiniband.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.snia.org/sites/default/files/files2/files2/SDC2013/presentations/Hardware/DavidDeming_Infiniband_Architectural_Overview.pdf&#34;&gt;Infiniband Architecture Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.afs.enea.it/asantoro/V1r1_2_1.Release_12062007.pdf&#34;&gt;InfiniBand Architecture Specification Volume 1 Release 1.2.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cw.infinibandta.org/document/dl/8566&#34;&gt;InfiniBand Architecture Specification Volume 2 Release 1.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cali-doc.unilim.fr/_media/mpi/intel-mpi/infinibandchap42.pdf&#34;&gt;An Introduction to the InfiniBand Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;InfiniBand Network Architecture - MindShare&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/InfiniBand&#34;&gt;ArchWiki - InfiniBand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;概览&#34;&gt;概览&lt;/h2&gt;
&lt;p&gt;InfiniBand 的网络分为两层，第一层是由 End Node 和 Switch 组成的 Subnet，第二层是由 Router 连接起来的若干个 Subnet。有点类似以太网以及 IP 的关系，同一个二层内通过 MAC 地址转发，三层间通过 IP 地址转发。&lt;/p&gt;
&lt;p&gt;在 IB 网络中，End Node 一般是插在结点上的 IB 卡（Host Channel Adapter，HCA）或者是存储结点上的 Target Channel Adapter。End Node 之间通过 Switch 连接成一个 Subnet，由 Subnet Manager 给每个 Node 和 Switch 分配 Local ID，同一个 Subnet 中通过 LID（Local ID）来路由。但是 LID 位数有限，为了进一步扩展，可以用 Router 连接多个 Subnet，此时要通过 GID（Global ID）来路由。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/iba.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ib_am.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;queue-pair&#34;&gt;Queue Pair&lt;/h2&gt;
&lt;p&gt;回顾一下，以太网网卡在传输的时候，涉及到两类队列，分别用于发送和接收，由操作系统来负责维护。当要发送的时候，操作系统向发送队列上插入一项，并提供要发送的数据的指针，然后让网卡自己进行 DMA 并发送；同时，操作系统也会分配一些缓冲区，填入接收队列，当网卡接收到新的数据的时候，就会进行 DMA 把数据填入缓冲区，然后通过中断让操作系统去进行处理。&lt;/p&gt;
&lt;p&gt;在 IB 中，也有类似的概念，就是 Queue Pair（QP），其实就是 Send Queue 和 Receive Queue 成对出现。另外还有 Completion Queue，当请求完成的时候，会在 CQ 上得到结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ib_qp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;transport-functions&#34;&gt;Transport Functions&lt;/h2&gt;
&lt;p&gt;有了 Queue Pair 以后，上层应用就可以进行一些操作了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SEND：发送数据&lt;/li&gt;
&lt;li&gt;RESYNC：同步 PSN&lt;/li&gt;
&lt;li&gt;RDMA WRITE：远程写入内存&lt;/li&gt;
&lt;li&gt;RDMA READ：远程读取内存&lt;/li&gt;
&lt;li&gt;ATOMIC：远程进行内存原子操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有发就有收，接收方需要在 Receive Queue 中准备好接受数据的缓冲区。&lt;/p&gt;
&lt;p&gt;此外，为了在保证安全性以及正确性的前提下，允许 RDMA 操作，应用需要首先进行 Memory Binding 操作，标记哪些内存区域可以通过 RDMA 访问，并且生成一个 &lt;code&gt;R_KEY&lt;/code&gt; 来标记这片内存区域。之后的 RDMA WRITE 和 RDMA READ 需要使用同样的 &lt;code&gt;R_KEY&lt;/code&gt; 来进行访问。&lt;/p&gt;
&lt;h2 id=&#34;transport-services&#34;&gt;Transport Services&lt;/h2&gt;
&lt;p&gt;IB 支持四种 Transport Service，当 QP 在创建的时候，就需要从以下的四种中选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reliable Connection(RC)&lt;/li&gt;
&lt;li&gt;Reliable Datagram(RD)&lt;/li&gt;
&lt;li&gt;Unreliable Datagram(UD)&lt;/li&gt;
&lt;li&gt;Unreliable Connection(UC)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于 IPoIB 等传输其他协议的情况，也可以直接封装：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Raw IPv6 Datagram&lt;/li&gt;
&lt;li&gt;Raw Ethertype Datagram&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;几种 Transport Service 的对比：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ib_comparison.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在编程的时候，需要知道对端的 LID（Local ID）、QPN（Queue Pair Number）和 PSN（Packet Sequence Number），才能进行通信。如果要进行 RDMA，还需要知道 &lt;code&gt;R_Key&lt;/code&gt; 和内存地址。这些信息一般是通过 TCP 来传输的。&lt;/p&gt;
&lt;h2 id=&#34;switches&#34;&gt;Switches&lt;/h2&gt;
&lt;p&gt;在 IB 网络中，交换机用来连接同一个 IB Subnet 中的 End Node。在 Subnet 中，通过 Local ID 来路由，而 Local ID 是由 Subnet Manager 负责分配的。Subnet Manager 扫描网络中的交换机和节点，动态分配 LID，并且根据网络拓扑，计算出交换机的转发表。&lt;/p&gt;
&lt;p&gt;交换机的转发表就是一个 LID 到端口号的映射，可以实现为线性表（数组，下标是 LID）或随机访问表（CAM，用 LID 查端口号）。&lt;/p&gt;
&lt;p&gt;由于 LID 唯一确定了转发路径，所以如果网络有冗余，从一个 End Node 到另一个 End Node 有多条路径，那么为了利用上不同路径的带宽，每条路径都要分配一个 LID。为了简化，在分配的时候，Subnet Manager 会分配一段连续的 LID，具体来说，是 &lt;code&gt;2^{LMC}&lt;/code&gt; 个，LMC 是 LID Mask Control，表示低多少位 Mask 掉属于同一个 Endpoint。例如 Base LID=4，LMC=2，那么实际上分配的 LID 是 &lt;code&gt;{4,5,6,7}&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;opensm 的 LID 分配算法可以在&lt;a href=&#34;https://github.com/linux-rdma/opensm/blob/844ab3b7edaad983449b5d3a4a773088b8daa299/opensm/osm_lid_mgr.c#L290&#34;&gt;代码&lt;/a&gt;中找到。&lt;/p&gt;
&lt;p&gt;LID 是一个 16 位的整数，所以同一个 Subnet 中可以连接的设备数量有限。更多的话就需要多个 Subnet。LID 定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0x0000：Reserved&lt;/li&gt;
&lt;li&gt;0xFFFF：Permissive，目标 QP0&lt;/li&gt;
&lt;li&gt;0x0001-0xBFFF：Unicast&lt;/li&gt;
&lt;li&gt;0xC000-0xFFFE：Multicast&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想要做隔离，可以创建一个 Partition，类似 VLAN 的概念，通过 &lt;code&gt;P_Key&lt;/code&gt; 来判断是否属于同一个 Partition。&lt;/p&gt;
&lt;h2 id=&#34;常用命令&#34;&gt;常用命令&lt;/h2&gt;
&lt;p&gt;常用的可以用来调试 IB 的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ibstat&lt;/li&gt;
&lt;li&gt;ibhosts&lt;/li&gt;
&lt;li&gt;ibswitches&lt;/li&gt;
&lt;li&gt;iblinkinfo&lt;/li&gt;
&lt;li&gt;ibping&lt;/li&gt;
&lt;li&gt;ibdiagnet&lt;/li&gt;
&lt;li&gt;qperf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 qperf/ib_send_lat 可以测量带宽和延迟。一个测试例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以太网（udp_lat）：24.5 us&lt;/li&gt;
&lt;li&gt;IPoIB (udp_lat): 8.7 us&lt;/li&gt;
&lt;li&gt;IB (rc, ib_send_lat): 1.02 us&lt;/li&gt;
&lt;li&gt;IB (rc_lat): 3.6 ~ 4.6 us&lt;/li&gt;
&lt;li&gt;IB (uc_lat): 4.2 ~ 5.5 us&lt;/li&gt;
&lt;li&gt;IB (ud_lat): 5.5 ~ 6.4 us&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>升级 Mellanox 网卡固件</title>
      <link>https://jia.je/hardware/2022/11/23/upgrade-mlnx-firmware/</link>
      <pubDate>Wed, 23 Nov 2022 19:24:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/11/23/upgrade-mlnx-firmware/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近发现有一台机器，插上 ConnectX-4 IB 网卡后，内核模块可以识别到设备，但是无法使用，现象是 &lt;code&gt;ibstat&lt;/code&gt; 等命令都看不到设备。降级 OFED 从 5.8 到 5.4 以后问题消失，所以认为可能是新的 OFED 与比较旧的固件版本有兼容性问题，所以尝试升级网卡固件。升级以后，问题就消失了。&lt;/p&gt;
&lt;h2 id=&#34;安装-mft&#34;&gt;安装 MFT&lt;/h2&gt;
&lt;p&gt;首先，在 &lt;a href=&#34;https://network.nvidia.com/products/adapter-software/firmware-tools/&#34;&gt;https://network.nvidia.com/products/adapter-software/firmware-tools/&lt;/a&gt; 下载 MFT，按照指示解压，安装后，启动 mst 服务，就可以使用 &lt;code&gt;mlxfwmanager&lt;/code&gt; 得到网卡的型号以及固件版本：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Device Type: ConnectX4
Description: Mellanox ConnectX-4 Single Port EDR PCIE Adapter LP
PSID:        DEL2180110032
Versions:    Current
  FW         12.20.1820
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;升级固件&#34;&gt;升级固件&lt;/h2&gt;
&lt;p&gt;从 PSID 可以看到，这是 DELL OEM 版本的网卡，可以在 &lt;a href=&#34;https://network.nvidia.com/support/firmware/dell/&#34;&gt;https://network.nvidia.com/support/firmware/dell/&lt;/a&gt; 处寻找最新固件，注意需要保证 PSID 一致，可以找到这个 PSID 的 DELL 固件地址：https://www.mellanox.com/downloads/firmware/fw-ConnectX4-rel-12_28_4512-06W1HY_0JJN39_Ax-FlexBoot-3.6.203.bin.zip。&lt;/p&gt;
&lt;p&gt;下载以后，解压，然后就可以升级固件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mlxfwmanager -u -i fw-ConnectX4-rel-12_28_4512-06W1HY_0JJN39_Ax-FlexBoot-3.6.203.bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;升级以后重启就工作了。&lt;/p&gt;
&lt;p&gt;考虑到类似的情况之后还可能发生，顺便还升级了其他几台机器的网卡，下面是一个例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Device Type: ConnectX4
Description: ConnectX-4 VPI adapter card; FDR IB (56Gb/s) and 40GbE; dual-port QSFP28; PCIe3.0 x8; ROHS R6
PSID:        MT_2170110021
Versions:    Current
  FW         12.25.1020
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意这里的 PSID 是 MT_ 开头，说明是官方版本。这个型号可以在 &lt;a href=&#34;https://network.nvidia.com/support/firmware/connectx4ib/&#34;&gt;https://network.nvidia.com/support/firmware/connectx4ib/&lt;/a&gt; 找到最新的固件，注意 PSID 要正确，可以找到固件下载地址 &lt;a href=&#34;https://www.mellanox.com/downloads/firmware/fw-ConnectX4-rel-12_28_2006-MCX454A-FCA_Ax-UEFI-14.21.17-FlexBoot-3.6.102.bin.zip&#34;&gt;https://www.mellanox.com/downloads/firmware/fw-ConnectX4-rel-12_28_2006-MCX454A-FCA_Ax-UEFI-14.21.17-FlexBoot-3.6.102.bin.zip&lt;/a&gt;。用同样的方法更新即可。&lt;/p&gt;
&lt;p&gt;还有一个 ConnectX-3 的例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Device Type: ConnectX3
Description: ConnectX-3 VPI adapter card; single-port QSFP; FDR IB (56Gb/s) and 40GigE; PCIe3.0 x8 8GT/s; RoHS R6
PSID:        MT_1100120019
Versions:    Current
  FW         2.36.5150
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ConnectX-3 系列的网卡固件可以在 &lt;a href=&#34;https://network.nvidia.com/support/firmware/connectx3ib/&#34;&gt;https://network.nvidia.com/support/firmware/connectx3ib/&lt;/a&gt; 找，根据 PSID，可以找到固件下载地址是 &lt;a href=&#34;http://www.mellanox.com/downloads/firmware/fw-ConnectX3-rel-2_42_5000-MCX353A-FCB_A2-A5-FlexBoot-3.4.752.bin.zip&#34;&gt;http://www.mellanox.com/downloads/firmware/fw-ConnectX3-rel-2_42_5000-MCX353A-FCB_A2-A5-FlexBoot-3.4.752.bin.zip&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;如果遇到 Mellanox 网卡能识别 PCIe，但是不能使用，可以考虑降级 OFED 或者升级网卡固件。&lt;/p&gt;
&lt;p&gt;可以用 mlxfwmanager 查看 PSID 和更新固件。根据 PSID，判断是 OEM（DELL）版本还是官方版本。如果是 OEM 版本，要到对应 OEM 的固件下载地址找，例如 &lt;a href=&#34;https://network.nvidia.com/support/firmware/dell/&#34;&gt;https://network.nvidia.com/support/firmware/dell/&lt;/a&gt;；如果是官方版，在 &lt;a href=&#34;https://network.nvidia.com/support/firmware/firmware-downloads/&#34;&gt;https://network.nvidia.com/support/firmware/firmware-downloads/&lt;/a&gt; 找。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CXL 学习笔记</title>
      <link>https://jia.je/hardware/2022/11/20/cxl-notes/</link>
      <pubDate>Sun, 20 Nov 2022 23:05:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/11/20/cxl-notes/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/pcie.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;前段时间学习了 PCIe，趁此机会，进一步学习一下密切相关的 CXL。&lt;/p&gt;
&lt;p&gt;CXL 的标准是公开下载的：https://www.computeexpresslink.org/download-the-specification，我目前参考的是 2022 年 8 月 1 日的 CXL 3.0 版本。&lt;/p&gt;
&lt;h2 id=&#34;cxl-设备类型&#34;&gt;CXL 设备类型&lt;/h2&gt;
&lt;p&gt;CXL 对 PCIe 的重要的扩展，一是在于让设备可以和 CPU 实现缓存一致性（CXL.cache），二是可以做远程的内存（CXL.mem）。&lt;/p&gt;
&lt;p&gt;具体下来，CXL 标准主要定义了三类设备：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CXL Type 1: 设备带有与 CPU 一致的缓存，实现 CXL.io 和 CXL.cache&lt;/li&gt;
&lt;li&gt;CXL Type 2: 设备带有自己的内存和与 CPU 一致的缓存，实现 CXL.io，CXL.cache 和 CXL.mem&lt;/li&gt;
&lt;li&gt;CXL Type 3: 设备带有自己的内存，实现 CXL.io 和 CXL.mem&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cxl-传输层&#34;&gt;CXL 传输层&lt;/h2&gt;
&lt;h3 id=&#34;cxlio&#34;&gt;CXL.io&lt;/h3&gt;
&lt;p&gt;CXL.io 基本上就是 PCIe 协议：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CXL.io provides a non-coherent load/store interface for I/O devices. Figure
3-1 shows where the CXL.io transaction layer exists in the Flex Bus layered
hierarchy. Transaction types, transaction packet formatting, credit-based
flow control, virtual channel management, and transaction ordering rules
follow the PCIe* definition; please refer to the “Transaction Layer
Specification” chapter of PCIe Base Specification for details. This chapter
highlights notable PCIe operational modes or features that are used for
CXL.io.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CXL 3.0 速度是 64.0 GT/s，使用 PAM4 编码，对应的是 PCIe 6.0。&lt;/p&gt;
&lt;h3 id=&#34;cxlcache&#34;&gt;CXL.cache&lt;/h3&gt;
&lt;p&gt;CXL.cache 每个方向上有三个 channel：请求，响应和数据。考虑到 Host 和 Device 的传输方向，就是六个 channel：D2H Req，D2H Resp，D2H Data，H2D Req，H2D Resp，H2D Data。在 Data channel 上传输的缓存行大小是 64 字节。&lt;/p&gt;
&lt;p&gt;CXL.cache 的缓存行状态采用的是 MESI。&lt;/p&gt;
&lt;p&gt;CXL.cache 传输有三种模式：68B Flit，256B Flit 和 PBR Flit。&lt;/p&gt;
&lt;p&gt;H2D Request 的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valid&lt;/li&gt;
&lt;li&gt;Opcode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Address[51:6]&lt;/code&gt;: 物理地址&lt;/li&gt;
&lt;li&gt;UQID: Unique Queue ID&lt;/li&gt;
&lt;li&gt;CacheID: Only in 256B Flit&lt;/li&gt;
&lt;li&gt;SPID/DPID: Only in PBR Flit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;D2H Response 的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valid&lt;/li&gt;
&lt;li&gt;Opcode&lt;/li&gt;
&lt;li&gt;UQID: Unique Queue ID&lt;/li&gt;
&lt;li&gt;DPID: Only in PBR Flit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;D2H Data 的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valid&lt;/li&gt;
&lt;li&gt;UQID: Unique Queue ID&lt;/li&gt;
&lt;li&gt;ChunkValid: Only in 68B Flit&lt;/li&gt;
&lt;li&gt;Bogus&lt;/li&gt;
&lt;li&gt;Poison: data is corrupted&lt;/li&gt;
&lt;li&gt;BEP: Only in 256B Flit &amp;amp; PBR Flit&lt;/li&gt;
&lt;li&gt;DPID: Only in PBR Flit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;D2H Request 的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valid&lt;/li&gt;
&lt;li&gt;Opcode&lt;/li&gt;
&lt;li&gt;CQID: Command Queue ID&lt;/li&gt;
&lt;li&gt;NT: Non Temporal&lt;/li&gt;
&lt;li&gt;CacheID: Only in 256B Flit&lt;/li&gt;
&lt;li&gt;Address: 46 位物理地址&lt;/li&gt;
&lt;li&gt;SPID/DPID: Only in PBR Flit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;H2D Response 的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valid&lt;/li&gt;
&lt;li&gt;Opcode&lt;/li&gt;
&lt;li&gt;RspData&lt;/li&gt;
&lt;li&gt;RSP_PRE&lt;/li&gt;
&lt;li&gt;CQID: Command Queue ID&lt;/li&gt;
&lt;li&gt;CacheID: Only in 256B Flit&lt;/li&gt;
&lt;li&gt;DPID: Only in PBR Flit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;H2D Data 的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valid&lt;/li&gt;
&lt;li&gt;CQID: Command Queue ID&lt;/li&gt;
&lt;li&gt;ChunkValid: Only in 68B Flit&lt;/li&gt;
&lt;li&gt;Bogus&lt;/li&gt;
&lt;li&gt;GO-Err&lt;/li&gt;
&lt;li&gt;CacheID: Only in 256B Flit&lt;/li&gt;
&lt;li&gt;DPID: Only in PBR Flit&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;请求类型&#34;&gt;请求类型&lt;/h4&gt;
&lt;p&gt;首先考虑 Host 会发送的请求。&lt;/p&gt;
&lt;p&gt;第一种是 SnpData，例如在 Host 在读取的时候出现缺失，此时需要向 Device 发送 Snoop，获取最新的 Dirty 的 Data，或者让 Device 的缓存行降级为 Shared 状态。&lt;/p&gt;
&lt;p&gt;Device 收到 SnpData 后，如果发现缓存行不在缓存中（状态是 I），会回复一个 RspIHitI；如果缓存行在缓存中且数据没有修改（状态是 S 或者 E），降级到 S，会回复一个 RspSHitSE；如果缓存行是 dirty（状态是 M），可以选择降级到 S，然后回复 RspSFwdM 以及缓存行的数据，也可以选择变成 Invalid，回复 RspIFwdM 以及缓存行的数据。&lt;/p&gt;
&lt;p&gt;可以看到，这些 D2H Response 的 Opcode 的名字格式很有规律，&lt;code&gt;Rsp+A+Hit/Fwd+B&lt;/code&gt;，A 表示新的缓存行状态，B 是原来的缓存行状态，Hit 不附带数据，Fwd 附带数据。&lt;/p&gt;
&lt;p&gt;第二种是 SnpInv，例如 Host 要写入缓存，就要 invalidate 其他缓存。Device 收到以后，可能返回 RspIHitI、RspIHitSE 和 RspIFwdM，分别对应不同的初始状态，最终都是 Invalid 态。&lt;/p&gt;
&lt;p&gt;第三种是 SnpCur，获取当前的缓存行状态。Device 可以修改缓存行状态，但是不建议。可能的返回有 RspIHitI，RspVHitV，RspSHitSE，RspSFwdM，RspIFwdM 和 RspVFwdV。这里的 V 表示 Valid，对应 MESI 中的 MES 三种状态。所以如果缓存行状态不变的话，就是 RspIHitI，RspVHitV 和 RspVFwdV 三种响应。&lt;/p&gt;
&lt;p&gt;再考虑 Device 会发送的请求。首先，请求可以分为四类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read：发送 D2H Request，接收 H2D Response 和 H2D Data&lt;/li&gt;
&lt;li&gt;Read0：发送 D2H Request，接收 H2D Response&lt;/li&gt;
&lt;li&gt;Write：发送 D2H Request，接收 H2D Response，发送 D2H Data，可选接收 H2D Response&lt;/li&gt;
&lt;li&gt;Read0-Write：发送 D2H Request，接收 H2D Response，发送 D2H Data&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;RdCurr(Read)，Device 读取 Host 的缓存行，不造成任何的缓存状态的修改。Device 缓存还是处于 Invalid 状态。&lt;/li&gt;
&lt;li&gt;RdOwn(Read)，Device 读取 Host 的缓存行，可以进入 E 态或者 M 态。Host 响应 GO-Err/GO-I/GO-E/GO-M。&lt;/li&gt;
&lt;li&gt;RdShared(Read)，Device 读取 Host 的缓存行，进入 S 态。Host 响应 GO-Err/GO-I/GO-S。&lt;/li&gt;
&lt;li&gt;RdAny(Read)，Device 读取 Host 的缓存行，进入 M 态，E 态或 S 态。Host 响应 GO-Err/GO-I/GO-S/GO-E/GO-M。&lt;/li&gt;
&lt;li&gt;RdOwnNoData(Read0)，Device 不读取现在缓存行的数据，进入 E 态。一般用于整个缓存行的数据都要更新的情况，所以不需要或许当前缓存行的数据。&lt;/li&gt;
&lt;li&gt;ItoMWr(Read0-Write)，Device 写入新的完整缓存行到 Host 中，并且进入 M 态。Host 响应 GO_WritePull/GO_ERR_WritePull。&lt;/li&gt;
&lt;li&gt;WrCur(Read0-Write)，和 ItoMWr 基本一样，区别在于，如果缓存行命中了，就写入到缓存中；如果缺失了，就写入到内存中。Host 响应 GO_WritePull/GO_ERR_WritePull。&lt;/li&gt;
&lt;li&gt;CLFlush(Read0)，要求 Host Invalidate 一个缓存行。Host 响应 GO-Err/GO-I。&lt;/li&gt;
&lt;li&gt;CleanEvict(Write)，Device 要 Evict 一个 Exclusive 的缓存行。Host 响应 GO_WritePull/GO_WritePull_Drop。&lt;/li&gt;
&lt;li&gt;DirtyEvict(Write)，Device 要 Evict 一个 Modified 的缓存行。Host 响应 GO_WritePull/GO_ERR_WritePull。&lt;/li&gt;
&lt;li&gt;CleanEvictNoData(Write)，Device 要 Evict 一个 Exclusive 的缓存行，但是不传输数据，只用于更新 Snoop Filter。Host 响应 GO-I。&lt;/li&gt;
&lt;li&gt;WrInv(Write)，Write Invalidate Line，向 Host 写入 0-64 字节的数据，并且 Invalidate 缓存。Host 响应 WritePull/GO-Err/GO-I。&lt;/li&gt;
&lt;li&gt;WOWrInv(Write)，Weakly Ordered 版本的 WrInV，写入 0-63 字节的数据。Host 响应 ExtCmp/FastGO_WritePull/GO_ERR_WritePull。&lt;/li&gt;
&lt;li&gt;WOWrInvF(Write)，Weakly Ordered 版本的 WrInv，写入 64 字节的数据。Host 响应 ExtCmp/FastGO_WritePull/GO_ERR_WritePull。&lt;/li&gt;
&lt;li&gt;CacheFlushed(Read0)，告诉 Host 自己的缓存都被清空了，所有缓存行都在 I 状态。Host 响应 GO-I。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;和其他协议的对比&#34;&gt;和其他协议的对比&lt;/h4&gt;
&lt;p&gt;之前在 &lt;a href=&#34;https://jia.je/hardware/2022/05/09/tilelink/#tilelink-cached&#34;&gt;TileLink 总线协议分析&lt;/a&gt; 分析过 TileLink 的缓存一致性实现方法，如果某一个缓存（Master A）出现了缺失，需要经过如下的过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Master A -&amp;gt; Slave: Acquire&lt;/li&gt;
&lt;li&gt;Slave -&amp;gt; Master B: Probe&lt;/li&gt;
&lt;li&gt;Master B -&amp;gt; Slave: ProbeAck&lt;/li&gt;
&lt;li&gt;Slave -&amp;gt; Master A: Grant&lt;/li&gt;
&lt;li&gt;Master A -&amp;gt; Slave: GrantAck&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 TileLink Cached 里面，所有的 Master 都是平等的。而在 CXL 中，需要维护缓存一致性的，有 CPU 内部的各个缓存之间，还有 CPU 和设备之间。而 CXL.cache 主要负责的是与设备的缓存一致性部分，维护缓存一致性的核心是在 CPU 一侧，Host 相当于 TileLink 的 Slave，Device 相当于 TileLink 的 Master A。可以说 CXL.cache 是不对称的缓存一致性协议。&lt;/p&gt;
&lt;p&gt;另一个相关的协议是 &lt;a href=&#34;https://jia.je/hardware/2022/05/16/ace&#34;&gt;ACE 缓存一致性协议&lt;/a&gt;，和 TileLink 类似。&lt;/p&gt;
&lt;p&gt;例如 CXL 中设备读取缓存的时候，出现了缺失，那么需要经过如下的过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Device -&amp;gt; Host: RdShared/RdOwn&lt;/li&gt;
&lt;li&gt;Host -&amp;gt; CPU Caches: Custom Snoop Messages&lt;/li&gt;
&lt;li&gt;Host -&amp;gt; Other CXL Device: SnpData&lt;/li&gt;
&lt;li&gt;Other CXL Device -&amp;gt; Host: RspSHitSE/RspSFwdM&lt;/li&gt;
&lt;li&gt;Host -&amp;gt; Device: GO-S&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，整体的流程也是差不多的。&lt;/p&gt;
&lt;h3 id=&#34;cxlmem&#34;&gt;CXL.mem&lt;/h3&gt;
&lt;p&gt;CXL.mem 用于扩展内存，根据类型的不同，它可能单独使用，也可能和 CXL.cache 配合使用。具体来说，有三种一致性模型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HDM-H(Host-only Coherent)：仅 Type 3 设备，也就是无 CXL.cache&lt;/li&gt;
&lt;li&gt;HDM-D(Device Coherent)：仅 Legacy Type 2 设备，也就是有 CXL.cache&lt;/li&gt;
&lt;li&gt;HDM-DB(Device Coherent using Back-Invalidation)：Type 2 或 Type 3 设备&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 CXL.cache 中，两端是 Host 和 Device；而 CXL.mem，两端是 Master 和 Subordinate。&lt;/p&gt;
&lt;p&gt;从 Master 到 Subordinate 的消息（M2S）有三类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Request(Req)&lt;/li&gt;
&lt;li&gt;Request with Data(RwD)&lt;/li&gt;
&lt;li&gt;Back-Invalidation Response(BIRsp)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从 Subordinate 到 Master 的消息（S2M）有三类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Response without data(NDR, No Data Response)&lt;/li&gt;
&lt;li&gt;Response with Data(DRS, Data Response)&lt;/li&gt;
&lt;li&gt;Back-Invalidation Snoop(BiSnp)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中比较特别的是 Back-Invalidation，这个的目的是让 Device 可以通过 Snoop 修改 Host 中缓存了 Device 内存中的数据的缓存行。&lt;/p&gt;
&lt;p&gt;对于 Type 3 的设备（无 CXL.cache）来说，Device 就是一个扩展的内存，比较简单，只需要支持读写内存就可以了。Host 发送 &lt;code&gt;MemRd*&lt;/code&gt;，Device 响应 MemData；Host 发送 &lt;code&gt;MemWr*&lt;/code&gt;，Device 响应 Cmp。&lt;/p&gt;
&lt;p&gt;对于 Type 2 的设备（有 CXL.cache）来说，Device 既有自己的缓存，又有自己的内存，所以这时候就比较复杂了。例如 Host 在读取数据的时候（MemRd，SnpData/SnpInv/SnpCur），还需要对 Device Cache 进行 Snoop（SnpData/SnpInv/SnpCur），保证缓存的一致性。Host 想要写入数据到 Device Memory 的时候，如果此时 Device Cache 中有 Dirty 数据，需要进行写合并，再把合并后的数据写入到 Device Memory。当 Device 想要从自己的缓存读取数据，又缺失的时候，首先需要判断数据在 Host 端的缓存中，还是在 Device Memory 中，不同的偏置（Bias）模式决定了数据应该放在 Host 还是 Device 的缓存上。Device 要写入数据的时候，如果 Host 中缓存了该缓存行，则需要 Back-Invalidation。为了支持这些场景，CXL.cache 和 CXL.mem 会比较复杂。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PCIe 学习笔记</title>
      <link>https://jia.je/hardware/2022/11/12/pcie-notes/</link>
      <pubDate>Sat, 12 Nov 2022 14:56:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/11/12/pcie-notes/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/pcie.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在知乎上看到 &lt;a href=&#34;https://www.zhihu.com/people/ljgibbs&#34;&gt;LogicJitterGibbs&lt;/a&gt; 的 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/447134701&#34;&gt;资料整理：可以学习 1W 小时的 PCIe&lt;/a&gt;，我跟着资料学习了一下，然后在这里记录一些我学习 PCIe 的笔记。&lt;/p&gt;
&lt;p&gt;下面的图片主要来自 PCIe 3.0 标准以及 MindShare 的 PCIe 3.0 书本。&lt;/p&gt;
&lt;h2 id=&#34;分层&#34;&gt;分层&lt;/h2&gt;
&lt;p&gt;PCIe 定义了三个层：Transaction Layer，Data Link Layer，Physical Layer，和 TCP/IP 四层模型很像。PCIe 也是基于 Packet 传输的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_layer.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;transaction-layer&#34;&gt;Transaction Layer&lt;/h3&gt;
&lt;p&gt;Transaction Layer 的核心是 Transaction Layer Packet(TLP)。TLP 格式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_tlp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;即可选的若干个 Prefix，一个 Header，可选的 Data Payload，可选的 Digest。&lt;/p&gt;
&lt;p&gt;Prefix 和 Header 开头的一个字节是 &lt;code&gt;Fmt[2:0]&lt;/code&gt; 和 &lt;code&gt;Type[4:0]&lt;/code&gt; 字段。Fmt 决定了 header 的长度，有无数据，或者这是一个 Prefix。&lt;/p&gt;
&lt;p&gt;它支持几类 Packet：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Memory: MMIO
&lt;ul&gt;
&lt;li&gt;Read Request(MRd)/Completion(CplD)&lt;/li&gt;
&lt;li&gt;Write Request(MWr): 注意只有 Request，没有 Completion&lt;/li&gt;
&lt;li&gt;AtomicOp Request(FetchAdd/Swap/CAS)/Completion(CplD)&lt;/li&gt;
&lt;li&gt;Locked Memory Read(MRdLk)/Completion(CplDLk): Legacy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IO: Legacy
&lt;ul&gt;
&lt;li&gt;Read Request(IORd)/Completion(CplD)&lt;/li&gt;
&lt;li&gt;Write Request(IOWr)/Completion(Cpl)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Configuration: 访问配置空间
&lt;ul&gt;
&lt;li&gt;Read Request(CfgRd0/CfgRd1)/Completion(CplD)&lt;/li&gt;
&lt;li&gt;Write Request(CfgWr0/CfgWr1)/Completion(Cpl)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Message: 传输 event
&lt;ul&gt;
&lt;li&gt;Request(Msg/MsgD)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;括号里的是 TLP Type，对应了它 Fmt 和 Type 字段的取值。如果 Completion 失败了，原来应该是 CplD/CplDLk 的 Completion 会变成不带数据的 Cpl/CplLk。&lt;/p&gt;
&lt;p&gt;在 PCIe 3.0 标准的表 2-3 中列出了 TLP Type 以及对应的 Fmt 和 Type 编码。&lt;/p&gt;
&lt;p&gt;TLP 路由有三个方法，决定了这个 TLP 目的地是哪里：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Address-based: 32 位或 64 位地址，用于 Memory 和 IO 请求&lt;/li&gt;
&lt;li&gt;ID-based：lspci 看到的地址，也就是 Bus Device Function，用于 Configuration 请求&lt;/li&gt;
&lt;li&gt;Implicit：用于 Message 请求，路由方法：
&lt;ul&gt;
&lt;li&gt;Routed to Root Complex&lt;/li&gt;
&lt;li&gt;Routed by Address: PCIe 3.0 标准中没有用这个路由方法的 Message&lt;/li&gt;
&lt;li&gt;Routed by ID&lt;/li&gt;
&lt;li&gt;Broadcast from Root Complex&lt;/li&gt;
&lt;li&gt;Local - Terminate at Receiver&lt;/li&gt;
&lt;li&gt;Gathered and router to Root Complex&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-link-layer&#34;&gt;Data Link Layer&lt;/h3&gt;
&lt;p&gt;Data Link Layer 的主要功能是进行 TLP 的可靠传输。它在传输 TLP 的时候，会在开头加上一个两字节的 Sequence Number，最后加上一个四字节的 LCRC（Link CRC）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_tlp_link.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;除了传输 TLP，Data Link Layer 还会传输 Data Link Layer Packet(DLLP)，类型包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ack DLLP: 告诉对方自己已经成功收到了 TLP&lt;/li&gt;
&lt;li&gt;Nak DLLP：告诉对方自己接收 TLP 失败，请重试&lt;/li&gt;
&lt;li&gt;InitFC1/InitFC2/UpdateFC DLLPs：流量控制&lt;/li&gt;
&lt;li&gt;PM_Enter_L1/PM_Enter_L23/PM_Active_State_Request_L1/PM_Request_Ack：用于电源管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Data Link Layer 收到上层要发送 TLP 时候，首先拼接 Sequence Number 和 LCRC，然后会保存在 retry buffer 中，通过 Physical Layer 发送。从 Physical Layer 收到新的 TLP/DLLP 时，会检查它的完整性（CRC），如果正确，就向发送方发送一个 Ack DLLP，并把 TLP 提交给 Transaction Layer；如果不正确，就向发送方发送一个 Nak DLLP。如果收到了 Ack DLLP，就可以把相应的 TLP 从 retry buffer 中删掉；如果收到了 Nak DLLP，则要重传。这样就实现了 TLP 的可靠传输。&lt;/p&gt;
&lt;p&gt;需要注意的是，TLP 和 DLLP 的区别：TLP 就像 IP，目的地址可能会跨越多跳；而 DLLP 是点对点地工作，所以一个 TLP 在转发的每一跳中，接受方都会发送一次 Ack DLLP。&lt;/p&gt;
&lt;p&gt;Data Link Layer 的流量是 Credit-based 的：接受方会告诉发送方自己的 Buffer 还有多少空间（Credit），然后发送方根据 Credit 来控制是否继续发送 TLP。&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;p&gt;接触 PCIe 的时候可能会有一个疑惑，就是这些 Bus Device Function 都是怎么分配的，分配完之后，访问请求又是怎么路由的。&lt;/p&gt;
&lt;h3 id=&#34;路由&#34;&gt;路由&lt;/h3&gt;
&lt;p&gt;首先回顾一下，上面提到了 TLP 的 Memory 和 IO 是根据地址路由，Configuration 是根据 Bus Device Function 路由，而 PCIe 大概是一个树形的结构，叶子结点就是 PCIe 设备，非叶子结点是桥或者交换机。回想一下，IP 的路由是按照最长前缀匹配，如果在 PCIe 中还这样做的话，又太过于复杂了，毕竟 PCIe 可以人为地设定每个设备的地址，让地址满足一定的连续性和局部性，这样路由选择就非常简单了。&lt;/p&gt;
&lt;p&gt;观察 PCIe 标准中 7.3.3 Configuration Request Routing Rules，结合 MindShare 的书，看 Root Ports，Switches 和 Bridges 的要求，就知道 Configuration 请求是如何路由的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Configuration 请求只能由 Host Bridge 发起&lt;/li&gt;
&lt;li&gt;如果 Configuration 请求是 Type0，那么这个请求的目的设备就是当前设备&lt;/li&gt;
&lt;li&gt;如果 Configuration 请求是 Type1，
&lt;ul&gt;
&lt;li&gt;如果请求的 Bus Number 等于某一个 Downstream Port 的 Secondary Bus Number，则把 Configuration 请求转换为 Type0，然后发给该 Downstream Port&lt;/li&gt;
&lt;li&gt;如果不等于，但是 Bus Number 属于某一个 Downstream Port 的 Secondary Bus Number 和 Subordinate Bus Number 之间，则不修改 Configuration 请求，发送给该 Downstream Port。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果类比一下 IP，那么分组在中途路由器转发的时候就是 Type1，Type0 就是最后一跳。路由就是直接按照几个不重合的 Bus Number 区间进行判断，没有复杂的最长前缀匹配。但是又有一个问题，如果按照 Bus 路由，那同一个 Bus 下不同的 Device 咋办？这就像是以太网，最后一跳的时候，如果同一个链路上有多个设备，那么多个设备都能收到，每个设备根据自己的 Device 号判断是否是发给自己的。PCI（注意不是 PCIe）总线也类似。随着速度越来越高，通过交换机，以太网已经变成了点对点，所以很少见到一个链路上同时有多个设备的情况了。PCIe 也一样，所以根据 Bus 路由就足够了。至于 lspci 看到的那些 Device 不等于 0 的设备，要么是兼容 PCI 设备的，要么是虚拟的，在设备内部进行路由的，并不是真的有一个 PCIe link 连了多个物理设备。&lt;/p&gt;
&lt;p&gt;所以简单理解一下，PCI 总线确实是一条总线，一条总线上很多设备。而 PCIe 实际上是一个网络，可以看作是很多个 PCI 总线连接在一起，可以把 Root Complex 或者 Switch 内部看成一个虚拟的有很多设备的 PCI 总线，而 PCIe Link 可以看成是只有一个设备的 PCI 总线。这样 PCIe 交换机可以看成若干个 PCI-PCI Bridge：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_bridge.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;还有 MindShare 书中的图 3-5:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_system.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，这里的每一个 Bus 就是一个 PCI 总线，既有内部的虚拟 PCI 总线（Bus 0/2/6），也有 PCIe Link 充当的 PCI 总线（Bus 1/3/4/5/7/8/9）。在虚拟的 PCI 总线里，比如 PCIe Switch，一个 Device 对应一个 Downstream Port；而 PCIe Link 对应的 PCI 总线上就只有一个 Device。然后 PCIe Switch 的每个 Upstream Port 和 Downstream Port 里会记录三个 Bus Number：Primary(Pri)，Secondary(Sec) 和 Subordinate(Sub)。Primary 指的就是它上游直接连接的 PCI 总线编号，Sec 指的是下游直接连接的 PCI 总线编号，Sub 指的是它下游的最大 PCI 总线编号。&lt;/p&gt;
&lt;p&gt;这样，收到 Type1 的时候，Switch 按照各个 Downstream Port 的 Sec 和 Sub 进行判断，如果目标 Bus Number 等于 Sec，就转换为 Type0 发出去；如果大于 Sec，但是小于或等于 Sub，就原样发出去。可以看到，从 Host Bridge 到每个设备都可以通过这样的方式一路转发。&lt;/p&gt;
&lt;p&gt;既然 BDF 是把 Bus 划分为多个区间来路由的，那么 Memory 和 IO 请求也类似地可以对地址进行划分，变成多个区间，然后用类似的方法进行路由。&lt;/p&gt;
&lt;p&gt;这些用于路由的区间上下界，可以在各个端口的 Type1 Configuration Space 中找到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_type1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路由 Type1 Configuration Request：Primary Bus Number, Secondary Bus Number, Subordinate Bus Number
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Request Bus Number == Secondary Bus Number&lt;/code&gt;: Type1 -&amp;gt; Type0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Secondary Bus Number &amp;lt; Request Bus Number &amp;lt;= Subordinate Bus Number&lt;/code&gt;: Type1 -&amp;gt; Type1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;路由 IO Request：&lt;code&gt;I/O Base &amp;lt;= IO Address &amp;lt;= I/O Limit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;路由 Prefetchable Memory Request：&lt;code&gt;Prefetchable Memory Base &amp;lt;= Memory Address &amp;lt;= Prefetchable Memory Limit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;路由 Non-Prefetchable Memory Request：&lt;code&gt;Memory Base &amp;lt;= Memory Address &amp;lt;= Memory Limit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而具体到每一个设备上，设备会提供若干个 BAR（Base Address Register），在枚举设备的时候，会给 BAR 分配地址，然后把设备的地址进行合并，记录到 Switch 上的 Base 和 Limit，然后一直递归，一路更新到 Root Complex。这样，就完成了地址分配，以及请求的路由。&lt;/p&gt;
&lt;h3 id=&#34;分配&#34;&gt;分配&lt;/h3&gt;
&lt;p&gt;既然知道了 BDF 是如何路由的，那么接下来的问题是，怎么枚举设备和交换机，分配 Bus Number。这个事情在系统启动的时候会做（例如 UEFI），Linux 中也有相关的代码。下面就来对着 &lt;a href=&#34;https://github.com/tianocore/edk2&#34;&gt;edk2&lt;/a&gt; 的源代码来看看它是怎么做的。&lt;/p&gt;
&lt;p&gt;在 edk2 中，分配 Bus Number 的核心代码是 &lt;code&gt;PciScanBus&lt;/code&gt; 函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  Scan pci bus and assign bus number to the given PCI bus system.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  @param  Bridge           Bridge device instance.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  @param  StartBusNumber   start point.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  @param  SubBusNumber     Point to sub bus number.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  @param  PaddedBusRange   Customized bus number.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  @retval EFI_SUCCESS      Successfully scanned and assigned bus number.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  @retval other            Some error occurred when scanning pci bus.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  @note   Feature flag PcdPciBusHotplugDeviceSupport determine whether need support hotplug.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EFI_STATUS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PciScanBus&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IN PCI_IO_DEVICE  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Bridge,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IN UINT8          StartBusNumber,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  OUT UINT8         &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SubBusNumber,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  OUT UINT8         &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PaddedBusRange
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  );
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输入一个桥设备和初始的 Bus Number，输出 Subordinate Bus Number，也就是分配的最大的 Bus Number，以及 Padded Bus Range，例如如果要考虑热插拔的话，就需要预留一些 Bus Number。它在 &lt;code&gt;PciRootBridgeEnumerator&lt;/code&gt; 函数中被调用，传入的是 RootBridgeDev。你可能也猜到了，这个函数可以递归调用，从 Root Bridge 开始往下，遇到新的桥设备的时候，就继续递归，然后根据下一层分配的 Bus Number 来计算上一层的 Subordinate Bus Number。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PciScanBus&lt;/code&gt; 首先枚举当前桥设备下的所有 Device 和 Function，因为当前的桥设备已经被分配了 Bus Number，所以是可以访问它下面的 Device 和 Function 的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (Device &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; Device &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; PCI_MAX_DEVICE; Device&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TempReservedBusNum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (Func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; Func &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; PCI_MAX_FUNC; Func&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Check to see whether a pci device is present
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PciDevicePresent(PciRootBridgeIo, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Pci, StartBusNumber, Device, Func);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EFI_ERROR(Status) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (Func &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// go to next device if there is no Function 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EFI_ERROR(Status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Get the PCI device information
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PciSearchDevice(Bridge, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Pci, StartBusNumber, Device, Func, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;PciDevice);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EFI_ERROR(Status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PciAddress &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EFI_PCI_ADDRESS(StartBusNumber, Device, Func, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (IS_PCI_BRIDGE(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Pci) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; IS_CARDBUS_BRIDGE(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Pci)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// For PPB
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciAllocateBusNumber(Bridge, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SubBusNumber, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, SubBusNumber);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EFI_ERROR(Status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      SecondBus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SubBusNumber;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Register &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (UINT16)((SecondBus &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (UINT16)StartBusNumber);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EFI_PCI_ADDRESS(StartBusNumber, Device, Func,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                PCI_BRIDGE_PRIMARY_BUS_REGISTER_OFFSET);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciRootBridgeIo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Pci.Write(PciRootBridgeIo, EfiPciWidthUint16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          Address, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Register);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// If it is PPB, recursively search down this bridge
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (IS_PCI_BRIDGE(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Pci)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Temporarily initialize SubBusNumber to maximum bus number to ensure
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// the PCI configuration transaction to go through any PPB
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        Register &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciGetMaxBusNumber(Bridge);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EFI_PCI_ADDRESS(StartBusNumber, Device, Func,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  PCI_BRIDGE_SUBORDINATE_BUS_REGISTER_OFFSET);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciRootBridgeIo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Pci.Write(PciRootBridgeIo, EfiPciWidthUint8,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                            Address, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Register);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciScanBus(PciDevice, SecondBus, SubBusNumber, PaddedBusRange);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EFI_ERROR(Status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Set the current maximum bus number under the PPB
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      Address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EFI_PCI_ADDRESS(StartBusNumber, Device, Func,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                PCI_BRIDGE_SUBORDINATE_BUS_REGISTER_OFFSET);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciRootBridgeIo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Pci.Write(PciRootBridgeIo, EfiPciWidthUint8,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          Address, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, SubBusNumber);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// It is device. Check PCI IOV for Bus reservation
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Go through each function, just reserve the MAX ReservedBusNum for one
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// device
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// OMITTED
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((Func &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;IS_PCI_MULTI_FUNC(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Pci)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Skip sub functions, this is not a multi function device
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCI_MAX_FUNC;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从代码中去掉了一些热插拔相关的代码，简单来说，它的思路如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;枚举当前设备下的 Device 和 Function&lt;/li&gt;
&lt;li&gt;如果找到了一个桥设备，为它分配一个新的 Bus Number
&lt;ol&gt;
&lt;li&gt;设置这个新的桥设备的 Primary Bus Number 为 Start Bus Number（也就是上一级的 Secondary Bus Number），Secondary Bus 是新分配的 Bus Number，Subordinate Bus Number 是最大值&lt;/li&gt;
&lt;li&gt;这样设置完成后，相当于所有的在 &lt;code&gt;[Secondary Bus Number, Max Bus Number]&lt;/code&gt; 范围中的 Bus 请求都会路由到新的桥设备上&lt;/li&gt;
&lt;li&gt;递归调用 PciScanBus，参数是新的桥设备，Start Bus Number 为新的 Secondary Bus Number&lt;/li&gt;
&lt;li&gt;递归调用返回以后，新的桥设备下面所有的设备都分配到了自己的 Bus Number，这时候就可以知道准确的 Subordinate Bus Number 了，不再是刚才临时设置的 Max Bus Number，因此这时候再把准确的 Subordinate Bus Number 写入桥设备的 Subordinate Bus Number 中&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;枚举完所有设备以后，返回目前递归分配得到的最大的 Bus Number&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样整理出来一看，其实很清楚，这就是一个 DFS 算法，在搜索过程中，为了保证当前的结点可达，保证从 Root Bridge 到当前的结点路径上的 Bus Number 范围都是 &lt;code&gt;[Secondary Bus Number, Max Bus Number]&lt;/code&gt;；当结点搜索完以后，再回溯，回溯的时候就知道了实际分配到多大的 Bus Number，这时候再填回 Subordinate Bus Number，最后保证这个树上每一层的 &lt;code&gt;[Secondary Bus Number, Subordinate Bus Number]&lt;/code&gt; 区间不重合，且每个子结点的区间都包含于父结点的区间。&lt;/p&gt;
&lt;p&gt;最后的结果，类似 MindShare 书中的这个图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_enum.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;为了支持 PCIe 热插拔，或者可能会动态产生新设备的 SR-IOV，代码中做了相应的预留：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (FeaturePcdGet(PcdPciBusHotplugDeviceSupport)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// If Hot Plug is supported,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Get the bridge information
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  BusPadding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FALSE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (gPciHotPlugInit &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (IsPciHotPlugBus(PciDevice)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// If it is initialized, get the padded bus range
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gPciHotPlugInit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetResourcePadding(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          gPciHotPlugInit, PciDevice&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;DevicePath, PciAddress, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;State,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (VOID &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Descriptors, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Attributes);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EFI_ERROR(Status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      BusRange &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      NextDescriptors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Descriptors;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciGetBusRange(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;NextDescriptors, NULL, NULL, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;BusRange);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      FreePool(Descriptors);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;EFI_ERROR(Status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        BusPadding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TRUE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt; (Status &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; EFI_NOT_FOUND) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// EFI_NOT_FOUND is not a real error. It indicates no bus number padding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// requested.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (FeaturePcdGet(PcdPciBusHotplugDeviceSupport) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; BusPadding) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Ensure the device is enabled and initialized
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((Attributes &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; EfiPaddingPciRootBridge) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ((State &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; EFI_HPC_STATE_ENABLED) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ((State &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; EFI_HPC_STATE_INITIALIZED) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PaddedBusRange &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (UINT8)((UINT8)(BusRange) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PaddedBusRange);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Reserve the larger one between the actual occupied bus number and padded
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// bus number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciAllocateBusNumber(PciDevice, SecondBus, (UINT8)(BusRange),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;PaddedSubBus);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EFI_ERROR(Status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SubBusNumber &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MAX(PaddedSubBus, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SubBusNumber);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SR-IOV:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// It is device. Check PCI IOV for Bus reservation
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Go through each function, just reserve the MAX ReservedBusNum for one device
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (PcdGetBool(PcdSrIovSupport) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (PciDevice&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SrIovCapabilityOffset &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (TempReservedBusNum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; PciDevice&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ReservedBusNum) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciAllocateBusNumber(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PciDevice, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SubBusNumber,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (UINT8)(PciDevice&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ReservedBusNum &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; TempReservedBusNum), SubBusNumber);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EFI_ERROR(Status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TempReservedBusNum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciDevice&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ReservedBusNum;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Func &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      DEBUG((DEBUG_INFO, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PCI-IOV ScanBus - SubBusNumber - 0x%x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SubBusNumber));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      DEBUG((DEBUG_INFO, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PCI-IOV ScanBus - SubBusNumber - 0x%x (Update)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SubBusNumber));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;分配好 Bus 以后，就可以对所有设备进行 Configuration Request 了，后续的 Memory 和 IO 地址的分配和路由，也是类似地递归地进行分配，然后回溯的时候合并地址区间即可。&lt;/p&gt;
&lt;h2 id=&#34;物理层&#34;&gt;物理层&lt;/h2&gt;
&lt;p&gt;物理层编码上，PCIe 1.0 和 2.0 采用的是 NRZ 8b/10b，PCIe 3.0 到 5.0 用的是 NRZ 128b/130b，最新的 PCIe 6.0 和 7.0 则换成了 PAM4 FLIT。可以计算出每一代 x16 Lane 情况下的最大数据带宽：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PCIe 1.0: &lt;code&gt;2.5 * 8 / 10 * 16 = 32 Gb/s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PCIe 2.0: &lt;code&gt;5.0 * 8 / 10 * 16 = 64 Gb/s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PCIe 3.0: &lt;code&gt;8.0 * 128 / 130 * 16 = 126 Gb/s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PCIe 4.0: &lt;code&gt;16.0 * 128 / 130 * 16 = 252 Gb/s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PCIe 5.0: &lt;code&gt;32.0 * 128 / 130 * 16 = 504 Gb/s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PCIe 6.0: &lt;code&gt;64.0 * 16 = 1024 Gb/s&lt;/code&gt;，如果考虑 FLIT 引入的开销，则是 &lt;code&gt;64.0 * 242 / 256 * 16 = 968 Gb/s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PCIe 7.0: &lt;code&gt;128.0 * 16 = 2048 Gb/s&lt;/code&gt;，如果考虑 FLIT 引入的开销，则是 &lt;code&gt;128.0 * 242 / 256 * 16 = 1936 Gb/s&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pcie-60&#34;&gt;PCIe 6.0&lt;/h2&gt;
&lt;p&gt;PCIe 6.0 引入了 PAM4 来替代原来的 NRZ，实现了波特率不变的情况下速度翻倍，并且不再使用 128b/130b，为了解决 PAM4 带来的更高的错误率，引入了 FEC，CRC 还有格雷码，以及新的 FLIT。&lt;/p&gt;
&lt;p&gt;网上可以搜到关于 PCIe 的 PPT：https://pcisig.com/sites/default/files/files/PCIe%206.0%20Webinar_Final_.pdf 和 &lt;a href=&#34;https://www.openfabrics.org/wp-content/uploads/2022-workshop/2022-workshop-presentations/206_DDasSharma.pdf&#34;&gt;https://www.openfabrics.org/wp-content/uploads/2022-workshop/2022-workshop-presentations/206_DDasSharma.pdf&lt;/a&gt;，以及关于 FLIT 的博客：https://pcisig.com/blog/pcie%C2%AE-60-specification-webinar-qa-deeper-dive-flit-mode-pam4-and-forward-error-correction-fec&lt;/p&gt;
&lt;p&gt;总结 FLIT 的要点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个 FLIT 固定长度 256 字节，其中 236 字节传输 TLP，6 字节传输 DLLP，8 字节传输 CRC，6 字节传输 FEC。&lt;/li&gt;
&lt;li&gt;接受方接受到 FLIT 后，会尝试进行 FEC 解码，并且尝试修复错误，再进行 CRC 校验。如果中途出现了错误，则会发送一个 NAK 给发送方。&lt;/li&gt;
&lt;li&gt;一个 TLP 可能跨越多个 FLIT，一个 FLIT 可能包括多个 TLP，根据 TLP 大小而定。TLP 不需要对齐到 FLIT 的开头或者结尾。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以发现，FLIT 的 CRC 用了 8 个字节，不再需要原来 TLP 和 DLLP 中的 ECRC 和 LCRC。在之前的 PCIe 版本，TLP 的可选 Digest 是 4 个字节的 ECRC，TLP+DLLP 的 LCRC 是 4 字节。具体采用多少字节的 CRC，和目标的错误率，以及传输的字节数相关。&lt;/p&gt;
&lt;h2 id=&#34;ats&#34;&gt;ATS&lt;/h2&gt;
&lt;p&gt;ATS（Address Translation Service）是在 PCIe 上给外设提供查询页表的方式，从而可以使用虚拟地址。标准可以在 &lt;a href=&#34;https://composter.com.ua/documents/ats_r1.1_26Jan09.pdf&#34;&gt;https://composter.com.ua/documents/ats_r1.1_26Jan09.pdf&lt;/a&gt; 处下载，以及关于 ATS 的 PPT：https://composter.com.ua/documents/Address_Translation_Services.pdf。&lt;/p&gt;
&lt;p&gt;它的整体工作方式如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_ats.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;就是在 Root Complex 和 Memory 之间设置一个 Translation Agent，负责查表，也就是 Page Table Walker。它会接收来自 PCIe 设备的地址翻译请求，然后它获取到页表地址后，根据虚拟地址去查内存中的页表。TLB（在标准中叫做 Address Translation Cache，ATC）是实现在 PCIe 设备侧的，而不是统一的 TLB，也不是 CPU 核心的 TLB。&lt;/p&gt;
&lt;p&gt;为了支持 ATS，需要支持如下的操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PCIe Device 向 Translation Agent 发送 Translation Request；Translation Agent 向 PCIe Device 回复 Translation Completion；&lt;/li&gt;
&lt;li&gt;当页表出现变化的时候，需要通知 PCIe 设备端的 TLB，因此需要向 PCIe 设备发送 Invalidate Request Message；PCIe 设备完成 TLB 刷新后，回复一个 Invalidate Complete Message。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ATS 标准还定义了一个可选功能，就是 Page Request Interface（PRI），其实就是缺页的时候，设备可以去发送 Page Request，要求操作系统去分配一个物理页。这就像用户程序里 mmap 一个匿名的页，一开始是没有分配的，直到第一次访问的时候，出现缺页异常，然后 OS 分配一个物理页，再更新页表。这样的好处是用于 DMA 的物理页也可以 Swap 或者延迟分配。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 ppc64le Linux 上运行 Nix</title>
      <link>https://jia.je/software/2022/10/29/nix-on-ppc64le/</link>
      <pubDate>Sat, 29 Oct 2022 18:54:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/10/29/nix-on-ppc64le/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;之前尝试过在 ppc64le 的机器上运行 Nix，当时的尝试是把代码克隆下来编译，我还写了一个 Docker 脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Based on https://github.com/NixOS/nix/issues/6048&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Build nixos/nix from source&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ubuntu:20.04&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/ports.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g&amp;#39;&lt;/span&gt; /etc/apt/sources.list&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt-get update&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; DEBIAN_FRONTEND&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;noninteractive apt-get install -y &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    autoconf-archive autoconf automake pkg-config build-essential git gcc g++ jq libboost-all-dev libcrypto++-dev libcurl4-openssl-dev &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    libssh-dev libarchive-dev libsqlite3-dev libbz2-dev wget liblzma-dev libbrotli-dev libseccomp-dev bison flex libsodium-dev libgc-dev &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    libgtest-dev libgmock-dev cmake unzip&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install editline - newer version required&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; wget https://github.com/troglobit/editline/releases/download/1.17.1/editline-1.17.1.tar.xz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; tar xf editline-1.17.1.tar.xz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root/editline-1.17.1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; ./configure --prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; make all&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; make install&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install lowdown - not available via apt&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; wget https://github.com/kristapsdz/lowdown/archive/refs/tags/VERSION_0_10_0.tar.gz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; tar xf VERSION_0_10_0.tar.gz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root/lowdown-VERSION_0_10_0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; ./configure&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; make all&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; make install  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install nlohmann_json - newer version required&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; wget https://github.com/nlohmann/json/archive/refs/tags/v3.10.5.tar.gz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; tar xf v3.10.5.tar.gz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root/json-3.10.5&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; mkdir build&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root/json-3.10.5/build&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; cmake .. &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make -j&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;nproc&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; make install&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; wget https://github.com/nlohmann/json/releases/download/v3.10.5/include.zip &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; unzip include.zip&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; mv include/nlohmann/* /usr/local/include/nlohmann/&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Compile &amp;amp; build nix&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; git clone -b 2.8.1 https://github.com/NixOS/nix.git&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root/nix&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; ./bootstrap.sh&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; ./configure&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; make -j&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;nproc&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; make install -k &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; true&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是发现问题在于，离开了 nix install 脚本，我并不知道如何配置一个 multi-user install。但是官方的 nix install 脚本会报错，因为没有 ppc64le 的 prebuilt tarball。&lt;/p&gt;
&lt;h2 id=&#34;解决办法&#34;&gt;解决办法&lt;/h2&gt;
&lt;h3 id=&#34;binarytarballcross-方法&#34;&gt;binaryTarballCross 方法&lt;/h3&gt;
&lt;p&gt;该方法学自 @NickCao，在 NixOS/nix 的 flake 中，有生成 tarball 的方法，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix build &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.#hydraJobs.binaryTarballCross.x86_64-linux.armv7l-linux&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以在 x86_64-linux 的 host 上，交叉编译生成一个用于 armv7l-linux 的安装 tarball。类似地，可以修改 flake.nix 来加入其他架构，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git a/flake.nix b/flake.nix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index cc2a48d9c..c55a267e2 100644
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- a/flake.nix
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ b/flake.nix
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -21,7 +21,7 @@
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;       linuxSystems = linux64BitSystems ++ [ &amp;#34;i686-linux&amp;#34; ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       systems = linuxSystems ++ [ &amp;#34;x86_64-darwin&amp;#34; &amp;#34;aarch64-darwin&amp;#34; ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-      crossSystems = [ &amp;#34;armv6l-linux&amp;#34; &amp;#34;armv7l-linux&amp;#34; ];
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+      crossSystems = [ &amp;#34;armv6l-linux&amp;#34; &amp;#34;armv7l-linux&amp;#34; &amp;#34;powerpc64le-linux&amp;#34; &amp;#34;riscv64-linux&amp;#34; ];
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       stdenvs = [ &amp;#34;gccStdenv&amp;#34; &amp;#34;clangStdenv&amp;#34; &amp;#34;clang11Stdenv&amp;#34; &amp;#34;stdenv&amp;#34; &amp;#34;libcxxStdenv&amp;#34; &amp;#34;ccacheStdenv&amp;#34; ];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就可以用下面的命令来生成 riscv64-linux 和 powerpc64le-linux 架构的安装 tarball 了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix build &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.#hydraJobs.binaryTarballCross.x86_64-linux.powerpc64le-linux&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix build &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.#hydraJobs.binaryTarballCross.x86_64-linux.riscv64-linux&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成的 tarball 可以在 result 中找到。&lt;/p&gt;
&lt;h3 id=&#34;手动替换法&#34;&gt;手动替换法&lt;/h3&gt;
&lt;p&gt;因此，我在网上进行搜索，发现 &lt;a href=&#34;https://discourse.nixos.org/t/getting-started-with-nix-on-ppc64le/12712/8?u=jiegec&#34;&gt;Getting started with Nix on ppc64le&lt;/a&gt; 中有人提到，可以先在 x86 的机器上交叉编译出 ppc64le 的 nix，然后把 nix tarball 中的 x86 nix 替换成 ppc64le 版本，再复制到 ppc64le 上安装，其余的步骤就一样了。&lt;/p&gt;
&lt;p&gt;我把脚本更新了一下，适配了最新的 nix 版本，最后得到了如下的脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Based on https://discourse.nixos.org/t/getting-started-with-nix-on-ppc64le/12712/8?u=jiegec&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-build &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;nixpkgs&amp;gt;&amp;#39;&lt;/span&gt; -A pkgsCross.powernv.nix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Get a donor copy of the installer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget -c https://releases.nixos.org/nix/nix-2.11.1/nix-2.11.1-x86_64-linux.tar.xz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar xf nix-2.11.1-x86_64-linux.tar.xz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Keep the cert package&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p nix-ppc64le-linux/store
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp -r nix-2.11.1-x86_64-linux/store/*nss-cacert* nix-ppc64le-linux/store/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Toss other packages, keep the scripts&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf nix-2.11.1-x86_64-linux/store
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mv nix-2.11.1-x86_64-linux/* nix-ppc64le-linux/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add ppc64le packages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp -r &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;nix-store -qR result&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; nix-ppc64le-linux/store/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Generate a .reginfo for those ppc64le packages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-store --dump-db &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;nix-store -qR result&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &amp;gt; nix-ppc64le-linux/.reginfo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Replace NIX_INSTALLED_NIX in install script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export NIX_INSTALLED_NIX&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;readlink result&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s#NIX_INSTALLED_NIX=\&amp;#34;.*\&amp;#34;#NIX_INSTALLED_NIX=\&amp;#34;&lt;/span&gt;$NIX_INSTALLED_NIX&lt;span style=&#34;color:#e6db74&#34;&gt;\&amp;#34;#&amp;#34;&lt;/span&gt; nix-ppc64le-linux/install-multi-user
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Done! Copy nix-ppc64le-linux to ppc64le machine and run ./install --daemon&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把生成的目录复制到 ppc64le 机器上就可以了。&lt;/p&gt;
&lt;h2 id=&#34;编译问题&#34;&gt;编译问题&lt;/h2&gt;
&lt;p&gt;当然了，既然 ppc64le 的 Nixpkgs 没有什么人测试，所以肯定会遇到一些问题。下面是遇到的几个比较主要的问题，以及相应的解决方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boehm-gc checkPhase 会失败，见 &lt;a href=&#34;https://github.com/ivmai/bdwgc/issues/376&#34;&gt;ivmai/bdwgc#376&lt;/a&gt;，一直没有修复。解决办法是添加 overlay，让它不要跑测试：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;custom-overlay = final: prev: {
  # https://github.com/ivmai/bdwgc/issues/376
  boehmgc = prev.boehmgc.overrideAttrs (_: { doCheck = false; });
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;UPDATE: 向 nixpkgs 提交了 pr: &lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/198591&#34;&gt;https://github.com/NixOS/nixpkgs/pull/198591&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外根据 bdwgc 的 issue 提示，添加下列的选项可以让它测试通过：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;makeFlags = [&amp;#34;CFLAGS_EXTRA=\&amp;#34;-DNO_SOFT_VDB\&amp;#34;&amp;#34;];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是 issue 也说，这个方法对于 Power9 不工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linux-headers 编译失败，报告 unknown type name __vector128，见 &lt;a href=&#34;https://www.spinics.net/lists/netdev/msg694314.html&#34;&gt;tools/bpf: Compilation issue on powerpc: unknown type name &amp;lsquo;__vector128&amp;rsquo;
&lt;/a&gt; &lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/192670&#34;&gt;bpftools: add enableDebugger, set to false on Power64 (WIP)&lt;/a&gt;。目前的解决办法是让 procps/tmux 等包不要依赖 systemd，进而不会依赖 linux-headers：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;custom-overlay = final: prev: {
  # systemd cannot build due to linux-headers
  procps = prev.procps.override { withSystemd = false; };
  tmux = prev.tmux.override { withSystemd = false; };
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于 home-manager，可以用下面的配置让它不要编译 systemd：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# systemd does not build
systemd.user.systemctlPath = &amp;#34;/bin/systemctl&amp;#34;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然了，这个治标不治本，还是要等上游修复。&lt;/p&gt;
&lt;p&gt;UPDATE: 向 nixpkgs 提交了 pr: &lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/198587&#34;&gt;https://github.com/NixOS/nixpkgs/pull/198587&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 GNURadio Companion 中收听 FM 广播</title>
      <link>https://jia.je/hardware/2022/10/24/gnuradio-fm-radio/</link>
      <pubDate>Mon, 24 Oct 2022 23:33:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/10/24/gnuradio-fm-radio/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;以前买过 RTL-SDR，用 Gqrx 做过收音机，当时还给 Homebrew 尝试提交过几个 sdr 相关的 &lt;a href=&#34;https://github.com/Homebrew/legacy-homebrew/pulls?q=is%3Apr+author%3Ajiegec+&#34;&gt;pr&lt;/a&gt;，但是限于知识的缺乏，后来就没有再继续尝试了。&lt;/p&gt;
&lt;p&gt;前两天，@OceanS2000 讲了一次 &lt;a href=&#34;https://tuna.moe/event/2022/hacking-radio/&#34;&gt;Tunight: 高级收音机使用入门&lt;/a&gt;，又勾起了我的兴趣，所以我来尝试一下在 GNURadio Companion 中收听 FM 广播电台。&lt;/p&gt;
&lt;p&gt;我没有上过无线电相关课程，所以下面有一些内容可能不正确或者不准确。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;我的实验环境是 NixOS，所以是用下面的配置来安装 gnuradio 的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# SDR
# https://github.com/NixOS/nixpkgs/pull/170253
(gnuradio.override { extraMakeWrapperArgs = [ &amp;#34;--prefix&amp;#34; &amp;#34;SOAPY_SDR_PLUGIN_PATH&amp;#34; &amp;#34;:&amp;#34; (soapyrtlsdr + &amp;#34;/lib/SoapySDR/modules0.8/&amp;#34;) ]; })
soapysdr-with-plugins
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中 gnuradio 的 override 是为了让它可以找到 soapyrtlsdr 的库，否则它会找不到设备；&lt;code&gt;soapysdr-with-plugins&lt;/code&gt; 是为了提供 &lt;code&gt;SoapySDRUtil&lt;/code&gt; 命令，来确认它可以找到 RTL-SDR 设备：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ SoapySDRUtil --probe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-- Device identification
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  driver&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;RTLSDR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  hardware&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;R820T
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  origin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;https://github.com/pothosware/SoapyRTLSDR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rtl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-- Peripheral summary
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Channels: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; Rx, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Tx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Timestamps: NO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Other Settings:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     * Direct Sampling - RTL-SDR Direct Sampling Mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;direct_samp, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;string, options&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;0, 1, 2&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     * Offset Tune - RTL-SDR Offset Tuning Mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;offset_tune, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bool&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     * I/Q Swap - RTL-SDR I/Q Swap Mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;iq_swap, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bool&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     * Digital AGC - RTL-SDR digital AGC Mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;digital_agc, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bool&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-- RX Channel &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Full-duplex: NO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Supports AGC: YES
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Stream formats: CS8, CS16, CF32
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Native format: CS8 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;full-scale&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;128&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Stream args:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     * Buffer Size - Number of bytes per buffer, multiples of &lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt; only.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bufflen, units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bytes, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;262144, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     * Ring buffers - Number of buffers in the ring.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;buffers, units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;buffers, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;15, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     * Async buffers - Number of async usb buffers &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;advanced&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;asyncBuffs, units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;buffers, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Antennas: RX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Full gain range: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0, 49.6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; dB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TUNER gain range: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0, 49.6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; dB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Full freq range: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;23.999, 1764&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; MHz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RF freq range: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;24, 1764&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; MHz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CORR freq range: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-0.001, 0.001&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; MHz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Sample rates: 0.25, 1.024, 1.536, 1.792, 1.92, 2.048, 2.16, 2.56, 2.88, 3.2 MSps
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;寻找-fm-广播&#34;&gt;寻找 FM 广播&lt;/h2&gt;
&lt;p&gt;接着，就可以在 GRC(GNURadio Companion) 中从 RTL-SDR 读取数据了。首先，我按照 &lt;a href=&#34;https://wiki.gnuradio.org/index.php/Guided_Tutorial_Hardware_Considerations&#34;&gt;Guided Tutorial Hardware Considerations&lt;/a&gt; 的方法进行分析，可以看到哪些频率上有信号：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/rtlsdr-analyze.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sample Rate: 3.2MHz，这里要取比较大，如果太小可能找不到信号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/rtlsdr-analyze-waterfall.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到在 100.6MHz 附近有比较明显的信号，查询了一下，这对应了北京新闻广播 FM100.6，确实是一个 FM 广播电台。通过修改中心频率，还可以找到附近的 FM97.4 音乐广播和 FM 103.9 交通广播。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/rtlsdr-analyze-waterfall-fm974.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;收听-fm-广播&#34;&gt;收听 FM 广播&lt;/h2&gt;
&lt;p&gt;找到频率以后，就可以进行 FM 解调了。我继续按照 &lt;a href=&#34;https://wiki.gnuradio.org/index.php/FM_Demod&#34;&gt;FM Demod&lt;/a&gt; 的方法进行搭建，由于我用的是 RTL-SDR，考虑到它支持的采样率，我选取了 2.88MHz 采样率，经过一个 1/10 的 Rational Resampler 变成 288KHz 采样率，再进行 FM 解调，最后得到 &lt;code&gt;288KHz / 6 = 48KHz&lt;/code&gt; 的音频，然后保存在 WAV 文件中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/rtlsdr-fm.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sample Rate: 2.88MHz，这里取了 48KHz 的整数倍数&lt;/li&gt;
&lt;li&gt;Rational Resampler - Decimation: FM Demod 的 Decimation 不能太大，所以这里先进行 10 倍降采样，把采样率从 2.88MHz 降到 288KHz&lt;/li&gt;
&lt;li&gt;FM Demod - Channel Rate: 输入的采样率是 288KHz&lt;/li&gt;
&lt;li&gt;FM Demod - Audio Decimation: 6 倍降采样，这样输出就是 48KHz&lt;/li&gt;
&lt;li&gt;FM Demod - Deviation: 75KHz，维基百科：&lt;code&gt;The maximum frequency deviation of the carrier is usually specified and regulated by the licensing authorities in each country. For a stereo broadcast, the maximum permitted carrier deviation is invariably ±75 kHz, although a little higher is permitted in the United States when SCA systems are used. For a monophonic broadcast, again the most common permitted maximum deviation is ±75 kHz. However, some countries specify a lower value for monophonic broadcasts, such as ±50 kHz.[5]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;FM Demod - Audio Pass/Audio Stop: 低通滤波器参数，保留 0-16 KHz 的频率（Passband），到 20KHz 截止（Stopband）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行一段时间，收听保存下来的 wav 文件，发现可以清晰地听到广播电台的声音。&lt;/p&gt;
&lt;p&gt;把输出改成 Audio Sink(Sample Rate = 48KHz)，然后就可以当成收音机应用来跑了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grcc -r rtlsdr_fm_play.grc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>ESXi 配置 LACP 链路聚合</title>
      <link>https://jia.je/devops/2022/09/24/vmware-esxi-lacp/</link>
      <pubDate>Sat, 24 Sep 2022 14:18:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2022/09/24/vmware-esxi-lacp/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;给 ESXi 接了两路 10Gbps 的以太网，需要用 LACP 来聚合。ESXi 自己不能配置 LACP，需要配合 vCenter Server 的 Distributed Switch 来配置。&lt;/p&gt;
&lt;h2 id=&#34;步骤&#34;&gt;步骤&lt;/h2&gt;
&lt;p&gt;参考文档：&lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.networking.doc/GUID-0D1EF5B4-7581-480B-B99D-5714B42CD7A9.html&#34;&gt;LACP Support on a vSphere Distributed Switch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一步是创建一个 Distributed Switch。找到 Cluster，点击 ACTIONS，在 Distributed Switch 里面选择 New Distributed Switch。里面的选项都可以用默认的，按需修改。&lt;/p&gt;
&lt;p&gt;第二步，找到刚刚创建的 Distributed Switch，点击 Configure，在 Settings 下点击 LACP，点击 NEW，选项可以用默认的，按需修改。&lt;/p&gt;
&lt;p&gt;第三步，找到 Distributed Switch，点击 ACTIONS，点击 Add and Manage Hosts，找到要配置的主机，在 Manage physical adapters 这一步，找到要加入到链路聚合的 vmnic，每个要聚合的 vmnic 都在右边的 Assign uplink 处选择刚刚创建的 LAG 下的 Uplink，按顺序，一一对应。其余选项可以使用默认的。这一步配置好以后，在交换机上应该就可以看到 LACP 正常运转。&lt;/p&gt;
&lt;p&gt;第四步，如果要把虚拟机连到链路聚合的网络上，找到虚拟机，点击 ACTIONS，点击 Edit Settings，新建一个网卡，Network adapter 处选择刚刚创建的 Distributed Port Group。这一步是让虚拟机多一个网卡，可以连接到 Distributed Switch 上。这一步配置好以后，虚拟机就可以收到来自其他物理机的网络流量，但是发送不出去。&lt;/p&gt;
&lt;p&gt;注：Static Binding 和 Ephemeral Binding 的区别见 &lt;a href=&#34;https://kb.vmware.com/s/article/1022312&#34;&gt;Static (non-ephemeral) or ephemeral port binding on a vSphere Distributed Switch (1022312)&lt;/a&gt;。在 vCenter 上可以给虚拟机分配到 Static binding 的 Distributed Port Group 上，而在 ESXi 上只可以分配到 Ephemeral Port Group。通常来讲，只需要 Static binding，而 Ephemeral binding 是在紧急情况下使用的。&lt;/p&gt;
&lt;p&gt;第五步，如果要把 VMKernel 连到链路聚合的网络上，找到虚拟机，添加一个 VMKernel adapter，端口组为 Distributed Port Group，如默认创建的第一个 Distributed Port Group。类似地，此时 VMKernel 配置的 IP 地址还不能从外面访问，但是可以从同一个 Distributed Switch 的虚拟机中访问。&lt;/p&gt;
&lt;p&gt;第六步，修改 Failover 配置，找到 Distributed Switch，点击 ACTIONS，在 Distributed Port Group 里点击 Manager Distributed Port Groups，勾选 Teaming and failover，勾上所有的 Distributed Port Group，修改下面的 Failover Order，默认状态是 Active uplinks 只有 Uplink，没有 LAG，需要修改为 Active uplinks 只有 LAG，而 Uplink 都在 Unused Uplinks 中。这样才可以让虚拟机和 VMKernel 出去的流量走链路聚合。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.networking.doc/GUID-9454ED41-6CFC-49F1-9982-34C1276F775A.html&#34;&gt;LACP Teaming and Failover Configuration for Distributed Port Groups&lt;/a&gt; 和 &lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.networking.doc/GUID-45DF45A6-DBDB-4386-85BF-400797683D05.html&#34;&gt;Configure a Link Aggregation Group to Handle the Traffic for Distributed Port Groups&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这样就配置完成了。&lt;/p&gt;
&lt;h2 id=&#34;非-lacp-的链路聚合&#34;&gt;非 LACP 的链路聚合&lt;/h2&gt;
&lt;p&gt;如果想要链路聚合，但是又不想用 Virtual Distributed Switch，可以在交换机上配置 Static Link Aggregation，然后在 ESXi 上添加多个 Uplink，配置 NIC teaming 为 &lt;code&gt;Route based on IP hash&lt;/code&gt; 模式即可。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://kb.vmware.com/s/article/1004088&#34;&gt;NIC teaming in ESXi and ESX&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Buildroot 2020.08 的 Fakeroot 版本过旧导致的兼容性问题</title>
      <link>https://jia.je/software/2022/09/19/buildroot-fakeroot-incompat/</link>
      <pubDate>Mon, 19 Sep 2022 20:14:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/09/19/buildroot-fakeroot-incompat/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在给之前的 Buildroot 2020.09 增加新的软件包，结果编译的时候报错：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mknod: ....../dev/console: Operation not permitted
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还有一个背景是前段时间把系统升级到了 Ubuntu 22.04 LTS。&lt;/p&gt;
&lt;h2 id=&#34;研究&#34;&gt;研究&lt;/h2&gt;
&lt;p&gt;跑的时候没有用 root，而是用 fakeroot 跑的，按理说在 fakeroot 里跑 mknod 是不会报错的，我直接运行系统的 fakeroot 是正常的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fakeroot -- mknod -m &lt;span style=&#34;color:#ae81ff&#34;&gt;0622&lt;/span&gt; test c &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时 fakeroot 会生成一个空文件，这是正常现象。那么为什么 Buildroot 里跑就不对了呢？&lt;/p&gt;
&lt;p&gt;我仔细观察了一下，buildroot 用的是自己编译的 fakeroot，版本是 1.20.2，用这个版本跑就会报错：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./output/host/bin/fakeroot -- mknod -m &lt;span style=&#34;color:#ae81ff&#34;&gt;0622&lt;/span&gt; test c &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mknod: test: Operation not permitted
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;果然就出问题了。&lt;/p&gt;
&lt;p&gt;用 strace 观察下区别：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ fakeroot -- strace mknod -m &lt;span style=&#34;color:#ae81ff&#34;&gt;0622&lt;/span&gt; test c &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newfstatat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AT_FDCWD, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;st_mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S_IFREG|0644, st_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, ...&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, AT_SYMLINK_NOFOLLOW&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msgget&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x4b33194b, IPC_CREAT|0600&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32771&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msgget&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x4b33194c, IPC_CREAT|0600&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32772&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msgsnd&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newfstatat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AT_FDCWD, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;st_mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S_IFREG|0644, st_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, ...&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, AT_SYMLINK_NOFOLLOW&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msgsnd&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AT_FDCWD, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;, O_RDONLY|O_NOFOLLOW|O_CLOEXEC|O_PATH&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newfstatat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;st_mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S_IFREG|0644, st_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, ...&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, AT_EMPTY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fchmodat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AT_FDCWD, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/proc/self/fd/3&amp;#34;&lt;/span&gt;, 0622&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./output/host/bin/fakeroot -- strace mknod -m &lt;span style=&#34;color:#ae81ff&#34;&gt;0622&lt;/span&gt; test c &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;umask&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                              &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;umask&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;002&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                              &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mknodat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AT_FDCWD, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;, S_IFCHR|0622, makedev&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x5, 0x1&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -1 EPERM &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Operation not permitted&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，正常情况下，mknodat 系统调用被拦截，由 fakeroot 来创建空文件；而错误的 fakeroot 版本下，没有拦截成功，就出现了 EPERM。&lt;/p&gt;
&lt;h2 id=&#34;解决&#34;&gt;解决&lt;/h2&gt;
&lt;p&gt;一个粗暴的解决办法是，直接修改 buildroot 源代码，让它用系统的 fakeroot：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$$&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BR_PATH&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; FAKEROOTDONTTRYCHOWN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; /usr/bin/fakeroot -- $$&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;FAKEROOT_SCRIPT&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我还尝试重新编译 fakeroot 1.20.2，会出现编译错误，采用类似 &lt;a href=&#34;https://bugs.archlinux.org/task/69572&#34;&gt;bug 69572 fakeroot failes to build: _STAT_VER undeclared&lt;/a&gt; 的方法可以解决编译的问题，但是还是出现 EPERM。&lt;a href=&#34;https://github.com/buildroot/buildroot/commit/f45925a951318e9e53bead80b363e004301adc6f&#34;&gt;Buildroot&lt;/a&gt; 后来也引入了类似的修复。&lt;/p&gt;
&lt;p&gt;于是在&lt;a href=&#34;https://salsa.debian.org/clint/fakeroot&#34;&gt;源代码&lt;/a&gt;历史中搜寻了一番，发现了一个疑似的修复 commit：&lt;a href=&#34;https://salsa.debian.org/clint/fakeroot/-/commit/c3eebec293e35b997bb46c22fb5a4e114afb5e7f&#34;&gt;configure.ac: fix __xmknod{,at} pointer argument&lt;/a&gt;，不过我并不能确定是不是这个问题。&lt;/p&gt;
&lt;p&gt;进一步，我在 Docker 镜像中手动下载并编译 fakeroot 1.20.2、1.21 和 1.25.3，都可以复现这个问题，编译 1.29 版本则没有问题。用 git 克隆&lt;a href=&#34;https://salsa.debian.org/clint/fakeroot&#34;&gt;仓库&lt;/a&gt;，进一步定位到 upstream/1.26 和 upstream/1.27 版本都是正常的。而 upstream/1.25.2 会出错。进一步二分，找到修复的 commit 是 &lt;a href=&#34;https://salsa.debian.org/clint/fakeroot/-/commit/feda578ca3608b7fc9a28a3a91293611c0ef47b7&#34;&gt;libfakeroot.c: add wrappers for new glibc 2.33+ symbols&lt;/a&gt;，相关的代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  int mknod(const char *pathname, mode_t mode, dev_t dev) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+     return WRAP_MKNOD MKNOD_ARG(_STAT_VER, pathname, mode, &amp;amp;dev);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  #if defined(HAVE_FSTATAT) &amp;amp;&amp;amp; defined(HAVE_MKNODAT)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    int mknodat(int dir_fd, const char *pathname, mode_t mode, dev_t dev) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+       return WRAP_MKNODAT MKNODAT_ARG(_STAT_VER, dir_fd, pathname, mode, &amp;amp;dev);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  #endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+#endif /* GLIBC_PREREQ */
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这说明在这个修复之前，不能正确地拦截 mknod 的调用。所以 glibc 2.33+ 要配合 fakeroot 1.26+ 版本才可以正确地运行 fakeroot。&lt;/p&gt;
&lt;p&gt;结论：找个时间用新版的 Buildroot 重新构建一份。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>从 TeX 到 PDF 的过程</title>
      <link>https://jia.je/software/2022/08/05/from-tex-to-pdf/</link>
      <pubDate>Fri, 05 Aug 2022 20:50:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/08/05/from-tex-to-pdf/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;今天跑 &lt;code&gt;xdvipdfmx&lt;/code&gt; 的时候出现了报错，忽然想研究一下，DVI 格式是什么，TeX 是如何一步步变成 PDF 的。&lt;/p&gt;
&lt;h2 id=&#34;流程&#34;&gt;流程&lt;/h2&gt;
&lt;p&gt;实际上从 TeX 到 PDF 有不同的工具，其中可能经历了不同的转化过程。&lt;/p&gt;
&lt;p&gt;我们今天来看一种比较原始的转换方式：从 TeX 到 DVI，从 DVI 到 PS，再 PS 到 PDF，主要目的是看看这些格式内部都是什么样子的。&lt;/p&gt;
&lt;h2 id=&#34;从-tex-到-dvi&#34;&gt;从 TeX 到 DVI&lt;/h2&gt;
&lt;p&gt;举一个很小的例子，例如 &lt;code&gt;test.tex&lt;/code&gt; 有如下的内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tex&#34; data-lang=&#34;tex&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello, world!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;\bye&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在命令行中运行 &lt;code&gt;tex test.tex&lt;/code&gt;，可以看到它生成了 &lt;code&gt;test.dvi&lt;/code&gt; 文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tex test.tex
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;test.tex &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Output written on test.dvi &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; page, &lt;span style=&#34;color:#ae81ff&#34;&gt;228&lt;/span&gt; bytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Transcript written on test.log.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么 DVI 就是 TeX 引擎输出的默认格式了。我们可以用 dviinfox 和 dviasm 工具来看它的一些信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dviinfox test.dvi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test.dvi: DVI format 2; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; page
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Magnification: 1000/1000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Size unit: 1000x25400000/&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1000x473628672&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;dum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0.054dum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1.000sp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Page size: 469ptx667pt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 16.510cmx23.449cm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Stack size: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Comment: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; TeX output 2022.08.05:2055&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Font   0:     cmr10 at 10.000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;design size 10.000, checksum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1274110073&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dviasm test.dvi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;preamble&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;id: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;numerator: &lt;span style=&#34;color:#ae81ff&#34;&gt;25400000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;denominator: &lt;span style=&#34;color:#ae81ff&#34;&gt;473628672&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;magnification: &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;comment: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; TeX output 2022.08.05:2058&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;postamble&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maxv: 667.202545pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maxh: 469.754990pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maxs: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pages: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;font definitions&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fntdef: cmr10 at 10pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;page &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;push:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  down: -14pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pop:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;down: 643.202545pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;push:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  down: -633.202545pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  push:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    right: 20pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fnt: cmr10 at 10pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello,&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    right: 3.333328pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    right: -0.277786pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;orld!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pop:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pop:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;down: 24pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;push:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  right: 232.377487pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  set: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pop:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它定义了文档的一些尺寸和字体信息，然后主体部分就是每个页面上需要绘制的内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;push:
  down: -14pt
pop:
down: 643.202545pt
push:
  down: -633.202545pt
  push:
    right: 20pt
    fnt: cmr10 at 10pt
    set: &amp;#39;Hello,&amp;#39;
    right: 3.333328pt
    set: &amp;#39;w&amp;#39;
    right: -0.277786pt
    set: &amp;#39;orld!&amp;#39;
  pop:
pop:
down: 24pt
push:
  right: 232.377487pt
  set: &amp;#39;1&amp;#39;
pop:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，它保存了一些命令，就像是在移动光标，然后输出文字：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向下移动 643.20 pt&lt;/li&gt;
&lt;li&gt;向上移动 633.20 pt&lt;/li&gt;
&lt;li&gt;向右移动 20.00 pt&lt;/li&gt;
&lt;li&gt;设置字体为 cmr10&lt;/li&gt;
&lt;li&gt;输出 &amp;ldquo;Hello,&amp;rdquo;&lt;/li&gt;
&lt;li&gt;向右移动 3.33 pt&lt;/li&gt;
&lt;li&gt;输出 &amp;ldquo;w&amp;rdquo;&lt;/li&gt;
&lt;li&gt;向左移动 0.28 pt&lt;/li&gt;
&lt;li&gt;输出 &amp;ldquo;orld!&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实际上，它的编码也比较简单，就是一个字节的命令加上若干字节的参数。DVI 二进制格式详细的文档可见 &lt;a href=&#34;https://www.mn.uio.no/ifi/tjenester/it/hjelp/latex/dvi.pdf&#34;&gt;https://www.mn.uio.no/ifi/tjenester/it/hjelp/latex/dvi.pdf&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;从-dvi-到-ps&#34;&gt;从 DVI 到 PS&lt;/h2&gt;
&lt;p&gt;有了 DVI 文件以后，下一步是用 &lt;code&gt;dvips&lt;/code&gt; 工具来生成 PS 文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dvips test.dvi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This is dvips&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;k&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 2020.1 Copyright &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt; Radical Eye Software &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;www.radicaleye.com&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; TeX output 2022.08.05:2058&amp;#39;&lt;/span&gt; -&amp;gt; test.ps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/usr/share/texlive/texmf-dist/dvips/base/tex.pro&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/usr/share/texlive/texmf-dist/dvips/base/texps.pro&amp;gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/usr/share/texlive/texmf-dist/fonts/type1/public/amsfonts/cm/cmr10.pfb&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;DVI 是二进制格式，而 PS 是纯文本格式，我们可以用编辑器打开，看到里面大概有几部分内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开头的元数据&lt;/li&gt;
&lt;li&gt;tex.pro 文件的内容&lt;/li&gt;
&lt;li&gt;texps.pro 文件的内容&lt;/li&gt;
&lt;li&gt;定义 CMR10 字体&lt;/li&gt;
&lt;li&gt;描述文档内容&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;让我们直接来看最后一部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postscript&#34; data-lang=&#34;postscript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TeXDict&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39158280&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55380996&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;(test.dvi)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@start&lt;/span&gt; /Fa &lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;[{}&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83.022&lt;/span&gt; /CMR10 &lt;span style=&#34;color:#a6e22e&#34;&gt;rf&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%EndProlog
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%BeginSetup
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%Feature: *Resolution 600dpi
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TeXDict&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%BeginPaperSize: a4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;/setpagedevice &lt;span style=&#34;color:#a6e22e&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt; &amp;lt;&amp;lt; /PageSize [&lt;span style=&#34;color:#ae81ff&#34;&gt;595&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;842&lt;/span&gt;] &amp;gt;&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setpagedevice&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ /a4 &lt;span style=&#34;color:#a6e22e&#34;&gt;where&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a4&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ifelse&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%EndPaperSize
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%EndSetup
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%Page: 1 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TeXDict&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bop&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Fa&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(Hello,)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(w)&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(orld!)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1929&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5539&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(1)&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eop&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%Trailer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;userdict&lt;/span&gt; /end-hook &lt;span style=&#34;color:#a6e22e&#34;&gt;known&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;end-hook&lt;/span&gt;}&lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看到这个，肯定觉得很疑惑，这都是啥？除了隐约可以看到的 &lt;code&gt;Hello,&lt;/code&gt; &lt;code&gt;w&lt;/code&gt; &lt;code&gt;orld!&lt;/code&gt; 字样以外，有很多不明含义的字母和代码。&lt;/p&gt;
&lt;p&gt;为了读懂这些代码在做什么，首先来学习一下 PostScript。PostScript 是一个基于栈的语言，类似 Forth，所以很多运算都和我们平时看到的不一样。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postscript&#34; data-lang=&#34;postscript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;userdict&lt;/span&gt; /end-hook &lt;span style=&#34;color:#a6e22e&#34;&gt;known&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;end-hook&lt;/span&gt;}&lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际上做的事情是，判断 userdict 中是否存在 &lt;code&gt;/end-hook&lt;/code&gt;，如果存在，则展开它。它的计算过程是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postscript&#34; data-lang=&#34;postscript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;userdict&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;userdict&lt;/span&gt; /end-hook
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;userdict&lt;/span&gt; /end-hook &lt;span style=&#34;color:#a6e22e&#34;&gt;known&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;true&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;end-hook&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;true&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;end-hook&lt;/span&gt;} &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;end-hook&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么回过头来看 &lt;code&gt;Hello, world!&lt;/code&gt; 相关的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postscript&#34; data-lang=&#34;postscript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TeXDict&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bop&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Fa&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(Hello,)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(w)&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(orld!)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1929&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5539&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(1)&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eop&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里出现的 &lt;code&gt;TeXDict&lt;/code&gt; &lt;code&gt;bop&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; 等等应该也是在前面定义的了。往回翻，发现正是 &lt;code&gt;tex.pro&lt;/code&gt; 文件定义了这些对象。让我们一点点来看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postscript&#34; data-lang=&#34;postscript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/TeXDict &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dict&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;def&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;% define a working dictionary
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;表示 &lt;code&gt;TexDict&lt;/code&gt; 会展开为 &lt;code&gt;300 dict&lt;/code&gt;，即创建一个最大容量为 300 的 dict。接下来的 begin 和 end 就是在这个 dict 的作用域中进行运算。&lt;/p&gt;
&lt;p&gt;接下来是 &lt;code&gt;1 0 bop&lt;/code&gt;，那么我们要看 &lt;code&gt;bop&lt;/code&gt; 的定义，根据 DVI 中同名的命令，我们知道它的意思是 &lt;code&gt;begin of page&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postscript&#34; data-lang=&#34;postscript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bop           &lt;span style=&#34;color:#75715e&#34;&gt;% %t %d bop -  -- begin a brand new page, %t=pageno %d=seqno
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;userdict&lt;/span&gt; /bop-hook &lt;span style=&#34;color:#a6e22e&#34;&gt;known&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;bop-hook&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /SI &lt;span style=&#34;color:#a6e22e&#34;&gt;save&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;N&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@rigin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%   Now we check the resolution.  If it&amp;#39;s correct, we use RV as V,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%   otherwise we use QV.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;moveto&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /V &lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;currentmatrix&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mul&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exch&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mul&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.99&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {/QV} {/RV} &lt;span style=&#34;color:#a6e22e&#34;&gt;ifelse&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;def&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#a6e22e&#34;&gt;N&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里有一些代码的含义我还不清楚，先跳过。&lt;/p&gt;
&lt;p&gt;接下来的 &lt;code&gt;166 83 a&lt;/code&gt;，根据定义就可以判断出来它是在移动位置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postscript&#34; data-lang=&#34;postscript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/a { &lt;span style=&#34;color:#a6e22e&#34;&gt;moveto&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;% absolute positioning
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;紧随其后的 &lt;code&gt;Fa&lt;/code&gt; 指的是字体。&lt;/p&gt;
&lt;p&gt;接下来是 &lt;code&gt;(Hello,)&lt;/code&gt;，即把 &lt;code&gt;Hello,&lt;/code&gt; 这些文字压入栈。&lt;/p&gt;
&lt;p&gt;接下来看到 &lt;code&gt;28 b&lt;/code&gt;，它输出了栈顶的文本，进行了一个相对的水平移动，并且更新了 delta：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postscript&#34; data-lang=&#34;postscript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/delta &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;N&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;% we need a variable to hold space moves
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%   The next ten macros allow us to make horizontal motions that
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%   are within 4 of the previous horizontal motion with a single
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%   character.  These are typically used for spaces.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;/tail { &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; /delta &lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rmoveto&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/M { &lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delta&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tail&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/b { &lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tail&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;% show and tail!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后面的也都是类似的操作，让我们简单来总结一下 &lt;code&gt;TeXDict begin 1 0 bop 166 83 a Fa(Hello,)28 b(w)n(orld!)1929 5539 y(1)p eop end&lt;/code&gt; 都做了什么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1 0 bop&lt;/code&gt;: 创建了新页面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;166 83 a&lt;/code&gt;: 移动坐标到 &lt;code&gt;(166, 83)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fa&lt;/code&gt;: 设置字体&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(Hello,)&lt;/code&gt;: 压栈 &amp;ldquo;Hello,&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;28 b&lt;/code&gt;: 输出栈顶，移动坐标，对应 &lt;code&gt;dviasm&lt;/code&gt; 输出中的 &lt;code&gt;right: 3.333328pt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(w)&lt;/code&gt;: 压栈 &amp;ldquo;w&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;: 输出栈顶，移动坐标，对应 &lt;code&gt;dviasm&lt;/code&gt; 输出中的 &lt;code&gt;right: -0.277786pt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(orld!)&lt;/code&gt;: 压栈 &amp;ldquo;orld!&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1929 5539 y&lt;/code&gt;: 输出栈顶，移动坐标到页码的位置，对应 &lt;code&gt;dviasm&lt;/code&gt; 输出中的 &lt;code&gt;down: 24pt&lt;/code&gt; 和 &lt;code&gt;right: 232.377487.pt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(1)&lt;/code&gt;: 压栈 &amp;ldquo;1&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;: 输出栈顶&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eop&lt;/code&gt;: 结束页面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由此我们基本明白了从 DVI 到 PS 是怎么一个流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先在 &lt;code&gt;tex.pro&lt;/code&gt; 中定义了一些函数，来实现 DVI 中的命令&lt;/li&gt;
&lt;li&gt;把 DVI 中的命令翻译成 PS 代码&lt;/li&gt;
&lt;li&gt;把 &lt;code&gt;tex.pro&lt;/code&gt;、字体等还有翻译出来的 PS 拼接起来作为最终的输出&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这算是一种元编程，在 PS 中定义了一个 DSL，可以很方便地执行 DVI 指令。&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&#34;https://github.com/MiKTeX/miktex/blob/ab8ebca7c70fe8c9a1392dfb2393a0a7683e14cc/Programs/DviWare/dvips/source/tex.lpro&#34;&gt;这里&lt;/a&gt; 可以看到原始的带注释的 &lt;code&gt;tex.lpro&lt;/code&gt; 实现，上面涉及 &lt;code&gt;tex.pro&lt;/code&gt; 的代码内容也是从这里复制来的。&lt;/p&gt;
&lt;h2 id=&#34;从-ps-到-pdf&#34;&gt;从 PS 到 PDF&lt;/h2&gt;
&lt;p&gt;最后一步，我们可以用 &lt;code&gt;ps2pdf&lt;/code&gt; 把 PS 转换为 PDF。转换以后，就可以用常见的 PDF 浏览器来阅读了。让我们解压缩其中被压缩的部分，这样就方便阅读它的内容了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ps2pdf test.ps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pdftk test.pdf output test.unc.pdf uncompress
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在里面就可以找到我们的 &lt;code&gt;Hello, world!&lt;/code&gt; 了：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pdf&#34; data-lang=&#34;pdf&#34;&gt;5 0 obj

&amp;lt;&amp;lt;
/Length 225
&amp;gt;&amp;gt;
stream
q 0.1 0 0 0.1 0 0 cm
0 g
q
10 0 0 10 0 0 cm BT
/R7 9.96264 Tf
1 0 0 1 91.9199 710.04 Tm
[(H)3.21024(e)-1.66516(llo)-5.88993(,)-337.276(w)23.3747(o)-5.88993(r)-6.48419(ld)0.929988(!)]TJ
211.56 -654.72 Td
[(1)-5.8887]TJ
ET
Q
Q

endstream
endobj
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;阅读 &lt;a href=&#34;https://opensource.adobe.com/dc-acrobat-sdk-docs/pdfstandards/PDF32000_2008.pdf&#34;&gt;PDF 标准&lt;/a&gt;，可以发现它的输出文本部分是这样的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pdf&#34; data-lang=&#34;pdf&#34;&gt;BT
	/R7 9.96264 Tf
	1 0 0 1 91.9199 710.04 Tm
	[(H)3.21024(e)-1.66516(llo)-5.88993(,)-337.276(w)23.3747(o)-5.88993(r)-6.48419(ld)0.929988(!)]TJ
	211.56 -654.72 Td
	[(1)-5.8887]TJ
ET
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/R7 9.96264 Tf&lt;/code&gt; 设置了字体 &lt;code&gt;/R7&lt;/code&gt;，大小是 &lt;code&gt;9.96264&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 0 0 1 91.9199 710.04 Tm&lt;/code&gt; 设置 Text matrix&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[(H)3.21024(e)-1.66516(llo)-5.88993(,)-337.276(w)23.3747(o)-5.88993(r)-6.48419(ld)0.929988(!)]TJ&lt;/code&gt; 输出一系列的 &lt;code&gt;Hello, world!&lt;/code&gt;，中间的数字表示的是文字之间移动的坐标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;211.56 -654.72 Td&lt;/code&gt; 移动坐标到页码的位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[(1)-5.8887]TJ&lt;/code&gt; 输出页码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，从 PS 到 PDF 这一步就不是简单的映射了，例如在 DVI 和 PS 中都是 &lt;code&gt;Hello,&lt;/code&gt; &lt;code&gt;w&lt;/code&gt; &lt;code&gt;orld!&lt;/code&gt; 这样断开，而在 PDF 里面则是 &lt;code&gt;H&lt;/code&gt; &lt;code&gt;e&lt;/code&gt; &lt;code&gt;llo&lt;/code&gt; &lt;code&gt;,&lt;/code&gt; &lt;code&gt;w&lt;/code&gt; &lt;code&gt;o&lt;/code&gt; &lt;code&gt;r&lt;/code&gt; &lt;code&gt;ld&lt;/code&gt; &lt;code&gt;!&lt;/code&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用 Nix 编译 Rust 项目</title>
      <link>https://jia.je/software/2022/08/02/rust-nix/</link>
      <pubDate>Tue, 02 Aug 2022 14:28:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/08/02/rust-nix/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;Rust 项目一般是用 Cargo 管理，但是它的缺点是每个项目都要重新编译一次所有依赖，硬盘空间占用较大，不能跨项目共享编译缓存。调研了一下，有若干基于 Nix 的 Rust 构建工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cargo2nix: &lt;a href=&#34;https://github.com/cargo2nix/cargo2nix&#34;&gt;https://github.com/cargo2nix/cargo2nix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;carnix: 不再更新&lt;/li&gt;
&lt;li&gt;crane: &lt;a href=&#34;https://github.com/ipetkov/crane&#34;&gt;https://github.com/ipetkov/crane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;crate2nix: &lt;a href=&#34;https://github.com/kolloch/crate2nix&#34;&gt;https://github.com/kolloch/crate2nix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;naersk: &lt;a href=&#34;https://github.com/nix-community/naersk&#34;&gt;https://github.com/nix-community/naersk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nocargo: &lt;a href=&#34;https://github.com/oxalica/nocargo&#34;&gt;https://github.com/oxalica/nocargo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我分别来尝试一下这几个工具的使用。&lt;/p&gt;
&lt;p&gt;下面出现的一些命令参考了对应项目的文档。&lt;/p&gt;
&lt;h2 id=&#34;cargo2nix&#34;&gt;cargo2nix&lt;/h2&gt;
&lt;h3 id=&#34;卖点&#34;&gt;卖点&lt;/h3&gt;
&lt;p&gt;cargo2nix 的 README 提到了它的卖点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Development Shell - knowing all the dependencies means easy creation of complete shells. Run nix develop or direnv allow in this repo and see!&lt;/li&gt;
&lt;li&gt;Caching - CI &amp;amp; CD pipelines move faster when purity guarantees allow skipping more work!&lt;/li&gt;
&lt;li&gt;Reproducibility - Pure builds. Access to all of nixpkgs for repeatable environment setup across multiple distributions and platforms&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;cargo2nix 提供了 flakes 支持，不需要单独安装。&lt;/p&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;cargo2nix 的运行比较简单，利用 flakes 的特性，直接 &lt;code&gt;nix run&lt;/code&gt; 即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix run github:cargo2nix/cargo2nix
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它会生成一个 Cargo.nix 文件，还需要编写一个 &lt;code&gt;flake.nix&lt;/code&gt; 配合使用，这里以 &lt;code&gt;jiegec/webhookd&lt;/code&gt; 为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cargo2nix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:cargo2nix/cargo2nix/release-0.11.0&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;follows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cargo2nix/flake-utils&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;follows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cargo2nix/nixpkgs&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inputs: &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; inputs;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eachDefaultSystem (system:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nixpkgs {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;inherit&lt;/span&gt; system;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          overlays &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [cargo2nix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;overlays&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;default];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        rustPkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rustBuilder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;makePackageSet {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          rustVersion &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.61.0&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          packageFun &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./Cargo.nix&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rec&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        packages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          webhookd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (rustPkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;workspace&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;webhookd {})&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bin;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          default &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; packages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;webhookd;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后编译：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./result-bin/bin/webhookd --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;webhookd 0.2.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;cargo2nix 解析了 Cargo.lock，生成 Cargo.nix 文件，最后包装成 flake.nix。&lt;/p&gt;
&lt;h2 id=&#34;crane&#34;&gt;crane&lt;/h2&gt;
&lt;h3 id=&#34;卖点-1&#34;&gt;卖点&lt;/h3&gt;
&lt;p&gt;crane 的 README 提到了它的卖点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source fetching: automatically done using a Cargo.lock file&lt;/li&gt;
&lt;li&gt;Incremental: build your workspace dependencies just once, then quickly lint, build, and test changes to your project without slowing down&lt;/li&gt;
&lt;li&gt;Composable: split builds and tests into granular steps. Gate CI without burdening downstream consumers building from source.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装-1&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;crane 不需要安装，直接用 flakes 即可。&lt;/p&gt;
&lt;h3 id=&#34;使用-1&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;crane 使用的时候，直接在项目中编写 &lt;code&gt;flake.nix&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:NixOS/nixpkgs/nixpkgs-unstable&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    crane&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:ipetkov/crane&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    crane&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;follows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nixpkgs&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:numtide/flake-utils&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { self&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; crane&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eachDefaultSystem (system: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      packages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;default &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; crane&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;system&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buildPackage {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./.&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以了，不需要使用工具从 Cargo.lock 生成对应的 Cargo.nix。&lt;/p&gt;
&lt;p&gt;但是由于 webhookd 依赖 native 库，所以还需要需要手动加入 native 依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:NixOS/nixpkgs/nixpkgs-unstable&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    crane&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:ipetkov/crane&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    crane&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;follows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nixpkgs&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:numtide/flake-utils&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { self&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; crane&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eachDefaultSystem (system:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nixpkgs {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;inherit&lt;/span&gt; system;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        packages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;default &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; crane&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;system&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buildPackage {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./.&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          buildInputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            libiconv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            darwin&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apple_sdk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frameworks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Security
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;构建：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./result/bin/webhookd --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;webhookd 0.2.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;原理-1&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;crane 会把所有的依赖下载起来用 cargo 进行一次构建，把生成的 target 目录打成 &lt;code&gt;target.tar.zst&lt;/code&gt;，然后再加上项目的源代码再构建一次，这样来实现 incremental compilation。它还提供了一些 check lint 等实用的命令。但是，它的目的和其他项目不大一样，它并不考虑跨项目的依赖缓存。&lt;/p&gt;
&lt;h2 id=&#34;crate2nix&#34;&gt;crate2nix&lt;/h2&gt;
&lt;h3 id=&#34;卖点-2&#34;&gt;卖点&lt;/h3&gt;
&lt;p&gt;crate2nix 在 README 中写的卖点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Same dependency tree as cargo: It uses cargo_metadata to obtain the dependency tree from cargo. Therefore, it will use the exact same library versions as cargo and respect any locked down version in Cargo.lock.&lt;/li&gt;
&lt;li&gt;Smart caching: It uses smart crate by crate caching so that nix rebuilds exactly the crates that need to be rebuilt. Compare that to docker layers&amp;hellip;&lt;/li&gt;
&lt;li&gt;Nix ecosystem goodness: You can use all things that make the nix/NixOS ecosystem great, e.g. distributed/remote builds, build minimal docker images, deploy your binary as a service to the cloud with NixOps, &amp;hellip;&lt;/li&gt;
&lt;li&gt;Out of the box support for libraries with non-rust dependencies: It builds on top of the buildRustCrate function from NixOS so that native dependencies of many rust libraries are already correctly fetched when needed. If your library with native dependencies is not yet supported, you can customize defaultCrateOverrides / crateOverrides, see below.&lt;/li&gt;
&lt;li&gt;Easy to understand nix template: The actual nix code is generated via templates/build.nix.tera so you can fix/improve the nix code without knowing rust if all the data is already there.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装-2&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;首先要安装 crate2nix，由于它的稳定版本 0.10.0 已经是去年的版本了，我直接用了 master 分支。如果是直接安装，用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-env -i -f https://github.com/kolloch/crate2nix/tarball/master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但我是用 flakes + home-manager 管理的，所以我实际的配置方法是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向 flake.nix 添加 crate2nix 到 inputs，并且设置 &lt;code&gt;crate2nix.flake = false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把 crate2nix 从 inputs 传到实际的 home manager 配置，然后在 &lt;code&gt;home.packages&lt;/code&gt; 里加入 &lt;code&gt;callPackage crate2nix {}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;使用-2&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;接下来，找到一个 Rust 项目，在其中运行 &lt;code&gt;crate2nix generate&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ crate2nix generate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Generated ./Cargo.nix successfully.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;构建：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix build -f Cargo.nix rootCrate.build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译的结果可以在 &lt;code&gt;result/bin&lt;/code&gt; 下看到。&lt;/p&gt;
&lt;p&gt;我编译的是 &lt;code&gt;jiegec/webhookd&lt;/code&gt;，编译过程中出现了报错：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;   = note: ld: framework not found Security
&amp;gt;           clang-11: error: linker command failed with exit code 1 (use -v to see invocation)
&amp;gt;
&amp;gt;
&amp;gt; error: aborting due to previous error
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;前面的 cargo2nix 没有出现这样的问题，应该是因为 cargo2nix 帮我们引入了 Security 的依赖，见 &lt;a href=&#34;https://github.com/cargo2nix/cargo2nix/blob/9c3b846c727300f8146f20f01c5387b398d1e0e4/overlay/overrides.nix&#34;&gt;overrides.nix&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;根据 crate2nix 的文档，需要添加额外的 native 依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ pkgs &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;nixpkgs&amp;gt;&lt;/span&gt; { } }:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  generatedBuild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./Cargo.nix&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;inherit&lt;/span&gt; pkgs;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    defaultCrateOverrides &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; defaultCrateOverrides &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      webhookd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; attrs: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        buildInputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;optionals
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            stdenv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isDarwin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            [ darwin&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apple_sdk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frameworks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Security ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;generatedBuild&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rootCrate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后构建：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix build -f default.nix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./result/bin/webhookd --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;webhookd 0.2.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以正常运行了。&lt;/p&gt;
&lt;h3 id=&#34;原理-2&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;它的原理是使用 &lt;code&gt;cargo_metadata&lt;/code&gt; 库从 Cargo.lock 中获取各个 crate 的信息，然后翻译成 &lt;code&gt;Cargo.nix&lt;/code&gt;，之后就是由 nix 来编译各个 crate 的内容。所以一开始还是需要先用 Cargo 创建项目，添加依赖，生成 &lt;code&gt;Cargo.lock&lt;/code&gt;；之后再用 &lt;code&gt;crate2nix generate&lt;/code&gt; 同步依赖信息到 &lt;code&gt;Cargo.nix&lt;/code&gt; 文件，构建的时候就不需要 Cargo 参与了，直接 rustc。&lt;/p&gt;
&lt;h2 id=&#34;naersk&#34;&gt;naersk&lt;/h2&gt;
&lt;h3 id=&#34;安装-3&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;需要安装 &lt;a href=&#34;https://github.com/nmattia/niv&#34;&gt;niv&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-env -iA nixpkgs.niv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用-3&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;在项目目录下，首先用 &lt;code&gt;niv&lt;/code&gt; 导入 naersk：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;niv init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;niv add nix-community/naersk
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后编写一个 &lt;code&gt;default.nix&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;nixpkgs&amp;gt;&lt;/span&gt; { };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sources &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./nix/sources.nix&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  naersk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;callPackage sources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;naersk { };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;naersk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buildPackage &lt;span style=&#34;color:#e6db74&#34;&gt;./.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;构建：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix build -f default.nix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./result/bin/webhookd --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;webhookd 0.2.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;原理-3&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;naersk 的原理和 crane 是类似的：把所有依赖下载下来，创建一个只有依赖的项目，然后用 cargo 预编译，编译完得到的 target 目录打成 &lt;code&gt;target.tar.zst&lt;/code&gt;；然后基于预编译的结果再编译整个项目。&lt;/p&gt;
&lt;h2 id=&#34;nocargo&#34;&gt;nocargo&lt;/h2&gt;
&lt;h3 id=&#34;卖点-3&#34;&gt;卖点&lt;/h3&gt;
&lt;p&gt;nocargo 的 README 提到了以下卖点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No IFDs (import-from-derivation). See meme.&lt;/li&gt;
&lt;li&gt;No cargo dependency during building. Only rustc.&lt;/li&gt;
&lt;li&gt;No need for hash prefetching or code generation1.&lt;/li&gt;
&lt;li&gt;Crate level caching, globally shared.&lt;/li&gt;
&lt;li&gt;nixpkgs integration for non-Rust dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;README 也提到了 nocargo, cargo2nix, naersk 和 buildRustPackage 的对比。&lt;/p&gt;
&lt;h3 id=&#34;使用-4&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;nocargo 目前&lt;a href=&#34;https://github.com/oxalica/nocargo/blob/90a6d0e8dcfc2205fa69423d42bff6fd1b997121/flake.nix#L13&#34;&gt;仅支持 x86_64-linux 平台&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在一个 Cargo 项目中，运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix run github:oxalica/nocargo init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它会生成 &lt;code&gt;flake.nix&lt;/code&gt; 文件如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# See more usages of nocargo at https://github.com/oxalica/nocargo#readme&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  description &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rust package webhookd&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:NixOS/nixpkgs&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:numtide/flake-utils&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nocargo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:oxalica/nocargo&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;follows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nixpkgs&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# inputs.registry-crates-io.follows = &amp;#34;registry-crates-io&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Optionally, you can override crates.io index to get cutting-edge packages.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# registry-crates-io = { url = &amp;#34;github:rust-lang/crates.io-index&amp;#34;; flake = false; };&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nocargo&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;inputs:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eachSystem [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x86_64-linux&amp;#34;&lt;/span&gt; ] (system:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ws &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nocargo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;system&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mkRustPackageOrWorkspace {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./.&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rec&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        packages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          default &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; packages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;webhookd;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          webhookd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ws&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;release&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;webhookd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bin;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          webhookd-dev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ws&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;webhookd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bin;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;构建：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;出现了编译错误，说明 crates.io index 版本不是最新的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;error: Package bytes doesn&amp;#39;t have version 1.2.0 in index. Available versions: 0.0.1 0.1.0 0.1.1 0.1.2 0.2.0 0.2.1 0.2.10 0.2.11 0.2.2 0.2.3 0.2.4 0.2.5 0.2.6 0.2.7 0.2.8 0.2.9 0.3.0 0.4.0 0.4.1 0.4.10 0.4.11 0.4.12 0.4.2 0.4.3 0.4.4 0.4.5 0.4.6 0.4.7 0.4.8 0.4.9 0.5.0 0.5.1 0.5.2 0.5.3 0.5.4 0.5.5 0.5.6 0.6.0 1.0.0 1.0.1 1.1.0
(use &amp;#39;--show-trace&amp;#39; to show detailed location information)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;按照 &lt;code&gt;flake.nix&lt;/code&gt; 中的提示，使用最新的 crates.io index：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# See more usages of nocargo at https://github.com/oxalica/nocargo#readme&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  description &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rust package webhookd&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:NixOS/nixpkgs&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:numtide/flake-utils&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nocargo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:oxalica/nocargo&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;follows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nixpkgs&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;registry-crates-io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;follows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;registry-crates-io&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Optionally, you can override crates.io index to get cutting-edge packages.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    registry-crates-io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:rust-lang/crates.io-index&amp;#34;&lt;/span&gt;; flake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nocargo&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;inputs:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eachSystem [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x86_64-linux&amp;#34;&lt;/span&gt; ] (system:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ws &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nocargo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;system&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mkRustPackageOrWorkspace {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./.&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rec&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        packages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          default &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; packages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;webhookd;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          webhookd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ws&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;release&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;webhookd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bin;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          webhookd-dev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ws&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;webhookd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bin;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;继续构建就成功了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;• Updated input &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nocargo/registry-crates-io&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;github:rust-lang/crates.io-index/1ce12a7e3367a2a673f91f07ab7cc505a0b8f069&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2022-07-17&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  → follows &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;registry-crates-io&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;• Added input &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;registry-crates-io&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;github:rust-lang/crates.io-index/627caba32f416e706bf3f2ceac55230ec79710c5&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2022-08-02&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./result/bin/webhookd --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;webhookd 0.2.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;可以看到，上面的不同工具采用了不同的方法，如果要比较的话：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nix drv 粒度：每个依赖（cargo2nix，crate2nix，nocargo）、所有依赖（crane，naersk）。前者的好处是会跨项目共享依赖，进一步可以传到 binary cache。&lt;/li&gt;
&lt;li&gt;是否生成包括完整依赖信息的 nix 文件：是（cargo2nix，crate2nix）、否（crane，naersk，nocargo）。生成的话，仓库里的 Cargo.lock 和 Cargo.nix 的信息是重复的，如果修改了 Cargo.lock，需要重新同步 Cargo.nix。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>invalid date 报错与时区的关系</title>
      <link>https://jia.je/software/2022/07/26/invalid-date-timezone/</link>
      <pubDate>Tue, 26 Jul 2022 21:51:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/07/26/invalid-date-timezone/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在验题的时候，@HarryChen 发现了一个现象：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ date -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1919-04-13&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;date: invalid date ‘1919-04-13’
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ TZ&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;UTC date -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1919-04-13&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 00:00:00 UTC &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也就是说，这个现象与时区有关，那么为啥 &lt;code&gt;1919-04-13&lt;/code&gt; 是一个不合法的日期呢？&lt;/p&gt;
&lt;h2 id=&#34;时区&#34;&gt;时区&lt;/h2&gt;
&lt;p&gt;实际上，对于某一个时区来说，有的时间是不存在的，最常见的就是夏令时。在 &lt;a href=&#34;https://timezonedb.com/time-zones/Asia/Shanghai&#34;&gt;Timezone DB&lt;/a&gt; 里可以看到，恰好在 1919 年 4 月 13 日发生了一次 UTC+8 到 UTC+9 的变化，因此零点变成了一点，就变成了不合法的日期。&lt;/p&gt;
&lt;p&gt;这个数据，实际上保存在 tzdata 中，可以用 zdump 工具查看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tzdata -v Asia/Shanghai
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 20:45:52 &lt;span style=&#34;color:#ae81ff&#34;&gt;1901&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 04:45:52 &lt;span style=&#34;color:#ae81ff&#34;&gt;1901&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 20:45:52 &lt;span style=&#34;color:#ae81ff&#34;&gt;1901&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 04:45:52 &lt;span style=&#34;color:#ae81ff&#34;&gt;1901&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 15:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 16:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Tue Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 14:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tue Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Tue Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 15:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tue Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri May &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 15:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1940&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fri May &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1940&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri May &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 16:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1940&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Jun  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1940&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 14:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1940&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1940&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 15:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1940&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 23:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1940&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Mar &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 15:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1941&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fri Mar &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1941&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Mar &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 16:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1941&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Mar &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1941&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Nov  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 14:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1941&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Nov  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1941&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Nov  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 15:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1941&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Nov  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 23:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1941&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 15:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1942&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fri Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1942&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 16:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1942&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1942&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 14:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1945&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Sep  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1945&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 15:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1945&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Sep  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 23:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1945&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Tue May &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 15:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1946&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tue May &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1946&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Tue May &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 16:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1946&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Wed May &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1946&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Mon Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 14:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1946&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mon Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1946&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Mon Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 15:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1946&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mon Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1946&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Mon Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 15:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1947&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mon Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1947&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Mon Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 16:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1947&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tue Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1947&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 14:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1947&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fri Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1947&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 15:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1947&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fri Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 23:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1947&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 15:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1948&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fri Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1948&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 16:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1948&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat May  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1948&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Thu Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 14:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1948&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Thu Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1948&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Thu Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 15:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1948&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Thu Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1948&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 15:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1949&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1949&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 16:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1949&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun May  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1949&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri May &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 14:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1949&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fri May &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1949&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri May &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 15:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1949&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fri May &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 23:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1949&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat May  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; 17:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1986&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun May  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1986&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat May  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; 18:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1986&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun May  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 03:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1986&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 16:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1986&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1986&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 17:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1986&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1986&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 17:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 18:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 03:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 16:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 17:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 17:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1988&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1988&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 18:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1988&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 03:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1988&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; 16:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1988&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1988&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; 17:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1988&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1988&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 17:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1989&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1989&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 18:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1989&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 03:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1989&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 16:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1989&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1989&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 17:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1989&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1989&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 17:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1990&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1990&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 18:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1990&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 03:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1990&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 16:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1990&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1990&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 17:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1990&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1990&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 17:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1991&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1991&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 18:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1991&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 03:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1991&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 16:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1991&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1991&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 17:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1991&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1991&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Mon Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; 03:14:07 &lt;span style=&#34;color:#ae81ff&#34;&gt;2038&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mon Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; 11:14:07 &lt;span style=&#34;color:#ae81ff&#34;&gt;2038&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Tue Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; 03:14:07 &lt;span style=&#34;color:#ae81ff&#34;&gt;2038&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tue Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; 11:14:07 &lt;span style=&#34;color:#ae81ff&#34;&gt;2038&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它列出来了历史上 Asia/Shanghai 时区的变化历史。具体的历史，可以查看 &lt;a href=&#34;https://zh.wikipedia.org/zh-cn/%E4%B8%AD%E5%9C%8B%E6%99%82%E5%8D%80&#34;&gt;中国时区&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;此外，历史上，从儒略历到格里高利历的演变过程，也出现了一段“不存在”的日期，如 &lt;a href=&#34;https://stackoverflow.com/questions/35194544/setting-october-14-1582-fails-in-java-sql-date&#34;&gt;Setting October 14 ,1582 fails in java.sql.Date&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ceph Cookbook</title>
      <link>https://jia.je/devops/2022/07/16/ceph-cookbook/</link>
      <pubDate>Sat, 16 Jul 2022 19:32:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2022/07/16/ceph-cookbook/</guid>
      <description>&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OSD：负责操作硬盘的程序，一个硬盘一个 OSD&lt;/li&gt;
&lt;li&gt;MON：管理集群状态，比较重要，可以在多个节点上各跑一个&lt;/li&gt;
&lt;li&gt;MGR：监测集群状态&lt;/li&gt;
&lt;li&gt;RGW(optional)：提供对象存储 API&lt;/li&gt;
&lt;li&gt;MDS(optional)：提供 CephFS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 Ceph 做存储的方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;librados: 库&lt;/li&gt;
&lt;li&gt;radosgw: 对象存储 HTTP API&lt;/li&gt;
&lt;li&gt;rbd: 块存储&lt;/li&gt;
&lt;li&gt;cephfs: 文件系统&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;认证&#34;&gt;认证&lt;/h2&gt;
&lt;p&gt;Ceph 客户端认证需要用户名 + 密钥。默认情况下，用户名是 &lt;code&gt;client.admin&lt;/code&gt;，密钥路径是 &lt;code&gt;/etc/ceph/ceph.用户名.keyring&lt;/code&gt;。&lt;code&gt;ceph --user abc&lt;/code&gt; 表示以用户 &lt;code&gt;client.abc&lt;/code&gt; 的身份访问集群。&lt;/p&gt;
&lt;p&gt;用户的权限是按照服务类型决定的。可以用 &lt;code&gt;ceph auth ls&lt;/code&gt; 显示所有的用户以及权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ceph auth ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;osd.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        key: REDACTED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        caps: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;mgr&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; allow profile osd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        caps: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;mon&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; allow profile osd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        caps: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;osd&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; allow *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client.admin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        key: REDACTED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        caps: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;mds&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; allow *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        caps: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;mgr&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; allow *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        caps: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;mon&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; allow *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        caps: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;osd&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; allow *
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，&lt;code&gt;osd.0&lt;/code&gt; 对 OSD 有所有权限，对 mgr 和 mon 都只有 osd 相关功能的权限；&lt;code&gt;client.admin&lt;/code&gt; 有所有权限。&lt;code&gt;profile&lt;/code&gt; 可以认为是预定义的一些权限集合。&lt;/p&gt;
&lt;p&gt;新建用户并赋予权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph auth get-or-create client.abc mon &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;allow r&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph auth caps client.abc mon &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;allow rw&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;获取权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph auth get client.abc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;删除用户：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph auth print-key client.abc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;osd&#34;&gt;OSD&lt;/h2&gt;
&lt;p&gt;管理 OSD 实际上就是管理存储数据的硬盘。&lt;/p&gt;
&lt;p&gt;查看状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd stat
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显示有多少个在线和离线的 OSD。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd tree
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显示了存储的层级，其中 ID 非负数是实际的 OSD，负数是其他层级，例如存储池，机柜，主机等等。&lt;/p&gt;
&lt;h2 id=&#34;crush&#34;&gt;CRUSH&lt;/h2&gt;
&lt;p&gt;CRUSH 是一个算法，指定了如何给 PG 分配 OSD，到什么类型的设备，确定它的 failure domain 等等。例如，如果指定 failure domain 为 host，那么它就会分配到不同 host 上的 osd，这样一个 host 挂了不至于全军覆没。类似地，还可以设定更多级别的 failure domain，例如 row，rack，chassis 等等。&lt;/p&gt;
&lt;p&gt;OSD 可以设置它的 CRUSH Location，在 ceph.conf 中定义。&lt;/p&gt;
&lt;p&gt;为了配置数据置放的规则，需要设置 CRUSH Rule。&lt;/p&gt;
&lt;p&gt;列举 CRUSH Rule：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd crush rule ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd crush rule dump
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看 CRUSH 层级：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd crush tree --show-shadow
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在里面可能会看到 &lt;code&gt;default~ssd&lt;/code&gt;，它指的意思就是只保留 default 下面的 ssd 设备。&lt;/p&gt;
&lt;p&gt;文本形式导出 CRUSH 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd getcrushmap | crushtool -d - -o crushmap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat crushmap
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 Rule 的定义，如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# simple replicated
rule replicated_rule {
        id 0
        # a replicated rule
        type replicated
        # iterate all devices of &amp;#34;default&amp;#34;
        step take default
        # select n osd with failure domain &amp;#34;osd&amp;#34;
        # firstn: continuous
        step chooseleaf firstn 0 type osd
        step emit
}

# erasure on hdd
rule erasure-hdd {
        id 4
        # an erasure rule
        type erasure
        # try more times to find a good mapping
        step set_chooseleaf_tries 5
        step set_choose_tries 100
        # iterate hdd devices of &amp;#34;default&amp;#34;, i.e. &amp;#34;default~hdd&amp;#34;
        step take default class hdd
        # select n osd with failure domain &amp;#34;osd&amp;#34;
        # indep: replace failed osd with another
        step choose indep 0 type osd
        step emit
}

# replicated on hdd
rule replicated-hdd-osd {
        id 5
        # a replicated rule
        type replicated
        # iterate hdd devices of &amp;#34;default&amp;#34;, i.e. &amp;#34;default~hdd&amp;#34;
        step take default class hdd
        # select n osd with failure domain &amp;#34;osd&amp;#34;
        # firstn: continuous
        step choose firstn 0 type osd
        step emit
}

# replicated on different hosts
rule replicated-host {
        id 6
        # a replicated rule
        type replicated
        # iterate all devices of &amp;#34;default&amp;#34;
        step take default
        # select n osd with failure domain &amp;#34;host&amp;#34;
        # firstn: continuous
        step chooseleaf firstn 0 type host
        step emit
}

# replicate one on ssd, two on hdd
rule replicated-ssd-primary {
        id 7
        # a replicated rule
        type replicated

        # iterate ssd devices of &amp;#34;default&amp;#34;
        step take default class ssd
        step chooseleaf firstn 1 type host
        step emit

        # iterate hdd devices of &amp;#34;default&amp;#34;
        step take default class hdd
        step chooseleaf firstn 2 type host
        step emit
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;choose 和 chooseleaf 的区别是，前者可以 choose 到中间层级，例如先选择 host，再在 host 里面选 osd；而 chooseleaf 是直接找到 osd。所以 &lt;code&gt;choose type osd&lt;/code&gt; 和 &lt;code&gt;chooseleaf type osd&lt;/code&gt; 是等价的。&lt;/p&gt;
&lt;p&gt;如果这个搜索条件比较复杂，例如找到了某一个 host，里面的 osd 个数不够，就需要重新搜。&lt;/p&gt;
&lt;p&gt;新建一个 Replicated CRUSH Rule：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# root=default, failure domain=osd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd crush rule create-replicated xxx default osd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# root=default, failure domain=host, class=ssd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd crush rule create-replicated yyy default host ssd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果指定了 device class，它只会在对应类型的设备上存储。&lt;/p&gt;
&lt;h2 id=&#34;pool&#34;&gt;Pool&lt;/h2&gt;
&lt;p&gt;Pool 是存储池，后续的 RBD/CephFS 功能都需要指定存储池来工作。&lt;/p&gt;
&lt;p&gt;创建存储池：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd pool create xxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd pool create PG_NUM
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了性能考虑，可以设置 PG（Placement Group）数量。默认情况下，会创建 replicated 类型的存储池，也就是会存多份，类似 RAID1。也可以设置成 erasure 类型的存储池，类似 RAID5。&lt;/p&gt;
&lt;p&gt;每个 Placement Group 里的数据会保存在同一组 OSD 中。数据通过 hash，会分布在不同的 PG 里。&lt;/p&gt;
&lt;p&gt;列举所有的存储池：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd lspools
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看存储池的使用量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rados df
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;存储池的 IO 状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd pool stats
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对存储池做快照：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd mksnap xxx snap-xxx-123
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pg&#34;&gt;PG&lt;/h3&gt;
&lt;p&gt;PG 是数据存放的组，每个对象都会放到一个 PG 里面，而 PG 会决定它保存到哪些 OSD 上（具体哪些 OSD 是由 CRUSH 决定的）。PG 数量只有一个的话，那么一个 pool 的所有数据都会存放在某几个 OSD 中，一旦这几个 OSD 都不工作了，那么整个 pool 的数据都不能访问了。PG 增多了以后，就会分布到不同的 OSD 上，并且各个 OSD 的占用也会比较均匀。&lt;/p&gt;
&lt;p&gt;查看 PG 状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph pg dump
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;auto-scale&#34;&gt;Auto Scale&lt;/h4&gt;
&lt;p&gt;PG 数量可以让集群自动调整：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd pool set xxx pg_autoscale_mode on
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置 autoscale 目标为每个 OSD 平均 100 个 PG：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph config set global mon_target_pg_per_osd &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;全局 autoscale 开关：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Enable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd pool unset noautoscale
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Disable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd pool set unautoscale
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Read&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd pool get noautoscale
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看 autoscale 状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd pool autoscale-status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果没有显示，说明 autoscale 没有工作，可能的原因是，部分 pool 采用了指定 osd class 的 crush rule，例如指定了 hdd 盘，但是也有部分 pool 没有指定盘的类型，例如默认的 replicated_rule。这时候，把这些盘也设置成一个指定 osd class 的 crush rule 即可。&lt;/p&gt;
&lt;h2 id=&#34;rbd&#34;&gt;RBD&lt;/h2&gt;
&lt;p&gt;RBD 把 Ceph 暴露为块设备。&lt;/p&gt;
&lt;h3 id=&#34;创建&#34;&gt;创建&lt;/h3&gt;
&lt;p&gt;初始化 Pool 用于 RBD：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd pool init xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了安全性考虑，一般会为 RBD 用户创建单独的用户：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph auth get-or-create client.abc mon &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;profile rbd&amp;#39;&lt;/span&gt; osd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;profile rbd pool=xxx&amp;#39;&lt;/span&gt; mgr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;profile rbd pool=xxx&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建 RBD 镜像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd create --size &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; xxx/yyy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;表示在 Pool xxx 上面创建了一个名字为 yyy 大小为 1024MB 的镜像。&lt;/p&gt;
&lt;h3 id=&#34;状态&#34;&gt;状态&lt;/h3&gt;
&lt;p&gt;列举 Pool 里的镜像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd ls xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认的 Pool 名字是 &lt;code&gt;rbd&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;查看镜像信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd info yyy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd info xxx/yyy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;扩容&#34;&gt;扩容&lt;/h3&gt;
&lt;p&gt;修改镜像的容量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd resize --size &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; yyy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd resize --size &lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt; yyy --allow-shrink
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;挂载&#34;&gt;挂载&lt;/h3&gt;
&lt;p&gt;在其他机器挂载 RBD 的时候，首先要修改 &lt;code&gt;/etc/ceph&lt;/code&gt; 下配置，确认有用户，密钥和 MON 的地址。&lt;/p&gt;
&lt;p&gt;然后，用 rbd 挂载设备：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd device map xxx/yyy --id abc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以用户 abc 的身份挂载 Pool xxx 下面的 yyy 镜像。&lt;/p&gt;
&lt;p&gt;这时候就可以在 &lt;code&gt;/dev/rbd*&lt;/code&gt; 或者 &lt;code&gt;/dev/rbd/&lt;/code&gt; 下面看到设备文件了。&lt;/p&gt;
&lt;p&gt;显示已经挂载的设备：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd device list
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cephfs&#34;&gt;CephFS&lt;/h2&gt;
&lt;h3 id=&#34;创建-1&#34;&gt;创建&lt;/h3&gt;
&lt;p&gt;如果配置了编排器（Orchestrator），可以直接用命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph fs volume create xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建一个名为 &lt;code&gt;xxx&lt;/code&gt; 的 CephFS。&lt;/p&gt;
&lt;p&gt;也可以手动创建：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ceph osd pool create xxx_data0
ceph osd pool create xxx_metadata
ceph fs new xxx xxx_metadata xxx_data0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就创建了两个 pool，分别用于存储元数据和文件数据。一个 CephFS 需要一个 pool 保存元数据，若干个 pool 保存文件数据。&lt;/p&gt;
&lt;p&gt;创建了 CephFS 以后，相应的 MDS 也会启动。&lt;/p&gt;
&lt;h3 id=&#34;状态-1&#34;&gt;状态&lt;/h3&gt;
&lt;p&gt;查看 MDS 状态：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ceph mds stat
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;客户端配置&#34;&gt;客户端配置&lt;/h3&gt;
&lt;p&gt;在挂载 CephFS 之前，首先要配置客户端。&lt;/p&gt;
&lt;p&gt;在集群里运行 &lt;code&gt;ceph config generate-minimal-conf&lt;/code&gt;，它会生成一个配置文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ceph config generate-minimal-conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# minimal ceph.conf for &amp;lt;fsid&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;global&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fsid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &amp;lt;fsid&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mon_host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v2:x.x.x.x:3300/0,v1:x.x.x.x:6789/0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把内容复制到客户端的 &lt;code&gt;/etc/ceph/ceph.conf&lt;/code&gt;。这样客户端就能找到集群的 MON 地址和 FSID。&lt;/p&gt;
&lt;p&gt;接着，我们在集群上给客户端创建一个用户：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ceph fs authorize xxx client.abc / rw
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建一个用户 abc，对 CephFS xxx 有读写的权限。把输出保存到客户端的 &lt;code&gt;/etc/ceph/ceph.client.abc.keyring&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h3 id=&#34;挂载-1&#34;&gt;挂载&lt;/h3&gt;
&lt;p&gt;挂载：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t ceph abc@.xxx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/ MOUNTPOINT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t ceph abc@&amp;lt;fsid&amp;gt;.xxx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/ MOUNTPOINT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t ceph abc@&amp;lt;fsid&amp;gt;.xxx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/ -o mon_addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x.x.x.x:6789,secret&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;REDACTED MOUNTPOINT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t ceph abc@.xxx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/ -o mon_addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x.x.x.x:6789/y.y.y.y:6789,secretfile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/etc/ceph/xxx.secret MOUNTPOINT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t ceph -o name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;client.abc,secret&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;REDACTED,mds_namespace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;xxx MON_IP:/ MOUNTPOINT
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以用户 &lt;code&gt;client.abc&lt;/code&gt; 的身份登录，挂载 CepFS &lt;code&gt;xxx&lt;/code&gt; 下面的 &lt;code&gt;/&lt;/code&gt; 目录到 &lt;code&gt;MOUNTPOINT&lt;/code&gt;。它会读取 &lt;code&gt;/etc/ceph&lt;/code&gt; 下面的配置，如果已经 &lt;code&gt;ceph.conf&lt;/code&gt; 写了，命令行里就可以不写。&lt;/p&gt;
&lt;p&gt;fsid 指的不是 CephFS 的 ID，实际上是集群的 ID：&lt;code&gt;ceph fsid&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;限额&#34;&gt;限额&lt;/h3&gt;
&lt;p&gt;CephFS 可以对目录进行限额：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setfattr -n ceph.quota.max_bytes -v LIMIT PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setfattr -n ceph.quota.max_files -v LIMIT PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getfattr -n ceph.quota.max_bytes PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getfattr -n ceph.quota.max_files PATH
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;限制目录大小和文件数量。LIMIT 是 0 的时候表示没有限制。&lt;/p&gt;
&lt;h3 id=&#34;nfs&#34;&gt;NFS&lt;/h3&gt;
&lt;p&gt;可以把 CephFS 或者 RGW 通过 NFS 的方式共享出去。&lt;/p&gt;
&lt;p&gt;启动 NFS 服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph nfs cluster create xxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph nfs cluster create xxx &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host1,host2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在主机上运行 NFS 服务器，NFS 集群的名字叫做 xxx。&lt;/p&gt;
&lt;p&gt;查看 NFS 集群信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph nfs cluster info xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;列举所有 NFS 集群：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph nfs cluster ls
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;NFS 导出 CephFS：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph nfs export create cephfs --cluster-id xxx --pseudo-path /a/b/c --fsname some-cephfs-name &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/d/e/f&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--client_addr y.y.y.y&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就导出了 CephFS 内的一个目录，客户端可以通过 NFS 挂载 /a/b/c 路径（pseudo path）来访问。可以设置客户端的 IP 访问权限。&lt;/p&gt;
&lt;p&gt;这样在客户端就可以 mount：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t nfs x.x.x.x:/a/b/c /mnt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;radosgw&#34;&gt;RadosGW&lt;/h2&gt;
&lt;p&gt;RGW 提供了 S3 或者 OpenStack Swift 兼容的对象存储 API。&lt;/p&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h2 id=&#34;编排器&#34;&gt;编排器&lt;/h2&gt;
&lt;p&gt;由于 Ceph 需要运行多个 daemon，并且都在不同的容器中运行，所以一般会跑一个系统级的编排器，用于新增和管理这些容器。&lt;/p&gt;
&lt;p&gt;查看当前编排器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ceph orch status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Backend: cephadm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Available: Yes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Paused: No
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比较常见的就是 cephadm，安装的时候如果用了 cephadm，那么编排器也是它。&lt;/p&gt;
&lt;p&gt;被编排的服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch ls
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;被编排的容器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch ps
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;被编排的主机：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch host ls
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;添加新机器&#34;&gt;添加新机器&lt;/h3&gt;
&lt;p&gt;首先，复制 &lt;code&gt;/etc/ceph/ceph.pub&lt;/code&gt; 到新机器的 &lt;code&gt;/root/.ssh/authorized_keys&lt;/code&gt; 中&lt;/p&gt;
&lt;p&gt;接着，添加机器到编排器中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch host add xxxx y.y.y.y
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;导出编排器配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch ls --export &amp;gt; cephadm.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果想让一些 daemon 只运行在部分主机上，可以修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# change&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;placement&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;host_pattern&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# to&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;placement&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;host_pattern&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xxx&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch apply -i cephadm.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;配置监控&#34;&gt;配置监控&lt;/h3&gt;
&lt;p&gt;添加监控相关的服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch apply node-exporter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch apply alertmanager
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch apply prometheus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch apply grafana
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch ps
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以访问 Grafana 看到集群的状态。&lt;/p&gt;
&lt;h2 id=&#34;更新&#34;&gt;更新&lt;/h2&gt;
&lt;p&gt;使用容器编排器来升级：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch upgrade start --ceph-version x.x.x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch upgrade start --image quay.io/ceph/ceph:vx.x.x
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果 docker hub 上找不到 image，就从 quay.io 拉取。&lt;/p&gt;
&lt;p&gt;查看升级状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch upgrade status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph -s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看 cephadm 日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph -W cephadm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/architecture/&#34;&gt;Ceph Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/rados/operations/user-management/&#34;&gt;Ceph User Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/cephfs/createfs/&#34;&gt;Ceph Create a Ceph File System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/man/8/mount.ceph/&#34;&gt;mount.ceph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/cephfs/quota/&#34;&gt;Ceph CephFS Quota&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/rbd/rados-rbd-cmds/&#34;&gt;Ceph Basic Block Device Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/quincy/cephadm/upgrade/&#34;&gt;Ceph Upgrade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/mgr/nfs/&#34;&gt;Ceph CephFS &amp;amp; RGW Exports Over NFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/quincy/rados/operations/crush-map/&#34;&gt;CRUSH Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/rados/operations/crush-map-edits/&#34;&gt;CRUSH Map Edits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://llussy.github.io/2019/08/17/ceph-architecture/&#34;&gt;ceph 架构和概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_ceph_storage/5/html/object_gateway_guide/the-ceph-object-gateway_rgw&#34;&gt;RedHat Object Gateway Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>编程作业中的学术诚信</title>
      <link>https://jia.je/programming/2022/07/12/writing-code-cn/</link>
      <pubDate>Tue, 12 Jul 2022 10:49:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2022/07/12/writing-code-cn/</guid>
      <description>&lt;p&gt;本文是我自己对 &lt;a href=&#34;https://integrity.mit.edu/handbook/writing-code&#34;&gt;Academic Integrity at MIT: Writing Code&lt;/a&gt; 的非官方中文翻译。本文已经得到了官方的邮件授权。&lt;/p&gt;
&lt;h2 id=&#34;编写代码-writing-code&#34;&gt;编写代码 Writing Code&lt;/h2&gt;
&lt;p&gt;与学术写作类似，当你在做课程项目的时候，如果使用了或者改编了其他人开发的代码，你必须要引用代码的来源。你可以在代码注释中引用代码来源。这些注释不仅保护了他人的劳动成果，也会帮助你理解代码和调试。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Writing code is similar to academic writing in that when you use or
adapt code developed by someone else as part of your project, you must
cite your source. However, instead of quoting or paraphrasing a source,
you include an inline comment in the code. These comments not only
ensure you are giving proper credit, but help with code understanding
and debugging.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;什么时候应该在代码中引用来源when-should-i-cite-a-source-in-my-code&#34;&gt;什么时候应该在代码中引用来源？When should I cite a source in my code?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当你从外部来源复制了代码。无论你是复制了代码片段，还是一整个模块，你都需要引用来源。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; When you copy code from an external source. Whether you are copying a
 snippet of code or an entire module, you should credit the source.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当你复制了代码并做了改动，你依然要引用来源。你并不是代码的原作者。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; When you copy the code and adapt it, you should still credit the source.
 You were not the original developer of the code.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;我应该如何引用代码how-should-i-cite-the-code&#34;&gt;我应该如何引用代码？How should I cite the code?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通常来说，代码的网址和下载时间就足够了。如果可以让读者更加清晰地了解到代码来源，可以增加更多的细节。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Generally, the URL and the date of retrieval are sufficient. Add
 more details if it will help the reader get a clearer
 understanding of the source.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你修改了代码，你需要注明：“Adapted from:”（修改自）或者“Based on”（基于）。这样读者就知道你修改了代码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; If you adapted the code, you should indicate “Adapted from:” or
 “Based on” so it is understood that you modified the code.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你的老师可能会对你如何引用代码有具体的要求。如果你不能确认什么是可行的，请询问你的老师。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Your instructor may have specific instructions on how you should
 or should not cite your sources. If you are not clear on what is
 acceptable, ask your instructor.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;开源软件的使用-use-of-open-source-software&#34;&gt;开源软件的使用 Use of Open Source Software&lt;/h2&gt;
&lt;p&gt;当你使用开源软件项目的代码的时候，你不仅要注明代码的来源，还需要遵循代码的开源软件许可证。请记住：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;When you use code from an open source project, you need both to
attribute the source and follow the terms of any open source license
that applies to the code you are using. Keep in mind:
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当你下载源码的时候，它的开源软件许可证通常也在源码中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; When you download the source, the license is typically part of the
 download.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同时，代码里也通常会包括它的版权和使用条款。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Also, the source code itself will typically contain the
 copyright and terms of use.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当你引入了开源代码，并且它附带了开源软件许可证，你应该把它的版权声明复制到你的代码中，和/或把许可证复制到代码目录中的文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; When you incorporate open-source-licensed code into a program,
 it is good practice to duplicate the copyright in your code,
 and/or store the license in a file with the code.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果在下载的文件里没有找到开源软件许可证，你可以在开源项目的网站上找到全文，如 &lt;a href=&#34;https://httpd.apache.org/&#34;&gt;Apache HTTP Server 网站&lt;/a&gt; 或者 &lt;a href=&#34;https://opensource.org/&#34;&gt;Open Source Initiative (OSI) 网站&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; If you don’t obtain the license with the download, you should be
 able to find it on the site of the open source project, such as
 Apache HTTP Server site, or on the Open Source Initiative (OSI)
 site.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;老师决定具体的代码复用程度-instructors-determine-the-specific-expectations-around-re-use-of-code-in-each-class&#34;&gt;老师决定具体的代码复用程度 Instructors determine the specific expectations around re-use of code in each class.&lt;/h2&gt;
&lt;p&gt;通常，老师会确定课程的协作规则。如果这个规则没有明确地给出来，或者你不确认什么是可行的，请询问你的老师。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Often, the requirements are described in the collaboration policy for
the class. If policy is not clearly described in the course materials
and you are not sure what is acceptable, ask your instructor.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;例子&#34;&gt;例子&lt;/h3&gt;
&lt;p&gt;下面给出一个例子，是课程（Spring 2012 6.005 Elements of Software Construction）的协作规则：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Collaboration policy from Spring 2012 6.005 Elements of Software
Construction: (used with the permission of Professor Rob Miller, Dept of
Electrical Engineering &amp;amp; Computer Science)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们鼓励同学们互相帮助，但是为了保证每个人都有良好的独立学习体验，我们对你们做了如下的限制：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;We encourage you to help each other with work in this class, but there
are limits to what you can do, to ensure that everybody has a good
individual learning experience.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;单人作业-individual-work&#34;&gt;单人作业 Individual work&lt;/h4&gt;
&lt;p&gt;课程里的习题都要单人完成。我们鼓励同学们讨论实现方法，但是你的代码和报告都需要自己完成。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Problem sets in this class are intended to be primarily individual
efforts. You are encouraged to discuss approaches with other students
but your code and your write-up must be your own.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你不能使用其他同学编写的资料，无论是这个学期还是以往学期的同学。你也不可以把你的成果提供给其他同学。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You may not use materials produced as course work by other students,
whether in this term or previous terms, nor may you provide work for
other students to use.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;帮助其他同学是应该的。但要保证一个原则，当你在帮助其他同学的时候，你自己的答案或代码不应该可以看到，无论是自己还是其他同学。可以养成一个习惯，帮助他人的时候把笔记本电脑合上。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;It’s good to help other students. But as a general rule, during the time
that you are helping another student, your own solution should not be
visible, either to you or to them. Make a habit of closing your laptop
while you’re helping.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在帮助其他同学，阅读同学的代码的时候，你会看到同学的解答。你可以从同学的方法里获得灵感，但是不能复制他们的成果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;During code review, you will see classmates’ solutions to a problem set.
While it is fine to take inspiration from their approach, do not copy
their work.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可以用外部网站上的资料，比如 StackOverflow，但前提是加上引用，并且作业要求里允许这么做。特别地，如果作业要求里写了“实现 X 功能”，那么你必须自己实现 X 功能，而不能复用外部的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;It’s fine to use material from external sources like StackOverflow, but
only with proper attribution, and only if the assignment allows it. In
particular, if the assignment says “implement X,” then you must create
your own X, not reuse one from an external source.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你也可以用课程组提供的代码，不需要引用。老师提供的代码在未经允许的情况下，不能公开分享，我们后面会讨论这个问题。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;It’s also fine to use any code provided by this semester’s 6.031 staff
(in class, readings, or problem sets), without need for attribution.
Staff-provided code may not be publicly shared without permission,
however, as discussed later in this document.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例子一 Example 1：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A 和 B 做作业的时候坐在一起。他们简略地讨论实现的不同方法。他们在白板上画流程图。当 A 发现 Java 标准库中一个有用的类，她把这个发现告诉了 B。当 B 发现了 StackOverflow 上的一个回答，他给 A 发送了 URL。可以。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Alyssa and Ben sit next to each other with their laptops while
  working on a problem set. They talk in general terms about
  different approaches to doing the problem set. They draw
  diagrams on the whiteboard. When Alyssa discovers a useful class
  in the Java library, she mentions it to Ben. When Ben finds a
  StackOverflow answer that helps, he sends the URL to Alyssa. OK.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在他们编写代码的时候，他们把代码大声念出来，好让双方都可以编写正确的代码。错误！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  As they type lines of code, they speak the code aloud to the
  other person, to make sure both people have the right code.
  INAPPROPRIATE.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在作业最困难的部分，A 和 B 互相看电脑屏幕，并对比代码，确认他们代码实现都是正确的。错误！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  In a tricky part of the problem set, Alyssa and Ben look at each
  other’s screens and compare them so that they can get their code
  right. INAPPROPRIATE.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子二 Example 2：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;J 已经完成了作业，但是他的朋友 B 正在努力解决一个 bug。J 坐在 B 旁边，看他的代码，帮他调试出了问题。可以。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Jerry already finished the problem set, but his friend Ben is
  now struggling with a nasty bug. Jerry sits next to Ben, looks
  at his code, and helps him debug. OK.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;J 打开了自己的笔记本，找到自己的答案，然后指着自己的代码给 B 纠正错误。错误！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Jerry opens his own laptop, finds his solution to the problem
  set, and refers to it while he’s helping Ben correct his code.
  INAPPROPRIATE.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子三 Example 3：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;L 这周有很多作业，但是因为时间和身体原因来不及做。他已经错过截止时间两天了，但基本没有什么进度。B 觉得 L 可怜，想要帮助 L。在 L 写作业的时候，B 告诉 L 他是怎么做作业的。B 已经提交了自己的答案，并且在帮助 L 的时候，不打开自己的笔记本电脑。可以。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Louis had three problem sets and two quizzes this week, was away
  from campus for several days for a track meet, and then got
  sick. He’s already taken two slack days on the deadline and has
  made almost no progress on the problem set. Ben feels sorry for
  Louis and wants to help, so he sits down with Louis and talks
  with him about how to do the problem set while Louis is working
  on it. Ben already handed in his own solution, but he doesn’t
  open his own laptop to look at it while he’s helping Louis. OK.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B 打开了自己的笔记本电脑，并且在帮助 L 的时候阅读自己的代码。错误！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Ben opens his laptop and reads his own code while he’s helping
  Louis. INAPPROPRIATE.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B 花了几个小时帮助 L，但是 L 还是没有完成。但是 B 需要去做自己的事情了。在 L 承诺只有在必要的时候才会看 B 的代码之后，B 把自己的代码上传到 Dropbox 并且分享给了 L。错误！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Ben has by now spent a couple hours with Louis, and Louis still
  needs help, but Ben really needs to get back to his own work. He
  puts his code in a Dropbox and shares it with Louis, after Louis
  promises only to look at it when he really has to.
  INAPPROPRIATE.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子四 Example 4：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;J 和 E 独立完成作业。他们交换了自己的测例来检查作业。错误！测例是题目的一部分，也是学习体验的一部分。如果你使用了其他人的测例，就是在抄袭，即使只是临时的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  John and Ellen both worked on their problem sets separately.
  They exchange their test cases with each other to check their
  work. INAPPROPRIATE. Test cases are part of the material for the
  problem set, and part of the learning experience of the course.
  You are copying if you use somebody else’s test cases, even if
  temporarily.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，在上面的例子中，双方都负有学术不端的责任。抄袭作业，或者把自己的作业提供给他人，是一个很严重的事情，可能导致分数扣减，课程不及格甚至处分。抄袭作业，或者帮助他人抄袭，可能会给你的成绩单上添加一个不能消除的 F。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Note that in the examples marked inappropriate above, both people are
held responsible for the violation in academic honesty. Copying work, or
knowingly making work available for copying, in contravention of this
policy is a serious offense that may incur reduced grades, failing the
course, and disciplinary action. Copying, or helping somebody copy, may
result in an F on your transcript that you will not be able to drop.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述的要求对课程所有的单人作业都使用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This policy applies to all coursework that is handed in by an
individual: problem sets, reading exercises, nanoquiz makeups, etc.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;组队作业-group-work&#34;&gt;组队作业 Group work&lt;/h4&gt;
&lt;p&gt;你应该和你的队友合作完成组队作业，并且每个人都应该有接近的任务量。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You should collaborate with your partners on all aspects of group
project work and in-class collaborative exercises, and each of you is
expected to contribute a roughly equal share to design and
implementation.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可以复用自己在学期内早些时候编写的代码等（包括之前自己和其他队友完成的）。你也可以用课程提供的任何代码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You may reuse designs, ideas and code from your own work earlier in the
semester (even if it was done with a different partner). You may also
use any code provided by this semester’s 6.031 staff.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可以使用外部代码，只要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有同学都可以访问这个资料&lt;/li&gt;
&lt;li&gt;进行了合理的引用&lt;/li&gt;
&lt;li&gt;作业允许你这么做&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;特别地，如果作业要求你“实现 X 功能”，你就必须自己实现 X 功能，不能复用他人的。&lt;/p&gt;
&lt;p&gt;你们组不能复用其他组的代码和思路，无论是其他组是当前学期还是以往学期的同学。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You may also use material from external sources, so long as: (1) the
material is available to all students in the class; (2) you give proper
attribution; and (3) the assignment itself allows it. In particular, if
the assignment says “implement X,” then you must create your own X, not
reuse someone else’s. Finally, your group may not reuse designs, ideas,
or code created by another group, in this semester or previous
semesters.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;即使修改网络上的代码很常见-although-it-is-common-practice-to-adapt-code-examples-found-on-the-web&#34;&gt;即使修改网络上的代码很常见 Although it is common practice to adapt code examples found on the web,&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;你不能抄袭其他同学的代码。你的同学不是一个合法的代码来源。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  You should never copy code from other students. Your peers are
  not considered an authorized source.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你不能简单地复用网上的代码。就像学术写作，你可以采用别人的思路，但是你也要把自己的理解加进去。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  You should not simply re-use code as the solution to an
  assignment. Like academic writing, your code can incorporate the
  ideas of others but should reflect your original approach to the
  problem.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;引用代码的例子-examples-of-citing-code-sources&#34;&gt;引用代码的例子 Examples of citing code sources&lt;/h2&gt;
&lt;p&gt;例子一 Example 1：&lt;/p&gt;
&lt;p&gt;在 Apache 项目的源码的 PluginProxyUtil 类中，开发者引用了论坛的 URL，作者和时间：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;In describing the class PluginProxyUtil in the Apache Project source
code, the developer cites the source as a post in a forum and includes
the URL, author and date:
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* A utility class that gives applets the ability to detect proxy host settings.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* This was adapted from a post from Chris Forster on 20030227 to a Sun Java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* forum here:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* http://forum.java.sun.com/thread.jspa?threadID=364342&amp;amp;tstart=120
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;[…]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（来源：Apache Project 源代码 &lt;a href=&#34;http://svn.apache.org&#34;&gt;http://svn.apache.org&lt;/a&gt; 于 2019 年 7 月获取）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(Source: Apache Project source code http://svn.apache.org retrieved in
July 2019.)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例子二 Example 2：&lt;/p&gt;
&lt;p&gt;在 Google Chrome &lt;code&gt;stack_trace_win&lt;/code&gt; 的 &lt;code&gt;OutputTraceToStream&lt;/code&gt; 函数中，开发者引用了 Microsoft Developer Network 并且附带了 URL：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;In the function OutputTraceToStream in the Google Chrome stack_trace_win
source code, the developer cites the source code as the Microsoft
Developer Network and includes a URL:
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Code adapted from MSDN example:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// http://msdn.microsoft.com/en-us/library/ms680578(VS.85).aspx 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（来源：https://github.com/adobe/chromium/blob/master/base/debug/stack_trace_win.cc 于 2019 年 7 月获取）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(Source:
https://github.com/adobe/chromium/blob/master/base/debug/stack_trace_win.cc
retrieved in July 2019.)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;引用附有开源许可证的代码的例子-example-of-open-source-licensed-code&#34;&gt;引用附有开源许可证的代码的例子 Example of open-source-licensed code:&lt;/h2&gt;
&lt;p&gt;在 Google Chrome &lt;code&gt;stack_trace_win&lt;/code&gt; 代码的开头，可以看到版权声明和开源许可证的引用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;At the top of the Google Chrome stack_trace_win source file, note the
copyright and reference to the open source license:
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Copyright (c) 2011 The Chromium Authors. All rights reserved.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Use of this source code is governed by a BSD-style license that can be
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// found in the LICENSE file.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你把这个代码加入到你的程序中，你需要遵守 Chromium 作者的开源许可证协议中的条款。虽然这个开源许可证只要求你在重分发的时候复制一份版权声明和许可证，一个好习惯是无论是否要求，你都要复制它的版权声明到代码中，和/或把它的许可证放到代码目录的文件中。这样的话，如果你在将来想要重分发你的代码，就很容易检查知识产权相关的问题。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;If you incorporate this code into a program, you should follow the terms
outlined in The Chromium Authors&#39; open source license file, which is
shown below. While this license only requires that you duplicate the
copyright and license if you are redistributing the code, it is good
practice to always duplicate the copyright in your code, and/or store
the license in a file with the code. This way, if you want to
redistribute the code later, intellectual property reviewing becomes
much easier.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Copyright (c) 2014 The Chromium Authors. All rights reserved.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Redistribution and use in source and binary forms, with or without
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// modification, are permitted provided that the following conditions are
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// met:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//* Redistributions of source code must retain the above copyright
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// notice, this list of conditions and the following disclaimer.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//* Redistributions in binary form must reproduce the above
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// copyright notice, this list of conditions and the following disclaimer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in the documentation and/or other materials provided with the
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// distribution.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//* Neither the name of Google Inc. nor the names of its
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// contributors may be used to endorse or promote products derived from
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// this software without specific prior written permission.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;AS IS&amp;#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（来源：The Chromium Authors license file &lt;a href=&#34;https://src.chromium.org/viewvc/chrome/trunk/src/LICENSE&#34;&gt;https://src.chromium.org/viewvc/chrome/trunk/src/LICENSE&lt;/a&gt; 于 2019 年 7 月获取）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(Source: The Chromium Authors license file
https://src.chromium.org/viewvc/chrome/trunk/src/LICENSE retrieved in
July 2019.)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Archive 中 COMMON 符号的链接问题</title>
      <link>https://jia.je/software/2022/07/11/archive-common-linking/</link>
      <pubDate>Mon, 11 Jul 2022 22:53:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/07/11/archive-common-linking/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近看到一个 &lt;a href=&#34;https://github.com/NixOS/nixpkgs/issues/180308&#34;&gt;issue: irssi 1.4.1 fails to build on darwin arm64&lt;/a&gt;，它的现象是，链接的时候会报错：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Undefined symbols for architecture arm64:
  &amp;#34;_current_theme&amp;#34;, referenced from:
      _format_get_text_theme in libfe_common_core.a(formats.c.o)
      _format_get_text in libfe_common_core.a(formats.c.o)
      _strip_codes in libfe_common_core.a(formats.c.o)
      _format_send_as_gui_flags in libfe_common_core.a(formats.c.o)
      _window_print_daychange in libfe_common_core.a(fe-windows.c.o)
      _printformat_module_dest_charargs in libfe_common_core.a(printtext.c.o)
      _printformat_module_gui_args in libfe_common_core.a(printtext.c.o)
      ...
  &amp;#34;_default_formats&amp;#34;, referenced from:
      _format_find_tag in libfe_common_core.a(formats.c.o)
      _format_get_text_theme_args in libfe_common_core.a(formats.c.o)
      _printformat_module_dest_args in libfe_common_core.a(printtext.c.o)
      _printformat_module_gui_args in libfe_common_core.a(printtext.c.o)
ld: symbol(s) not found for architecture arm64
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码 &lt;code&gt;themes.c&lt;/code&gt; 定义了这两个全局变量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;THEME_REC &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;current_theme;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GHashTable &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;default_formats;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并且 &lt;code&gt;themes.c&lt;/code&gt; 编译出来的 &lt;code&gt;themes.c.o&lt;/code&gt; 也在 archive 文件中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ar t src/fe-common/core/libfe_common_core.a | grep themes.c.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;themes.c.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并且 &lt;code&gt;themes.c.o&lt;/code&gt; 也定义了这两个符号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -t src/fe-common/core/libfe_common_core.a.p/themes.c.o | grep COM
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000008&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; COM    &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0300&lt;/span&gt; _current_theme
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000008&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; COM    &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0300&lt;/span&gt; _default_formats
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000008&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; COM    &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0300&lt;/span&gt; _themes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么，问题在哪呢？看起来，链接的时候提供了 &lt;code&gt;libfe_common_core.a&lt;/code&gt; 的参数，并且 &lt;code&gt;.a&lt;/code&gt; 里面也有 &lt;code&gt;themes.c.o&lt;/code&gt;，我们要找的符号也有定义，那么为什么会出现 &lt;code&gt;Undefined symbols&lt;/code&gt; 的问题呢？&lt;/p&gt;
&lt;p&gt;答案出在 COMMON 符号上。&lt;/p&gt;
&lt;h2 id=&#34;common-符号&#34;&gt;COMMON 符号&lt;/h2&gt;
&lt;p&gt;COMMON 符号的原因和原理，详细可以见 &lt;a href=&#34;https://maskray.me/blog/2022-02-06-all-about-common-symbols&#34;&gt;MaskRay 的博客 All about COMMON symbols&lt;/a&gt;，里面从链接器的角度很详细地讲述了这个问题。&lt;/p&gt;
&lt;p&gt;简单来说，COMMON 符号的引入是为了和 Fortran 进行互操作。它在 C 中对应了没有初始化语句的全局变量。实际上到最后，还是会保存到 .bss 段中，默认清零。所以：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; common_symbol;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; not_common_symbol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两个语句最终结果是类似的，只不过第一个是 COMMON Symbol，第二个就是普通的 GLOBAL Symbol。&lt;/p&gt;
&lt;p&gt;这看起来和 &lt;code&gt;Undefined symbols&lt;/code&gt; 错误还是没有关系。问题在哪？&lt;/p&gt;
&lt;h2 id=&#34;archive&#34;&gt;Archive&lt;/h2&gt;
&lt;p&gt;静态库通常是以 Archive 的方式给出，后缀是 &lt;code&gt;.a&lt;/code&gt;。它实际上是一堆 &lt;code&gt;.o&lt;/code&gt; 打包的集合，外加一个索引，即单独保存一个表，保存了每个 &lt;code&gt;.o&lt;/code&gt; 定义了哪些符号。这样的好处是找符号的时候，不用遍历 &lt;code&gt;.o&lt;/code&gt;，而是直接在索引里面找相关的符号。&lt;/p&gt;
&lt;p&gt;为了创建一个 Archive，Linux 上可以用 &lt;code&gt;ar&lt;/code&gt; 命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ar cr libxxx.a a.o b.o c.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;c&lt;/code&gt; 表示 create，&lt;code&gt;r&lt;/code&gt; 表示插入（和覆盖）。&lt;/p&gt;
&lt;p&gt;macOS 上要用 &lt;code&gt;libtool -static&lt;/code&gt; 来创建 Archive：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libtool -static libxxx.a a.o b.o c.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;否则链接的时候会报错：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ld: warning: ignoring file libxxx.a, building for macOS-arm64 but attempting to link with file built for unknown-unsupported file format
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后用 &lt;code&gt;ar t&lt;/code&gt; 命令就可以看 Archive 有哪些内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ar t libxxx.a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以用 &lt;code&gt;nm --print-armap&lt;/code&gt; 命令查看 Archive 的索引：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nm --print-armap libxxx.a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Archive index:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;symbol1 in a.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;symbol2 in b.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;symbol3 in c.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a.o:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; T symbol1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以我们已经了解了 Archive 的情况：它是多个 &lt;code&gt;.o&lt;/code&gt; 文件的集合，并且实现了索引。链接的时候，会通过索引来找 &lt;code&gt;.o&lt;/code&gt;，而不是遍历所有的 &lt;code&gt;.o&lt;/code&gt; 文件。&lt;/p&gt;
&lt;h2 id=&#34;链接问题&#34;&gt;链接问题&lt;/h2&gt;
&lt;p&gt;那么，回到一开始的链接问题，既然我们已经确认了，&lt;code&gt;.o&lt;/code&gt; 文件中定义了符号，并且这个 &lt;code&gt;.o&lt;/code&gt; 也确实在 &lt;code&gt;.a&lt;/code&gt; 文件中，那就只剩下最后一个可能了：索引里面没有这个符号。&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;nm --print-armap&lt;/code&gt; 命令尝试，发现上面的 &lt;code&gt;_default_formats&lt;/code&gt; 和 &lt;code&gt;_current_theme&lt;/code&gt; 只在对应的 &lt;code&gt;.o&lt;/code&gt; 中有定义，在 Archive index 部分是没有的。&lt;/p&gt;
&lt;p&gt;网友 @ailin-nemui 指出了这个问题，并且提供了一个链接：&lt;a href=&#34;https://stackoverflow.com/questions/19398742/os-x-linker-unable-to-find-symbols-from-a-c-file-which-only-contains-variables/26581710#26581710&#34;&gt;OS X linker unable to find symbols from a C file which only contains variables&lt;/a&gt;。它讲了很重要的一点，是 macOS 的 ar/ranlib/libtool 版本默认情况下不会为 COMMON 符号创建索引。所以，解决方案也很明确了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一种 不要创建 COMMON 符号：添加编译选项 &lt;code&gt;-fno-common&lt;/code&gt;，这个选项在比较新的编译器里都是默认了&lt;/li&gt;
&lt;li&gt;第二种 为 COMMON 符号创建索引：用 &lt;code&gt;libtool -static -c&lt;/code&gt; 命令，其中 &lt;code&gt;-c&lt;/code&gt; 选项就是打开为 COMMON 符号创建索引&lt;/li&gt;
&lt;li&gt;第三种 修改代码：给全局变量设置一个初始化值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样，这个问题就得到了妥善的解决。&lt;/p&gt;
&lt;h2 id=&#34;附录&#34;&gt;附录&lt;/h2&gt;
&lt;p&gt;下面是 &lt;a href=&#34;https://www.unix.com/man-page/osx/1/LIBTOOL/&#34;&gt;macOS libtool manpage&lt;/a&gt; 中写的相关文档：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-c     Include common symbols as definitions with respect to the table of contents.  This is seldom the intended behavior for linking  from
	      a library, as it forces the linking of a library member just because it uses an uninitialized global that is undefined at that point
	      in the linking.  This option is included only because this was the original behavior of ranlib.  This option is not the default.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>