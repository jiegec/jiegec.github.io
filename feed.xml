<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杰哥的{运维,编程,调板子}小笔记</title>
    <description>本人的博客
</description>
    <link>https://jiege.ch/</link>
    <atom:link href="https://jiege.ch/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 27 Apr 2019 08:38:45 +0800</pubDate>
    <lastBuildDate>Sat, 27 Apr 2019 08:38:45 +0800</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>每周分享第 21 期</title>
        <description>&lt;p&gt;来了来了&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rust stackful generator 库 https://github.com/Xudong-Huang/generator-rs&lt;/li&gt;
  &lt;li&gt;wireshark tui https://termshark.io/&lt;/li&gt;
  &lt;li&gt;Pythonm 加 annotation 的调试 https://github.com/cool-RR/PySnooper&lt;/li&gt;
  &lt;li&gt;Haskell 又一个教程 https://github.com/alpacaaa/zero-bullshit-haskell&lt;/li&gt;
  &lt;li&gt;直接在 Rust 中写 Python https://docs.rs/inline-python/0.2.0/inline_python/&lt;/li&gt;
  &lt;li&gt;直接把 regex 捕捉到的 group 丢到 struct 里 https://crates.io/crates/recap&lt;/li&gt;
  &lt;li&gt;XDP 层的抓包 https://github.com/cloudflare/xdpcap&lt;/li&gt;
  &lt;li&gt;AWS 开始提供香港的云服务 https://www.allthingsdistributed.com/2019/04/aws-region-asia-pacific-hong-kong.html&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 27 Apr 2019 08:34:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/04/27/weekly-sharing-21/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/04/27/weekly-sharing-21/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>在 FPGA 上实现路由器</title>
        <description>&lt;p&gt;最近在做 FPGA 上硬件的路由器，感觉接近一个基本可用的阶段了吧，大概谈一谈做这个的思路、过程和踩过的坑。&lt;/p&gt;

&lt;p&gt;首先，做实验用的板子是 Alinx AX7021 ，FPGA 是 Xilinx xc7z020clg484-2 ，扩展板上有 4PL+1PS 个网口和千兆 KSZ9031RNX PHY ，采用的接口是 RGMII 。一开始做的自然是做 RGMII ，但是遇到了困难，RGMII在千兆模式下传输的是 DDR 信号，而时序和延迟就是个比较麻烦的事情。一开始先直接拿 Xilinx 的 AXI Ethernet IP 来用，然后上 ILA 看到了 IDDR 后的信号，第一次看到了完整的以太网帧，从 Preamble 和 SFD 到最后的 FCS 。于是就特别振奋，想着手写 RGMII ，先做收，再做发。确实，收很容易，很快就做出来了，但是写总是出问题，当时也不懂跨时钟域的一些问题，总之各种没调出来。于是就退而求其次，选择了 Xilinx 的 Tri Mode Ethernet IP 了。&lt;/p&gt;

&lt;p&gt;Tri Mode Ethernet IP 有很多选项，为了简单，直接采用了 AXI-Stream 的接口，不要 AXI4-Lite 什么的，都不要，因为我需要直接写剩余的逻辑。其他东西能省也都省掉了。这个 IP 确实很给力，很快就可以完成收和发的操作了，这次终于知道了怎么处理跨时钟域的问题 — XPM FIFO ASYNC ，一下推进了很大的进度。&lt;/p&gt;

&lt;p&gt;既然可以收，也可以发了，就扩展到多个网口。这个 IP 中可以选择 Shared Logic 在内部，也可以在外部，研究了一下发现，应该是一个放内部，其余选外部，然后接起来就可以了。不过目前为了简单，还是只用了俩端口。在这个基础上，就开始解析收进来的以太网帧了。&lt;/p&gt;

&lt;p&gt;第一步自然是填 ARP 表，自然问题来了，如果多个网口同时进来数据，怎么保证 ARP 表读写的正确性？自然就想到总线上需要做仲裁，于是写了一个简单的总线仲裁，顺带学习到了 &lt;code class=&quot;highlighter-rouge&quot;&gt;unique case(z)&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;priority case(z)&lt;/code&gt; 的语法。然后 ARP 表怎么实现呢，大概就是一个哈希表，然后表里维护了（IP，MAC，PORT）三元组，然后实现了一些冲突和覆盖的处理逻辑，做这些的同时也对各个模块编写相应的测试。有了 ARP 表，就可以在解析以太网帧的时候，拆解出里面的信息，然后请求 ARP 表总线，然后写入。&lt;/p&gt;

&lt;p&gt;第二步则是相应 ARP 请求，这就需要发出以太网帧。由于 4 个端口都可能向 4 个端口发出以太网帧，这就需要一个 4x4 matrix + 仲裁。不过目前为了简单，就还没有上 FIFO ，直接仲裁进到目的端口的 TX FIFO 中了。这一步并不难，不过在最后 AXI-Stream 的一步遇到了一些困难。由于 Tri Mode Ethernet IP 对 tready 和 tvalid 有特定的要求，所以这里只能用 FWFT FIFO 进行，然后进行了一波神奇的操作，最后搞定了这个事情。成果就是可以从电脑上 &lt;code class=&quot;highlighter-rouge&quot;&gt;arping&lt;/code&gt; 通指定的地址了。&lt;/p&gt;

&lt;p&gt;第三步，也是正在做的一步，就是真正实现 IP 包的转发，这需要三个步骤：解析目的地址，查询路由表，查询 ARP 表。于是需要照着 ARP 表的方案同样做了路由表的仲裁，目前为了简单也还是把路由表设置为静态的。这里就需要做一些特殊的考虑，例如上面三步是串行的，但是我需要同时把 IP 包存一份，最后转发的时候修改一点就发出去了，所以需要等两步都做完，才能继续下一个包的处理。目前做到了第二小步，正在向最后一步查询 ARP 表进发。&lt;/p&gt;

&lt;p&gt;UPDATE：现在最后一步也做好了，但是遇到了小问题，还是不能偷懒，需要写一个 XPM_MEMORY_SPRAM ，直接写一个大的数组太浪费 LUT 了。&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Apr 2019 19:41:00 +0800</pubDate>
        <link>https://jiege.ch/hardware/2019/04/24/router-on-fpga/</link>
        <guid isPermaLink="true">https://jiege.ch/hardware/2019/04/24/router-on-fpga/</guid>
        
        <category>router</category>
        
        <category>fpga</category>
        
        
        <category>hardware</category>
        
      </item>
    
      <item>
        <title>jiegec.xyz 域名即将停用</title>
        <description>&lt;p&gt;最早买域名的时候，买的是 jiegec.xyz ，后来发现了更好的域名，于是这个老域名一直就是一个简单的网页转址。很快，它就要过期了，我也不打算续费了，大家继续用我的新域名吧。&lt;/p&gt;

&lt;p&gt;P.S. 忽然发现我之前配的 acme.sh 没有配自动 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx -s reload&lt;/code&gt; ，所以之前 ssl 证书时间凉了。&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Apr 2019 11:42:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/04/22/jiegec-xyz-down/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/04/22/jiegec-xyz-down/</guid>
        
        <category>jiegecxyz</category>
        
        <category>domain</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>每周分享第 20 期</title>
        <description>&lt;p&gt;写到了第 20 期了！最近几期总是在咕咕。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rust 的科学计算库 https://github.com/rust-ndarray/ndarray https://github.com/jturner314/ndarray-stats&lt;/li&gt;
  &lt;li&gt;Rust Crate 生态可视化 https://rfdonnelly.github.io/crate-galaxy/&lt;/li&gt;
  &lt;li&gt;在地址栏里做动画 http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/#%F0%9F%8C%92&lt;/li&gt;
  &lt;li&gt;Ruby 3 也要加类型了 https://twitter.com/darkdimius/status/1119115657776209920&lt;/li&gt;
  &lt;li&gt;verilog 的 MAC + 简易网络栈 https://github.com/alexforencich/verilog-ethernet&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 20 Apr 2019 22:42:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/04/20/weekly-sharing-20/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/04/20/weekly-sharing-20/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>每周分享第 19 期</title>
        <description>&lt;p&gt;忽然想起来忘了这件事情两天。。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pock 在 Touchbar 中显示并控制 Dock &lt;a href=&quot;https://pock.pigigaldi.com/&quot;&gt;https://pock.pigigaldi.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;MacBook touchbar+keyboard+touchpad Linux 驱动 https://github.com/roadrunner2/macbook12-spi-driver&lt;/li&gt;
  &lt;li&gt;Kendryte K210 上的 GBA 模拟器 https://github.com/44670/mgba-k210&lt;/li&gt;
  &lt;li&gt;Rust 生成 PDF 文件的库 https://github.com/J-F-Liu/lopdf&lt;/li&gt;
  &lt;li&gt;中科大用 Rust 编写 FreeRTOS 的实验 https://github.com/OSH-2019/x-rust-freertos&lt;/li&gt;
  &lt;li&gt;Google 发布 Cloud Code 插件，直接在 k8s 上调试运行 https://cloud.google.com/blog/products/devops-sre/announcing-cloud-code-accelerating-cloud-native-application-development&lt;/li&gt;
  &lt;li&gt;通过 libusb 跨平台的 usbip server https://github.com/jwise/pyusbip&lt;/li&gt;
  &lt;li&gt;Linux 下 BCM43602 Firmware 问题的不完美解决方法 https://bugzilla.kernel.org/show_bug.cgi?id=193121&lt;/li&gt;
  &lt;li&gt;给树莓派上电的新方法 https://youtu.be/X2vF9KAEJx8&lt;/li&gt;
  &lt;li&gt;Docker 里跑 Deepin Wechat 的镜像 https://github.com/bestwu/docker-wechat.git&lt;/li&gt;
  &lt;li&gt;NS Switch 的包管理器 https://switchbrew.org/wiki/Main_Page&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 15 Apr 2019 01:03:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/04/15/weekly-sharing-19/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/04/15/weekly-sharing-19/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>rCore 软路由实现</title>
        <description>&lt;p&gt;最近在研究软路由在 rCore 上的实现，但限于硬件限制，目前先在虚拟机里测试。软路由大概要做这些东西：&lt;/p&gt;

 	1. 抓包，解析包里的内容
 	2. 查路由表，找到下一跳在哪
 	3. 查ARP，知道下一跳的 MAC 地址
 	4. 减少TTL，更新 IP Checksum
 	5. 把包发出去

&lt;p&gt;第一步直接拿 smoltcp 的 Raw Socket 即可，但是目前只能抓指定 IP Protocol 的包，我用的是 ICMP ，但其他的就还抓不了，需要继续改 Smoltcp 源代码。&lt;/p&gt;

&lt;p&gt;第二步用的是之前刚修好的 treebitmap 库，它提供了路由表的查询功能，目前路由表还是写死的，之后会用已经部分实现好的 Netlink 接口读取出来。&lt;/p&gt;

&lt;p&gt;第三步则是 ioctl 发请求，然后从 smoltcp 内部的 ARP cache 里读取。&lt;/p&gt;

&lt;p&gt;第四步很简单，不用多说。&lt;/p&gt;

&lt;p&gt;第五步则需要指定出端口，用了一个 index ，放在一个特定的 sockaddr 中。&lt;/p&gt;

&lt;p&gt;最后的效果就是，能双向转发 ping 通。&lt;/p&gt;

&lt;p&gt;网络拓扑：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/router_topo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以，这很玄学。&lt;/p&gt;

&lt;p&gt;后续在想在真机上实验，但是还缺一个网卡驱动，不然就可以用神奇的办法来做这个实验了。&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Apr 2019 12:13:00 +0800</pubDate>
        <link>https://jiege.ch/software/2019/04/07/rcore-soft-router/</link>
        <guid isPermaLink="true">https://jiege.ch/software/2019/04/07/rcore-soft-router/</guid>
        
        <category>rcore</category>
        
        <category>router</category>
        
        <category>ixgbe</category>
        
        <category>os</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>每周分享第 18 期</title>
        <description>&lt;p&gt;不咕不咕&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Alfred pwgen workflow https://github.com/deanishe/alfred-pwgen&lt;/li&gt;
  &lt;li&gt;魔改主板，在老主板上放 16GB 内存 https://readhacker.news/s/3Zty4&lt;/li&gt;
  &lt;li&gt;Mesalink TLS 库的 Rust 实现 https://github.com/mesalock-linux/mesalink&lt;/li&gt;
  &lt;li&gt;实测可用 Rust 写的 STM32 应用 https://github.com/lupyuen/stm32-blue-pill-rust&lt;/li&gt;
  &lt;li&gt;开源 PCIe 核 https://github.com/enjoy-digital/litepcie&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;欢迎投稿。&lt;/p&gt;

</description>
        <pubDate>Fri, 05 Apr 2019 23:35:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/04/05/weekly-sharing-18/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/04/05/weekly-sharing-18/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>高云 FPGA 踩坑</title>
        <description>&lt;p&gt;最近拿到了高云 FPGA GW2A-18 开发版，想在这上面做一些小工程。不过首先要配置好环境什么的。官方提供了 Linux 和 Windows 的两套工具，自然是拥抱 Linux 咯，但是由于官方适配的是 Redhat 系的操作系统，所以用 Debian 系的时候出现了若干问题，后面会谈到怎么解决的。&lt;/p&gt;

&lt;p&gt;首先是官网下载了它的软件，大概有IDE，综合器，布线器和Programmer四个工具，然后开始跑，发现缺少了 libcrypt.so.1.0.0 。上网搜了一下解决方案，需要重新编译 openssl-1.0.0 ，于是下载并且编译了 openssl-1.0.0t 并且把 .so 的路径调好了，这时候就可以打开 IDE 了。然后发现需要 License ，这个很简单，去官网申请一下，一天邮件就下来了。&lt;/p&gt;

&lt;p&gt;接下来配置 License， IDE 很容易，直接选择邮件里发下来的 node-locked License 即可。不过 Synplify Pro 的 Linux 版本不支持直接单文件 node-locked 的 License ，只允许跑 SCL … 不过高云也提供了 SCL 的下载，和 IDE 的 License Server 放在一起，安装完以后，在得到的 License 里加上两行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SERVER &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hostid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
VENDER snpslmd /path/to/scl/2018.06/linux64/bin/snpslmd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后把 $LM_LICENSE_FILE 指向这个文件路径，就可以了。这一部分感谢 @Jackey-Huo。&lt;/p&gt;

&lt;p&gt;随手写了一个简化版的点亮数字人生（没有数码管），得到了 bistream ，准备往板子里刷，然后问题出现了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ImportError: /path/to/Gowin_YunYuan_V1.9.0Beta_linux/Programmer/bin/librt.so.1: symbol __vdso_clock_gettime version GLIBC_PRIVATE not defined in file libc.so.6 with link time reference
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;目测是 glibc 版本问题 … 这就很难处理了。另外又从官网下载了独立的 Programmer ，仍然不行，检测不到设备。&lt;/p&gt;

&lt;p&gt;最后想了想，找到了终极办法，在 Docker 里运行 CentOS 的 Privileged Container ，再跑 programmer ：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker pull centos
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /home:/home centos /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CentOS 镜像出乎意料地小。进去以后，找到 Programmer 路径，然后 scan ：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ./programmer_cli --scan&lt;/span&gt;
 Scanning!
Current download-cable channel:0
Device Info:
        Family: GW2A
        Name: GW2A-18
        ID: 0xREDACTED
 1 device&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; found!
 Cost 0.54 second&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接着烧到 SRAM 中：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ./programmer_cli -d GW2A-18 --fsFile /path/to/bitstream.fs --run 2&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;SRAM Program&quot;&lt;/span&gt; starting on device-1...
Programming...: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#########################] 100%&lt;/span&gt;
 User Code: 0xREDACTED
 Status Code: 0xREDACTED
 Cost 4.54 second&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;烧录成功，功能测试也没有问题。可以继续进行下一步工作了。&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Apr 2019 09:00:00 +0800</pubDate>
        <link>https://jiege.ch/hardware/2019/04/01/gowin-fpga/</link>
        <guid isPermaLink="true">https://jiege.ch/hardware/2019/04/01/gowin-fpga/</guid>
        
        <category>gowin</category>
        
        <category>fpga</category>
        
        <category>programmer</category>
        
        <category>centos</category>
        
        
        <category>hardware</category>
        
      </item>
    
      <item>
        <title>每周分享第 17 期</title>
        <description>&lt;p&gt;对不起咕咕了两天。。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;关于 rel=”noopener” 的一些细节 https://mathiasbynens.github.io/rel-noopener&lt;/li&gt;
  &lt;li&gt;Microsft Defender 推出 macOS 版 https://arstechnica.com/gadgets/2019/03/microsoft-ships-anti-virus-for-macos-as-windows-defender-becomes-microsoft-defender/&lt;/li&gt;
  &lt;li&gt;基于 Docker 的快速启动在线 Linux box https://github.com/instantbox/instantbox&lt;/li&gt;
  &lt;li&gt;rust 在窗口中显示 fb 的库 https://github.com/emoon/rust_minifb&lt;/li&gt;
  &lt;li&gt;Vue 列表空间，为大量数据设计 https://github.com/tangbc/vue-virtual-scroll-list&lt;/li&gt;
  &lt;li&gt;musl 各平台的交叉编译工具链 https://musl.cc/&lt;/li&gt;
  &lt;li&gt;在线的 markdown 转 pdf https://md2pdf.netlify.com/&lt;/li&gt;
  &lt;li&gt;一本关于 C64 的书 http://10print.org/&lt;/li&gt;
  &lt;li&gt;转自 dram “haskutil tql，自动更新 import，自动 {-# LANGUAGE #-} ，自动填 hole” https://github.com/EduardSergeev/vscode-haskutil&lt;/li&gt;
  &lt;li&gt;ZFS on Linux 加入 TRIM 支持 http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=ZFS-On-Linux-TRIM-Lands&lt;/li&gt;
  &lt;li&gt;又一个体现 JS 玄学之处的网站 https://getify.github.io/coercions-grid/&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 31 Mar 2019 12:32:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/03/31/weekly-sharing-17/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/03/31/weekly-sharing-17/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>静态编译 sqlite3</title>
        <description>&lt;p&gt;最近 rCore 支持了动态链接库，于是想着在测试 sqlite 的时候直接用动态的，不过出现了玄学的问题，它会访问一个不存在的地址，看代码也没看出个所以然来。所以研究了一下 sqlite 的静态编译。首先在 &lt;code class=&quot;highlighter-rouge&quot;&gt;configure&lt;/code&gt; 的时候尝试了一下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./configure &lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;x86_64-linux-musl-gcc &lt;span class=&quot;nt&quot;&gt;--disable-shared&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--enabled-static&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;发现 &lt;code class=&quot;highlighter-rouge&quot;&gt;libsqlite&lt;/code&gt; 确实是静态了，但是 &lt;code class=&quot;highlighter-rouge&quot;&gt;sqlite3&lt;/code&gt; 并不是。一番研究以后，发现是 &lt;code class=&quot;highlighter-rouge&quot;&gt;libtool&lt;/code&gt; 的原因，只要这样编译：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;nv&quot;&gt;LTLINK_EXTRAS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-all-static&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;就可以编译出静态的 &lt;code class=&quot;highlighter-rouge&quot;&gt;sqlite3&lt;/code&gt; ：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sqlite3: ELF 64-bit LSB executable, x86-64, version 1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SYSV&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, statically linked, with debug_info, not stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 24 Mar 2019 19:13:00 +0800</pubDate>
        <link>https://jiege.ch/software/2019/03/24/static-building-sqlite/</link>
        <guid isPermaLink="true">https://jiege.ch/software/2019/03/24/static-building-sqlite/</guid>
        
        <category>rcore</category>
        
        <category>x86</category>
        
        <category>x86_64</category>
        
        <category>static</category>
        
        <category>musl</category>
        
        <category>sqlite</category>
        
        
        <category>software</category>
        
      </item>
    
  </channel>
</rss>
