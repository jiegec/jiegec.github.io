<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jiegec's blog</title>
    <description>This is the personal blog of Jiege Chen.
</description>
    <link>https://jiegec.github.io/</link>
    <atom:link href="https://jiegec.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 30 Nov 2017 18:19:28 +0800</pubDate>
    <lastBuildDate>Thu, 30 Nov 2017 18:19:28 +0800</lastBuildDate>
    <generator>Jekyll v3.5.1</generator>
    
      <item>
        <title>Run Cpp In Jupyter Notebook</title>
        <description>&lt;p&gt;刚刚在HN上看到了这么一个文章：&lt;a href=&quot;https://blog.jupyter.org/interactive-workflows-for-c-with-jupyter-fe9b54227d92&quot;&gt;Interactive Workflows for C++ with Jupyter&lt;/a&gt; &lt;a href=&quot;https://news.ycombinator.com/item?id=15808809&quot;&gt;HN&lt;/a&gt; ，终于可以在Jupyter Notebook里跑C++代码了，很开心，于是开始自己研究了起来怎么本地跑。&lt;/p&gt;

&lt;p&gt;首先当然是更新一波jupyter，安装一波cling：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 install -U jupyter
brew install cling
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后根据&lt;a href=&quot;https://github.com/root-project/cling/tree/master/tools/Jupyter&quot;&gt;官方教程&lt;/a&gt;里的要求执行：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/share/cling/Jupyter/kernel
pip3 install -e .
jupyter kernelspec install cling-cpp11
jupyter kernelspec install cling-cpp14
jupyter kernelspec install cling-cpp17
jupyter kernelspec install cling-cpp1z
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;结果发现找不到&lt;code class=&quot;highlighter-rouge&quot;&gt;jupyter-kernelspec&lt;/code&gt;，遂重装了一下&lt;code class=&quot;highlighter-rouge&quot;&gt;jupyter-client&lt;/code&gt;这个包，果然就可以了。打开一个notebook测试：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jupyter notebook
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后创建一个C++14的Notebook，结果发现一直Kernel rebooting，错误信息是说找不到&lt;code class=&quot;highlighter-rouge&quot;&gt;../Cellar/cling/0.5/lib/libclingJupyter.dylib&lt;/code&gt;。这一看就是路径处理的问题，当前目录肯定不是&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local&lt;/code&gt;，肯定出现了什么问题，然后研究发现&lt;code class=&quot;highlighter-rouge&quot;&gt;cling-kernel.py&lt;/code&gt;中对&lt;code class=&quot;highlighter-rouge&quot;&gt;cling&lt;/code&gt;判断是否是个连接，如果是连接则按照连接去找&lt;code class=&quot;highlighter-rouge&quot;&gt;cling&lt;/code&gt;的安装目录，但是！没有考虑到这个连接是个相对路径的问题（Homebrew你背锅吗）。于是我愉快地改了代码并提交了&lt;a href=&quot;https://github.com/root-project/cling/pull/198&quot;&gt;PR&lt;/a&gt;。修复了以后就可以用了。&lt;/p&gt;

&lt;p&gt;以下是一个小小的例子：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;jupyter console --kernel cling-cpp14
Jupyter console 5.2.0

cling-X


In &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1]: &lt;span class=&quot;c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
Out[1]:

In &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2]: char &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;s &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;;
input_line_4:2:12: warning: ISO C++11 does not allow conversion from string literal to &lt;span class=&quot;s1&quot;&gt;'char *'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-Wwritable-strings]
 char &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;s &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;;
           ^
Out[2]:

In &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3]: &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%s&quot;&lt;/span&gt;,s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
Hello, world!Out[3]:
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 13

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Okay，大功告成！&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Nov 2017 18:07:10 +0800</pubDate>
        <link>https://jiegec.github.io/programming/2017/11/30/run-cpp-in-jupyter-notebook/</link>
        <guid isPermaLink="true">https://jiegec.github.io/programming/2017/11/30/run-cpp-in-jupyter-notebook/</guid>
        
        <category>jupyter</category>
        
        <category>cling</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>用CPUID获取评测机器的CPU</title>
        <description>&lt;p&gt;受&lt;a href=&quot;https://zhuanlan.zhihu.com/p/28322626&quot;&gt;用 CPUID 检测各大 OJ 测评机所用的 CPU（以及日常黑 BZOJ）&lt;/a&gt;的启发，我决定去测试一下徐老师自己写的OJ（名为Tyche）所跑的机器是什么CPU。于是我改造一下代码，用以下代码测评：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;time.h&amp;gt;
#include &amp;lt;cpuid.h&amp;gt;
#include &amp;lt;sys/time.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cpuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__cpuid_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cpuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x80000002&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gettimeofday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gettimeofday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_usec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_usec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EDITME&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;经过测试，&lt;code class=&quot;highlighter-rouge&quot;&gt;usleep()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;clock()&lt;/code&gt;都被封杀，但是&lt;code class=&quot;highlighter-rouge&quot;&gt;gettimeofday()&lt;/code&gt;存活了下来。然后我就不断地&lt;code class=&quot;highlighter-rouge&quot;&gt;C-a&lt;/code&gt;上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;###EDITME###&lt;/code&gt;，根据评测出来的时间推算出字符串，然后得到以下结果：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 ~ 7 : PADDING
8 73 I
9 110 n
10 116 t
11 101 e
12 108 l
13 40 (
14 82 R
15 41 )
16 32 SPC
17 67 C
18 111 o
19 114 r
20 101 e
21 40 (
22 84 T
23 77 M
24 41 )
25 32 SPC
26 105 i
27 51 3
28 45 -
29 50 2
30 49 1
31 50 2
32 48 0
33 32 SPC
34 67 C
35 80 P
36 85 U
37 32 SPC
38 64 @
39 32 SPC
40 51 3
41 46 .
42 51 3
43 48 0
44 71 G
45 72 H
46 122 z
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;连起来就是&lt;a href=&quot;https://ark.intel.com/zh-cn/products/53426/Intel-Core-i3-2120-Processor-3M-Cache-3_30-GHz&quot;&gt;这个CPU&lt;/a&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Intel(R) Core(TM) i3-2120 CPU @ 3.30GHz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;相比之下，还是比BZOJ好哈哈哈（又黑BZOJ）。后来有大神在群里建议，可以用字符串比较的方式，对了就让题目AC，不对就WA。这个方法更加适合手里已经知道了一些常见CPUID的返回字符串，这里就是这样。&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Oct 2017 21:07:23 +0800</pubDate>
        <link>https://jiegec.github.io/oi/2017/10/30/use-cpuid-to-get-machine-cpu/</link>
        <guid isPermaLink="true">https://jiegec.github.io/oi/2017/10/30/use-cpuid-to-get-machine-cpu/</guid>
        
        <category>Tyche</category>
        
        <category>OJ</category>
        
        <category>CPU</category>
        
        <category>CPUID</category>
        
        
        <category>OI</category>
        
      </item>
    
      <item>
        <title>一个代替Pulse Secure客户端的工具</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://sslvpn.tsinghua.edu.cn&quot;&gt;清华的校外VPN服务&lt;/a&gt;使用的是Pulse Secure,所以在外网我们需要在客户端上安装Pulse Secure才能使用内网的info和网络学堂等网站.但是Pulse Secure一是非自由软件二界面难看,所以我找到了一个代替它的工具:&lt;a href=&quot;http://www.infradead.org/openconnect/&quot;&gt;OpenConnect&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;安装后,输入以下命令:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo openconnect --user 你的学号 sslvpn.tsinghua.edu.cn --juniper --reconnect-timeout 60 --servercert sha256:398c6bccf414f7d71b6dc8d59b8e3b16f6d410f305aed7e30ce911c3a4064b31
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后输入你的info密码即可.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Oct 2017 07:50:34 +0800</pubDate>
        <link>https://jiegec.github.io/others/2017/10/26/alternative-to-pulse-secure/</link>
        <guid isPermaLink="true">https://jiegec.github.io/others/2017/10/26/alternative-to-pulse-secure/</guid>
        
        <category>THU</category>
        
        <category>Networking</category>
        
        
        <category>others</category>
        
      </item>
    
      <item>
        <title>分析一个我第一次见的素数测试函数</title>
        <description>&lt;p&gt;今天逛到这个&lt;a href=&quot;http://blog.csdn.net/l04205613/article/details/6025118&quot;&gt;连接&lt;/a&gt;，发现其中的第四种素数判定方法很有意思：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;math.h&amp;gt;
int p[8]={4,2,4,2,4,6,2,6};
int prime(int n)
{
    int i=7,j,q;
    if(n==1)return 0;
    if(n==2||n==5||n==3)return 1;
    if(n%2==0||n%3==0||n%5==0)return 0;
    q=(int)sqrt(n);
    for(;i&amp;lt;=q;){
        for(j=0;j&amp;lt;8;j++){
            if(n%i==0)return 0;
            i+=p[j];
        }
        if(n%i==0)return 0;
    }
    return 1;
}
void main()
{
    int n;
    scanf(&quot;%d&quot;,&amp;amp;n);
    if(prime(n))puts(&quot;Yes&quot;);
    else puts(&quot;No&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;仔细研究发现，这里利用的是这样的原理：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;判断是不是1, 2, 3, 5及其倍数&lt;/li&gt;
  &lt;li&gt;从7开始，不断考虑其是否是素数，那么，这个p是什么回事呢？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;首先把p的各个元素加起来，和为30，然后就可以发现一个规律：
7为质数，7+2=9不是质数，7+4=11为质数，11+2=13为质数，13+2=15为合数，15+2=17为质数，17+2=19为质数，19+2=21为合数，21+2=23为质数，23+2=25为合数，25+2=27为合数，27+2=29为质数，29+1=31为质数，31+2=33为合数，33+2=35为合数，35+2=37为质数。
观察以上所有的合数，都含有2或者3或者5的因子，而30又是2,3,5的公倍数，也就是说，后面的素数模30的余数不可能是上面这些合数，而剩下的素数才可能是真正的素数，于是跳过了很多素数的判断。&lt;/p&gt;

&lt;p&gt;至于这个函数的性能如何，还需要进一步测试来进行判断。&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Oct 2017 21:05:28 +0800</pubDate>
        <link>https://jiegec.github.io/programming/2017/10/17/analysis-on-a-primality-test/</link>
        <guid isPermaLink="true">https://jiegec.github.io/programming/2017/10/17/analysis-on-a-primality-test/</guid>
        
        <category>CS</category>
        
        <category>prime</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>关于scanf和scanf_s的问题</title>
        <description>&lt;p&gt;最近作为程设基础的小教员，收到很多同学的求助，关于&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s&lt;/code&gt;的问题已经遇到了两次，特此写一篇博文来叙述一下这个问题。&lt;/p&gt;

&lt;p&gt;一开始，有同学问我，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char a;
scanf(&quot;%c&quot;,&amp;amp;a);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;为什么会报错？我说，vs默认强制要求使用scanf_s函数，于是我建议这位同学把这个错误信息关掉了。嗯。经过百度，这位同学的问题解决了。&lt;/p&gt;

&lt;p&gt;后来，又有一位同学问我，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char a;
scanf_s(&quot;%c&quot;,&amp;amp;a);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;程序为什么会崩溃？我想了想，如果scanf_s和scanf是一样的行为，这段代码是没问题的。但scanf_s既然安全，必然是在字符串方面做了处理。这里的char*勉强也算一个？网上一查，果然，应该写成&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s(&quot;%c&quot;,&amp;amp;a,1);&lt;/code&gt;，字符串则要写成&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s(&quot;%s&quot;,str,sizeof(str))&lt;/code&gt;，来保证缓冲区不会溢出。&lt;/p&gt;

&lt;p&gt;但是，这样解决这个问题又面临着不同的选择：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;学习&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;的不同，把所有&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;换成&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s&lt;/code&gt;并做相应的修改。
这样当然符合了语言进化的潮流，也会让vs闭嘴。但是，scanf_s只有在C11标准中有，而且，根据&lt;a href=&quot;http://en.cppreference.com/w/c/io/fscanf&quot;&gt;cpprefrence.com上关于scanf的描述&lt;/a&gt;，只有在&lt;code class=&quot;highlighter-rouge&quot;&gt;__STDC_LIB_EXT1__&lt;/code&gt;被定义且在&lt;code class=&quot;highlighter-rouge&quot;&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/code&gt;之前&lt;code class=&quot;highlighter-rouge&quot;&gt;#define __STDC_WANT_LIB_EXT1__&lt;/code&gt;才能确保使用&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s&lt;/code&gt;能使用，当然在vs较新版本中是默认可以使用的。但是，程设基础的作业是要丢到oj上的，而oj上的编译器不一定支持这些，所以这个选项不行。&lt;/li&gt;
  &lt;li&gt;坚持用&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;，自己按照题目要求保证缓冲区不溢出，同时让vs闭嘴。
网上已有&lt;a href=&quot;https://www.cnblogs.com/wangduo/p/5554465.html&quot;&gt;教程&lt;/a&gt;，已经讲的很全面了，大家可以根据这个教程把vs教训一顿。为了能在oj里跑，建议用里面的方法五到八。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以后再遇到这个问题，我就丢这个连接上来就好了咯。yeah！&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Oct 2017 16:46:40 +0800</pubDate>
        <link>https://jiegec.github.io/programming/2017/10/17/on-scanf-and-scanf_s/</link>
        <guid isPermaLink="true">https://jiegec.github.io/programming/2017/10/17/on-scanf-and-scanf_s/</guid>
        
        <category>VS</category>
        
        <category>C</category>
        
        <category>CS</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>一个搞笑的伸展树的Wiki</title>
        <description>&lt;p&gt;光哲同学在群里发了这个链接，特别搞笑，特此分享：
&lt;a href=&quot;https://baike.baidu.com/history/%E4%BC%B8%E5%B1%95%E6%A0%91/105576656&quot;&gt;伸展树 - 百度百科&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;伸展树（Spaly Tree，事实上在国内 IO 界常常被称作 Tajarn 发明的 Spaly Tree，与此同理的还有 Terap），也叫分裂树，是一种二叉排序树，它能在 O(n log n) 内完成插入、查找和删除操作。它由 Daniel Sleator 和 Robert Tajarn 发现，后者对其进行了改造。它的优势可以不断伸展枝干（一个月 2~3 次），从而使树冠散开，提高光合作用效率。木材坚硬，是重要的经济类乔木。与其他植物不同的是，伸展树可以进行出芽生殖，繁殖速度极快。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 16 Oct 2017 19:59:30 +0800</pubDate>
        <link>https://jiegec.github.io/others/2017/10/16/a-funny-wiki-of-splay-tree/</link>
        <guid isPermaLink="true">https://jiegec.github.io/others/2017/10/16/a-funny-wiki-of-splay-tree/</guid>
        
        <category>algorithm</category>
        
        <category>wiki</category>
        
        
        <category>others</category>
        
      </item>
    
      <item>
        <title>回顾昨天的酒井知识竞赛</title>
        <description>&lt;p&gt;昨天晚上，我作为蒟蒻组的一员在三教2102参加了酒井知识竞赛，并因此鸽掉了TUNA和Lab mU的迎新会hhh，不过运气好拿到了二等奖的好成绩，获得Paperang便携打印机一台。中间遇到了好一些网络方面的知识，这对于没有记忆OSI模型的我无疑有巨大的难度。下面是几道比较有印象的题目：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;以下哪个不是编程语言？
A. J B. L C. R D. K
这题不难，R肯定对，J见过，K略微有印象，选B&lt;/li&gt;
  &lt;li&gt;IPv6链路层地址解析的协议是？
A. ARP B. Neighbour Solicitation C. Neighbour Advertisement D. Neighbour Discovery
对于一个没研究过IPv6的人来说这只好蒙了。。。ARP是IPv4时代的，ND(Neighbour Discovery则是IPv6时代的新产物，把ARP和ICMP等协议的功能都包含了进来，并且有新的功能。之前样题里还出现过问IPv6中去掉了Unicast,Anycast,Multicast,Broadcast中的哪种，答案是Broadcast。&lt;/li&gt;
  &lt;li&gt;第一个把程序错误称做bug的是？
 选项太多忘了，答案是Grace Hopper，因为当时一只飞蛾意外飞入了机器导致了故障，后来慢慢就流传下来了。&lt;/li&gt;
  &lt;li&gt;以下不是网络操作系统的是？
 A. Windows NT B. OS/2 warp C. DOS D. Netware
 当时我没见过D，于是就选了。。。然后就挂了，Netware是Novell开发的系统，OS/2 warp当然是历史悠久的系统啦，而DOS=Disk Operating System所以没有“网络”二字。。。晕倒&lt;/li&gt;
  &lt;li&gt;以下是用作局域网的协议是？
 A. TCP/IP B. IPX/SPX C. NetBEUI D. RS-232-C
 TCP/IP当然不仅限于局域网，RS-232-C是接口，当时蒙了B结果就对了，白白拿了50分哈哈哈。IPX/SPX是Novell设计用在Netware系统上的局域网协议，NetBEUI则是NetBIOS的一个历史遗留的一个“别称”。&lt;/li&gt;
  &lt;li&gt;姚期智的夫人给谁取了中文名？
 当然是Donald Ervin Knuth啦！高德纳万岁！&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 16 Oct 2017 10:36:28 +0800</pubDate>
        <link>https://jiegec.github.io/others/2017/10/16/review-on-yesterdays-jiujing-adi-contest/</link>
        <guid isPermaLink="true">https://jiegec.github.io/others/2017/10/16/review-on-yesterdays-jiujing-adi-contest/</guid>
        
        <category>ADI</category>
        
        <category>Tsinghua</category>
        
        <category>CS</category>
        
        
        <category>others</category>
        
      </item>
    
      <item>
        <title>华为随行 WiFi 2 mini开箱</title>
        <description>&lt;p&gt;前段时间，我办了4G升级，移动送了一张副卡，有不少免费的流量，由于我的手机是iPhone不支持双卡，老爸就借了我他的GlocalMe当成MiFi来用，不过呢GlocalMe放在这里当然是大材小用了，所以我就网购了华为随行WiFi 2 mini，把我的副卡装上一个壳放进去就可以了！把这个MiFi插入电脑，会弹出一个目录，里面有Win/Mac的驱动安装文件，打开后在网络设置里就有HUAWEI_MOBILE的连接了，并自动打开网络配置界面。设置一下SSID和密码，就能正常使用了，手机连上也很正常，手机上可以下载HUAWEI HiLink来配置MiFi，挺爽的。随赠的有联通的上网卡，不过我准备在北京买个上网卡放MiFi里面用。&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Aug 2017 20:38:00 +0800</pubDate>
        <link>https://jiegec.github.io/unboxing/2017/08/08/huawei-portable-wifi/</link>
        <guid isPermaLink="true">https://jiegec.github.io/unboxing/2017/08/08/huawei-portable-wifi/</guid>
        
        <category>huawei</category>
        
        <category>wifi</category>
        
        
        <category>unboxing</category>
        
      </item>
    
      <item>
        <title>Farewell, Flash</title>
        <description>&lt;p&gt;It’s time to say goodbye to Flash.
&lt;a href=&quot;https://news.ycombinator.com/item?id=14848786&quot;&gt;HN #1&lt;/a&gt;
&lt;a href=&quot;https://news.ycombinator.com/item?id=14854618&quot;&gt;HN #2&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Jul 2017 22:02:20 +0800</pubDate>
        <link>https://jiegec.github.io/news/2017/07/26/farewell-flash/</link>
        <guid isPermaLink="true">https://jiegec.github.io/news/2017/07/26/farewell-flash/</guid>
        
        <category>flash</category>
        
        <category>adobe</category>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>In macOS Sierra, Karabiner-Elements finally support complex modifications</title>
        <description>&lt;p&gt;In favor of this &lt;a href=&quot;https://github.com/tekezo/Karabiner-Elements/commit/f37815dcf58fd1e91d3cd3d154c2ed3749a2510e&quot;&gt;commit&lt;/a&gt;, Karabiner-Elements now supports the much welcomed yet long-lost feature, namely complex modifications that enable users to trigger complex keypress.&lt;/p&gt;

&lt;p&gt;Now I can achieve this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;If I press &amp;lt;Enter&amp;gt;, then:
1. If &amp;lt;Enter&amp;gt; is pressed alone, then send &amp;lt;Enter&amp;gt;.
2. If &amp;lt;Enter&amp;gt; is pressed along with other keys, then send &amp;lt;Control&amp;gt; + Other.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By adding this code to ~/.config/karabiner/karabiner.json :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;complex_modifications&quot;: {
    &quot;rules&quot;: [
        {
            &quot;manipulators&quot;: [
                {
                    &quot;description&quot;: &quot;Change return_or_enter to left_control. (Post return_or_enter if pressed alone)&quot;,
                    &quot;from&quot;: {
                        &quot;key_code&quot;: &quot;return_or_enter&quot;,
                        &quot;modifiers&quot;: {
                            &quot;optional&quot;: [
                                &quot;any&quot;
                            ]
                        }
                    },
                    &quot;to&quot;: [
                        {
                            &quot;key_code&quot;: &quot;left_control&quot;
                        }
                    ],
                    &quot;to_if_alone&quot;: [
                        {
                            &quot;key_code&quot;: &quot;return_or_enter&quot;
                        }
                    ],
                    &quot;type&quot;: &quot;basic&quot;
                }
            ]
        }
    ]
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;in one of profiles.&lt;/p&gt;

&lt;p&gt;Note: the snippet above is adopted from &lt;a href=&quot;https://github.com/tekezo/Karabiner-Elements/blob/61df6ff04ce34adf1cbb00cfd7c5dd49c14c0889/examples/spacebar_to_shift.json&quot;&gt;this example&lt;/a&gt;. You can explore more examples since the GUI is not updated accordingly yet.&lt;/p&gt;

&lt;p&gt;Important: Until NOW (2017-06-15), this feature is only implemented in beta versions of Karabiner-Elements (at least 0.91.1).&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Jun 2017 17:22:20 +0800</pubDate>
        <link>https://jiegec.github.io/system/2017/06/15/macos-sierra-karabiner-finally-support-complex-modifications/</link>
        <guid isPermaLink="true">https://jiegec.github.io/system/2017/06/15/macos-sierra-karabiner-finally-support-complex-modifications/</guid>
        
        <category>macOS Sierra</category>
        
        <category>karabiner-elements</category>
        
        <category>keyboard</category>
        
        
        <category>system</category>
        
      </item>
    
  </channel>
</rss>
