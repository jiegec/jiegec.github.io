<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杰哥的{运维,编程}小笔记</title>
    <description>This is the personal blog of Jiajie Chen, a NANO(uNix hAcker aNd lOver).
</description>
    <link>https://jiegec.me/</link>
    <atom:link href="https://jiegec.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 26 Nov 2018 21:28:13 +0800</pubDate>
    <lastBuildDate>Mon, 26 Nov 2018 21:28:13 +0800</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>Mac 上安装 Arch Linux ， ZFS 真香</title>
        <description>&lt;p&gt;最近在 Mac 上装了 Arch Linux ，按照 &lt;a href=&quot;https://wiki.archlinux.org/index.php/Mac&quot;&gt;Mac - Arch Linux Wiki&lt;/a&gt; 一路一路走，创建单独的一个 EFI 分区给 Arch Linux 放 GRUB 和内核，一个 ext4 作为根分区。由于 Arch ISO 不支持 Broadcom 的无线网卡，于是先拿 Apple Ethernet Adapter 连到路由器上装机。然后把一些需要的驱动装上了，桌面用的 KDE Plasma ，Trackpad 用的 xf86-input-mtrack-git ， HiDPI 设置为 2x Scale ，各种体验都还可以，就是 Wi-Fi 的 802.1X 没配置好，然后 kwalletd5 老是崩没找到原因。常见的应用除了微信基本都有，也终于可以体验 Steam Play ，利用 Proton 在 Linux 上跑一些只支持 Windows 的游戏，不过我已经很少玩游戏了。&lt;/p&gt;

&lt;p&gt;然后我就想，怎么做 macOS 和 Linux 之间的文件共享。典型的操作可能是 exFAT ，但是作为数据盘的话，这还是不大适合。或者就直接用 ext4 ，配合 extFS For Mac by Paragon 使用，也可以，最后我选择了 ZFS 。&lt;/p&gt;

&lt;p&gt;在 macOS 上安装 &lt;a href=&quot;https://openzfsonosx.org/&quot;&gt;OpenZFS on OSX&lt;/a&gt; ，在 Linux 上安装 &lt;a href=&quot;https://zfsonlinux.org/&quot;&gt;ZFS on Linux&lt;/a&gt; 。具体命令就是：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew cask install openzfs &lt;span class=&quot;c&quot;&gt;# macOS&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yay zfs-dkms-git &lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于硬盘空间所限，我只用了一个分区作为 vdev ，没有采用 mirror 、 raidz 等方案。我首先在 macOS 上创建了一个 zpool ，参考 &lt;a href=&quot;https://openzfsonosx.org/wiki/Zpool#Creating_a_pool&quot;&gt;Creating a pool - OpenZFS on OSX&lt;/a&gt; ：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;zpool create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ashift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;13 Data diskxsy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时应该能够看到 /Volumes/Data 上已经挂载了一个 ZFS Dataset 。我采用 &lt;a href=&quot;https://github.com/cbreak-black/ZetaWatch&quot;&gt;cbreak-black/ZetaWatch&lt;/a&gt; 在菜单栏里查看 ZFS 信息。此时回到 Arch Linux 上，通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;zfs import&lt;/code&gt; 可以找到并且挂载这个 ZFS Dataset 到 &lt;code class=&quot;highlighter-rouge&quot;&gt;/Data&lt;/code&gt; 处。&lt;/p&gt;

&lt;p&gt;我还尝试创建了一个加密的 ZFS Dataset ，对加密的部分的粒度控制可以很细。另外，我参考 &lt;a href=&quot;https://openzfsonosx.org/wiki/Time_Machine_Backups&quot;&gt;Time Machine Backups - OpenZFS on OSX&lt;/a&gt; 也在移动硬盘上划出一个新的分区作为 ZFS ，在上面创建了一个加密的 Sparse Bundle ，把它作为 Time Machine 的目标。之后还会尝试一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;zfs send&lt;/code&gt; 作为替代的备份方案。&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Nov 2018 20:51:00 +0800</pubDate>
        <link>https://jiegec.me/software/2018/11/26/zfs-on-macos-and-linux/</link>
        <guid isPermaLink="true">https://jiegec.me/software/2018/11/26/zfs-on-macos-and-linux/</guid>
        
        <category>linux</category>
        
        <category>zfs</category>
        
        <category>macos</category>
        
        <category>timemachine</category>
        
        <category>backup</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>USB/IP 实践</title>
        <description>&lt;p&gt;之前一直想玩 USB/IP ，但是一直没有找俩 Linux 设备然后共享，今天终于尝试了一下，没有什么大问题。这次采用的设备是 Raspberri Pi 3 和 SaltedFish Pi 。一开始尝试从后者向前者共享，但总是出现这个错误：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libusbip: error: udev_device_get_sysattr_value failed
usbip: error: open vhci_driver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我反过来做就好了，比较神奇。&lt;/p&gt;

&lt;p&gt;主要过程如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pacman -S usbip&lt;/code&gt; 安装用户态软件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl enable --now usbipd&lt;/code&gt; 启动 USB/IP 的端口监听 daemon&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;usbip list -l&lt;/code&gt; 查看本地有哪些 USB 设备可以共享&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;usbip bind -b [BUS_ID]&lt;/code&gt; 把指定的 USB 设备共享出去，其中 BUS_ID 从上个命令中查看&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;usbip list -r [IP]&lt;/code&gt; 在另一个设备上查看这个设备共享的 USB 设备，可以看到许多信息&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;usbip attach -r [IP] -b [BUS_ID]&lt;/code&gt; 把对方共享的 USB 设备 attach 到本地&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;效果：把一个 U 盘成功映射到了本地：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ lsusb -t
/:  Bus 04.Port 1: Dev 1, Class=root_hub, Driver=vhci_hcd/8p, 480M
    |__ Port 1: Dev 2, If 0, Class=Mass Storage, Driver=usb-storage, 480M
$ lsblk
NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda           8:0    1 14.9G  0 disk
`-sda1        8:1    1 14.9G  0 part /tmp/mnt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;尝试 mount 什么的，也都没有问题。以后可以考虑把本地的 LicheeTang 通过这种方式穿透到远端，然后在远端用它的 IDE 进行编程。&lt;/p&gt;

&lt;p&gt;UPDATE: LicheeTang 烧写有一些问题，直接 JTAG 写上去没有作用，但是 SPI Flash 是可以成功写入并且有作用的，虽然需要强制打断。感觉还是网络延迟导致了一些问题。&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Nov 2018 18:50:00 +0800</pubDate>
        <link>https://jiegec.me/software/2018/11/20/usb-ip/</link>
        <guid isPermaLink="true">https://jiegec.me/software/2018/11/20/usb-ip/</guid>
        
        <category>linux</category>
        
        <category>usbip</category>
        
        <category>raspi</category>
        
        <category>sfpi</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>超过 100 篇博文了！</title>
        <description>&lt;p&gt;今天看了下，发现算上这一篇，这个博客已经有 103 篇文章了，这个数量还是蛮多的，特此庆祝一下。我也顺带做了一下简单的数据处理，得到这么一张图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-11-17 07.52.06.jpg&quot; alt=&quot;graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;目测数量与干活的频率相关性很高啊。&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Nov 2018 07:35:00 +0800</pubDate>
        <link>https://jiegec.me/meta/2018/11/17/more-than-100-posts/</link>
        <guid isPermaLink="true">https://jiegec.me/meta/2018/11/17/more-than-100-posts/</guid>
        
        <category>blog</category>
        
        
        <category>meta</category>
        
      </item>
    
      <item>
        <title>向咸鱼派写入 ArchlinuxARM</title>
        <description>&lt;p&gt;之前由于我的 macOS 上不知道为啥不能把我的 TF 卡设备放到我的虚拟机里，所以之前就没能刷 ArchLinuxARM 上去。今天我想到了一个方法，完成了这件时期：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget https://mirrors.tuna.tsinghua.edu.cn/archlinuxarm/os/ArchLinuxARM-armv7-latest.tar.gz
$ dd if=/dev/zero of=archlinuxarm.img bs=1M count=1024
$ mkfs.ext4 archlinuxarm.img
$ sudo mkdir -p /mnt/archlinuxarm
$ sudo mount -o loop archlinuxarm.img /mnt/archlinuxarm
$ sudo bsdtar -xpf ArchLinuxARM-armv7-latest.tar.gz -C /mnt/archlinuxarm
$ sudo umount /mnt/archlinuxarm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就获得了一个 ext4 的 ArchlinuxARM 镜像。刚好解压出来不到 1G ，所以开了 1G 的镜像刚好放得下。然后把 archlinuxarm.img 拷回 macOS ，然后用 dd 写进去：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dd if=archlinuxarm.img of=/dev/rdisk4s2 bs=1048576
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时候可以确认，我们确实是得到了一个正确的 ext4fs ：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo /usr/local/opt/e2fsprogs/sbin/tune2fs -l /dev/disk4s2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不过，我们实际的分区大小可能不止 1G ，所以可以修改一下大小：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo /usr/local/opt/e2fsprogs/sbin/resize2fs -p /dev/disk4s2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就成功地把 ArchlinuxARM 写进去了。默认的用户名和密码都是 root ，可以成功通过串口登录。&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Nov 2018 19:18:00 +0800</pubDate>
        <link>https://jiegec.me/hardware/2018/11/06/archlinuxarm-on-sfpi/</link>
        <guid isPermaLink="true">https://jiegec.me/hardware/2018/11/06/archlinuxarm-on-sfpi/</guid>
        
        <category>sfpi</category>
        
        <category>saltedfishpi</category>
        
        <category>dd</category>
        
        <category>extfs</category>
        
        <category>ext4</category>
        
        
        <category>hardware</category>
        
      </item>
    
      <item>
        <title>咸鱼派的启动配置</title>
        <description>&lt;p&gt;最近刚拿到了一个&lt;a href=&quot;https://github.com/sbc-fish/sfpi&quot;&gt;咸鱼派&lt;/a&gt;的测试板子，准备自己把 U-Boot 和 Linux 内核这一套东西跑通，都用主线的东西，尽量减少魔改的部分。首先是编译 u-boot ，我用的是现在的 master 分支的最新版 99431c1c ：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ # Archlinux
$ sudo pacman -Sy arm-none-eabi-gcc
$ make LicheePi_Zero_defconfig
$ make ARCH=arm CROSS_COMPILE=arm-none-eabi- -j24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时候会得到一个 u-boot-sunxi-with-spl.bin 的文件。我们只要把它写到 SD 卡的 8192 偏移处，就可以把 U-Boot 跑起来了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ diskutil unmountDisk /dev/disk4
$ sudo dd if=u-boot-sunxi-with-spl.bin of=/dev/disk4 bs=1024 seek=8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接着我们做一下分区。我采用的是 MBR 分区，这样保证不会和 U-Boot 冲突。使用 fdisk进行分区，我从 1M 处开始分了一个 10M 的 FAT-32 分区作为启动分区，然后之后都是 EXT4 的系统盘分区。接着就是编译内核。&lt;/p&gt;

&lt;p&gt;我用的是八月份时候的 4.18.2 内核，虽然不是很新但也足够新了。一番调整内核参数后，得到了一个可用的内核，然后把 zImage 和 sun8i-v3s-licheepi-zero.dtb 都复制到刚才创建的 FAT-32 启动分区，然后进入 U-Boot 进行启动：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ setenv bootcmd 'fatload mmc 0 0x41000000 zImage; fatload mmc 0 0x41800000 sun8i-v3s-licheepi-zero.dtb; setenv bootargs console=ttyS0,115200 root=/dev/mmcblk0p2 rw rootwait; bootz 0x41000000 - 0x41800000'
$ saveenv # optional
$ boot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里一开始遇到了很多坑，比如一直看不到 console ，这个是找了 @Gaoyichuan 拿到的一份 Kernel Config 进行修改修好的。另一个是进去以后找不到 root ，我先是搞了一个有 busybox 的 initrd ，进去看发现是能找到 mmc 的，但是有延迟，那么添加上 rootwait 就好了。进去以后就差 rootfs 。由于我缺少一个写 ext4 的工具，又发现手上有一个 Raspbian 的镜像，它里面也正好是两个分区，而且架构也同样是 armv7l ，我就直接把它烧到 SD 卡中，把 U-Boot 写进去，然后往 boot 分区里写内核和 dtb ，然后就成功进去，并且跑起来了。最喜感的就是，进去以后是个 pi@raspberrypi ，实际上确是另一个东西。不过，只有当我 &lt;code class=&quot;highlighter-rouge&quot;&gt;apt update&lt;/code&gt; 发现用了半小时的时候，我才想起来这其实是是一个嵌入式系统。。&lt;/p&gt;

&lt;p&gt;进去以后发现，没有识别到网卡驱动。网上找了 LicheePi Zero 的一个解决方案，但是并不能用，还出现了神奇的 Kernel Oops ，怀疑是内核版本太新的问题。我又找到 @Icenowy 的一个 &lt;a href=&quot;https://lore.kernel.org/patchwork/patch/884656/&quot;&gt;Patch&lt;/a&gt; ，它终于是解决了这个问题，成功地找到了网卡，并且愉快地 &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh pi@raspberrypi.local&lt;/code&gt; 。之后会在咸鱼派那边公布一下我们做的修改。&lt;/p&gt;

&lt;p&gt;现在的想法是，把 HomeBridge 搭建到它上面，不过目前来看硬件资源有点紧张，放着会有点慢。可能还是用树莓派做这个事情比较合适。&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Nov 2018 22:17:00 +0800</pubDate>
        <link>https://jiegec.me/hardware/2018/11/05/salted-fish-pi/</link>
        <guid isPermaLink="true">https://jiegec.me/hardware/2018/11/05/salted-fish-pi/</guid>
        
        <category>sfpi</category>
        
        <category>saltedfishpi</category>
        
        <category>uboot</category>
        
        <category>linux</category>
        
        <category>kernel</category>
        
        <category>dts</category>
        
        <category>devicetree</category>
        
        
        <category>hardware</category>
        
      </item>
    
      <item>
        <title>使用 HomeBridge 把小米空气净化器加入到 HomeKit 中</title>
        <description>&lt;p&gt;受 @NSBlink 安利，自己部署了一下 &lt;a href=&quot;https://github.com/nfarina/homebridge&quot;&gt;HomeBridge&lt;/a&gt; ，然后在 iOS 的家庭上就可以看到它。然后，通过 &lt;a href=&quot;https://www.npmjs.com/package/homebridge-mi-airpurifier&quot;&gt;homebrdige-mi-airpurifier&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/aholstenson/miio&quot;&gt;miio&lt;/a&gt; 按照教程进行配置。然后就可以在家庭里看到小米空气净化器，包括空气质量，湿度，睡眠模式，温度，打开状态。然后我就可以做一些配置，如离开宿舍的时候自动关闭空气净化器，回来的时候自动打开。不过由于自己没有一个一直放在宿舍的 iPad、Apple TV 或者 HomePod ，失去了中枢，这个功能可能会打折扣。&lt;/p&gt;

&lt;p&gt;后续想买一些智能的灯啊，然后就可以用 Siri 进行打开 / 关闭了。&lt;/p&gt;

&lt;p&gt;此外，我又试了下，可以用 &lt;a href=&quot;https://github.com/KhaosT/homebridge-camera-ffmpeg&quot;&gt;homebridge-camera-ffmpeg&lt;/a&gt; 把摄像头配置到 HomeKit 中。这样，就可以远程查看视频流了。&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Nov 2018 10:47:00 +0800</pubDate>
        <link>https://jiegec.me/software/2018/11/04/mi-air-purifier-homekit/</link>
        <guid isPermaLink="true">https://jiegec.me/software/2018/11/04/mi-air-purifier-homekit/</guid>
        
        <category>homebridge</category>
        
        <category>xiaomi</category>
        
        <category>airpurifier</category>
        
        <category>homekit</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>部署 adminMongo 的 Docker 镜像</title>
        <description>&lt;p&gt;之前在软工的平台上部署了一个 MongoDB ，但是自然是仅内网访问，想要浏览内容只能通过网页上的 Console 进去看，体验特别不好。所以想着能不能找一个在线的 MongoDB 浏览器。由于软工平台只能部署 Docker 镜像，所以我找到了&lt;a href=&quot;https://hub.docker.com/_/mongo-express/&quot;&gt;mongo-express&lt;/a&gt;和&lt;a href=&quot;https://hub.docker.com/r/adicom/admin-mongo/&quot;&gt;adicom/admin-mongo&lt;/a&gt;。但软工平台现在还没实现环境变量的配置，所以我选了后者。&lt;/p&gt;

&lt;p&gt;首先本地创建一个 app.json ，让它监听 0.0.0.0:80 ，通过 deployer 传到平台上的配置，然后再把配置 mount 到 /app/config 路径上。现在就可以成功地在网页上浏览 MongoDB 了。&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Oct 2018 20:08:00 +0800</pubDate>
        <link>https://jiegec.me/software/2018/10/23/admin-mongo-docker/</link>
        <guid isPermaLink="true">https://jiegec.me/software/2018/10/23/admin-mongo-docker/</guid>
        
        <category>docker</category>
        
        <category>secoder</category>
        
        <category>mongodb</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>OpenWRT 上配置 Gandi DDNS</title>
        <description>&lt;p&gt;一直想给自己的 OpenWRT 路由器添加 DDNS 功能，但 Gandi 不在官方的 ddns-scripts 列表中，自己在网上找了一些脚本，发现是 Python 写的，尝试把 Python 安装到路由器上又发现空间不够，虽然可以安装到 USB 上，但总归是麻烦。&lt;/p&gt;

&lt;p&gt;最后找到了官方的一个&lt;a href=&quot;https://github.com/Gandi/api-examples/blob/master/bash/livedns/mywanip.sh&quot;&gt;脚本&lt;/a&gt;，非常适合我的需求。简单修改一下，然后安装一下支持 HTTPS 的 cURL ：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ opkg update
$ opkg install ca-bundle
$ opkg install curl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后把脚本添加到 crontab 即可。&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Oct 2018 09:53:00 +0800</pubDate>
        <link>https://jiegec.me/networking/2018/10/22/ddns-openwrt-router/</link>
        <guid isPermaLink="true">https://jiegec.me/networking/2018/10/22/ddns-openwrt-router/</guid>
        
        <category>ddns</category>
        
        <category>gandi</category>
        
        <category>openwrt</category>
        
        <category>cron</category>
        
        
        <category>networking</category>
        
      </item>
    
      <item>
        <title>ETC 比赛无线网络搭建小记</title>
        <description>&lt;p&gt;正好上着李贺武老师的《无线移动网络技术》课，然后今天又给 ETC 比赛搭建无线网络，于是周二的时候找老师咨询了一下意见。我们大概给老师讲了一下场地的样子和尺寸（当时估计的大了），然后老师给我们提供了一个可以供参考的部署方案，包括几个 AP 分别放在哪，这些 AP 的 2.4GHz 都用哪个 channel ，然后都用多少功率。并且很友善地在周五的时候让助教来场地帮我们 survey 一下无线网络的状况。我们用 Fluke Networks 的 AirCheck Wi-Fi Tester 看了一下场地的各个频道的 AP 数量和信号强度，发现虽然 AP 挺多的，但是它们的信号都比我们的小不少，而且我们也都开到了 50mW ，所以干扰不大。&lt;/p&gt;

&lt;p&gt;然后昨天下午一点半钟来到场地，用板车把设备都运到计算机开放实验室，然后开始部署无线网络。我们提前来踩过几次点，这边的网络是没有 DHCP 服务器的，通过一个指定的网关出去。我们发现可以利用已有的这些交换机从地下连到各个电脑上的网线，来连接我们的 AP 和交换机，这样我们就免去了走线的麻烦。于是我们先定下放 AP 的位置，然后用寻线器找到网线插到了交换机的哪一个端口上，标记好后换成连接到我们自己的交换机的网线上，从而可以通过 PoE 把我们的 AP 给启动起来。然后用我自己的路由器，把 LAN 口插到交换机上，给 AP 分发 DHCP 地址，然后把下发的默认网关配置为真实的网关（DHCP Option 3） ，没做但是也可以顺带做的是把 WLC 的地址分发下去 （DHCP Option 43 Type 241）。&lt;/p&gt;

&lt;p&gt;当然，这个过程也遇到了一点小坑，就是交换机还保留了之前的配置，所以这次把新的几个端口划到了一个 VLAN 下，命令自然是记不住的要现查。然后起来以后还挺稳定的，也没出现什么问题，网络带宽也足够用，离千兆还有蛮多距离，一天也才跑了接近俩 TB 的流量。&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Oct 2018 23:44:00 +0800</pubDate>
        <link>https://jiegec.me/networking/2018/10/20/etc-wireless-network/</link>
        <guid isPermaLink="true">https://jiegec.me/networking/2018/10/20/etc-wireless-network/</guid>
        
        <category>etc</category>
        
        <category>janestreet</category>
        
        <category>cisco</category>
        
        <category>wifi</category>
        
        <category>flukenetworks</category>
        
        
        <category>networking</category>
        
      </item>
    
      <item>
        <title>Unicode En Dash 小坑</title>
        <description>&lt;p&gt;今天有同学问到我这个问题：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gcc -o ph ph.c –lpthread
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为啥不工作。我怎么看都觉得没啥问题，一开始以为是找不到 pthread ，但马上又排除了。想了下会不会是有隐藏的字符，于是让同学 &lt;code class=&quot;highlighter-rouge&quot;&gt;pbpaste | xxd&lt;/code&gt; 一下，果然发现这里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;–&lt;/code&gt; 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;\xe2\x80\x93&lt;/code&gt; ，查了下是 Unicode 里的 En Dash 。由于这是从 PDF 里直接拷贝出来的，所以凉了。改成正常的短横杠即可。&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Oct 2018 22:51:00 +0800</pubDate>
        <link>https://jiegec.me/misc/2018/10/13/unicode-en-dash-mistake/</link>
        <guid isPermaLink="true">https://jiegec.me/misc/2018/10/13/unicode-en-dash-mistake/</guid>
        
        <category>unicode</category>
        
        <category>pdf</category>
        
        
        <category>misc</category>
        
      </item>
    
  </channel>
</rss>
