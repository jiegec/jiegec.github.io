<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杰哥的{运维,编程}小笔记</title>
    <description>This is the personal blog of Jiajie Chen, a NANO(uNix hAcker aNd lOver).
</description>
    <link>https://jiegec.me/</link>
    <atom:link href="https://jiegec.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 10 Jun 2018 16:24:53 +0800</pubDate>
    <lastBuildDate>Sun, 10 Jun 2018 16:24:53 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>调整 Nginx 和 PHP 的上传文件大小限制</title>
        <description>&lt;p&gt;之前迁移的 MediaWiki ，有人提出说无法上传一个 1.4M 的文件。我去看了一下网站，上面写的是限制在 2M ，但是一上传就说 Entity Too Large，无法上传。后来经过研究，是 Nginx 对 POST 的大小进行了限制，同时 PHP 也有限制。&lt;/p&gt;

&lt;p&gt;Nginx 的话，可以在 nginx.conf 的 http 中添加，也可以在 server 或者 location 中加入这么一行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;client_max_body_size 100m;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我的建议是，尽量缩小范围到需要的地方，即 location &amp;gt; server &amp;gt; http 。&lt;/p&gt;

&lt;p&gt;在 PHP 中，则修改 /etc/php/7.0/fpm/php.ini ：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;post_max_size = 100M
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;回到 MediaWiki 的上传页面，可以看到显示的大小限制自动变成了 100M ，这个是从 PHP 的配置中直接获得的。&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Jun 2018 16:04:00 +0800</pubDate>
        <link>https://jiegec.me/programming/2018/06/10/nginx-php-upload-size-limit/</link>
        <guid isPermaLink="true">https://jiegec.me/programming/2018/06/10/nginx-php-upload-size-limit/</guid>
        
        <category>nginx</category>
        
        <category>php</category>
        
        <category>mediawiki</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>最近写 Node.js 遇到的若干坑</title>
        <description>&lt;p&gt;最近在做前后端分离，前端在用 Vue.js 逐步重写，后端则变为 api 的形式。同时，我尝试了用 autocannon 和 clinic 工具测试自己的 api endpoint 的性能，一开始发现有几个延迟会特别高，即使是一个很简单的 api 也有不正常的高延迟。&lt;/p&gt;

&lt;p&gt;于是，我用 clinic 生成了 flamegraph ，发现了一些问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;我在 session 里保存了一些缓存的信息，这部分内容比较大， express-session 在保存到数据库前会先 JSON.stringify 再 crc 判断是否有改变，如果有改变则保存下来。但是由于我的这个对象嵌套层数多，所以时间花得很多。我调整了这个对象的结构，缩小了很多以后，果然这部分快了很多&lt;/li&gt;
  &lt;li&gt;有一个 API 需要大量的数据库查询，原本是 O（结点总数）次查询，我考虑到我们数据的结构，改成了O（深度），果然快了许多&lt;/li&gt;
  &lt;li&gt;之前遇到一个小问题，就是即使我没有登录，服务器也会记录 session 并且返回一个 cookie 。检查以后发现，是 connect-flash 即使在没有使用的时候，也会往 cookie 中写入一个空的对象，这就导致 express-session 认为需要保存，所以出现了问题。解决方案就是，换成了它的一个 fork ： connect-flash-plus ，它解决了这个问题&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 08 Jun 2018 10:33:00 +0800</pubDate>
        <link>https://jiegec.me/programming/2018/06/08/nodejs-experiences/</link>
        <guid isPermaLink="true">https://jiegec.me/programming/2018/06/08/nodejs-experiences/</guid>
        
        <category>nodejs</category>
        
        <category>mongodb</category>
        
        <category>mongoose</category>
        
        <category>session</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>在 Nginx 将某个子路径反代</title>
        <description>&lt;p&gt;现在遇到这么一个需求，访问根下面是提供一个服务，访问某个子路径（/abc），则需要提供另一个服务。这两个服务处于不同的机器上，我们现在通过反代把他们合在一起。在配置这个的时候，遇到了一些问题，最后得以解决。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstream root {
    server 1.2.3.4:1234;
}
upstream subpath {
    server 4.3.2.1:4321;
}

server {
    listen 443 ssl;
    server_name test.example.com;

    # the last slash is useful, see below
    location /abc/ {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # the last slash is useful too, see below
        proxy_pass http://subpath/;
    }

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://root;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于并不想 subpath 他看到路径中 /abc/ 这一层，导致路径和原来在根下不同，通过这样配置以后，特别是两个末尾的斜杠，可以让 nginx 把 GET /abc/index.html 改写为 GET /index.html ，这样我们就可以减少许多配置。当然，我们还是需要修改一下配置，现在是 host 在一个新的域名的一个新的子路径下，这主要是为了在返回的页面中，连接写的是正确的。&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jun 2018 07:57:00 +0800</pubDate>
        <link>https://jiegec.me/devops/2018/06/01/nginx-proxy-subpath/</link>
        <guid isPermaLink="true">https://jiegec.me/devops/2018/06/01/nginx-proxy-subpath/</guid>
        
        <category>nginx</category>
        
        <category>http</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>向 Nexus 6P 中刷入 LineageOS 实践</title>
        <description>&lt;p&gt;Nexus 6P 自带的系统没有允许 Root ，所以需要自己解锁 bootloader 并且刷上别的系统。我选择了 LineageOS 。Nexus 6P 的代号为 angler， 首先可以找到官方的&lt;a href=&quot;https://wiki.lineageos.org/devices/angler/install&quot;&gt;安装教程&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;我们需要下载的东西：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://mirrorbits.lineageos.org/full/angler/20180521/lineage-15.1-20180521-nightly-angler-signed.zip
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://mirrorbits.lineageos.org/full/angler/20180521/lineage-15.1-20180521-nightly-angler-signed.zip?sha256 &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; lineage-15.1-20180521-nightly-angler-signed.zip.sha256
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://mirrorbits.lineageos.org/su/addonsu-15.1-arm64-signed.zip
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://mirrorbits.lineageos.org/su/addonsu-15.1-arm64-signed.zip?sha256 &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; addonsu-15.1-arm64-signed.zip
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://github.com/opengapps/arm64/releases/download/20180527/open_gapps-arm64-8.1-full-20180527.zip
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://github.com/opengapps/arm64/releases/download/20180527/open_gapps-arm64-8.1-full-20180527.zip.md5
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://dl.twrp.me/angler/twrp-3.2.1-0-angler.img
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://dl.twrp.me/angler/twrp-3.2.1-0-angler.img.asc
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://dl.twrp.me/angler/twrp-3.2.1-0-angler.img.md5
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--verify&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.asc
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;md5sum &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.md5
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sha256sum &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.sha256
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 Open GApps 可以自己考虑选择 full 还是其它的选择。&lt;/p&gt;

&lt;p&gt;接下来，按照教程，先解锁 bootloader 。连接手机，进入 USB Debugging Mode ，重启进入 bootloader 并且解锁：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;adb reboot bootloader
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;fastboot flashing unlock
&lt;span class=&quot;c&quot;&gt;# Confirm unlocking, and then the data should be wiped&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来刷入 TWRP 。还是进入 bootloader ，然后刷入。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ fastboot flash recovery twrp-3.2.1-0-angler.img
# Select recovery, and enter it
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;进入 TWRP 后，把我们刚刚下载的 zip 文件都 push 到手机上，并用 TWRP 安装：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Select Wipe -&amp;gt; Advanced Wipe, Select Cache, System and Data and wipe then
# Install lineageos, opengapps, addonsu and follow on-screen instructions
# Reboot into system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;经过一段时间的等待， LineageOS 就安装成功了。但是遇到了一些问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;开机时提示 vendor image 版本与打包 LineagesOS 时采用的版本不同。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;于是我下载了官方的 &lt;a href=&quot;https://dl.google.com/dl/android/aosp/angler-opm2.171019.029.a1-factory-bf17e552.zip&quot;&gt;factory image&lt;/a&gt;，找到其中的 vendor.img ，用 TWRP 刷到了 vendor 分区中。并且执行了 flash-bash.sh 更新 bootloader 和 radio 。重启的时候这个错误就解决了。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;检测不到 SIM 卡。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;回到 bootloader 看 Barcode, 是有 IMEI 等信息的，说明分区没有被写坏。在网上搜索一段时间以后，发现禁用登录密码重启一次后即可使用，之后把密码加回来即可。&lt;/p&gt;
</description>
        <pubDate>Tue, 29 May 2018 07:18:00 +0800</pubDate>
        <link>https://jiegec.me/phone/2018/05/29/flashing-lineageos-in-nexus6p/</link>
        <guid isPermaLink="true">https://jiegec.me/phone/2018/05/29/flashing-lineageos-in-nexus6p/</guid>
        
        <category>android</category>
        
        <category>nexus6p</category>
        
        <category>huawei</category>
        
        <category>angler</category>
        
        <category>lineageos</category>
        
        
        <category>phone</category>
        
      </item>
    
      <item>
        <title>在 WSL 上开启一个 getty 到串口的方法</title>
        <description>&lt;p&gt;为了测试一个硬件的 terminal ，想在 Windows 上向串口开一个 tty ，跑各种软件来测试。这件事情在 Linux 上和 macOS 上都有实践，但一直不知道 Windows 上怎么搞。经过了一番搜索，找到了 https://blogs.msdn.microsoft.com/wsl/2017/04/14/serial-support-on-the-windows-subsystem-for-linux/ 和 https://unix.stackexchange.com/a/123559 的方案。&lt;/p&gt;

&lt;p&gt;以 COM5 为例：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;chmod 666 /dev/ttyS5
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;agetty &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 115200 ttyS5 linux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就可以看到一个登录的界面了。&lt;/p&gt;

&lt;p&gt;在 macOS 上(https://superuser.com/questions/1059744/serial-console-login-on-osx)：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;screen /dev/tty.SLAB_USBtoUART 115200
&lt;span class=&quot;c&quot;&gt;# type C-b : exec ::: /usr/libexec/getty std.115200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 25 May 2018 21:56:00 +0800</pubDate>
        <link>https://jiegec.me/os/2018/05/25/opening-tty-terminal-in-wsl/</link>
        <guid isPermaLink="true">https://jiegec.me/os/2018/05/25/opening-tty-terminal-in-wsl/</guid>
        
        <category>windows</category>
        
        <category>wsl</category>
        
        <category>getty</category>
        
        <category>agetty</category>
        
        <category>terminal</category>
        
        <category>cu</category>
        
        
        <category>os</category>
        
      </item>
    
      <item>
        <title>体验 Fedora on RISCV</title>
        <description>&lt;p&gt;看到 RISCV 很久了，但一直没能体验。最近工具链不断更新， QEMU 在 2.12.0 也正式加入了 riscv 的模拟。但是自己编译一个内核又太麻烦，就找到了 Fedora 做的 RISCV port，下载下来试用了一下。之前试过一次，但是遇到了一些问题，刚才总算是成功地搞出来了。&lt;/p&gt;

&lt;p&gt;官方文档地址： https://fedorapeople.org/groups/risc-v/disk-images/readme.txt
首先下载 https://fedorapeople.org/groups/risc-v/disk-images/ 下的 bbl vmlinux 和 stage4-disk.img.xz 三个文件，然后解压 stage4-disk.img.xz ，大约有 5G 的样子。之前作者在脚本里作死开得特别大，导致我以前光是解压这一步就成功不了。现在终于解决了。&lt;/p&gt;

&lt;p&gt;然后启动 qemu 命令打开虚拟机：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;qemu-system-riscv64 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-nographic&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-machine&lt;/span&gt; virt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; 2G &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-kernel&lt;/span&gt; bbl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-object&lt;/span&gt; rng-random,filename&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/urandom,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rng0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; virtio-rng-device,rng&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rng0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-append&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;console=ttyS0 ro root=/dev/vda&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; virtio-blk-device,drive&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hd0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-drive&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;stage4-disk.img,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;raw,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hd0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; virtio-net-device,netdev&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;usernet &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-netdev&lt;/span&gt; user,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;usernet,hostfwd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tcp::10000-:22
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段命令摘自 readme.txt ，区别只在于把 -smp 4 去掉了。不知道为什么不能正常工作，可能和作者提到的 FPU patch 有关。然后系统就可以正常起来了（firewalld和systemd-logind不止为啥起不来，但是不用管）。&lt;/p&gt;

&lt;p&gt;可以验证一下我们的系统：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;uname &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
Linux stage4.fedoraproject.org 4.15.0-00046-g48fb45691946 &lt;span class=&quot;c&quot;&gt;#27 SMP Mon May 14 08:25:14 UTC 2018 riscv64 riscv64 riscv64 GNU/Linux&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 24 May 2018 23:40:00 +0800</pubDate>
        <link>https://jiegec.me/os/2018/05/24/trying-fedora-on-riscv/</link>
        <guid isPermaLink="true">https://jiegec.me/os/2018/05/24/trying-fedora-on-riscv/</guid>
        
        <category>fedora</category>
        
        <category>riscv</category>
        
        <category>qemu</category>
        
        
        <category>os</category>
        
      </item>
    
      <item>
        <title>在 VMware ESXi 上部署 vCSA 实践</title>
        <description>&lt;p&gt;首先获取 vCSA 的 ISO 镜像，挂载到 Linux 下（如 /mnt），然后找到 /mnt/vcsa-cli-installer/templates/install 下的 embedded_vCSA_on_ESXi.json ，复制到其它目录并且修改必要的字段，第一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; 为 ESXi 的登录密码，一会在安装的过程中再输入。下面有个 deployment_option，根据你的集群大小来选择，我则是用的 small 。下面配置这台机器的 IP 地址，用内网地址即可。下面的 system_name 如果要写 fqdn ，记得要让这个域名可以解析到正确的地址，不然会安装失败，我因此重装了一次。下面的密码都可以留空，在命令行中输入即可。SSO 为 vSphere Client 登录时用的密码和域名，默认用户名为 Administrator@domain_name (默认的话，则是 Administrator@vsphere.local) 这个用户名在安装结束的时候也会提示。下面的 CEIP 我选择关闭，设置为 false 。&lt;/p&gt;

&lt;p&gt;接下来进行安装。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/mnt/vcsa-cli-installer/lin64/vcsa-deploy install /path/to/embedded_vCSA_on_ESXi.json &lt;span class=&quot;nt&quot;&gt;--accept-eula&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一路输入密码，等待安装完毕即可。然后通过 443 端口进入 vSphere Client, 通过 5480 端口访问 vCSA 的管理页面。两个的密码可以不一样。&lt;/p&gt;

&lt;p&gt;2018-05-21 Update: 想要设置 VMKernel 的 IPv6 网关的话，ESXi 中没找到配置的地方，但是在 vSphere Client 中可以进行相关配置。&lt;/p&gt;
</description>
        <pubDate>Sun, 20 May 2018 16:44:00 +0800</pubDate>
        <link>https://jiegec.me/devops/2018/05/20/deploy-vcsa-under-esxi/</link>
        <guid isPermaLink="true">https://jiegec.me/devops/2018/05/20/deploy-vcsa-under-esxi/</guid>
        
        <category>vmware</category>
        
        <category>vcsa</category>
        
        <category>esxi</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>在脚本中寻找 X11 的 DISPLAY 和 XAUTHORITY</title>
        <description>&lt;p&gt;之前在搞一个小工具，在里面需要访问 X11 server ，但是访问 X11 server 我们需要两个东西：DISPLAY和XAUTHORITY两个环境变量。但是，由于它们在不同的发型版和Display Manager下都有些不同，所以花了不少功夫才写了一些。&lt;/p&gt;

&lt;p&gt;为了验证我们是否可以连上 X11 server， 我们使用这一句：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;DIMENSIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;xdpyinfo | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dimensions:'&lt;/span&gt; | awk &lt;span class=&quot;s1&quot;&gt;'{print $2;exit}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它尝试打开当前的 DISPLAY，并且输出它的分辨率。接下来，我对不同的一些发型版，综合网上的方法，尝试去找到正确的环境变量。&lt;/p&gt;

&lt;p&gt;对于 Debian:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;w &lt;span class=&quot;nt&quot;&gt;-hs&lt;/span&gt; | awk &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /sys/class/tty/tty0/active&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$2 == tty &amp;amp;&amp;amp; $3 != &quot;-&quot; {print $3; exit}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;w &lt;span class=&quot;nt&quot;&gt;-hs&lt;/span&gt; | awk &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /sys/class/tty/tty0/active&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$2 == tty &amp;amp;&amp;amp; $3 != &quot;-&quot; {print $1; exit}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;XAUTHORITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/.Xauthority
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;DISPLAY
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;XAUTHORITY
&lt;span class=&quot;nv&quot;&gt;DIMENSIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;xdpyinfo | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dimensions:'&lt;/span&gt; | awk &lt;span class=&quot;s1&quot;&gt;'{print $2;exit}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对于 Archlinux：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;w &lt;span class=&quot;nt&quot;&gt;-hs&lt;/span&gt; | awk &lt;span class=&quot;s1&quot;&gt;'match($2, /:[0-9]+/) {print $2; exit}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;w &lt;span class=&quot;nt&quot;&gt;-hs&lt;/span&gt; | awk &lt;span class=&quot;s1&quot;&gt;'match($2, /:[0-9]+/) {print $1; exit}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;XAUTHORITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/run/user/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;id &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/gdm/Xauthority
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;DISPLAY
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;XAUTHORITY
&lt;span class=&quot;nv&quot;&gt;DIMENSIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;xdpyinfo | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dimensions:'&lt;/span&gt; | awk &lt;span class=&quot;s1&quot;&gt;'{print $2;exit}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后一种情况很粗暴的，直接找进程拿：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;XAUTHORITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;ps a | awk &lt;span class=&quot;s1&quot;&gt;'match($0, /Xorg/) {print $0; exit}'&lt;/span&gt; | perl &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/Xorg.*\s-auth\s([^\s]+)\s/ &amp;amp;&amp;amp; print $1'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;ps a | awk &lt;span class=&quot;s1&quot;&gt;'match($0, /Xorg/) {print $1; exit}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;lsof &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PID&lt;/span&gt; | awk &lt;span class=&quot;s1&quot;&gt;'match($9, /^\/tmp\/\.X11-unix\/X[0-9]+$/) {sub(&quot;/tmp/.X11-unix/X&quot;,&quot;:&quot;,$9); print $9; exit}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;DISPLAY
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;XAUTHORITY
&lt;span class=&quot;nv&quot;&gt;DIMENSIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;xdpyinfo | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dimensions:'&lt;/span&gt; | awk &lt;span class=&quot;s1&quot;&gt;'{print $2;exit}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;中间混用了大量的 awk perl 代码，就差 sed 了。牺牲了一点可读性，但是开发起来比较轻松。&lt;/p&gt;
</description>
        <pubDate>Fri, 11 May 2018 14:21:00 +0800</pubDate>
        <link>https://jiegec.me/programming/2018/05/11/finding-x11-display-and-xauthority/</link>
        <guid isPermaLink="true">https://jiegec.me/programming/2018/05/11/finding-x11-display-and-xauthority/</guid>
        
        <category>linux</category>
        
        <category>x11</category>
        
        <category>display</category>
        
        <category>xauthority</category>
        
        <category>awk</category>
        
        <category>perl</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>在 macOS 和 Linux 之间搭建 tinc 网络</title>
        <description>&lt;p&gt;一直听说 tinc 比较科学，所以尝试自己用 tinc 搭建一个网络。这里，macOS 这段没有固定 IP 地址，Linux 机器有固定 IP 地址 linux_ip 。假设网络名称为 example , macOS 端名为 macos 地址为 192.168.0.2, linux 端名为 linux 地址为 192.168.0.1。&lt;/p&gt;

&lt;p&gt;在 macOS 上配置：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install tinc
mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /usr/local/etc/tinc/example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;新建 /usr/local/etc/tinc/example/tinc.conf:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name = macos
Device = utun0 # use an unused number
ConnectTo = linux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;编辑 /usr/local/etc/tinc/example/tinc-up:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
ifconfig &lt;span class=&quot;nv&quot;&gt;$INTERFACE&lt;/span&gt; 192.168.0.2 192.168.0.1 mtu 1500 netmask 255.255.255.255
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;和 /usr/local/etc/tinc/example/tinc-down:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
ifconfig &lt;span class=&quot;nv&quot;&gt;$INTERFACE&lt;/span&gt; down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;还有 /usr/local/etc/tinc/example/subnet-up:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NODE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
/usr/local/opt/iproute2mac/bin/ip route add &lt;span class=&quot;nv&quot;&gt;$SUBNET&lt;/span&gt; dev &lt;span class=&quot;nv&quot;&gt;$INTERFACE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以及 /usr/local/etc/tinc/example/subnet-down:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NODE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
/usr/local/opt/iproute2mac/bin/ip route del &lt;span class=&quot;nv&quot;&gt;$SUBNET&lt;/span&gt; dev &lt;span class=&quot;nv&quot;&gt;$INTERFACE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后将它们都设为可执行的：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod +x tinc-up
chmod +x tinc-down
chmod +x subnet-down
chmod +x subnet-down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;编辑 /usr/local/etc/tinc/example/macos:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Port = 655
Subnet = 192.168.0.1/24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;tincd -n example -K&lt;/code&gt; 生成密钥。&lt;/p&gt;

&lt;p&gt;到 Linux 机器上：
编辑以下文件：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/tinc/example/hosts
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/tinc/example/tinc.conf
Name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; linux
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/tinc/example/tinc-up
&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;/bin/sh
ip link &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$INTERFACE&lt;/span&gt; up
ip addr add 192.168.0.1/24 dev &lt;span class=&quot;nv&quot;&gt;$INTERFACE&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/tinc/example/tinc-down
&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;/bin/sh
ip addr del 192.168.0.1/24 dev &lt;span class=&quot;nv&quot;&gt;$INTERFACE&lt;/span&gt;
ip link &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$INTERFACE&lt;/span&gt; down
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/tinc/example/hosts/linux
Address &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; linux_ip
Port &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 655
Subnet &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 192.168.0.1/24
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tincd &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; example &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接着，把 linux 上 /etc/tinc/example/hosts/linux 拷贝到 macos 的 /usr/local/etc/tinc/example/hosts/linux ，然后把 macos 上 /usr/local/etc/tinc/example/hosts/macos 拷贝到 /etc/tinc/example/hosts/macos 。在两台机器上都 &lt;code class=&quot;highlighter-rouge&quot;&gt;tinc -n example -D -d3&lt;/code&gt; 即可看到连接的建立，通过 ping 即可验证网络建立成功。&lt;/p&gt;

&lt;p&gt;2018-05-29 Update: Android 上，利用 Tinc GUI 也可以把 Tinc 运行起来，只是配置不大一样：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;tinc.conf
Name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; example
Device &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /dev/tun
Mode &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; switch
ConnectTo &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; remote
ScriptsInterpreter &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /system/bin/sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;tinc-up
&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
ip link &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$INTERFACE&lt;/span&gt; up
ip addr add local_ip/24 dev &lt;span class=&quot;nv&quot;&gt;$INTERFACE&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;tinc-down
&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
ip addr del local_ip/24 dev &lt;span class=&quot;nv&quot;&gt;$INTERFACE&lt;/span&gt;
ip link &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$INTERFACE&lt;/span&gt; down
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;subnet-up
&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;/bin/bash
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NODE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
ip route add &lt;span class=&quot;nv&quot;&gt;$SUBNET&lt;/span&gt; dev &lt;span class=&quot;nv&quot;&gt;$INTERFACE&lt;/span&gt; metric &lt;span class=&quot;nv&quot;&gt;$WEIGHT&lt;/span&gt; table &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;subnet-down
&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NODE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
ip route del &lt;span class=&quot;nv&quot;&gt;$SUBNET&lt;/span&gt; dev &lt;span class=&quot;nv&quot;&gt;$INTERFACE&lt;/span&gt; table &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意 table local 的使用。需要 Root 。&lt;/p&gt;
</description>
        <pubDate>Wed, 09 May 2018 10:02:00 +0800</pubDate>
        <link>https://jiegec.me/networking/2018/05/09/tinc-between-macos-and-linux/</link>
        <guid isPermaLink="true">https://jiegec.me/networking/2018/05/09/tinc-between-macos-and-linux/</guid>
        
        <category>linux</category>
        
        <category>macos</category>
        
        <category>tinc</category>
        
        
        <category>networking</category>
        
      </item>
    
      <item>
        <title>使用 Nginx 转发 VMware ESXi</title>
        <description>&lt;p&gt;我们的 VMware ESXi 在一台 NAT Router 之后，但是我们希望通过域名可以直接访问 VMware ESXi 。我们首先的尝试是，把 8443 转发到它的 443 端口，比如：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;socat TCP-LISTEN:8443,reuseaddr,fork TCP:esxi_addr:443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它能工作地很好（假的，如果你把 8443 换成 9443 它就不工作了），但是，我们想要的是，直接通过 esxi.example.org 就可以访问它。于是，我们需要 Nginx 在其中做一个转发的功能。在这个过程中遇到了很多的坑，最后终于是做好了 （VMware Remote Console等功能还不行，需要继续研究）。&lt;/p&gt;

&lt;p&gt;首先讲讲为啥把 8443 换成 9443 不能工作吧 – 很简单，ESXi 的网页界面会请求 8443 端口。只是恰好我用 8443 转发到 443， 所以可以正常工作。这个很迷，但是测试的结果确实如此。VMware Remote Console 还用到了别的端口，我还在研究之中。&lt;/p&gt;

&lt;p&gt;来谈谈怎么配置这个 Nginx 转发吧。首先是 80 跳转 443:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
        listen 80;
        listen 8080;
        server_name esxi.example.org;

        return 301 https://$host$request_uri;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个很简单，接下来是转发 443 端口：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
server {
        listen 443 ssl;
        server_name esxi.example.org;
        ssl_certificate /path/to/ssl/cert.pem;
        ssl_certificate_key /path/to/ssl/key.pem;

        location / {
                proxy_pass https://esxi_addr;
                proxy_ssl_verify off;
                proxy_ssl_session_reuse on;
                proxy_set_header Host $http_host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时，打开 https://esxi.example.org 就能看到登录界面了。但是仍然无法登录。从 DevTools 看错误，发现它请求了 8443 端口。于是进行转发：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
        listen 8443 ssl;
        server_name esxi.example.org;
        ssl_certificate /path/to/ssl/cert.pem;
        ssl_certificate_key /path/to/ssl/key.pem;


        location / {
                if ($request_method = 'OPTIONS') {
                        add_header 'Access-Control-Allow-Origin' 'https://esxi.example.org';
                        add_header 'Access-Control-Allow-Credentials' 'true';
                        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                        add_header 'Access-Control-Max-Age' 1728000;
                        add_header 'Access-Control-Allow-Headers' 'VMware-CSRF-Token,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Cookie,SOAPAction';
                        add_header 'Content-Type' 'text/plain; charset=utf-8';
                        add_header 'Content-Length' 0;
                        return 204;
                }

                add_header 'Access-Control-Allow-Origin' 'https://esxi.example.org';
                add_header 'Access-Control-Allow-Credentials' 'true';
                proxy_pass https://esxi_addr:443;
                proxy_ssl_verify off;
                proxy_ssl_session_reuse on;
                proxy_set_header Host $http_host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;主要麻烦的是配置 CORS 的相关策略。我也是看了 DevTools 的错误提示半天才慢慢写出来的。这样配置以后，就可以成功登录 VMware ESXi 了。&lt;/p&gt;

&lt;p&gt;20:02 更新：现在做了 WebSocket 转发，目前可以在浏览器中打开 Web Console 了。但是，在访问 https://esxi.example.org/ 的时候还是会出现一些问题，然而 https://esxi.example.org:8443/ 是好的。&lt;/p&gt;

&lt;p&gt;转发 WebSocket：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
}

server {
        listen 8443 ssl;
        server_name esxi.example.org;
        ssl_certificate /path/to/ssl/cert.pem;
        ssl_certificate_key /path/to/ssl/key.pem;


        location / {

                if ($request_method = 'OPTIONS') {
                        add_header 'Access-Control-Allow-Origin' 'https://esxi.example.org';
                        add_header 'Access-Control-Allow-Credentials' 'true';
                        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                        add_header 'Access-Control-Max-Age' 1728000;
                        add_header 'Access-Control-Allow-Headers' 'VMware-CSRF-Token,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Cookie,SOAPAction';
                        add_header 'Content-Type' 'text/plain; charset=utf-8';
                        add_header 'Content-Length' 0;
                        return 204;
                }

                add_header 'Access-Control-Allow-Origin' 'https://esxi.example.org' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;

                proxy_pass https://esxi_addr:443;
                proxy_ssl_verify off;
                proxy_ssl_session_reuse on;
                proxy_set_header Host $http_host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;20:29 更新：找到了 VMware Remote Console 的端口：902，用 iptables 进行 DNAT 即可：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; PREROUTING &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; wan_interface &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 902 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; DNAT &lt;span class=&quot;nt&quot;&gt;--to-destination&lt;/span&gt; esxi_addr:902
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2018-05-09 08:07 更新：最后发现，还是直接隧道到内网访问 ESXi 最科学。或者，让 443 重定向到 8443 ：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
        listen 443 ssl;
        server_name esxi.example.org;
        ssl_certificate /path/to/ssl/cert.pem;
        ssl_certificate_key /path/to/ssl/key.pem;

        return 301 https://$host:8443$request_uri;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样，前面也不用写那么多 CORS 的东西了。&lt;/p&gt;
</description>
        <pubDate>Tue, 08 May 2018 19:26:00 +0800</pubDate>
        <link>https://jiegec.me/networking/2018/05/08/nginx-proxy-vmware-esxi/</link>
        <guid isPermaLink="true">https://jiegec.me/networking/2018/05/08/nginx-proxy-vmware-esxi/</guid>
        
        <category>linux</category>
        
        <category>nat</category>
        
        <category>forwarding</category>
        
        <category>vmware</category>
        
        <category>esxi</category>
        
        <category>nginx</category>
        
        <category>proxy</category>
        
        
        <category>networking</category>
        
      </item>
    
  </channel>
</rss>
