<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杰哥的{运维,编程}小笔记</title>
    <description>本人的博客
</description>
    <link>https://jiege.ch/</link>
    <atom:link href="https://jiege.ch/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 05 Apr 2019 23:38:48 +0800</pubDate>
    <lastBuildDate>Fri, 05 Apr 2019 23:38:48 +0800</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>每周分享第 18 期</title>
        <description>&lt;p&gt;不咕不咕&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Alfred pwgen workflow https://github.com/deanishe/alfred-pwgen&lt;/li&gt;
  &lt;li&gt;魔改主板，在老主板上放 16GB 内存 https://readhacker.news/s/3Zty4&lt;/li&gt;
  &lt;li&gt;Mesalink TLS 库的 Rust 实现 https://github.com/mesalock-linux/mesalink&lt;/li&gt;
  &lt;li&gt;实测可用 Rust 写的 STM32 应用 https://github.com/lupyuen/stm32-blue-pill-rust&lt;/li&gt;
  &lt;li&gt;开源 PCIe 核 https://github.com/enjoy-digital/litepcie&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;欢迎投稿。&lt;/p&gt;

</description>
        <pubDate>Fri, 05 Apr 2019 23:35:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/04/05/weekly-sharing-18/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/04/05/weekly-sharing-18/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>高云 FPGA 踩坑</title>
        <description>&lt;p&gt;最近那到了高云 FPGA GW2A-18 开发版，想在这上面做一些小工程。不过首先要配置好环境什么的。官方提供了 Linux 和 Windows 的两套工具，自然是拥抱 Linux 咯，但是由于官方适配的是 Redhat 系的操作系统，所以用 Debian 系的时候出现了若干问题，后面会谈到怎么解决的。&lt;/p&gt;

&lt;p&gt;首先是官网下载了它的软件，大概有IDE，综合器，布线器和Programmer四个工具，然后开始跑，发现缺少了 libcrypt.so.1.0.0 。上网搜了一下解决方案，需要重新编译 openssl-1.0.0 ，于是下载并且编译了 openssl-1.0.0t 并且把 .so 的路径调好了，这时候就可以打开 IDE 了。然后发现需要 License ，这个很简单，去官网申请一下，一天邮件就下来了。&lt;/p&gt;

&lt;p&gt;接下来配置 License， IDE 很容易，直接选择邮件里发下来的 node-locked License 即可。不过 Synplify Pro 的 Linux 版本不支持直接单文件 node-locked 的 License ，只允许跑 SCL … 不过高云也提供了 SCL 的下载，和 IDE 的 License Server 放在一起，安装完以后，在得到的 License 里加上两行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SERVER &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hostid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
VENDER snpslmd /path/to/scl/2018.06/linux64/bin/snpslmd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后把 $LM_LICENSE_FILE 指向这个文件路径，就可以了。这一部分感谢 @Jackey-Huo。&lt;/p&gt;

&lt;p&gt;随手写了一个简化版的点亮数字人生（没有数码管），得到了 bistream ，准备往板子里刷，然后问题出现了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ImportError: /path/to/Gowin_YunYuan_V1.9.0Beta_linux/Programmer/bin/librt.so.1: symbol __vdso_clock_gettime version GLIBC_PRIVATE not defined in file libc.so.6 with link time reference
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;目测是 glibc 版本问题 … 这就很难处理了。另外又从官网下载了独立的 Programmer ，仍然不行，检测不到设备。&lt;/p&gt;

&lt;p&gt;最后想了想，找到了终极办法，在 Docker 里运行 CentOS 的 Privileged Container ，再跑 programmer ：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker pull centos
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /home:/home centos /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CentOS 镜像出乎意料地小。进去以后，找到 Programmer 路径，然后 scan ：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ./programmer_cli --scan&lt;/span&gt;
 Scanning!
Current download-cable channel:0
Device Info:
        Family: GW2A
        Name: GW2A-18
        ID: 0xREDACTED
 1 device&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; found!
 Cost 0.54 second&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接着烧到 SRAM 中：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ./programmer_cli -d GW2A-18 --fsFile /path/to/bitstream.fs --run 2&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;SRAM Program&quot;&lt;/span&gt; starting on device-1...
Programming...: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#########################] 100%&lt;/span&gt;
 User Code: 0xREDACTED
 Status Code: 0xREDACTED
 Cost 4.54 second&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;烧录成功，功能测试也没有问题。可以继续进行下一步工作了。&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Apr 2019 09:00:00 +0800</pubDate>
        <link>https://jiege.ch/hardware/2019/04/01/gowin-fpga/</link>
        <guid isPermaLink="true">https://jiege.ch/hardware/2019/04/01/gowin-fpga/</guid>
        
        <category>gowin</category>
        
        <category>fpga</category>
        
        <category>programmer</category>
        
        <category>centos</category>
        
        
        <category>hardware</category>
        
      </item>
    
      <item>
        <title>每周分享第 17 期</title>
        <description>&lt;p&gt;对不起咕咕了两天。。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;关于 rel=”noopener” 的一些细节 https://mathiasbynens.github.io/rel-noopener&lt;/li&gt;
  &lt;li&gt;Microsft Defender 推出 macOS 版 https://arstechnica.com/gadgets/2019/03/microsoft-ships-anti-virus-for-macos-as-windows-defender-becomes-microsoft-defender/&lt;/li&gt;
  &lt;li&gt;基于 Docker 的快速启动在线 Linux box https://github.com/instantbox/instantbox&lt;/li&gt;
  &lt;li&gt;rust 在窗口中显示 fb 的库 https://github.com/emoon/rust_minifb&lt;/li&gt;
  &lt;li&gt;Vue 列表空间，为大量数据设计 https://github.com/tangbc/vue-virtual-scroll-list&lt;/li&gt;
  &lt;li&gt;musl 各平台的交叉编译工具链 https://musl.cc/&lt;/li&gt;
  &lt;li&gt;在线的 markdown 转 pdf https://md2pdf.netlify.com/&lt;/li&gt;
  &lt;li&gt;一本关于 C64 的书 http://10print.org/&lt;/li&gt;
  &lt;li&gt;转自 dram “haskutil tql，自动更新 import，自动 {-# LANGUAGE #-} ，自动填 hole” https://github.com/EduardSergeev/vscode-haskutil&lt;/li&gt;
  &lt;li&gt;ZFS on Linux 加入 TRIM 支持 http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=ZFS-On-Linux-TRIM-Lands&lt;/li&gt;
  &lt;li&gt;又一个体现 JS 玄学之处的网站 https://getify.github.io/coercions-grid/&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 31 Mar 2019 12:32:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/03/31/weekly-sharing-17/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/03/31/weekly-sharing-17/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>静态编译 sqlite3</title>
        <description>&lt;p&gt;最近 rCore 支持了动态链接库，于是想着在测试 sqlite 的时候直接用动态的，不过出现了玄学的问题，它会访问一个不存在的地址，看代码也没看出个所以然来。所以研究了一下 sqlite 的静态编译。首先在 &lt;code class=&quot;highlighter-rouge&quot;&gt;configure&lt;/code&gt; 的时候尝试了一下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./configure &lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;x86_64-linux-musl-gcc &lt;span class=&quot;nt&quot;&gt;--disable-shared&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--enabled-static&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;发现 &lt;code class=&quot;highlighter-rouge&quot;&gt;libsqlite&lt;/code&gt; 确实是静态了，但是 &lt;code class=&quot;highlighter-rouge&quot;&gt;sqlite3&lt;/code&gt; 并不是。一番研究以后，发现是 &lt;code class=&quot;highlighter-rouge&quot;&gt;libtool&lt;/code&gt; 的原因，只要这样编译：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;nv&quot;&gt;LTLINK_EXTRAS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-all-static&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;就可以编译出静态的 &lt;code class=&quot;highlighter-rouge&quot;&gt;sqlite3&lt;/code&gt; ：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sqlite3: ELF 64-bit LSB executable, x86-64, version 1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SYSV&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, statically linked, with debug_info, not stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 24 Mar 2019 19:13:00 +0800</pubDate>
        <link>https://jiege.ch/software/2019/03/24/static-building-sqlite/</link>
        <guid isPermaLink="true">https://jiege.ch/software/2019/03/24/static-building-sqlite/</guid>
        
        <category>rcore</category>
        
        <category>x86</category>
        
        <category>x86_64</category>
        
        <category>static</category>
        
        <category>musl</category>
        
        <category>sqlite</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>每周分享第 16 期</title>
        <description>&lt;p&gt;继续沉迷写 OS +1&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;C++ 的一个比较 fancy 的 format 库 https://github.com/fmtlib/fmt&lt;/li&gt;
  &lt;li&gt;Rust 的 rsync 替代品 https://github.com/wchang22/lumins&lt;/li&gt;
  &lt;li&gt;VirtIO 1.1 要发布了 https://github.com/oasis-tcs/virtio-docs/commit/3b4130f3a8910dad89b8166e06e58806b9c60943&lt;/li&gt;
  &lt;li&gt;向二维码嵌入图片的工具 http://cgv.cs.nthu.edu.tw/Projects/Recreational_Graphics/Halftone_QRCodes/&lt;/li&gt;
  &lt;li&gt;Google Chrome 发出奇怪的 DNS 请求的原因 https://unix.stackexchange.com/questions/363512/chrome-dns-requests-with-random-dns-names-malware&lt;/li&gt;
  &lt;li&gt;转换 .HEIC 到 .jpg 的批量方案：&lt;code class=&quot;highlighter-rouge&quot;&gt;alias heic=&quot;magick mogrify -monitor -format jpg *.HEIC&quot;&lt;/code&gt; ref: &lt;a href=&quot;https://apple.stackexchange.com/questions/297134/how-to-convert-a-heif-heic-image-to-jpeg-in-el-capitan&quot;&gt;Apple SE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;以打代码来练打字的网站  https://typing.io/&lt;/li&gt;
  &lt;li&gt;VSCode 网页 server https://github.com/codercom/code-server&lt;/li&gt;
  &lt;li&gt;奇特的 Rust 网页栈实现 https://japaric.github.io/jnet/jnet/index.html&lt;/li&gt;
  &lt;li&gt;H265 解析 gui https://github.com/virinext/hevcesbrowser 之前介绍过 H264 的&lt;/li&gt;
  &lt;li&gt;Awesome Rust Embedded https://github.com/rust-embedded/awesome-embedded-rust&lt;/li&gt;
  &lt;li&gt;新的 SiFive 产品 https://www.crowdsupply.com/sifive/hifive1-rev-b&lt;/li&gt;
  &lt;li&gt;Wireshark 3.0.0 发布  https://www.wireshark.org/docs/relnotes/wireshark-3.0.0.html&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 22 Mar 2019 23:27:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/03/22/weekly-sharing-16/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/03/22/weekly-sharing-16/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>交叉编译 Nginx 1.14.2 到 RISC-V</title>
        <description>&lt;p&gt;最近又把一定的精力放到了 RISC-V 64 上的 rCore 用户态程序的支持上，同时也借到了 HiFive Unleashed 板子，所以有真实硬件可以拿来跑了。在这之前先在 QEMU 上把能跑的都跑起来。&lt;/p&gt;

&lt;p&gt;由于 rCore 对 glibc 的支持一直有问题，RISC-V 也不例外，所以还是选择用 musl 来做这件事情。一般搜索，终于找到了 Linux 下能用的 &lt;a href=&quot;https://github.com/rv8-io/musl-riscv-toolchain&quot;&gt;musl-riscv-toolchain&lt;/a&gt; 。编译好工具链以后，很多需要 libc 的用户态都能跑了，于是想着试一下 nginx 的编译。试着编译了一下，遇到了各种问题，最后搜到了&lt;a href=&quot;https://www.jianshu.com/p/5d9b60f7b262&quot;&gt;交叉编译Hi3536上面使用的nginx&lt;/a&gt;，里面的方法解决了这个问题。最后总结出了这样的 patch :&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/nginx-1.14.2/auto/cc/name b/nginx-1.14.2/auto/cc/name
index ded93f5..d6ab27a 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/nginx-1.14.2/auto/cc/name
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/nginx-1.14.2/auto/cc/name
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -7,7 +7,7 @@ if [ &quot;$NGX_PLATFORM&quot; != win32 ]; then
&lt;/span&gt; 
     ngx_feature=&quot;C compiler&quot;
     ngx_feature_name=
&lt;span class=&quot;gd&quot;&gt;-    ngx_feature_run=yes
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    ngx_feature_run=no
&lt;/span&gt;     ngx_feature_incs=
     ngx_feature_path=
     ngx_feature_libs=
&lt;span class=&quot;gh&quot;&gt;diff --git a/nginx-1.14.2/auto/lib/openssl/make b/nginx-1.14.2/auto/lib/openssl/make
index 126a238..7a0e768 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/nginx-1.14.2/auto/lib/openssl/make
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/nginx-1.14.2/auto/lib/openssl/make
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -51,7 +51,7 @@ END
&lt;/span&gt; $OPENSSL/.openssl/include/openssl/ssl.h:	$NGX_MAKEFILE
 	cd $OPENSSL \\
 	&amp;amp;&amp;amp; if [ -f Makefile ]; then \$(MAKE) clean; fi \\
&lt;span class=&quot;gd&quot;&gt;-	&amp;amp;&amp;amp; ./config --prefix=$ngx_prefix no-shared no-threads $OPENSSL_OPT \\
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+	&amp;amp;&amp;amp; ./config --prefix=$ngx_prefix no-shared no-threads --cross-compile-prefix=riscv64-linux-musl- $OPENSSL_OPT \\
&lt;/span&gt; 	&amp;amp;&amp;amp; \$(MAKE) \\
 	&amp;amp;&amp;amp; \$(MAKE) install_sw LIBDIR=lib
 
&lt;span class=&quot;gh&quot;&gt;diff --git a/nginx-1.14.2/auto/types/sizeof b/nginx-1.14.2/auto/types/sizeof
index 480d8cf..52c7287 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/nginx-1.14.2/auto/types/sizeof
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/nginx-1.14.2/auto/types/sizeof
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -33,7 +33,7 @@ int main(void) {
&lt;/span&gt; END
 
 
&lt;span class=&quot;gd&quot;&gt;-ngx_test=&quot;$CC $CC_TEST_FLAGS $CC_AUX_FLAGS \
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ngx_test=&quot;gcc $CC_TEST_FLAGS $CC_AUX_FLAGS \
&lt;/span&gt;           -o $NGX_AUTOTEST $NGX_AUTOTEST.c $NGX_LD_OPT $ngx_feature_libs&quot;
 
 eval &quot;$ngx_test &amp;gt;&amp;gt; $NGX_AUTOCONF_ERR 2&amp;gt;&amp;amp;1&quot;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接着，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;./configure --with-cc=riscv64-linux-musl-gcc --with-cc-opt=-static --with-ld-opt=-static --without-pcre --without-http_rewrite_module --without-http_gzip_module --with-poll_module --without-http_upstream_zone_module&lt;/code&gt; 之后，修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;objs/ngx_auto_config.h&lt;/code&gt;，加入：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef NGX_SYS_NERR
#define NGX_SYS_NERR  132
#endif
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifndef NGX_HAVE_SYSVSHM
#define NGX_HAVE_SYSVSHM 1
#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接着就可以正常编译了：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file objs/nginx
objs/nginx: ELF 64-bit LSB executable, UCB RISC-V, version 1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SYSV&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, statically linked, with debug_info, not stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 22 Mar 2019 23:18:00 +0800</pubDate>
        <link>https://jiege.ch/software/2019/03/22/cross-compiling-nginx-to-riscv/</link>
        <guid isPermaLink="true">https://jiege.ch/software/2019/03/22/cross-compiling-nginx-to-riscv/</guid>
        
        <category>rcore</category>
        
        <category>riscv</category>
        
        <category>crosscompiling</category>
        
        <category>musl</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>在古老的 OS 上运行一个干净的新的环境</title>
        <description>&lt;p&gt;由于某些课程的原因，需要在一个 CentOS 7 上跑一些编译和运行代码。看到这么古老的软件，我心想不行，肯定要找新一些的软件来用。首先想到的是 tmux ，于是按照&lt;a href=&quot;https://gist.github.com/ryin/3106801&quot;&gt;网上的脚本&lt;/a&gt; 很快装了一个 tmux 2.8 版本，果然好了很多。但是常用的很多软件依然是个问题。试了一下最近比较新的 code-server ，因为ABI问题跑不起来。&lt;/p&gt;

&lt;p&gt;于是开始想玩骚操作。首先想到的是 Gentoo Prefix ，不过既然是别人的机器，还是算了。又找了 fakeroot 配合 alpine rootfs 的方案，但编译不过，估计是内核版本问题。又试了一下 fakechroot ，但它需要配合 fakeroot 使用，这就凉了。&lt;/p&gt;

&lt;p&gt;然后又找了一些替代方案。一是 uchroot ，但由于 CMake 版本太老也编译不过。最后发现了 &lt;a href=&quot;https://proot-me.github.io/&quot;&gt;PRoot&lt;/a&gt; ，直接提供 prebuilt 然后很容易就可以跑起来：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./proot &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /proc &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHROOT&lt;/span&gt; /bin/busybox sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;于是就进到了 alpine 的 rootfs 中，&lt;a href=&quot;http://dl-cdn.alpinelinux.org/alpine/v3.9/releases/x86_64/alpine-minirootfs-3.9.2-x86_64.tar.gz&quot;&gt;下载地址&lt;/a&gt;。进去以后发现没有编辑器，于是出来把 apk 的源改了，加了 resolv.conf ，就成功地安装了很多很新的软件了。&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Mar 2019 22:46:00 +0800</pubDate>
        <link>https://jiege.ch/devops/2019/03/21/new-clean-env-on-old-os/</link>
        <guid isPermaLink="true">https://jiege.ch/devops/2019/03/21/new-clean-env-on-old-os/</guid>
        
        <category>centos</category>
        
        <category>alpine</category>
        
        <category>slurm</category>
        
        <category>redhat</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>每周分享第 15 期</title>
        <description>&lt;p&gt;继续沉迷写 OS&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;嵌入 graphics for rust 可以绘制 bmp 了 https://wapl.es/rust/2019/03/04/embedded-graphics-0.4.7-bmp-support.html&lt;/li&gt;
  &lt;li&gt;rustup component history 方便 nightly 日期选择 https://rust-lang.github.io/rustup-components-history/index.html&lt;/li&gt;
  &lt;li&gt;grpcurl 用于 grpc 调试 https://github.com/fullstorydev/grpcurl&lt;/li&gt;
  &lt;li&gt;grafana 6.0 is out http://docs.grafana.org/guides/whats-new-in-v6-0/&lt;/li&gt;
  &lt;li&gt;康哥推荐的写论文工具： https://github.com/stsewd/ieee-pandoc-template&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 16 Mar 2019 01:04:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/03/16/weekly-sharing-15/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/03/16/weekly-sharing-15/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>每周分享第 14 期</title>
        <description>&lt;p&gt;最近沉迷写 OS ，没怎么搜罗新的东西（&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用 Docker 做交叉编译 https://github.com/dockcross/dockcross#dockcross&lt;/li&gt;
  &lt;li&gt;tar inplace extraction 有意思的思路 https://gitlab.com/antonok/taro&lt;/li&gt;
  &lt;li&gt;los 16.0 发布 基于 Android Pie https://lineageos.org/Changelog-22/&lt;/li&gt;
  &lt;li&gt;Rust 1.33.0 Pin 进入 stable https://blog.rust-lang.org/2019/02/28/Rust-1.33.0.html&lt;/li&gt;
  &lt;li&gt;Rust 用于编写 cli 软件的工具库 https://rust-lang-nursery.github.io/cli-wg/index.html&lt;/li&gt;
  &lt;li&gt;自动使用 CI 发布二进制 prebuilt 的模板 https://github.com/japaric/trust&lt;/li&gt;
  &lt;li&gt;转换 gif 到 xlsx 很神奇 https://github.com/pugwonk/gif2xlsx/blob/master/README.md&lt;/li&gt;
  &lt;li&gt;Go REPL https://github.com/cosmos72/gomacro&lt;/li&gt;
  &lt;li&gt;基于区块链的论坛海星 其实是区块链数据库 https://github.com/CovenantSQL/CovenantForum&lt;/li&gt;
  &lt;li&gt;Rime emoji 嵌入输入法 https://github.com/rime/rime-emoji&lt;/li&gt;
  &lt;li&gt;一个神奇的数据库 https://github.com/mit-pdos/noria&lt;/li&gt;
  &lt;li&gt;一个讲内核的 gitbook https://richardweiyang.gitbooks.io/kernel-exploring/&lt;/li&gt;
  &lt;li&gt;用 React 写桌面控件 http://tracesof.net/uebersicht/&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 08 Mar 2019 18:25:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/03/08/weekly-sharing-14/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/03/08/weekly-sharing-14/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>在 rCore 上运行 nginx</title>
        <description>&lt;p&gt;阿 西 吧 nginx 终于能在 rCore 上跑了 orrrrrrrz&lt;/p&gt;

&lt;p&gt;通过这半个多月来的大量开发，我和王润基 @wangrunji0408 学长算是终于完成了第一个 milestone：跑起来一个 nginx 。遇到了很多困难，大概有这些：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;syscall 实现不全。各种方面都缺，然后 nginx 在编译的时候又检测到比较新的 OS 版本，所以很多 syscall 都用了新的来替代老的，例如 readv/writev pread/pwrite accept4 等等，所以这方面做了一些工作。另外，还有很多新的 syscall 进来，太多了我就不细说了，基本上一个commit做一点一个commit做一点这个样子。&lt;/li&gt;
  &lt;li&gt;nginx 用到了 SSE 的寄存器 xmm ，但是之前是没有开的。所以把 sse 打开，然后切换上下文的时候把 sse 通过 fxsave 保存和 fxrstor 恢复（有意思的是，as居然不认这俩，只好手动写字节码），然后为了 16bit 的对齐又写了几行汇编代码。这块问题不大，今天一会就搞定了。但是如果要性能更高一些的话，可能需要在第一次使用 xmm 的时候再开始保存，大概就是加一个bit的事情。&lt;/li&gt;
  &lt;li&gt;文件系统有点崩。实现还是有很多 BUG ，表现就是需要经常重新 mksfs 一下，再重启加载完好的 fs ，有时候强制关机一下就又崩了。&lt;/li&gt;
  &lt;li&gt;内存管理做了一些改变。为了实现更加完整的 mmap mumap 和 mprotect ，又发现了一些新的 BUG 在里面，然后慢慢修复了。就是实现的有点粗暴。&lt;/li&gt;
  &lt;li&gt;死锁问题。这个其实现在还会出现，只是还没调出来，也不会百分百出现。我们计划在锁上面做一些死锁检测，例如记住是谁上锁的，等等。现在就遇到一个很玄学的死锁问题。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后代码也是一边在写一边在重构吧，很多地方现在都写得很粗暴，FIXME和TODO留了很多，很多地方也写得不够优雅。以后再慢慢重构+优化吧。&lt;/p&gt;

&lt;p&gt;截图留念：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/nginx.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再往前的话，还有很多小的问题，例如网卡的中断启用了但没有改 mask ，所以啥也没收到，靠 QEMU Tracing 找到问题。还有一个很有意思的现象，就是如果 elf 的 program header 没有 phdr 这个项的时候，我们发现，可以通过第一个load（如果加载了完整的 elf 头的话），我们可以从这里推断出 phdr 的地址（load的虚拟地址加偏移），然后丢到 auxv 里去让 musl 配置 tls。总之这些都解决了。也不用去考虑兼容 litc 了，已经全部向 linux 靠拢了，稳。&lt;/p&gt;

&lt;p&gt;注：最简 nginx 编译参数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./configure --with-cc=/usr/bin/musl-gcc --with-cc-opt=-static --with-ld-opt=-satic --without-pcre --without-http_rewrite_module --without-http_gzip_module --with-poll_module
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样编译出来是一个静态文件，并且在 strip 之后只有不到 1M 的大小。&lt;/p&gt;

&lt;p&gt;最简 nginx 配置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;daemon off;
master_process off;

events {
    use poll;
}

http {
    server {
        listen 80;
        server_name _;

        root /;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就免去了一些麻烦（多线程、多进程交互还是有很多问题），但确实可以跑起来了。&lt;/p&gt;

&lt;p&gt;另外，还需要写一份 /etc/passwd 和 /etc/group 用于 nobody 和 nogroup 。不需要其他额外的东西了。&lt;/p&gt;

</description>
        <pubDate>Fri, 08 Mar 2019 18:07:00 +0800</pubDate>
        <link>https://jiege.ch/programming/2019/03/08/running-nginx-on-rcore/</link>
        <guid isPermaLink="true">https://jiege.ch/programming/2019/03/08/running-nginx-on-rcore/</guid>
        
        <category>rcore</category>
        
        <category>rust</category>
        
        <category>os</category>
        
        <category>nginx</category>
        
        <category>syscall</category>
        
        <category>fs</category>
        
        <category>sfs</category>
        
        
        <category>programming</category>
        
      </item>
    
  </channel>
</rss>
