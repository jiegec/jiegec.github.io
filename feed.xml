<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杰哥的{运维,编程}小笔记</title>
    <description>This is the personal blog of Jiajie Chen, a NANO(uNix hAcker aNd lOver).
</description>
    <link>https://jiegec.me/</link>
    <atom:link href="https://jiegec.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 26 Jul 2018 22:47:38 +0800</pubDate>
    <lastBuildDate>Thu, 26 Jul 2018 22:47:38 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>向 Lenovo y1s 刷入 OpenWRT 17.01.5 固件，并把 IPv6 bridge 到内网中和配置认证脚本</title>
        <description>&lt;p&gt;首先参照&lt;a href=&quot;https://wiki.openwrt.org/toh/lenovo/lenovo_y1_v1&quot;&gt;OpenWRT Wiki - Lenovo Y1 v1&lt;/a&gt;找到刷固件教程：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;下载&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/lede/releases/17.01.5/targets/ramips/mt7620/lede-17.01.5-ramips-mt7620-y1s-squashfs-sysupgrade.bin&quot;&gt;Lenovo y1s 的固件&lt;/a&gt;备用&lt;/li&gt;
  &lt;li&gt;断开电源，等待一段时间，插入电源同时快速按下重置按钮，如果面板双闪，则说明进入了恢复模式&lt;/li&gt;
  &lt;li&gt;电脑连接到四个 LAN 口中任意一个，配置静态地址在 192.168.1.0/24 网段&lt;/li&gt;
  &lt;li&gt;打开 192.168.1.1 可以看到刷固件的页面&lt;/li&gt;
  &lt;li&gt;上传固件，等待路由器重启&lt;/li&gt;
  &lt;li&gt;配置 IP 地址为 DHCP 模式，打开 192.168.1.1 进行配置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后就是常规的密码设置，opkg 源设置为 tuna 的源，配置 ssh 和 公钥。&lt;/p&gt;

&lt;p&gt;接下来，我们为了使用学校的 SLAAC ，采用 ebtables 直接把学校的 IPv6 bridge 进来，而 IPv4 由于准入系统，需要 NAT 。&lt;/p&gt;

&lt;p&gt;参考&lt;a href=&quot;https://tmikey.tech/tech_daily/lede/2017/08/25/bridge_ipv6_lede.html&quot;&gt;Bridge IPv6 connections to WAN&lt;/a&gt;，下载&lt;a href=&quot;https://github.com/cvmiller/v6brouter/blob/master/v6brouter_openwrt.sh&quot;&gt;v6brouter_openwrt.sh&lt;/a&gt;到某个地方，然后修改一下里面的一些参数：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# For Lenovo y1s&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;WAN_DEV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;eth0.2
&lt;span class=&quot;nv&quot;&gt;BRIDGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;br-lan
&lt;span class=&quot;c&quot;&gt;# the rest remain unchanged&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后跑起来之后，自己的电脑可以成功拿到原生的 IPv6 地址了，不需要用难用的 NAT66 技术。&lt;/p&gt;

&lt;p&gt;下一步是采用&lt;a href=&quot;https://github.com/z4yx/GoAuthing&quot;&gt;z4yx/GoAuthing&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go get &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; github.com/z4yx/GoAuthing
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/src/github.com/z4yx/GoAuthing/cli
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;env &lt;span class=&quot;nv&quot;&gt;GOOS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;linux &lt;span class=&quot;nv&quot;&gt;GOARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mipsle &lt;span class=&quot;nv&quot;&gt;GOMIPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;softfloat go build main.go
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mipsel-linux-gnu-strip main
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;scp main root@192.168.1.1:~/GoAuthing
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh root@192.168.1.1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;opkg install ca-certificates
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./GoAuthing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里参考了&lt;a href=&quot;https://blog.csdn.net/QQ531456898/article/details/80095707&quot;&gt;解决GO语言编译程序在openwrt(mipsle架构)上运行提示Illegal instruction问题&lt;/a&gt;，配置了 GOMIPS 环境变量。为了访问 HTTPS 网站，参考了&lt;a href=&quot;https://wiki.openwrt.org/doc/howto/wget-ssl-certs&quot;&gt;OpenWRT Wiki - SSL and Certificates in wget&lt;/a&gt;。有毒的是，这个环境变量，在 macOS 上不能正常工作，而在 Linux 机子上是没有问题的。&lt;/p&gt;

&lt;p&gt;然后就可以成功地跑起来 GoAuthing ，解决了上校园网认证的问题。&lt;/p&gt;

&lt;p&gt;感谢&lt;a href=&quot;https://github.com/z4yx&quot;&gt;宇翔&lt;/a&gt;编写的 GoAuthing 小工具。&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Jul 2018 20:48:00 +0800</pubDate>
        <link>https://jiegec.me/networking/2018/07/26/flashing-lenovo-y1s-and-bridge-ipv6/</link>
        <guid isPermaLink="true">https://jiegec.me/networking/2018/07/26/flashing-lenovo-y1s-and-bridge-ipv6/</guid>
        
        <category>lenovo</category>
        
        <category>newifi</category>
        
        <category>uboot</category>
        
        <category>lede</category>
        
        <category>openwrt</category>
        
        <category>go</category>
        
        <category>ebtables</category>
        
        <category>bridge</category>
        
        <category>ipv6</category>
        
        <category>goauthing</category>
        
        <category>z4yx</category>
        
        
        <category>networking</category>
        
      </item>
    
      <item>
        <title>构建简易的 initramfs</title>
        <description>&lt;p&gt;一直对 Linux 的启动很感兴趣，但对 initrd 和 initramfs 等概念不大了解，于是上网找了资料，自己成功地看到了现象。&lt;/p&gt;

&lt;p&gt;参考资料：
&lt;a href=&quot;http://www.kaizou.org/2016/09/boot-minimal-linux-qemu/&quot;&gt;Build and boot a minimal Linux system with qemu&lt;/a&gt;
&lt;a href=&quot;https://wiki.gentoo.org/wiki/Custom_Initramfs&quot;&gt;Custom Initramfs&lt;/a&gt;
&lt;a href=&quot;https://dazdaztech.wordpress.com/2013/04/04/initrd-vs-initramfs/&quot;&gt;initramfs vs initrd&lt;/a&gt;
&lt;a href=&quot;https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt&quot;&gt;ramfs, rootfs and initramfs&lt;/a&gt;
&lt;a href=&quot;https://www.linux.com/learn/kernel-newbie-corner-initrd-and-initramfs-whats&quot;&gt;The Kernel Newbie Corner: “initrd” and “initramfs”– What’s Up With That?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;具体步骤：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;hello.c
&lt;span class=&quot;c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;

int main&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello, world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc &lt;span class=&quot;nt&quot;&gt;-static&lt;/span&gt; hello.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; init
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;init | cpio &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; newc | gzip &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; initrd
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;qemu-system-x86_64 &lt;span class=&quot;nt&quot;&gt;-kernel&lt;/span&gt; /boot/vmlinuz-linux &lt;span class=&quot;nt&quot;&gt;-initrd&lt;/span&gt; initrd &lt;span class=&quot;nt&quot;&gt;-nographic&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-append&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'console=ttyS0'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Use C-a c q u i t &amp;lt;Enter&amp;gt; to exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到过一会（三四秒？），可以看到满屏的 Hello world 在输出。&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Jul 2018 03:43:00 +0800</pubDate>
        <link>https://jiegec.me/os/2018/07/16/build-custom-initramfs/</link>
        <guid isPermaLink="true">https://jiegec.me/os/2018/07/16/build-custom-initramfs/</guid>
        
        <category>linux</category>
        
        <category>initrd</category>
        
        <category>initramfs</category>
        
        
        <category>os</category>
        
      </item>
    
      <item>
        <title>用 multicast 地址找到同一网段的主机</title>
        <description>&lt;p&gt;IPv4 :&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ping &lt;span class=&quot;nt&quot;&gt;-t1&lt;/span&gt; 224.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;IPv6:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ping &lt;span class=&quot;nt&quot;&gt;-t1&lt;/span&gt; ff02::1%iface
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 15 Jul 2018 17:19:00 +0800</pubDate>
        <link>https://jiegec.me/networking/2018/07/15/use-multicast-address-to-find-neighbours/</link>
        <guid isPermaLink="true">https://jiegec.me/networking/2018/07/15/use-multicast-address-to-find-neighbours/</guid>
        
        <category>icmp</category>
        
        <category>ping</category>
        
        <category>multicast</category>
        
        
        <category>networking</category>
        
      </item>
    
      <item>
        <title>用 MuSSH 快速对多台机器进行软件包升级</title>
        <description>&lt;p&gt;Debian Stretch 9.5 刚刚更新，自己手上有不少 stretch 的机器，于是顺手把他们都升级了。不过，这个过程比较繁琐，于是我采用了 MuSSH 的方法，让这个效率可以提高，即自动同时 SSH 到多台机器上进行更新。&lt;/p&gt;

&lt;p&gt;首先编写 hostlist 文件，一行一个地址，分别对应每台机器。&lt;/p&gt;

&lt;p&gt;然后采用 MuSSH 对每台机器执行同样的命令&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mussh &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; hostlist &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'apt update &amp;amp;&amp;amp; apt upgrade -y'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时要求，ssh 上去以后有相应的权限。这个有许多方法，不再赘述。然后就可以看到一台台机器升级，打上安全补丁，爽啊。&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Jul 2018 01:10:00 +0800</pubDate>
        <link>https://jiegec.me/devop/2018/07/15/use-mussh-to-upgrade-multiple-machines/</link>
        <guid isPermaLink="true">https://jiegec.me/devop/2018/07/15/use-mussh-to-upgrade-multiple-machines/</guid>
        
        <category>debian</category>
        
        <category>stretch</category>
        
        <category>mussh</category>
        
        
        <category>devop</category>
        
      </item>
    
      <item>
        <title>配置 fcitx-fbterm 实现在终端下显示和输入中文</title>
        <description>&lt;p&gt;参考网站：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linuxidc.com/Linux/2015-01/111976.htm&quot;&gt;Ubuntu使用fbterm无法打开fb设备的解决及fcitx-fbterm安装&lt;/a&gt;
&lt;a href=&quot;https://wiki.archlinux.org/index.php/fcitx&quot;&gt;Fcitx - ArchWiki&lt;/a&gt;
&lt;a href=&quot;https://blog.csdn.net/guozhiyingguo/article/details/52852394&quot;&gt;完美中文tty, fbterm+yong(小小输入法)&lt;/a&gt;
&lt;a href=&quot;http://www.voidcn.com/article/p-wrcgydjy-er.html&quot;&gt;让linux console支持中文显示和fcitx输入法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;考虑到 lemote yeeloong 机器的 cpu 运算性能，跑一个图形界面会非常卡，于是选择直接用 framebuffer 。但是，显示中文又成了问题。于是，采用了 fbterm 和 fcitx 配合，加上 gdm 的方法，完成了终端下的中文输入。&lt;/p&gt;

&lt;p&gt;首先，安装相关的包：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install gpm fcitx-fronend-fbterm dbus-x11 fbterm fonts-wqy-zenhei
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接着，基于以上参考网站第一个，编写 zhterm 文件：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;zhterm
&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;dbus-launch &lt;span class=&quot;nt&quot;&gt;--auto-syntax&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
fcitx &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1
fbterm &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; fcitx-fbterm
&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DBUS_SESSION_BUS_PID&lt;/span&gt;
fcitx-remote &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chmod +x zhterm
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;zhterm
&lt;span class=&quot;c&quot;&gt;# Use C-SPC to switch input source&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另：找到一个&lt;a href=&quot;https://unix.stackexchange.com/a/7682/144358&quot;&gt;映射 Caps Lock 到 Escape 的方案&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo bash -c &quot;dumpkeys | sed 's/CtrlL_Lock/Escape/' | loadkeys&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 12 Jul 2018 23:06:00 +0800</pubDate>
        <link>https://jiegec.me/misc/2018/07/12/using-fcitx-fbterm/</link>
        <guid isPermaLink="true">https://jiegec.me/misc/2018/07/12/using-fcitx-fbterm/</guid>
        
        <category>debian</category>
        
        <category>fcitx</category>
        
        <category>googlepinyin</category>
        
        <category>fbterm</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>在 Lemote Yeeloong 上安装 Debian jessie</title>
        <description>&lt;p&gt;参考网站：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.gnewsense.org/Projects/GNewSenseToMIPS&quot;&gt;gNewSense To MIPS&lt;/a&gt;
&lt;a href=&quot;https://rick.cogley.info/post/run-a-tftp-server-on-mac-osx/&quot;&gt;Run a TFTP server on macOS&lt;/a&gt;
&lt;a href=&quot;https://wiki.debian.org/DebianYeeloong&quot;&gt;Debian on Yeeloong&lt;/a&gt;
&lt;a href=&quot;https://wiki.debian.org/MIPSPort&quot;&gt;Debian MIPS port wiki&lt;/a&gt;
&lt;a href=&quot;https://www.debian.org/ports/mips/&quot;&gt;Debian MIPS port&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先，进入设备的 PMON：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Press Del to enter PMON
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，下载 Debian Jessie 的 netboot 文件：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget https://mirrors.tuna.tsinghua.edu.cn/debian/dists/jessie/main/installer-mipsel/current/images/loongson-2f/netboot/vmlinux-3.16.0-6-loongson-2f
$ wget https://mirrors.tuna.tsinghua.edu.cn/debian/dists/jessie/main/installer-mipsel/current/images/loongson-2f/netboot/initrd.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以 macOS 为例，起一个 tftp 服务器以供远程下载：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ln -s these files to /private/tftpboot:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# initrd.gz&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# vmlinux-4.16.0-6-loongson-2f&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;launchctl load &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; /System/Library/LaunchDaemons/tftp.plist
&lt;span class=&quot;c&quot;&gt;# set addr manually to 192.168.2.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;回到 PMON ，配置远程启动：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ifaddr rtl0 192.168.2.2
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; load tftp://192.168.2.1/vmlinux-3.16.0-6-loongson-2f
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; initrd tftp://192.168.2.1/initrd.gz
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之后就是熟悉的 Debian Installer 界面。起来之后，就可以顺手把 tftp 服务器关了：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;launchctl unload &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; /System/Library/LaunchDaemons/tftp.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实测滚到 stretch 会挂。因为 stretch 虽然也有 mipsel 架构，但是它的 revision 与 Loongson-2f 不大一样，会到处出现 SIGILL 的问题，不可用。靠 jessie 和 jessie-backports 已经有不少的软件可以使用了。&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Jul 2018 23:12:00 +0800</pubDate>
        <link>https://jiegec.me/devops/2018/07/11/installing-debian-in-lemote-yeeloong/</link>
        <guid isPermaLink="true">https://jiegec.me/devops/2018/07/11/installing-debian-in-lemote-yeeloong/</guid>
        
        <category>debian</category>
        
        <category>mips</category>
        
        <category>loongson</category>
        
        <category>lemote</category>
        
        <category>yeeloong</category>
        
        <category>jessie</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>通过 systemd-run 直接在容器中执行命令</title>
        <description>&lt;p&gt;之前使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;systemd-nspawn&lt;/code&gt; 开了容器，然后通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;machinectl shell&lt;/code&gt; 进去，想要起一个服务然后丢到后台继续执行，但是发现离开这个 session 后这个进程总是会被杀掉，于是找了 &lt;code class=&quot;highlighter-rouge&quot;&gt;systemd-run&lt;/code&gt; 的方案，即：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemd-run &lt;span class=&quot;nt&quot;&gt;--machine&lt;/span&gt; machine_name_here absolute_path_to_executable args_here
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样可以直接在容器中跑服务，而且用这个命令输出的临时 server 名称，还可以看到日志：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;journalctl &lt;span class=&quot;nt&quot;&gt;--machine&lt;/span&gt; machine_name_here &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; unit_name_above
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 06 Jul 2018 15:56:00 +0800</pubDate>
        <link>https://jiegec.me/devops/2018/07/06/run-command-in-container-directly/</link>
        <guid isPermaLink="true">https://jiegec.me/devops/2018/07/06/run-command-in-container-directly/</guid>
        
        <category>container</category>
        
        <category>lxc</category>
        
        <category>systemd-nspawn</category>
        
        <category>systemd-run</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>通过 iptables 在同一个端口根据源地址解复用（demux）</title>
        <description>&lt;p&gt;现在遇到一个场景，原来的一个服务只给一个客户端用，但现在增加了一个客户端，由于客户端配置相同，但是服务端需要区别对待两个客户端的服务端配置，所以利用 iptables 根据源地址做了一个端口转发，实现了 demux 。&lt;/p&gt;

&lt;p&gt;假设：服务器在 192.168.0.1 ，客户端分别在 192.168.0.2 和 192.168.0.3 。客户端配置的服务端地址是 192.168.0.1:8000 。之前，在服务器上只跑了一个服务，监听着 8000 端口。&lt;/p&gt;

&lt;p&gt;现在，在服务器上再跑一个服务，监听 8001 端口，同时根据需求进行相应的配置。然后，加上如下 iptables 规则：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nat &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; PREROUTING &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 192.168.0.3 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; 192.168.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 8000 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; REDIRECT &lt;span class=&quot;nt&quot;&gt;--to-ports&lt;/span&gt; 8001
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样，在不需要更改客户端的情况下，完成了需要的效果。&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Jul 2018 09:36:00 +0800</pubDate>
        <link>https://jiegec.me/networking/2018/07/06/use-iptables-to-serve-different-services-on-one-port/</link>
        <guid isPermaLink="true">https://jiegec.me/networking/2018/07/06/use-iptables-to-serve-different-services-on-one-port/</guid>
        
        <category>iptables</category>
        
        <category>ip</category>
        
        
        <category>networking</category>
        
      </item>
    
      <item>
        <title>升级 MongoDB 到 4.0</title>
        <description>&lt;p&gt;MongoDB 4.0 刚刚发布，加入了我很想要的 Transaction 功能。不过，我一更新就发现 MongoDB 起不来了。研究了一下日志，发现由于我创建数据库时，MongoDB版本是 3.4 ，虽然后来升级到了 3.6 ，但还是用着 3.4的兼容模式。这个可以这样来检测：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mongo
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; db.adminCommand&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; getParameter: 1, featureCompatibilityVersion: 1 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果不是 3.6， 升级到 4.0 之前，需要先执行如下操作：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# MongoDB version 3.6&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mongo
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; db.adminCommand&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; setFeatureCompatibilityVersion: &lt;span class=&quot;s2&quot;&gt;&quot;3.6&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后再升级到 MongoDB 4.0 ，才能正常地启动 MongoDB 4.0 。之后可以考虑尝试使用 MongoDB 4.0 的 Transaction 了。不知道什么时候进入 Debian 的 stretch-backports 源中。&lt;/p&gt;

&lt;p&gt;为了使用 MongoDB 4.0 的新特性，输入以下命令：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mongo
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; db.adminCommand&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; setFeatureCompatibilityVersion: &lt;span class=&quot;s2&quot;&gt;&quot;4.0&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之后会尝试一下 MongoDB 4.0 的 Transaction 功能。&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Jul 2018 07:22:00 +0800</pubDate>
        <link>https://jiegec.me/programming/2018/07/04/upgrade-mongodb-to-4.0/</link>
        <guid isPermaLink="true">https://jiegec.me/programming/2018/07/04/upgrade-mongodb-to-4.0/</guid>
        
        <category>mongodb</category>
        
        <category>transaction</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Wireguard 隧道搭建</title>
        <description>&lt;p&gt;随着 Wireguard Go 版本的开发，在 macOS 上起 WireGuard Tunnel 成为现实。于是，搭建了一个 macOS 和 Linux 之间的 WireGuard Tunnel。假设 Linux 端为服务端， macOS 端为客户端。&lt;/p&gt;

&lt;p&gt;macOS端：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install wireguard-tools
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/etc/wireguard
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wg genkey &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; privatekey
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wg pubkey &amp;lt; privatekey &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; publickey
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim tunnel.conf
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Interface]
PrivateKey &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; MACOS_PRIVATE_KEY

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Peer]
PublicKey &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; LINUX_PUBLIC_KEY &lt;span class=&quot;c&quot;&gt;# Generated below&lt;/span&gt;
AllowedIPs &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 192.168.0.0/24
Endpoint &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; LINUX_PUBLIC_IP:12345
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim up.sh
&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# change interface name when necessary&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;wireguard-go utun0
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;wg setconf utun0 tunnel.conf
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ifconfig utun0 192.168.0.2 192.168.0.1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chmod +x up.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./up.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置 Linux 端：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://git.zx2c4.com/WireGuard
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;fish
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/wireguard
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wg genkey &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; privatekey
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wg pubkey &amp;lt; privatekey &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; publickey
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim wg0.conf
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Interface]
Address &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 192.168.0.1/24
PrivateKey &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; LINUX_PRIVATE_KEY
ListenPort &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 12345

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Peer]
PublicKey &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; MACOS_PUBLIC_KEY
AllowedIPs &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 192.168.0.2/24
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wg-quick up wg0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;经过测试，两边可以互相 ping 通。&lt;/p&gt;

&lt;p&gt;后续尝试在 Android 上跑通 WireGuard 。&lt;/p&gt;

&lt;p&gt;UPDATE 2018-07-11:&lt;/p&gt;

&lt;p&gt;成功在 Android 上跑通 WireGuard 。在 Google Play 上下载官方的 App 即可。麻烦在于，将 Android 上生成的 Public Key 和服务器的 Public Key 进行交换。&lt;/p&gt;

&lt;p&gt;然后又看到&lt;a href=&quot;https://wiki.debian.org/Wireguard#Step_2_-_Alternative_C_-_systemd&quot;&gt;WireGuard在systemd-networkd&lt;/a&gt;上的配置方案，自己也实践了一下。首先，如果用的是 stretch ，请首先打开 stretch-backports 源并把 systemd 升级到 237 版本。&lt;/p&gt;

&lt;p&gt;然后，根据上面这个连接进行配置，由于都是 ini 格式，基本就是复制粘贴就可以配置了。有一点要注意，就是，要保护 PrivateKey 的安全，注意配置 .netdev 文件的权限。&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Jun 2018 10:59:00 +0800</pubDate>
        <link>https://jiegec.me/networking/2018/06/29/wireguard-tunnel/</link>
        <guid isPermaLink="true">https://jiegec.me/networking/2018/06/29/wireguard-tunnel/</guid>
        
        <category>tun</category>
        
        <category>wireguard</category>
        
        <category>systemd-networkd</category>
        
        
        <category>networking</category>
        
      </item>
    
  </channel>
</rss>
