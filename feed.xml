<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杰哥的{运维,编程}小笔记</title>
    <description>本人的博客
</description>
    <link>https://jiege.ch/</link>
    <atom:link href="https://jiege.ch/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 21 Mar 2019 23:43:39 +0800</pubDate>
    <lastBuildDate>Thu, 21 Mar 2019 23:43:39 +0800</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>在古老的 OS 上运行一个干净的新的环境</title>
        <description>&lt;p&gt;由于某些课程的原因，需要在一个 CentOS 7 上跑一些编译和运行代码。看到这么古老的软件，我心想不行，肯定要找新一些的软件来用。首先想到的是 tmux ，于是按照&lt;a href=&quot;https://gist.github.com/ryin/3106801&quot;&gt;网上的脚本&lt;/a&gt; 很快装了一个 tmux 2.8 版本，果然好了很多。但是常用的很多软件依然是个问题。试了一下最近比较新的 code-server ，因为ABI问题跑不起来。&lt;/p&gt;

&lt;p&gt;于是开始想玩骚操作。首先想到的是 Gentoo Prefix ，不过既然是别人的机器，还是算了。又找了 fakeroot 配合 alpine rootfs 的方案，但编译不过，估计是内核版本问题。又试了一下 fakechroot ，但它需要配合 fakeroot 使用，这就凉了。&lt;/p&gt;

&lt;p&gt;然后又找了一些替代方案。一是 uchroot ，但由于 CMake 版本太老也编译不过。最后发现了 &lt;a href=&quot;https://proot-me.github.io/&quot;&gt;PRoot&lt;/a&gt; ，直接提供 prebuilt 然后很容易就可以跑起来：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./proot &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /proc &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHROOT&lt;/span&gt; /bin/busybox sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;于是就进到了 alpine 的 rootfs 中，&lt;a href=&quot;http://dl-cdn.alpinelinux.org/alpine/v3.9/releases/x86_64/alpine-minirootfs-3.9.2-x86_64.tar.gz&quot;&gt;下载地址&lt;/a&gt;。进去以后发现没有编辑器，于是出来把 apk 的源改了，加了 resolv.conf ，就成功地安装了很多很新的软件了。&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Mar 2019 22:46:00 +0800</pubDate>
        <link>https://jiege.ch/devops/2019/03/21/new-clean-env-on-old-os/</link>
        <guid isPermaLink="true">https://jiege.ch/devops/2019/03/21/new-clean-env-on-old-os/</guid>
        
        <category>centos</category>
        
        <category>alpine</category>
        
        <category>slurm</category>
        
        <category>redhat</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>每周分享第 15 期</title>
        <description>&lt;p&gt;继续沉迷写 OS&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;嵌入 graphics for rust 可以绘制 bmp 了 https://wapl.es/rust/2019/03/04/embedded-graphics-0.4.7-bmp-support.html&lt;/li&gt;
  &lt;li&gt;rustup component history 方便 nightly 日期选择 https://rust-lang.github.io/rustup-components-history/index.html&lt;/li&gt;
  &lt;li&gt;grpcurl 用于 grpc 调试 https://github.com/fullstorydev/grpcurl&lt;/li&gt;
  &lt;li&gt;grafana 6.0 is out http://docs.grafana.org/guides/whats-new-in-v6-0/&lt;/li&gt;
  &lt;li&gt;康哥推荐的写论文工具： https://github.com/stsewd/ieee-pandoc-template&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 16 Mar 2019 01:04:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/03/16/weekly-sharing-15/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/03/16/weekly-sharing-15/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>每周分享第 14 期</title>
        <description>&lt;p&gt;最近沉迷写 OS ，没怎么搜罗新的东西（&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用 Docker 做交叉编译 https://github.com/dockcross/dockcross#dockcross&lt;/li&gt;
  &lt;li&gt;tar inplace extraction 有意思的思路 https://gitlab.com/antonok/taro&lt;/li&gt;
  &lt;li&gt;los 16.0 发布 基于 Android Pie https://lineageos.org/Changelog-22/&lt;/li&gt;
  &lt;li&gt;Rust 1.33.0 Pin 进入 stable https://blog.rust-lang.org/2019/02/28/Rust-1.33.0.html&lt;/li&gt;
  &lt;li&gt;Rust 用于编写 cli 软件的工具库 https://rust-lang-nursery.github.io/cli-wg/index.html&lt;/li&gt;
  &lt;li&gt;自动使用 CI 发布二进制 prebuilt 的模板 https://github.com/japaric/trust&lt;/li&gt;
  &lt;li&gt;转换 gif 到 xlsx 很神奇 https://github.com/pugwonk/gif2xlsx/blob/master/README.md&lt;/li&gt;
  &lt;li&gt;Go REPL https://github.com/cosmos72/gomacro&lt;/li&gt;
  &lt;li&gt;基于区块链的论坛海星 其实是区块链数据库 https://github.com/CovenantSQL/CovenantForum&lt;/li&gt;
  &lt;li&gt;Rime emoji 嵌入输入法 https://github.com/rime/rime-emoji&lt;/li&gt;
  &lt;li&gt;一个神奇的数据库 https://github.com/mit-pdos/noria&lt;/li&gt;
  &lt;li&gt;一个讲内核的 gitbook https://richardweiyang.gitbooks.io/kernel-exploring/&lt;/li&gt;
  &lt;li&gt;用 React 写桌面控件 http://tracesof.net/uebersicht/&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 08 Mar 2019 18:25:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/03/08/weekly-sharing-14/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/03/08/weekly-sharing-14/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>在 rCore 上运行 nginx</title>
        <description>&lt;p&gt;阿 西 吧 nginx 终于能在 rCore 上跑了 orrrrrrrz&lt;/p&gt;

&lt;p&gt;通过这半个多月来的大量开发，我和王润基 @wangrunji0408 学长算是终于完成了第一个 milestone：跑起来一个 nginx 。遇到了很多困难，大概有这些：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;syscall 实现不全。各种方面都缺，然后 nginx 在编译的时候又检测到比较新的 OS 版本，所以很多 syscall 都用了新的来替代老的，例如 readv/writev pread/pwrite accept4 等等，所以这方面做了一些工作。另外，还有很多新的 syscall 进来，太多了我就不细说了，基本上一个commit做一点一个commit做一点这个样子。&lt;/li&gt;
  &lt;li&gt;nginx 用到了 SSE 的寄存器 xmm ，但是之前是没有开的。所以把 sse 打开，然后切换上下文的时候把 sse 通过 fxsave 保存和 fxrstor 恢复（有意思的是，as居然不认这俩，只好手动写字节码），然后为了 16bit 的对齐又写了几行汇编代码。这块问题不大，今天一会就搞定了。但是如果要性能更高一些的话，可能需要在第一次使用 xmm 的时候再开始保存，大概就是加一个bit的事情。&lt;/li&gt;
  &lt;li&gt;文件系统有点崩。实现还是有很多 BUG ，表现就是需要经常重新 mksfs 一下，再重启加载完好的 fs ，有时候强制关机一下就又崩了。&lt;/li&gt;
  &lt;li&gt;内存管理做了一些改变。为了实现更加完整的 mmap mumap 和 mprotect ，又发现了一些新的 BUG 在里面，然后慢慢修复了。就是实现的有点粗暴。&lt;/li&gt;
  &lt;li&gt;死锁问题。这个其实现在还会出现，只是还没调出来，也不会百分百出现。我们计划在锁上面做一些死锁检测，例如记住是谁上锁的，等等。现在就遇到一个很玄学的死锁问题。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后代码也是一边在写一边在重构吧，很多地方现在都写得很粗暴，FIXME和TODO留了很多，很多地方也写得不够优雅。以后再慢慢重构+优化吧。&lt;/p&gt;

&lt;p&gt;截图留念：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/nginx.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再往前的话，还有很多小的问题，例如网卡的中断启用了但没有改 mask ，所以啥也没收到，靠 QEMU Tracing 找到问题。还有一个很有意思的现象，就是如果 elf 的 program header 没有 phdr 这个项的时候，我们发现，可以通过第一个load（如果加载了完整的 elf 头的话），我们可以从这里推断出 phdr 的地址（load的虚拟地址加偏移），然后丢到 auxv 里去让 musl 配置 tls。总之这些都解决了。也不用去考虑兼容 litc 了，已经全部向 linux 靠拢了，稳。&lt;/p&gt;

&lt;p&gt;注：最简 nginx 编译参数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./configure --with-cc=/usr/bin/musl-gcc --with-cc-opt=-static --with-ld-opt=-satic --without-pcre --without-http_rewrite_module --without-http_gzip_module --with-poll_module
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样编译出来是一个静态文件，并且在 strip 之后只有不到 1M 的大小。&lt;/p&gt;

&lt;p&gt;最简 nginx 配置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;daemon off;
master_process off;

events {
    use poll;
}

http {
    server {
        listen 80;
        server_name _;

        root /;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就免去了一些麻烦（多线程、多进程交互还是有很多问题），但确实可以跑起来了。&lt;/p&gt;

&lt;p&gt;另外，还需要写一份 /etc/passwd 和 /etc/group 用于 nobody 和 nogroup 。不需要其他额外的东西了。&lt;/p&gt;

</description>
        <pubDate>Fri, 08 Mar 2019 18:07:00 +0800</pubDate>
        <link>https://jiege.ch/programming/2019/03/08/running-nginx-on-rcore/</link>
        <guid isPermaLink="true">https://jiege.ch/programming/2019/03/08/running-nginx-on-rcore/</guid>
        
        <category>rcore</category>
        
        <category>rust</category>
        
        <category>os</category>
        
        <category>nginx</category>
        
        <category>syscall</category>
        
        <category>fs</category>
        
        <category>sfs</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>实现网络的 syscall</title>
        <description>&lt;p&gt;有了网卡驱动，接下来要做的就做网络的 syscall 了。为了测试，首先在 busybox 里找可以用来测试的 applet ，由于没有实现 poll ，所以 nc telnet 啥的都用不了。最后选择到了 ping 和 pscan 上。&lt;/p&gt;

&lt;p&gt;ping大家都很了解，pscan就是一个扫端口的，对一个ip连续的若干个端口发起 tcp 请求。这就要求我提供 raw socket和tcp socket状态的支持。由于网络栈本身是异步的，但 read connect 这些函数在不调 setsockopt 的前提下又是同步的，然而现在又没有 signal 可以用，要是 block 了就再也出不来了。于是就采用了 Condvar 的办法，拿一个全局的条件变量，当 poll 不到内容的时候，先把线程拿掉，等到网络栈更新了，再恢复。这样至少不会把 cpu 也 block 住。&lt;/p&gt;

&lt;p&gt;然后就是把 socket 部分改了又改吧，数据结构的设计改了几次，为了解决 ownership 问题上锁啊也有点多，但是也更细了，虽然实际上可能没有必要，因为上面还有大的锁。不过性能还不是现在考虑的重点，关键还要先把 send recv accept bind listen 啥的写得差不多了，然后还有把 poll/select 实现了，这个很关键。&lt;/p&gt;

&lt;p&gt;中间遇到的最大的坑就是，接收 pci interrupt 的时候总是啥也没有，然后靠万能的 qemu trace 发现，原来是 mask 掉了，所以啥也收不了，然后最后的解决方案就是用 MSI Interrupt #55 搞定了这个问题。至于为啥是 55 呢，因为 23 + 32 = 55 啊（误&lt;/p&gt;

&lt;p&gt;总之是修好了。终于可以继续写其它的 syscall 了。还没想好 poll 要怎么写，orz。&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Mar 2019 16:40:00 +0800</pubDate>
        <link>https://jiege.ch/programming/2019/03/04/implement-network-syscalls/</link>
        <guid isPermaLink="true">https://jiege.ch/programming/2019/03/04/implement-network-syscalls/</guid>
        
        <category>rcore</category>
        
        <category>rust</category>
        
        <category>os</category>
        
        <category>e1000</category>
        
        <category>syscall</category>
        
        <category>msi</category>
        
        <category>pci</category>
        
        <category>interrupt</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>每周分享第 13 期</title>
        <description>&lt;p&gt;今天还是早点发吧&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rust concurrent work-stealing queue 可能可以放到调度器里用 https://github.com/kinghajj/deque&lt;/li&gt;
  &lt;li&gt;支持信用卡/时间等格式信息的输入控件 https://github.com/nosir/cleave.js&lt;/li&gt;
  &lt;li&gt;Rust 的简单 http server https://github.com/svenstaro/miniserve&lt;/li&gt;
  &lt;li&gt;Coroutines &amp;amp; Modules Added For C++20 http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Coroutines-Modules-CPP20&lt;/li&gt;
  &lt;li&gt;Implementing TCP in Rust (part 1) https://www.youtube.com/watch?v=bzja9fQWzdA&lt;/li&gt;
  &lt;li&gt;一个类似 Vuetify 的框架 https://buefy.org/&lt;/li&gt;
  &lt;li&gt;systemd tmpfiles.d 用于管理特定的临时文件夹 https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html&lt;/li&gt;
  &lt;li&gt;获取 ASN 信息的 API https://bgpview.docs.apiary.io/#reference/0/asn-prefixes/view-asn-prefixes&lt;/li&gt;
  &lt;li&gt;Rust getter/setter generation https://github.com/Hoverbear/getset&lt;/li&gt;
  &lt;li&gt;Golang 1.12 发布：TLS 1.3 http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Golang-1.12-Released&lt;/li&gt;
  &lt;li&gt;一个笑话 https://redd.it/aux77g&lt;/li&gt;
  &lt;li&gt;Rust 的 STM https://github.com/mtak-/swym&lt;/li&gt;
  &lt;li&gt;自动同步视频和字幕 https://github.com/smacke/subsync&lt;/li&gt;
  &lt;li&gt;用于快速开发的 http server https://zeroserver.io/&lt;/li&gt;
  &lt;li&gt;一个自动加载的 http server https://github.com/tapio/live-server&lt;/li&gt;
  &lt;li&gt;用 markdown 写 presentation 在线版 https://github.com/gnab/remark&lt;/li&gt;
  &lt;li&gt;解决 excel 读取 nodejs 生成的 csv 的乱码问题 https://github.com/f2e-journey/xueqianban/issues/34&lt;/li&gt;
  &lt;li&gt;清华的 Rust OS https://github.com/oscourse-tsinghua/rcore_plus&lt;/li&gt;
  &lt;li&gt;GPU 加速的 JS http://gpu.rocks/&lt;/li&gt;
  &lt;li&gt;小型的 k8s 实现： k3s https://k3s.io/&lt;/li&gt;
  &lt;li&gt;粗暴的隧道，极低的带宽，有啥用 https://0day.work/performance-of-iodine-over-dns-over-https/&lt;/li&gt;
  &lt;li&gt;Caddy 乘着 Go 官方支持的车轻松加入 TLS1.3 家族 https://github.com/mholt/caddy/pull/2399/files&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 01 Mar 2019 08:39:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/03/01/weekly-sharing-13/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/03/01/weekly-sharing-13/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>使用 Rust 实现 e1000 驱动</title>
        <description>&lt;p&gt;是的。我又来了。上次做了&lt;a href=&quot;/programming/2019/01/29/virtio-drivers-implementation/&quot;&gt;使用 Rust 实现 VirtIO 驱动&lt;/a&gt;之后，继续往 rCore 加更多的驱动支持。由于现在工作重点是 x86_64 下的 syscall 实现，所以选了一个比较有代表性的驱动 e1000 来实现。其实如果只是为了在 qemu 下运行的话，其实只需要支持 virtio-pci 就可以了，原来的 virtio-net 直接拿来用就可以了。&lt;/p&gt;

&lt;p&gt;为什么挑 e1000 呢，一方面是支持的设备多，有真实硬件可以测试，虽然不一定要裸机上跑，但是可以通过 PCI passthrough 来测试驱动的正确性。另一方面是网上的资料比较多，有现成的简单的代码可以借鉴。这次主要借鉴了三个来源：一是 Biscuit OS， 二是 Judge Duck OS ，三是 Linux 。&lt;/p&gt;

&lt;p&gt;首先是实现了简单的 PCI 总线的枚举，然后找到对应的设备，激活，并且找到映射的内存地址，然后把原来 C 语言的实现搬运到 Rust 中。这个过程中遇到很多坑，例如一开始我以为内核里 pa 和 va 是一个固定的偏移，不过多次尝试后才发现这个假设只对 riscv 平台里的实现成立。&lt;/p&gt;

&lt;p&gt;这个时候就可以收到外面给进来的以太网帧了。接着就是把它接入到 smoltcp 的 API 中。但是发包又不工作了，尝试了很多次，各种方法也不行。其中特别要提到的就是 qemu 的 tracing API ，它在帮助我调试之前的 virtio 驱动和这次的 e1000(e) 驱动中起到了很大的帮助。不过，遗憾的是，发包相关的代码里的 trace 不足以让我找到问题的所在，我只好采用了最后一招：&lt;/p&gt;

&lt;p&gt;下载 QEMU ，自己改，然后自己编译。&lt;/p&gt;

&lt;p&gt;这个方法果然很有效啊，经过简单的几个修改，很快就定位到问题所在了，原来就是一个简单的错误，把 4 写成了 8 。这个过程中我也发现 QEMU 在 incremental build 的时候似乎会 segfault ，我没管这么多，反正编译也不慢，次数也不多，每次 clean 再 build 问题也不大。&lt;/p&gt;

&lt;p&gt;接下来要摸索 82559 的网卡适用情况如何，因为有一个真实的 82559 网卡可供测试。另一方面就要开始考虑 socket 那一套 syscall 怎么做了。&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Feb 2019 20:30:00 +0800</pubDate>
        <link>https://jiege.ch/programming/2019/02/26/network-driver-again/</link>
        <guid isPermaLink="true">https://jiege.ch/programming/2019/02/26/network-driver-again/</guid>
        
        <category>rcore</category>
        
        <category>rust</category>
        
        <category>os</category>
        
        <category>e1000</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>每周分享第 12 期</title>
        <description>&lt;p&gt;看脑王迟到了（&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rust Embedded Graphics 库 https://github.com/jamwaffles/embedded-graphics&lt;/li&gt;
  &lt;li&gt;Wireguard for macOS https://lists.zx2c4.com/pipermail/wireguard/2019-February/003853.html&lt;/li&gt;
  &lt;li&gt;Wireguard-go UI https://github.com/aequitas/macos-menubar-wireguard&lt;/li&gt;
  &lt;li&gt;T2 逆向 https://duo.com/labs/research/apple-t2-xpc&lt;/li&gt;
  &lt;li&gt;脑王剪辑 https://www.bilibili.com/video/av43972717&lt;/li&gt;
  &lt;li&gt;dram 推荐的工具 notion.so&lt;/li&gt;
  &lt;li&gt;带授权和审计的 sudo https://github.com/square/sudo_pair&lt;/li&gt;
  &lt;li&gt;rust 的 manpage 生成器 https://github.com/rust-cli/man&lt;/li&gt;
  &lt;li&gt;才发现 Github 有 Project 功能 https://help.github.com/en/articles/about-project-boards&lt;/li&gt;
  &lt;li&gt;rust 的 elf/macho 生成 https://github.com/m4b/faerie&lt;/li&gt;
  &lt;li&gt;rust 的 elf/macho/pe 读取 https://github.com/m4b/goblin&lt;/li&gt;
  &lt;li&gt;rust 的 glob 实现 https://github.com/rust-lang-nursery/glob&lt;/li&gt;
  &lt;li&gt;基于 BoringSSL 的 rust 加密库 https://mundane.googlesource.com/mundane&lt;/li&gt;
  &lt;li&gt;从 linux 交叉编译到 macOS 的方法 https://github.com/tpoechtrager/osxcross&lt;/li&gt;
  &lt;li&gt;cargo-deb 后又有了 cargo-rpm https://github.com/RustRPM/cargo-rpm&lt;/li&gt;
  &lt;li&gt;自带 diff 的 assert_eq 宏 https://github.com/colin-kiegel/rust-pretty-assertions&lt;/li&gt;
  &lt;li&gt;Learn Helper 4.0 哈利版发布 https://chrome.google.com/webstore/detail/learn-helper/mdehapphdlihjjgkhmoiknmnhcjpjall&lt;/li&gt;
  &lt;li&gt;检查依赖中存在的 unsafe https://github.com/anderejd/cargo-geiger&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 23 Feb 2019 07:24:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/02/23/weekly-sharing-12/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/02/23/weekly-sharing-12/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>预告 Learn-Project 4.0 版</title>
        <description>&lt;p&gt;不知道大家听没听说过 Google Chrome 有个插件，叫做 Learn Project ，是一个网络学堂的改良前端。不过，随着网络学堂的不断更（xia）新（gao），它已经不再适用于现在的版本。于是，哈利橙（@Harry_Chen）决定利用寒假时间，在今天（2.17）之前完成 Learn Project 4.0 的开发。为什么叫 4.0 呢，因为哈利橙课程的 GPA 众数是 4.0 。这个版本采用先进的 React 框架编写（Vue 塞高），使用了 Material Ui 作为界面框架（这我觉得可以），目前的一个参考图（图源哈利橙）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/learn_project.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看那满眼的高分数，希望 Learn Project 4.0 能在 flag 倒下之前完成。&lt;/p&gt;

</description>
        <pubDate>Sun, 17 Feb 2019 13:04:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/02/17/learn-project-preview/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/02/17/learn-project-preview/</guid>
        
        <category>learnproject</category>
        
        <category>preview</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>每周分享第 11 期</title>
        <description>&lt;p&gt;对不起迟到了（&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Google 的 fuzzing 家族又来了个新成员 太喜欢造轮子了 https://github.com/google/clusterfuzz&lt;/li&gt;
  &lt;li&gt;有趣的文本生成工具 https://github.com/TheBerkin/rant&lt;/li&gt;
  &lt;li&gt;又一个 side channel attack https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2019/february/downgrade-attack-on-tls-1.3-and-vulnerabilities-in-major-tls-libraries/&lt;/li&gt;
  &lt;li&gt;来自 Prof Fan 的一个 cf dns 权限限制分发的工具 https://github.com/ProfFan/cloudflare-proxy-rs&lt;/li&gt;
  &lt;li&gt;部署到了我的博客的小工具 大家体会到了吗 https://instant.page/&lt;/li&gt;
  &lt;li&gt;教育性质的 C on web https://vasyop.github.io/miniC-hosting/&lt;/li&gt;
  &lt;li&gt;激活清华教育版 win10? –&amp;gt; dig +short TXT win10.harrychen.xyz&lt;/li&gt;
  &lt;li&gt;windows95 v2.0 发布（误 https://github.com/felixrieseberg/windows95/releases/tag/v2.0.0&lt;/li&gt;
  &lt;li&gt;已经部署到 tuna 的 rustup-mirror crate https://github.com/jiegec/rustup-mirror&lt;/li&gt;
  &lt;li&gt;Forth 也能有 http 服务端框架 http://www.1-9-9-1.com/&lt;/li&gt;
  &lt;li&gt;bartender 的开源替代 实测可用 https://github.com/Mortennn/Dozer&lt;/li&gt;
  &lt;li&gt;给不支持 pac 的客户端在 http proxy 上套一层 https://github.com/williambailey/pacproxy&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 16 Feb 2019 00:42:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/02/16/weekly-sharing-11/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/02/16/weekly-sharing-11/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
  </channel>
</rss>
