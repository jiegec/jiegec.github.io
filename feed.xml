<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杰哥的{运维,编程}小笔记</title>
    <description>This is the personal blog of Jiajie Chen.
</description>
    <link>https://jiegec.me/</link>
    <atom:link href="https://jiegec.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 29 Dec 2018 10:29:19 +0800</pubDate>
    <lastBuildDate>Sat, 29 Dec 2018 10:29:19 +0800</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>每周分享第 4 期</title>
        <description>&lt;p&gt;咕了更长的时间。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Header only JIT assembler https://github.com/herumi/xbyak 想找个时间玩玩 JIT&lt;/li&gt;
  &lt;li&gt;Rust 实现的 Babel 转译 https://github.com/swc-project/swc&lt;/li&gt;
  &lt;li&gt;又一个瀑布流实现 https://github.com/e-oj/Magic-Grid&lt;/li&gt;
  &lt;li&gt;马上可以体验 HTTP/3 的库 https://github.com/djc/quinn&lt;/li&gt;
  &lt;li&gt;Logitech Spotlight Presentation 挺好用的 配套软件的安装过程和使用都挺好的&lt;/li&gt;
  &lt;li&gt;Server side canvas https://github.com/Automattic/node-canvas&lt;/li&gt;
  &lt;li&gt;边看 youtube tutorial 边写代码 https://yourepl.tumblr.com/post/180936303347/announcing-yourepl&lt;/li&gt;
  &lt;li&gt;又一个 PostgreSQL 网页版客户端 https://github.com/sosedoff/pgweb&lt;/li&gt;
  &lt;li&gt;有趣的 CSS Layout 学习方法 http://cssgridgarden.com/#en http://flexboxfroggy.com/&lt;/li&gt;
  &lt;li&gt;pipenv 也有过 easter egg https://github.com/pypa/pipenv/issues/786 不过影比 antd 这个事情好多了&lt;/li&gt;
  &lt;li&gt;Web 太强了 啥都能做 https://whatwebcando.today/&lt;/li&gt;
  &lt;li&gt;来自娄晨耀的清真 DNS 解决方案 https://github.com/Chenyao2333/freedns-go&lt;/li&gt;
  &lt;li&gt;快速的 tldr 实现 https://github.com/dbrgn/tealdeer&lt;/li&gt;
  &lt;li&gt;MongoDB Data Source for Grafana 可以用 就是 aggregation 不大容易写对 https://github.com/JamesOsgood/mongodb-grafana&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Fish 3.0 发布 “fish now supports &amp;amp;&amp;amp; (like and),&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt;(like or), and ! (like not), for better migration from POSIX-compliant shells (#4620).”&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 29 Dec 2018 10:23:00 +0800</pubDate>
        <link>https://jiegec.me/misc/2018/12/29/weekly-sharing-4/</link>
        <guid isPermaLink="true">https://jiegec.me/misc/2018/12/29/weekly-sharing-4/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>《加速奔向2019》小程序编写和运营回顾</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;关注清华的同学可能知道，昨天，“清华大学”公众号发了一篇名为&lt;a href=&quot;https://mp.weixin.qq.com/s/Kk7FuTefipW4HpQkoF72WA&quot;&gt;《2018，我们共芳华丨@THUers 致相伴一年的你，请查收这份心意》&lt;/a&gt;的推送，内容大概就是，有那么100个新年台历礼品要送出去，大家如果想要的话，就扫描小程序。小程序模仿了火车抢票的病毒式营销的模式，要求大家分享到群聊或者朋友圈，让别人给自己加速，加速到 2019 的前 100 名即可填写信息领取奖品。&lt;/p&gt;

&lt;p&gt;然后大家就在推送里看到了我。就酱。&lt;/p&gt;

&lt;h2 id=&quot;开始&quot;&gt;开始&lt;/h2&gt;

&lt;p&gt;这件事情据说策划了有一段时间了，只是因为各种原因一直没有做，最后这个锅就路由到了我的头上。一开始说就是个加速小程序，逻辑很简单，但后来逐渐发现需求越来越多，主要是界面上的，动画上的，还有一些非技术因素的功能，嗯。这其实算是一个不大好的软件工程案例。&lt;/p&gt;

&lt;h2 id=&quot;过程&quot;&gt;过程&lt;/h2&gt;

&lt;h3 id=&quot;线上的问题与解决方案&quot;&gt;线上的问题与解决方案&lt;/h3&gt;

&lt;p&gt;然后就是上线了。大概是昨天（2018-12-27）中午的时候推送发出去，很快流量就开始来了。很快，在朋友圈看到有同学在转发了，也有人反映说，网络有点卡，加载资源有点多。我去机器上用 iftop 看了下，流量大概是 250Mb/s ，没打到千兆。我一开始看了下，CPU 和内存占用都良好，以为是网络出口限制的问题，就想着没办法了，就这样吧，扛过去再说。不过，忽然有了转机。&lt;/p&gt;

&lt;p&gt;TUNA 技术群里，忽然有人在讨论 SOMAXCONN 的问题，我想到，会不会是有些参数没开够大，导致了性能瓶颈，又受到啊荣的点拨，立马调整了这些变量：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;net.core.somaxconn
fs.file-max
net.core.netdev_max_backlog
net.ipv4.tcp_max_syn_backlog
nginx: worker_rlimit_nofile
nginx: event.worker_connections
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;很快带宽从 200Mb/s 左右打到了 400Mb/s 多，在 iftop 中看到的峰值接近 600Mb/s，见下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-12-27-20-35-21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;事后回来看，发现配置一套科学的监控系统真的很有用，如 TCP 连接的状态图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-12-27-20-33-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里最高的黄线代表的是 TIME_WAIT ，意味着很多的 TCP 连接都卡在了等待资源上，而一当我修改参数以后，立刻就降了下来，ESTBALISHED 的连接有了显著的提升。这个问题从另一个图也可以明地看出：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-12-27-20-38-07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个图是 TCP Handshake Issues ，可以看到无论是 activeopen 还是 passiveopen ，都很高，意味着这里无论是发还是收都遇到了问题。而修改参数以后，这些问题立马得到了很好的改善。&lt;/p&gt;

&lt;p&gt;其实这些本应该在上线前做好的，但我低估了清华大学的影响力，没有做好相应的准备，还是在优秀的运维人员的指点下得到了较好的效果。&lt;/p&gt;

&lt;h3 id=&quot;用户数据分析&quot;&gt;用户数据分析&lt;/h3&gt;

&lt;p&gt;当然了，除了 Grafana+InfluxDB+Telegraf 这一套监控系统，我们也部署了 ElasticSearch+Logstash+Kibana ，只不过我们还是用 Grafana 做了 ElasticSearch 的前端了。通过对 Nginx 日志的分析，我们得到了这些关键的数据（从12-26 12:00到12-27 12:00一天时间）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-12-27-20-48-48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-12-27-20-49-00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了这些，还有很多有趣的数据，例如用户里北京的最多，也可以大致地看出各个地方网络和手机的普及程度；用户使用的手机的机型里前几名都是苹果的，从单项占领了排名的前很多位，之后则是华为小米OPPO等，但总体上反而是安卓用户更多。&lt;/p&gt;

&lt;p&gt;微信小程序官方也提供了一些数据统计可供参考。例如页面的访问次数信息，一共大约有二十多万次，打开小程序有十三万多次，访问人数是五万多，还有女性用户比男性用户多等等。这个时代，有数据确实能够得到许多有价值的判断。&lt;/p&gt;

&lt;h2 id=&quot;反思&quot;&gt;反思&lt;/h2&gt;

&lt;p&gt;这次学到了很多东西，验证了监控系统的必要性，它能够实时看到服务的运行状态并进行调优，事后也可以回过头来进行进一步的分析和总结。不足的是，遇到大客户量的时候，静态资源就应该用 CDN 服务而不应该自己搭建，成本不高而且用户体验会很好。这次后端在数据库操作都用了原子操作，没有出现大的问题，但如果以后遇到更复杂的需求的时候就没有这么容易了。&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Dec 2018 19:56:00 +0800</pubDate>
        <link>https://jiegec.me/software/2018/12/27/wxapp-recap/</link>
        <guid isPermaLink="true">https://jiegec.me/software/2018/12/27/wxapp-recap/</guid>
        
        <category>wechat</category>
        
        <category>wxapp</category>
        
        <category>grafana</category>
        
        <category>elk</category>
        
        <category>mongodb</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>每周分享第 3 期</title>
        <description>&lt;p&gt;因为 DDL ，咕了一小会。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;被 Windows 保存为 Unicode 文件坑了 BOM 配上 UTF-16 太难受了&lt;/li&gt;
  &lt;li&gt;Github 最近添加了很多 Issue 方面的更新，如 Pin 和 Delete&lt;/li&gt;
  &lt;li&gt;Grafana 真的很好看很好用 推荐大家自己配一套监控系统&lt;/li&gt;
  &lt;li&gt;Microsoft Remote Desktop Beta 新增了 AVC Codec 有意思 不知道啥时候上 HEVC&lt;/li&gt;
  &lt;li&gt;发现一个很好玩的用 Rust 写的网页游戏 https://sandspiel.club/#&lt;/li&gt;
  &lt;li&gt;Python Pattern Matching https://github.com/santinic/pampy&lt;/li&gt;
  &lt;li&gt;大新闻：MIPS Open Source 了 https://www.eetimes.com/document.asp?doc_id=1334087&lt;/li&gt;
  &lt;li&gt;GRPC 调试的 GUI https://github.com/uw-labs/bloomrpc 对标 Postman&lt;/li&gt;
  &lt;li&gt;酷炫的屏幕保护 for Mac https://github.com/JohnCoates/Aerial&lt;/li&gt;
  &lt;li&gt;WPF 开源了 不知道啥时候支持 *nix https://github.com/dotnet/wpf&lt;/li&gt;
  &lt;li&gt;分享欢乐 https://github.com/dotnet/wpf&lt;/li&gt;
  &lt;li&gt;分享欢乐x2 https://lore.kernel.org/patchwork/patch/628142/&lt;/li&gt;
  &lt;li&gt;谷歌近日到处上线了 Material Design 2.0 感觉风格不大习惯&lt;/li&gt;
  &lt;li&gt;veonim/veonim 的 Tag 里有 #meme-driven-development 太好笑了&lt;/li&gt;
  &lt;li&gt;巨硬开源了自己的 UEFI 和 TianoCore EDK 竞争 https://blogs.windows.com/buildingapps/2018/12/19/%e2%80%afintroducing-project-mu/&lt;/li&gt;
  &lt;li&gt;Github 的 GDPR 完全体上线 https://blog.github.com/2018-12-19-download-your-data/&lt;/li&gt;
  &lt;li&gt;ZFSonLinux 要统治 ZFS 世界的节奏 https://lists.freebsd.org/pipermail/freebsd-current/2018-December/072422.html&lt;/li&gt;
  &lt;li&gt;VBScript 真的是太多漏洞了 满目疮痍 https://googleprojectzero.blogspot.com/2018/12/on-vbscript.html&lt;/li&gt;
  &lt;li&gt;原来取名真的这么草率的吗 我也想买一个了 https://www.solidot.org/story?sid=59028&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 22 Dec 2018 00:19:00 +0800</pubDate>
        <link>https://jiegec.me/misc/2018/12/22/weekly-sharing-3/</link>
        <guid isPermaLink="true">https://jiegec.me/misc/2018/12/22/weekly-sharing-3/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>每周分享第 2 期</title>
        <description>&lt;p&gt;继续，继续。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用代码呈现硬件实现对性能的影响，值得一读 &lt;a href=&quot;https://github.com/Kobzol/hardware-effects&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;发现了一个蛮少见的编码标准 AVS2 ，才发现是中国主导的 &lt;a href=&quot;https://github.com/pkuvcl/xavs2&quot;&gt;编码器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;linux.org 的 DNS 被篡改了，认准 kernel.org 即可&lt;/li&gt;
  &lt;li&gt;一个处理器的电路的在线可视化 &lt;a href=&quot;https://www.theregister.co.uk/2015/11/28/arm1_visualized/&quot;&gt;ARM1 visualized&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;WASM 家庭现已加入 Nginx &lt;a href=&quot;https://www.wasmjit.org/blog/nginx-on-wasmjit.html&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;用 .bat 编写汇编语言 &lt;a href=&quot;https://github.com/mniip/BOOTSTRA/tree/master/BATAS#batas&quot;&gt;mnnip/BOOTSTRA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Gitlab 挺香的，兹瓷 git-lfs ，还可以自己给自己的项目配一个 ci runner&lt;/li&gt;
  &lt;li&gt;LaTeX 的 subfigure 之间如果有空行，就真的换了一行，所以同一行的 subfigure 不要换行&lt;/li&gt;
  &lt;li&gt;Rocket 4.0 出了，看起来不错，要是作者更新一下 CS140e 就好了 &lt;a href=&quot;https://github.com/SergioBenitez/Rocket/blob/v0.4.0/CHANGELOG.md#version-040-dec-06-2018&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;装机必备，查询 Arch Wiki &lt;a href=&quot;https://www.npmjs.com/package/arch-wiki-man&quot;&gt;arch-wiki-man&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;LaTeX 里 \newcommand 时，如果文件名有多个 ‘.’ ，要特殊处理 &lt;a href=&quot;https://tex.stackexchange.com/questions/10574/includegraphics-dots-in-filename&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;RunAsDate for *nix &lt;a href=&quot;https://github.com/wolfcw/libfaketime&quot;&gt;wolfcw/libfaketime&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;用数据库做数据分析似乎是个不错的选择&lt;/li&gt;
  &lt;li&gt;Canvas 配合 globalCompositionOperation 能做到不少东西&lt;/li&gt;
  &lt;li&gt;才知道有 Time Machine over SMB 这种操作 &lt;a href=&quot;https://support.apple.com/zh-cn/guide/mac-help/mchl31533145/mac&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;mDNS repeater 把两个子网的 mDNS 打通 &lt;a href=&quot;https://github.com/kennylevinsen/mdns-repeater&quot;&gt;kennylevinsen/mdns-repeater&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Office 2019 for Mac 的 December 2018 release 添加了 Dark Mode ，并且也支持了 Continuity Camera ，直接从手机拍照导入&lt;/li&gt;
  &lt;li&gt;Gitlab serverless 发布，期待 &lt;a href=&quot;https://about.gitlab.com/2018/12/11/introducing-gitlab-serverless/&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;用 NAS 作为 Time Machine 备份盘的方法 &lt;a href=&quot;https://kirb.me/2018/03/24/using-samba-as-a-time-machine-network-server.html&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;研究了一下，Time Machine over SMB 在 macOS 里的表现形式是 apfs 里写了一个 sparse bundle ，bundle 里面是 HFS+ 。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 14 Dec 2018 15:55:00 +0800</pubDate>
        <link>https://jiegec.me/misc/2018/12/14/weekly-sharing-2/</link>
        <guid isPermaLink="true">https://jiegec.me/misc/2018/12/14/weekly-sharing-2/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>配置 homebridge-mi-aqara 并添加为 telegraf 的数据源</title>
        <description>&lt;p&gt;最近有了设备，想把设备拿到的数据都导一份存到 influxdb 里，但是目前找到的只有 &lt;a href=&quot;https://github.com/YinHangCode/homebridge-mi-aqara&quot;&gt;homebridge-mi-aqara&lt;/a&gt; 可以访问并拿到数据，然后它又提供了 mqtt 的数据获取方案，于是自己写了个脚本去读取这些数据。&lt;/p&gt;

&lt;p&gt;首先当然是配置一下 homebridge-mi-aqara ，按照网上的教程来，这个不难。然后本地开一个 MQTT Broker （如 mosquitto ），配置为本地监听，然后我编写了&lt;a href=&quot;https://github.com/jiegec/tools/blob/master/telegraf-mi-aqara.py&quot;&gt;脚本 telegraf-mi-aqara.py&lt;/a&gt; ，使用前需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install paho-mqtt&lt;/code&gt;，并且按照实际路径修改一下内容 。验证能够跑起来后，写一个 telegraf 配置：&lt;/p&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[[inputs.exec]]&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/usr/bin/python3 /path/to/telegraf-mi-aqara.py&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5s&quot;&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;data_format&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;influx&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在就可以读取到各项信息，如温度，湿度，是否开门，开关用电情况等等。&lt;/p&gt;

&lt;p&gt;2018-12-16 更新：&lt;/p&gt;

&lt;p&gt;研究了一下&lt;a href=&quot;https://github.com/aqara/aiot-gateway-local-api&quot;&gt;绿米网关局域网通信协议&lt;/a&gt;，得到了&lt;a href=&quot;https://github.com/jiegec/tools/blob/master/telegraf-mi-aqara-v2.py&quot;&gt;第二个版本 telegraf-mi-aqara-v2.py&lt;/a&gt;，它与第一版的区别是，第一版是主动向网关读取信息，而这一版则是监听组播包，等待网关发消息。这个脚本负责把读取到的组播信息发送到 MQTT ，再让 telegraf 从 MQTT 里解析 JSON 消息，写入数据库。Telegraf 配置如下：&lt;/p&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[[inputs.mqtt_consumer]]&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;servers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;tcp://127.0.0.1:1883&quot;]&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;qos&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;connection_timeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;30s&quot;&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;topics&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;/telegraf-mi-aqara&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;persistent_session&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;client_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Telegraf&quot;&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;data_format&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;json&quot;&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;json_string_fields&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;tag_keys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;short_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于设备不全，有些字段可能不完整。如果大家自己要用的话，可能需要自行修改一下。&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Dec 2018 20:07:00 +0800</pubDate>
        <link>https://jiegec.me/software/2018/12/13/homebridge-mi-aqara-telegraf/</link>
        <guid isPermaLink="true">https://jiegec.me/software/2018/12/13/homebridge-mi-aqara-telegraf/</guid>
        
        <category>homebridge</category>
        
        <category>mi</category>
        
        <category>aqara</category>
        
        <category>telegraf</category>
        
        <category>influxdb</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Grafana 可视化实践：清华大学 2018 年度人物评选</title>
        <description>&lt;p&gt;最近这段时间，清华内部正在投票选出今年的年度人物，想到最近刚好在学习使用 Grafana+InfluxDB+Telegraf 全家桶，于是想着能不能写个爬虫把数据都拿下来，然后用 Grafana 画出来，就可以得到一个投票随时间变化的趋势。爬虫很简单，就是登录，获取页面信息，然后按照 InfluxDB 的输入格式进行输出即可。代码放在了 &lt;a href=&quot;https://github.com/jiegec/student-tsinghua-vote18&quot;&gt;jiegec/student-tsinghua-vote18&lt;/a&gt; 下。&lt;/p&gt;

&lt;p&gt;接着就是用 Grafana 进行可视化，大概得到了这样一个曲线：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vote18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为保护隐私，把名字隐去了。实际上的投票时间是从 12-3 号开始到 12-7号结束，但由于宿舍停电的原因所以采样的点在半夜的时候都没有，所以看起来有点奇怪，但还是能够反应总体的趋势的。比如可以看到前两名很早就一马当先，而后一直遥遥领先，下面的选手则排名变动很大，特别是截止前最后一段时间，大家都在拼命拉票，可见大家都是 DDL 选手啊。如果对上面这个图求个导，看看变化率的话：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vote18-speed.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这显现出了很有意思的一个趋势，就是每天十二点左右都有一个高峰期，然后在零点前大概熄灯附近的时间也是一个高峰期，另外就是截止前最后的抢票阶段，大家都在疯狂拉票，从中午拉到最后时刻。由于停电的原因，在零点附近的数据都比较的鬼畜，不过影响不大，趋势一目了然。&lt;/p&gt;

&lt;p&gt;Grafana 真香！期望可以学到更多高端的查询语法和可视化的骚操作，现在有很多东西不知道该怎么可视化，比较苦恼，不知道大家有没有什么经验可以分享。&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Dec 2018 23:03:00 +0800</pubDate>
        <link>https://jiegec.me/software/2018/12/07/grafana-visualize-vote18/</link>
        <guid isPermaLink="true">https://jiegec.me/software/2018/12/07/grafana-visualize-vote18/</guid>
        
        <category>grafana</category>
        
        <category>influxdb</category>
        
        <category>telegraf</category>
        
        <category>nodejs</category>
        
        <category>scraper</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>每周分享第 1 期</title>
        <description>&lt;p&gt;向阮一峰学习，把自己在一周里看到的有趣的事情分享一下。不过形式就比较随意了。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;最近写 MongoDB + NodeJS 学到的新操作：$addToSet $nin $ne Mongoose 的 setDefaultsOnInsert&lt;/li&gt;
  &lt;li&gt;Promise 真香，真好用&lt;/li&gt;
  &lt;li&gt;几天前惠老师还在说 “IE, The best Chrome Downloader Downloader, ever” 今天 EdgeHTML 就宣告死亡了&lt;/li&gt;
  &lt;li&gt;WPF, Windows Forms 和 WinUI 开源了，mono 这是要凉？ &lt;a href=&quot;https://blogs.windows.com/buildingapps/2018/12/04/announcing-open-source-of-wpf-windows-forms-and-winui-at-microsoft-connect-2018/&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;有人逆向了 FGPA 的 bitstream 格式，希望 FPGA 有朝一日可以进入 开源时代？ &lt;a href=&quot;https://github.com/mmicko/prjtang&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;造机的 baseline 就决定是 &lt;a href=&quot;https://github.com/Icenowy/ice-risc&quot;&gt;它&lt;/a&gt; 了&lt;/li&gt;
  &lt;li&gt;根据 AST 炼丹判相似度还行，好奇它跨语言的预测水准 &lt;a href=&quot;https://code2vec.org/&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;可视化 h264 nalu 的软件 &lt;a href=&quot;https://github.com/shi-yan/H264Naked&quot;&gt;H264Naked&lt;/a&gt; （做的好糙啊，想交 pr）&lt;/li&gt;
  &lt;li&gt;ffprobe -show_packets 和 ffprobe -show_frame 真好用&lt;/li&gt;
  &lt;li&gt;发现一个解决 ArchLinux 滚内核后无法 modprobe 的&lt;a href=&quot;https://github.com/saber-nyan/kernel-modules-hook&quot;&gt;方案&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;010 Editor 和 Hex Fiend 是二进制分析的神器啊… Kaitai 还有待加油&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/roman01la/cljss&quot;&gt;CSS-in-JS for ClojureScript&lt;/a&gt; 真香 有空可以试试用 ClojureScript 写前端&lt;/li&gt;
  &lt;li&gt;Safari Technology Preview 71 加入了 Web Authentication 这是要支持 U2F 的节奏？&lt;/li&gt;
  &lt;li&gt;Grafana+InfluxDB+Telegraf 真科学，随手写了一些简单的 Telegraf 的 input plugin&lt;/li&gt;
  &lt;li&gt;给 010 Editor 写了俩 .bt 文件，见我上一篇博客&lt;/li&gt;
  &lt;li&gt;海思 cc 居然支持 ASan : /opt/hisi-linux/x86-arm/arm-hisiv600-linux/arm-hisiv600-linux-gnueabi/lib/a7/libasan.so&lt;/li&gt;
  &lt;li&gt;遇到了 &lt;a href=&quot;https://github.com/influxdata/telegraf/issues/4881&quot;&gt;设备名有空格导致 telegraf 读取 S.M.A.R.T. 信息失败&lt;/a&gt; 的锅，不过似乎没人修&lt;/li&gt;
  &lt;li&gt;看到了一个很有意思的 Interview Pass Rate 关于使用的编辑器的调查，很有意思 &lt;a href=&quot;https://triplebyte.com/blog/editor-report-the-rise-of-visual-studio-code&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;发现一个 JSX 的替代品，用了 Template literal syntax ，挺好的 &lt;a href=&quot;https://github.com/developit/htm&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;也不知道能不能坚持下来，就这样了，发布（逃&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Dec 2018 15:57:00 +0800</pubDate>
        <link>https://jiegec.me/misc/2018/12/07/weekly-sharing/</link>
        <guid isPermaLink="true">https://jiegec.me/misc/2018/12/07/weekly-sharing/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>编写 010 Editor 的 FLV Template</title>
        <description>&lt;p&gt;最近在做 FLV 和 H264 方面的研究，研究了很多标准和文档，然后用 010 Editor 对着文件进行分析。这个软件真的很好用，对研究二进制结构用处特别大。不过它自带的 FLV.bt 功能不是很好，我对它加上了 H264(AVC) 的部分支持，放在了 &lt;a href=&quot;https://github.com/jiegec/tools/blob/master/myFLV.bt&quot;&gt;myFLV.bt&lt;/a&gt; 里。我也写了 H264 的解析，不过效率不高，大文件要卡好一会。&lt;/p&gt;

&lt;p&gt;除此之外，很多格式，010 editor 都有支持，特别好用，它的解析器语法也很好写。&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Dec 2018 20:33:00 +0800</pubDate>
        <link>https://jiegec.me/software/2018/12/06/010-editor-flv-parsing/</link>
        <guid isPermaLink="true">https://jiegec.me/software/2018/12/06/010-editor-flv-parsing/</guid>
        
        <category>010editor</category>
        
        <category>macos</category>
        
        <category>parser</category>
        
        <category>binary</category>
        
        <category>hex</category>
        
        <category>flv</category>
        
        <category>h264</category>
        
        <category>avc</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>配置 Grafana+InfluxDB+Telegraf 并添加 MIIO 数据来源</title>
        <description>&lt;p&gt;之前一直想配一个监控系统，现在有机会了，就简单配了一下。发现真的特别简单，用 Homebrew 安装这三个软件并且都跑起来，然后稍微动一下配置，就可以得到可观的效果了。&lt;/p&gt;

&lt;p&gt;然后想利用 miio 配置一下，把宿舍的空气净化器各项参数拿到，以 Telegraf 的插件形式定时上报，然后通过 Grafana 进行可视化。插件放在了 &lt;a href=&quot;https://github.com/jiegec/tools/blob/master/telegraf/miio.py&quot;&gt;jiegec/tools&lt;/a&gt; 下，就是一个简单的 Python 脚本。配置方法如下：&lt;/p&gt;

&lt;p&gt;编辑 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/etc/telegraf.d/miio.conf&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[[inputs.exec]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;[&quot;/usr/local/bin/python3 /Volumes/Data/tools/telegraf/miio.py MIID_HERE&quot;]&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5s&quot;&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;data_format&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;influx&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;默认了 miio 路径为 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/miio&lt;/code&gt; 。&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Nov 2018 20:33:00 +0800</pubDate>
        <link>https://jiegec.me/software/2018/11/27/grafana-influxdb-telegraf-miio/</link>
        <guid isPermaLink="true">https://jiegec.me/software/2018/11/27/grafana-influxdb-telegraf-miio/</guid>
        
        <category>macos</category>
        
        <category>grafana</category>
        
        <category>influxdb</category>
        
        <category>telegraf</category>
        
        <category>miio</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>强制启用 Google Chrome 原生的 Dark Mode</title>
        <description>&lt;p&gt;Mojave 的 Dark Mode 真香，但是 Google Chrome 并不会随着系统的 Dark Mode 设置变化，所以 NightOwl 只能让部分软件按照时间变更 Dark/Light Mode 。一番搜索，发现其实 Google Chrome 其实已经&lt;a href=&quot;https://chromium-review.googlesource.com/c/chromium/src/+/1238796&quot;&gt;支持了 Dark Mode&lt;/a&gt;，但只能设置，不能按照系统的状态自动切换，命令如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ open -a Google\ Chrome --args --force-dark-mode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后就可以看到 Google Chrome 已经是 Dark Mode 了。但可惜并不能自动切换。&lt;/p&gt;

</description>
        <pubDate>Tue, 27 Nov 2018 00:17:00 +0800</pubDate>
        <link>https://jiegec.me/software/2018/11/27/enable-dark-mode-google-chrome/</link>
        <guid isPermaLink="true">https://jiegec.me/software/2018/11/27/enable-dark-mode-google-chrome/</guid>
        
        <category>macos</category>
        
        <category>darkmode</category>
        
        <category>googlechrome</category>
        
        
        <category>software</category>
        
      </item>
    
  </channel>
</rss>
