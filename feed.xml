<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jiegec's blog</title>
    <description>This is the personal blog of Jiege Chen.
</description>
    <link>https://jiegec.github.io/</link>
    <atom:link href="https://jiegec.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 17 Oct 2017 17:02:30 +0800</pubDate>
    <lastBuildDate>Tue, 17 Oct 2017 17:02:30 +0800</lastBuildDate>
    <generator>Jekyll v3.5.1</generator>
    
      <item>
        <title>关于scanf和scanf_s的问题</title>
        <description>&lt;p&gt;最近作为程设基础的小教员，收到很多同学的求助，关于&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s&lt;/code&gt;的问题已经遇到了两次，特此写一篇博文来叙述一下这个问题。&lt;/p&gt;

&lt;p&gt;一开始，有同学问我，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char a;
scanf(&quot;%c&quot;,&amp;amp;a);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;为什么会报错？我说，vs默认强制要求使用scanf_s函数，于是我建议这位同学把这个错误信息关掉了。嗯。经过百度，这位同学的问题解决了。&lt;/p&gt;

&lt;p&gt;后来，又有一位同学问我，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char a;
scanf_s(&quot;%c&quot;,&amp;amp;a);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;程序为什么会崩溃？我想了想，如果scanf_s和scanf是一样的行为，这段代码是没问题的。但scanf_s既然安全，必然是在字符串方面做了处理。这里的char*勉强也算一个？网上一查，果然，应该写成&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s(&quot;%c&quot;,&amp;amp;a,1);&lt;/code&gt;，字符串则要写成&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s(&quot;%s&quot;,str,sizeof(str))&lt;/code&gt;，来保证缓冲区不会溢出。&lt;/p&gt;

&lt;p&gt;但是，这样解决这个问题又面临着不同的选择：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;学习&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;的不同，把所有&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;换成&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s&lt;/code&gt;并做相应的修改。
这样当然符合了语言进化的潮流，也会让vs闭嘴。但是，scanf_s只有在C11标准中有，而且，根据&lt;a href=&quot;http://en.cppreference.com/w/c/io/fscanf&quot;&gt;cpprefrence.com上关于scanf的描述&lt;/a&gt;，只有在&lt;code class=&quot;highlighter-rouge&quot;&gt;__STDC_LIB_EXT1__&lt;/code&gt;被定义且在&lt;code class=&quot;highlighter-rouge&quot;&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/code&gt;之前&lt;code class=&quot;highlighter-rouge&quot;&gt;#define __STDC_WANT_LIB_EXT1__&lt;/code&gt;才能确保使用&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s&lt;/code&gt;能使用，当然在vs较新版本中是默认可以使用的。但是，程设基础的作业是要丢到oj上的，而oj上的编译器不一定支持这些，所以这个选项不行。&lt;/li&gt;
  &lt;li&gt;坚持用&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;，自己按照题目要求保证缓冲区不溢出，同时让vs闭嘴。
网上已有&lt;a href=&quot;https://www.cnblogs.com/wangduo/p/5554465.html&quot;&gt;教程&lt;/a&gt;，已经讲的很全面了，大家可以根据这个教程把vs教训一顿。为了能在oj里跑，建议用里面的方法五到八。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以后再遇到这个问题，我就丢这个连接上来就好了咯。yeah！&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Oct 2017 16:46:40 +0800</pubDate>
        <link>https://jiegec.github.io/programming/2017/10/17/on-scanf-and-scanf_s/</link>
        <guid isPermaLink="true">https://jiegec.github.io/programming/2017/10/17/on-scanf-and-scanf_s/</guid>
        
        <category>VS</category>
        
        <category>C</category>
        
        <category>CS</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>一个搞笑的伸展树的Wiki</title>
        <description>&lt;p&gt;光哲同学在群里发了这个链接，特别搞笑，特此分享：
&lt;a href=&quot;https://baike.baidu.com/history/%E4%BC%B8%E5%B1%95%E6%A0%91/105576656&quot;&gt;伸展树 - 百度百科&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;伸展树（Spaly Tree，事实上在国内 IO 界常常被称作 Tajarn 发明的 Spaly Tree，与此同理的还有 Terap），也叫分裂树，是一种二叉排序树，它能在 O(n log n) 内完成插入、查找和删除操作。它由 Daniel Sleator 和 Robert Tajarn 发现，后者对其进行了改造。它的优势可以不断伸展枝干（一个月 2~3 次），从而使树冠散开，提高光合作用效率。木材坚硬，是重要的经济类乔木。与其他植物不同的是，伸展树可以进行出芽生殖，繁殖速度极快。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 16 Oct 2017 19:59:30 +0800</pubDate>
        <link>https://jiegec.github.io/others/2017/10/16/a-funny-wiki-of-splay-tree/</link>
        <guid isPermaLink="true">https://jiegec.github.io/others/2017/10/16/a-funny-wiki-of-splay-tree/</guid>
        
        <category>algorithm</category>
        
        <category>wiki</category>
        
        
        <category>others</category>
        
      </item>
    
      <item>
        <title>回顾昨天的酒井知识竞赛</title>
        <description>&lt;p&gt;昨天晚上，我作为蒟蒻组的一员在三教2102参加了酒井知识竞赛，并因此鸽掉了TUNA和Lab mU的迎新会hhh，不过运气好拿到了二等奖的好成绩，获得Paperang便携打印机一台。中间遇到了好一些网络方面的知识，这对于没有记忆OSI模型的我无疑有巨大的难度。下面是几道比较有印象的题目：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;以下哪个不是编程语言？
A. J B. L C. R D. K
这题不难，R肯定对，J见过，K略微有印象，选B&lt;/li&gt;
  &lt;li&gt;IPv6链路层地址解析的协议是？
A. ARP B. Neighbour Solicitation C. Neighbour Advertisement D. Neighbour Discovery
对于一个没研究过IPv6的人来说这只好蒙了。。。ARP是IPv4时代的，ND(Neighbour Discovery则是IPv6时代的新产物，把ARP和ICMP等协议的功能都包含了进来，并且有新的功能。之前样题里还出现过问IPv6中去掉了Unicast,Anycast,Multicast,Broadcast中的哪种，答案是Broadcast。&lt;/li&gt;
  &lt;li&gt;第一个把程序错误称做bug的是？
 选项太多忘了，答案是Grace Hopper，因为当时一只飞蛾意外飞入了机器导致了故障，后来慢慢就流传下来了。&lt;/li&gt;
  &lt;li&gt;以下不是网络操作系统的是？
 A. Windows NT B. OS/2 warp C. DOS D. Netware
 当时我没见过D，于是就选了。。。然后就挂了，Netware是Novell开发的系统，OS/2 warp当然是历史悠久的系统啦，而DOS=Disk Operating System所以没有“网络”二字。。。晕倒&lt;/li&gt;
  &lt;li&gt;以下是用作局域网的协议是？
 A. TCP/IP B. IPX/SPX C. NetBEUI D. RS-232-C
 TCP/IP当然不仅限于局域网，RS-232-C是接口，当时蒙了B结果就对了，白白拿了50分哈哈哈。IPX/SPX是Novell设计用在Netware系统上的局域网协议，NetBEUI则是NetBIOS的一个历史遗留的一个“别称”。&lt;/li&gt;
  &lt;li&gt;姚期智的夫人给谁取了中文名？
 当然是Donald Ervin Knuth啦！高德纳万岁！&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 16 Oct 2017 10:36:28 +0800</pubDate>
        <link>https://jiegec.github.io/others/2017/10/16/review-on-yesterdays-jiujing-adi-contest/</link>
        <guid isPermaLink="true">https://jiegec.github.io/others/2017/10/16/review-on-yesterdays-jiujing-adi-contest/</guid>
        
        <category>ADI</category>
        
        <category>Tsinghua</category>
        
        <category>CS</category>
        
        
        <category>others</category>
        
      </item>
    
      <item>
        <title>华为随行 WiFi 2 mini开箱</title>
        <description>&lt;p&gt;前段时间，我办了4G升级，移动送了一张副卡，有不少免费的流量，由于我的手机是iPhone不支持双卡，老爸就借了我他的GlocalMe当成MiFi来用，不过呢GlocalMe放在这里当然是大材小用了，所以我就网购了华为随行WiFi 2 mini，把我的副卡装上一个壳放进去就可以了！把这个MiFi插入电脑，会弹出一个目录，里面有Win/Mac的驱动安装文件，打开后在网络设置里就有HUAWEI_MOBILE的连接了，并自动打开网络配置界面。设置一下SSID和密码，就能正常使用了，手机连上也很正常，手机上可以下载HUAWEI HiLink来配置MiFi，挺爽的。随赠的有联通的上网卡，不过我准备在北京买个上网卡放MiFi里面用。&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Aug 2017 20:38:00 +0800</pubDate>
        <link>https://jiegec.github.io/unboxing/2017/08/08/huawei-portable-wifi/</link>
        <guid isPermaLink="true">https://jiegec.github.io/unboxing/2017/08/08/huawei-portable-wifi/</guid>
        
        <category>huawei</category>
        
        <category>wifi</category>
        
        
        <category>unboxing</category>
        
      </item>
    
      <item>
        <title>Farewell, Flash</title>
        <description>&lt;p&gt;It’s time to say goodbye to Flash.
&lt;a href=&quot;https://news.ycombinator.com/item?id=14848786&quot;&gt;HN #1&lt;/a&gt;
&lt;a href=&quot;https://news.ycombinator.com/item?id=14854618&quot;&gt;HN #2&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Jul 2017 22:02:20 +0800</pubDate>
        <link>https://jiegec.github.io/news/2017/07/26/farewell-flash/</link>
        <guid isPermaLink="true">https://jiegec.github.io/news/2017/07/26/farewell-flash/</guid>
        
        <category>flash</category>
        
        <category>adobe</category>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>In macOS Sierra, Karabiner-Elements finally support complex modifications</title>
        <description>&lt;p&gt;In favor of this &lt;a href=&quot;https://github.com/tekezo/Karabiner-Elements/commit/f37815dcf58fd1e91d3cd3d154c2ed3749a2510e&quot;&gt;commit&lt;/a&gt;, Karabiner-Elements now supports the much welcomed yet long-lost feature, namely complex modifications that enable users to trigger complex keypress.&lt;/p&gt;

&lt;p&gt;Now I can achieve this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;If I press &amp;lt;Enter&amp;gt;, then:
1. If &amp;lt;Enter&amp;gt; is pressed alone, then send &amp;lt;Enter&amp;gt;.
2. If &amp;lt;Enter&amp;gt; is pressed along with other keys, then send &amp;lt;Control&amp;gt; + Other.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By adding this code to ~/.config/karabiner/karabiner.json :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;complex_modifications&quot;: {
    &quot;rules&quot;: [
        {
            &quot;manipulators&quot;: [
                {
                    &quot;description&quot;: &quot;Change return_or_enter to left_control. (Post return_or_enter if pressed alone)&quot;,
                    &quot;from&quot;: {
                        &quot;key_code&quot;: &quot;return_or_enter&quot;,
                        &quot;modifiers&quot;: {
                            &quot;optional&quot;: [
                                &quot;any&quot;
                            ]
                        }
                    },
                    &quot;to&quot;: [
                        {
                            &quot;key_code&quot;: &quot;left_control&quot;
                        }
                    ],
                    &quot;to_if_alone&quot;: [
                        {
                            &quot;key_code&quot;: &quot;return_or_enter&quot;
                        }
                    ],
                    &quot;type&quot;: &quot;basic&quot;
                }
            ]
        }
    ]
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;in one of profiles.&lt;/p&gt;

&lt;p&gt;Note: the snippet above is adopted from &lt;a href=&quot;https://github.com/tekezo/Karabiner-Elements/blob/61df6ff04ce34adf1cbb00cfd7c5dd49c14c0889/examples/spacebar_to_shift.json&quot;&gt;this example&lt;/a&gt;. You can explore more examples since the GUI is not updated accordingly yet.&lt;/p&gt;

&lt;p&gt;Important: Until NOW (2017-06-15), this feature is only implemented in beta versions of Karabiner-Elements (at least 0.91.1).&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Jun 2017 17:22:20 +0800</pubDate>
        <link>https://jiegec.github.io/system/2017/06/15/macos-sierra-karabiner-finally-support-complex-modifications/</link>
        <guid isPermaLink="true">https://jiegec.github.io/system/2017/06/15/macos-sierra-karabiner-finally-support-complex-modifications/</guid>
        
        <category>macOS Sierra</category>
        
        <category>karabiner-elements</category>
        
        <category>keyboard</category>
        
        
        <category>system</category>
        
      </item>
    
      <item>
        <title>等时圆</title>
        <description>&lt;p&gt;最近学校老师讲了一下等时圆。先从这个题讲起：&lt;/p&gt;

&lt;p&gt;在同一个地方向不同倾角光滑斜面用不同的初速度上滑，到达最高点所用时间相等，求最高点的轨迹是什么？&lt;/p&gt;

&lt;p&gt;A. 直线 B. 椭圆 C. 抛物线 D. 圆&lt;/p&gt;

&lt;p&gt;当时做这个题目的第一想法是把x和y座标表示出来：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{1}{2}gsin\theta{}t^2=l,
y=lsin\theta,
x=ycot\theta&lt;/script&gt;

&lt;p&gt;然后就傻眼了，并得不到x与y的关系式。当然了可以求出几个点，强行带入二次曲线通式求解。不过想了想还是用解析几何的方法去做吧：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{1}{2}gsin\theta{}t^2=\sqrt{x^2+y^2},
sin\theta=\frac{y}{\sqrt{x^2+y^2}}&lt;/script&gt;

&lt;p&gt;这么一代入，显然是圆。但既然这是物理题，可不可以用物理方法做呢？&lt;/p&gt;

&lt;p&gt;可以，这就是等时圆。&lt;/p&gt;

&lt;p&gt;啥叫等时圆？&lt;/p&gt;

&lt;p&gt;等时圆就是，在一个光滑圆环上选择任意一点，让一个小球从这个点沿着光滑直杆到圆的最低点，无论这个点在哪里（最低点不算哈），时间都是一样的。怎么证明？&lt;/p&gt;

&lt;p&gt;很简单：设小球与最低点连线与数值方向上夹角为&lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt;，那么&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;s=2Rcos\theta,
\frac{1}{2}gcos\theta{}t^2=s&lt;/script&gt;

&lt;p&gt;你会发现t与&lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt;无关。证明完毕。&lt;/p&gt;

&lt;p&gt;其实也可以倒过来：从圆的最高点往各个方向下滑，到达圆周时间相等。&lt;/p&gt;

&lt;p&gt;好了，到此为止内容都没什么，但你会想问这和前面那道题目有什么关系呢？这怎么等时圆？重力往下诶。运动可是往右上方。&lt;/p&gt;

&lt;p&gt;Here comes the black magic :)&lt;/p&gt;

&lt;p&gt;我们考虑向下滑到最低点的那个等时圆，在这个圆周上滑倒最低点的时间都相等。好，我们把这个图沿着竖直方向旋转180度形成一个球，想想这个球上每一个点到最低点时间是不是也一样？那么考虑逆过程，让小球从斜面上滑下来，我对刚才的球体再竖着切一刀，得到的平面不就是题目中那个吗？得证。&lt;/p&gt;

&lt;p&gt;当然了最好能有动画说明，限于本人时间问题暂时不提供 ^_^&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Aug 2016 16:03:41 +0800</pubDate>
        <link>https://jiegec.github.io/science/2016/08/02/dengshiyuan/</link>
        <guid isPermaLink="true">https://jiegec.github.io/science/2016/08/02/dengshiyuan/</guid>
        
        <category>physics</category>
        
        
        <category>science</category>
        
      </item>
    
      <item>
        <title>A Good Way To Show Git Diff For Compressed Files</title>
        <description>&lt;p&gt;I have found a good way to track changes in .gz files:
Add these to ~/.gitconfig:&lt;/p&gt;

&lt;div class=&quot;language-config highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;]
  &lt;span class=&quot;n&quot;&gt;attributesFile&lt;/span&gt; = ~/.&lt;span class=&quot;n&quot;&gt;gitattributes&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;zip&quot;&lt;/span&gt;]
  &lt;span class=&quot;n&quot;&gt;textconv&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;unzip&lt;/span&gt; -&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gz&quot;&lt;/span&gt;]
  &lt;span class=&quot;n&quot;&gt;textconv&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;gzcat&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bz2&quot;&lt;/span&gt;]
  &lt;span class=&quot;n&quot;&gt;textconv&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;bzcat&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xz&quot;&lt;/span&gt;]
  &lt;span class=&quot;n&quot;&gt;textconv&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;xzcat&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tar&quot;&lt;/span&gt;]
  &lt;span class=&quot;n&quot;&gt;textconv&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt; -&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt; -&lt;span class=&quot;n&quot;&gt;xf&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tar-bz2&quot;&lt;/span&gt;]
  &lt;span class=&quot;n&quot;&gt;textconv&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt; -&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt; -&lt;span class=&quot;n&quot;&gt;xjf&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tar-gz&quot;&lt;/span&gt;]
  &lt;span class=&quot;n&quot;&gt;textconv&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt; -&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt; -&lt;span class=&quot;n&quot;&gt;xzf&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tar-xz&quot;&lt;/span&gt;]
  &lt;span class=&quot;n&quot;&gt;textconv&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt; -&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt; -&lt;span class=&quot;n&quot;&gt;xJf&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;

[&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;odf&quot;&lt;/span&gt;]
  &lt;span class=&quot;n&quot;&gt;textconv&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;odt2txt&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pdf&quot;&lt;/span&gt;]
  &lt;span class=&quot;n&quot;&gt;textconv&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;pdfinfo&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bin&quot;&lt;/span&gt;]
  &lt;span class=&quot;n&quot;&gt;textconv&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;hexdump&lt;/span&gt; -&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; -&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And these to ~/.gitattributes:&lt;/p&gt;

&lt;div class=&quot;language-config highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*.&lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt;
*.&lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;bz2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;bz2&lt;/span&gt;
*.&lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;gz&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;gz&lt;/span&gt;
*.&lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;xz&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;xz&lt;/span&gt;
*.&lt;span class=&quot;n&quot;&gt;bz2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;bz2&lt;/span&gt;
*.&lt;span class=&quot;n&quot;&gt;gz&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;gz&lt;/span&gt;
*.&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt;
*.&lt;span class=&quot;n&quot;&gt;xz&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;xz&lt;/span&gt;

*.&lt;span class=&quot;n&quot;&gt;odf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;odf&lt;/span&gt;
*.&lt;span class=&quot;n&quot;&gt;odt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;odf&lt;/span&gt;
*.&lt;span class=&quot;n&quot;&gt;odp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;odf&lt;/span&gt;
*.&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt;
*.&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;
*.&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;
*.&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then you can &lt;code class=&quot;highlighter-rouge&quot;&gt;git diff&lt;/code&gt; for .gz files.&lt;/p&gt;

&lt;p&gt;Codes are adapted from https://gist.github.com/RsrchBoy/11197048
and https://git.wiki.kernel.org/index.php/GitTips#Getting_a_plain-text_diff and https://gist.github.com/kbaird/2654115.&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jul 2016 14:46:41 +0800</pubDate>
        <link>https://jiegec.github.io/programming/2016/07/23/a-good-way-to-show-git-diff-for-compressed-files/</link>
        <guid isPermaLink="true">https://jiegec.github.io/programming/2016/07/23/a-good-way-to-show-git-diff-for-compressed-files/</guid>
        
        <category>git</category>
        
        <category>compression</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>The End Of Senior Two</title>
        <description>&lt;p&gt;Finally the end of Senior 2 arrives. I’m on the way to Senior 3.
The summer vacation is rather short which is really common
in China. These days I have been diving into Emacs by subscribing
both emacs and emacs-devel mailing list. It contributes to my
English as well. I can learn a lot of new words and expression
thanks to the nice and convenient feature of looking up a word
in iOS.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Jul 2016 18:44:22 +0800</pubDate>
        <link>https://jiegec.github.io/life/2016/07/07/the-end-of-senior-two/</link>
        <guid isPermaLink="true">https://jiegec.github.io/life/2016/07/07/the-end-of-senior-two/</guid>
        
        <category>coding</category>
        
        <category>study</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>Exciting New Software Updates</title>
        <description>&lt;p&gt;Just got a piece of great news: GHC 8.0.1 is out! See the announcement [here][http://article.gmane.org/gmane.comp.lang.haskell.ghc.devel/11928].&lt;/p&gt;

&lt;p&gt;So excited! And Emacs 25 release will be out soon. Using Emacs 25.0.94 now. Many new features available. See [this][http://puntoblogspot.blogspot.com/2016/05/emacs-251-news.html] for more information.&lt;/p&gt;

&lt;p&gt;Recently I have finally started to use mu4e and gnus. What makes it truly great is that they integrate org, bbdb and so on.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 May 2016 07:47:16 +0800</pubDate>
        <link>https://jiegec.github.io/programming/2016/05/22/exciting-new-software-updates/</link>
        <guid isPermaLink="true">https://jiegec.github.io/programming/2016/05/22/exciting-new-software-updates/</guid>
        
        <category>haskell</category>
        
        <category>ghc</category>
        
        <category>emacs</category>
        
        <category>emacs25</category>
        
        <category>ghc8</category>
        
        
        <category>programming</category>
        
      </item>
    
  </channel>
</rss>
