<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杰哥的{运维,编程}小笔记</title>
    <description>This is the personal blog of Jiajie Chen.
</description>
    <link>https://jiege.ch/</link>
    <atom:link href="https://jiege.ch/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 29 Jan 2019 21:27:23 +0800</pubDate>
    <lastBuildDate>Tue, 29 Jan 2019 21:27:23 +0800</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>使用 Rust 实现 VirtIO 驱动</title>
        <description>&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;

&lt;p&gt;最近在给 rCore 添加驱动层的支持。一开始是想做网卡驱动，后来发现， &lt;code class=&quot;highlighter-rouge&quot;&gt;qemu-system-riscv32&lt;/code&gt; 只支持如下的驱动：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# qemu-system-riscv32 -device help&lt;/span&gt;

Storage devices:
name &lt;span class=&quot;s2&quot;&gt;&quot;scsi-cd&quot;&lt;/span&gt;, bus SCSI, desc &lt;span class=&quot;s2&quot;&gt;&quot;virtual SCSI CD-ROM&quot;&lt;/span&gt;
name &lt;span class=&quot;s2&quot;&gt;&quot;scsi-disk&quot;&lt;/span&gt;, bus SCSI, desc &lt;span class=&quot;s2&quot;&gt;&quot;virtual SCSI disk or CD-ROM (legacy)&quot;&lt;/span&gt;
name &lt;span class=&quot;s2&quot;&gt;&quot;scsi-hd&quot;&lt;/span&gt;, bus SCSI, desc &lt;span class=&quot;s2&quot;&gt;&quot;virtual SCSI disk&quot;&lt;/span&gt;
name &lt;span class=&quot;s2&quot;&gt;&quot;virtio-blk-device&quot;&lt;/span&gt;, bus virtio-bus
name &lt;span class=&quot;s2&quot;&gt;&quot;virtio-scsi-device&quot;&lt;/span&gt;, bus virtio-bus

Network devices:
name &lt;span class=&quot;s2&quot;&gt;&quot;virtio-net-device&quot;&lt;/span&gt;, bus virtio-bus

Input devices:
name &lt;span class=&quot;s2&quot;&gt;&quot;virtconsole&quot;&lt;/span&gt;, bus virtio-serial-bus
name &lt;span class=&quot;s2&quot;&gt;&quot;virtio-keyboard-device&quot;&lt;/span&gt;, bus virtio-bus
name &lt;span class=&quot;s2&quot;&gt;&quot;virtio-mouse-device&quot;&lt;/span&gt;, bus virtio-bus
name &lt;span class=&quot;s2&quot;&gt;&quot;virtio-serial-device&quot;&lt;/span&gt;, bus virtio-bus
name &lt;span class=&quot;s2&quot;&gt;&quot;virtio-tablet-device&quot;&lt;/span&gt;, bus virtio-bus
name &lt;span class=&quot;s2&quot;&gt;&quot;virtserialport&quot;&lt;/span&gt;, bus virtio-serial-bus

Display devices:
name &lt;span class=&quot;s2&quot;&gt;&quot;virtio-gpu-device&quot;&lt;/span&gt;, bus virtio-bus

Misc devices:
name &lt;span class=&quot;s2&quot;&gt;&quot;loader&quot;&lt;/span&gt;, desc &lt;span class=&quot;s2&quot;&gt;&quot;Generic Loader&quot;&lt;/span&gt;
name &lt;span class=&quot;s2&quot;&gt;&quot;virtio-balloon-device&quot;&lt;/span&gt;, bus virtio-bus
name &lt;span class=&quot;s2&quot;&gt;&quot;virtio-crypto-device&quot;&lt;/span&gt;, bus virtio-bus
name &lt;span class=&quot;s2&quot;&gt;&quot;virtio-rng-device&quot;&lt;/span&gt;, bus virtio-bus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以要实现网卡的话，只能实现这里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;virtio-net-device&lt;/code&gt; ，而 VirtIO 驱动之间有很多共通的地方，于是顺带把 &lt;code class=&quot;highlighter-rouge&quot;&gt;gpu&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;mouse&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;blk&lt;/code&gt; 实现了。&lt;/p&gt;

&lt;h1 id=&quot;第一个驱动-virtio-net-的实现&quot;&gt;第一个驱动 &lt;code class=&quot;highlighter-rouge&quot;&gt;virtio-net&lt;/code&gt; 的实现&lt;/h1&gt;

&lt;p&gt;首先想到并且实现了的是网卡驱动， &lt;code class=&quot;highlighter-rouge&quot;&gt;virtio-net&lt;/code&gt; 。最开始的时候，为了简单，只开了一块缓冲区，每次同时只收/发一个包。首先拿了 &lt;a href=&quot;https://github.com/jiegec/device_tree-rs&quot;&gt;device_tree-rs&lt;/a&gt; 读取 bbl 传过来的 dtb 地址，找到各个 &lt;code class=&quot;highlighter-rouge&quot;&gt;virtio_mmio&lt;/code&gt; 总线以后按照设备类型找到对应的设备。然后就是对着 virtio 的标准死磕，同时看 Linux 和 QEMU 的源代码辅助理解，最后终于是成功地把收/发的两个 virtqueue 配置好，并且在中断的时候处理收到的包。这个时候，可以成功地输出收到的包的内容，并且发出指定内容的包了。效果就是看到了这样的图片（图中网站是 &lt;a href=&quot;https://hpd.gasmi.net/&quot;&gt;Hex Packet Decoder&lt;/a&gt;）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/arp_packet.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;基于此，写了一个简单的以太网帧的解析，ARP 的回复和 ping 的回复（直接修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;ECHO_REQUEST&lt;/code&gt; 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;ECHO_REPLY&lt;/code&gt; 然后更新 CHECKSUM），实现了最基本的 ping ：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/arping.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ping.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;显卡驱动&quot;&gt;显卡驱动&lt;/h1&gt;

&lt;p&gt;网卡可以用了，很自然地会想到做一些其他的 virtio 驱动，第一个下手的是显卡。显卡和网卡的主要区别是，网卡是两个 queue 异步作，而在显卡驱动上则是在一个 queue 上每次放一输入一输出的缓冲区来进行交互，具体步骤在 virtio 标准中也写得很清楚。在这个过程中， QEMU 的 Tracing 功能帮了很大的忙，在调试 desc 的结构上提供了很多帮助。&lt;/p&gt;

&lt;p&gt;然后就在 framebuffer 上花了一个 mandelbrot ：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/mandelbrot.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 @shankerwangmiao 的建议下，调了一下颜色：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/mandelbrot2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样就好看多了。&lt;/p&gt;

&lt;h1 id=&quot;http-服务器&quot;&gt;HTTP 服务器&lt;/h1&gt;

&lt;p&gt;在 @wangrunji0408 的提醒和建议下，我开始把一个 Rust 实现的网络栈 &lt;a href=&quot;https://github.com/m-labs/smoltcp&quot;&gt;smoltcp&lt;/a&gt; 集成到代码中来。这个库中，对底层 Interface 的要求如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;当可以发包并且可以收包的时候，返回一收一发两个 Token ，并在使用的时候调用指定的函数。&lt;/li&gt;
  &lt;li&gt;当可以发包的时候，返回一个发的 Token ，含义同上。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这是我第一次看到这种抽象，而且也没有特别明确的文档表示，这个 Token 代表什么，我应该提供什么。我直接按照一些已有的例子，照着实现了一把。过程中遇到了 ownership 的问题，通过 Arc 和 Mutex 解决了，然后又出现了死锁的问题，调了半天才调出来。&lt;/p&gt;

&lt;p&gt;接着按照 somltcp 的样例写一个简单的 udp echo server 和（假的） tcp 服务器：&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// simple http server&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockets&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TcpSocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.is_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.can_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;write!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;HTTP/1.1 200 OK&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Server: rCore&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Content-Length: 13&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Content-Type: text/html&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Connection: Closed&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Hello, world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;虽然很粗暴，但是 work 了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/http.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;鼠标驱动和块设备驱动&quot;&gt;鼠标驱动和块设备驱动&lt;/h1&gt;

&lt;p&gt;接着自然是往 QEMU 支持的剩下的 virtio 设备里下手。首先下手的是鼠标驱动。这次遇到了新的问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;由于缓冲的存在，每次只有在 EV_SYN 的时候才会一次性把若干个事件放入队列中。&lt;/li&gt;
  &lt;li&gt;一个事件就要一个 desc chain ，意味着直接串足够大小的 buffer 到同一个 desc chain 中并不能工作。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;于是只好痛定思痛照着 Linux 内核的实现把完整的 Virtqueue 的操作实现了，并且顺带把前面的网卡和显卡的驱动也更新了。果然，每次都是三个左右的事件（X，Y，SYN）插入，然后根据这些事件就可以计算出当前的鼠标位置了。&lt;/p&gt;

&lt;p&gt;至于块设备，遇到的则是别的坑。看标准的时候，本以为就一个结构体 virtio_blk_req 就搞完了，但仔细读了读，标准似乎没讲清楚，读的时候是怎么传，写的时候又是怎么传。于是在这里卡了很久，从 Tracing 信息可以看出，QEMU 一直认为我提供的 buffer 大小不正确，多次实验之后发现，给 device 写入的 buffer 大小为 block size 的整数倍加一，这个一存放的是状态，其他则是数据，真的太坑了。&lt;/p&gt;

&lt;p&gt;有了块设备以后，就可以替换掉原来的内嵌 SFS 的方案，转为直接从块设备读 SFS 文件。这里我没想明白 lazy_static 和 ownership 的一些问题，最后也则是@wangrunji0408 的帮助我解决了。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;用 Rust 写出一个可以工作的驱动并不难，只要知道 unsafe 怎么用，但是一旦需要深入思考这里应该用什么安全的方法封装的时候，才发现是个很困难的事情。现在虽然工作了，但是很多地方线程并不安全，代码也不够简洁高效，以后还有很多需要改进的地方。&lt;/p&gt;

&lt;h1 id=&quot;see-also&quot;&gt;See also&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oasis-tcs/virtio-spec&quot;&gt;Virtio Spec&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 29 Jan 2019 17:23:00 +0800</pubDate>
        <link>https://jiege.ch/programming/2019/01/29/virtio-drivers-implementation/</link>
        <guid isPermaLink="true">https://jiege.ch/programming/2019/01/29/virtio-drivers-implementation/</guid>
        
        <category>driver</category>
        
        <category>rcore</category>
        
        <category>linux</category>
        
        <category>virtio</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>THUWC 2019 小记</title>
        <description>&lt;p&gt;前段时间，以工作人员的身份参加了在广州二中举办的 THUWC 2019 。作为一只菜鸡 OI 选手，我没想到过我会以另一种身份参与一个我本来没能参与的活动，就好像以暑校辅导员的身份参与清华暑校一样。&lt;/p&gt;

&lt;p&gt;提早来到了赛场，布置场地，然后把机考的各个流程都过一遍，记住各个细节，各方面都有条不紊地进行，看着第一场前同学们特别激动地冲入考场，到最后一场同学们考完后的释放，在同学们身上看到了很多不成熟的样子，看到了兴奋想要和同伴分享的喜悦，也看到了不甘的眼泪。&lt;/p&gt;

&lt;p&gt;希望各位强大的选手们可以来到九字班、零字班乃至一字班，享受课改的乐趣吧嘿嘿嘿&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Jan 2019 11:00:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/01/25/thuwc-2019/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/01/25/thuwc-2019/</guid>
        
        <category>thuwc</category>
        
        <category>oi</category>
        
        <category>wc</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>每周分享第 8 期</title>
        <description>&lt;p&gt;这周更加忙了，所以内容不多。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rust 1.32.0 is out 其中 dbg macro 挺有意思 https://blog.rust-lang.org/2019/01/17/Rust-1.32.0.html&lt;/li&gt;
  &lt;li&gt;在线的 hex packet decoder https://hpd.gasmi.net/&lt;/li&gt;
  &lt;li&gt;Rust Cheatsheet https://www.breakdown-notes.com/make/load/rust_cs_canvas/true&lt;/li&gt;
  &lt;li&gt;Rust tcp/ip stack https://github.com/m-labs/smoltcp&lt;/li&gt;
  &lt;li&gt;逆向 CAJ 的转换器 https://github.com/JeziL/caj2pdf&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 25 Jan 2019 10:58:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/01/25/weekly-sharing-8/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/01/25/weekly-sharing-8/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>每周分享第 7 期</title>
        <description>&lt;p&gt;这周比较忙，所以内容不多。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在嵌入式系统里跑 Lisp 可以在串口开个 repl 在线调试 http://www.ulisp.com/show?3J&lt;/li&gt;
  &lt;li&gt;Pattern matching for C++ https://github.com/solodon4/Mach7&lt;/li&gt;
  &lt;li&gt;一个商业版的类似 ASan 的产品 不知道效果如何 https://stensal.com/&lt;/li&gt;
  &lt;li&gt;用 Python 写 Cocoa 界面还行 https://dawes.wordpress.com/2017/08/17/python-with-a-cocoa-gui-on-macos/&lt;/li&gt;
  &lt;li&gt;Rust 实现的权威搜索引擎 https://github.com/toshi-search/Toshi&lt;/li&gt;
  &lt;li&gt;Rust Embedonomicon 讲述 Rust 在 bare metal 下的一些神奇操作 https://docs.rust-embedded.org/embedonomicon/preface.html&lt;/li&gt;
  &lt;li&gt;发现另一个基于 Github 的 Disqus 替代品 https://utteranc.es/&lt;/li&gt;
  &lt;li&gt;挺好的一部讲 Rust 生命周期的小书 http://cglab.ca/~abeinges/blah/too-many-lists/book/README.html&lt;/li&gt;
  &lt;li&gt;跨平台的 Ctrl-C 处理 for Rust https://github.com/Detegr/rust-ctrlc&lt;/li&gt;
  &lt;li&gt;用 Rust 写 stm32 上程序所需要的库 https://github.com/stm32-rs/stm32-rs&lt;/li&gt;
  &lt;li&gt;go 语言编写的基于 fuse 的加密文件系统 https://github.com/rfjakob/gocryptfs&lt;/li&gt;
  &lt;li&gt;Rust 的图片解析库 https://github.com/PistonDevelopers/image&lt;/li&gt;
  &lt;li&gt;用 BPF 做 API 解析和过滤 https://github.com/cilium/cilium&lt;/li&gt;
  &lt;li&gt;学到了 x86 又一个指令集 bmi2 https://github.com/jordanbray/chess&lt;/li&gt;
  &lt;li&gt;FoundationDB 推出 Record Layer 名字十分贴切 https://github.com/foundationdb/fdb-record-layer/&lt;/li&gt;
  &lt;li&gt;一个开源的教室电脑监控系统 https://github.com/veyon/veyon&lt;/li&gt;
  &lt;li&gt;DNS flag day https://dnsflagday.net/&lt;/li&gt;
  &lt;li&gt;Rust stable 1.32.0 发布 https://blog.rust-lang.org/2019/01/17/Rust-1.32.0.html dbg 宏好评&lt;/li&gt;
  &lt;li&gt;各 MacBook 的 Linux 支持情况一览 https://github.com/Dunedan/mbp-2016-linux&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 18 Jan 2019 21:10:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/01/18/weekly-sharing-7/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/01/18/weekly-sharing-7/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>实现 VSCodeVim 中支持中文分词的单词移动</title>
        <description>&lt;p&gt;最近用 VS Code 写中文 LaTeX 比较多，但是编辑起来总是比较麻烦，不能用各种带 w 的 motion ，不然整行都没了。于是 @xalanq 提出能不能拿一个 JS 的分词库，魔改一下 VSCode Vim 来得到同样效果？答案是可以的。&lt;/p&gt;

&lt;p&gt;最后代码在 &lt;a href=&quot;https://github.com/jiegec/VSCodeVimChinese&quot;&gt;jiegec/VSCodeVimChinese&lt;/a&gt; 里，还没有合并到上游的打算。不定期根据上游发版本同步更新，在 Github Release 里发布 vsix 文件，目前版本为 v1.0.1。在 VS Code 里 &lt;code class=&quot;highlighter-rouge&quot;&gt;Extensions: Install from VSIX...&lt;/code&gt; 即可安装。&lt;/p&gt;

&lt;p&gt;经过对代码的研究，发现对 motion w 的处理都是通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;getWordLeft&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;getWordRight&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;getCurrentWordEnd&lt;/code&gt; 完成的。于是我修改了这三个函数，根据原来的返回值把字符串喂给分词器，再返回的新的位置。一开始用的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;nodejieba&lt;/code&gt; ，但是因为需要用到 &lt;code class=&quot;highlighter-rouge&quot;&gt;node-gyp&lt;/code&gt; 遇到了 Node 版本不兼容的问题，于是换了一个纯 Node 的实现 &lt;code class=&quot;highlighter-rouge&quot;&gt;node-segment&lt;/code&gt; ，就完成了这个功能。&lt;/p&gt;

</description>
        <pubDate>Wed, 16 Jan 2019 00:15:00 +0800</pubDate>
        <link>https://jiege.ch/software/2019/01/16/vscode-vim-chinese-word-motion/</link>
        <guid isPermaLink="true">https://jiege.ch/software/2019/01/16/vscode-vim-chinese-word-motion/</guid>
        
        <category>vscode</category>
        
        <category>vim</category>
        
        <category>vscodevim</category>
        
        <category>chinese</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Grafana 中可视化 Ping 时把 Timeout 显示为指定值</title>
        <description>&lt;p&gt;刚遇到一个需求，就是用 Telegraf 收集 ping 信息，然后在 Grafana 里可视化当前的延迟，如果超时了，就显示一个指定值，如 999 ，这样就可以放到一个 Gauge 里面可视化了。但是，问题在于，Telegraf 的 ping input 在超时的时候只会在 result_code 里写一个 &lt;a href=&quot;https://github.com/influxdata/telegraf/tree/master/plugins/inputs/ping&quot;&gt;2&lt;/a&gt; ，其他项都是空的，因而如果直接用 GROUP BY time(interval) fill(999) 会导致最新的一个数据经常得到 999 。这意味着需要根据 “result_code” 来进行区分 Timeout 的情况。最后捣腾了很久，得到了这个方案：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; select &quot;average_response_ms&quot; * (2 - &quot;result_code&quot;) / 2 + &quot;result_code&quot; / 2 * 999 from (select &quot;average_response_ms&quot;, &quot;result_code&quot; from ping where $timeFilter fill(0))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后的方法很粗糙：当 “result_code” 是 0 也就是成功的时候，得到延迟，而当 “result_code” 是 2 也就是超时的时候，直接得到 999 。这样就解决了这个问题。&lt;/p&gt;
</description>
        <pubDate>Sun, 13 Jan 2019 18:36:00 +0800</pubDate>
        <link>https://jiege.ch/software/2019/01/13/grafana-influxdb-visualize-ping/</link>
        <guid isPermaLink="true">https://jiege.ch/software/2019/01/13/grafana-influxdb-visualize-ping/</guid>
        
        <category>grafana</category>
        
        <category>influxdb</category>
        
        <category>telegraf</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>每周分享第 6 期</title>
        <description>&lt;p&gt;今天刚迁移了域名到 jiege.ch ，原来的 jiegec.me 会自动跳转过来，链接什么的都不用变。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rust 的 cfg! 宏只是返回 bool 而不会影响内部是否被编译 如果需要 if constexpr 的效果需要用 &lt;a href=&quot;https://github.com/alexcrichton/cfg-if&quot;&gt;cfg-if&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;基于 HTML5 canvas 的图表库 &lt;a href=&quot;https://github.com/chartjs/Chart.js&quot;&gt;Chart.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Endianness MATTERS! – Harry Chen&lt;/li&gt;
  &lt;li&gt;各数据库的带补全的 CLI https://www.dbcli.com/&lt;/li&gt;
  &lt;li&gt;边开发边测试 k8s 部署 &lt;a href=&quot;https://github.com/windmilleng/tilt&quot;&gt;tilt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Github unlimited free private repos 于是称为了 PRO 用户 https://blog.github.com/2019-01-07-new-year-new-github/&lt;/li&gt;
  &lt;li&gt;Github 美食博主还行 https://github.com/hendricius/pizza-dough&lt;/li&gt;
  &lt;li&gt;一个用于本地化的库 https://github.com/dustin/go-humanize&lt;/li&gt;
  &lt;li&gt;Vim Verilog 补全 https://github.com/vhda/verilog_systemverilog.vim&lt;/li&gt;
  &lt;li&gt;homebridge 网页前端 https://github.com/oznu/homebridge-config-ui-x&lt;/li&gt;
  &lt;li&gt;Zigbee 2 MQTT Bridge 需要额外的设备 https://github.com/Koenkk/zigbee2mqtt&lt;/li&gt;
  &lt;li&gt;gdb 的网页 gui https://github.com/cs01/gdbgui&lt;/li&gt;
  &lt;li&gt;Rust 一键 par iter https://github.com/rayon-rs/rayon&lt;/li&gt;
  &lt;li&gt;挺好看的 hex viewer https://github.com/sharkdp/hexyl 可以配合 bat 滚屏&lt;/li&gt;
  &lt;li&gt;gitalk 基于 Github issues 的评论系统 类似 Disqus https://github.com/gitalk/gitalk&lt;/li&gt;
  &lt;li&gt;根据蓝牙连接键盘与否改变键盘布局 https://github.com/jwilm/alacritty/wiki/Automatic-MacOS-Keyboard-layout-change-for-Bluetooth&lt;/li&gt;
  &lt;li&gt;8.8.8.8 加入 DoT 家庭 https://security.googleblog.com/2019/01/google-public-dns-now-supports-dns-over.html&lt;/li&gt;
  &lt;li&gt;恢复损坏的 QRCode 工具箱 https://merricx.github.io/qrazybox/&lt;/li&gt;
  &lt;li&gt;通过同时修改两个芯片的 PLL 达成了非标准的 Wi-Fi 通信还行 https://hackaday.com/2019/01/04/underclocking-the-esp8266-leads-to-wifi-weirdness/&lt;/li&gt;
  &lt;li&gt;inline x86 asm in go https://github.com/mmcloughlin/avo#readme&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 11 Jan 2019 17:41:00 +0800</pubDate>
        <link>https://jiege.ch/misc/2019/01/11/weekly-sharing-6/</link>
        <guid isPermaLink="true">https://jiege.ch/misc/2019/01/11/weekly-sharing-6/</guid>
        
        <category>weeklysharing</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>域名已经迁移到 jiege.ch</title>
        <description>&lt;p&gt;从买新域名到迁移大概用了一个多小时，现在已经恢复访问。原有的地址也会直接 301 到新的域名上来。&lt;/p&gt;

&lt;p&gt;仍然 Host 在 Github Pages 上。还会继续更新，不会跑路的（逃&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Jan 2019 11:20:00 +0800</pubDate>
        <link>https://jiege.ch/meta/2019/01/11/blog-host-migration/</link>
        <guid isPermaLink="true">https://jiege.ch/meta/2019/01/11/blog-host-migration/</guid>
        
        <category>site</category>
        
        
        <category>meta</category>
        
      </item>
    
      <item>
        <title>调整 Alacritty 的 Powerline 字体显示偏移</title>
        <description>&lt;p&gt;今天体验了一下 Alacritty ，以前一直在用 iTerm2 ，但是它的高级功能我都没用到。于是现在用了下 Alacritty ，把 Solarized Dark 配置了，发现 Inconsolata for Powerline 字体显示有点偏差，于是调整了一下：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Font configuration (changes require restart)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Normal (roman) font face&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Inconsolata for Powerline&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# The `style` can be specified to pick a specific face.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#style: Regular&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Bold font face&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Inconsolata for Powerline&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# The `style` can be specified to pick a specific face.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#style: Bold&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Italic font face&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;italic&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Inconsolata for Powerline&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# The `style` can be specified to pick a specific face.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#style: Italic&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Point size&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;18.0&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Offset is the extra space around each character. `offset.y` can be thought of&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# as modifying the line spacing, and `offset.x` as modifying the letter spacing.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Glyph offset determines the locations of the glyphs within their cells with&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the default being at the bottom. Increasing `x` moves the glyph to the right,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# increasing `y` moves the glyph upwards.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;glyph_offset&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;主要是这里的 glyph_offset 设置为 3 （2 也可以，我更喜欢 3） ，这样箭头就基本对齐了不会突出来。&lt;/p&gt;

&lt;p&gt;然后按照官方 Wiki ，配置了 Solarized Dark 配色：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;## Colors (Solarized Dark)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Default colors&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x002b36'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# base03&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;foreground&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x839496'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# base0&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Normal colors&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x073642'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# base02&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0xdc322f'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# red&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x859900'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# green&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0xb58900'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# yellow&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x268bd2'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# blue&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;magenta&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0xd33682'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# magenta&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cyan&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x2aa198'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# cyan&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0xeee8d5'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# base2&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Bright colors&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bright&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x002b36'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# base03&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0xcb4b16'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# orange&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x586e75'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# base01&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x657b83'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# base00&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x839496'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# base0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;magenta&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x6c71c4'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# violet&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cyan&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x93a1a1'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# base1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0xfdf6e3'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# base3&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;真香&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Jan 2019 20:19:00 +0800</pubDate>
        <link>https://jiege.ch/software/2019/01/10/alacritty-powerline-font-offset/</link>
        <guid isPermaLink="true">https://jiege.ch/software/2019/01/10/alacritty-powerline-font-offset/</guid>
        
        <category>alacritty</category>
        
        <category>font</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Grafana Variable 的 regex 过滤方式</title>
        <description>&lt;p&gt;用 InfluxDB 收集到 Mountpoint 数据的时候，经常会掺杂一些不关心的，如 TimeMachine ，KSInstallAction 和 AppTranslocation 等等。所以，为了在 Variables 里过滤掉他们，需要用 Regex 进行处理。&lt;a href=&quot;https://community.grafana.com/t/templating-regex-exclude-not-working/1077/4&quot;&gt;网上&lt;/a&gt;有人提供了方案，就是通过 Negative Lookahead 实现：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-regexp&quot;&gt;/^(?!.*TimeMachine)(?!.*KSInstallAction)(?!.*\/private)/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就可以把不想看到的这些 mountpoint 隐藏，节省页面空间了。当然了，这里其实也可以用白名单的方法进行处理，直接写 regex 就可以了。&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Jan 2019 12:47:00 +0800</pubDate>
        <link>https://jiege.ch/software/2019/01/10/grafana-variable-regex-exclusion/</link>
        <guid isPermaLink="true">https://jiege.ch/software/2019/01/10/grafana-variable-regex-exclusion/</guid>
        
        <category>grafana</category>
        
        <category>regex</category>
        
        
        <category>software</category>
        
      </item>
    
  </channel>
</rss>
