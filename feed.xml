<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/</link>
    <description>Recent content on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 May 2023 21:24:00 +0800</lastBuildDate><atom:link href="https://jia.je/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tar 文件格式</title>
      <link>https://jia.je/software/2023/05/23/tar-format/</link>
      <pubDate>Tue, 23 May 2023 21:24:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2023/05/23/tar-format/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/software/tar.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;最近在解压 tar.gz 文件的时候，发现如果用 unar 解压，就会出现文件名截断到 100 个字节的问题，而如果用 gnu tar 解压，文件名就是正常的，因此深入研究了一下 Tar 的文件格式。实际上，这是因为早期 tar 格式设计的时候，就设定了路径最长 100 字节的限制，后来的扩展解决了这个问题，但是 unar 没能正确地识别扩展，导致解压路径出错。&lt;/p&gt;
&lt;h1 id=&#34;tar-文件格式&#34;&gt;Tar 文件格式&lt;/h1&gt;
&lt;p&gt;Tar 的文件格式比较简单，就是一系列的 File Entry，最后是两个 512 字节的全 0，表示结束。每个 File Entry 由头部和数据组成，头部的格式是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* tar Header Block, from POSIX 1003.1-1990.  */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* POSIX header.  */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; posix_header
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{                              &lt;span style=&#34;color:#75715e&#34;&gt;/* byte offset */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; name[&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;];               &lt;span style=&#34;color:#75715e&#34;&gt;/*   0 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; mode[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];                 &lt;span style=&#34;color:#75715e&#34;&gt;/* 100 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; uid[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];                  &lt;span style=&#34;color:#75715e&#34;&gt;/* 108 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; gid[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];                  &lt;span style=&#34;color:#75715e&#34;&gt;/* 116 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; size[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;];                &lt;span style=&#34;color:#75715e&#34;&gt;/* 124 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; mtime[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;];               &lt;span style=&#34;color:#75715e&#34;&gt;/* 136 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; chksum[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];               &lt;span style=&#34;color:#75715e&#34;&gt;/* 148 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; typeflag;                &lt;span style=&#34;color:#75715e&#34;&gt;/* 156 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; linkname[&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;];           &lt;span style=&#34;color:#75715e&#34;&gt;/* 157 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; magic[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;];                &lt;span style=&#34;color:#75715e&#34;&gt;/* 257 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; version[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];              &lt;span style=&#34;color:#75715e&#34;&gt;/* 263 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; uname[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;];               &lt;span style=&#34;color:#75715e&#34;&gt;/* 265 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; gname[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;];               &lt;span style=&#34;color:#75715e&#34;&gt;/* 297 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; devmajor[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];             &lt;span style=&#34;color:#75715e&#34;&gt;/* 329 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; devminor[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];             &lt;span style=&#34;color:#75715e&#34;&gt;/* 337 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; prefix[&lt;span style=&#34;color:#ae81ff&#34;&gt;155&lt;/span&gt;];             &lt;span style=&#34;color:#75715e&#34;&gt;/* 345 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#75715e&#34;&gt;/* 500 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;来源：&lt;a href=&#34;https://www.gnu.org/software/tar/manual/html_node/Standard.html&#34;&gt;Basic Tar Format&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以看到，就是一系列的 char 数组，里面的很多数字字段，例如 mode，uid 和 gid 等，都是用 ASCII 码写的。由于头部需要对齐到 512 字节，所以实际上后面还有 12 字节的 padding。&lt;/p&gt;
&lt;p&gt;头部的 512 字节结束后，紧接着就是文件的内容，内容的大小在头部的 size 字段已经保存，把字符串当成 8 进制数转换，就可以得到文件长度。文件也要对齐到 512 字节，所以文件后面还有若干个 0 作为 padding。&lt;/p&gt;
&lt;p&gt;总结一下，Tar 文件的格式就是：&lt;code&gt;(头部，数据)*结尾&lt;/code&gt;。每一个部分都对齐到 512 字节。&lt;/p&gt;
&lt;h1 id=&#34;pax-扩展&#34;&gt;PAX 扩展&lt;/h1&gt;
&lt;p&gt;如果仔细观察，会发现上面的 &lt;code&gt;posix_header&lt;/code&gt; 里面，&lt;code&gt;name&lt;/code&gt; 字段只有 100 个字节，意味着如果文件路径特别长，那就放不下，只能截断了。为了解决这个问题，Tar 引入了 PAX 扩展。&lt;/p&gt;
&lt;p&gt;具体来说，PAX 扩展以特殊的文件形式存在。例如要记录一个名字很长的文件 &lt;code&gt;&#39;X&#39;*101&lt;/code&gt;，实际上 Tar 中记录了两个文件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PaxHeader：特殊的 PAX 文件，不对应实际的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;X&#39;*100&lt;/code&gt;：文件名被截断，其他不变&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个 PaxHeader 在解压的时候，不会生成实际的文件。它的内容是一些键值对，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;123 path=XXXXXXXXXXXXXXXXX...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;格式是：&lt;code&gt;length key=value\n&lt;/code&gt;，然后可以有多个这样的键值对。这样就可以解决 &lt;code&gt;posix_header&lt;/code&gt; 里名字长度限制的问题：只要在 PaxHeader 文件里，保存一个 key 为 path，value 为实际名字的信息。那么 tar 在看到 PaxHeader 的时候，记录下来，再遇到下一个文件的时候，就知道要用 PaxHeader 中的 path，而不是保存在 &lt;code&gt;posix_header&lt;/code&gt; 中的 &lt;code&gt;name[100]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;类似地，PaxHeader 还可以存很多其他 &lt;code&gt;posix_header&lt;/code&gt; 中没有的信息，例如 &lt;code&gt;atime&lt;/code&gt;、&lt;code&gt;ctime&lt;/code&gt; 和 &lt;code&gt;uid&lt;/code&gt; 等等。完整列表可以参考 &lt;a href=&#34;https://www.ibm.com/docs/en/zos/2.4.0?topic=descriptions-pax-interchange-portable-archives#r4paxsh__pxchk&#34;&gt;Extended header keywords&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;bard&#34;&gt;Bard&lt;/h1&gt;
&lt;p&gt;Bard 讲解 Tar 格式：&lt;/p&gt;
&lt;p&gt;A tar file is an archive file format that is used to store a collection of files in a single file. The tar format is a standard format on Unix-like operating systems and is also supported by many other operating systems.&lt;/p&gt;
&lt;p&gt;A tar file consists of a series of blocks, each of which contains 512 bytes of data. Each block contains a header and a body. The header contains information about the file, such as the file name, the file size, and the file permissions. The body contains the actual contents of the file.&lt;/p&gt;
&lt;p&gt;The tar format is a simple and efficient format for storing files. It is also a portable format, which means that tar files can be moved from one computer to another without any problems.&lt;/p&gt;
&lt;p&gt;Here is a more detailed description of the tar file format:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The header of a tar file is 512 bytes long. It contains the following information:
&lt;ul&gt;
&lt;li&gt;The name of the file&lt;/li&gt;
&lt;li&gt;The size of the file&lt;/li&gt;
&lt;li&gt;The permissions of the file&lt;/li&gt;
&lt;li&gt;The modification time of the file&lt;/li&gt;
&lt;li&gt;The owner of the file&lt;/li&gt;
&lt;li&gt;The group of the file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The body of a tar file contains the actual contents of the file. The body is padded to a multiple of 512 bytes.&lt;/li&gt;
&lt;li&gt;Tar files can be compressed using a variety of compression algorithms, such as gzip, bzip2, and xz.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tar files are a versatile format that can be used for a variety of purposes. They are commonly used for backing up files, distributing software, and archiving files.&lt;/p&gt;
&lt;p&gt;Here are some of the benefits of using tar files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tar files are a standard format that is supported by many operating systems.&lt;/li&gt;
&lt;li&gt;Tar files are a portable format, which means that they can be moved from one computer to another without any problems.&lt;/li&gt;
&lt;li&gt;Tar files can be compressed using a variety of compression algorithms, which can significantly reduce the size of the archive.&lt;/li&gt;
&lt;li&gt;Tar files can be easily created and managed using the tar command-line tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need to store a collection of files in a single file, then a tar file is a good option to consider.&lt;/p&gt;
&lt;p&gt;Bard 讲解 PAX 扩展：&lt;/p&gt;
&lt;p&gt;The POSIX 1003.1-2001 (pax) format for tar archives supports file names longer than 256 characters by using a different format for storing file names and metadata than the traditional ustar format. In the pax format, file names are stored as null-terminated strings, which means that they can be any length up to the maximum file size supported by the underlying file system. The metadata for each file is also stored in a separate record, which allows for more flexibility in the types of metadata that can be stored.&lt;/p&gt;
&lt;p&gt;To create a tar archive in the pax format, you can use the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tar cf - --format=pax /path/to/files
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To extract a tar archive in the pax format, you can use the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tar xvf - --format=pax archive.tar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The pax format is a more flexible and powerful format than the ustar format, and it is recommended for use when creating or extracting tar archives that may contain file names longer than 256 characters.&lt;/p&gt;
&lt;p&gt;Here are some additional details about the pax format:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;File names are stored as null-terminated strings, which means that they can be any length up to the maximum file size supported by the underlying file system.&lt;/li&gt;
&lt;li&gt;The metadata for each file is stored in a separate record, which allows for more flexibility in the types of metadata that can be stored.&lt;/li&gt;
&lt;li&gt;The pax format is supported by most modern tar implementations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some examples of file names that can be stored in the pax format:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;This is a file name with more than 256 characters.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;/path/to/a/file/with/a/long/name.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;file.with.spaces.in.its.name&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The pax format is a good choice for storing file names that may be long, contain special characters, or be stored in a directory hierarchy with a long path.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Docker 部署 OpenLDAP</title>
      <link>https://jia.je/software/2023/05/13/openldap-in-docker/</link>
      <pubDate>Sat, 13 May 2023 15:57:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2023/05/13/openldap-in-docker/</guid>
      <description>&lt;h2 id=&#34;docker-compose&#34;&gt;Docker-Compose&lt;/h2&gt;
&lt;p&gt;OpenLDAP 可以用现成的 Docker 镜像：&lt;a href=&#34;https://hub.docker.com/r/bitnami/openldap/&#34;&gt;bitnami/openldap&lt;/a&gt;，配合 Docker-Compose 进行部署：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;openldap&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bitnami/openldap:2.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1389:1389&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# LDAP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;LDAP_ROOT=dc=example,dc=com&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;env_file&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.env&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# admin password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./data:/bitnami/openldap&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# data storage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;admin 密码建议单独保存，例如写在 &lt;code&gt;.env&lt;/code&gt; 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LDAP_ADMIN_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;12345678REDACTED
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# prepare data folder&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo rm -rf data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chown 1001:root data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# launch docker compose&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo docker-compose up -d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以通过 ldapsearch 列出所有对象，默认情况下不需要登录（Bind DN），可以只读访问：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# search elements under dc=example,dc=com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -x: Simple authentication without user and password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -b dc=example,dc=com: base dn for search&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -H: ldap server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldapsearch -x -b dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com -H ldap://localhost:1389/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# user01, users, example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dn: cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user01,ou&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;users,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cn: User1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cn: user01
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sn: Bar1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: inetOrgPerson
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: posixAccount
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: shadowAccount
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userPassword:: Yml0bmFtaTE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uid: user01
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uidNumber: &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gidNumber: &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;homeDirectory: /home/user01
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# user02, users, example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dn: cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user02,ou&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;users,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cn: User2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cn: user02
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sn: Bar2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: inetOrgPerson
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: posixAccount
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: shadowAccount
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userPassword:: Yml0bmFtaTI&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uid: user02
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uidNumber: &lt;span style=&#34;color:#ae81ff&#34;&gt;1001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gidNumber: &lt;span style=&#34;color:#ae81ff&#34;&gt;1001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;homeDirectory: /home/user02
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 Docker 镜像初始化了两个用户，仅供测试用，它用的密码比较弱。&lt;/p&gt;
&lt;h1 id=&#34;tls&#34;&gt;TLS&lt;/h1&gt;
&lt;p&gt;接着，给 OpenLDAP 配置 TLS。首先用 OpenSSL 生成 CA 和证书：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://arminreiter.com/2022/01/create-your-own-certificate-authority-ca-using-openssl/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# setup CA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf certs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p certs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl genrsa -out certs/ldap_ca.key &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl req -x509 -new -nodes -key certs/ldap_ca.key -sha256 -days &lt;span style=&#34;color:#ae81ff&#34;&gt;1826&lt;/span&gt; -out certs/ldap_ca.crt -subj &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/CN=Example Com CA/ST=Somewhere/L=Earth/O=ExampleOrg&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# setup cert&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# CN must match hostname&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl req -new -nodes -out certs/ldap_server.csr -newkey rsa:4096 -keyout certs/ldap_server.key -subj &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/CN=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;hostname&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/ST=Somewhere/L=Earth/O=ExampleOrg&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl x509 -req -in certs/ldap_server.csr -CA certs/ldap_ca.crt -CAkey certs/ldap_ca.key -CAcreateserial -out certs/ldap_server.crt -days &lt;span style=&#34;color:#ae81ff&#34;&gt;730&lt;/span&gt; -sha256
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chown -R 1001:root certs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后修改 docker-compose.yml：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;openldap&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bitnami/openldap:2.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1389:1389&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# LDAP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1636:1636&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# LDAPS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;LDAP_ROOT=dc=example,dc=com&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;LDAP_ENABLE_TLS=yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;LDAP_TLS_CERT_FILE=/opt/bitnami/openldap/certs/ldap_server.crt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;LDAP_TLS_KEY_FILE=/opt/bitnami/openldap/certs/ldap_server.key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;LDAP_TLS_CA_FILE=/opt/bitnami/openldap/certs/ldap_ca.crt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;env_file&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.env&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# admin password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./data:/bitnami/openldap&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# data storage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./certs:/opt/bitnami/openldap/certs&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再重新启动，就可以用 LDAPS 来访问 LDAP Server：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# LDAP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldapsearch -x -b dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com -H ldap://localhost:1389/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# LDAPS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ LDAPTLS_CACERT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PWD/certs/ldap_ca.crt ldapsearch -x -b dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com -H ldaps://localhost:1636/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;修改密码&#34;&gt;修改密码&lt;/h1&gt;
&lt;p&gt;管理员修改用户的密码，使用 ldappasswd 修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Generate a new password for cn=user01,ou=users,dc=example,dc=com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -W: prompt for bind(login) password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -D cn=admin,dc=example,dc=com: bind(login) to admin user&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldappasswd -x -W -D cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;admin,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com -H ldap://localhost:1389/ cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user01,ou&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;users,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Enter LDAP Password:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;New password: REDACTED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Set password for for cn=user01,ou=users,dc=example,dc=com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -S: prompt for new password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldappasswd -x -W -S -D cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;admin,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com -H ldap://localhost:1389/ cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user01,ou&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;users,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;New password:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Re-enter new password:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Enter LDAP Password:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认情况下，用户没有权限修改自己的密码。可以进入 Docker 容器，修改数据库的权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo docker-compose exec openldap bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Authenticate using local user&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openldap$ ldapmodify -Y EXTERNAL -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ldapi:///&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SASL/EXTERNAL authentication started
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SASL username: gidNumber&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0+uidNumber&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1001,cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;peercred,cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;external,cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SASL SSF: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Paste the following lines&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Allow user to change its own password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dn: olcDatabase&lt;span style=&#34;color:#f92672&#34;&gt;={&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;mdb,cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;changetype: modify
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;replace: olcAccess
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;olcAccess: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;to attrs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;userPassword
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  by anonymous auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  by self write
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  by * none
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;olcAccess: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;to *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  by * read
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时用户就可以自己修改密码了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldappasswd -x -W -S -D cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user01,ou&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;users,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com -H ldap://localhost:1389/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;New password:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Re-enter new password:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Enter LDAP Password:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并且 userPassword 也对非 admin 用户被隐藏了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldapsearch -x -b dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com -H ldap://localhost:1389/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# user01, users, craft.cn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dn: cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user01,ou&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;users,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;craft,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cn: User1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cn: user01
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sn: Bar1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: inetOrgPerson
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: posixAccount
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objectClass: shadowAccount
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uid: user01
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uidNumber: &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gidNumber: &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;homeDirectory: /home/user01
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;ldap-ui&#34;&gt;ldap-ui&lt;/h1&gt;
&lt;p&gt;如果想要 Web 管理界面，可以用 ldap-ui，在 docker-compose 添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ldap-ui&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dnknth/ldap-ui&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;5000:5000&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;links&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;openldap&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;LDAP_URL=ldap://openldap:1389/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;BASE_DN=dc=example,dc=com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;BIND_PATTERN=cn=%s,dc=example,dc=com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问 localhost:5000，就可以用 admin 用户登录了。如果想用其他用户登录，由于 BIND 路径多了一级 ou=users，所以要么修改 BIND_PATTERN，要么用户名要写成 user01,ou=users&lt;/p&gt;
&lt;h1 id=&#34;权限管理&#34;&gt;权限管理&lt;/h1&gt;
&lt;p&gt;前面修改了权限，从而允许用户修改自己的密码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo docker-compose exec openldap bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Authenticate using local user&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openldap$ ldapmodify -Y EXTERNAL -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ldapi:///&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SASL/EXTERNAL authentication started
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SASL username: gidNumber&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0+uidNumber&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1001,cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;peercred,cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;external,cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SASL SSF: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Paste the following lines&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Allow user to change its own password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dn: olcDatabase&lt;span style=&#34;color:#f92672&#34;&gt;={&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;mdb,cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;changetype: modify
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;replace: olcAccess
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;olcAccess: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;to attrs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;userPassword
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  by anonymous auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  by self write
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  by * none
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;olcAccess: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;to *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  by * read
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;核心部分的含义如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;to attrs=userPassword：针对 userPassword 这个字段，任何人都可以认证，用户自己可以写，其他人没有权限&lt;/li&gt;
&lt;li&gt;to *：任何人可以读&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果想要进一步收缩权限，例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不登录看不到任何信息&lt;/li&gt;
&lt;li&gt;普通用户登录后，只能读取自己的信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么，可以写出如下的配置：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-ldif&#34; data-lang=&#34;ldif&#34;&gt;dn: olcDatabase={2}mdb,cn=config
changetype: modify
replace: olcAccess
olcAccess: {0}to attrs=userPassword
  by anonymous auth
  by self write
  by * none
olcAccess: {1}to *
  by self read
  by * none
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于从前往后匹配，找到第一个匹配就不看后面的规则的原因，更精确的过滤要放在前面。&lt;/p&gt;
&lt;h1 id=&#34;ldap-用于其他软件的认证&#34;&gt;LDAP 用于其他软件的认证&lt;/h1&gt;
&lt;p&gt;LDAP 很重要的一个用途是用于其他软件的认证，一般来说有两种用法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LDAP 自身带了认证的功能（Simple Auth），那么就需要把用户名（user01）映射到 LDAP 的 Bind DN 上（cn=user01,ou=users,cn=example,cn=com），Bind DN 和密码会传输到 LDAP Server；在 LDAP Server 上密码会与用户的 userPassword 进行匹配，如果 Bind 成功，就认为用户登录成功&lt;/li&gt;
&lt;li&gt;LDAP 附带了列用户的功能（Search），那么这个时候，一般是要创建一个用于搜索的 DN 来控制权限；然后其他软件 Bind 到用于搜索的 DN 上，搜索用户，把用户信息同步到本地&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一种使用方法要求用户和 DN 有直接映射关系，例如上面的 &lt;code&gt;cn=%s,ou=users,cn=example=com&lt;/code&gt;，好处是比较简单，缺点是要把所有用户放在同一个 DN 下面，不适合比较复杂的组织结构。&lt;/p&gt;
&lt;p&gt;第二种使用方法，则是其他软件先进行搜索（搜索本身可能需要 Bind 到用于搜索的 DN 上），找到匹配用户名或者邮箱的用户，再进行 Simple Auth。这样的好处是灵活性更好，用户不需要放在同一个 DN 下面，可以有更多层级。&lt;/p&gt;
&lt;p&gt;由于使用了 Simple Auth，密码会明文发送给 LDAP Server，因此为了安全性，建议配置 TLS。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 JLink 操作 SPI NOR Flash</title>
      <link>https://jia.je/hardware/2023/05/08/jlink-spi-nor-flash/</link>
      <pubDate>Mon, 08 May 2023 23:18:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/05/08/jlink-spi-nor-flash/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近设计了一款 &lt;a href=&#34;https://github.com/jiegec/PMOD-SPI-NOR-FLASH&#34;&gt;PMOD SPI NOR Flash&lt;/a&gt; 扩展板，搭载了 W25Q128 SPI NOR Flash 芯片。在 jlc 生产回来以后，通过 JLink 连接到电脑上进行测试。&lt;/p&gt;
&lt;h2 id=&#34;连接到-jlink&#34;&gt;连接到 JLink&lt;/h2&gt;
&lt;p&gt;JLink 提供了 20 pin 的引脚，如果要连接 SPI，那么引脚定义如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://c.a.segger.com/fileadmin/images/products/J-Link/Software/pinout-spi-20-pin.gif.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图源 &lt;a href=&#34;https://www.segger.com/products/debug-probes/j-link/tools/j-flash-spi/&#34;&gt;JFlash SPI 文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;连接的时候，至少需要连接以下的引脚：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JLink GND(pin 4/6/8/10) - SPI NOR Flash GND&lt;/li&gt;
&lt;li&gt;JLink VTref(pin 1) - 3.3V - SPI NOR Flash VCC&lt;/li&gt;
&lt;li&gt;JLink CLK(pin 9) - SPI NOR Flash CLK&lt;/li&gt;
&lt;li&gt;JLink DI(pin 5) - SPI NOR Flash D0/DI/MOSI&lt;/li&gt;
&lt;li&gt;JLink DO(pin 13) - SPI NOR Flash D1/DO/MISO&lt;/li&gt;
&lt;li&gt;JLink nCS(pin 7) - SPI NOR Flash CS#&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于 SPI NOR Flash 无法接受 5V 的电压，所以要用额外的 3.3V 作为电源，同时接到 JLink 的 VTref 引脚上。&lt;/p&gt;
&lt;p&gt;JFlash SPI 还支持 Quad SPI 模式，可以在它的文档里找到连接方式。&lt;/p&gt;
&lt;h2 id=&#34;jflash-spi&#34;&gt;JFlash SPI&lt;/h2&gt;
&lt;p&gt;连接了以后，就可以在 JFlash SPI 软件中识别出 SPI Flash 了：Flash ID 0xEF 40 18。有意思的是，JFlash SPI 软件会认为这个芯片是 Infineon 的 S25FL128K，而不是 Winbond 的 W25Q128。发邮件问了一下 SEGGER，得到的回复是这两个芯片的 Flash ID 都是 0xEF4018，所以无法区分。&lt;/p&gt;
&lt;h2 id=&#34;flashrom&#34;&gt;flashrom&lt;/h2&gt;
&lt;p&gt;如果想用开源软件，可以用 flashrom，编译的时候打开 jlink 支持，就可以用 flashrom 来通过 JLink 读写 SPI NOR Flash。&lt;/p&gt;
&lt;p&gt;但是 flashrom 的 cs 信号并不是上面的 nCS(pin 7)，而是 nRESET(pin 15，默认) 或者 nTRST(pin 3，可以添加参数 &lt;code&gt;cs=trst&lt;/code&gt;)。这就导致如果想用 flashrom 的话，就要修改引脚连接方式，把 pin 15 连接到 SPI NOR Flash 的 CS# 上。修改连接以后，就可以检测到芯片了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ flashrom --programmer jlink_spi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flashrom v1.3.0 on Darwin 22.4.0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arm64&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flashrom is free software, get the source code at https://flashrom.org
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Calibrating delay loop... OK.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Found Winbond flash chip &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;W25Q128.V&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; kB, SPI&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; on jlink_spi.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This flash part has status UNTESTED &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; operations: WP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The test status of this chip may have been updated in the latest development
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;version of flashrom. If you are running the latest development version,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;please email a report to flashrom@flashrom.org &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; any of the above operations
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;work correctly &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you with this flash chip. Please include the flashrom log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; all operations you tested &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;see the man page &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; details&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, and mention
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which mainboard or programmer you tested in the subject line.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thanks &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; your help!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;No operations were specified.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了解决这个问题，我给 &lt;a href=&#34;https://review.coreboot.org/c/flashrom/+/75011&#34;&gt;flashrom&lt;/a&gt; 提交了 patch，如果合并了，就可以支持 &lt;code&gt;--programmer jlink_spi:cs=tms&lt;/code&gt; 选项，此时就不需要修改连接方式了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How a Linux 6.2.13 BUG stops Vivado from recognizing FPGA</title>
      <link>https://jia.je/software/2023/05/06/linux-regression-vivado-en/</link>
      <pubDate>Sat, 06 May 2023 22:16:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2023/05/06/linux-regression-vivado-en/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://jia.je/software/2023/05/06/linux-regression-vivado/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TLDR&lt;/h2&gt;
&lt;p&gt;In short, the commit introduced by Linux 6.2.13:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;commit 0d30989fe9a176565d360376d4bc2ea1c61cbbac
Author: Liam R. Howlett &amp;lt;Liam.Howlett@oracle.com&amp;gt;
Date:   Fri Apr 14 14:59:19 2023 -0400

    mm/mmap: regression fix for unmapped_area{_topdown}
    
    commit 58c5d0d6d522112577c7eeb71d382ea642ed7be4 upstream.
    
    The maple tree limits the gap returned to a window that specifically fits
    what was asked.  This may not be optimal in the case of switching search
    directions or a gap that does not satisfy the requested space for other
    reasons.  Fix the search by retrying the operation and limiting the search
    window in the rare occasion that a conflict occurs.
    
    Link: https://lkml.kernel.org/r/20230414185919.4175572-1-Liam.Howlett@oracle.com
    Fixes: 3499a13168da (&amp;#34;mm/mmap: use maple tree for unmapped_area{_topdown}&amp;#34;)
    Signed-off-by: Liam R. Howlett &amp;lt;Liam.Howlett@oracle.com&amp;gt;
    Reported-by: Rick Edgecombe &amp;lt;rick.p.edgecombe@intel.com&amp;gt;
    Cc: &amp;lt;stable@vger.kernel.org&amp;gt;
    Signed-off-by: Andrew Morton &amp;lt;akpm@linux-foundation.org&amp;gt;
    Signed-off-by: Greg Kroah-Hartman &amp;lt;gregkh@linuxfoundation.org&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While fixing a BUG, a new BUG is introduced, causing MAP_32BIT to fail to work sometimes, and Xilinx&amp;rsquo;s Digilent driver uses this parameter, causing mmap to fail and unable to recognize the FPGA.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;The background is that after @vowstar upgraded the kernel to 6.2.14, he found that Vivado could not find the FPGA. But restarting and switching to 6.2.12, it works.&lt;/p&gt;
&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;Because the kernel has been upgraded, the first reaction is whether it is a problem with the ftdi_sio driver. Comparing the dmesg logs of the two kernel versions, We found that Linux 6.2.12 will display &lt;code&gt;ftdi_sio: device disconnected&lt;/code&gt; message: this is because the FPGA programmer has a built-in FTDI chip, which supports multiple modes. By default, after the kernel detects the usb device, the ftdi_sio driver will initialize the FTDI chip to the serial port mode to create a &lt;code&gt;/dev/ttyUSB*&lt;/code&gt; device; and Vivado needs to use the MPSSE mode to communicate with the FPGA using the JTAG protocol. MPSSE mode conflicts with the serial port mode, so Vivado has to detach the kernel module so that it no longer occupies the USB device, and then let the FTDI chip enter MPSSE mode.&lt;/p&gt;
&lt;p&gt;Following this line of thought, the first thing that comes to mind is the permission issue: by default, the USB device permissions are strict, so when Vivado is installed, it will install udev rules, to change the permissions of the usb device file of the Digilent programmer to 666, so that all users are allowed to access USB devices. But after checking, the device file permissions under /dev/bus/usb are correct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kernel 6.2.12: crw-rw-rw- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root usb 189, &lt;span style=&#34;color:#ae81ff&#34;&gt;271&lt;/span&gt; May  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; 15:31 /dev/bus/usb/003/016
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kernel 6.2.14: crw-rw-rw- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root usb 189, &lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt; May  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; 15:32 /dev/bus/usb/003/016
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At this time, we feel very strange. Only the kernel has been updated, and nothing else has changed. Why is the behavior different? So we looked through the ChangeLog of the Linux kernel, because 6.2.12 is good, while 6.2.14 is not working, so you only need to look at the changelog between the two:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cdn.kernel.org/pub/linux/kernel/v6.x/ChangeLog-6.2.13&#34;&gt;6.2.13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cdn.kernel.org/pub/linux/kernel/v6.x/ChangeLog-6.2.14&#34;&gt;6.2.14&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Searching for keywords such as ftdi or usb, only one commit seems to be related: &lt;code&gt;USB: serial: option: add UNISOC vendor and TOZED LT70C product&lt;/code&gt;, but after a closer look, it only adds a new VID/PID, and it has no conflict with Digilent programmer.&lt;/p&gt;
&lt;p&gt;At this time, we feel that it is not a Linux problem. We continue to control the variables, by seeing if there is something wrong with the FTDI chip. At this time, OpenOCD was used to see if OpenOCD can configure the FTDI chip to enter MPSSE mode and find the FPGA. We tried it, it worked, ftdi_sio detached normally, and OpenOCD also found FPGA.&lt;/p&gt;
&lt;p&gt;But at this time, when Vivado is opened again, the FPGA is still not found, indicating that it is not a problem in MPSSE mode. Considering that the process that Vivado accesses the hardware is hw_server, we wonder if we can look at the log of hw_server.&lt;/p&gt;
&lt;p&gt;Run hw_server, printing all log types:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ hw_server -L- -l alloc,eventcore,waitpid,events,protocol,context,children,discovery,asyncreq,proxy,tcflog,elf,stack,plugin,shutdown,disasm,jtag2,jtag,pcie,slave,dpc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here &lt;code&gt;-L-&lt;/code&gt; means to output the log to stderr, and the following &lt;code&gt;-l&lt;/code&gt; string of parameters are various log switches. It is ran on both kernels, and the difference is found by comparing the logs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Success &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.2.12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TCF 08:39:37.247: jtagpoll: add node 0xxxxxxxx&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;jsn-JTAG-SMT2NC-XXXXXXXXXXXX&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TCF 08:39:37.247: Node 000000FF, added jsn-JTAG-SMT2NC-XXXXXXXXXXXX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Failed &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.2.14&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TCF 08:45:12.385: jtagpoll: cannot get port description list: ftdidb_lock failed: FTDMGR wasn&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t properly initialized
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TCF 08:45:12.391: jtagpoll: cannot get port description list: JTAG device enumeration failed: Initialization of the DPCOMM library failed.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally saw the error message: &lt;code&gt;jtagpoll: cannot get port description list: ftdidb_lock failed: FTDMGR wasn&#39;t properly initialized&lt;/code&gt;. Use it as a keyword to search, and sure enough, someone else has encountered the same problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.xilinx.com/s/article/000033531?language=en_US&#34;&gt;XSDB fails with &amp;ldquo;ftdidb_lock failed: FTDMGR wasn&amp;rsquo;t properly initialized&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.t123yh.xyz:2/index.php/archives/1013&#34;&gt;Linux 多用户环境下 Vivado 无法连接 Digilent JTAG 适配器的解决方法 (Solution to Vivado unable to connect to Digilent JTAG adapter in Linux multi-user environment)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We tried the solution from the first post, it didn&amp;rsquo;t work. The problem pointed out in the second article is that in a multi-user environment, multiple users use the same file, and then there is a permission problem, so the file must be deleted. We tried the method in the second document, but it didn&amp;rsquo;t solve the problem.&lt;/p&gt;
&lt;p&gt;But the second article gives a debugging method: run the dadutil program provided by Digilent to see if it can recognize the programmer, and the problem reappears:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ERROR: DmgrSetNetworkEnumTimeout failed, erc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3090&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Found &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; device&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Found &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; device&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ERROR: DmgrSetNetworkEnumTimeout failed, erc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3090&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have tried many times here and found that there is a one-third probability of failure, but it is enough to explain why hw_server does not work: there is a high probability that it also calls the code provided by Digilent and gets the same result, so it fails.&lt;/p&gt;
&lt;p&gt;The second article above used strace to find the problem, so we use strace to locate the error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ strace dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AT_FDCWD, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/dev/shm/digilent-adept2-mtx-ftdmgr&amp;#34;&lt;/span&gt;, O_RDWR|O_NOFOLLOW|O_CLOEXEC&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ftruncate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;7, 4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                         &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 4, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_32BIT, 7, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -1 ENOMEM &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cannot allocate memory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;close&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;7&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                                &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem is that ENOMEM is returned, which is very strange, because &lt;code&gt;/dev/shm&lt;/code&gt; is a tmpfs, and there is still a lot of space, how can it return ENOMEM?&lt;/p&gt;
&lt;h2 id=&#34;found-the-culprit&#34;&gt;Found the culprit&lt;/h2&gt;
&lt;p&gt;Continue to research according to new clues: mmap returns an error that should not be returned, is that 6.2.13 or 6.2.14 introduced related changes? After checking, there are really:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# https://cdn.kernel.org/pub/linux/kernel/v6.x/ChangeLog-6.2.13
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;commit 0d30989fe9a176565d360376d4bc2ea1c61cbbac
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Author: Liam R. Howlett &amp;lt;Liam.Howlett@oracle.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Date:   Fri Apr 14 14:59:19 2023 -0400
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mm/mmap: regression fix for unmapped_area{_topdown}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    commit 58c5d0d6d522112577c7eeb71d382ea642ed7be4 upstream.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    The maple tree limits the gap returned to a window that specifically fits
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    what was asked.  This may not be optimal in the case of switching search
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    directions or a gap that does not satisfy the requested space for other
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    reasons.  Fix the search by retrying the operation and limiting the search
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    window in the rare occasion that a conflict occurs.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Link: https://lkml.kernel.org/r/20230414185919.4175572-1-Liam.Howlett@oracle.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Fixes: 3499a13168da (&amp;#34;mm/mmap: use maple tree for unmapped_area{_topdown}&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Signed-off-by: Liam R. Howlett &amp;lt;Liam.Howlett@oracle.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Reported-by: Rick Edgecombe &amp;lt;rick.p.edgecombe@intel.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Cc: &amp;lt;stable@vger.kernel.org&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Signed-off-by: Andrew Morton &amp;lt;akpm@linux-foundation.org&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Signed-off-by: Greg Kroah-Hartman &amp;lt;gregkh@linuxfoundation.org&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is related to mmap, click on the &lt;a href=&#34;https://lkml.kernel.org/r/20230414185919.4175572-1-Liam.Howlett@oracle.com&#34;&gt;email link&lt;/a&gt; to have a look, and found that this commit was proposed to fix a BUG, but introduced a new BUG:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Re: [PATCH v2] mm/mmap: Regression fix for unmapped_area{_topdown}
  2023-04-14 18:59   ` [PATCH v2] &amp;#34; Liam R. Howlett
  2023-04-14 19:09     ` Andrew Morton
@ 2023-04-29 14:32     ` Tad
  2023-04-30 22:41       ` Michael Keyes
  1 sibling, 1 reply; 18+ messages in thread
From: Tad @ 2023-04-29 14:32 UTC (permalink / raw)
  To: liam.howlett; +Cc: akpm, linux-kernel, linux-mm, rick.p.edgecombe

This reintroduces the issue described in
https://lore.kernel.org/linux-mm/cb8dc31a-fef2-1d09-f133-e9f7b9f9e77a@sony.com/

Linux 6.2.13 can no longer successfully run the mmap-test reproducer linked
there.

Linux 6.2.12 passes.

Regards,
Tad.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Continue to follow the above &lt;a href=&#34;https://lore.kernel.org/linux-mm/cb8dc31a-fef2-1d09-f133-e9f7b9f9e77a@sony.com/&#34;&gt;link&lt;/a&gt;, and you can see that in the error log inside, there is also a similar mmap call:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 131072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_32BIT, -1, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x40720000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 131072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_32BIT, -1, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x4124e000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 131072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_32BIT, -1, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -1 ENOMEM &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cannot allocate memory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; dex2oatd F 03-01 10:32:33 &lt;span style=&#34;color:#ae81ff&#34;&gt;74063&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74063&lt;/span&gt; mem_map_arena_pool.cc:65&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Check failed: map.IsValid&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; Failed anonymous mmap&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;nil&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, 131072, 0x3, 0x22, -1, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: Cannot allocate memory. See process maps in the log.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Look at the mmap log reported above by &lt;code&gt;dadutil enum&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 4, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_32BIT, 7, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -1 ENOMEM &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cannot allocate memory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The parameter also contains MAP_32BIT, and the result is also ENOMEM. Combined with other discussions on the mailing list, it can be basically confirmed that the author ignored the situation of MAP_32BIT, and the BUG is introduced by the commit.&lt;/p&gt;
&lt;p&gt;After reverting the commit from Linux 6.2.14, the problem is gone.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;This is the whole debugging process. From the fact that Vivado can&amp;rsquo;t find the FPGA, to the internal Linux kernel BUG, they seem irrelevant, but we can find the connection behind the scene.&lt;/p&gt;
&lt;p&gt;I went through the whole debugging process with @vowstar and learned a lot, hence the blog post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux 6.2.13 引入的 BUG 导致 Vivado 无法识别 FPGA</title>
      <link>https://jia.je/software/2023/05/06/linux-regression-vivado/</link>
      <pubDate>Sat, 06 May 2023 22:16:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2023/05/06/linux-regression-vivado/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://jia.je/software/2023/05/06/linux-regression-vivado-en/&#34;&gt;English version&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TLDR&lt;/h2&gt;
&lt;p&gt;简单来说，Linux 6.2.13 引入的 commit：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;commit 0d30989fe9a176565d360376d4bc2ea1c61cbbac
Author: Liam R. Howlett &amp;lt;Liam.Howlett@oracle.com&amp;gt;
Date:   Fri Apr 14 14:59:19 2023 -0400

    mm/mmap: regression fix for unmapped_area{_topdown}
    
    commit 58c5d0d6d522112577c7eeb71d382ea642ed7be4 upstream.
    
    The maple tree limits the gap returned to a window that specifically fits
    what was asked.  This may not be optimal in the case of switching search
    directions or a gap that does not satisfy the requested space for other
    reasons.  Fix the search by retrying the operation and limiting the search
    window in the rare occasion that a conflict occurs.
    
    Link: https://lkml.kernel.org/r/20230414185919.4175572-1-Liam.Howlett@oracle.com
    Fixes: 3499a13168da (&amp;#34;mm/mmap: use maple tree for unmapped_area{_topdown}&amp;#34;)
    Signed-off-by: Liam R. Howlett &amp;lt;Liam.Howlett@oracle.com&amp;gt;
    Reported-by: Rick Edgecombe &amp;lt;rick.p.edgecombe@intel.com&amp;gt;
    Cc: &amp;lt;stable@vger.kernel.org&amp;gt;
    Signed-off-by: Andrew Morton &amp;lt;akpm@linux-foundation.org&amp;gt;
    Signed-off-by: Greg Kroah-Hartman &amp;lt;gregkh@linuxfoundation.org&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修复了 BUG 的同时，引入了新的 BUG，导致 MAP_32BIT 有时无法工作，而 Xilinx 的 Digilent 下载器代码使用了这个参数，导致 mmap 失败，无法识别 FPGA。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;事情的背景是，@vowstar 升级内核到 6.2.14 以后，发现 Vivado 找不到 FPGA 了，重启回到 6.2.12 就好了。&lt;/p&gt;
&lt;h2 id=&#34;排查&#34;&gt;排查&lt;/h2&gt;
&lt;p&gt;因为升级了内核，第一反应是不是 ftdi_sio 驱动的问题。比对了一下二者的 dmesg 日志，发现 Linux 6.2.12 会显示 &lt;code&gt;ftdi_sio: device disconnected&lt;/code&gt; 消息：这是因为 FPGA 下载器内置的是 FTDI 芯片，它支持多种模式，默认情况下，内核检测到设备以后，会由 ftdi_sio 驱动初始化为串口模式，创建 &lt;code&gt;/dev/ttyUSB*&lt;/code&gt; 设备；而 Vivado 需要用的是 MPSSE 模式，从而使用 JTAG 协议与 FPGA 通讯。这与串口模式冲突，因此 Vivado 要做的事情，首先是把内核模块 detach，也就是不再占用 USB 设备，然后再让 FTDI 芯片进入 MPSSE 模式。&lt;/p&gt;
&lt;p&gt;沿着这个思路，首先想到的是权限问题：默认情况下，USB 设备权限比较严格，所以 Vivado 在安装的时候，会安装 udev rule，把 Digilent 下载器的 usb 设备文件的权限改为 666，这样就允许所有用户访问 USB 设备。但是检查了一下，/dev/bus/usb 下的设备文件权限是正确的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kernel 6.2.12: crw-rw-rw- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root usb 189, &lt;span style=&#34;color:#ae81ff&#34;&gt;271&lt;/span&gt; May  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; 15:31 /dev/bus/usb/003/016
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kernel 6.2.14: crw-rw-rw- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root usb 189, &lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt; May  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; 15:32 /dev/bus/usb/003/016
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时候就觉得很蹊跷，只更新了内核，其他都没有变，为什么行为就会不同。于是翻了翻 Linux 内核的 ChangeLog，因为 6.2.12 是好的，6.2.14 是不工作的，所以只需要看两者之间的 changelog：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cdn.kernel.org/pub/linux/kernel/v6.x/ChangeLog-6.2.13&#34;&gt;6.2.13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cdn.kernel.org/pub/linux/kernel/v6.x/ChangeLog-6.2.14&#34;&gt;6.2.14&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以 ftdi 或 usb 为关键词搜索，只有一个看起来有一些相关的 commit：&lt;code&gt;USB: serial: option: add UNISOC vendor and TOZED LT70C product&lt;/code&gt;，但是仔细一看，只是添加了新的 VID/PID，也没有和 Digilent 下载器冲突。&lt;/p&gt;
&lt;p&gt;这时候，就觉得不是 Linux 的问题了。按照这个思路，继续控制变量法，看看是不是 FTDI 芯片出了问题。这时候就祭出了 OpenOCD，看看 OpenOCD 能否配置 FTDI 芯片进入 MPSSE 模式，并且找到 FPGA。试了一下，还真可以，ftdi_sio 正常 detach，然后 OpenOCD 也找到 FPGA 了。&lt;/p&gt;
&lt;p&gt;但此时再打开 Vivado，还是找不到设备，说明不是 MPSSE 模式的问题。考虑到 Vivado 访问硬件的进程是 hw_server，想到能不能看看 hw_server 的日志。&lt;/p&gt;
&lt;p&gt;运行 hw_server，打印所有日志类型：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ hw_server -L- -l alloc,eventcore,waitpid,events,protocol,context,children,discovery,asyncreq,proxy,tcflog,elf,stack,plugin,shutdown,disasm,jtag2,jtag,pcie,slave,dpc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里 &lt;code&gt;-L-&lt;/code&gt; 表示输出日志到 stderr，后面的 &lt;code&gt;-l&lt;/code&gt; 一串参数就是各种日志开关。在两个内核里都运行一次，比对日志，发现了不同：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Success &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.2.12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TCF 08:39:37.247: jtagpoll: add node 0xxxxxxxx&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;jsn-JTAG-SMT2NC-XXXXXXXXXXXX&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TCF 08:39:37.247: Node 000000FF, added jsn-JTAG-SMT2NC-XXXXXXXXXXXX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Failed &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.2.14&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TCF 08:45:12.385: jtagpoll: cannot get port description list: ftdidb_lock failed: FTDMGR wasn&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t properly initialized
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TCF 08:45:12.391: jtagpoll: cannot get port description list: JTAG device enumeration failed: Initialization of the DPCOMM library failed.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;终于看到了错误信息：&lt;code&gt;jtagpoll: cannot get port description list: ftdidb_lock failed: FTDMGR wasn&#39;t properly initialized&lt;/code&gt;。把这个作为关键词一搜索，果然有别人也遇到了同样的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.xilinx.com/s/article/000033531?language=en_US&#34;&gt;XSDB fails with &amp;ldquo;ftdidb_lock failed: FTDMGR wasn&amp;rsquo;t properly initialized&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.t123yh.xyz:2/index.php/archives/1013&#34;&gt;Linux 多用户环境下 Vivado 无法连接 Digilent JTAG 适配器的解决方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尝试了第一篇文章的解决方案，没有效果。第二篇文章指出的问题是，多用户环境下，多个用户抢同一个文件，然后出现权限问题，所以要删掉文件再启动。按照第二篇文档的方法尝试了一下，也没有解决问题。&lt;/p&gt;
&lt;p&gt;但是第二篇文章给出了一个调试方法：运行 Digilent 提供的 dadutil 程序，看看它是否可以识别下载器，果然复现出问题了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ERROR: DmgrSetNetworkEnumTimeout failed, erc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3090&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Found &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; device&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Found &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; device&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ERROR: DmgrSetNetworkEnumTimeout failed, erc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3090&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到这里多次尝试，发现有三分之一的概率会失败，但已经足够解释为什么 hw_server 不工作了：大概率它也调用了 Digilent 提供的代码，得到了同样的结果，所以失败了。&lt;/p&gt;
&lt;p&gt;上面第二篇文章用 strace 的方法找到了问题，照葫芦画瓢，用 strace 找到出错的日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ strace dadutil enum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AT_FDCWD, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/dev/shm/digilent-adept2-mtx-ftdmgr&amp;#34;&lt;/span&gt;, O_RDWR|O_NOFOLLOW|O_CLOEXEC&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ftruncate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;7, 4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                         &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 4, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_32BIT, 7, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -1 ENOMEM &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cannot allocate memory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;close&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;7&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                                &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以发现问题是返回了 ENOMEM，这就很奇怪了，&lt;code&gt;/dev/shm&lt;/code&gt; 是个 tmpfs，还有很多空间，怎么会返回 ENOMEM 呢？&lt;/p&gt;
&lt;h2 id=&#34;柳暗花明又一村&#34;&gt;柳暗花明又一村&lt;/h2&gt;
&lt;p&gt;按照新线索继续研究：mmap 返回了不应该返回的错误，那是不是 6.2.13 或 6.2.14 引入了相关改动呢？一查，还真有：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# https://cdn.kernel.org/pub/linux/kernel/v6.x/ChangeLog-6.2.13
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;commit 0d30989fe9a176565d360376d4bc2ea1c61cbbac
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Author: Liam R. Howlett &amp;lt;Liam.Howlett@oracle.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Date:   Fri Apr 14 14:59:19 2023 -0400
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mm/mmap: regression fix for unmapped_area{_topdown}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    commit 58c5d0d6d522112577c7eeb71d382ea642ed7be4 upstream.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    The maple tree limits the gap returned to a window that specifically fits
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    what was asked.  This may not be optimal in the case of switching search
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    directions or a gap that does not satisfy the requested space for other
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    reasons.  Fix the search by retrying the operation and limiting the search
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    window in the rare occasion that a conflict occurs.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Link: https://lkml.kernel.org/r/20230414185919.4175572-1-Liam.Howlett@oracle.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Fixes: 3499a13168da (&amp;#34;mm/mmap: use maple tree for unmapped_area{_topdown}&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Signed-off-by: Liam R. Howlett &amp;lt;Liam.Howlett@oracle.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Reported-by: Rick Edgecombe &amp;lt;rick.p.edgecombe@intel.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Cc: &amp;lt;stable@vger.kernel.org&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Signed-off-by: Andrew Morton &amp;lt;akpm@linux-foundation.org&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Signed-off-by: Greg Kroah-Hartman &amp;lt;gregkh@linuxfoundation.org&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和 mmap 相关，点进&lt;a href=&#34;https://lkml.kernel.org/r/20230414185919.4175572-1-Liam.Howlett@oracle.com&#34;&gt;邮件链接&lt;/a&gt;看看，发现有人提出这个 commit 虽然修复了一个 BUG，但是引入了新的 BUG：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Re: [PATCH v2] mm/mmap: Regression fix for unmapped_area{_topdown}
  2023-04-14 18:59   ` [PATCH v2] &amp;#34; Liam R. Howlett
  2023-04-14 19:09     ` Andrew Morton
@ 2023-04-29 14:32     ` Tad
  2023-04-30 22:41       ` Michael Keyes
  1 sibling, 1 reply; 18+ messages in thread
From: Tad @ 2023-04-29 14:32 UTC (permalink / raw)
  To: liam.howlett; +Cc: akpm, linux-kernel, linux-mm, rick.p.edgecombe

This reintroduces the issue described in
https://lore.kernel.org/linux-mm/cb8dc31a-fef2-1d09-f133-e9f7b9f9e77a@sony.com/

Linux 6.2.13 can no longer successfully run the mmap-test reproducer linked
there.

Linux 6.2.12 passes.

Regards,
Tad.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再继续跟踪上面的&lt;a href=&#34;https://lore.kernel.org/linux-mm/cb8dc31a-fef2-1d09-f133-e9f7b9f9e77a@sony.com/&#34;&gt;链接&lt;/a&gt;，赫然看到里面的错误日志里，也出现了类似的 mmap 调用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 131072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_32BIT, -1, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x40720000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 131072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_32BIT, -1, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x4124e000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 131072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_32BIT, -1, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -1 ENOMEM &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cannot allocate memory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; dex2oatd F 03-01 10:32:33 &lt;span style=&#34;color:#ae81ff&#34;&gt;74063&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74063&lt;/span&gt; mem_map_arena_pool.cc:65&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Check failed: map.IsValid&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; Failed anonymous mmap&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;nil&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, 131072, 0x3, 0x22, -1, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: Cannot allocate memory. See process maps in the log.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再看看上面 &lt;code&gt;dadutil enum&lt;/code&gt; 报错的 mmap 日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mmap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL, 4, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_32BIT, 7, 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -1 ENOMEM &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cannot allocate memory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;赫然也是 MAP_32BIT，结果也是 ENOMEM，那说明就是这个问题了。结合邮件列表的其他讨论，基本可以确认是作者忽略了 MAP_32BIT 的情况，所以出现了问题。&lt;/p&gt;
&lt;p&gt;从 Linux 6.2.14 回滚出问题的 commit 以后，问题解决了。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;这就是整个 Debug 流程，从 Vivado 找不到 FPGA 的表象，到内在的 Linux 内核 BUG，看起来毫不相关，但却能发现背后的逻辑。&lt;/p&gt;
&lt;p&gt;我和 @vowstar 一起完成了整个调试的流程，学到了许多，因此写了这篇博客。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>链接器的工作原理</title>
      <link>https://jia.je/software/2023/05/06/linker/</link>
      <pubDate>Sat, 06 May 2023 12:09:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2023/05/06/linker/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近和同学讨论一些比较复杂的链接问题，遇到一些比较复杂的情况，因此复习一遍链接器的工作原理。&lt;/p&gt;
&lt;h2 id=&#34;编译&#34;&gt;编译&lt;/h2&gt;
&lt;p&gt;编译器会把源文件编译成 obj，obj 里面有符号表，定义了不同的符号类型。常见的代码与符号的对应关系：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .bss section if -fno-common
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// common symbol if -fcommon
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; uninitialized;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .bss section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; initialized &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .data section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; initialized_one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .rodata section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; const_initialized &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .rodata section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; const_initialized_one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global undefined symbol
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; external;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// local in .bss section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; static_uninitialized;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// local in .bss section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; static_initialized &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// local in .data section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; static_initialized_one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// local in .rodata section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; const_static_initialized &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// local in .rodata section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; const_static_initialized_one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .text section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;simple_function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// local in .bss section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; static_in_function &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .text section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;access_external&lt;/span&gt;() { external &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global undefined symbol
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;external_function&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .text section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;call_external&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;external_function&lt;/span&gt;(); }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// local in .text section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;static_function&lt;/span&gt;() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// weak in .text section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;__attribute__&lt;/span&gt; ((weak)) &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weak_function&lt;/span&gt;() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// global in .text section marked .hidden
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;__attribute__&lt;/span&gt; ((&lt;span style=&#34;color:#a6e22e&#34;&gt;visibility&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt;))) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hidden_function&lt;/span&gt;() {}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;readelf -s&lt;/code&gt; 查看符号表：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;   Num:    Value          Size Type    Bind   Vis      Ndx Name
     6: 0000000000000008     4 OBJECT  LOCAL  DEFAULT    4 static_uninitialized
     7: 000000000000000c     4 OBJECT  LOCAL  DEFAULT    4 static_initialized
     8: 0000000000000004     4 OBJECT  LOCAL  DEFAULT    3 static_initializ[...]
     9: 0000000000000008     4 OBJECT  LOCAL  DEFAULT    5 const_static_ini[...]
    10: 000000000000000c     4 OBJECT  LOCAL  DEFAULT    5 const_static_ini[...]
    11: 0000000000000029     7 FUNC    LOCAL  DEFAULT    1 static_function
    12: 0000000000000010     4 OBJECT  LOCAL  DEFAULT    4 static_in_function.0
    16: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    4 uninitialized
    17: 0000000000000004     4 OBJECT  GLOBAL DEFAULT    4 initialized
    18: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    3 initialized_one
    19: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    5 const_initialized
    20: 0000000000000004     4 OBJECT  GLOBAL DEFAULT    5 const_initialized_one
    21: 0000000000000000     7 FUNC    GLOBAL DEFAULT    1 simple_function
    22: 0000000000000007    17 FUNC    GLOBAL DEFAULT    1 access_external
    23: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND external
    24: 0000000000000018    17 FUNC    GLOBAL DEFAULT    1 call_external
    25: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _GLOBAL_OFFSET_TABLE_
    26: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND external_function
    27: 0000000000000030    11 FUNC    WEAK   DEFAULT    1 weak_function
    28: 000000000000003b     7 FUNC    GLOBAL HIDDEN     1 hidden_function
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;总结一下，每个符号有如下属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bind：Local（static）、Global（extern 或者非 static）、Weak（标记 &lt;code&gt;__attribute__ ((weak))&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;Vis(Visibility): Default、Hidden（标记 &lt;code&gt;__attribute__ ((visibility (&amp;quot;hidden&amp;quot;)))&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;Ndx：
&lt;ol&gt;
&lt;li&gt;COMMON：如果打开了 -fcommon，那么没有初始化的全局变量（上面的 &lt;code&gt;uninitialized&lt;/code&gt;）会生成 COMMON 符号；如果打开了 -fno-common，则不会有 COMMON 符号&lt;/li&gt;
&lt;li&gt;UNDEFINED：extern 符号&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Section:
&lt;ol&gt;
&lt;li&gt;const 变量放在 .rodata section&lt;/li&gt;
&lt;li&gt;非 const 变量，如果没有初始化，如果开了 -fcommon，则生成 COMMON 符号；如果开了 -fno-common，则放在 .bss section&lt;/li&gt;
&lt;li&gt;非 const 变量，如果初始化了，放在 .data section&lt;/li&gt;
&lt;li&gt;函数放在 .text section&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于 COMMON 符号的详细内容，建议阅读 &lt;a href=&#34;https://maskray.me/blog/2022-02-06-all-about-common-symbols&#34;&gt;All about COMMON symbols - MaskRay&lt;/a&gt; 和 &lt;a href=&#34;https://jia.je/software/2022/07/11/archive-common-linking/&#34;&gt;COMMON 符号&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;链接&#34;&gt;链接&lt;/h2&gt;
&lt;p&gt;链接要做的是把多个 obj 合并成一个可执行文件或者动态库，主要目的是将一个 obj 中定义的符号与另一个 obj 中 undefined 的符号对应起来。&lt;/p&gt;
&lt;p&gt;链接器运行时，传入若干个 obj 文件，然后按照下面的流程进行：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;维护一个全局的符号表&lt;/li&gt;
&lt;li&gt;循环每个 obj 文件，循环其中的符号，找到其中的 GLOBAL/WEAK 符号&lt;/li&gt;
&lt;li&gt;把 GLOBAL/WEAK 符号插入到符号表中，处理各种情况，例如：
&lt;ol&gt;
&lt;li&gt;如果出现两个 defined 符号冲突，报告 multiple definition 错误&lt;/li&gt;
&lt;li&gt;如果出现重名的 weak 符号和 strong 符号，选择保留 strong 的符号&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;如果存在没有找到匹配的 defined 符号的 undefined 符号，报告 undefined reference 错误&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;符号表是在解析 obj 文件的同时动态更新的，因此，如果 A 使用了 B 的符号，那么应该把 A 放在前面，这样链接器解析 A 的时候会在符号表中创建 undefined 符号，然后 B 在后面，当链接器解析 B 的时候，就可以把 B 的 defined 符号与 A 的 undefined 符号进行匹配。&lt;/p&gt;
&lt;h2 id=&#34;静态库&#34;&gt;静态库&lt;/h2&gt;
&lt;p&gt;静态库将多个 .o 合并为一个 .a，并且创建了索引。具体来说，创建一个静态库的时候：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ar rcs libxxx.a obj1.o obj2.o obj3.o ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成的 .a 会包括所有的 .o，然后创建索引（&lt;code&gt;ar rcs&lt;/code&gt; 中的 &lt;code&gt;s&lt;/code&gt;，会运行 &lt;code&gt;ranlib&lt;/code&gt; 命令），索引的内容是一个符号到 .o 文件的映射：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nm -s /lib/x86_64-linux-gnu/libc.a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Archive index:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;__printf in printf.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_IO_printf in printf.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;printf in printf.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;__scanf in scanf.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scanf in scanf.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此，链接器在遇到参数是 .a 的静态库的时候，不会查看里面的每个 .o 文件，而是从 Archive index 入手，如果当前的符号表依赖了 Archive index 中的符号，那就加载相应的 .o 文件。&lt;/p&gt;
&lt;h2 id=&#34;动态库&#34;&gt;动态库&lt;/h2&gt;
&lt;p&gt;生成动态库的方法是，编译的时候添加 &lt;code&gt;-fPIC&lt;/code&gt; 选项，链接的时候添加 &lt;code&gt;-shared&lt;/code&gt; 编译参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc -fPIC -c source1.c -o source1.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc -shared source1.o -o libtest.so.0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# oneliner:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc -fPIC -shared source1.c -o libtest.so.0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时代码中定义的函数会出现在 Dynamic Symbol Table 中，可以用 &lt;code&gt;objdump -T&lt;/code&gt; 命令查看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat source1.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;int simple_function&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -T libtest.so.0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libtest.so.0.0.0:     file format elf64-x86-64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DYNAMIC SYMBOL TABLE:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  w   D  *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; __cxa_finalize
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  w   D  *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; _ITM_registerTMCloneTable
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  w   D  *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; _ITM_deregisterTMCloneTable
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  w   D  *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; __gmon_start__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000000010f9 g    DF .text  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000007&lt;/span&gt; simple_function
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果代码中用了 libc 的一些函数，那么这些函数则会以 undefined symbol 的形式出现在 Dynamic Symbol Table 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat source1.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;int simple_function&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Simple function&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -T libtest.so.0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libtest.so.0.0.0:     file format elf64-x86-64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DYNAMIC SYMBOL TABLE:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  w   D  *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  Base        _ITM_deregisterTMCloneTable
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;      DF *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GLIBC_2.2.5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; printf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  w   D  *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  Base        __gmon_start__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  w   D  *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  Base        _ITM_registerTMCloneTable
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  w   DF *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GLIBC_2.2.5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; __cxa_finalize
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000001109&lt;/span&gt; g    DF .text  000000000000001b  Base        simple_function
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;符号版本&#34;&gt;符号版本&lt;/h3&gt;
&lt;p&gt;中间出现的 Base 或者 GLIBC_2.2.5 是符号的版本号，这样做的目的是为了兼容性：假如某天 glibc 想要给一个函数添加一个新的参数，但是现有的程序编译的时候动态链接了旧版本的 glibc，新旧两个版本的函数名字一样，但是功能却不一样，如果直接让旧程序用新 glibc 的函数，就会出现问题。即使参数不变，如果函数的语义变了，也可能带来不兼容的问题。&lt;/p&gt;
&lt;p&gt;解决办法是给符号添加版本号，这样旧版本的程序会继续找到旧版本的符号，解决了兼容性的问题。例如 memcpy 在 glibc 中就有两个版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -T /lib/x86_64-linux-gnu/libc.so.6 | grep memcpy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000000a2b70 g    DF .text  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000028&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GLIBC_2.2.5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; memcpy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000000000009bc50 g   iD  .text  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000109&lt;/span&gt;  GLIBC_2.14  memcpy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;a href=&#34;https://github.com/bminor/glibc/blob/a363f7075125fa654342c69331e6c075518ec28c/sysdeps/x86_64/multiarch/memcpy.c#LL38C11-L38C11&#34;&gt;glibc 代码&lt;/a&gt;中，通过 &lt;code&gt;versioned_symbol&lt;/code&gt; 宏来实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;versioned_symbol&lt;/span&gt; (libc, __new_memcpy, memcpy, GLIBC_2_14);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更多关于符号版本的内容，可以阅读 &lt;a href=&#34;https://maskray.me/blog/2020-11-26-all-about-symbol-versioning&#34;&gt;All about symbol versioning&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;动态链接&#34;&gt;动态链接&lt;/h3&gt;
&lt;p&gt;编译好动态链接库以后，可以在链接的时候，作为参数引入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat main.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;extern void simple_function&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;int main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; simple_function&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc main.c libtest.so.0.0.0 -o main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ LD_LIRBARY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PWD ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Simple &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以观察一下发生了什么事情：首先，链接的时候，会找到 &lt;code&gt;libtest.so.0.0.0&lt;/code&gt; 导出的符号表，发现它定义了 &lt;code&gt;main.c&lt;/code&gt; 缺少的 &lt;code&gt;simple_function&lt;/code&gt; 函数，因此链接不会出错。但是，函数本身没有被链接到 &lt;code&gt;main&lt;/code&gt; 里面，需要在运行时去加载动态库，这样 &lt;code&gt;main&lt;/code&gt; 才可以调用函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -t main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;       F *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;              simple_function
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -T main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;      DF *UND*  &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;  Base        simple_function
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ readelf -d ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dynamic section at offset 0x2dd0 contains &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; entries:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Tag        Type                         Name/Value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libtest.so.0.0.0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libc.so.6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./main: error &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; loading shared libraries: libtest.so.0.0.0: cannot open shared object file: No such file or directory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldd ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        linux-vdso.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007ffe07dbc000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libtest.so.0.0.0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; not found
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f83ee3fb000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        /lib64/ld-linux-x86-64.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f83ee602000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ LD_LIBRARY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PWD ldd ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        linux-vdso.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007fffb0bd5000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libtest.so.0.0.0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /tmp/libtest.so.0.0.0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f985b3db000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f985b1db000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        /lib64/ld-linux-x86-64.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f985b3e7000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先可以看到，二进制里面 &lt;code&gt;simple_function&lt;/code&gt; 依然属于 undefined 状态。但 &lt;code&gt;main&lt;/code&gt; 也指定了 NEEDED libtest.so.0.0.0，那么在运行的时候，ld.so 就会去寻找这个动态库。由于当前路径不在系统默认路径中，直接运行是找不到的（&lt;code&gt;not found&lt;/code&gt;），这里的解决办法是添加动态库的路径到 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; 中。&lt;/p&gt;
&lt;h3 id=&#34;soname&#34;&gt;soname&lt;/h3&gt;
&lt;p&gt;上述例子中，编译出来的动态库名称带有完整的版本号：&lt;code&gt;major.minor.patch=0.0.0&lt;/code&gt;，但一般认为，如果 &lt;code&gt;major&lt;/code&gt; 版本号没有变，可以认为是 ABI 兼容的，可以更新动态库的版本，而不用重新编译程序。但是，上面的例子里，&lt;code&gt;readelf -d main&lt;/code&gt; 显示 NEEDED 的动态库名字里也包括了完整的版本号，那就没有办法寻找到同 major 的不同版本了。&lt;/p&gt;
&lt;p&gt;解决办法是让同 major 的不同版本共享同一个 soname，常见的做法就是只保留 major 版本号：&lt;code&gt;libtest.so.0&lt;/code&gt;，而不是 &lt;code&gt;libtest.so.0.0.0&lt;/code&gt;。在编译动态库的时候，通过 &lt;code&gt;-Wl,-soname,libtest.so.0&lt;/code&gt; 参数来指定 soname：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc -fPIC -shared source1.c -Wl,-soname,libtest.so.0 -o libtest.so.0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc main.c libtest.so.0.0.0 -o main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ readelf -d main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Tag        Type                         Name/Value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libtest.so.0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libc.so.6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时可以看到 NEEDED 的动态库名字已经是预期的 &lt;code&gt;libtest.so.0&lt;/code&gt;，这意味着 &lt;code&gt;main&lt;/code&gt; 函数在动态加载的时候，不考虑小版本，只指定了 &lt;code&gt;major&lt;/code&gt; 版本为 0 的 libtest 动态库。但单是这样还不能运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ LD_LIBRARY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PWD ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./main: error &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; loading shared libraries: libtest.so.0: cannot open shared object file: No such file or directory
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;毕竟 ld.so 要找的是 &lt;code&gt;libtest.so.0&lt;/code&gt;，但是文件系统里只有 &lt;code&gt;libtest.so.0.0.0&lt;/code&gt;，最后的这一步用符号链接来实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ln -s libtest.so.0.0.0 libtest.so.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ LD_LIBRARY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PWD ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Simple &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样，如果哪天发布了 libtest.so 的 0.0.1 版本，只需要修改符号链接 &lt;code&gt;libtest.so.0 -&amp;gt; libtest.so.0.0.1&lt;/code&gt; 即可，不需要重新编译 &lt;code&gt;main&lt;/code&gt; 程序。&lt;/p&gt;
&lt;p&gt;想要查看动态库的 soname，可以用 &lt;code&gt;readelf -d&lt;/code&gt; 查看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ readelf -d libtest.so.0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Tag        Type                         Name/Value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libc.so.6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x000000000000000e &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SONAME&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Library soname: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libtest.so.0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cuda&#34;&gt;cuda&lt;/h3&gt;
&lt;p&gt;在 CUDA 中，如果程序需要访问 NVML 或者一些底层的 CUDA 函数，会链接到 libcuda（而不是 libcudart），但是如果在 CUDA 目录下寻找 libcuda，只会找到一个 &lt;code&gt;targets/x86_64-linux/lib/stubs/libcuda.so&lt;/code&gt;，里面的函数都是空的，只有一个 &lt;code&gt;retq&lt;/code&gt; 指令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -S ./targets/x86_64-linux/lib/stubs/libcuda.so
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./targets/x86_64-linux/lib/stubs/libcuda.so:     file format elf64-x86-64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Disassembly of section .text:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000007370&lt;/span&gt; &amp;lt;cuGetErrorString&amp;gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    7370:       b8 &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;          mov    $0x22,%eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    7375:       c3                      retq
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    7376:       &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; 2e 0f 1f &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;    nopw   %cs:0x0&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rax,%rax,1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    737d:       &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000007380&lt;/span&gt; &amp;lt;cuGetErrorName&amp;gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    7380:       b8 &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;          mov    $0x22,%eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    7385:       c3                      retq
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    7386:       &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; 2e 0f 1f &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;    nopw   %cs:0x0&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rax,%rax,1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    738d:       &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个 &lt;code&gt;libcuda.so&lt;/code&gt; 用途就是导出了所有可能会用到的符号，并且设置 &lt;code&gt;soname&lt;/code&gt; 为 &lt;code&gt;libcuda.so.1&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ readelf -d ./targets/x86_64-linux/lib/stubs/libcuda.so
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dynamic section at offset 0xdf30 contains &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; entries:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Tag        Type                         Name/Value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x000000000000000e &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SONAME&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Library soname: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libcuda.so.1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就意味着，&lt;code&gt;ld.so&lt;/code&gt; 会去寻找 &lt;code&gt;libcuda.so.1&lt;/code&gt;，而不是 &lt;code&gt;libcuda&lt;/code&gt;。前者才是真正实现了 CUDA Driver 的动态库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dpkg -S libcuda.so.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libnvidia-compute-470:amd64: /usr/lib/x86_64-linux-gnu/libcuda.so.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls -alh /usr/lib/x86_64-linux-gnu/libcuda.so.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; May &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2022&lt;/span&gt; /usr/lib/x86_64-linux-gnu/libcuda.so.1 -&amp;gt; libcuda.so.470.129.06
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而 CUDA Driver 的实现和 NVIDIA Driver 的版本是绑定的，因此 &lt;code&gt;libcuda.so.1&lt;/code&gt; 是软链接，软链接到对应驱动版本的 &lt;code&gt;libcuda.so&lt;/code&gt;。这样做的好处就是，编译 CUDA 的机器，不需要安装 NVIDIA Driver，CUDA 也不需要自己带一份 CUDA Driver 进来，节省了空间。&lt;/p&gt;
&lt;p&gt;像 pytorch 这种支持 CUDA 的程序，不会在链接的时候链接到 &lt;code&gt;libcuda&lt;/code&gt; 上，而是在用户需要的时候，去 &lt;code&gt;dlopen&lt;/code&gt;。这样即使用户的电脑上没有装 NVIDIA Driver，也可以运行支持 CUDA 的 pytorch。&lt;/p&gt;
&lt;h3 id=&#34;dynamic-linkerloader&#34;&gt;dynamic linker/loader&lt;/h3&gt;
&lt;p&gt;前文讲到，动态链接库参与链接的时候，实际上函数本身没有链接进可执行程序，最后的加载是由 dynamic linker/loader 完成的，在 linux 上是 ld.so，在 macOS 上是 dyld。它在程序启动的时候，负责根据 NEEDED 信息，知道程序要加载哪些动态库，然后去文件系统里找，如果找到了，就把相应的动态库加载到内存中，然后把可执行程序中对动态链接库的函数调用，变成真实的地址。相当于把原来静态链接的时候，链接器做的事情，挪到了程序运行开始时，即 linking at run time。&lt;/p&gt;
&lt;p&gt;那么这里就涉及到一个问题了：NEEDED 只记录了文件名，但是却没有路径。这意味着动态库也需要用类似 PATH 的机制，在一些路径里去寻找一个想要的动态库。例如前文修改 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;，实际上就是告诉 ld.so，可以在这个环境变量指向的路径中寻找动态库的文件。&lt;/p&gt;
&lt;p&gt;而用系统包管理器安装的动态库，一般不需要修改 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; 也可以用。这是靠 &lt;code&gt;/etc/ld.so.cache&lt;/code&gt; 文件实现的。在动态库相关的问题里，经常会看到运行 &lt;code&gt;ldconfig&lt;/code&gt; 命令。这个命令的用途是，收集系统目录里的动态库，建立一个索引，保存在 &lt;code&gt;/etc/ld.so.cache&lt;/code&gt; 文件中。然后 ld.so 直接去 &lt;code&gt;/etc/ld.so.cache&lt;/code&gt; 中寻找 NEEDED 的动态库对应的文件系统中的路径，不需要再重新扫描一遍目录了。所以 &lt;code&gt;/etc/ld.so.cache&lt;/code&gt; 就是一个文件系统中动态库的缓存，这也就是为啥叫做 &lt;code&gt;ld.so.cache&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;既然是缓存，就要考虑缓存和实际对不上的情况，这就是为啥要运行 &lt;code&gt;ldconfig&lt;/code&gt; 命令更新缓存。当然了，包管理器会自动运行 &lt;code&gt;ldconfig&lt;/code&gt;，只有自己 &lt;code&gt;make install&lt;/code&gt; 一些库的时候，才需要手动进行 &lt;code&gt;ldconfig&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ldconfig&lt;/code&gt; 会从 &lt;code&gt;/etc/ld.so.conf&lt;/code&gt; 中配置的路径中扫描动态链接库，常见的路径包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/lib/x86_64-linux-gnu&lt;/li&gt;
&lt;li&gt;/usr/lib/x86_64-linux-gnu&lt;/li&gt;
&lt;li&gt;/usr/local/lib&lt;/li&gt;
&lt;li&gt;/usr/local/lib/x86_64-linux-gnu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;包管理器安装的动态库基本都在这些目录中。可以用 &lt;code&gt;ldconfig -p&lt;/code&gt; 来查看缓存 &lt;code&gt;ld.so.cache&lt;/code&gt; 的内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ /sbin/ldconfig -p
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1967&lt;/span&gt; libs found in cache &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;/etc/ld.so.cache&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libz3.so.4 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;libc6,x86-64&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libz3.so.4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libz3.so &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;libc6,x86-64&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libz3.so
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ld-linux.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ELF&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/i386-linux-gnu/ld-linux.so.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ld-linux.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ELF&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib32/ld-linux.so.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ld-linux.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ELF&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/ld-linux.so.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ld-linux-x86-64.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;libc6,x86-64&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ld-linux-x32.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;libc6,x32&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /libx32/ld-linux-x32.so.2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;维护了 soname 到文件系统中动态库文件的映射。并且添加了一些属性来帮助 ld.so 进行过滤和选择。&lt;/p&gt;
&lt;h3 id=&#34;rpath&#34;&gt;rpath&lt;/h3&gt;
&lt;p&gt;除了 LD_LIBRARY_PATH 和 &lt;code&gt;/etc/ld.so.cache&lt;/code&gt;，ld.so 还可以通过 rpath 来寻找动态库。设想要打包一个 Qt 程序，希望在别人的机器上可以直接跑，但是别人的机器上不一定有 Qt，因此需要把程序和 Qt 的各种动态库打包在一起。但是，这时候 Qt 的动态库不会在系统路径中，不会被 &lt;code&gt;ldconfig&lt;/code&gt; 索引。一种办法就是写一个脚本，设置一下 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;，再启动 Qt 程序。另一种办法，就是利用 rpath：在程序中就告诉 ld.so 去哪里找它依赖（NEEDED）的动态库。这个路径可以是相对于可执行文件的路径。&lt;/p&gt;
&lt;p&gt;设置 &lt;code&gt;rpath&lt;/code&gt; 的方法是，编译的时候添加 &lt;code&gt;-Wl,-rpath,RPATH&lt;/code&gt; 选项，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc main.c libtest.so.0.0.0 -o main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./main: error &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; loading shared libraries: libtest.so.0: cannot open shared object file: No such file or directory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc main.c libtest.so.0.0.0 -Wl,-rpath,$PWD -o main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Simple &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ readelf -d main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Tag        Type                         Name/Value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libtest.so.0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libc.so.6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x000000000000001d &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;RUNPATH&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;            Library runpath: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;/tmp&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc main.c libtest.so.0.0.0 -Wl,-rpath,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$ORIGIN&amp;#39;&lt;/span&gt; -o main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Simple &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ readelf -d main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Tag        Type                         Name/Value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libtest.so.0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0000000000000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NEEDED&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;             Shared library: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;libc.so.6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x000000000000001d &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;RUNPATH&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;            Library runpath: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;$ORIGIN&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一个编译命令不带 &lt;code&gt;rpath&lt;/code&gt;，因此 ld.so 会找不到动态库，可以添加 LD_LIBRARY_PATH 的办法来解决。第二个和第三个编译命令带 &lt;code&gt;rpath&lt;/code&gt;，其中第二个使用了绝对路径，第三个使用了相对路径（&lt;code&gt;$ORIGIN&lt;/code&gt; 表示可执行文件所在的目录）。那么，ld.so 在寻找 libtest.so.0 的时候，会在 RUNPATH 中进行寻找。&lt;/p&gt;
&lt;h3 id=&#34;调试&#34;&gt;调试&lt;/h3&gt;
&lt;p&gt;动态链接经常会遇到各种找不到动态库的问题，需要使用一些工具来帮助找到问题。最常用的就是 &lt;code&gt;ldd&lt;/code&gt; 命令，显示一个程序依赖的动态库以及路径：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldd &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;which vim&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        linux-vdso.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007fff599a4000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libm.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libm.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f0504dfc000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libtinfo.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libtinfo.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f0504dc9000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libselinux.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libselinux.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f0504d9b000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libsodium.so.23 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libsodium.so.23 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f05049a6000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libacl.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libacl.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f0504d90000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libgpm.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libgpm.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f050499e000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f05047bd000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        /lib64/ld-linux-x86-64.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f0504f07000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libpcre2-8.so.0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libpcre2-8.so.0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f0504723000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libpthread.so.0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f0504d89000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然了，&lt;code&gt;ldd&lt;/code&gt; 有一定的风险，不建议在不信任的程序上运行 &lt;code&gt;ldd&lt;/code&gt;，详情见 &lt;a href=&#34;https://man7.org/linux/man-pages/man1/ldd.1.html&#34;&gt;ldd.1&lt;/a&gt;。更稳妥的方法是用 &lt;code&gt;objdump -p&lt;/code&gt; 或者 &lt;code&gt;readelf -d&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -p &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;which vim&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; | grep NEEDED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ readelf -d &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;which vim&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; | grep NEEDED
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是 ldd 可以打印出动态库依赖的动态库，而 objdump 和 readelf 只会打印直接依赖。也可以设置环境变量，让 ld.so 打印出加载的动态库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ export LD_DEBUG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;files
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;libtest.so.0 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;  needed by ./main &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;libtest.so.0 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;  generating link map
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:       dynamic: 0x00007fcd57c23df8  base: 0x00007fcd57c20000   size: 0x0000000000004018
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:         entry: 0x00007fcd57c20000  phdr: 0x00007fcd57c20040  phnum:                  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;  needed by ./main &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;  generating link map
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:       dynamic: 0x00007fcd57bf1b60  base: 0x00007fcd57a20000   size: 0x00000000001e0f50
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:         entry: 0x00007fcd57a47350  phdr: 0x00007fcd57a20040  phnum:                 &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     calling init: /lib64/ld-linux-x86-64.so.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     calling init: /lib/x86_64-linux-gnu/libc.so.6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     calling init: /tmp/libtest.so.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     initialize program: ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     transferring control: ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     calling fini: ./main &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   2243766:     calling fini: /tmp/libtest.so.0 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Simple &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;macos&#34;&gt;macOS&lt;/h3&gt;
&lt;p&gt;macOS 与 Linux 下动态库的使用方法基本类似，但有一些细微的差别。首先是 macOS 上的动态库的后缀用的是 dylib 而不是 so：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc -fPIC -shared source1.c -o libtest.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc main.c libtest.dylib -o main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -t libtest.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libtest.dylib:  file format mach-o arm64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SYMBOL TABLE:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000003f7c g     F __TEXT,__text _simple_function
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;         *UND* _printf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -t main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main:   file format mach-o arm64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SYMBOL TABLE:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000100000000&lt;/span&gt; g     F __TEXT,__text __mh_execute_header
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000100003f94 g     F __TEXT,__text _main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;         *UND* _simple_function
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;虽然这里用的是 gcc 命令，但实际上 macOS 上的 gcc 命令是 clang。这里直接用 clang 命令也是一样的。可以看到，这里的可执行文件中 &lt;code&gt;simple_function&lt;/code&gt; 函数也是处于 undefined 状态，需要在运行时由 &lt;code&gt;libtest.dylib&lt;/code&gt; 提供。&lt;/p&gt;
&lt;p&gt;macOS 下的动态链接器是 dyld，它会解析 MachO 的 Load command 去加载动态库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -p main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Load command &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          cmd LC_LOAD_DYLIB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      cmdsize &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         name libtest.dylib &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;offset 24&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   time stamp &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; Thu Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:00:02 &lt;span style=&#34;color:#ae81ff&#34;&gt;1970&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      current version 0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compatibility version 0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Load command &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          cmd LC_LOAD_DYLIB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      cmdsize &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         name /usr/lib/libSystem.B.dylib &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;offset 24&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   time stamp &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; Thu Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:00:02 &lt;span style=&#34;color:#ae81ff&#34;&gt;1970&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      current version 1319.100.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compatibility version 1.0.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就相当于 Linux 中的 NEEDED，告诉动态链接器要加载哪些动态库。可以用 &lt;code&gt;otool -L&lt;/code&gt; 或者 &lt;code&gt;dyld_info&lt;/code&gt; 命令列出可执行文件所有依赖的动态库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ otool -L main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libtest.dylib &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;compatibility version 0.0.0, current version 0.0.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        /usr/lib/libSystem.B.dylib &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;compatibility version 1.0.0, current version 1319.100.3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dyld_info -dependents main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;arm64&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -dependents:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        attributes     load path
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       libtest.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       /usr/lib/libSystem.B.dylib
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;macOS 也提供了 rpath 的机制，在 &lt;code&gt;LC_LOAD_DYLIB&lt;/code&gt; 中指定 &lt;code&gt;@rpath&lt;/code&gt;，然后通过 &lt;code&gt;LC_RPATH&lt;/code&gt; 指定有哪些 rpath，那么动态链接器就可以根据可执行文件的相对路径去寻找动态库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -p /Applications/Visual&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;Studio&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;Code.app/Contents/MacOS/Electron
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Load command &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          cmd LC_RPATH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      cmdsize &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         path @executable_path/../Frameworks &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;offset 12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Load command &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          cmd LC_LOAD_DYLIB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      cmdsize &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         name @rpath/Electron Framework.framework/Electron Framework &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;offset 24&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   time stamp &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Thu Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1970&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      current version 22.5.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compatibility version 0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Load command &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          cmd LC_LOAD_DYLIB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      cmdsize &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         name /usr/lib/libSystem.B.dylib &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;offset 24&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   time stamp &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Thu Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1970&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      current version 1311.100.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ otool -L /Applications/Visual&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;Studio&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;Code.app/Contents/MacOS/Electron
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/Applications/Visual Studio Code.app/Contents/MacOS/Electron:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        @rpath/Electron Framework.framework/Electron Framework &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;compatibility version 0.0.0, current version 22.5.2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        /usr/lib/libSystem.B.dylib &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;compatibility version 1.0.0, current version 1311.100.3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以让 dyld 动态打印日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ export DYLD_PRINT_LIBRARIES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;F4E9A9E0-E958-3D0C-8D5A-7DC3ABA8E8C4&amp;gt; /Volumes/Data/temp/main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;DD5E30FB-753D-3746-8034-50C56971C47B&amp;gt; /Volumes/Data/temp/libtest.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;4BEBCD61-9E62-39BE-BFD2-C7D0689A826D&amp;gt; /usr/lib/libSystem.B.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;FEA038BA-CC59-3085-93B0-AB8437AA6CE2&amp;gt; /usr/lib/system/libcache.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;34AC4B05-E145-3C58-8C24-1190770EAB31&amp;gt; /usr/lib/system/libcommonCrypto.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;1D6552C4-49C4-374F-8371-198BCFC4174D&amp;gt; /usr/lib/system/libcompiler_rt.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;E61C2838-9EA2-33CE-B96B-85FF38DB7744&amp;gt; /usr/lib/system/libcopyfile.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;4A9F9101-A1B1-3FB7-89EA-746CFCE95099&amp;gt; /usr/lib/system/libcorecrypto.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;C2FD3094-B465-39A4-B774-16583FF53C4B&amp;gt; /usr/lib/system/libdispatch.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;A2947B47-B494-36D4-96C6-95977FFB51FB&amp;gt; /usr/lib/system/libdyld.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;C4512BA5-7CA3-30AE-9793-5CC5417F0FC3&amp;gt; /usr/lib/system/libkeymgr.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;91A88FDF-FD27-32AF-A2CE-70F7E4065C3B&amp;gt; /usr/lib/system/libmacho.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;A2D17FF6-CBC6-3D19-89E1-F5E57191E8A3&amp;gt; /usr/lib/system/libquarantine.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;2213EE66-253B-3234-AA4D-B46F07C3540E&amp;gt; /usr/lib/system/libremovefile.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;68D76774-F8B4-36EA-AA35-0AB4044D56C7&amp;gt; /usr/lib/system/libsystem_asl.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;5541DF62-A795-3F57-A54C-1AEC4DD3E44C&amp;gt; /usr/lib/system/libsystem_blocks.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;95A70E20-1DF3-3DDF-900C-315ED0B2C067&amp;gt; /usr/lib/system/libsystem_c.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;BEB9DE52-6F49-370A-B45B-CBE6780E7083&amp;gt; /usr/lib/system/libsystem_collections.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;121F8B4D-3939-300D-BE22-979D6B476361&amp;gt; /usr/lib/system/libsystem_configuration.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;7CE9526A-B673-363A-8905-71D080974C0E&amp;gt; /usr/lib/system/libsystem_containermanager.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;54BF691A-0908-3548-95F2-34CFD58E5617&amp;gt; /usr/lib/system/libsystem_coreservices.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;579733C7-851D-3B3E-83B5-FD203BA50D02&amp;gt; /usr/lib/system/libsystem_darwin.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;4EFF0147-928F-3321-8268-655FE71DC209&amp;gt; /usr/lib/system/libsystem_dnssd.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;5068382F-DC0F-3824-8ED5-18A24B35FEF9&amp;gt; /usr/lib/system/libsystem_featureflags.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;4448FB99-7B1D-3E15-B7EE-3340FF0DA88D&amp;gt; /usr/lib/system/libsystem_info.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;82E529F5-C4DF-3D42-9113-3A4F87FEF1A0&amp;gt; /usr/lib/system/libsystem_m.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;0AC99C6E-CB01-30E5-AB10-65AB990652A5&amp;gt; /usr/lib/system/libsystem_malloc.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;3B2CC4A9-A5EE-3627-8293-4AF4D891074E&amp;gt; /usr/lib/system/libsystem_networkextension.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;E4AA6E5F-2501-3382-BFB3-64464E6D8254&amp;gt; /usr/lib/system/libsystem_notify.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;99FDEFF2-36F1-3436-B8B2-DE0003B5A4BF&amp;gt; /usr/lib/system/libsystem_sandbox.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;E529D1AC-D20A-3308-9033-E1712A9C655E&amp;gt; /usr/lib/system/libsystem_secinit.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;42F503E2-9273-360A-A086-C1B19BBD3962&amp;gt; /usr/lib/system/libsystem_kernel.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;F80C6971-C080-31F5-AB6E-BE01311154AF&amp;gt; /usr/lib/system/libsystem_platform.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;46D35233-A051-3F4F-BBA4-BA56DDDC4D1A&amp;gt; /usr/lib/system/libsystem_pthread.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;F9F1F4BE-D97F-37A7-8382-552C22DF1BB4&amp;gt; /usr/lib/system/libsystem_symptoms.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;3F3E75B7-F0A7-30BB-9FD7-FD1307FE6055&amp;gt; /usr/lib/system/libsystem_trace.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;E3BF7A76-2CBE-3DB9-8496-8BB6DBBE0CFC&amp;gt; /usr/lib/system/libunwind.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;F3F19227-FF8F-389C-A094-6F4C16E458AF&amp;gt; /usr/lib/system/libxpc.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;52AA13E2-567C-36C2-9494-7B892FDBF245&amp;gt; /usr/lib/libc++abi.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;5BEAFA2B-3AF4-3ED2-B054-1F58A7C851EF&amp;gt; /usr/lib/libobjc.A.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;FB664621-26AE-3F46-8F5A-DD5D890A5CE7&amp;gt; /usr/lib/liboah.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dyld&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;17486&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;54E8FBE1-DF0D-33A2-B8FA-356565C12929&amp;gt; /usr/lib/libc++.1.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Simple &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与 Linux 上的 &lt;code&gt;/etc/ld.so.cache&lt;/code&gt; 类似，macOS 也针对动态库的加载做了优化，但是 macOS 做的更彻底：由于 macOS 的系统库是只读的，于是直接把所有系统库打包成一个文件，这个文件就是 dyld shared cache。可以用 &lt;a href=&#34;https://github.com/keith/dyld-shared-cache-extractor&#34;&gt;keith/dyld-shared-cache-extractor&lt;/a&gt; 来还原出内部的 dylib。在 macOS Ventura 13.4 中，可以解出 2499 个动态库。&lt;/p&gt;
&lt;h2 id=&#34;relocation&#34;&gt;relocation&lt;/h2&gt;
&lt;p&gt;链接器找到符号以后，就需要进行 relocation。在编译的时候，为了准备未来链接时的需要，提前做了一些准备：因为符号的地址还不知道，所以生成一条指令，指令的立即数内包括了符号的地址的信息，但此时还不知道立即数应该是多少，所以编译器把指令的立即数填充为 0，同时生成一个 relocation。当链接器看到 relocation 的时候，在已经排好所有符号的地址的时候，就可以按照 relocation 更新代码。&lt;/p&gt;
&lt;p&gt;由于动态链接库可能会被加载到不同的基地址上，所以为了解决动态链接库内部的符号链接问题，采用 PIC 的方法，即通过指令本身的地址进行相对运算，计算出另一个符号的地址。这样动态链接库加载到不同地址的时候，内部的符号之间都可以正常引用，不需要修改指令，使得动态库可以在不同的进程间共享。&lt;/p&gt;
&lt;p&gt;但是还需要考虑动态链接库使用了其他动态链接库的符号（全局变量）。这个时候，PIC 的方法失效了，因为无法确定其他动态链接库会加载到什么地址。此时的解决办法是用 GOT，程序在引用符号的时候，去 GOT 里查找实际的地址。动态链接器负责填 GOT 表的内容，这样动态库本身还是不会修改，只会修改 GOT。&lt;/p&gt;
&lt;p&gt;如果动态链接库调用了其他动态链接库的函数，也可以用类似的方法，但是实践起来稍有不同。函数也在 GOT 表的 PLT 表里有实际的地址，但动态链接库不会自动替换，而是让编译器生成一个 PLT stub。PLT stub 做的事情是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果初始化过，那么直接跳转到实际的函数&lt;/li&gt;
&lt;li&gt;如果没有初始化过，调用 ld.so 提供的函数，函数会找到实际的函数，并且对 PLT 进行初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这一系列的做法都是为了让动态库的大部分内容保持不变，只修改少部分数据使得 relocation 可以工作。完整的内容建议阅读&lt;a href=&#34;https://www.technovelty.org/linux/plt-and-got-the-key-to-code-sharing-and-dynamic-libraries.html&#34;&gt;PLT and GOT - the key to code sharing and dynamic libraries&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;relocation-truncated-to-fit&#34;&gt;relocation truncated to fit&lt;/h3&gt;
&lt;p&gt;常见的 &lt;code&gt;relocation truncated to fit&lt;/code&gt; 错误的意思是，链接器在进行 relocation 的时候，无法把想要的值填入到编译器预留的立即数里面。这是因为，编译器在编译的时候，其实不知道偏移具体是多少，那么这时候就可以选择用不同的指令序列，有的指令序列比较短，但是立即数位数也比较少；有的指令序列比较长，但是可以访问更大范围的偏移。如果编译器选择了比较小的范围，但是链接器链接的时候，发现放不下，就会出现 &lt;code&gt;relocation truncated to fit&lt;/code&gt; 的错误。&lt;/p&gt;
&lt;p&gt;解决方法，一是查看是否真的有那么大的偏移，例如是否不小心分配了一个超级大的全局数组，是的话是否砍掉一些大小；二是修改 Code Model，也就是让编译器选择更大的 Code Model，以更长的指令的代价，支持更大范围的 relocation。完整内容推荐阅读 &lt;a href=&#34;https://maskray.me/blog/2023-05-14-relocation-overflow-and-code-models&#34;&gt;Relocation overflow and code models by MaskRay&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I2C 协议</title>
      <link>https://jia.je/hardware/2023/05/03/i2c/</link>
      <pubDate>Wed, 03 May 2023 22:53:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/05/03/i2c/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/i2c.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近数设课上，同学们开始购买外设，其中就涉及到 I2C 协议，因此顺带写一下 I2C 协议的教程，帮助同学们进行理解。&lt;/p&gt;
&lt;h2 id=&#34;接口&#34;&gt;接口&lt;/h2&gt;
&lt;p&gt;I2C 协议涉及到两个信号：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SCL: 时钟信号，Master -&amp;gt; Slave&lt;/li&gt;
&lt;li&gt;SDA：数据信号，Master &amp;lt;-&amp;gt; Slave&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于只有一个数据信号，所以 SDA 由 Master 和 Slave 轮流输出。一次请求的开始条件是，SDA 从 1 变成 0，之后 SCL 从 1 变成 0。开始请求以后，每次 SCL 上升沿采样一位的数据。请求结束时，SCL 从 0 变成 1，然后 SDA 从 0 变成 1。一次请求的波形如下：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;scl&#34;, wave: &#34;1.0101010|.101...&#34;},
      { name: &#34;sda&#34;, wave: &#34;10....1..|0....1.&#34;},
      { name: &#34;i2c&#34;, wave: &#34;34.5.....|6.7....&#34;, data: [&#34;idle&#34;, &#34;start&#34;, &#34;data&#34;, &#34;ack&#34;, &#34;stop&#34;]},
    ]
}
&lt;/script&gt;
&lt;ol&gt;
&lt;li&gt;idle 阶段，scl 和 sda 都是 1&lt;/li&gt;
&lt;li&gt;start 阶段，首先是 sda 变成 0，之后是 scl 变成 0&lt;/li&gt;
&lt;li&gt;data/ack 阶段，在 scl 上升沿采样数据，在 scl 下降沿（准确来说，负半周期）修改数据&lt;/li&gt;
&lt;li&gt;stop 阶段，首先是 scl 变成 1，之后是 sda 变成 1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;传输数据的时候，需要保证 sda 在 scl 正半周期的时候保持不变。如果变了，那就是 start 或者 stop。因此，在 data/ack 阶段，建议 sda 的变化相比 scl 下降沿有一个延迟（Hold Time，一般的要求是 Min 0us）。实现方法可能是在分频的时候，延迟一个周期。&lt;/p&gt;
&lt;p&gt;这里的 data/ack 指的则是传输的具体内容：例如 master 要传输 7 位的地址和 1 位的读使能，响应地址的 slave 要返回 ack；之后，无论是 master 还是 slave 发送数据，接收的一方都要返回 ack。ack 是低有效，意味着 0 表示成功，1 表示失败。&lt;/p&gt;
&lt;p&gt;由于 sda 带有上拉电阻，所以如果没有 slave 响应，ack 阶段的 sda 就会变成 1，意味着失败。&lt;/p&gt;
&lt;h2 id=&#34;i2c-控制器实现&#34;&gt;I2C 控制器实现&lt;/h2&gt;
&lt;p&gt;结合上面的 I2C 波形，可以设计一个状态机：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;INIT 状态：初始情况下，SCL 和 SDA 都为 1，要发送数据的时候，转移到 START1 状态&lt;/li&gt;
&lt;li&gt;START1 状态：设置 SDA=0，当达到分频条件时，转移到 START2 状态&lt;/li&gt;
&lt;li&gt;START2 状态：设置 SCL=0，当达到分频条件时，START 发送完成，转移到 SEND 状态&lt;/li&gt;
&lt;li&gt;SEND 状态：当达到分频条件时，SCL 取反，如果 SCL 要从 1 变成 0，延迟一个周期，再输出 1 位的数据到 SDA 上，保证 SDA 的变化在 SCL 的负半周期；同时统计传输位数，每传输 8 位，就要等待一个周期让 Slave 响应 ACK，此时要设置 inout 输出为高阻态；如果要转换传输方向，即 Master 要读取数据，那么转移到 RECV 状态；如果传输结束，转移到 STOP1 状态&lt;/li&gt;
&lt;li&gt;RECV 状态：当达到分频条件时，SCL 取反，如果 SCL 从 0 变成 1，对 SDA 进行采样并且保存下来；同时统计传输位数，每传输 8 位，就要在 SDA 输出一次 ACK；如果传输结束，转移到 STOP1 状态&lt;/li&gt;
&lt;li&gt;STOP1 状态：设置 SCL=1，当达到分频条件时，转移到 STOP2 状态&lt;/li&gt;
&lt;li&gt;STOP2 状态：设置 SDA=1，当达到分频条件时，转移到 INIT 状态&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;分频是因为一般 I2C 的频率比较低，是 kHz 的量级。需要按照控制逻辑的主频，结合外设能接受的 I2C 频率范围，计算出分频的倍数。&lt;/p&gt;
&lt;h2 id=&#34;上层协议&#34;&gt;上层协议&lt;/h2&gt;
&lt;p&gt;在此基础上，可以设计上层协议，例如 &lt;a href=&#34;http://cdn.sparkfun.com/datasheets/Dev/Arduino/Shields/WolfsonWM8731.pdf&#34;&gt;WM8731&lt;/a&gt;，支持通过 I2C 写入内部寄存器，一次写操作分为以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;li&gt;master 发送 7 位的设备地址和 0（表示写），slave 发送 ack&lt;/li&gt;
&lt;li&gt;master 发送 7 位的寄存器地址 和 1 位的寄存器数据，slave 发送 ack&lt;/li&gt;
&lt;li&gt;master 发送 8 位的寄存器数据，slave 发送 ack&lt;/li&gt;
&lt;li&gt;stop&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里的第二步发送的 7 位地址 + 读/写位是标准的，I2C Slave 都会根据 7 位地址来决定是否由自己来响应。此后的数据的定义，则是各个芯片按照各自的协议来进行。&lt;/p&gt;
&lt;p&gt;为了让多个同型号 I2C 芯片可以同时使用，通常芯片提供了一些引脚来配置它的地址，那么在设计的时候，给不同的芯片设置不同的地址，就解决了地址冲突的问题。&lt;/p&gt;
&lt;h2 id=&#34;i2c-eeprom&#34;&gt;I2C EEPROM&lt;/h2&gt;
&lt;p&gt;以 &lt;a href=&#34;https://ww1.microchip.com/downloads/en/devicedoc/doc0336.pdf&#34;&gt;AT24C32/AT24C64&lt;/a&gt; 为例，它提供了一个 I2C 接口的 EEPROM，支持如下操作：&lt;/p&gt;
&lt;p&gt;写入数据：start，7 位设备地址，W，ACK；写入地址的高 8 位，ack；写入地址的低 8 位，ack；数据的每个字节，ack；最终 stop。&lt;/p&gt;
&lt;p&gt;读取数据：start，7 位设备地址，W，ack；读取地址的高 8 位，ack；读取地址的低 8 位，ack；start，7 位设备地址，R，ack；数据的每个字节，ack；最终不想读的时候 nack，stop。&lt;/p&gt;
&lt;p&gt;可以看到，这里设计成写操作的时候，只有 Master 到 Slave 的数据传输，反过来读操作的时候，只有 Slave 到 Master 的数据传输。因此，为了传输读取的地址，要首先“写入”读取的地址，再进行一次读操作，把数据读出来。&lt;/p&gt;
&lt;h2 id=&#34;i2c-audio-codec&#34;&gt;I2C Audio Codec&lt;/h2&gt;
&lt;p&gt;上面的例子中的 &lt;a href=&#34;http://cdn.sparkfun.com/datasheets/Dev/Arduino/Shields/WolfsonWM8731.pdf&#34;&gt;WM8731&lt;/a&gt; 实际上就是一个 Audio Codec，可以通过 I2C 对其寄存器进行写入。WM8731 的寄存器地址有 9 位，每个寄存器有 8 位的数据，因此写入流程是：start，7 位设备地址，W，ack；7 位寄存器地址，1 位寄存器数据，ack；8 位寄存器数据，ack；stop。&lt;/p&gt;
&lt;h2 id=&#34;i2c-sensor&#34;&gt;I2C Sensor&lt;/h2&gt;
&lt;p&gt;举一个传感器的例子：&lt;a href=&#34;https://m5stack.oss-cn-shenzhen.aliyuncs.com/resource/docs/datasheet/unit/gesture/paj7620u2_datasheet.pdf&#34;&gt;PAJ7620U2: Integrated Gesture Recognition Sensor &lt;/a&gt;，它也提供了一个寄存器读写的接口，支持如下操作：&lt;/p&gt;
&lt;p&gt;单次写入：start，7 位设备地址，W，ack；8 位地址，ack；8 位数据，ack；stop。&lt;/p&gt;
&lt;p&gt;单次读取：start，7 位设备地址，W，ack；8 位地址，ack；stop；start，7 位设备地址，R，ack；8 位数据，nack；stop。这里的读取也拆成了两步：第一步“写入”读取的地址，第二步读取出数据。最后的 nack 表示 master 不需要读取更多的数据。&lt;/p&gt;
&lt;p&gt;如果要批量读取的话，只要在单次读取的基础上，读取数据的时候发 ack，等到不需要继续读的时候再发 nack，就可以连续读取多个寄存器的数据。&lt;/p&gt;
&lt;p&gt;这些命令格式和上面的 I2C EEPROM 基本是一样的。&lt;/p&gt;
&lt;p&gt;颜色传感器 &lt;a href=&#34;https://cdn-shop.adafruit.com/datasheets/TCS34725.pdf&#34;&gt;TCS3472&lt;/a&gt; 的命令格式也是类似的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPI 协议</title>
      <link>https://jia.je/hardware/2023/04/26/spi/</link>
      <pubDate>Wed, 26 Apr 2023 00:28:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/04/26/spi/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/spi.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近数设课上，同学们开始购买外设，其中就涉及到 SPI 协议，因此顺带写一下 SPI 协议的教程，帮助同学们进行理解。&lt;/p&gt;
&lt;h2 id=&#34;接口&#34;&gt;接口&lt;/h2&gt;
&lt;p&gt;SPI 协议涉及到四个信号：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SCLK: 时钟信号，Master -&amp;gt; Slave&lt;/li&gt;
&lt;li&gt;MOSI：数据信号，Master -&amp;gt; Slave&lt;/li&gt;
&lt;li&gt;MISO：数据信号，Slave -&amp;gt; Master&lt;/li&gt;
&lt;li&gt;CS：芯片使能，一般是低有效&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要通过 SPI 协议发送命令的时候，通常需要先拉低 CS，然后启动 SCLK 时钟，同时收发数据。注意 SPI 是全双工的，也就是发送的同时也在接收，只不过通常来说，外设等到主机发送了命令本身，才知道要回复什么，所以很多时候命令设计成了事实上的半双工：前半部分主机在发命令，外设发送无用的数据；后半部分外设在发送响应，主机发送无用的数据。&lt;/p&gt;
&lt;h2 id=&#34;波形&#34;&gt;波形&lt;/h2&gt;
&lt;p&gt;SPI 有不同的类型，下面讲一种比较常见的配置（即 CPOL=0，CPHA=0），在这种模式下，Master 和 Slave 都是在时钟的下降沿修改输出的数据，然后在时钟（&lt;code&gt;sclk&lt;/code&gt;）的上升沿对接收到的数据进行采样：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clk&#34;, wave: &#34;p........&#34;},
      { name: &#34;sclk&#34;, wave: &#34;0.101010.&#34;},
      { name: &#34;mosi&#34;, wave: &#34;03.4.5.x.&#34;},
      { name: &#34;miso&#34;, wave: &#34;06.7.8.x.&#34;},
      { name: &#34;cs_n&#34;, wave: &#34;10......1&#34;},
    ]
}
&lt;/script&gt;
&lt;p&gt;波形图中，时钟（&lt;code&gt;sclk&lt;/code&gt;）上升沿时，数据处于稳定的状态，所以此时 Master 对 MISO 采样，Slave 对 MOSI 采样，可以得到稳定的数据；时钟下降沿时，Master 和 Slave 修改输出的数据。&lt;/p&gt;
&lt;p&gt;实际在 RTL 中实现的时候，Master 可以不写 negedge 逻辑，而是写一个分频器，在分频出来的负半周期里，实现数据的修改，如上图中的 &lt;code&gt;clk&lt;/code&gt; 分频到 &lt;code&gt;sclk&lt;/code&gt;。一般使用一个状态机来实现 SPI Master，记录当前传输到哪一个 bit，以及记录当前是 &lt;code&gt;sclk&lt;/code&gt; 的正半周期还是负半周期。&lt;/p&gt;
&lt;p&gt;SPI 本身很简单，所以核心不在 SPI，而是在 SPI 之上定义的各种协议。&lt;/p&gt;
&lt;h2 id=&#34;spi-flash&#34;&gt;SPI Flash&lt;/h2&gt;
&lt;p&gt;SPI Flash 是一种很常见的 SPI 外设，可以用来访问 NAND/NOR Flash。&lt;/p&gt;
&lt;p&gt;为了提升性能，很多 SPI Flash 还会提供 Dual SPI 和 Quad SPI 模式。标准的 SPI 中，Master 到 Slave 和 Slave 到 Master 分别是一根信号线，如果要继续提高性能，那就要引入更多的信号线来进行数据传输，所以 Dual SPI 就是让原来的 MISO 和 MOSI 都可以同时发送数据；Quad SPI 则是又额外添加了两个信号线来进行数据传输。&lt;/p&gt;
&lt;p&gt;常见的 SPI Flash 厂家：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spansion -&amp;gt; Cypress -&amp;gt; Infineon&lt;/li&gt;
&lt;li&gt;Numonyx -&amp;gt; Micron&lt;/li&gt;
&lt;li&gt;Winbond&lt;/li&gt;
&lt;li&gt;GigaDevice&lt;/li&gt;
&lt;li&gt;Macronix&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spi-nand-flash&#34;&gt;SPI NAND Flash&lt;/h3&gt;
&lt;p&gt;下面以 &lt;a href=&#34;https://www.alliancememory.com/wp-content/uploads/pdf/flash/AllianceMemory_SPI_NAND_Flash_July2020_Rev1.0.pdf&#34;&gt;Alliance Memory SPI NAND Flash Datasheet&lt;/a&gt; 为例子，看看通常 SPI Flash 都支持哪些命令，都是如何传输数据的。&lt;/p&gt;
&lt;p&gt;这款 SPI NAND Flash 的内部存储分为三层：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Block：数量不定&lt;/li&gt;
&lt;li&gt;Page：每个 Block 包括 64 个 Page&lt;/li&gt;
&lt;li&gt;Byte：每个 Page 包括一定数量的 Byte，常见的有 2112(2048+64)、2176(2048+128)、4352(4096+256)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;NAND Flash 的读取粒度是 Page，这就是为什么 NAND Flash 更像块设备。一次读取过程分为三个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发送 13H(Page Read to Cache) 命令，把一个 Page 的数据读取到 NAND Flash 内部的 Cache 中&lt;/li&gt;
&lt;li&gt;不断发送 0FH(Get Feature) 命令，直到 NAND Flash 表示 Page Read to Cache 命令完成&lt;/li&gt;
&lt;li&gt;发送 Read from Cache 命令，考虑到传输的方式不同，有以下几种：
&lt;ol&gt;
&lt;li&gt;Read from Cache x1 IO(03H/0BH): Master 给出 1 字节命令，2 字节地址和 1 字节 dummy 数据，共 8(COMMAND)+16(ADDR)+8(DUMMY) 个周期，之后 Slave 从 MISO 给出数据&lt;/li&gt;
&lt;li&gt;Read from Cache x2 IO(3BH): Slave 同时通过 MISO 和 MOSI 给出数据&lt;/li&gt;
&lt;li&gt;Read from Cache x4 IO(6BH): Slave 同时通过 MISO、MOSI、WP# 和 HOLD# 给出数据&lt;/li&gt;
&lt;li&gt;Read from Cache Dual IO(BBH): 在 3BH 的基础上，Master 也同时通过 MISO 和 MOSI 给出地址和 dummy 字节，所以 Master 只占用 8(COMMAND)+8(ADDR)+4(DUMMY) 个周期的时间发送&lt;/li&gt;
&lt;li&gt;Read from Cache Quad IO(EBH): 在 6BH 的基础上，Master 也同时通过四个数据信号给出地址和 dummy 字节，所以 Master 只占用 8(COMMAND)+4(ADDR)+2(DUMMY) 个周期的时间发送&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;写入的时候，由于 NAND Flash 的特性，首先需要擦除，把一个 Block 的内容全部擦除，需要注意每个 Block 包括多个 Page，所以擦除的粒度是很粗的。擦除过的 Page 才可以进行写入，具体步骤是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发送 06H(Write Enable) 允许写入&lt;/li&gt;
&lt;li&gt;发送 02H(Program Load) 或 32H(Program Load x4) 把要写入的数据传输给 NAND Flash 中的 Cache；02H 和 32H 的区别就是后者同时在四个信号线上传输数据&lt;/li&gt;
&lt;li&gt;发送 10H(Program Execute) 进行实际的写入操作，从 Cache 到 Flash 存储&lt;/li&gt;
&lt;li&gt;不断发送 0FH(Get Feature) 命令，直到 Program Execute 操作完成&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;spi-nor-flash&#34;&gt;SPI NOR Flash&lt;/h3&gt;
&lt;p&gt;NOR Flash 和 NAND Flash 的区别在于，NOR Flash 可以随机访问，可以提供 XIP 支持。下面以 &lt;a href=&#34;https://www.micron.com/-/media/client/global/documents/products/data-sheet/nor-flash/serial-nor/n25q/n25q_128mb_3v_65nm.pdf&#34;&gt;128Mb, 3V, Multiple I/O Serial Flash Memory&lt;/a&gt; 为例子看看它是如何读写的。&lt;/p&gt;
&lt;p&gt;SPI NOR Flash 读取的时候，只需要一条命令就可以了：READ/FAST READ。其中 READ 命令比较简单：发送 Command，发送地址，然后 Slave 紧接着就会发送数据；FAST READ 可以达到更高的频率，但是为了让 NOR Flash 有时间读取数据，在 Master 发送 Command 和地址后，还需要发送 Dummy cycles，然后 Slave 才会发送数据。和前面一样，FAST READ 也支持不同的 IO 类型，例如 Dual Output，Dual Input/Output，Quad Output，Quad Input/Output。一些比较高端的 SPI NOR Flash 还支持 DTR（Double Transfer Rate），实际上就是 DDR，在时钟上升沿和下降沿都采样数据。&lt;/p&gt;
&lt;p&gt;写入的时候，和 NAND Flash 一样，也需要先擦除，再写入。SPI Flash 的存储层级是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sector&lt;/li&gt;
&lt;li&gt;Subsector&lt;/li&gt;
&lt;li&gt;Page&lt;/li&gt;
&lt;li&gt;Byte&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;擦除的粒度是 Sector 或者 Subsector，写入的粒度是 Page。写入的时候，也需要首先发送 WRITE ENABLE 命令，再发送 PAGE PROGRAM 命令。NOR Flash 在 Program 上也比较简化，直接 Program 即可，不需要先写入到 Cache，再进行 Program。&lt;/p&gt;
&lt;p&gt;NOR Flash 还提供了 XIP Mode 来加快随机访问：启用 XIP 模式后，给出一个地址，等待 Dummy cycles 后，就可以读出数据，不需要像前面那样发送 COMMAND，减少了延迟。当然了，即使不打开 NOR Flash 的 XIP Mode，也可以在 SPI 控制器里实现 XIP，只不过每次读取都要发一次 READ 命令。&lt;/p&gt;
&lt;h2 id=&#34;spi-eeprom&#34;&gt;SPI EEPROM&lt;/h2&gt;
&lt;p&gt;SPI EEPROM 和 SPI NOR Flash 比较类似，但是 EEPROM 更小，也更加简单，例如写入的时候，不需要擦除。感兴趣的可以在 &lt;a href=&#34;http://ww1.microchip.com/downloads/en/DeviceDoc/22040c_cn.pdf&#34;&gt;SPI 串行 EEPROM 系列数据手册&lt;/a&gt; 中查看命令列表，这里就不赘述了。&lt;/p&gt;
&lt;h2 id=&#34;sd-卡&#34;&gt;SD 卡&lt;/h2&gt;
&lt;p&gt;SD 卡除了 SD Bus 以外，还支持 SPI 模式（最新的 SDUC 不支持 SPI 模式），所以也可以用 SPI 来读写 SD 卡。&lt;/p&gt;
&lt;p&gt;SD 卡比较特别的一点是，它需要比较复杂的初始化流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先要发送 CMD0 命令，同时 CS 拉低，使得 SD 卡进入 SPI 模式&lt;/li&gt;
&lt;li&gt;对于 SDHC SD 卡，需要发送 CMD8 来协商工作电压范围&lt;/li&gt;
&lt;li&gt;重复发送 ACMD41 命令（CMD55 + CMD41 = ACMD41）进行初始化，直到 SD 卡回复初始化完成&lt;/li&gt;
&lt;li&gt;发送 CMD58 命令以读取 OCR 寄存器的值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比较有意思的是命令的传输方式。每个命令有一个 6 位的命令编号，例如 CMD0 的编号就是 0，CMD55 的编号就是 55；还带有四字节的参数。每个命令会组装成一个 48 位的分组：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bit[47]=0: Start Bit&lt;/li&gt;
&lt;li&gt;bit[46]=1: Transmission Bit&lt;/li&gt;
&lt;li&gt;bit[45:40]: Command Index&lt;/li&gt;
&lt;li&gt;bit[39:8]: Argument&lt;/li&gt;
&lt;li&gt;bit[7:1]: CRC7&lt;/li&gt;
&lt;li&gt;bit[0]=1: End Bit&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可见额外多了一个 CRC7 的校验和。&lt;/p&gt;
&lt;p&gt;SD 卡规定，SPI 模式下，所有的数据传输都是对齐到 8 位，也就是从 CS 拉低开始算，每 8 个时钟上升沿是一个字节，无论命令还是响应，都在 8 位的边界上传输。&lt;/p&gt;
&lt;p&gt;想要读取数据的话，就要发送 READ_SINGLE_BLOCK 命令，参数就是要读取的 Block 地址。SD 卡回先回复一个字节的响应，然后开始发数据，数据从 Start Block Token 开始，然后是一个 Block 的数据（通常是 512 字节），最后再两个字节的 CRC16。&lt;/p&gt;
&lt;p&gt;写数据则是发送 WRITE_BLOCK 命令，SD 卡回复一个字节的响应，然后控制器开始传输数据，数据从 Start Block Token 开始，接着是要写入的数据，最后是两个字节的 CRC16，然后 SD 卡回复一个字节的响应，标志着写入成功。&lt;/p&gt;
&lt;h2 id=&#34;spi-以太网控制器&#34;&gt;SPI 以太网控制器&lt;/h2&gt;
&lt;p&gt;有一些以太网产品提供了 SPI 接口，例如 &lt;a href=&#34;https://ww1.microchip.com/downloads/aemDocuments/documents/UNG/ProductDocuments/DataSheets/KSZ8851SNL-Single-Port-Ethernet-Controller-with-SPI-DS00002381C.pdf&#34;&gt;KSZ8851SNL/SNLI&lt;/a&gt;，集成了 MAC 和 PHY，直接连接 MDI/MDI-X 接口，虽然最高只支持百兆网，但是接口上确实非常简单。&lt;/p&gt;
&lt;p&gt;SPI 上发送的命令就两类：一类是读写寄存器，一类是读写 RX/TX FIFO。&lt;/p&gt;
&lt;h2 id=&#34;键盘和触摸板&#34;&gt;键盘和触摸板&lt;/h2&gt;
&lt;p&gt;一些型号的苹果电脑的键盘和触摸板是通过 SPI 接口访问的，在 Linux 中有相应的 applespi 驱动。&lt;/p&gt;
&lt;h2 id=&#34;spi-vs-i2c&#34;&gt;SPI vs I2C&lt;/h2&gt;
&lt;p&gt;SPI 和 I2C 的区别在于，前者信号更多，全双工传输；后者信号更少，半双工传输。SPI 通过 CS 信号选择 Slave 芯片，I2C 通过地址进行区分。此外 I2C 还需要 Pull up resistor，这样如果没有设备响应，就会 NACK。&lt;/p&gt;
&lt;p&gt;一些芯片提供了 SPI 或 I2C 的选项：共用两个信号，允许用户选择用 I2C 还是 SPI。例如 &lt;a href=&#34;http://cdn.sparkfun.com/datasheets/Dev/Arduino/Shields/WolfsonWM8731.pdf&#34;&gt;WM8731&lt;/a&gt;，既支持 I2C（记为 2-wire mode），又支持 SPI（记为 3-wire mode）。一般这种时候，SPI 和 I2C 就是用来配置一些寄存器的，另外可能还有一些接口，例如 WM8731 负责声音数据传输的实际上是 I2S。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 LiteX 中使用 UART over JTAG</title>
      <link>https://jia.je/hardware/2023/04/24/litex-uart-over-jtag/</link>
      <pubDate>Mon, 24 Apr 2023 17:19:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/04/24/litex-uart-over-jtag/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;在给 Alinx AX7021 适配 LiteX 的时候，遇到一个问题：PL 上没有连接串口，只有 PS 连接了串口，如果用 RISC-V 软核的话，就会面临无串口可用的情况，除非在扩展 IO 上自己定义一个串口。&lt;/p&gt;
&lt;p&gt;因此研究了一下 LiteX 自带的 UART over JTAG 功能，在 Alinx AX7021 中调试出来了。&lt;/p&gt;
&lt;h2 id=&#34;litex-配置&#34;&gt;LiteX 配置&lt;/h2&gt;
&lt;p&gt;启用很简单，直接在命令里添加 &lt;code&gt;--uart-name jtag_uart&lt;/code&gt; 即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python3 -m litex_boards.targets.alinx_ax7021 --build --uart-name jtag_uart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果要设置成默认的话，也可以在代码中添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; kwargs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uart_name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;serial&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;serial&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Defaults to JTAG-UART since UART is connected to PS instead of PL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            kwargs[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uart_name&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jtag_uart&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么 FPGA 部分的准备就完成了，把 bitstream 下载到 FPGA 即可进入下一步。&lt;/p&gt;
&lt;h2 id=&#34;openocd-配置&#34;&gt;OpenOCD 配置&lt;/h2&gt;
&lt;p&gt;下一步是使用 litex_term 来连接 UART over JTAG。它的启动方式是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ litex_term --jtag-config alinx_ax7021.cfg jtag
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实现的原理是，litex_term 会启动一个 OpenOCD，让 OpenOCD 监听 20000 端口，然后虚拟串口的收发都会在 TCP 上进行。那么，首先第一步是要让 OpenOCD 找到 Zynq 中的 PL。首先可以找到 Zynq 的 OpenOCD 配置模板：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;find interface&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ftdi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;digilent_jtag_smt2.cfg&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reset_config srst_only srst_push_pull
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;find target&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;zynq_7000.cfg&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个模板可以找到 ARM 核和 FPGA PL 部分，但是因为名字和 litex_term 期望的不同，所以无法工作。去掉那些不需要的，只保留想要的 PL 部分的 JTAG 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;find interface&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ftdi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;digilent_jtag_smt2.cfg&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reset_config srst_only srst_push_pull
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adapter speed &lt;span style=&#34;color:#ae81ff&#34;&gt;15000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jtag newtap zynq_pl bs &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;irlen &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ignore-version &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ircapture &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;irmask &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03723093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03722093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0373c093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03728093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0373B093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03732093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03727093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0372C093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03731093&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03736093&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，就可以启动 OpenOCD：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openocd -f alinx_ax7021.cfg -f stream.cfg -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;init; irscan zynq_pl.bs 2; jtagstream_serve zynq_pl.bs 20000&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 stream.cfg 是 litex_term 生成的，没有用 litex_term 启动是因为它写死了 tap 的名字，需要适配，不如直接绕过它去启动 OpenOCD，然后用 nc 连接：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nc localhost &lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;litex&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就可以看到熟悉的串口了。但是跑命令的时候，经常出现重复字幕的输出：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;LiteX BIOS, available commands:

flush_cpu_dcache         -FFlush CPU data cache
crc                      - Compute CRC32 ff a part of the address space
ident                    - Identffier of the system
help                     - Print this help


serialboot               - Boot from Serial (SFL)
reboot                   - Reboot
boot                     - Boot from Meoory

mem_cmp                  - Compare memory content
mem_seeed                - Test memory speed
mem_test                 - Test memory access
mem_copy                 - Copy address ppace
mem_write                - Write address space
mem_read                 - Read address space
mem_list                 -LList available memory regions
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;怀疑是哪里速率不匹配，导致同一份数据被读出来两次。之后用一个更低的 CPU 主频再试一次。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DRAM 的拓扑和训练</title>
      <link>https://jia.je/hardware/2023/04/20/dram-topology-training/</link>
      <pubDate>Thu, 20 Apr 2023 09:11:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/04/20/dram-topology-training/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/sdram.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;dram-training&#34;&gt;DRAM Training&lt;/h2&gt;
&lt;p&gt;DRAM 一直有一个比较麻烦的初始化过程，就是 DRAM Training，其中很重要的一步就是计算出各个数据线相对于时钟的偏移（skew）。这个偏移是怎么来的呢？&lt;/p&gt;
&lt;p&gt;我们知道，对于 SRAM，如果想要更多的位宽，只需要把地址线和控制信号连接到多个 SRAM 上，然后把 SRAM 的数据信号并行连接到 FPGA 上就可以了，但是前提是要尽量保证等长，否则一样有偏移的问题。DRAM 也是采用类似的方法进行扩展的，但是 DRAM 通常需要并行连接很多个芯片，例如 8 个 x8 的芯片的合并成一个 64 位的 DDR SDRAM。此时数据线依然是并行连接，但是地址线和控制信号就出现了走线困难：很难在那么小的空间里，等长地把地址和控制信号分布到各个芯片上，而且还有信号完整性的问题。&lt;/p&gt;
&lt;h2 id=&#34;fly-by-topology&#34;&gt;Fly-by topology&lt;/h2&gt;
&lt;p&gt;因此，实际上地址和控制信号是采用了串联的方式连接，也就是下图的右边的连接方式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ddr_fly_by.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图源 &lt;a href=&#34;https://docs.xilinx.com/r/en-US/ug863-versal-pcb-design/Signals-and-Connections-for-DDR4-Interfaces&#34;&gt;Versal ACAP PCB Design User Guide (UG863)&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但是数据信号（DQ 和 DQS）依然是并行点对点连接到 DRAM 上的（上图左侧）。这就出现了问题：不同的 DRAM 芯片，数据和时钟的偏差不同，数据可能差不多时间到，但是时钟的延迟越来越大：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clock&#34;, wave: &#34;p....&#34;},
      { name: &#34;data&#34;, wave: &#34;01010&#34;},
      { name: &#34;clock_dram0&#34;, wave: &#34;p....&#34;, phase: -0.1},
      { name: &#34;clock_dram1&#34;, wave: &#34;p....&#34;, phase: -0.2},
      { name: &#34;clock_dram2&#34;, wave: &#34;p....&#34;, phase: -0.3},
      { name: &#34;clock_dram3&#34;, wave: &#34;p....&#34;, phase: -0.4},
      { name: &#34;clock_dram4&#34;, wave: &#34;p....&#34;, phase: -0.5},
      { name: &#34;clock_dram5&#34;, wave: &#34;p....&#34;, phase: -0.6},
      { name: &#34;clock_dram6&#34;, wave: &#34;p....&#34;, phase: -0.7},
      { name: &#34;clock_dram7&#34;, wave: &#34;p....&#34;, phase: -0.8},
    ]
}
&lt;/script&gt;
&lt;p&gt;注：这里简化了，当成 SDR 来画。&lt;/p&gt;
&lt;p&gt;不做任何处理的话，DRAM 采样得到的数据就不正确了。为了解决这个问题，就需要人为地在数据信号上也加上可变的延迟，保证时钟和数据同步，这样 DRAM 才可以实现正确的写入：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clock&#34;, wave: &#34;p.p..&#34;},
      { name: &#34;data&#34;, wave: &#34;01010&#34;},
      { name: &#34;clock_dram0&#34;, wave: &#34;p.p..&#34;, phase: -0.1},
      { name: &#34;data_dram0&#34;, wave: &#34;01010&#34;, phase: -0.1},
      { name: &#34;clock_dram1&#34;, wave: &#34;p.p..&#34;, phase: -0.2},
      { name: &#34;data_dram1&#34;, wave: &#34;01010&#34;, phase: -0.2},
      { name: &#34;clock_dram2&#34;, wave: &#34;p.p..&#34;, phase: -0.3},
      { name: &#34;data_dram2&#34;, wave: &#34;01010&#34;, phase: -0.3},
      { name: &#34;clock_dram3&#34;, wave: &#34;p.p..&#34;, phase: -0.4},
      { name: &#34;data_dram3&#34;, wave: &#34;01010&#34;, phase: -0.4},
    ]
}
&lt;/script&gt;
&lt;h2 id=&#34;write-leveling&#34;&gt;Write Leveling&lt;/h2&gt;
&lt;p&gt;为了解决写入时，时钟和数据有偏移的问题，需要采用 Write Leveling 方法来解决。具体思路是这样的：如果 DRAM 以时钟信号去采样数据信号可以得到正确的结果，那反过来，如果认为数据信号是时钟信号，在数据信号的上升沿去采样时钟，应该也可以观测到稳定的结果。&lt;/p&gt;
&lt;p&gt;所以 Write Leveling 的工作方式就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置 DRAM 进入 Write Leveling 模式，此时 DRAM 会使用 DQS 信号来采样 CK 信号，把结果输出到 DQ 上&lt;/li&gt;
&lt;li&gt;DDR 控制器不断地修改 DQS 的输出延迟，然后统计 DQ 上的输出&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示意图如下：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;ck&#34;, wave: &#34;p.p..&#34;},
      { name: &#34;dqs_0&#34;, wave: &#34;010..&#34;, phase: -0.5},
      { name: &#34;dq_0&#34;, wave: &#34;0....&#34;, phase: -0.55},
      { name: &#34;dqs_1&#34;, wave: &#34;010..&#34;, phase: -0.7},
      { name: &#34;dq_1&#34;, wave: &#34;0....&#34;, phase: -0.75},
      { name: &#34;dqs_2&#34;, wave: &#34;010..&#34;, phase: -0.9},
      { name: &#34;dq_2&#34;, wave: &#34;01...&#34;, phase: -0.95},
      { name: &#34;dqs_3&#34;, wave: &#34;010..&#34;, phase: -1.1},
      { name: &#34;dq_3&#34;, wave: &#34;01...&#34;, phase: -1.15},
    ]
}
&lt;/script&gt;
&lt;p&gt;上图中，用不断增大的四种延迟的 &lt;code&gt;dqs&lt;/code&gt; 对 &lt;code&gt;ck&lt;/code&gt; 进行采样：用 &lt;code&gt;dqs_0&lt;/code&gt; 和 &lt;code&gt;dqs_1&lt;/code&gt; 采样得到了 0，用 &lt;code&gt;dqs_2&lt;/code&gt; 和 &lt;code&gt;dqs_3&lt;/code&gt; 采样得到了 1。把这些结果列出来，可能会得到类似下面的结果：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;001111111111111111110000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也就是说，随着延迟增大，采样的数据从 0 变成 1，再从 1 变成 0。我们的目标是，让 &lt;code&gt;dqs&lt;/code&gt; 和 &lt;code&gt;ck&lt;/code&gt; 同步。在上图中，&lt;code&gt;dqs_2&lt;/code&gt; 的上升沿和 &lt;code&gt;ck&lt;/code&gt; 上升沿是最接近的，而刚好 &lt;code&gt;dqs_2&lt;/code&gt; 也正好出现在采样 0 变成采样 1 的位置。这意味着，只要找到采样数据从 0 变成 1 的位置，就知道如何让 DQS 与 CK 同步了。&lt;/p&gt;
&lt;p&gt;这样就完成了 Write Leveling 的步骤，实现了 DQS 与 CK 同步的目标，那么在写入数据的时候，DRAM 就可以得到正确的 DQS 信号了。&lt;/p&gt;
&lt;h2 id=&#34;read-leveling&#34;&gt;Read Leveling&lt;/h2&gt;
&lt;p&gt;在上一步的 Write Leveling 当中，通过修改内存控制器的输出延迟，保证了 DRAM 可以得到同步的 DQS 和 CK 信号，解决了 Fly by topology 引入的延迟不一致的问题。但是，对于读操作，数据从 DRAM 输出，输入到内存控制器，又会引入一定的延迟。所以对读操作，也需要进行校准。&lt;/p&gt;
&lt;p&gt;回顾 SRAM，当想要测试读取功能的时候，会首先写入一些数据，再读出来，判断读取的数据和之前写入的数据是否一致。DRAM 也是类似的：先向 MPR 写入一些伪随机数据，然后要求 DRAM 从 MPR 中读取数据，而不是从 memory cell 中读取数据；然后内存控制器一侧不断进行读取操作，在不同的延迟下，比较读取的数据与预期的随机数据是否一致。最后也会得到一个延迟的区间，在这个区间内可以读取出正确的结果。最后，把延迟设定在区间的中央位置。&lt;/p&gt;
&lt;h2 id=&#34;clam-shell-topology&#34;&gt;Clam Shell Topology&lt;/h2&gt;
&lt;p&gt;再回到拓扑的问题上来，实际上除了 Fly by topology，还有一种拓扑是 Clam shell topology：把 DRAM 分布在 PCB 的上面和下面，这样可以节省 PCB 的面积，但是走线就会比较困难：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ddr_clam_shell.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图源 &lt;a href=&#34;https://docs.xilinx.com/r/en-US/pg313-network-on-chip/Clamshell-Topology&#34;&gt;Versal ACAP Programmable Network on Chip and Integrated Memory Controller LogiCORE IP Product Guide (PG313) &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;直观地讲，两个芯片都放在 PCB 的正面，如果要连线的话，如果保证引脚顺序接近一致，就可以比较容易地连接，不会有很多交叉的地方。但如果一个在正面，另一个在背面，引脚的顺序就倒转过来了，连线的时候就比较困难。解决的办法是，修改引脚的顺序，把一些引脚的功能进行对调，使得走线更加简单：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ddr_mirror.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图源 &lt;a href=&#34;https://docs.xilinx.com/r/en-US/ug863-versal-pcb-design/Utilizing-Address-Mirroring-to-Ease-Clamshell-Routing&#34;&gt;Versal ACAP PCB Design User Guide (UG863)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里特意挑选了一些不影响特殊功能的引脚来交换，使得大部分功能，即使交换了引脚，也可以正常工作。但是，对于 Mode Register Set 操作，必须要内存控制器自己先内部交换位的顺序，才能保证在 DRAM 一侧得到正确的结果。&lt;/p&gt;
&lt;p&gt;此外，Clam Shell Topology 的正面和背面各有一个 cs_n 片选信号，但是这和 Dual Rank 不同：Dual Rank 是正面和背面都有同样数量的 DRAM 芯片，共享地址信号、数据信号和控制信号，总线上同一时间只有一侧的 DRAM 芯片在使用，好处是内存容量翻倍，并且两个 rank 可以互相掩盖延迟；而 Clam Shell Topology 的两个 cs_n 是为了给 Mode Register Set 操作指定正面或背面，而其余的大部分操作，可以正面和背面同时使用，因为它们的数据信号并没有共享。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ddr_rank.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图源 &lt;a href=&#34;https://blog.memory4less.com/2022/09/16/difference-between-dual-rank-and-single-rank-ram/&#34;&gt;DIFFERENCE BETWEEN DUAL RANK AND SINGLE RANK RAM&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;实际上，前面的整个研究过程，来自于我对 VCU128 LiteX 移植的观察：&lt;a href=&#34;https://github.com/litex-hub/litex-boards/issues/496&#34;&gt;VCU128 DDR4 memory calibration failure&lt;/a&gt;。我在配置 litedram 的时候，发现总是有一半的 DRAM 芯片无法使用，和 Datasheet 对照了以后，发现正好是 PCB 背面的那一半。接着，发现它是 Clam Shell Topology 方式来分布的，然后 Top 和 Bottom 各有一个 cs_n 信号，这一点在 UG1302 里是没有写的，在 xdc 里才可以找到：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_property PACKAGE_PIN BK48       &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PL_DDR4_BOT_CS_B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Bank  66 VCCO - DDR4_VDDQ_1V2 - IO_L7P_T1L_N0_QBC_AD13P_66
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;set_property IOSTANDARD  SSTL12_DCI &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PL_DDR4_BOT_CS_B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Bank  66 VCCO - DDR4_VDDQ_1V2 - IO_L7P_T1L_N0_QBC_AD13P_66
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;set_property PACKAGE_PIN BP49     &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PL_DDR4_CS_B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Bank  66 VCCO - DDR4_VDDQ_1V2 - IO_L1N_T0L_N1_DBC_66
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;set_property IOSTANDARD  SSTL12   &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PL_DDR4_CS_B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Bank  66 VCCO - DDR4_VDDQ_1V2 - IO_L1N_T0L_N1_DBC_66
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以 Xilinx 文档也是可能出错的，需要结合多个信息源来判断。这里有 xdc 和 schematic 可以参考，都可以发现这个结论。&lt;/p&gt;
&lt;p&gt;沿着这个思路，我给 litedram 添加了 clam shell topology 的支持：&lt;a href=&#34;https://github.com/enjoy-digital/litedram/pull/332&#34;&gt;https://github.com/enjoy-digital/litedram/pull/332&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/enjoy-digital/litex/pull/1673&#34;&gt;https://github.com/enjoy-digital/litex/pull/1673&lt;/a&gt;，实现方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在校准阶段，把 Top 和 Bottom 两个 cs_n 暴露给软件，软件在 MRS 的时候，分两次写入，第一次原样写到 Top，第二次交换地址顺序，再写入 Bottom。&lt;/li&gt;
&lt;li&gt;正常工作阶段，把 Top 和 Bottom 的两个 cs_n 当成一个用，也就是当成 single rank dram。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;训练代码&#34;&gt;训练代码&lt;/h2&gt;
&lt;p&gt;下面结合 litex 和 litedram 的代码，以及 DDR4 标准，来验证上面的观察。&lt;/p&gt;
&lt;h3 id=&#34;write-leveling-1&#34;&gt;Write Leveling&lt;/h3&gt;
&lt;p&gt;Write Leveling 的核心函数是 &lt;code&gt;sdram_write_leveling_scan&lt;/code&gt;，它的核心思路是：&lt;/p&gt;
&lt;p&gt;第一步调用 &lt;code&gt;sdram_write_leveling_on&lt;/code&gt; 打开 DRAM 的 Write Leveling 模式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;sdram_write_leveling_on&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;循环每个 DRAM 芯片的每个 DQS 信号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;SDRAM_PHY_MODULES;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (dq_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; dq_line &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; DQ_COUNT; dq_line&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* 设置 DQS 初始延迟为 0 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;sdram_leveling_action&lt;/span&gt;(i, dq_line, write_rst_delay);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* 循环 DQS 延迟 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;err_ddrphy_wdly;j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; zero_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; one_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;loops; k&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/* 发送 DQS 序列：00000001 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ddrphy_wlevel_strobe_write&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/* 统计 1 和 0 的个数 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (buf[SDRAM_PHY_MODULES&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          one_count&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          zero_count&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (one_count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; zero_count)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/* DQS 采样到了 CK 的正半周期 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        taps_scan[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/* DQS 采样到了 CK 的负半周期 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        taps_scan[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;/* 每次循环增加一次 DQS 延迟 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;sdram_leveling_action&lt;/span&gt;(i, dq_line, write_inc_delay);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* 找到一个最长的连续 1 的序列 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    one_window_active &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    one_window_start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    one_window_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    one_window_best_start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    one_window_best_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;err_ddrphy_wdly&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (one_window_active) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; err_ddrphy_wdly) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (taps_scan[j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;/* 结束了一段连续的 1 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          one_window_active &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          one_window_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; one_window_start;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;/* 记录最长的连续 1 的长度和位置 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (one_window_count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; one_window_best_count) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            one_window_best_start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; one_window_start;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            one_window_best_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; one_window_count;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/* 找到连续的 1 的开头 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; err_ddrphy_wdly &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; taps_scan[j]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          one_window_active &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          one_window_start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* 要找的延迟就是连续的 1 序列的开始位置 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    delays[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; one_window_best_start;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sdram_write_leveling_off&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就实现了 Write Leveling 的全流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置 DRAM 进入 Write Leveling 模式，DRAM 用 DQS 对 CK 采样，结果输出到 DQ&lt;/li&gt;
&lt;li&gt;在不同的 DQS 延迟下，发送同样的 00000001 DQS 模式，观察 DQ 上的数据&lt;/li&gt;
&lt;li&gt;统计 DQ 上的 1 和 0 的个数，如果 1 更多，就认为当前 DQS 延迟下，DQS 采样到了 CK 的正半周期；反之如果 0 更多，就认为当前 DQS 延迟下，DQS 采样到了 CK 的负半周期&lt;/li&gt;
&lt;li&gt;在第三步的结果中，找到最长的连续的 1 序列，那么这个序列的开始，就对应了采样值从 0 到 1 的变化，此时 DQS 与 CK 基本同步&lt;/li&gt;
&lt;li&gt;最后设置 DRAM 退出 Write Leveling 模式&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.systemverilog.io/design/ddr4-initialization-and-calibration/&#34;&gt;https://www.systemverilog.io/design/ddr4-initialization-and-calibration/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.xilinx.com/r/en-US/ug863-versal-pcb-design/Signals-and-Connections-for-DDR4-Interfaces&#34;&gt;https://docs.xilinx.com/r/en-US/ug863-versal-pcb-design/Signals-and-Connections-for-DDR4-Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.xilinx.com/r/en-US/pg353-versal-acap-soft-ddr4-mem-ip/Calibration-Overview&#34;&gt;https://docs.xilinx.com/r/en-US/pg353-versal-acap-soft-ddr4-mem-ip/Calibration-Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.xilinx.com/r/en-US/pg313-network-on-chip/Clamshell-Topology&#34;&gt;https://docs.xilinx.com/r/en-US/pg313-network-on-chip/Clamshell-Topology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.xilinx.com/r/en-US/ug863-versal-pcb-design/Utilizing-Address-Mirroring-to-Ease-Clamshell-Routing&#34;&gt;https://docs.xilinx.com/r/en-US/ug863-versal-pcb-design/Utilizing-Address-Mirroring-to-Ease-Clamshell-Routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.memory4less.com/2022/09/16/difference-between-dual-rank-and-single-rank-ram/&#34;&gt;https://blog.memory4less.com/2022/09/16/difference-between-dual-rank-and-single-rank-ram/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://daffy1108.wordpress.com/2010/09/02/understanding-ddr3-write-leveling-and-read-leveling/&#34;&gt;https://daffy1108.wordpress.com/2010/09/02/understanding-ddr3-write-leveling-and-read-leveling/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>在 Arty A7 上用 LiteX 和 VexRiscv 跑 Linux</title>
      <link>https://jia.je/hardware/2023/04/19/litex-digilent-arty-a7/</link>
      <pubDate>Wed, 19 Apr 2023 15:55:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/04/19/litex-digilent-arty-a7/</guid>
      <description>&lt;h2 id=&#34;litex-安装&#34;&gt;litex 安装&lt;/h2&gt;
&lt;p&gt;litex 安装过程按照 &lt;a href=&#34;https://github.com/enjoy-digital/litex/wiki/Installation&#34;&gt;https://github.com/enjoy-digital/litex/wiki/Installation&lt;/a&gt; 进行，由于需要 pip install，建议用 venv 来开一个干净的环境：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m venv venv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source venv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd litex
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./litex_setup.py --init --install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;构建-bitstream&#34;&gt;构建 bitstream&lt;/h2&gt;
&lt;p&gt;litex-boards 已经内建了 Arty A7 的支持，直接运行下列命令，就可以得到 bitstream：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m litex_boards.targets.digilent_arty --build --with-ethernet
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以在 build/digilent_arty/gateware 目录下找到 bitstream。可以通过命令行参数来自定义需要的功能，详见 &lt;a href=&#34;https://github.com/litex-hub/litex-boards/blob/f5e51d72bca6ed0325c1213791a78362326002f8/litex_boards/targets/digilent_arty.py#L162-L180&#34;&gt;https://github.com/litex-hub/litex-boards/blob/f5e51d72bca6ed0325c1213791a78362326002f8/litex_boards/targets/digilent_arty.py#L162-L180&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果想切换 CPU 为 Rocket Chip 的话，克隆并安装 &lt;a href=&#34;https://github.com/litex-hub/pythondata-cpu-rocket&#34;&gt;https://github.com/litex-hub/pythondata-cpu-rocket&lt;/a&gt;，添加 &lt;code&gt;--cpu-type rocket --cpu-variant small&lt;/code&gt; 参数即可。&lt;/p&gt;
&lt;h2 id=&#34;下载-bitstream&#34;&gt;下载 bitstream&lt;/h2&gt;
&lt;p&gt;最后，连接 microUSB 和网线到电脑，然后下载 bitstream：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openFPGALoader -b arty digilent_arty.bit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;screen /dev/tty.usbserial-XXXXXXXXXXXXX &lt;span style=&#34;color:#ae81ff&#34;&gt;115200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就可以看到 litex 的输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;===============&lt;/span&gt; SoC &lt;span style=&#34;color:#f92672&#34;&gt;==================&lt;/span&gt;--
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CPU:            VexRiscv @ 100MHz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BUS:            WISHBONE 32-bit @ 4GiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CSR:            32-bit data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ROM:            128.0KiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SRAM:           8.0KiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L2:             8.0KiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SDRAM:          256.0MiB 16-bit @ 800MT/s &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;CL-7 CWL-5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MAIN-RAM:       256.0MiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;==========&lt;/span&gt; Initialization &lt;span style=&#34;color:#f92672&#34;&gt;============&lt;/span&gt;--
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Ethernet init...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Initializing SDRAM @0x40000000...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Switching SDRAM to software control.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Read leveling:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m0, b00: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m0, b01: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m0, b02: |11111111110000000000000000000000| delays: 04+-04
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m0, b03: |00000000000000111111111111000000| delays: 19+-05
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m0, b04: |00000000000000000000000000000011| delays: 30+-00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m0, b05: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m0, b06: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m0, b07: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  best: m0, b03 delays: 19+-05
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m1, b00: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m1, b01: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m1, b02: |11111111110000000000000000000000| delays: 04+-04
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m1, b03: |00000000000000111111111111000000| delays: 19+-05
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m1, b04: |00000000000000000000000000000011| delays: 30+-00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m1, b05: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m1, b06: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m1, b07: |00000000000000000000000000000000| delays: -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  best: m1, b03 delays: 19+-05
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Switching SDRAM to hardware control.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Memtest at 0x40000000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2.0MiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Write: 0x40000000-0x40200000 2.0MiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   Read: 0x40000000-0x40200000 2.0MiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Memtest OK
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Memspeed at 0x40000000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Sequential, 2.0MiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Write speed: 37.0MiB/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   Read speed: 48.7MiB/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;==============&lt;/span&gt; Boot &lt;span style=&#34;color:#f92672&#34;&gt;==================&lt;/span&gt;--
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Booting from serial...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Press Q or ESC to abort boot completely.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sL5DdSMmkekro
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Timeout
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Booting from network...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Local IP: 192.168.1.50
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Remote IP: 192.168.1.100
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Booting from boot.json...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Booting from boot.bin...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Copying boot.bin to 0x40000000...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Network boot failed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;No boot medium found
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;=============&lt;/span&gt; Console &lt;span style=&#34;color:#f92672&#34;&gt;================&lt;/span&gt;--
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;litex&amp;gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可见是非常方便的。之后可以用 litex_term 来往里面传程序，也可以直接通过 TFTP 来传。&lt;/p&gt;
&lt;h2 id=&#34;启动-linux&#34;&gt;启动 Linux&lt;/h2&gt;
&lt;p&gt;接下来，可以使用项目 &lt;a href=&#34;https://github.com/litex-hub/linux-on-litex-vexriscv&#34;&gt;https://github.com/litex-hub/linux-on-litex-vexriscv&lt;/a&gt; 来启动 Linux。参考项目 README，编译 Linux 并启动。不想折腾的话，可以从 &lt;a href=&#34;https://github.com/litex-hub/linux-on-litex-vexriscv/issues/164&#34;&gt;https://github.com/litex-hub/linux-on-litex-vexriscv/issues/164&lt;/a&gt; 下载编译好的结果。&lt;/p&gt;
&lt;p&gt;首先克隆项目到本地，然后运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/litex-hub/linux-on-litex-vexriscv.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd linux-on-litex-vexriscv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./make.py --board&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;arty
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就生成了 bitstream，接下来构建 Linux 和 rootfs：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone http://github.com/buildroot/buildroot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd buildroot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make BR2_EXTERNAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;../linux-on-litex-vexriscv/buildroot/ litex_vexriscv_defconfig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再构建 OpenSBI：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/litex-hub/opensbi --branch 0.8-linux-on-litex-vexriscv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd opensbi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# riscv32-unknown-elf toolchain is built by ct-ng&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make CROSS_COMPILE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;riscv32-unknown-elf- PLATFORM&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;litex/vexriscv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是实践过程中发现 ct-ng 编译的是 hardfloat 工具链，而默认配置下 vexriscv 不带 FPU，所以编译时用的是 rv32ima 作为 target，链接的时候报错，最后就直接用编译好的版本。&lt;/p&gt;
&lt;p&gt;最后得到如下的几个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boot.json: linux-on-litex-vexriscv/images/boot.json&lt;/li&gt;
&lt;li&gt;rv32.dtb: linux-on-litex-vexriscv/images/rv32.dtb&lt;/li&gt;
&lt;li&gt;Image: buildroot/output/images/Image&lt;/li&gt;
&lt;li&gt;rootfs.cpio: buildroot/output/images/rootfs.cpio&lt;/li&gt;
&lt;li&gt;opensbi.bin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把这些文件复制到 TFTP 服务的目录下，重新 Program linux-on-litex-vexriscv/build/arty/gateware/arty.bit，即可启动 Linux：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;--============== Boot ==================--
Booting from serial...
Press Q or ESC to abort boot completely.
sL5DdSMmkekro
Timeout
Booting from SDCard in SD-Mode...
Booting from boot.json...
Booting from boot.bin...
SDCard boot failed.
Booting from network...
Local IP: 192.168.1.50
Remote IP: 192.168.1.100
Booting from boot.json...
Copying Image to 0x40000000... (7726264 bytes)
Copying rv32.dtb to 0x40ef0000... (5294 bytes)
Copying rootfs.cpio to 0x41000000... (3566592 bytes)
Copying opensbi.bin to 0x40f00000... (53640 bytes)
Executing booted program at 0x40f00000

--============= Liftoff! ===============--

OpenSBI v0.8-1-gecf7701
   ____                    _____ ____ _____
  / __ \                  / ____|  _ \_   _|
 | |  | |_ __   ___ _ __ | (___ | |_) || |
 | |  | | &amp;#39;_ \ / _ \ &amp;#39;_ \ \___ \|  _ &amp;lt; | |
 | |__| | |_) |  __/ | | |____) | |_) || |_
  \____/| .__/ \___|_| |_|_____/|____/_____|
        | |
        |_|

Platform Name       : LiteX / VexRiscv-SMP
Platform Features   : timer,mfdeleg
Platform HART Count : 8
Boot HART ID        : 0
Boot HART ISA       : rv32imas
BOOT HART Features  : time
BOOT HART PMP Count : 0
Firmware Base       : 0x40f00000
Firmware Size       : 124 KB
Runtime SBI Version : 0.2

MIDELEG : 0x00000222
MEDELEG : 0x0000b101
[    0.000000] Linux version 6.1.0-rc2 (jiegec@linux) (riscv32-buildroot-linux-gnu-gcc.br_real (Buildroot 2023.02-270-gb100440bff) 11.3.0, GNU ld (GNU Binutils) 2.38) #1 SMP Wed Apr 19 16:21:39 CST 2023
[    0.000000] earlycon: liteuart0 at I/O port 0x0 (options &amp;#39;&amp;#39;)
[    0.000000] Malformed early option &amp;#39;console&amp;#39;
[    0.000000] earlycon: liteuart0 at MMIO 0xf0001000 (options &amp;#39;&amp;#39;)
[    0.000000] printk: bootconsole [liteuart0] enabled
[    0.000000] Zone ranges:
[    0.000000]   Normal   [mem 0x0000000040000000-0x000000004fffffff]
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000040000000-0x000000004fffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000040000000-0x000000004fffffff]
[    0.000000] SBI specification v0.2 detected
[    0.000000] SBI implementation ID=0x1 Version=0x8
[    0.000000] SBI TIME extension detected
[    0.000000] SBI IPI extension detected
[    0.000000] SBI RFENCE extension detected
[    0.000000] SBI HSM extension detected
[    0.000000] riscv: base ISA extensions aim
[    0.000000] riscv: ELF capabilities aim
[    0.000000] percpu: Embedded 8 pages/cpu s11732 r0 d21036 u32768
[    0.000000] Built 1 zonelists, mobility grouping on.  Total pages: 65024
[    0.000000] Kernel command line: console=liteuart earlycon=liteuart,0xf0001000 rootwait root=/dev/ram0
[    0.000000] Dentry cache hash table entries: 32768 (order: 5, 131072 bytes, linear)
[    0.000000] Inode-cache hash table entries: 16384 (order: 4, 65536 bytes, linear)
[    0.000000] mem auto-init: stack:off, heap alloc:off, heap free:off
[    0.000000] Memory: 243336K/262144K available (5848K kernel code, 571K rwdata, 906K rodata, 215K init, 254K bss, 18808K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
[    0.000000] rcu: Hierarchical RCU implementation.
[    0.000000] rcu:     RCU restricting CPUs from NR_CPUS=32 to nr_cpu_ids=1.
[    0.000000] rcu: RCU calculated value of scheduler-enlistment delay is 25 jiffies.
[    0.000000] rcu: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=1
[    0.000000] NR_IRQS: 64, nr_irqs: 64, preallocated irqs: 0
[    0.000000] riscv-intc: 32 local interrupts mapped
[    0.000000] plic: interrupt-controller@f0c00000: mapped 32 interrupts with 1 handlers for 2 contexts.
[    0.000000] rcu: srcu_init: Setting srcu_struct sizes based on contention.
[    0.000000] riscv-timer: riscv_timer_init_dt: Registering clocksource cpuid [0] hartid [0]
[    0.000000] clocksource: riscv_clocksource: mask: 0xffffffffffffffff max_cycles: 0x171024e7e0, max_idle_ns: 440795205315 ns
[    0.000018] sched_clock: 64 bits at 100MHz, resolution 10ns, wraps every 4398046511100ns
[    0.010246] Console: colour dummy device 80x25
[    0.014169] Calibrating delay loop (skipped), value calculated using timer frequency.. 200.00 BogoMIPS (lpj=400000)
[    0.024255] pid_max: default: 32768 minimum: 301
[    0.033262] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
[    0.039790] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
[    0.080128] ASID allocator using 9 bits (512 entries)
[    0.086947] rcu: Hierarchical SRCU implementation.
[    0.090826] rcu:     Max phase no-delay instances is 1000.
[    0.103556] smp: Bringing up secondary CPUs ...
[    0.107186] smp: Brought up 1 node, 1 CPU
[    0.118798] devtmpfs: initialized
[    0.169571] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
[    0.178637] futex hash table entries: 256 (order: 2, 16384 bytes, linear)
[    0.214981] NET: Registered PF_NETLINK/PF_ROUTE protocol family
[    0.455944] pps_core: LinuxPPS API ver. 1 registered
[    0.460007] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &amp;lt;giometti@linux.it&amp;gt;
[    0.469508] PTP clock support registered
[    0.476324] FPGA manager framework
[    0.493464] clocksource: Switched to clocksource riscv_clocksource
[    0.722433] NET: Registered PF_INET protocol family
[    0.731210] IP idents hash table entries: 4096 (order: 3, 32768 bytes, linear)
[    0.752236] tcp_listen_portaddr_hash hash table entries: 512 (order: 0, 4096 bytes, linear)
[    0.760269] Table-perturb hash table entries: 65536 (order: 6, 262144 bytes, linear)
[    0.767834] TCP established hash table entries: 2048 (order: 1, 8192 bytes, linear)
[    0.775654] TCP bind hash table entries: 2048 (order: 3, 32768 bytes, linear)
[    0.783026] TCP: Hash tables configured (established 2048 bind 2048)
[    0.789689] UDP hash table entries: 256 (order: 1, 8192 bytes, linear)
[    0.795620] UDP-Lite hash table entries: 256 (order: 1, 8192 bytes, linear)
[    0.816406] Unpacking initramfs...
[    0.926651] workingset: timestamp_bits=30 max_order=16 bucket_order=0
[    1.186672] io scheduler mq-deadline registered
[    1.190309] io scheduler kyber registered
[    1.570624] No litex,nclkout entry in the dts file
[    1.607895] LiteX SoC Controller driver initialized
[    2.358518] Initramfs unpacking failed: invalid magic at start of compressed archive
[    2.448554] Freeing initrd memory: 8192K
[    3.423827] f0001000.serial: ttyLXU0 at MMIO 0x0 (irq = 0, base_baud = 0) is a liteuart
[    3.431446] printk: console [liteuart0] enabled
[    3.431446] printk: console [liteuart0] enabled
[    3.440068] printk: bootconsole [liteuart0] disabled
[    3.440068] printk: bootconsole [liteuart0] disabled
[    3.499884] liteeth f0002000.mac eth0: irq 2 slots: tx 2 rx 2 size 2048
[    3.510055] i2c_dev: i2c /dev entries driver
[    3.520573] i2c i2c-0: Not I2C compliant: can&amp;#39;t read SCL
[    3.525314] i2c i2c-0: Bus may be unreliable
[    3.577560] litex-mmc f0009000.mmc: LiteX MMC controller initialized.
[    3.623272] NET: Registered PF_INET6 protocol family
[    3.653652] Segment Routing with IPv6
[    3.657870] In-situ OAM (IOAM) with IPv6
[    3.662630] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver
[    3.683817] NET: Registered PF_PACKET protocol family
[    3.699016] Freeing unused kernel image (initmem) memory: 208K
[    3.704055] Kernel memory protection not selected by kernel config.
[    3.710506] Run /init as init process
Starting syslogd: OK
Starting klogd: OK
Running sysctl: OK
Saving 256 bits of non-creditable seed for next boot
Starting network: OK

Welcome to Buildroot
buildroot login: root
                   __   _
                  / /  (_)__  __ ____ __
                 / /__/ / _ \/ // /\ \ /
                /____/_/_//_/\_,_//_\_\
                      / _ \/ _ \
   __   _ __      _  _\___/_//_/         ___  _
  / /  (_) /____ | |/_/__| | / /____ __ / _ \(_)__ _____  __
 / /__/ / __/ -_)&amp;gt;  &amp;lt;/___/ |/ / -_) \ // , _/ (_-&amp;lt;/ __/ |/ /
/____/_/\__/\__/_/|_|____|___/\__/_\_\/_/|_/_/___/\__/|___/
                  / __/  |/  / _ \
                 _\ \/ /|_/ / ___/
                /___/_/  /_/_/
  32-bit RISC-V Linux running on LiteX / VexRiscv-SMP.

login[70]: root login on &amp;#39;console&amp;#39;
root@buildroot:~# 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Linux 中也可以访问网络（通过主线内的 liteeth 驱动）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dmesg | grep liteeth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    3.499861&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; liteeth f0002000.mac eth0: irq &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; slots: tx &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; rx &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; size &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ip link set eth0 up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ip a add 192.168.1.50/24 dev eth0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ping 192.168.1.100
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;其他开发板&#34;&gt;其他开发板&lt;/h2&gt;
&lt;p&gt;除了 Digilent Arty A7，我还做了以下开发板的 LiteX 支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/litex-boards/tree/vcu128&#34;&gt;VCU128&lt;/a&gt;，支持 UART，SDRAM 和 HBM；以太网因为是 SGMII 暂时无法解决&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/litex-boards/tree/ma703fa-35t&#34;&gt;MA703FA-35T&lt;/a&gt;，支持 UART，SDRAM，ETH、SD 卡和 HDMI；MA703FA-35T 的文档中 TF_DAT3 引脚绑定有误，AB12 应该改为 AB20&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/litex-boards/tree/alinx_ax7021&#34;&gt;Alinx AX7021&lt;/a&gt;，支持 UART over JTAG 和 HDMI&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lab.cs.tsinghua.edu.cn/digital-design/doc/hardware/board/&#34;&gt;THU Digital Design&lt;/a&gt;，基于 @gaoyichuan 的实现，支持 UART，SDRAM，ETH，SD 卡和 VGA&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; 数参数个数的特别方法</title>
      <link>https://jia.je/programming/2023/04/14/counting-arguments/</link>
      <pubDate>Fri, 14 Apr 2023 09:24:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2023/04/14/counting-arguments/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;群友上个月提了一个未知来源问题：&lt;/p&gt;
&lt;p&gt;实现一个你自己的 &lt;code&gt;printf(int, ...)&lt;/code&gt; 函数，该函数包含可变参数。为简便期间，假设所有参数均为 int 类型。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一个参数是一个普通参数，不表示后续可变参数的数目&lt;/li&gt;
&lt;li&gt;在 printf 中逐个输出所有传入的整数值（可使用系统自带的 kprintf 实现输出）&lt;/li&gt;
&lt;li&gt;思考如何判定参数结束，是否有副作用&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;va_args&#34;&gt;va_args&lt;/h2&gt;
&lt;p&gt;我们知道，传统的处理可变参数的方法是 va_args，但是它无法知道传入了多少参数，而要像 POSIX printf 那样，解析 format 参数，然后一个一个去取。&lt;/p&gt;
&lt;p&gt;所以问题的关键是，如何获取参数的个数？一个思路是宏，尝试用宏的魔法来计算出参数个数，这个方法可能是可以的，但是没有深究。另一个思路是利用 ABI 的特点，例如 i386 上参数是通过栈传递的，那或许可以在栈上找到所有的 int，但是问题是无法确认参数在哪里结束。&lt;/p&gt;
&lt;h2 id=&#34;__builtin_va_arg_pack_len&#34;&gt;__builtin_va_arg_pack_len&lt;/h2&gt;
&lt;p&gt;今天，另一位群友发了一个链接：&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Constructing-Calls.html#Constructing-Calls&#34;&gt;https://gcc.gnu.org/onlinedocs/gcc/Constructing-Calls.html#Constructing-Calls&lt;/a&gt;，讲述了 GCC 中一些特别的 builtin 函数，用于函数调用相关的魔法，其中一段描述吸引了我的眼球：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Built-in Function: int __builtin_va_arg_pack_len ()

This built-in function returns the number of anonymous arguments of an
inline function. It can be used only in inline functions that are always
inlined, never compiled as a separate function, such as those using
__attribute__ ((__always_inline__)) or __attribute__ ((__gnu_inline__))
extern inline functions. For example following does link- or run-time
checking of open arguments for optimized code:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这正好实现了前面提到的获取参数个数，实现思路也可以想到，就是编译器在 inline 的时候，顺便做了一次替换。也因此，这个函数必须被 inline，不能正常调用。有了这个思路以后，经过一番尝试，写入了下面的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdarg.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;my_printf_inner&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count, ...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    va_list args;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;va_start&lt;/span&gt;(args, count);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; count;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;va_arg&lt;/span&gt;(args, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;va_end&lt;/span&gt;(args);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;__attribute__&lt;/span&gt; ((__always_inline__)) &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;my_printf&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, ...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__builtin_va_arg_pack_len&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, a);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;my_printf_inner&lt;/span&gt;(count, &lt;span style=&#34;color:#a6e22e&#34;&gt;__builtin_va_arg_pack&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;my_printf&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个代码在 GCC 中可以正确地输出 1-10 的十个数字。我一开始尝试的时候，把循环也写到 &lt;code&gt;my_printf&lt;/code&gt; 函数中，但是 GCC 的 inline 就罢工了，最后只好拆成两个函数，把不知道参数个数的问题，转化成知道参数的问题，剩下就好解决了。&lt;/p&gt;
&lt;p&gt;最后生成的汇编如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;rbp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;rbp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;rsp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;rsp&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PTR&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-4&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PTR&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-8&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PTR&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-4&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;esi&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;edi&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;OFFSET&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FLAT&lt;/span&gt;:.&lt;span style=&#34;color:#66d9ef&#34;&gt;LC0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;printf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PTR&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-8&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;r9d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;r8d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;edx&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;esi&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;edi&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my_printf_inner&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;rsp&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;nop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它 inline 了 &lt;code&gt;my_printf&lt;/code&gt; 的实现，先调用了第一个 &lt;code&gt;printf&lt;/code&gt;，然后把剩下的参数个数 &lt;code&gt;9&lt;/code&gt; 赋值给了 &lt;code&gt;edi&lt;/code&gt;，剩下就是正常的传参了。&lt;/p&gt;
&lt;p&gt;以上实验都在 Godbolt Compiler Explorer 中进行：&lt;a href=&#34;https://godbolt.org/z/KjYzETn5Y&#34;&gt;https://godbolt.org/z/KjYzETn5Y&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;继续挖掘，会发现在 libc 中出现了 __builtin_va_arg_pack_len 的身影，在 fcntl2.h 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;__errordecl&lt;/span&gt; (__open_too_many_args,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;open can be called either with 2 or 3 arguments, not more&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;__errordecl&lt;/span&gt; (__open_missing_mode,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;open with O_CREAT or O_TMPFILE in second argument needs 3 arguments&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;__fortify_function &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;__path, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; __oflag, ...)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;__va_arg_pack_len&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;__open_too_many_args&lt;/span&gt; ();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;__builtin_constant_p&lt;/span&gt; (__oflag))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;__OPEN_NEEDS_MODE&lt;/span&gt; (__oflag) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__va_arg_pack_len&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;__open_missing_mode&lt;/span&gt; ();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__open_2&lt;/span&gt; (__path, __oflag);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__open_alias&lt;/span&gt; (__path, __oflag, &lt;span style=&#34;color:#a6e22e&#34;&gt;__va_arg_pack&lt;/span&gt; ());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;__va_arg_pack_len&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__open_2&lt;/span&gt; (__path, __oflag);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__open_alias&lt;/span&gt; (__path, __oflag, &lt;span style=&#34;color:#a6e22e&#34;&gt;__va_arg_pack&lt;/span&gt; ());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它核心的思想就是根据 open 第三个参数的有无，调用相应的 &lt;code&gt;__open_2&lt;/code&gt; 或者 &lt;code&gt;__open_alias&lt;/code&gt; 函数，这样就不用再用 &lt;code&gt;va_args&lt;/code&gt; 方法了，并且如果传入了过多的参数，可以直接在编译期指出错误。例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;报错：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In file included from &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;usr&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;include&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;fcntl.h:&lt;span style=&#34;color:#ae81ff&#34;&gt;301&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 from &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;source&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In function &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;open&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inlined from &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;main&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; at &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;source&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;usr&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;include&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;x86_64&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gnu&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;fcntl2.h:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; error: call to &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;__open_too_many_args&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; declared with attribute error: open can be called either with &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; or &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; arguments, not more
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;__open_too_many_args&lt;/span&gt; ();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;^~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ASM generation compiler returned: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In file included from &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;usr&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;include&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;fcntl.h:&lt;span style=&#34;color:#ae81ff&#34;&gt;301&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 from &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;source&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In function &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;open&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inlined from &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;main&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; at &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;source&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;usr&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;include&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;x86_64&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gnu&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;fcntl2.h:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; error: call to &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;__open_too_many_args&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; declared with attribute error: open can be called either with &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; or &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; arguments, not more
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;__open_too_many_args&lt;/span&gt; ();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;^~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Execution build compiler returned: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compiler Explorer:&lt;a href=&#34;https://godbolt.org/z/hebshz3P5&#34;&gt;https://godbolt.org/z/hebshz3P5&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;使用-c-宏&#34;&gt;使用 C 宏&lt;/h2&gt;
&lt;p&gt;和 Claude 聊了一下，是否能够用 C 宏来实现，它的回答是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PRINTF(...) printf(__VA_ARGS__)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define NARG(...)  (sizeof((int[]){__VA_ARGS__})/sizeof(int))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;format, ...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    va_list args;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;va_start&lt;/span&gt;(args, format);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Access the variable arguments using va_arg based on 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// the number of arguments passed, obtained using NARG
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;va_end&lt;/span&gt;(args);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Usage:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PRINTF&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);     &lt;span style=&#34;color:#75715e&#34;&gt;// Prints 1 2 3 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PRINTF&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Prints 1 2 3 4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;核心思路就是把参数列表放到数组里，然后让编译器去推断数组大小。沿着这个思路，实现出代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdarg.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;my_printf_inner&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count, ...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    va_list args;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;va_start&lt;/span&gt;(args, count);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; count;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;va_arg&lt;/span&gt;(args, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;va_end&lt;/span&gt;(args);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MY_PRINTF(...) do {int len=(sizeof((int[]){__VA_ARGS__})/sizeof(int)); my_printf_inner(len, __VA_ARGS__); } while(0);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;MY_PRINTF&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也是可以工作的。Compiler Explorer 链接：&lt;a href=&#34;https://godbolt.org/z/TxKb3YEcf&#34;&gt;https://godbolt.org/z/TxKb3YEcf&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT&lt;/h2&gt;
&lt;p&gt;尝试询问了一下 ChatGPT：&lt;a href=&#34;https://shareg.pt/IXUKjYK&#34;&gt;https://shareg.pt/IXUKjYK&lt;/a&gt;，它可以写出额外传入 int 个数的版本，可以写出哨兵（传入 &lt;code&gt;-1&lt;/code&gt; 表示结束）的版本，提示了 builtin 以后，再提示 inline 和 always_inline，最后让它拆分成两个函数，得到的代码距离正确结果已经比较接近，但还是有一些问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SCO OpenServer 6.0.0 虚拟机安装</title>
      <link>https://jia.je/system/2023/04/10/sco6/</link>
      <pubDate>Mon, 10 Apr 2023 20:21:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2023/04/10/sco6/</guid>
      <description>&lt;h2 id=&#34;安装过程&#34;&gt;安装过程&lt;/h2&gt;
&lt;p&gt;首先从 &lt;a href=&#34;https://www.sco.com/support/update/download/product.php?pfid=12&amp;amp;prid=20&#34;&gt;https://www.sco.com/support/update/download/product.php?pfid=12&amp;amp;prid=20&lt;/a&gt; 下载 SCO OpenServer 的安装 ISO。尝试过用 QEMU 启动，但是会卡在无法读取硬盘的错误上。&lt;/p&gt;
&lt;p&gt;最后使用 VirtualBox 7.0.6 成功启动，注意创建虚拟机的时候不要给太多内存，例如 4GB 就起不来，2GB 可以。硬盘我也只给了 4GB 的空间。&lt;/p&gt;
&lt;p&gt;安装过程中会询问 License number 和 License code，可以选择使用 Evaluation License，或者使用下面参考文档中提供的 License。按照流程一直走就可以了。如果重启出现无法 mount root 的问题，就 poweroff 再开机。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;p&gt;本博客参考了以下文档中的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://virtuallyfun.com/2020/11/21/fun-with-openserver-6-and-mergepro/&#34;&gt;https://virtuallyfun.com/2020/11/21/fun-with-openserver-6-and-mergepro/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>UnixWare 7.1.4 虚拟机安装</title>
      <link>https://jia.je/system/2023/04/10/unixware7/</link>
      <pubDate>Mon, 10 Apr 2023 19:11:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2023/04/10/unixware7/</guid>
      <description>&lt;h2 id=&#34;安装过程&#34;&gt;安装过程&lt;/h2&gt;
&lt;p&gt;在 &lt;a href=&#34;https://www.sco.com/support/update/download/product.php?pfid=1&amp;amp;prid=6&#34;&gt;https://www.sco.com/support/update/download/product.php?pfid=1&amp;amp;prid=6&lt;/a&gt; 可以看到 UnixWare 7.1.4 的相关下载，其中首先要下载 UnixWare 的安装 ISO：&lt;a href=&#34;https://www.sco.com/support/update/download/release.php?rid=346&#34;&gt;https://www.sco.com/support/update/download/release.php?rid=346&lt;/a&gt;，尝试过用 QEMU 启动，会遇到找不到 CD-ROM 的问题，虽然通过设置 &lt;code&gt;ATAPI_DMA_DISABLE=YES&lt;/code&gt; 解决了，但是又遇到了找不到硬盘的问题。&lt;/p&gt;
&lt;p&gt;最后换成了 VirtualBox 7.0.6。用 VirtualBox 创建虚拟机的时候，不要给太多内存，4GB 就会无法启动，2GB 可以，硬盘也不要给太多，4GB 就足够。&lt;/p&gt;
&lt;p&gt;剩下就是按照安装界面一路默认即可，License 可以选择 Defer，使用 Evaluation License。&lt;/p&gt;
&lt;p&gt;关机以后，修改启动顺序，把硬盘放到 CD 前，然后启动，就可以进入系统了。如果重启出现无法 mount root 的问题，就 poweroff 再开机。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;p&gt;本博客参考了以下文档中的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://virtuallyfun.com/2018/01/31/revisiting-a-unixware-7-1-1-install-on-qemu-kvm/&#34;&gt;https://virtuallyfun.com/2018/01/31/revisiting-a-unixware-7-1-1-install-on-qemu-kvm/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SCO OpenServer 5.0.7 虚拟机安装</title>
      <link>https://jia.je/system/2023/04/09/sco5/</link>
      <pubDate>Sun, 09 Apr 2023 23:03:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2023/04/09/sco5/</guid>
      <description>&lt;h2 id=&#34;安装过程&#34;&gt;安装过程&lt;/h2&gt;
&lt;p&gt;首先从 &lt;a href=&#34;https://www.sco.com/support/update/download/release.php?rid=218&#34;&gt;https://www.sco.com/support/update/download/release.php?rid=218&lt;/a&gt; 下载 SCO OpenServer 的安装 ISO 和从 &lt;a href=&#34;https://www.sco.com/support/update/download/release.php?rid=187&#34;&gt;https://www.sco.com/support/update/download/release.php?rid=187&lt;/a&gt; 下载 Supplement CD 5 ISO，然后用 QEMU 启动，这次需要用图形界面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-system-i386 -accel kvm -m &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; -serial mon:stdio -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sco-hdd.qcow2,if&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ide -cdrom ../../ISOs/OpenServer-5.0.7Hw-10Jun05_1800.iso
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装过程中会询问 License number 和 License code，按照 &lt;a href=&#34;https://virtuallyfun.com/2020/11/03/fun-with-openserver-and-merge/&#34;&gt;https://virtuallyfun.com/2020/11/03/fun-with-openserver-and-merge/&lt;/a&gt; 进行输入。&lt;/p&gt;
&lt;p&gt;安装的时候，在 hard disk setup 那一步，记得关掉 bad tracking，否则会把整个盘扫一遍，我一开始建了 20GB 的 qcow2，结果这一步跑了一晚上，而且把 qcow2 撑满了。&lt;/p&gt;
&lt;p&gt;安装后，重新启动，这次打开网络，同时挂载 Supplement CD 5 ISO：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-system-i386 -accel kvm -m &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; -serial chardev:mouse -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sco-hdd.qcow2,if&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ide -cdrom osr507suppcd5.iso -net nic -net tap,script&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;no,ifname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tap0 -chardev msmouse,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mouse
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动以后，运行 custom 命令，然后从 CD-ROM 安装 Graphics and NIC Drivers。我尝试了安装 Maintenance Pack 5，但是启动以后会找不到硬盘，只好恢复之前的 qcow2 备份。可能是缺少了运行 &lt;code&gt;/etc/conf/cf.d/link_unix&lt;/code&gt; 命令。&lt;/p&gt;
&lt;p&gt;为了让图形界面的鼠标工作，在命令行里运行 &lt;code&gt;mkdev mouse&lt;/code&gt;，然后创建一个 Serial mouse -&amp;gt; Microsoft Serial Mouse，Relink kernel 再重启。注意要和 QEMU 的 &lt;code&gt;-serial chardev:mouse -chardev msmouse,id=mouse&lt;/code&gt; 配合。但是外面鼠标和里面鼠标移动的距离不一样。&lt;/p&gt;
&lt;p&gt;然后运行 &lt;code&gt;netconfig&lt;/code&gt; 命令，添加 LAN adapter，选择 Intel 网卡，然后退出，Relink kernel 然后重启，就可以访问网络了。可以用 &lt;code&gt;ifconfig net0 10.0.2.16&lt;/code&gt; 设置 IP 地址， &lt;code&gt;route add default 10.0.2.15&lt;/code&gt; 来设置默认路由。可以通过降低安全性，兼容老系统来 SSH：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh -oCiphers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aes128-cbc -oHostKeyAlgorithms&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ssh-rsa -oKexAlgorithms&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;+diffie-hellman-group1-sha1 root@10.0.2.16
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类似地，scp 也要带上上面的参数，再打开 &lt;code&gt;-O&lt;/code&gt; 模式。&lt;/p&gt;
&lt;h2 id=&#34;安装软件&#34;&gt;安装软件&lt;/h2&gt;
&lt;p&gt;OpenServer 有自带的工具链：挂载安装 ISO，使用 custom 命令安装 OpenServer Development System 和 SCO OpenServer Linker and Application Development Libraries。但是需要 License 才能使用。&lt;/p&gt;
&lt;p&gt;另一个方法是通过 FTP 访问 &lt;a href=&#34;ftp://ftp2.sco.com/pub/skunkware/osr5/vols/&#34;&gt;ftp://ftp2.sco.com/pub/skunkware/osr5/vols/&lt;/a&gt;，可以看到一些软件的安装包，在里面下载软件并安装。例如，要安装 gcc：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget ftp://ftp2.sco.com/pub/skunkware/osr5/vols/gcc-2.95.2-VOLS.tar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp -r -O -oCiphers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aes128-cbc -oHostKeyAlgorithms&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ssh-rsa -oKexAlgorithms&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;+diffie-hellman-group1-sha1 gcc-2.95.2-VOLS.tar root@10.0.2.16:/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in sco5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar xf gcc-2.95.2-VOLS.tar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install from Media Images&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;custom
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/local/bin/gcc --version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;依法炮制，可以安装 gcc、bash、make、git 等常用软件，只不过版本都很老。&lt;/p&gt;
&lt;h2 id=&#34;virtualbox&#34;&gt;VirtualBox&lt;/h2&gt;
&lt;p&gt;测试了一下，在 VirtualBox 7.0.6 中，可以正常安装 SCO OpenServer 5，不需要额外的设置，按照上面一样的方法进行安装即可，鼠标选择 PS/2 Microsoft Mouse，和 QEMU 一样有移动距离不对的情况。安装完，把硬盘启动顺序调到前面，重启即可。&lt;/p&gt;
&lt;p&gt;网卡的话，照常 &lt;code&gt;netconfig&lt;/code&gt;，然后添加 AMD PCNet 网卡即可。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;p&gt;本博客参考了以下文档中的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://virtuallyfun.com/2020/11/03/fun-with-openserver-and-merge/&#34;&gt;https://virtuallyfun.com/2020/11/03/fun-with-openserver-and-merge/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AIX 7.2 虚拟机安装</title>
      <link>https://jia.je/system/2023/04/09/aix/</link>
      <pubDate>Sun, 09 Apr 2023 12:47:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2023/04/09/aix/</guid>
      <description>&lt;h2 id=&#34;安装过程&#34;&gt;安装过程&lt;/h2&gt;
&lt;p&gt;宿主机环境是 Debian bookworm，不需要像其他教程那样自己编译 qemu，直接 apt install 即可。&lt;/p&gt;
&lt;p&gt;通过 google 可以搜索到 AIX 7.2 的 ISO，下载第一个 ISO 到本地，然后在 QEMU 中启动安装镜像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-img create -f qcow2 aix-hdd.qcow2 20G
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-system-ppc64 -cpu POWER8 -machine pseries -m &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; -serial mon:stdio -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aix-hdd.qcow2,if&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;none,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;drive-virtio-disk0 -device virtio-scsi-pci,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;scsi -device scsi-hd,drive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;drive-virtio-disk0 -cdrom aix_7200-04-02-2027_1of2_072020.iso -prom-env boot-command&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;boot cdrom:\ppc\chrp\bootfile.exe&amp;#39;&lt;/span&gt; -display none
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进去以后，耐心等待，直到进入安装界面，按照提示进行安装，建议安装上 SSH Server，关掉图形界面，这样安装会比较快。安装需要几十分钟，安装完成后会进入 bootloop，关掉 QEMU。接着，准备好网络：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ip tuntap add tap0 mode tap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ip link set tap0 up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ip a add 10.0.2.15/24 dev tap0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再启动虚拟机，注意启动选项修改了，并且多了网络的配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-system-ppc64 -cpu POWER8 -machine pseries -m &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; -serial mon:stdio -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aix-hdd.qcow2,if&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;none,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;drive-virtio-disk0 -device virtio-scsi-pci,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;scsi -device scsi-hd,drive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;drive-virtio-disk0 -cdrom aix_7200-04-02-2027_1of2_072020.iso -prom-env boot-command&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;boot disk:&amp;#39;&lt;/span&gt; -display none -net nic -net tap,script&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;no,ifname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tap0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一次启动系统时，会进入配置界面，修改好 root 密码，然后配置网络：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chdev -l en0 -a netaddr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10.0.2.16 -a netmask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;255.255.255.0 -a state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到这里了以后，就可以通过 ssh 访问虚拟机：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh root@10.0.2.16
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;kvm&#34;&gt;KVM&lt;/h2&gt;
&lt;p&gt;另外测试了一下，在 powerpc64 机器上，可以开启 KVM 来加速 QEMU，但是需要首先关掉 SMT。另外在使用过程中出现了玄学问题，最后还是在 x86 上跑了虚拟机。&lt;/p&gt;
&lt;h2 id=&#34;安装软件&#34;&gt;安装软件&lt;/h2&gt;
&lt;p&gt;接下来，可以从 &lt;a href=&#34;https://www.ibm.com/support/pages/node/882892&#34;&gt;AIX Toolbox for Open Source Software&lt;/a&gt; 安装软件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in aix&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chfs -a size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;+200M /home
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chfs -a size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;+400M /opt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chfs -a size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;+400M /tmp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# setup default gateway&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;route add &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 10.0.2.15 -if en0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# edit /etc/resolv.conf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nameserver 1.1.1.1&amp;#34;&lt;/span&gt; &amp;gt; /etc/resolv.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in host&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://public.dhe.ibm.com/aix/freeSoftware/aixtoolbox/ezinstall/ppc/dnf_aixtoolbox.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp dnf_aixtoolbox.sh root@10.0.2.16:/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in aix&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rpm --rebuilddb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ksh /dnf_aixtoolbox.sh -y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/freeware/bin/dnf update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/freeware/bin/dnf install gcc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装好的包会放到 /opt/freeware 路径下。&lt;/p&gt;
&lt;p&gt;安装过程中可能需要继续扩大各个 fs 的大小。&lt;/p&gt;
&lt;p&gt;dnf 如果提示缺少 &lt;code&gt;libssl.a&lt;/code&gt;，参考 &lt;a href=&#34;https://www.ibm.com/support/pages/resolving-rpm-libssla-and-libcryptoa-errors&#34;&gt;https://www.ibm.com/support/pages/resolving-rpm-libssla-and-libcryptoa-errors&lt;/a&gt; 进行解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;访问 &lt;a href=&#34;https://www.ibm.com/resources/mrs/assets?source=aixbp&amp;amp;S_PKG=openssl&#34;&gt;https://www.ibm.com/resources/mrs/assets?source=aixbp&amp;amp;S_PKG=openssl&lt;/a&gt; 下载安装包，例如 &lt;code&gt;openssl-1.1.2.2000.tar.Z&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;scp 到 AXI 上安装：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uncompress openssl-1.1.2.2000.tar.Z
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -xvf openssl-1.1.2.2000.tar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# install openssl.base using smitty&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了方便，可以修改 &lt;code&gt;/etc/environment&lt;/code&gt; 文件，把 &lt;code&gt;/opt/freeware/bin&lt;/code&gt; 目录加到 PATH 目录中。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;p&gt;本博客参考了以下文档中的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aix4admins.blogspot.com/2020/04/qemu-aix-on-x86-qemu-quick-emulator-is.html&#34;&gt;https://aix4admins.blogspot.com/2020/04/qemu-aix-on-x86-qemu-quick-emulator-is.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://virtuallyfun.com/2019/04/22/installing-aix-on-qemu/&#34;&gt;https://virtuallyfun.com/2019/04/22/installing-aix-on-qemu/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/support/pages/resolving-rpm-libssla-and-libcryptoa-errors&#34;&gt;https://www.ibm.com/support/pages/resolving-rpm-libssla-and-libcryptoa-errors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RAM 读写冲突</title>
      <link>https://jia.je/hardware/2023/04/07/ram-read-write-collision/</link>
      <pubDate>Fri, 07 Apr 2023 00:48:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/04/07/ram-read-write-collision/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;在 FPGA 或者 ASIC 中，通常都需要使用 RAM，通过读口、写口或者读写口来进行访问。常见的配置有单读写口（1RW），一读一写（1R1W）等等，读口通常有 1 个周期的延时。那么，如果在同一个周期内，读口和写口访问了同一个地址，会发生什么呢？可能会想到几种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读和写都失败，读出的数据未定义，数据没写进去&lt;/li&gt;
&lt;li&gt;数据写进去了，读出的数据未定义&lt;/li&gt;
&lt;li&gt;数据写进去了，读出了写之前的旧数据&lt;/li&gt;
&lt;li&gt;数据写进去了，读出了同一个周期写入的新数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面以具体的例子来看看，实际情况是什么样子。&lt;/p&gt;
&lt;h2 id=&#34;xilinx-fpga&#34;&gt;Xilinx FPGA&lt;/h2&gt;
&lt;p&gt;首先测试的是 Xilinx FPGA 上的 RAM，测试的对象是 XPM，统一设置读延迟为一个周期，使用 Vivado 仿真。&lt;/p&gt;
&lt;h3 id=&#34;一读一写&#34;&gt;一读一写&lt;/h3&gt;
&lt;p&gt;首先测试一读一写，也就是 xpm_memory_sdpram 模块。模块支持三种模式：NO_CHANGE（默认值）、READ_FIRST 和 WRITE_FIRST，因此我例化了三份，输入一样的信号，设置为三种不同的模式，然后比较输出结果。为了简化，读写使用一个时钟。下面是测试的波形：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clk&#34;, wave: &#34;p....&#34;},
      { name: &#34;w_addr&#34;, wave: &#34;2....&#34;, data: [&#34;0000&#34;]},
      { name: &#34;w_data&#34;, wave: &#34;2x2xx&#34;, data: [&#34;1111&#34;, &#34;2222&#34;]},
      { name: &#34;w_en&#34;, wave: &#34;1010.&#34;},
      { name: &#34;r_addr&#34;, wave: &#34;2....&#34;, data: [&#34;0000&#34;]},
      { name: &#34;r_en&#34;, wave: &#34;0.1.0&#34;},
      { name: &#34;r_data_no_change&#34;, wave: &#34;xxx22&#34;, data: [&#34;xxxx&#34;, &#34;2222&#34;]},
      { name: &#34;r_data_read_first&#34;, wave: &#34;xxx22&#34;, data: [&#34;1111&#34;, &#34;2222&#34;]},
      { name: &#34;r_data_write_first&#34;, wave: &#34;xxx22&#34;, data: [&#34;xxxx&#34;, &#34;2222&#34;]},
    ]
}
&lt;/script&gt;
&lt;p&gt;图中第一个周期向地址 0 写入了 1111，然后第三个周期同时读写地址 0 的数据，此时 NO_CHANGE 和 WRITE_FIRST 两种模式中，写入成功，读取失败；READ_FIRST 模式读取成功，并且读取的是写入之前的数据。第四个周期时，读写没有出现冲突，三种模式都可以读出写入的新数据。&lt;/p&gt;
&lt;p&gt;这有些出乎我的意料：之前在很多地方用过 XPM，但是都没考虑过读写地址相同的情况，而且默认设置（NO_CHANGE）下，输出结果是不确定的。实际上这个行为在 PG058 Block Memory Generator 里面提到了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synchronous Write-Read Collisions: A synchronous Write-Read collision might occur if a port attempts to Write a memory location and the other port reads the same location. While memory contents are not corrupted in Write-Read collisions, the validity of the output data depends on the Write port operating mode.
&lt;ul&gt;
&lt;li&gt;If the Write port is in READ_FIRST mode, the other port can reliably read the old memory contents.&lt;/li&gt;
&lt;li&gt;If the Write port is in WRITE_FIRST or NO_CHANGE mode, data on the output of the Read port is invalid.&lt;/li&gt;
&lt;li&gt;In the case of byte-writes, only updated bytes are invalid on the Read port output.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与上面观察到的结果基本吻合，另外这里提到了带 Mask 的情况：即使是 WRITE_FIRST 或者 NO_CHANGE，也可以读出没写入的那部分（即 WEA[i] = 0）旧的数据。&lt;/p&gt;
&lt;p&gt;对此，Xilinx 的建议是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;For Synchronous Clocking and during a collision, the Write mode of port A
can be configured so that a Read operation on port B either produces data
(acting like READ_FIRST), or produces undefined data (Xs). For this reason,
it is always advised to use READ_FIRST when configured as a Simple Dual-port
RAM. For asynchronous clocking, Xilinx recommends setting the Write mode of
Port A to WRITE_FIRST for collision safety.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也就是说同步时钟用 READ_FIRST，异步时钟用 WRITE_FIRST。甚至 Vivado 还可以贴心地帮你设置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;For 7 series devices, the selected operating mode is passed to the block RAM
when the RAM_MODE is set to TDP. For the primitives with RAM_MODE set to
SDP, the write mode is READ_FIRST for synchronous clocking and WRITE_FIRST
for asynchronous clocking.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是 XPM 似乎就没有这个设定了，而是由用户来传入。&lt;/p&gt;
&lt;p&gt;而对于异步时钟，文档直接说不要让冲突发生：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Using asynchronous clocks, when one port writes data to a memory location,
the other port must not Read or Write that location for a specified amount
of time.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这点似乎经常被我们忽略。&lt;/p&gt;
&lt;p&gt;那么，如果在 Verilog 中实现一个语义上 WRITE_FIRST 的 RAM，会发生什么呢：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;`timescale&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;ns&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;ps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; mem_1r1w (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; clk,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] R0_addr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; R0_en,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] R0_data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] W0_addr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; W0_en,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] W0_data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] reg_R0_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] mem [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; clk) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (W0_en) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      mem[W0_addr] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; W0_data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; clk) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (R0_en) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      reg_R0_addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; R0_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;assign&lt;/span&gt; R0_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mem[reg_R0_addr];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;奇怪的是，综合出来会使用 BRAM 实现，并且采用 READ_FIRST 作为 RAMB36E1 的 WRITE_MODE_A 和 WRITE_MODE_B。如果写成语义 READ_FIRST：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;`timescale&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;ns&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;ps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; mem_1r1w (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; clk,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] R0_addr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; R0_en,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] R0_data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] W0_addr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; W0_en,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] W0_data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] reg_R0_data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] mem [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; clk) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (W0_en) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      mem[W0_addr] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; W0_data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; clk) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (R0_en) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      reg_R0_data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; mem[R0_addr];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;assign&lt;/span&gt; R0_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reg_R0_data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会发现生成的 RAMB36E1 原语的 WRITE_MODE 依然是 READ_FIRST。经过测试发现，如果综合的时候用两个时钟信号，就会用 WRITE_FIRST；如果用了一个，就会用 READ_FIRST，与语义无关。所以如果依赖 Vivado 的 infer RAM，得到的结果和预期可能不一致，和前面的文档一致：&lt;code&gt;For the primitives with RAM_MODE set to SDP, the write mode is READ_FIRST for synchronous clocking and WRITE_FIRST for asynchronous clocking.&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;又额外测试了一下 yosys：&lt;code&gt;yosys mem_1r1w.v -p &amp;quot;synth_xilinx&amp;quot;&lt;/code&gt;，结果发现 yosys 会忠实地按照语义为 WRITE_FIRST 生成 bypass 逻辑。虽然 yosys 可以做的更好：把识别出来的 READ_FIRST 或 WRITE_FIRST 传给 RAMB36E1，但 yosys 至少尊重了代码。&lt;/p&gt;
&lt;h3 id=&#34;一读写&#34;&gt;一读写&lt;/h3&gt;
&lt;p&gt;接下来测试单读写口的场景。单读写口和上面不同，它的冲突点在于，写入的时候，读取的数据如何变化。下面用同样的方法，测试三种模式下 xpm_memory_spram 的行为，得到如下波形：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clk&#34;, wave: &#34;p......&#34;},
      { name: &#34;rw_addr&#34;, wave: &#34;2...2..&#34;, data: [&#34;0000&#34;, &#34;0001&#34;]},
      { name: &#34;rw_wdata&#34;, wave: &#34;2..22..&#34;, data: [&#34;1111&#34;, &#34;2222&#34;, &#34;3333&#34;]},
      { name: &#34;rw_en&#34;, wave: &#34;101....&#34;},
      { name: &#34;rw_we&#34;, wave: &#34;10.1...&#34;},
      { name: &#34;ram[0]&#34;, wave: &#34;x2..2..&#34;, data: [&#34;1111&#34;, &#34;2222&#34;]},
      { name: &#34;ram[1]&#34;, wave: &#34;2....2.&#34;, data: [&#34;0000&#34;, &#34;3333&#34;]},
      { name: &#34;rw_rdata_no_change&#34;, wave: &#34;xxx2...&#34;, data: [&#34;1111&#34;]},
      { name: &#34;rw_rdata_read_first&#34;, wave: &#34;xxx2.22&#34;, data: [&#34;1111&#34;, &#34;0000&#34;, &#34;3333&#34;]},
      { name: &#34;rw_rdata_write_first&#34;, wave: &#34;x2..22.&#34;, data: [&#34;1111&#34;, &#34;2222&#34;, &#34;3333&#34;]},
    ]
}
&lt;/script&gt;
&lt;p&gt;这个结果就比较有意思了，三种模式得到了三种不同的结果。第一个周期依然是写入 1111 到地址 0，然后 WRITE_FIRST 模式的输出结果第二个周期跟着变，就好像在写的时候同时也在读，只不过读取的结果就是最后一次写入的结果。第三个周期读取地址 0 的数据，然后第四个周期写入 2222 到地址 0，此时三种情况的读取都得到了写入前的值（也就是 1111）。第五个周期 WRITE_FIRST 模式的输出跟着变成了 2222，和预期一致。同时第五个周期写入 3333 到地址 1，接着第六个周期的时候，READ_FIRST 出现了 0000，实际上是读取了地址 1 的旧数据，也就是写入前的数据，而 WRITE_FIRST 更新为了 3333，也就是新写入的数据；NO_CHANGE 则是保持了最后一次读取的结果。&lt;/p&gt;
&lt;p&gt;简单总结一下上面的现象，就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NO_CHANGE：顾名思义，写的时候 rdata 不变，只有在读的下一个周期才会变&lt;/li&gt;
&lt;li&gt;WRITE_FIRST：写的同时也在读，只不过读取的是写入的新数据&lt;/li&gt;
&lt;li&gt;READ_FIRST：写的同时也在读，只不过读取的是写入前的旧数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于这个行为，在 &lt;a href=&#34;https://xilinx.eetrend.com/blog/2020/100055273.html&#34;&gt;RAM IP Core 中 Write First Read First 和 No Change 的区别&lt;/a&gt; 处可以看到比较清晰的解释。&lt;/p&gt;
&lt;h2 id=&#34;sram-ip&#34;&gt;SRAM IP&lt;/h2&gt;
&lt;p&gt;接下来在仿真中看看 SRAM IP 的行为是什么样子。SRAM IP 有一个引脚 COLLDISN，其语义为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 COLLDISN 为 1，那么如果出现读写冲突，那么写入是被保证的，但是读取会失败&lt;/li&gt;
&lt;li&gt;如果 COLLDISN 为 0，那么如果出现读写冲突，读写都会失败&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仿真得到如下波形：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clk&#34;, wave: &#34;p.......&#34;},
      { name: &#34;w_addr&#34;, wave: &#34;2.......&#34;, data: [&#34;0000&#34;]},
      { name: &#34;w_data&#34;, wave: &#34;2x...2x.&#34;, data: [&#34;1111&#34;, &#34;2222&#34;]},
      { name: &#34;w_en&#34;, wave: &#34;10...10.&#34;},
      { name: &#34;r_addr&#34;, wave: &#34;2.......&#34;, data: [&#34;0000&#34;]},
      { name: &#34;r_en&#34;, wave: &#34;0.10.1.0&#34;},
      { name: &#34;mem_colldisn_0[0]&#34;, wave: &#34;x2....2.&#34;, data: [&#34;1111&#34;, &#34;xxxx&#34;]},
      { name: &#34;r_data_colldisn_0&#34;, wave: &#34;xxx2..2.&#34;, data: [&#34;1111&#34;, &#34;xxxx&#34;]},
      { name: &#34;mem_colldisn_1[0]&#34;, wave: &#34;x2....2.&#34;, data: [&#34;1111&#34;, &#34;2222&#34;]},
      { name: &#34;r_data_colldisn_1&#34;, wave: &#34;xxx2..22&#34;, data: [&#34;1111&#34;, &#34;xxxx&#34;, &#34;2222&#34;]},
    ]
}
&lt;/script&gt;
&lt;p&gt;第一个周期没有读写冲突，所以成功写入，第三个周期也可以正确地都出来。第六个周期读写冲突，此时如果 COLLDISN 等于 0，那么读写都失败，下一个周期读取结果是 xxxx，并且之后继续读取依然是 xxxx，因为内存中的数据被破坏了；而如果 COLLDISN 等于 1，那么写入成功，内存中的值变为 2222，但读取失败，下一个周期读取结果是 xxxx，但是再下一个周期就可以正常读取，得到 2222。&lt;/p&gt;
&lt;p&gt;这就与 Xilinx FPGA 不一样：这里如果 COLLDISN 等于 0，读写冲突的时候，可能写入会失效，内存中的值变为不确定的内容。所以为了保证正确性，要么在 SRAM IP 外部进行读写冲突检查，如果要冲突了，就关掉读口，然后从写口 bypass 数据到读口；要么在 SRAM IP 内部进行读写冲突检查（设置 COLLDISN 等于 1），然后不要使用冲突时读取的数据。&lt;/p&gt;
&lt;h2 id=&#34;chisel&#34;&gt;Chisel&lt;/h2&gt;
&lt;p&gt;Chisel 中 RAM 对应的是 SyncReadMem，它可以指定 Read under Write behavior：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SyncReadMem()&lt;/code&gt;: unspecified in FIRRTL, &lt;code&gt;WriteFirst&lt;/code&gt; in behavior model&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SyncReadMem(Undefined)&lt;/code&gt;: unspecified in FIRRTL, &lt;code&gt;WriteFirst&lt;/code&gt; in behavior model&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SyncReadMem(ReadFirst)&lt;/code&gt;: &lt;code&gt;old&lt;/code&gt; in FIRRTL, &lt;code&gt;ReadFirst&lt;/code&gt; in behavior model&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SyncReadMem(WriteFirst)&lt;/code&gt;: &lt;code&gt;new&lt;/code&gt; in FIRRTL, &lt;code&gt;WriteFirst&lt;/code&gt; in behavior model&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是说，在行为级模型中，只有 WriteFirst 和 ReadFirst 两种行为，并且默认是 &lt;code&gt;WriteFirst&lt;/code&gt;。但是，前面也提到，实际上 XPM 只支持 &lt;code&gt;Undefined&lt;/code&gt;（生成 &lt;code&gt;x&lt;/code&gt;）和 &lt;code&gt;ReadFirst&lt;/code&gt;（READ_FIRST）两种；上面的 SRAM IP 更是只支持 &lt;code&gt;Undefined&lt;/code&gt;（生成 &lt;code&gt;x&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;这就导致写 Chisel 代码的时候，如果不小心用了 1R1W，并且代码依赖了 Read Under Write 在行为级模型下的行为，那么在使用 XPM 或者 SRAM IP 进行替换的时候，就需要额外的逻辑来处理这个不同。例如，如果要模拟 &lt;code&gt;WriteFirst&lt;/code&gt;，就比较地址，然后进行 bypass；但是 &lt;code&gt;ReadFirst&lt;/code&gt; 就没办法模拟了。最好的解决方法还是，不要出现冲突，即使要冲突，也要在上层进行处理。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>firtool 尝试</title>
      <link>https://jia.je/hardware/2023/04/04/firtool/</link>
      <pubDate>Tue, 04 Apr 2023 20:33:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/04/04/firtool/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;Chisel 3.6 很快就要发布了（目前最新版本是 3.6.0-RC2），这个大版本的主要更新内容就是引入了 CIRCT 的 firtool 作为 FIRRTL 到 Verilog 的转换流程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The primary change in Chisel v3.6.0 is the transition from the Scala FIRRTL
Compiler to the new MLIR FIRRTL Compiler. This will have a minimal impact on
typical Chisel user APIs but a large impact on custom compiler flows. For
more information, please see the ROADMAP.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因此提前测试一下 firtool，看看其和 Scala FIRRTL Compiler 有哪些区别，是否有更好的输出。&lt;/p&gt;
&lt;h2 id=&#34;使用-firtool&#34;&gt;使用 firtool&lt;/h2&gt;
&lt;p&gt;使用 firtool 有两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 chisel3 3.6 的 &lt;code&gt;circt.stage.ChiselStage&lt;/code&gt; 对象：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;circt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ChiselStage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;emitSystemVerilogFile&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Top&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码中会生成 Chisel 模块对应的 FIRRTL 文件，然后喂给 firtool。也可以通过 &lt;code&gt;circt.stage.ChiselMain&lt;/code&gt; 来运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sbt &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runMain circt.stage.ChiselMain --help&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;info&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; running circt.stage.ChiselMain --help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage: circt &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;options&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;arg&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Shell Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;arg&amp;gt;...                 optional unbounded args
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -td, --target-dir &amp;lt;directory&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Work directory &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;default: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -faf, --annotation-file &amp;lt;file&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           An input annotation file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -foaf, --output-annotation-file &amp;lt;file&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           An output annotation file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --show-registrations     print discovered registered libraries and transforms
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --help                   prints this usage text
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Logging Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -ll, --log-level &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;error|warn|info|debug|trace&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Set global logging verbosity &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;default: None
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -cll, --class-log-level &amp;lt;FullClassName:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;error|warn|info|debug|trace&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&amp;gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Set per-class logging verbosity
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --log-file &amp;lt;file&amp;gt;        Log to a file instead of STDOUT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -lcn, --log-class-names  Show class names and log level in logging output
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CIRCT &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MLIR FIRRTL Compiler&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --target &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;chirrtl|firrtl|hw|verilog|systemverilog&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           The CIRCT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --preserve-aggregate &amp;lt;value&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Do not lower aggregate types to ground types
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --module &amp;lt;package&amp;gt;.&amp;lt;module&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           The name of a Chisel module to elaborate &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;module must be in the classpath&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --full-stacktrace        Show full stack trace when an exception is thrown
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --throw-on-first-error   Throw an exception on the first error instead of continuing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --warnings-as-errors     Treat warnings as errors
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --source-root &amp;lt;file&amp;gt;     Root directory &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; source files, used &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; enhanced error reporting
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --split-verilog          Indicates that &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;firtool&amp;#34;&lt;/span&gt; should emit one-file-per-module and write separate outputs to separate files
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FIRRTL Transform Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --no-dce                 Disable dead code elimination
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --no-check-comb-loops    Disable combinational loop checking
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -fil, --inline &amp;lt;circuit&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;.&amp;lt;module&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;.&amp;lt;instance&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]][&lt;/span&gt;,...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Inline selected modules
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -clks, --list-clocks -c:&amp;lt;circuit&amp;gt;:-m:&amp;lt;module&amp;gt;:-o:&amp;lt;filename&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           List which signal drives each clock of every descendent of specified modules
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --no-asa                 Disable assert submodule assumptions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --no-constant-propagation
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Disable constant propagation elimination
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AspectLibrary
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --with-aspect &amp;lt;package&amp;gt;.&amp;lt;aspect&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           The name/class of an aspect to compile with &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;must be a class/object without arguments!&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MemLib Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -firw, --infer-rw        Enable read/write port inference &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; memories
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -frsq, --repl-seq-mem -c:&amp;lt;circuit&amp;gt;:-i:&amp;lt;file&amp;gt;:-o:&amp;lt;file&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Blackbox and emit a configuration file &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each sequential memory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -gmv, --gen-mem-verilog &amp;lt;blackbox|full&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           Blackbox and emit a Verilog behavior model &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each sequential memory
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在 Scala 中生成 FIRRTL 文件，然后用 firtool 命令转换 &lt;code&gt;.fir&lt;/code&gt; 为 &lt;code&gt;.sv&lt;/code&gt;。由于 Rocket Chip 还没有迁移，所以需要通过 firtool 来转换。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于目前 chisel3 并没有打包 firtool，目前需要自己装 firtool，例如通过 nix 或下载 GitHub 上的 Release 文件。本文采用的是 firtool 1.34.0。&lt;/p&gt;
&lt;h2 id=&#34;对比&#34;&gt;对比&lt;/h2&gt;
&lt;p&gt;把同一份源码，通过两种方式来生成 Verilog 然后进行观察，下面是一些生成的代码的区别。&lt;/p&gt;
&lt;h3 id=&#34;状态机&#34;&gt;状态机&lt;/h3&gt;
&lt;p&gt;首先是一个状态机的例子（取自 chisel3 的 DetectTwoOnes 样例）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sTwo1s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  when&lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sNone
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Scala FIRRTL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] _GEN_2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;io_in &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&amp;#39;h0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; state; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/DetectTwoOnes.scala 33:20 34:15 15:22]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&amp;#39;h2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; state) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/DetectTwoOnes.scala 19:17]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; _GEN_2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CIRCT firtool:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (state &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&amp;#39;h2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;io_in)	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/DetectTwoOnes.scala:15:22, :17:20, :19:17, :33:{12,20}, :34:15
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&amp;#39;h0&lt;/span&gt;;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/DetectTwoOnes.scala:15:22, :29:15
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个例子里，Scala FIRRTL Compiler 多生成了一个 &lt;code&gt;_GEN_2&lt;/code&gt;，需要把前后一起看才知道是什么意思，而 CIRCT 生成的与源码比较接近，可读性较好。&lt;/p&gt;
&lt;h3 id=&#34;syncreadmem&#34;&gt;SyncReadMem&lt;/h3&gt;
&lt;p&gt;接下来看 SyncReadMem。在 Scala FIRRTL Compiler 中，默认是直接在模块中嵌入代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  reg &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  wire  mem_rdata_MPORT_en&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_rdata_MPORT_addr&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_rdata_MPORT_data&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_MPORT_data&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_MPORT_addr&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  wire  mem_MPORT_mask&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  wire  mem_MPORT_en&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  reg  mem_rdata_MPORT_en_pipe_0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  reg &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_rdata_MPORT_addr_pipe_0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_rdata_MPORT_en &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; mem_rdata_MPORT_en_pipe_0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_rdata_MPORT_addr &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; mem_rdata_MPORT_addr_pipe_0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_rdata_MPORT_data &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; mem&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mem_rdata_MPORT_addr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  assign mem_MPORT_data &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; wdata&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_MPORT_addr &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; waddr&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_MPORT_mask &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&amp;#39;h1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_MPORT_en &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&amp;#39;h1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign rdata &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; mem_rdata_MPORT_data&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 11:9]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  always &lt;span style=&#34;color:#f92672&#34;&gt;@(&lt;/span&gt;posedge clock&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; begin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_MPORT_en &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; mem_MPORT_mask&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; begin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      mem&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mem_MPORT_addr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; mem_MPORT_data&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[src/main/scala/Memory.scala 10:24]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    end
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mem_rdata_MPORT_en_pipe_0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&amp;#39;h1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&amp;#39;h1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; begin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      mem_rdata_MPORT_addr_pipe_0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; raddr&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    end
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  end
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然了，它有 repl-seq-mem 的选项，可以生成 BlackBox 方便替换为实际的 SRAM IP：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sbt &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runMain firrtl.stage.FirrtlMain -i Memory.fir --repl-seq-mem -c:Memory:-o:Memory.conf&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat Memory.v
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;module mem&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  input  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;4:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  R0_addr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  input         R0_clk,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  output &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;31:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; R0_data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  input  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;4:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  W0_addr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  input         W0_clk,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  input  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;31:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; W0_data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;4:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_ext_R0_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wire  mem_ext_R0_en;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wire  mem_ext_R0_clk;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;31:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_ext_R0_data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;4:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_ext_W0_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wire  mem_ext_W0_en;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wire  mem_ext_W0_clk;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;31:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; mem_ext_W0_data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mem_ext mem_ext &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .R0_addr&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_ext_R0_addr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .R0_en&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_ext_R0_en&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .R0_clk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_ext_R0_clk&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .R0_data&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_ext_R0_data&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .W0_addr&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_ext_W0_addr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .W0_en&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_ext_W0_en&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .W0_clk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_ext_W0_clk&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .W0_data&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mem_ext_W0_data&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_ext_R0_clk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; R0_clk;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_ext_R0_en &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h1;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  assign mem_ext_R0_addr = R0_addr;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  assign R0_data = mem_ext_R0_data;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  assign mem_ext_W0_clk = W0_clk;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  assign mem_ext_W0_en = 1&amp;#39;&lt;/span&gt;h1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_ext_W0_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; W0_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assign mem_ext_W0_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; W0_data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endmodule
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat Memory.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name mem_ext depth &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; width &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; ports write,read  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下游工具读取 Memory.conf 去生成对应的 mem_ext 模块。这里只考虑了 Read Latency 为 1 的情况，如果是 Mem，就不会生成 BlackBox，毕竟参数名字是 sequential memory。&lt;/p&gt;
&lt;p&gt;CIRCT firtool 也有类似的表现，只不过默认情况下就会用一个单独的模块：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Memory(	&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;stdin&amp;gt;:3:10
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;         clock,	&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;stdin&amp;gt;:4:11
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                reset,	&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;stdin&amp;gt;:5:11
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;  [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]  raddr,	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:4:17
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                waddr,	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:7:17
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;  [&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] wdata,	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:8:17
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] rdata	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:5:17
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mem_combMem mem_ext (	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    .R0_addr (raddr),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .R0_en   (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&amp;#39;h1&lt;/span&gt;),	&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;stdin&amp;gt;:3:10
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    .R0_clk  (clock),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .W0_addr (waddr),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .W0_en   (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&amp;#39;h1&lt;/span&gt;),	&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;stdin&amp;gt;:3:10
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    .W0_clk  (clock),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .W0_data (wdata),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .R0_data (rdata)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; mem_combMem(	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;  [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]  R0_addr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;         R0_en,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                R0_clk,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;  [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]  W0_addr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;         W0_en,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                W0_clk,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;  [&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] W0_data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] R0_data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] Memory[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;];	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt;        _GEN;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]  _GEN_0;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; R0_clk) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    _GEN &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; R0_en;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    _GEN_0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; R0_addr;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// always @(posedge)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; W0_clk) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (W0_en)	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      Memory[W0_addr] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; W0_data;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// always @(posedge)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;assign&lt;/span&gt; R0_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _GEN &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; Memory[_GEN_0] &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&amp;#39;bx;	&lt;span style=&#34;color:#75715e&#34;&gt;// src/main/scala/Memory.scala:10:24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;firtool 也支持 &lt;code&gt;-repl-seq-mem&lt;/code&gt; 参数，用法和输出与 Scala FIRRTL Compiler 类似。&lt;/p&gt;
&lt;p&gt;我最近也写了一个小工具：&lt;a href=&#34;https://github.com/jiegec/chisel-memory-lower&#34;&gt;chisel-memory-lower&lt;/a&gt;来解析生成的 conf 文件，生成对应的 BlackBox。&lt;/p&gt;
&lt;h3 id=&#34;复杂组合逻辑&#34;&gt;复杂组合逻辑&lt;/h3&gt;
&lt;p&gt;再来看 Hardfloat 的例子。代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; exp &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; in&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;expWidth &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sigWidth &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sigWidth &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; isZero    &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; exp&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;expWidth&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; expWidth &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;U
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; isSpecial &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; exp&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;expWidth&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; expWidth &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;U
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; out &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Wire&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RawFloat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;expWidth&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sigWidth&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isNaN  &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; isSpecial &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;   exp&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;expWidth &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Scala FIRRTL Compiler:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wire &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; rawA_exp &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; io_a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[submodules/berkeley-hardfloat/src/main/scala/rawFloatFromRecFN.scala 51:21]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;wire  rawA_isZero &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; rawA_exp&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&amp;#39;h0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[submodules/berkeley-hardfloat/src/main/scala/rawFloatFromRecFN.scala 52:53]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;wire  rawA_isSpecial &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; rawA_exp&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&amp;#39;h3&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[submodules/berkeley-hardfloat/src/main/scala/rawFloatFromRecFN.scala 53:53]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;wire  rawA__isNaN &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; rawA_isSpecial &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; rawA_exp&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// @[submodules/berkeley-hardfloat/src/main/scala/rawFloatFromRecFN.scala 56:33]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;基本是忠实的翻译。&lt;/p&gt;
&lt;p&gt;CIRCT Firtool:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt;        rawA_isNaN &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(io_a[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;])) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; io_a[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;];	&lt;span style=&#34;color:#75715e&#34;&gt;// submodules/berkeley-hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :53:{28,53}, :56:{33,41}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，这里对代码进行了变换，把 &lt;code&gt;=== 3.U&lt;/code&gt; 变成了 AND，不再忠实原来的代码，而是采取了更加间接的表达方式。&lt;/p&gt;
&lt;p&gt;再看一个类似的例子，源码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; signProd &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; rawA&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sign &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; rawB&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sign &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;op&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Scala FIRRTL Compiler:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt;  rawA__sign &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; io_a[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// @[submodules/berkeley-hardfloat/src/main/scala/rawFloatFromRecFN.scala 59:25]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt;  rawB__sign &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; io_b[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// @[submodules/berkeley-hardfloat/src/main/scala/rawFloatFromRecFN.scala 59:25]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt;  signProd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rawA__sign &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; rawB__sign &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; io_op[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// @[submodules/berkeley-hardfloat/src/main/scala/MulAddRecFN.scala 96:42]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CIRCT firtool:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt;        signProd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; io_a[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; io_b[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; io_op[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];	&lt;span style=&#34;color:#75715e&#34;&gt;// submodules/berkeley-hardfloat/src/main/scala/MulAddRecFN.scala:96:{42,49}, submodules/berkeley-hardfloat/src/main/scala/rawFloatFromRecFN.scala:59:25
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，CIRCT firtool 比较倾向于内联一些简单的连线。当然了，这个不是绝对的，通过修改命令行参数，可能得到不同的结果。&lt;/p&gt;
&lt;h3 id=&#34;rocket-chip&#34;&gt;Rocket Chip&lt;/h3&gt;
&lt;p&gt;在 rocket-chip-vcu128 项目中测试了一下，迁移到 CIRCT firtool 比较简单，只需要把 FirrtlMain 的调用改成直接运行 firtool。但是，在综合的时候，发现 Vivado 无法推断出一个 SyncReadMem，导致 LUT 和 Register 占用特别多。解决思路有两个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用上面所说的 &lt;code&gt;--repl-seq-mem&lt;/code&gt; 生成 BlackBox，然后生成 XPM Macro 接起来&lt;/li&gt;
&lt;li&gt;添加 &lt;code&gt;--lower-memories&lt;/code&gt; 参数，简化 SRAM，然后 Vivado 就可以识别出来了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;速度&#34;&gt;速度&lt;/h3&gt;
&lt;p&gt;运行大项目的时候，Scala FIRRTL Compiler 的速度明显比 CIRCT Firtool 慢，体验还是不错的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>单核处理器的协同仿真</title>
      <link>https://jia.je/hardware/2023/03/23/core-cosim/</link>
      <pubDate>Thu, 23 Mar 2023 11:18:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/03/23/core-cosim/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;今年的龙芯杯又开始报名了，我来写一篇关于协同仿真（cosim）的博客蹭蹭热度。下面的内容参考了一些已有的协同仿真的框架，例如 &lt;a href=&#34;https://ibex-core.readthedocs.io/en/latest/03_reference/cosim.html&#34;&gt;ibex co-sim&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/OpenXiangShan/difftest&#34;&gt;OpenXiangShan/difftest&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;协同仿真&#34;&gt;协同仿真&lt;/h2&gt;
&lt;p&gt;RTL 层次的协同仿真可以做不同层次的，这里讨论的是指令提交层次，具体来讲，就是把 CPU 和一个模拟器放在一起协同仿真，检查每条指令执行完以后的状态是否一致。基于代码样例的测试虽然可以覆盖很多情况，但是如果出了错误，报错的地方不一定是出现问题的地方，有些时候就需要往回找很久，才能找到刚出现问题的地方。软件上，大家经常苦于内存错误，经常找不到刚出现溢出的地方，所以要用 valgrind 或者 asan 等工具来直接定位第一次出错的地方。硬件上也是类似，为了精确定位到出错的波形，可以用 cosim。&lt;/p&gt;
&lt;p&gt;cosim 是怎么工作的呢？模拟器是软件实现的，它原子地执行一条条指令，同时记录下当前的状态，例如寄存器的取值、内存的状态等等。如果可以让 CPU 和模拟器锁步运行，也就是 CPU 执行一条指令，模拟器执行一条指令，然后比对状态，一旦出现不一致，就直接报错。但实际上 CPU 可能会更加复杂，因为它指令的执行拆分成了很多部分，需要针对流水线进行一些修改，使得它可以生成一个匹配模拟器的原子的执行流。&lt;/p&gt;
&lt;p&gt;整体的工作流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择一个模拟器，自己写或者使用一个现成的。考虑到模拟器实现的功能和 CPU 不一定一致，有时候需要修改模拟器的源码，所以可以考虑使用一些现成的开源软件，如果是为了 cosim 设计的就更好了。&lt;/li&gt;
&lt;li&gt;找到模拟器的单步执行接口，并且让模拟器可以把内部状态暴露出来。这一步可能需要修改源代码。&lt;/li&gt;
&lt;li&gt;修改 RTL，把指令的提交信息、寄存器堆的内容通过一些方法传递出来。&lt;/li&gt;
&lt;li&gt;修改仿真顶层，每当指令提交的时候，单步执行模拟器，然后比对双方的状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;模拟器&#34;&gt;模拟器&lt;/h2&gt;
&lt;p&gt;选择模拟器，要根据你所实现的指令集来选择。下面以 Spike 为例，用来和 RISC-V CPU 进行协同仿真。spike 实现了比较完整的 RISC-V 指令集，并且以库的形式提供了它的 API，但还需要一些修改，让它更加适合协同仿真。这一部分参考了 &lt;a href=&#34;https://ibex-core.readthedocs.io/en/latest/03_reference/cosim.html&#34;&gt;ibex co-sim&lt;/a&gt;的文档。&lt;/p&gt;
&lt;p&gt;首先，spike 提供了 step 函数，就是我们想要的单步执行。但是，spike 的 step 在遇到异常或者中断的时候也会返回，但实际上在处理器一侧，通常异常是单独处理的，所以这时候就要修改 spike 的 step 函数，如果遇到异常了，继续执行，直到执行了一条指令为止。与此同时，spike 没有记录最后一次执行的指令的 pc，只记录了下一个 PC，那么在发生异常的时候，就不会记录异常处理的第一条指令的 PC，这里也要进行针对性的修改。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;state.last_inst_pc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pc;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;execute_insn_logged&lt;/span&gt;(this, pc, fetch);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;advance_pc&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;做了这些修改以后，就足够在 cosim 中运行一些简单的程序了。&lt;/p&gt;
&lt;h2 id=&#34;处理器&#34;&gt;处理器&lt;/h2&gt;
&lt;p&gt;接下来，需要修改处理器，让它可以汇报每个周期完成执行的指令情况，具体的格式因实现而异，最后都需要把这些信息暴露给仿真顶层，可能的方法有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过多级的 module output 一路传到顶层，最终是顶层模块的输出信号。这种方法改动比较大，而且麻烦。&lt;/li&gt;
&lt;li&gt;通过 DPI 函数，每个周期调用一次，把信息通过 DPI 的参数传递给 C 函数。这种方法比较推荐。&lt;/li&gt;
&lt;li&gt;通过仿真器的功能，例如 verilator 可以通过添加注释的方法，把信号暴露出去。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;仿真顶层拿到信息以后，就可以进行 cosim 了：CPU 执行一条指令，就让模拟器也 step 一步，然后比较二者的状态。状态怎么比对呢？常见的有通用寄存器，RISC-V 的 CSR。既可以通过记录寄存器堆的写入来比对，又可以直接把整个寄存器堆的内容导出来比对。实际上这些部分的性能影响都是很小的。&lt;/p&gt;
&lt;p&gt;那么，内存怎么比对呢？对于简单的顺序处理器，读写也是顺序的，那么可以把读写的日志放到一个队列 deque 中，然后让模拟器也记录下内存的读写，从 deque 进行 pop 和比对。但实际情况可能会比较复杂，例如更复杂的处理器里可能会出现乱序访存等情况，同时处理器还可能会进行写合并等操作，这时候就需要在仿真顶层做一些匹配和合并的操作。实在觉得麻烦，也可以先不管内存，直接比对寄存器，也足够定位很多内存问题，因为 RISC-V 读内存总是要加载到寄存器中的。&lt;/p&gt;
&lt;h2 id=&#34;特殊情况&#34;&gt;特殊情况&lt;/h2&gt;
&lt;p&gt;实现了前面的部分，就可以跑很多程序了，但是对于一些复杂的程序，例如 Linux，还缺少一样东西：外设和中断。能想到的第一种方法就是，用 C 代码再写一个外设的模型，然后接到模拟器的虚拟总线上。但是中断就会比较麻烦，因为中断的时机比较难保证同步，所以通常的方法是，把模拟器的中断处理关掉，当 CPU 发送 trap 的时候，让模拟器也发生一次 trap。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// handle trap
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (interrupt) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;trap_t&lt;/span&gt; trap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8000000000000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; interrupt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  proc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;take_trap&lt;/span&gt;(trap, proc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get_state&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  interrupt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但有一些外设不容易保证完全一致，例如 mtime 读取时间，很难保证 CPU 里读取的时间值和模拟器里的 mtime 一致。这时候就可以采用另一个办法：记录所有对外设的 load 指令，因为有副作用的关系，一定是顺序的，这时候就可以像前面提到的队列的方式，CPU 进行 uncached load 的时候，就把 load 的地址、数据和长度记录到队列中，当模拟器也要进行 load 的时候，匹配上地址和长度，返回数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// match rtl uncached load event
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;uncached_load_events.&lt;span style=&#34;color:#a6e22e&#34;&gt;empty&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  uncached_load_event ev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uncached_load_events.&lt;span style=&#34;color:#a6e22e&#34;&gt;front&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ev.addr &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ev.len &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;memcpy&lt;/span&gt;(bytes, (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ev.data, len);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    uncached_load_events.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop_front&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但这样实际上就假设了外设实现是正确的。如果还需要验证外设实现是否正确，需要结合两种方法，对于不确定结果的 load（例如 mtime），就按照 CPU 的结果来，否则就用 C 实现的外设模型进行比对。&lt;/p&gt;
&lt;p&gt;除了这些意外，处理器实现的 feature 可能会和模拟器有一些出入，这些都比较容易解决，直接修改代码，屏蔽掉没有实现的功能，保持一致即可。&lt;/p&gt;
&lt;h2 id=&#34;chatgptbard-的回复&#34;&gt;ChatGPT/Bard 的回复&lt;/h2&gt;
&lt;p&gt;提问：&lt;/p&gt;
&lt;p&gt;How can I verify my RISC-V processor design via co-simulation with spike?&lt;/p&gt;
&lt;p&gt;ChatGPT:&lt;/p&gt;
&lt;p&gt;Co-simulation with Spike can be a great way to verify your RISC-V processor design. Here&amp;rsquo;s a high-level overview of the process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Write a testbench: You&amp;rsquo;ll need to create a testbench that can generate inputs to your processor and check the outputs. This testbench can be written in any language you prefer, but most people use a hardware description language like Verilog or VHDL.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connect your processor to Spike: To run a co-simulation with Spike, you&amp;rsquo;ll need to connect your processor design to Spike using a TLM (transaction-level modeling) interface. Spike has a built-in TLM interface called the &amp;ldquo;Spike External Debug Interface&amp;rdquo; (S-EDI) that you can use.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注：查不到 Spike External Debug Interface&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Configure the co-simulation: You&amp;rsquo;ll need to configure the co-simulation by specifying the parameters of your processor design and Spike, such as the clock frequency and the reset signal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the simulation: Once your testbench is written, your processor is connected to Spike, and the co-simulation is configured, you can run the simulation. Your testbench will generate inputs to your processor, which will be processed by Spike and your processor design. The output of your processor will be checked by your testbench to verify that it&amp;rsquo;s correct.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Debug any issues: If you encounter any issues during the simulation, you&amp;rsquo;ll need to debug them. This can involve looking at waveforms or logs to understand where things went wrong.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are some more detailed steps to follow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Write your testbench in Verilog or VHDL. Your testbench should be able to generate inputs to your processor design and check the outputs. You can use any verification methodology you prefer, such as directed tests or random tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connect your processor design to Spike using the S-EDI interface. The S-EDI interface is a TLM interface that allows Spike to communicate with your processor design. You&amp;rsquo;ll need to instantiate the S-EDI module in your testbench and connect it to your processor design. You can find more information about the S-EDI interface in the Spike documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure the co-simulation. You&amp;rsquo;ll need to specify the clock frequency and reset signal for your processor design and Spike. You may also need to specify other parameters, such as the memory map for your processor design.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the simulation. Once your testbench is written, your processor is connected to Spike, and the co-simulation is configured, you can run the simulation. You can use a simulator like ModelSim or QuestaSim to run the simulation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Debug any issues. If you encounter any issues during the simulation, you&amp;rsquo;ll need to debug them. You can use the waveform viewer in your simulator to understand what&amp;rsquo;s happening in your design. You can also use the Spike debugger to debug your processor design. The Spike debugger allows you to step through your code and examine the processor state.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By following these steps, you can use co-simulation with Spike to verify your RISC-V processor design.&lt;/p&gt;
&lt;p&gt;Bard:&lt;/p&gt;
&lt;p&gt;Co-simulation is a technique used in verification to run two or more models of a system in lockstep, with each model executing a different part of the system. This allows the models to be used together to verify that the system behaves as expected.&lt;/p&gt;
&lt;p&gt;To co-simulate your RISC-V processor design with Spike, you will need to create a model of your processor in Spike and a model of the system that your processor will be embedded in. You will then need to configure the two models to run in lockstep, with each model communicating with the other through a shared memory buffer.&lt;/p&gt;
&lt;p&gt;Once the co-simulation is running, you can use it to verify that your processor design behaves as expected. You can do this by running test cases on the system model and observing the behavior of your processor model. If the processor model behaves as expected, then you can be confident that your design is correct.&lt;/p&gt;
&lt;p&gt;Here are some of the benefits of using co-simulation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It can help you to find errors in your design early in the development process.&lt;/li&gt;
&lt;li&gt;It can help you to verify that your design meets the requirements of the system that it will be embedded in.&lt;/li&gt;
&lt;li&gt;It can help you to optimize your design for performance and power consumption.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some of the challenges of using co-simulation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It can be difficult to create accurate models of both your processor and the system that it will be embedded in.&lt;/li&gt;
&lt;li&gt;It can be difficult to configure the co-simulation to run in lockstep.&lt;/li&gt;
&lt;li&gt;It can be difficult to interpret the results of the co-simulation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, co-simulation is a powerful technique that can be used to verify your RISC-V processor design. However, it is important to be aware of the challenges involved in using co-simulation.&lt;/p&gt;
&lt;h2 id=&#34;多核&#34;&gt;多核&lt;/h2&gt;
&lt;p&gt;以上的方法都是针对单核 CPU 进行协同仿真的，但多核会更加复杂，多核涉及到不同核心之间的同步、通信等等，很难把一个周期精确的 CPU 和一个不精确的模拟器匹配起来。香山提供了一个思路：&lt;a href=&#34;https://github.com/OpenXiangShan/XiangShan-doc/blob/main/slides/20210624-RVWC-SMP-Difftest%20%E6%94%AF%E6%8C%81%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E5%B7%AE%E5%88%86%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.pdf&#34;&gt;https://github.com/OpenXiangShan/XiangShan-doc/blob/main/slides/20210624-RVWC-SMP-Difftest%20%E6%94%AF%E6%8C%81%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E5%B7%AE%E5%88%86%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.pdf&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>软硬件队列接口</title>
      <link>https://jia.je/networking/2023/03/22/hardware-queue-interface/</link>
      <pubDate>Wed, 22 Mar 2023 22:30:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2023/03/22/hardware-queue-interface/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;在网卡等场景下，经常会需要在软硬件之间传输大量的数据，通常的方法是建立循环队列，例如 H2C（Host to Chip）方向，是 Host 作为 Producer 增加数据到队尾，Chip 作为 Consumer 从队头读取数据。由于每次传输的数据不定长，为了方便，队列的项是一个定长的 Descriptor，Descriptor 指向了数据的地址。但具体的细节，不同的实现还不太一样。下面逐个案例进行分析。&lt;/p&gt;
&lt;h2 id=&#34;axi-dma&#34;&gt;AXI DMA&lt;/h2&gt;
&lt;p&gt;文档：&lt;a href=&#34;https://docs.xilinx.com/r/en-US/pg021_axi_dma&#34;&gt;https://docs.xilinx.com/r/en-US/pg021_axi_dma&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果在 Xilinx FPGA 上使用过以太网，那大概率会接触到 AXI DMA 这个 IP，它负责把以太网 MAC 的 AXI Stream 数据用 DMA 的形式通过内存来与操作系统交互。&lt;/p&gt;
&lt;h3 id=&#34;发送队列&#34;&gt;发送队列&lt;/h3&gt;
&lt;p&gt;它的收和发各是一个队列，首先来看发送队列：&lt;/p&gt;
&lt;p&gt;发送队列由一个头指针（MM2S_CURDESC）和一个尾指针定义（MM2S_TAILDESC），指针指向的是一个 Scatter Gather Descriptor，Descriptor 的内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NXTDESC：队列下一项的地址&lt;/li&gt;
&lt;li&gt;BUFFER_ADDRESS：要传输的数据的地址&lt;/li&gt;
&lt;li&gt;CONTROL：控制信息&lt;/li&gt;
&lt;li&gt;STATUS：状态信息&lt;/li&gt;
&lt;li&gt;APP0 to APP4：附带的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可见这个发送队列实际上是一个链表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; axi_dma_desc {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; axi_dma_desc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nxtdesc;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;buffer_address;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当 MM2S_TAILDESC 被更新的时候，硬件会从 CURDESC 开始逐个 Descriptor 处理，直到遇到 TAILDESC 为止：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// when taildesc is changed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;taildesc_changed&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_send&lt;/span&gt;(curdesc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (curdesc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; taildesc) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      curdesc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curdesc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;nxtdesc;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (curdesc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; taildesc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以，实际上是驱动不断地提供一个链表给 AXI DMA 去发送，至于这个链表是只有一个元素的数组，还是用一个循环队列去实现，都是可能的。&lt;/p&gt;
&lt;h4 id=&#34;u-boot&#34;&gt;U-Boot&lt;/h4&gt;
&lt;p&gt;下面来看 U-Boot 的例子，驱动是 &lt;a href=&#34;https://github.com/u-boot/u-boot/blob/v2023.01/drivers/net/xilinx_axi_emac.c&#34;&gt;xilinx_axi_emac.c&lt;/a&gt;。这个驱动的实现很简单：每次需要发送的时候，只准备一个 Descriptor，发完就轮询直到发送成功。显然这个写法没有很好地利用 DMA 的异步特性，但胜在简单。下面是 &lt;code&gt;axiemac_send&lt;/code&gt; 的部分源码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axiemac_send&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; udevice &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dev, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Setup Tx BD */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tx_bd, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(tx_bd));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* At the end of the ring, link the last BD back to the top */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tx_bd.next_desc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lower_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tx_bd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tx_bd.next_desc_msb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upper_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tx_bd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tx_bd.buf_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lower_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)ptr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tx_bd.buf_addr_msb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upper_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)ptr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Save len */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tx_bd.cntrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; XAXIDMA_BD_CTRL_TXSOF_MASK &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            XAXIDMA_BD_CTRL_TXEOF_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_write&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tx_bd, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmatx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;current);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  u32 temp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Start the hardware */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readl&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmatx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;control);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  temp &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; XAXIDMA_CR_RUNSTOP_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;writel&lt;/span&gt;(temp, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmatx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;control);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Start transfer */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_write&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tx_bd, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmatx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tail);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for transmission to complete */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;axiemac: Waiting for tx to be done&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  timeout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (timeout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;readl&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmatx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;status) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (XAXIDMA_IRQ_DELAY_MASK &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; XAXIDMA_IRQ_IOC_MASK)))) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    timeout&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;udelay&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;linux&#34;&gt;Linux&lt;/h4&gt;
&lt;p&gt;再来看 Linux 的 驱动：&lt;a href=&#34;https://github.com/torvalds/linux/blob/v6.2/drivers/net/ethernet/xilinx/xilinx_axienet_main.c&#34;&gt;xilinx_axienet_main.c&lt;/a&gt;。它采取的方法是分配一个 Descriptor 数组，然后把数组的每一项都指向下一项（最后一项指向第一项），形成一个链表形式的循环队列，维护一个尾指针。下面是初始化代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_bd_init&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; net_device &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ndev) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Allocate the Tx and Rx buffer descriptors. */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_alloc_coherent&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_v) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_num,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_p, GFP_KERNEL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_num; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;dma_addr_t&lt;/span&gt; addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_v) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          ((i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_num);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_v[i].next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lower_32_bits&lt;/span&gt;(addr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_v[i].next_msb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upper_32_bits&lt;/span&gt;(addr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Write to the RS (Run-stop) bit in the Tx channel control register.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * Tx channel is now ready to run. But only after we write to the
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * tail pointer register that the Tx channel will start transmitting.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_out_addr&lt;/span&gt;(lp, XAXIDMA_TX_CDESC_OFFSET, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_dma_cr &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; XAXIDMA_CR_RUNSTOP_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_out32&lt;/span&gt;(lp, XAXIDMA_TX_CR_OFFSET, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_dma_cr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;初始化好了以后，每当要发送数据的时候，就写入 tail 指针指向的 Descriptor，然后增加 tail 指针，同时告诉硬件开始 DMA：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;netdev_tx_t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_start_xmit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sk_buff &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;skb, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; net_device &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ndev) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  u32 num_frag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_shinfo&lt;/span&gt;(skb)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;nr_frags;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_check_tx_bd_space&lt;/span&gt;(lp, num_frag &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NETDEV_TX_BUSY;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  phys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_map_single&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, skb&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_headlen&lt;/span&gt;(skb), DMA_TO_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;desc_set_phys_addr&lt;/span&gt;(lp, phys, cur_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cntrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_headlen&lt;/span&gt;(skb) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; XAXIDMA_BD_CTRL_TXSOF_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (ii &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; ii &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; num_frag; ii&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;new_tail_ptr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_num)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      new_tail_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_v[new_tail_ptr];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    frag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;skb_shinfo&lt;/span&gt;(skb)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;frags[ii];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    phys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_map_single&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_frag_address&lt;/span&gt;(frag),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_frag_size&lt;/span&gt;(frag),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              DMA_TO_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;desc_set_phys_addr&lt;/span&gt;(lp, phys, cur_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cntrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_frag_size&lt;/span&gt;(frag);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cntrl &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; XAXIDMA_BD_CTRL_TXEOF_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; skb;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tail_p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_v) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; new_tail_ptr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;new_tail_ptr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_num)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_tail_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;WRITE_ONCE&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_tail, new_tail_ptr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Start the transfer */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_out_addr&lt;/span&gt;(lp, XAXIDMA_TX_TDESC_OFFSET, tail_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实现思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查是否有足够的空闲 Descriptor&lt;/li&gt;
&lt;li&gt;对于要发送的数据的每一段，都填入一个 Descriptor&lt;/li&gt;
&lt;li&gt;写入新的 tail 指针，启动 DMA&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么，又有一个问题：如何知道硬件完成了 DMA 传输，释放了 Descriptor 呢？答案是，AXI DMA 传输完成时，会通过中断通知 CPU，Linux 最终会调用 &lt;code&gt;axienet_free_tx_chain&lt;/code&gt; 函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_free_tx_chain&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; axienet_local &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lp, u32 first_bd,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nr_bds, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; force, u32 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sizep, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; budget) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; axidma_bd &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cur_p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;dma_addr_t&lt;/span&gt; phys;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nr_bds; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_v[(first_bd &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_bd_num];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* If force is not specified, clean up only descriptors
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * that have been completed by the MAC.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;force &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(status &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; XAXIDMA_BD_STS_COMPLETE_MASK))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Ensure we see complete descriptor update */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_rmb&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    phys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;desc_get_phys_addr&lt;/span&gt;(lp, cur_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_unmap_single&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, phys,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cntrl &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; XAXIDMA_BD_CTRL_LENGTH_MASK),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         DMA_TO_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skb &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (status &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; XAXIDMA_BD_STS_COMPLETE_MASK))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;napi_consume_skb&lt;/span&gt;(cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skb, budget);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;app0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;app1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;app2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;app4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* ensure our transmit path and device don&amp;#39;t prematurely see status cleared */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;wmb&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cntrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从代码来看，其实也很简单：AXI DMA 传输完成后，会设置 status 的内容，标记已经传输完成。这时候只要从最后一次完成传输的 Descriptor 开始扫描，把所有完成传输的 Descriptor 回收即可。&lt;/p&gt;
&lt;h3 id=&#34;接收队列&#34;&gt;接收队列&lt;/h3&gt;
&lt;p&gt;接收队列结构与发送队列相似，但不同的是，生产者和消费者的角色对调，驱动为了保证随时可以接收数据，需要预先准备好 Descriptor，当 AXI DMA 从以太网 MAC 收到数据的时候，随时有 Descriptor 可以使用，写入数据后，再通知 CPU。和发送队列一样，接收队列由一个头指针（S2MM_CURDESC）和一个尾指针定义（S2MM_TAILDESC），指针指向的 Descriptor 结构与发送队列一致。硬件的接收逻辑和发送逻辑类似，只不过方向相反。&lt;/p&gt;
&lt;h4 id=&#34;u-boot-1&#34;&gt;U-Boot&lt;/h4&gt;
&lt;p&gt;首先还是来看 U-Boot 的实现。前面提到，为了简化，U-Boot 的网卡驱动每次同时只会发送一个帧，接收的时候其实也一样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(some net &lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt; (ping &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; tftp &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; whatever...))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eth_init&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ops&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eth_send&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ops&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eth_rx&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ops&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;recv&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (process packet)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ops&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;free_pkt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ops&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;free_pkt&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eth_halt&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ops&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stop&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先看 AXI EMAC 驱动如何初始化接收队列：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; u8 rxframe[PKTSIZE_ALIGN] &lt;span style=&#34;color:#a6e22e&#34;&gt;__attribute&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;aligned&lt;/span&gt;(DMAALIGN)));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axiemac_start&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; udevice &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dev) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Start DMA RX channel. Now it&amp;#39;s ready to receive data.*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_write&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmarx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;current);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Setup the BD. */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rx_bd));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.next_desc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lower_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.next_desc_msb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upper_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.buf_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lower_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rxframe);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.buf_addr_msb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upper_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rxframe);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.cntrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rxframe);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Flush the last BD so DMA core could see the updates */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;flush_cache&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;phys_addr_t&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rx_bd));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* It is necessary to flush rxframe because if you don&amp;#39;t do it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * then cache can contain uninitialized data */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;flush_cache&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;phys_addr_t&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rxframe, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rxframe));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Start the hardware */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readl&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmarx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;control);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  temp &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; XAXIDMA_CR_RUNSTOP_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;writel&lt;/span&gt;(temp, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmarx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;control);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Rx BD is ready - start */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_write&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmarx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tail);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到它只初始化了一个 Descriptor，并且把 CURDESC 和 TAILDESC 都指向它，并且提供了一个缓冲区 &lt;code&gt;rxframe&lt;/code&gt;。当 AXI DMA 接收到数据的时候，就会把数据写入 &lt;code&gt;rxframe&lt;/code&gt;，更新 &lt;code&gt;rx_bd&lt;/code&gt; 并发送中断。U-Boot 处理中断的方法也很简单：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axiemac_recv&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; udevice &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dev, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flags, uchar &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;packetp) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Disable IRQ for a moment till packet is handled */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readl&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmarx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;control);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  temp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;XAXIDMA_IRQ_ALL_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;writel&lt;/span&gt;(temp, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmarx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;control);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rx_bd.status &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; XAXIDMA_BD_STS_ACTUAL_LEN_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;packetp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rxframe;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; length;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它关闭了 AXI DMA 的中断，然后直接读取长度，把 &lt;code&gt;rxframe&lt;/code&gt; 作为数据指针传给网络栈处理的函数。网络栈处理完以后，就会调用 &lt;code&gt;free_pkt&lt;/code&gt; 进行收尾：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axiemac_free_pkt&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; udevice &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dev, uchar &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;packet, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef DEBUG
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* It is useful to clear buffer to be sure that it is consistent */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(rxframe, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rxframe));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Setup RxBD */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Clear the whole buffer and setup it again - all flags are cleared */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rx_bd));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.next_desc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lower_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.next_desc_msb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upper_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.buf_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lower_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rxframe);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.buf_addr_msb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upper_32_bits&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rxframe);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rx_bd.cntrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rxframe);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Write bd to HW */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;flush_cache&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;phys_addr_t&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rx_bd));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* It is necessary to flush rxframe because if you don&amp;#39;t do it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * then cache will contain previous packet */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;flush_cache&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;phys_addr_t&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rxframe, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(rxframe));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Rx BD is ready - start again */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_write&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rx_bd, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dmarx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tail);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;收尾工作也很简单，把接收队列恢复到可以接收数据的状态即可，因为 &lt;code&gt;rxframe&lt;/code&gt; 是全局变量，也不需要进行 &lt;code&gt;free&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;linux-1&#34;&gt;Linux&lt;/h4&gt;
&lt;p&gt;Linux 的驱动实现里，接收队列和发送队列类似，也是用一个数组来实现循环链表，只不过接收队列还需要提前准备好缓冲区，供 AXI DMA 写入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_bd_init&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; net_device &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ndev) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_alloc_coherent&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_num,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_p, GFP_KERNEL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_num; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;dma_addr_t&lt;/span&gt; addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ((i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_num);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v[i].next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lower_32_bits&lt;/span&gt;(addr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v[i].next_msb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upper_32_bits&lt;/span&gt;(addr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;netdev_alloc_skb_ip_align&lt;/span&gt;(ndev, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_frm_size);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v[i].skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; skb;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_map_single&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, skb&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_frm_size, DMA_FROM_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;desc_set_phys_addr&lt;/span&gt;(lp, addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v[i].cntrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_frm_size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Populate the tail pointer and bring the Rx Axi DMA engine out of
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * halted state. This will make the Rx side ready for reception.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_out_addr&lt;/span&gt;(lp, XAXIDMA_RX_CDESC_OFFSET, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_dma_cr &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; XAXIDMA_CR_RUNSTOP_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_out32&lt;/span&gt;(lp, XAXIDMA_RX_CR_OFFSET, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_dma_cr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_out_addr&lt;/span&gt;(lp, XAXIDMA_RX_TDESC_OFFSET, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_num &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，数组的每一项的指针指向下一项，然后把头地址写入 CURDESC，尾地址写入 TAILDESC，这样硬件就可以开始接收数据。AXI DMA 收到数据以后，会把数据写入 Descriptor 指向的缓冲区地址，然后发送中断，Linux 执行下列代码处理中断：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_rx_poll&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; napi_struct &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;napi, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; budget) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cur_p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v[lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_ci];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (packets &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; budget &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;status &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; XAXIDMA_BD_STS_COMPLETE_MASK)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;dma_addr_t&lt;/span&gt; phys;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Ensure we see complete descriptor update */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_rmb&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skb;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* skb could be NULL if a previous pass already received the
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * packet for this slot in the ring, but failed to refill it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * with a newly allocated buffer. In this case, don&amp;#39;t try to
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * receive it again.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;likely&lt;/span&gt;(skb)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;app4 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000FFFF&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      phys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;desc_get_phys_addr&lt;/span&gt;(lp, cur_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_unmap_single&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, phys, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_frm_size,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           DMA_FROM_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_put&lt;/span&gt;(skb, length);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      skb&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;protocol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eth_type_trans&lt;/span&gt;(skb, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ndev);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;napi_gro_receive&lt;/span&gt;(napi, skb);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      size &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; length;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      packets&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;napi_alloc_skb&lt;/span&gt;(napi, lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_frm_size);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    phys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_map_single&lt;/span&gt;(lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, new_skb&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_frm_size,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              DMA_FROM_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;desc_set_phys_addr&lt;/span&gt;(lp, phys, cur_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cntrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_frm_size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_skb;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Only update tail_p to mark this slot as usable after it has
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * been successfully refilled.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tail_p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_ci;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_ci &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_num)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_ci &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cur_p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_v[lp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_bd_ci];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tail_p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;axienet_dma_out_addr&lt;/span&gt;(lp, XAXIDMA_RX_TDESC_OFFSET, tail_p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，接收逻辑顺序扫描了 Descriptor，找到那些传输完成的，把其中的数据交给网络栈处理，然后分配一个新的 skb，绑定到 Descriptor 上，把它恢复到可以接收数据的状态，最后更新 TAILDESC。&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;AXI DMA 提供了一个 Descriptor 链来异步地传输数据，U-Boot 为了简化，把链表退化成只有一个节点，串行地收和发；Linux 使用数组实现了一个循环的链表，通过 TAILDESC 提供新的 Descriptor，然后从 CURDESC 回收 Descriptor。Descriptor 不断在硬件和软件之间交替，CURDESC 到 TAILDESC 的部分归硬件，其余的归软件。这种设计模式在其他很多地方也可以看到。&lt;/p&gt;
&lt;h2 id=&#34;intel-82599&#34;&gt;Intel 82599&lt;/h2&gt;
&lt;p&gt;Intel 82599 是一个有线网卡，Linux 的驱动是 ixgbe。Intel 82599 为收和发都提供了多个队列，每个队列都对应了一个 Descriptor 数组，在内存中连续存放。Linux 驱动使用了 64 个接收队列和发送队列。&lt;/p&gt;
&lt;p&gt;文档链接：&lt;a href=&#34;https://cdrdv2-public.intel.com/331520/82599-datasheet-v3-4.pdf&#34;&gt;https://cdrdv2-public.intel.com/331520/82599-datasheet-v3-4.pdf&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;接收队列-1&#34;&gt;接收队列&lt;/h3&gt;
&lt;p&gt;和 AXI DMA 的链表形式不同。每个接收队列都由如下的寄存器定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDBAL/RDBAH[n]: Receive Descriptor Base Address Low/High&lt;/li&gt;
&lt;li&gt;RDLEN[n]: Receive Descriptor Length&lt;/li&gt;
&lt;li&gt;RDH[n]: Receive Descriptor Head&lt;/li&gt;
&lt;li&gt;RDT[n]: Receive Descriptor Tail&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由基地址 + 长度定义了一个循环队列，然后从 Head 到 Tail 的部分是当前有效的队列，软件从 Tail 插入新的 Descriptor，硬件从 Head 取 Descriptor。当 Head 等于 Tail 的时候，队列是空的，也就是说 Tail 表示的是合法的下一个，这样队列满的时候 Tail + 1 == Head。&lt;/p&gt;
&lt;p&gt;ixgbe 的实现代码在 &lt;code&gt;ixgbe_main.c&lt;/code&gt; 中，首先看如何初始化接收队列：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ixgbe_configure_rx&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; ixgbe_adapter &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;adapter) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * Setup the HW Rx Head and Tail Descriptor Pointers and
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * the Base and Length of the Rx Descriptor Ring
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; adapter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;num_rx_queues; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ixgbe_configure_rx_ring&lt;/span&gt;(adapter, adapter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rx_ring[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ixgbe_configure_rx_ring&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; ixgbe_adapter &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;adapter,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; ixgbe_ring &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ring) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  u64 rdba &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dma;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_WRITE_REG&lt;/span&gt;(hw, &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_RDBAL&lt;/span&gt;(reg_idx), (rdba &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DMA_BIT_MASK&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_WRITE_REG&lt;/span&gt;(hw, &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_RDBAH&lt;/span&gt;(reg_idx), (rdba &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_WRITE_REG&lt;/span&gt;(hw, &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_RDLEN&lt;/span&gt;(reg_idx),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;count &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;union&lt;/span&gt; ixgbe_adv_rx_desc));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_WRITE_REG&lt;/span&gt;(hw, &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_RDH&lt;/span&gt;(reg_idx), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_WRITE_REG&lt;/span&gt;(hw, &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_RDT&lt;/span&gt;(reg_idx), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; adapter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;io_addr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_RDT&lt;/span&gt;(reg_idx);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* enable receive descriptor ring */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rxdctl &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; IXGBE_RXDCTL_ENABLE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_WRITE_REG&lt;/span&gt;(hw, &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_RXDCTL&lt;/span&gt;(reg_idx), rxdctl);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* in ixgbe_alloc_rx_buffers */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bufsz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ixgbe_rx_bufsz&lt;/span&gt;(rx_ring);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ixgbe_alloc_mapped_page&lt;/span&gt;(rx_ring, bi))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* sync the buffer for use by the device */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_sync_single_range_for_device&lt;/span&gt;(rx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, bi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dma,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             bi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;page_offset, bufsz,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             DMA_FROM_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Refresh the desc even if buffer_addrs didn&amp;#39;t change
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * because each write-back erases this info.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rx_desc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;read.pkt_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cpu_to_le64&lt;/span&gt;(bi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dma &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; bi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;page_offset);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rx_desc&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* clear the length for the next_to_use descriptor */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rx_desc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;wb.upper.length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cleaned_count&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cleaned_count);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;writel&lt;/span&gt;(i, rx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tail);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;具体到实现上，可以看到和 AXI DMA 驱动基本是一样的：分配 Descriptor 数组空间，然后给每个 Descriptor 分配一个 Buffer，然后更新 tail 指针，让硬件可以开始进行接收。&lt;/p&gt;
&lt;h3 id=&#34;发送队列-1&#34;&gt;发送队列&lt;/h3&gt;
&lt;p&gt;发送队列和接收队列类似，也是先分配好 Descriptor 数组，只不过先不填内容，等到要发送数据的时候，再从 tail 取出一个 Descriptor，写入 buffer 地址，然后更新 tail 指针让硬件发送。代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;netdev_tx_t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ixgbe_xmit_frame_ring&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sk_buff &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;skb,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; ixgbe_adapter &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;adapter,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; ixgbe_ring &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tx_ring) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* record the location of the first descriptor for this packet */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  first &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_buffer_info[tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next_to_use];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  first&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; skb;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  first&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bytecount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; skb&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;len;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* in ixgbe_tx_map */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  dma &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_map_single&lt;/span&gt;(tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, skb&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data, size, DMA_TO_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (frag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;skb_shinfo&lt;/span&gt;(skb)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;frags[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];; frag&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;dma_mapping_error&lt;/span&gt;(tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, dma))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; dma_error;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* record length, and DMA address */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_unmap_len_set&lt;/span&gt;(tx_buffer, len, size);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dma_unmap_addr_set&lt;/span&gt;(tx_buffer, dma, dma);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tx_desc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;read.buffer_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cpu_to_le64&lt;/span&gt;(dma);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;unlikely&lt;/span&gt;(size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; IXGBE_MAX_DATA_PER_TXD)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tx_desc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;read.cmd_type_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;cpu_to_le32&lt;/span&gt;(cmd_type &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; IXGBE_MAX_DATA_PER_TXD);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tx_desc&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;count) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tx_desc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_TX_DESC&lt;/span&gt;(tx_ring, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tx_desc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;read.olinfo_status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      dma &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; IXGBE_MAX_DATA_PER_TXD;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      size &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; IXGBE_MAX_DATA_PER_TXD;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tx_desc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;read.buffer_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cpu_to_le64&lt;/span&gt;(dma);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tx_desc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;read.cmd_type_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cpu_to_le32&lt;/span&gt;(cmd_type &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; size);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tx_desc&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;count) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tx_desc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IXGBE_TX_DESC&lt;/span&gt;(tx_ring, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tx_desc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;read.olinfo_status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_frag_size&lt;/span&gt;(frag);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data_len &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dma &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;skb_frag_dma_map&lt;/span&gt;(tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dev, frag, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, size,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               DMA_TO_DEVICE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tx_buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx_buffer_info[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;count)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next_to_use &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;ixgbe_maybe_stop_tx&lt;/span&gt;(tx_ring, DESC_NEEDED);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;netif_xmit_stopped&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txring_txq&lt;/span&gt;(tx_ring)) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;netdev_xmit_more&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;writel&lt;/span&gt;(i, tx_ring&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tail);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这一段代码的思路是，对于 skb 的每个 frag，尝试填入 Descriptor，如果发现填不下，就填多个，直到填完位置，最后更新 tail 指针，让硬件开始发送。&lt;/p&gt;
&lt;h3 id=&#34;小结-1&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;在了解 AXI DMA 的工作原理的基础上，Intel 82599 的队列其实也不复杂，只不过直接采取了以 Descriptor 数组作为循环队列的方式，并且这里归属于硬件的 Descriptor 空间其实是 [Head, Tail) 左闭右开区间的形式（AXI DMA 是链表的头和尾，都属于硬件），这样就可以用 Head == Tail 来表示空队列，当然了，队列也永远会差一项才能满（除非额外记录队列中合法元素个数）。最后贴一张 Intel 82599 Datasheet 中的图片来帮助理解：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/82599_queue.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;connectx-4&#34;&gt;ConnectX-4&lt;/h2&gt;
&lt;p&gt;接下来看看 ConnectX-4 是如何设计它的各个队列的。首先，它有 Work Queue，用于发送数据（Send Queue）和准备接收数据的缓冲区（Receive Queue），然后硬件处理 Work Queue 中的 Entry 后，就会把结果写入到 Completion Queue，并且通过 Event Queue 通知 CPU。&lt;/p&gt;
&lt;p&gt;文档：&lt;a href=&#34;https://network.nvidia.com/files/doc-2020/ethernet-adapters-programming-manual.pdf&#34;&gt;https://network.nvidia.com/files/doc-2020/ethernet-adapters-programming-manual.pdf&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;work-queue&#34;&gt;Work Queue&lt;/h3&gt;
&lt;p&gt;Work Queue 和前面 Intel 82599 的设计很像，也是一个 Descriptor 的数组的形式，只不过 Work Queue Entry 是不定长的，支持不同的 Entry Format，例如 Send WQE、Receive WQE 和 Shared Receive WQE。&lt;/p&gt;
&lt;p&gt;驱动初始化的时候，创建好 Work Queue：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mlx5e_open_queues&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; mlx5e_channel &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; mlx5e_params &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;params,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; mlx5e_channel_param &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cparam) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  err &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mlx5e_open_sqs&lt;/span&gt;(c, params, cparam);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  err &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mlx5e_open_rxq_rq&lt;/span&gt;(c, params, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cparam&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rq);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后，和 Intel 82599 类似，发送的时候就向 Send Queue 插入 Entry，然后更新 Doorbell 让硬件开始发送；为了接收，先分配好缓冲区，初始化 Receive Queue，更新 Doorbell 让硬件开始接收数据。&lt;/p&gt;
&lt;h3 id=&#34;completion-queue&#34;&gt;Completion Queue&lt;/h3&gt;
&lt;p&gt;和 Intel 82599 不同的是，这里表示项目完成是通过 Completion Queue 完成的，也就是说，硬件会向 Completion Queue 插入一项，来表示对应的 Work Queue Entry 完成情况。这样的设计下，Work Queue 完全由软件写入，Completion Queue 完全由硬件写入，不像前面 AXI DMA 和 Intel 82599 那样硬件会更新 Descriptor 里面的状态位。Completion Queue 也有两个 Counter，相当于队列的头和尾指针：Producer Counter 记录了硬件写入的 Completion Queue Entry（CQE）数量，Consumer Counter 记录了软件已经处理了的 CQE 数量。在这里有一个比较有意思的设计：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ownership &lt;span style=&#34;color:#a6e22e&#34;&gt;cqe_ownership&lt;/span&gt;(cqe) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cqe.owner &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ((consumer_counter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; log2_cq_size) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; SW ownership
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; HW ownership
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它根据 consumer_counter 的当前值的高位（mask 掉 CQ 大小对应的 bits）与 CQE 的 owner 字段进行比对，如果相等，就认为是属于软件；否则则是属于硬件。软件在轮询的时候，只有遇到 SW ownership 的 CQE 才会处理，否则就忽略。乍一看，这个设计挺奇怪的，因为溢出的问题，&lt;code&gt;((consumer_counter &amp;gt;&amp;gt; log2_cq_size) &amp;amp; 1)&lt;/code&gt; 每次溢出就会取反，所以相应的 ownership 的对应关系也会取反。回想一下，之前 AXI DMA 的做法，接收的时候，软件设置一个状态位，硬件完成接收以后，也设置一个状态位，软件完成处理以后，再恢复状态位为可以接收的状态，这样来回操作比较麻烦。在 ConnectX-4 的这种设计下，硬件只需要在填 CQE 的时候，toggle 一下 owner 位即可，软件不需要修改内容，只需要修改 consumer_counter。&lt;/p&gt;
&lt;p&gt;这样看可能比较迷糊，来拆解一下整个过程。首先是 AXI DMA 的接收队列的 Descriptor 的处理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;软件设置 status = 0 表示这个 Descriptor 可以接收&lt;/li&gt;
&lt;li&gt;硬件设置 status |= COMPLETED&lt;/li&gt;
&lt;li&gt;软件读取 status 发现 COMPLETED，处理数据，然后重新设置 status = 0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，Descriptor 的内容是软件和硬件来回修改。ConnectX-4 的设计下，软件不需要对 CQE 做任何修改：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始情况下，owner = 1 和 consumer_counter = 0，对应 HW owner，所以软件不会认为是合法的 CQE&lt;/li&gt;
&lt;li&gt;硬件开始向 CQ 插入 CQE，此时 owner ^=1 变为 0，对应 SW owner，所以软件可以开始读取并处理 CQE&lt;/li&gt;
&lt;li&gt;硬件不断插入，出现了第一次溢出，软件跟着处理，也第一次溢出了，此时 &lt;code&gt;((consumer_counter &amp;gt;&amp;gt; log2_cq_size) &amp;amp; 1) = 1&lt;/code&gt;，此时 1 对应 SW owner，0 对应 HW owner。当硬件插入 CQE 以后，owner 才从 0（HW owner）又变回 1（SW owner），软件就知道，可以继续读取并处理 CQE&lt;/li&gt;
&lt;li&gt;这个过程继续下去，owner 的含义不断翻转&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，整个过程软件不需要写入 CQE 的内容，只需要不断轮询并更新 consumer_counter。硬件实现也很简单，不断地对 owner 进行异或，就实现了通知软件的功能。这就类似于，每当 counter 溢出的时候，就自动“清空”所有 CQE 的“valid”位，然后硬件再设置“valid = 1”。硬件只需要保证 producer_counter 不会追上 consumer_counter 就可以了，硬件也不需要去读取 CQE 的内容来判断软件是否处理完成。这个方式还是比较有意思的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get_sw_cqe&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; mlx5_ib_cq &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cq, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cqe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_cqe&lt;/span&gt;(cq, n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; cq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ibcq.cqe);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; mlx5_cqe64 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cqe64;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cqe64 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (cq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;mcq.cqe_sz &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; cqe : cqe &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;likely&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;get_cqe_opcode&lt;/span&gt;(cqe64) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; MLX5_CQE_INVALID) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;((cqe64&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;op_own &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; MLX5_CQE_OWNER_MASK) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt;(n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (cq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ibcq.cqe &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cqe;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际上，写这篇博客就是因为有同学看到了 CQE 的 owner 的奇怪设定，我才来研究的这个问题。我就是为了这点醋，才包的这顿饺子，前面做了一大堆的引入。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt-时间&#34;&gt;ChatGPT 时间&lt;/h2&gt;
&lt;p&gt;问：What does network driver do to send/receive network packets to/from NIC?&lt;/p&gt;
&lt;p&gt;答：A network driver is a software component that allows the operating system to communicate with the network interface card (NIC) and send and receive network packets. The NIC is a hardware device that connects a computer to a network and enables it to communicate with other devices on that network.&lt;/p&gt;
&lt;p&gt;When the computer wants to send a network packet, the operating system hands the packet off to the network driver, which then converts it into a format that the NIC can understand. The network driver also sets the appropriate control bits and headers in the packet to ensure that it is correctly transmitted over the network.&lt;/p&gt;
&lt;p&gt;When a network packet is received by the NIC, the network driver intercepts it and passes it on to the operating system. The network driver then verifies the packet&amp;rsquo;s integrity, checks if it is destined for the local machine, and if so, hands it over to the appropriate application.&lt;/p&gt;
&lt;p&gt;In summary, the network driver acts as a bridge between the operating system and the NIC, enabling the computer to send and receive network packets over the network.&lt;/p&gt;
&lt;p&gt;问：Can you give me a detailed description? e.g. the ring buffer and notification mechanism&lt;/p&gt;
&lt;p&gt;答：Sure, I can provide a more detailed description of how network drivers use ring buffers and notification mechanisms to send and receive network packets.&lt;/p&gt;
&lt;p&gt;A ring buffer is a circular buffer that is used by the network driver to store incoming and outgoing network packets. The buffer is divided into multiple sections or &amp;ldquo;rings,&amp;rdquo; each of which can hold one or more packets. The ring buffer is used to manage the flow of data between the network driver and the NIC.&lt;/p&gt;
&lt;p&gt;When a packet is received by the NIC, it is stored in the receive ring buffer. The network driver then reads the packet from the ring buffer, processes it, and hands it over to the appropriate application.&lt;/p&gt;
&lt;p&gt;When the computer wants to send a packet, the network driver first checks if there is space available in the transmit ring buffer. If there is, it writes the packet to the next available slot in the buffer and sets the appropriate control bits and headers.&lt;/p&gt;
&lt;p&gt;The network driver then uses a notification mechanism to inform the NIC that there is data available in the transmit ring buffer. This notification mechanism can take different forms, depending on the specific hardware and driver implementation. For example, it might involve writing to a specific memory location or sending an interrupt signal to the NIC.&lt;/p&gt;
&lt;p&gt;注：没听说过给 NIC 发送中断。&lt;/p&gt;
&lt;p&gt;When the NIC receives the notification, it reads the packet from the transmit ring buffer and sends it over the network.&lt;/p&gt;
&lt;p&gt;The ring buffer and notification mechanisms are critical components of network drivers because they enable efficient communication between the operating system and the NIC. By using a circular buffer, the driver can handle multiple packets at once and avoid the need for expensive memory allocations or deallocations. The notification mechanism allows the driver to inform the NIC of data availability without constantly polling the buffer, which would waste CPU cycles and reduce system performance.&lt;/p&gt;
&lt;p&gt;注：这里说反了，应该是告诉网卡驱动有数据可用。&lt;/p&gt;
&lt;p&gt;问：Can you take Xilinx AXI DMA for example?&lt;/p&gt;
&lt;p&gt;答：Sure, let me provide an example of how the Xilinx AXI DMA uses a ring buffer and notification mechanism to send and receive network packets.&lt;/p&gt;
&lt;p&gt;The Xilinx AXI DMA is a DMA controller that is commonly used in embedded systems to handle data transfers between a host processor and peripherals, including network interfaces. The AXI DMA uses a scatter-gather DMA engine, which means it can transfer data between non-contiguous memory regions.&lt;/p&gt;
&lt;p&gt;In the context of network communication, the AXI DMA is typically used to transfer packets between the network interface card and the host memory. The AXI DMA driver sets up a ring buffer in host memory that is used to store incoming and outgoing packets.&lt;/p&gt;
&lt;p&gt;When a packet is received by the NIC, it is stored in a receive ring buffer that is allocated in the host memory. The AXI DMA driver sets up the receive ring buffer and configures the AXI DMA to use it as the destination for incoming packets.&lt;/p&gt;
&lt;p&gt;To enable the notification mechanism, the AXI DMA driver configures the AXI DMA to generate an interrupt when a packet is received and stored in the receive ring buffer. The interrupt is sent to the host processor, which then reads the packet from the receive ring buffer and processes it.&lt;/p&gt;
&lt;p&gt;When the host processor wants to send a packet, it writes the packet data to a transmit ring buffer that is also allocated in host memory. The AXI DMA driver sets up the transmit ring buffer and configures the AXI DMA to use it as the source for outgoing packets.&lt;/p&gt;
&lt;p&gt;To enable the notification mechanism for outgoing packets, the AXI DMA driver configures the AXI DMA to generate an interrupt when the transmit ring buffer is empty and ready to accept a new packet. This interrupt is sent to the host processor, which then writes the next packet to the transmit ring buffer.&lt;/p&gt;
&lt;p&gt;The AXI DMA driver manages the ring buffers and interrupt handling to ensure that incoming and outgoing packets are processed efficiently and without data loss.&lt;/p&gt;
&lt;p&gt;In summary, the Xilinx AXI DMA uses a ring buffer and notification mechanism to enable efficient transfer of network packets between the NIC and the host memory. The ring buffer is used to manage the flow of incoming and outgoing packets, while the notification mechanism enables the DMA engine to inform the host processor when new data is available or when the buffer is ready to accept new data.&lt;/p&gt;
&lt;p&gt;问：How about Intel 82599? What&amp;rsquo;s the difference between Intel 82599 and AXI DMA?&lt;/p&gt;
&lt;p&gt;答：The Intel 82599 is a high-performance Ethernet controller that is commonly used in data center and cloud computing environments. Like the AXI DMA, the Intel 82599 also uses a ring buffer and notification mechanism to send and receive network packets.&lt;/p&gt;
&lt;p&gt;However, there are some key differences between the Intel 82599 and the AXI DMA. The most significant difference is that the Intel 82599 is a hardware-based Ethernet controller, while the AXI DMA is a DMA controller that is typically used in embedded systems.&lt;/p&gt;
&lt;p&gt;As a hardware-based Ethernet controller, the Intel 82599 is optimized for high-speed data transfer and advanced networking features. It includes hardware offloading capabilities that can offload tasks such as TCP/IP checksum calculation, packet segmentation, and packet filtering from the host CPU. This offloading reduces the CPU load and improves overall system performance.&lt;/p&gt;
&lt;p&gt;The Intel 82599 uses multiple receive and transmit ring buffers to support parallel data processing and enable high-speed data transfer. The receive ring buffers are used to store incoming packets, while the transmit ring buffers are used to store outgoing packets.&lt;/p&gt;
&lt;p&gt;The notification mechanism used by the Intel 82599 is called Interrupt Moderation. This mechanism is used to reduce the number of interrupts generated by the Ethernet controller and improve system efficiency. Interrupt Moderation groups multiple network packets together and generates a single interrupt to notify the host CPU that the packets are ready to be processed.&lt;/p&gt;
&lt;p&gt;In summary, the Intel 82599 and the AXI DMA both use ring buffers and notification mechanisms to transfer network packets, but they differ in their design and application. The Intel 82599 is a high-performance Ethernet controller that is optimized for data center and cloud computing environments, while the AXI DMA is a DMA controller that is typically used in embedded systems. The Intel 82599 includes advanced networking features such as hardware offloading and Interrupt Moderation, which improve system performance and efficiency.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>802.11 学习</title>
      <link>https://jia.je/hardware/2023/03/20/wireless-network/</link>
      <pubDate>Mon, 20 Mar 2023 16:56:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/03/20/wireless-network/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/networking/wlan.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在学习 802.11，在博客上记录一下我的学习过程。&lt;/p&gt;
&lt;p&gt;本文参考了 &lt;a href=&#34;https://ieeexplore.ieee.org/document/654749&#34;&gt;802.11-1997&lt;/a&gt; 并使用了标准中的图片。&lt;/p&gt;
&lt;h2 id=&#34;mac-层帧格式&#34;&gt;MAC 层帧格式&lt;/h2&gt;
&lt;p&gt;802.11 MAC 层的帧格式，如 802.11-1997 Figure 12：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/80211_mac.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;前两个字节 Frame Control 的定义如 802.11-1997 Figure 13：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/80211_frame_control.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据 Type 和 Subtype 字段决定了帧的类型，如管理（Management）帧，控制（Control）帧和数据（Data）帧。&lt;/p&gt;
&lt;p&gt;无线路由器定期发送 Beacon frame，告诉客户端自己广播了哪些 SSID。客户端也可以主动发送 Probe Request frame 来询问有没有路由器有对应的 SSID，如果有，路由器回复一个 Probe Response frame。&lt;/p&gt;
&lt;h2 id=&#34;phy&#34;&gt;PHY&lt;/h2&gt;
&lt;p&gt;802.11 支持很多种 PHY，常见的有 802.11 b/g/n/ac/ax。起名也很有意思：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;802.11b: High Rate，最高 11 Mbps&lt;/li&gt;
&lt;li&gt;802.11g: Extended Rate，最高 54 Mbps&lt;/li&gt;
&lt;li&gt;802.11n: High Throughput，最高 600 Mbps&lt;/li&gt;
&lt;li&gt;802.11ac: Very High Throughput，最高 6933 Mbps&lt;/li&gt;
&lt;li&gt;802.11ax: High Efficiency，最高 9608 Mbps&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;80211b&#34;&gt;802.11b&lt;/h3&gt;
&lt;p&gt;首先看 &lt;a href=&#34;https://ieeexplore.ieee.org/document/972833&#34;&gt;802.11b&lt;/a&gt;，802.11b 是对 802.11 的补充，主要定义了第 18 章 &lt;code&gt;High Rate, direct sequence spread spectrum PHY specification&lt;/code&gt;，缩写 HR-DSSS。&lt;/p&gt;
&lt;p&gt;HR-DSSS 工作在 2.4 GHz 频段上，常用的是 13 个 channel，中心频率从 2412 MHz 到 2472 MHz 不等，呈等差数列，公差是 5 MHz。HR-DSSS 会占用 22MHz 的频谱，从中心频率减 11 MHz 到中心频率加 11 MHz，所以相邻 channel 会有干扰，见下图（取自 &lt;a href=&#34;https://en.wikipedia.org/wiki/IEEE_802.11&#34;&gt;Wikipedia&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/80211_channels.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这就是为什么通常会把 2.4GHz 无线路由器的 channel 固定为 1、6 或 11。&lt;/p&gt;
&lt;p&gt;那么，HR-DSSS 如何把数据调制为 2.4GHz 上的信号呢？HR-DSSS 支持不同的速率，例如 1、2、5.5 和 11 Mbps，这些二进制的数据需要按照一定的方法调制到 2.4 GHz 的载波上。&lt;/p&gt;
&lt;p&gt;首先是最简单的情况，例如在 channel 1 上传输 1 Mbps 的数据，802.11 采用的是 DSSS 的方法。简单来说，对于输入的每个位，扩展成 11 个 bit，这样就得到了一个 11 MHz 的基带信号，然后再把基带信号通过 DBPSK 调制到 2412 MHz 的载波信号上。&lt;/p&gt;
&lt;p&gt;这个扩展过程是这样的：如果数据位是 0，那就输出 10110111000（Barker 码）；如果数据位是 1，那就输出 01001000111。实际上就是把 1 位的信息重复了 11 次再发出去，看起来很浪费，但很好地解决了干扰的问题，即使传输中出现了错误，接受方也很容易从 11 位的数据中恢复出原来的数据。&lt;/p&gt;
&lt;p&gt;2 Mbps 的传输方式类似，只不过每个 symbol 传输两位的数据，所以采用 DQPSK 的调制方法，频率保持不变，实现了两倍的数据传输速率。&lt;/p&gt;
&lt;p&gt;5.5 Mbps 和 11 Mbps 则采用了其他方法。由于上面的 1 比 11 的转换比例太浪费了，所以为了提升速度，5.5 Mbps 和 11 Mbps 时采用的是 CCK 编码方式，具体来说，5.5 Mbps 的时候，输入的 4 个 bit 会映射为 8 个 chip，类似地 11 Mbps 的时候，输入的 8 个 bit 也映射到 8 个 chip。每个 chip 都是复数，采用 DQPSK 进行调制。&lt;/p&gt;
&lt;p&gt;可以看到，整个过程都是在冗余：速率低的时候，就冗余很多份；速率高的时候，冗余就比较少。实际上，5.5 Mbps 和 11 Mbps 还可以采用可选的 PBCC 进行编码，下面摘抄了 &lt;a href=&#34;https://rfmw.em.keysight.com/wireless/helpfiles/89600b/webhelp/subsystems/wlan-dsss/content/dsss_about_datamodfmt.htm&#34;&gt;About Data Modulation Format (802.11b/g DSSS/CCK/PBCC)&lt;/a&gt; 中 802.11b 不同速率和编码方式的表格：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data Modulation Formats&lt;/th&gt;
&lt;th&gt;Spread Sequence Code scheme&lt;/th&gt;
&lt;th&gt;Data Rate(Mbps)&lt;/th&gt;
&lt;th&gt;Symbol Rate(Msps)&lt;/th&gt;
&lt;th&gt;Chip Rate (Mcps)&lt;/th&gt;
&lt;th&gt;Bits per Symbol&lt;/th&gt;
&lt;th&gt;Modulation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Barker 1&lt;/td&gt;
&lt;td&gt;11 Chip Barker&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;DBPSK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Barker 2&lt;/td&gt;
&lt;td&gt;11 Chip Barker&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;DQPSK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CCK 5.5&lt;/td&gt;
&lt;td&gt;8 chip CCK&lt;/td&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;1.375&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;DQPSK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CCK 11&lt;/td&gt;
&lt;td&gt;8 chip CCK&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;1.375&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;DQPSK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PBCC 5.5&lt;/td&gt;
&lt;td&gt;PBCC&lt;/td&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;QPSK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PBCC 11&lt;/td&gt;
&lt;td&gt;PBCC&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;QPSK&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;80211g&#34;&gt;802.11g&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/document/1210624&#34;&gt;802.11g&lt;/a&gt; 定义了第 19 章 &lt;code&gt;Extended Rate PHY specification&lt;/code&gt;，也就是 ERP(Extended Rate PHY)，其主要采用的技术是 OFDM，连起来就是 ERP-OFDM，额外支持更多速率：6、9、12、18、24、36、48 和 54 Mbps。各种调制技术的速率对比：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DSSS: 802.11 1/2 Mbps&lt;/li&gt;
&lt;li&gt;CCK: 802.11b 5.5/11 Mbps&lt;/li&gt;
&lt;li&gt;OFDM: 802.11g 6/9/12/18/24/36/48/54 Mbps&lt;/li&gt;
&lt;li&gt;PBCC: 802.11b 5.5/11 Mbps, 802.11g 22/33 Mbps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OFDM 的核心思想就是采用多个载波信号，这些载波信号的频率呈等差数列，同时保证各载波相互正交，这样就提高了数据传输速率。为了保证正交，相邻载波信号的频率的差要满足 \( \Delta{f} = k / T_U \)，其中 k 是正整数，\( T_U \) 是每个 symbol 的时间（引用 &lt;a href=&#34;https://zh.wikipedia.org/zh-cn/%E6%AD%A3%E4%BA%A4%E9%A0%BB%E5%88%86%E5%A4%8D%E7%94%A8#%E6%AD%A3%E4%BA%A4&#34;&gt;wikipedia&lt;/a&gt;）。下面是 802.11 标准中的 OFDM PHY 的组成：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ofdm_circuit.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中的缩写：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FEC: Forward Error Correction&lt;/li&gt;
&lt;li&gt;IFFT/FFT: Inverse Fast Fourier Transform/Fast Fourier Transform&lt;/li&gt;
&lt;li&gt;GI: Guard Interval&lt;/li&gt;
&lt;li&gt;I/Q: In-phase/Quadrature&lt;/li&gt;
&lt;li&gt;HPA: High Power Amplifier&lt;/li&gt;
&lt;li&gt;LNA: Low Noise Amplifier&lt;/li&gt;
&lt;li&gt;AGC: Automatic Gain Control&lt;/li&gt;
&lt;li&gt;AFC: Automatic Frequency Control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;802.11g 的信号带宽是 20MHz，分成 52 个子载波，子载波的间距是 0.3125 MHz（20 MHz / 64，\( T_{FFT}=3.2 \mu s, \Delta{f} = 1 / T_{FFT} \)），所以实际上只占了 \( 0.3125 \textit{MHz} * 52 = 16.25 \textit{MHz} \) 的频谱。其中 48 个用于传输数据，每个载波上可以采用不同的调制方法。54 Mbps 是怎么算的呢？802.11g 的 Symbol rate 是 250000 每秒（因为 \( T_{SYM} = 3.2 + 0.8 = 4 \mu s\)），如果使用 64-QAM 调制，那么每个 symbol 对应 6 个 bit，然后使用纠错码，纠错的时候浪费了 1/4 的位，实际数据占 3/4，一共 48 个载波，那么数据速率就是 \( 48 * 250000 * 6 * 3/4 = 54 \textit{Mbps} \)。&lt;/p&gt;
&lt;h3 id=&#34;80211n&#34;&gt;802.11n&lt;/h3&gt;
&lt;p&gt;802.11n 在 802.11g 的基础上添加了 MIMO，也就是可以用多个天线同时传输。&lt;/p&gt;
&lt;p&gt;首先还是考虑单天线的情况，基本和 802.11g 相同，区别是采用了 52（\(N_{SD}\)）个 OFDM 子载波用于传输数据，同时纠错码带来的浪费比例从 1/4 降到了 1/6，所以数据速率是 \( 52 * 250000 * 6 * 5/6 = 65 \textit{Mbps} \)。802.11n 还提供了 Short GI（Guard Interval）选项，把 GI 从 800 ns 降低到 400ns，使得每个 symbol 的时间可以从 \(3.2 + 0.8 = 4 \mu s \) 降低到 \( 3.2 + 0.4 = 3.6 \mu s \)，此时的数据速率达到 \( 52 * 1000000 / 3.6 * 6 * 5/6 = 72.2 \textit{Mbps} \)。&lt;/p&gt;
&lt;p&gt;除此之外，802.11n 还引入了 40 MHz 频宽的选项，以占用更多频谱为代价，换来可以用 108 个子载波来传输数据，此时数据速率可以达到 \( 108 * 1000000 / 3.6 * 6 * 5 / 6 = 150 \textit{Mbps} \)。&lt;/p&gt;
&lt;p&gt;考虑多天线，如果同时两根天线传输数据，那么数据速率就是两倍，达到 \( 300 \textit{Mbps} \)；最高可以同时四根天线传输数据，所以数据速率最高理论值是 \( 600 \textit{Mbps} \)。&lt;/p&gt;
&lt;h3 id=&#34;80211ac&#34;&gt;802.11ac&lt;/h3&gt;
&lt;p&gt;802.11ac 添加了 160 MHz 频宽的选项，可以提供 468 个子载波，调制方式从 64-QAM 提升到 256-QAM，同时最大可以有 8 根天线同时传输数据，最大数据速率是 \( 468 * 1000000 / 3.6 * 8 * 5 / 6 * 8 = 6933.3 \textit{Mbps} \)。&lt;/p&gt;
&lt;p&gt;由此可见，提高无线网络的速率的方法就是提高上式的各个系数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子载波数量：增加频宽，或者在频宽一定的时候，留出更多的子载波用于数据，提升较大，但频率不能太宽&lt;/li&gt;
&lt;li&gt;Symbol 时间：减少 Guard Interval，提升不大&lt;/li&gt;
&lt;li&gt;QAM 位数：从 PSK 到 4-QAM 到 64-QAM 到 256-QAM，提升难度较大&lt;/li&gt;
&lt;li&gt;纠错码开销：不会超过 1，难以提升&lt;/li&gt;
&lt;li&gt;更多天线：从 1 到 4 到 8，未来到 16，逐步提升&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以要进一步提升性能，主要从子载波数量、QAM 位数和 MIMO 数量上做文章。&lt;/p&gt;
&lt;h3 id=&#34;80211ax&#34;&gt;802.11ax&lt;/h3&gt;
&lt;p&gt;802.11ax 可以提供 1960 个子载波（间距从 312.5 kHz 缩小到 78.125 kHz，\( \Delta{f} = 78.125 kHz, T_{FFT} = 1 / \Delta{f} = 12.8 \mu s \)），调制方式从 256-QAM 提升到 1024-QAM，但是 \( T_{SYM} \) 也提高到了 \( 12.8 + 0.8 = 13.6 \mu s \)，最大数据速率是 \( 1960 * 1000000 / 13.6 * 10 * 5 / 6 * 8 = 9607.8 \textit{Mbps} \)。&lt;/p&gt;
&lt;h3 id=&#34;ofdm-对比&#34;&gt;OFDM 对比&lt;/h3&gt;
&lt;p&gt;下面总结了使用 OFDM 的 PHY 的各项参数，其中 Data rate 的计算公式：&lt;code&gt;Subcarrier * 1000000 / T_{SYM} * Coding Rate * MIMO streams&lt;/code&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Standard&lt;/th&gt;
&lt;th&gt;Subcarrier&lt;/th&gt;
&lt;th&gt;T_{SYM}&lt;/th&gt;
&lt;th&gt;QAM bits&lt;/th&gt;
&lt;th&gt;Coding Rate&lt;/th&gt;
&lt;th&gt;MIMO streams&lt;/th&gt;
&lt;th&gt;Data rate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;802.11g&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;4 us&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3/4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;54 Mbps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;802.11n&lt;/td&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;td&gt;3.6 us&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5/6&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;600 Mbps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;802.11ac&lt;/td&gt;
&lt;td&gt;468&lt;/td&gt;
&lt;td&gt;3.6 us&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5/6&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6933.3 Mbps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;802.11ax&lt;/td&gt;
&lt;td&gt;1960&lt;/td&gt;
&lt;td&gt;13.6 us&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;5/6&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;9607.8 Mbps&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>数字调制</title>
      <link>https://jia.je/hardware/2023/03/19/digital-modulation/</link>
      <pubDate>Sun, 19 Mar 2023 12:26:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/03/19/digital-modulation/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在学习 802.11，需要学习很多数字调制相关的知识，因此自学了一下通信原理。&lt;/p&gt;
&lt;h2 id=&#34;ask&#34;&gt;ASK&lt;/h2&gt;
&lt;p&gt;Amplitude-Shift Keying 调整载波信号的幅度&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ask.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;fsk&#34;&gt;FSK&lt;/h2&gt;
&lt;p&gt;Frequency-Shift Keying 调整载波信号的频率&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/bfsk.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;psk&#34;&gt;PSK&lt;/h2&gt;
&lt;p&gt;Phase-Shift Keying 调整载波信号的相位&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/bpsk.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;DPSK(Differential Phase-Shift Keying) 是在 PSK 的基础上，把相位的绝对值变成相位的差。例如 BPSK 传输 0 对应 0 度相位，传输 1 对应 180 度相位，那么 DBPSK 传输 0 时保持相位和上一个 symbol 一样，传输 1 时相位相对上一个 symbol 增加 180 度。&lt;/p&gt;
&lt;h2 id=&#34;qam&#34;&gt;QAM&lt;/h2&gt;
&lt;p&gt;Quadrature Amplitude Modulation 两个正交载波信号之和，调整两个信号的相位和幅度&lt;/p&gt;
&lt;h3 id=&#34;4-qam&#34;&gt;4-QAM&lt;/h3&gt;
&lt;p&gt;4-QAM 也等价于 4-PSK（Phase-Shift Keying），相当于调整一个载波信号的相位。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/4qam.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;16-qam&#34;&gt;16-QAM&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/16qam.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 Linux 上使用 Netgear A6210 USB 无线网卡</title>
      <link>https://jia.je/hardware/2023/02/26/netgear-a6210-linux-wifi-dongle/</link>
      <pubDate>Sun, 26 Feb 2023 14:48:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/02/26/netgear-a6210-linux-wifi-dongle/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近要让一台 Linux 机器连接无线网，所以要买一个对 Linux 支持比较好的 USB 无线网卡。以前曾经用过一些 USB 无线网卡，但对 Linux 的支持大多不好，要么是需要 out of tree module，要么就忽然不能工作。因此前期的调研十分重要。&lt;/p&gt;
&lt;h2 id=&#34;挑选-usb-无线网卡&#34;&gt;挑选 USB 无线网卡&lt;/h2&gt;
&lt;p&gt;在调研的时候，发现了 &lt;a href=&#34;https://github.com/morrownr/USB-WiFi&#34;&gt;morrownr/USB-WiFi&lt;/a&gt; 仓库，里面总结了一些 Linux 支持比较好的 USB 无线网卡，由于是外国人写的，所以里面很多型号在国内都买不到，但实际上 USB 无线网卡的芯片组一般就是那些，所以需要先确定芯片组，再根据芯片组找对应的 USB 无线网卡。&lt;/p&gt;
&lt;p&gt;开发用于 USB 无线网卡的厂商常见的是：Mediatek（2011 年 MediaTek 收购了 Ralink）和 Realtek。国内直接买到的 USB 无线网卡大部分是 Realtek，但是 Realtek 的 Linux 驱动很长一段时间都是 out of tree 的状态，只有比较新的一些芯片组有内核支持，而 Mediatek 系列的芯片内核支持较好，缺点是比较贵。下面从上面的仓库里摘录了一些芯片组的 Linux 内核支持情况：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chipset&lt;/th&gt;
&lt;th&gt;Linux&lt;/th&gt;
&lt;th&gt;Commit&lt;/th&gt;
&lt;th&gt;802.11&lt;/th&gt;
&lt;th&gt;USB&lt;/th&gt;
&lt;th&gt;Bluetooth&lt;/th&gt;
&lt;th&gt;Package&lt;/th&gt;
&lt;th&gt;Links&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MT7601u&lt;/td&gt;
&lt;td&gt;4.2+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/c869f77d6abb5d5f9f2f1a661d5c53862a9cad34&#34;&gt;mt7601u&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.mediatek.cn/products/broadband-wifi/mt7601u&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT7610u&lt;/td&gt;
&lt;td&gt;4.19+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/ff69c75ee5392320ab3a8dd01db46d3cd097eb46&#34;&gt;mt76x0u&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.mediatek.cn/products/broadband-wifi/mt7610u&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT7612u&lt;/td&gt;
&lt;td&gt;4.19+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/ee676cd5017c5f71b8aac1f2d1016ba0f6e4f348&#34;&gt;mt76x2u&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.mediatek.cn/products/broadband-wifi/mt7612u&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT7662u&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.mediatek.cn/products/broadband-wifi/mt7662u&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT7921au&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT7922u&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8188eus&lt;/td&gt;
&lt;td&gt;3.12+&lt;/td&gt;
&lt;td&gt;rtl8188eu/r8188eu/&lt;a href=&#34;https://github.com/torvalds/linux/commit/3dfb8e844fa30cceb4b810613e2c35f628eb3e70&#34;&gt;rtl8xxxu&lt;/a&gt; &lt;a href=&#34;https://cateee.net/lkddb/web-lkddb/R8188EU.html&#34;&gt;LKDDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;QFN-46&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8188eus&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8188gu&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/McMCCRU/rtl8188gu&#34;&gt;3rd party&lt;/a&gt; &lt;a href=&#34;https://patchwork.kernel.org/project/linux-wireless/patch/5a9a264d-a59b-0d91-04f0-e5b38e6aaea0@gmail.com/&#34;&gt;patch&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8723bu&lt;/td&gt;
&lt;td&gt;4.6+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/35a741febfae3cfc2a27d3b4935e255585ecfd81&#34;&gt;rtl8xxxu&lt;/a&gt; &lt;a href=&#34;https://cateee.net/lkddb/web-lkddb/RTL8XXXU.html&#34;&gt;LKDDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;QFN-56&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://linux-hardware.org/?id=usb:0bda-b720&#34;&gt;USB 0bda:b720&lt;/a&gt;，&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8723bu&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8723du&lt;/td&gt;
&lt;td&gt;6.2+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/87caeef032fc3921bc866ad7becb6ed51aa8b27b&#34;&gt;rtw88&lt;/a&gt; &lt;a href=&#34;https://cateee.net/lkddb/web-lkddb/RTW88_8723DU.html&#34;&gt;LKDDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4.2&lt;/td&gt;
&lt;td&gt;QFN-48&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8723du&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8811au&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://docs.alfa.com.tw/Support/Linux/RTL8811AU/&#34;&gt;3rd party&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;QFN-56&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8811au&#34;&gt;Official&lt;/a&gt; &lt;a href=&#34;https://datasheet.lcsc.com/lcsc/2205121200_Realtek-Semicon-RTL8811AU-CG_C3013607.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8821au&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;QFN-56&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8821au&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8811cu&lt;/td&gt;
&lt;td&gt;6.2+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/aff5ffd718de23cb8603f2e229204670e2644334&#34;&gt;rtw88&lt;/a&gt; &lt;a href=&#34;https://cateee.net/lkddb/web-lkddb/RTW88_8821CU.html&#34;&gt;LKDDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;QFN-56&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8811cu&#34;&gt;Official&lt;/a&gt;，&lt;a href=&#34;https://datasheet.lcsc.com/lcsc/2302141730_Realtek-Semicon-RTL8811CU-CG_C2687136.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8821cu&lt;/td&gt;
&lt;td&gt;6.2+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/aff5ffd718de23cb8603f2e229204670e2644334&#34;&gt;rtw88&lt;/a&gt; &lt;a href=&#34;https://cateee.net/lkddb/web-lkddb/RTW88_8821CU.html&#34;&gt;LKDDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;4.2&lt;/td&gt;
&lt;td&gt;QFN-56&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8821cu&#34;&gt;Official&lt;/a&gt;，&lt;a href=&#34;https://datasheet.lcsc.com/lcsc/2202211630_Realtek-Semicon-RTL8821CU-CG_C2761145.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8812au&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://docs.alfa.com.tw/Support/Linux/RTL8812AU/&#34;&gt;3rd party&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;QFN-76&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8812au&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8812bu&lt;/td&gt;
&lt;td&gt;6.2+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/45794099f5e1d7abc5eb07e6eec7e1e5c6cb540d&#34;&gt;rtw88&lt;/a&gt; &lt;a href=&#34;https://cateee.net/lkddb/web-lkddb/RTW88_8822BU.html&#34;&gt;LKDDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;TFBGA&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8812bu&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8822bu&lt;/td&gt;
&lt;td&gt;6.2+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/45794099f5e1d7abc5eb07e6eec7e1e5c6cb540d&#34;&gt;rtw88&lt;/a&gt; &lt;a href=&#34;https://cateee.net/lkddb/web-lkddb/RTW88_8822BU.html&#34;&gt;LKDDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;4.1&lt;/td&gt;
&lt;td&gt;TFBGA&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8822bu&#34;&gt;Official&lt;/a&gt;，&lt;a href=&#34;https://datasheet.lcsc.com/lcsc/2204071230_Realtek-Semicon-RTL8822BU-CG_C2803244.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8822cu&lt;/td&gt;
&lt;td&gt;6.2+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/commit/07cef03b8d44dee7488de3d1585387e603c78676&#34;&gt;rtw88&lt;/a&gt; &lt;a href=&#34;https://cateee.net/lkddb/web-lkddb/RTW88_8822CU.html&#34;&gt;LKDDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTL8814au&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://docs.alfa.com.tw/Support/Linux/RTL8814AU/&#34;&gt;3rd party&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;b/g/n/ac&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;QFN-128&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.realtek.com/en/products/communications-network-ics/item/rtl8814au&#34;&gt;Official&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以观察到规律：Realtek 的产品型号中，881x 和 882x 有对应的关系，前者不带蓝牙，后者带。最后一位数字越大，则越新。&lt;/p&gt;
&lt;p&gt;在内核源码中可以找到一些使用这个芯片组的 USB 无线网卡型号，但需要注意的是，有时候同样的型号，有 v1v2v3 之分，可能用的是不同的芯片组，购买前需要问清楚。&lt;/p&gt;
&lt;p&gt;购买的时候，考虑芯片组的支持情况，Linux 内核版本等等因素，我最后购买了 Netgeat A6210 认证翻新版，使用芯片组 MT7612u，价格是 138 人民币。&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;p&gt;使用的 Linux 内核版本是 5.10，插上 USB 无线网卡即可使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ lsusb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Bus &lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt; Device 002: ID 0846:9053 NetGear, Inc. A6210
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在使用 iwd 的连接无线网的时候，还出现一个小插曲，就是 iwd 遇到很长的中文 SSID 时会崩溃，于是我进行了修复，并且发送给 iwd mailing list（&lt;a href=&#34;https://lore.kernel.org/iwd/20230226062526.3115588-1-c@jia.je/T/#u&#34;&gt;link&lt;/a&gt;），并等待修复。原理很简单，一是打印十六进制字符的时候没有考虑符号，二是缺少了缓冲区溢出的检查。&lt;/p&gt;
&lt;h2 id=&#34;realtek-上游-linux-内核驱动支持&#34;&gt;Realtek 上游 Linux 内核驱动支持&lt;/h2&gt;
&lt;p&gt;归功于 Sascha Hauer &lt;a href=&#34;mailto:s.hauer@pengutronix.de&#34;&gt;s.hauer@pengutronix.de&lt;/a&gt; 老哥，最近 Linux 上游增加了不少对 realtek 网卡的支持，因此只要系统足够新，realtek 的网卡也值得考虑，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RTL8723du: Linux 6.2+&lt;/li&gt;
&lt;li&gt;RTL8811cu: Linux 6.2+&lt;/li&gt;
&lt;li&gt;RTL8821cu: Linux 6.2+&lt;/li&gt;
&lt;li&gt;RTL8812bu: Linux 6.2+&lt;/li&gt;
&lt;li&gt;RTL8822bu: Linux 6.2+&lt;/li&gt;
&lt;li&gt;RTL8822cu: Linux 6.2+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RTL8188gu 也有正在 review 的 &lt;a href=&#34;https://patchwork.kernel.org/project/linux-wireless/patch/5a9a264d-a59b-0d91-04f0-e5b38e6aaea0@gmail.com/&#34;&gt;patch&lt;/a&gt;。经过我的测试也是工作的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Transport Layer Interface 考古</title>
      <link>https://jia.je/networking/2023/02/12/transport-layer-interface/</link>
      <pubDate>Sun, 12 Feb 2023 20:52:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2023/02/12/transport-layer-interface/</guid>
      <description>&lt;h2 id=&#34;transport-layer-interface&#34;&gt;Transport Layer Interface&lt;/h2&gt;
&lt;p&gt;现在网络编程主要采用的是 BSD Sockets API，但实际上当年还有另一套 API，就是 TLI（Transport Layer Interface），后来 BSD Sockets 胜出，进入了 POSIX 标准，TLI 后面也标准化为了 XTI，现在可以在部分 Unix 系统中找到。TLI/XTI 的使用方法和 Sockets API 有些类似，但是比较特别的一点在于，Sockets API 第一步是 &lt;code&gt;socket&lt;/code&gt; 调用，传的参数就决定了这是 TCP 还是 UDP 还是其他什么协议，而 TLI 是通过打开不同的设备文件来进行区分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t_open&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/dev/udp&amp;#34;&lt;/span&gt;, O_RDWR, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比如 TCP 就是 &lt;code&gt;/dev/tcp&lt;/code&gt;，UDP 就是 &lt;code&gt;/dev/udp&lt;/code&gt;，同理还有 &lt;code&gt;/dev/icmp&lt;/code&gt; 等等。这颇有 Unix 的哲学：everything is a file。而 BSD Sockets API 则是有对应的系统调用，libc 基本不需要做什么事情。&lt;/p&gt;
&lt;p&gt;沿着这个思路，既然 TLI 第一步是打开一个文件，难道后面的一系列的 bind、connect、send、recv 等操作也是对文件读写吗？是的！如果我们查看 illumos 的&lt;a href=&#34;https://github.com/illumos/illumos-gate/blob/46f52c84cb830d1636c093bd5c2d83074aeaf21c/usr/src/lib/libnsl/nsl/_conn_util.c#L76-L82&#34;&gt;源码&lt;/a&gt;，会发现 &lt;code&gt;t_connect&lt;/code&gt; 函数的核心实现是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	creq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; T_conn_req &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)ctlbufp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;buf;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	creq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;PRIM_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T_CONN_REQ;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	creq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;DEST_length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; call&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;addr.len;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	creq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;DEST_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	creq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;OPT_length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; call&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;opt.len;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	creq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;OPT_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;putmsg&lt;/span&gt;(fd, ctlbufp,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; strbuf &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(call&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;udata.len&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;call&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;udata: NULL), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		t_errno &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TSYSERR;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，这段在 libnsl 中的代码构造了一个结构体 &lt;code&gt;struct T_conn_req&lt;/code&gt;，然后通过 &lt;code&gt;putmsg&lt;/code&gt; 系统调用发送出去。可以预想，内核那边虚拟了一个 &lt;code&gt;/dev/tcp&lt;/code&gt; 设备，这个设备注册了 putmsg 的回调函数。在回调函数中，解析结构体的字段，然后执行相应的操作。用户调用 TLI 函数，然后 libnsl 负责把函数的参数封装成一个结构体，然后向 &lt;code&gt;t_open&lt;/code&gt; 打开的设备文件发送结构体的内容。内核和 libnsl 约定好了结构体，然后不同的操作根据结构体的 &lt;code&gt;PRIM_type&lt;/code&gt; 字段来区分。实际上，这个约定也是一个标准，叫做 TPI(Transport Provider Interface)。&lt;/p&gt;
&lt;h2 id=&#34;transport-provider-interface&#34;&gt;Transport Provider Interface&lt;/h2&gt;
&lt;p&gt;TPI(Transport Provider Interface) 约定了内核和 libnsl 之间的接口。内核和用户态之间互相发送消息，有点像 HTTP，一个请求过去，一个响应回来。只不过请求是“connect”或者“accept”等等。相比 Sockets API，确实绕了很多，首先要封装到 struct 里面，然后通过统一的读写 syscall 进入到内核，再解析一遍 struct，再做实际的操作。如果直接 syscall 的话，内核实现会比较简单，只不过不“Unix”了。实际上，如过你阅读 Illumos 源码，它在解析 struct 以后，也会转而执行相应的 Sockets 处理函数，然后把返回值再封装成 TLI 的响应，发送给用户程序。&lt;/p&gt;
&lt;p&gt;比较有意思的是，TPI 本身也是有状态的：Idle，Unbound，Data Transfer，等待 ACK 等等。所以如果你在 Solaris 上跑 netstat，会发现 UDP 也有状态（Idle/Unbound），那实际上不是 UDP 的状态，而是 TPI 的状态。正因此，我在维护 lsof 的时候，经常看到 TCP/TPI state，不明所以，才会研究 TPI 的历史，然后找到 TLI，才知道除了 Sockets 以外，还有一套 Unix 上的网络 API。有趣的是，TLI 是 System V 提供的，以前经常听到 System V ABI 的说法，却不知道 System V 是一个 Unix 操作系统，现在依然还可以在很多地方看到它的身影。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/9647699/toc.pdf&#34;&gt;Networking Services (XNS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.openss7.org/docs/tpi.pdf&#34;&gt;Transport Provider Interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT&lt;/h2&gt;
&lt;p&gt;问：What is Transport Layer Interface?&lt;/p&gt;
&lt;p&gt;答：The Transport Layer Interface (TLI) is an application programming interface (API) that provides a standard interface for communication between an application program and the transport layer protocols of a network. It was originally developed by AT&amp;amp;T for the Unix operating system and is now used in many other operating systems.&lt;/p&gt;
&lt;p&gt;The TLI provides a set of functions that allow applications to communicate with the transport layer protocols, such as TCP and UDP, in a network-independent manner. Applications can use TLI to establish connections, send and receive data, and manage network resources.&lt;/p&gt;
&lt;p&gt;One of the advantages of TLI is that it provides a layer of abstraction between the application and the transport layer protocols, which allows the application to be independent of the underlying network. This means that an application can be developed using TLI on one operating system and run on another operating system with different transport layer protocols.&lt;/p&gt;
&lt;p&gt;However, TLI is an older interface and has largely been replaced by newer interfaces such as the sockets API, which is now the de facto standard for network programming.&lt;/p&gt;
&lt;p&gt;问：What&amp;rsquo;s the relationship between Transport Layer Interface and Transport Provider Interface?&lt;/p&gt;
&lt;p&gt;答：The Transport Layer Interface (TLI) and Transport Provider Interface (TPI) are both application programming interfaces (APIs) that provide a standard way for applications to communicate with the transport layer protocols of a network. However, they are different interfaces that serve different purposes.&lt;/p&gt;
&lt;p&gt;TLI is an API that was developed by AT&amp;amp;T for the Unix operating system to provide a network-independent interface for applications to communicate with transport layer protocols such as TCP and UDP. It provides a set of functions that allow applications to establish connections, send and receive data, and manage network resources.&lt;/p&gt;
&lt;p&gt;On the other hand, TPI is an API that was developed by the X/Open consortium to provide a standard interface for communication between the transport layer protocols and network drivers or hardware. It provides a set of functions that allow transport providers to interact with network drivers or hardware and handle network-specific issues such as congestion control, flow control, and error handling.&lt;/p&gt;
&lt;p&gt;In other words, TLI is an interface for applications to communicate with the transport layer protocols, while TPI is an interface for transport providers to communicate with network drivers or hardware. The two interfaces are related in that TLI can be implemented using TPI, but they are distinct and serve different purposes in the network architecture.&lt;/p&gt;
&lt;p&gt;问：Please write a UDP echo server in Transport Layer Interface&lt;/p&gt;
&lt;p&gt;答：Sure, here is an example of a UDP echo server using the Transport Layer Interface (TLI) in C language:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;netdb.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;tiuser.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define BUFSIZE 1024
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define SERVICE_NAME &amp;#34;echo&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd, len, n;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; t_call call;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; t_unitdata ud;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; t_uderr uderr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; netbuf &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;recvbuf;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[BUFSIZE];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in servaddr, cliaddr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; hostent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;server;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; portno &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5001&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// can be any available port number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// create socket
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((sockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t_open&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/dev/udp&amp;#34;&lt;/span&gt;, O_RDWR, NULL)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t_open&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// bind socket to port
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;servaddr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(servaddr));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    servaddr.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    servaddr.sin_addr.s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INADDR_ANY;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    servaddr.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htons&lt;/span&gt;(portno);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t_bind&lt;/span&gt;(sockfd, NULL, NULL) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t_bind&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// listen for incoming requests
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;call, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(call));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cliaddr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cliaddr));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ud, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ud));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        call.addr.buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cliaddr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        call.addr.maxlen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cliaddr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        call.addr.len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        call.opt.len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        call.udata.len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// receive message
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        recvbuf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; netbuf &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;t_alloc&lt;/span&gt;(sockfd, T_UNITDATA, T_ALL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t_rcvudata&lt;/span&gt;(sockfd, recvbuf, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ud, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;uderr) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t_rcvudata&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;memcpy&lt;/span&gt;(buf, recvbuf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;buf, recvbuf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;len);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        buf[recvbuf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;len] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buf);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// send message back to client
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        ud.udata.buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buf;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ud.udata.len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; recvbuf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;len;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ud.addr.buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cliaddr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ud.addr.len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cliaddr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ud.addr.maxlen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cliaddr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t_sndudata&lt;/span&gt;(sockfd, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ud) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t_sndudata&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This UDP echo server listens on a specific port and waits for incoming messages from clients. When it receives a message, it sends the same message back to the client as a response. Note that this example assumes that the TLI library is already installed on your system, and the program is compiled with the appropriate TLI library flags.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenBSD xonly 实现原理</title>
      <link>https://jia.je/system/2023/02/07/openbsd-xonly/</link>
      <pubDate>Tue, 07 Feb 2023 21:57:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2023/02/07/openbsd-xonly/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近看到 &lt;a href=&#34;https://marc.info/?l=openbsd-tech&amp;amp;m=167501519712725&amp;amp;w=2&#34;&gt;xonly status&lt;/a&gt;，看到 OpenBSD 最近在实现 xonly，也就是让一些页只能执行，不能读不能写。以往类似的做法是 &lt;code&gt;W^X&lt;/code&gt;，也就是可以执行的时候不能写，可以写的时候不能执行。显然，xonly 是更加严格的，连读都不可以。查了一下历史，&lt;code&gt;W^X&lt;/code&gt; 最早也是在 OpenBSD 中实现的，说不定以后 xonly 也会被各个操作系统实现。&lt;/p&gt;
&lt;h2 id=&#34;amd64-上的实现&#34;&gt;amd64 上的实现&lt;/h2&gt;
&lt;p&gt;在 amd64 的页表中，决定执行/读/写权限的是（见 Intel 文档 &lt;code&gt;Table 4-20. Format of a Page-Table Entry that Maps a 4-KByte Page&lt;/code&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bit 1(R/W): &lt;code&gt;Read/write; if 0, writes may not be allowed to the 4-KByte page referenced by this entry (see Section 4.6)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Bit 63(XD): &lt;code&gt;If IA32_EFER.NXE = 1, execute-disable (if 1, instruction fetches are not allowed from the 4-KByte page controlled by this entry; see Section 4.6); otherwise, reserved (must be 0)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，在这个定义下，可能出现的权限组合：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;R&lt;/th&gt;
&lt;th&gt;W&lt;/th&gt;
&lt;th&gt;X&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;R/W=0, NXE=0&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R/W=1, NXE=0&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R/W=0, NXE=1, XD=0&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R/W=1, NXE=1, XD=0&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R/W=0, NXE=1, XD=1&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R/W=1, NXE=1, XD=1&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;需要注意的是，&lt;code&gt;IA32_EFER.NXE&lt;/code&gt; 是全局的，而 &lt;code&gt;R/W&lt;/code&gt; 和 &lt;code&gt;XD&lt;/code&gt; 的粒度是页。可以看到，上面的所有组合中，都是可以读的。&lt;/p&gt;
&lt;p&gt;那么，怎么实现 x-only 呢？OpenBSD 的实现方法是 Protection Keys。在比较新的 CPU 中，页表的 4 个位用来表示使用的 Protection Key 下标，一共有 16 个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bits 62:59: &lt;code&gt;Protection key; if CR4.PKE = 1 or CR4.PKS = 1, this may control the page&#39;s access rights (see Section 4.6.2); otherwise, it is ignored and not used to control access rights.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么 CPU 在查页表的时候，如果 &lt;code&gt;CR4.PKE=1 or CR4.PKS=1&lt;/code&gt;，就会根据这四个位去查找 PKRU 寄存器的取值。PKRU 是一个 32 位的寄存器，每两位对应一个 Protection Key，这两位表示是否允许读写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The PKRU register (protection-key rights for user pages) is a 32-bit
register with the following format: for each i (0 ≤ i ≤ 15), PKRU[2i] is
the access-disable bit for protection key i (ADi); PKRU[2i+1] is the
write-disable bit for protection key i (WDi). The IA32_PKRS MSR has the
same format (bits 63:32 of the MSR are reserved and must be zero).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有了这个机制以后，就可以构造出 xonly 的页表项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R/W=0：不允许写&lt;/li&gt;
&lt;li&gt;NXE=1, XD=0：允许执行&lt;/li&gt;
&lt;li&gt;设置 62:59 位为一个 Key 编号，将对应的 PKRU 的两个位设为 1：不允许读，不允许写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来看 OpenBSD 的&lt;a href=&#34;https://github.com/openbsd/src/commit/e9e0c464329db9b56e1f2db65b0f536e53aa7e5f#diff-ab04285d8fd81f41887d9c9de2eb231be5e44c2d465f5c479943a1e21cf977ce&#34;&gt;代码&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;首先，检测 CPU 是否支持 PKU 机制：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * If PKU is available, initialize PROT_EXEC entry correctly,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * and enable the feature before it gets used
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * XXX Some Hypervisors forget to save/restore PKU
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cpuid_level &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; ecx, dummy;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	CPUID_LEAF(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, dummy, dummy, ecx, dummy);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((ecx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SEFF0ECX_PKU) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    (cpu_ecxfeature &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; CPUIDECX_HV) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		lcr4(rcr4() &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; CR4_PKE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		pg_xo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PG_XO;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;PG_XO&lt;/code&gt; 的值是 &lt;code&gt;0x0800000000000000UL&lt;/code&gt;，也就是只有 bit 59 位 1，对应 Protection Key #1。OpenBSD 内核设置 PKRU 寄存器为 &lt;code&gt;0xfffffffc&lt;/code&gt;，即只有 Protection Key #0 不修改权限，其他 Protection Key 都是禁止读写。剩下的代码就是维护 PKRU 寄存器的取值，然后把 xonly 的页的 Protection Key 都设为 1，否则设为 0。&lt;/p&gt;
&lt;p&gt;但需要注意的是，PKRU 寄存器用户态也可以读写。Linux 把 PKRU 暴露给了&lt;a href=&#34;https://www.kernel.org/doc/html/latest/core-api/protection-keys.html&#34;&gt;用户态&lt;/a&gt;，允许用户态来自己设置页表的 Protection Key。OpenBSD 的实现方法则是进内核以后，检查 PKRU 寄存器，如果值修改了，就 SIGABRT。这有一定的风险，如果攻击代码修改了 PKRU 寄存器的内容，是有可能读取本来 xonly 的页的内容的。&lt;/p&gt;
&lt;h2 id=&#34;powerpc64-上的实现&#34;&gt;powerpc64 上的实现&lt;/h2&gt;
&lt;p&gt;powerpc64 的实现方法和 amd64 类似，见 &lt;a href=&#34;https://github.com/openbsd/src/commit/6bd9427e6879f79e0e2c1e03d8411439da5bb69&#34;&gt;commit&lt;/a&gt;。机制和 AMD64 很像，下面引用一段 PowerISA 文档：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The Virtual Page Class Key Protection mechanism provides the means to
assign virtual pages to one of 32 classes, and to modify data access
permissions for each class by modifying the Authority Mask Register
(AMR), shown in Figure 28, and to modify instruction access permissions
for each class by modifying the Instruction Authority Mask Register
(IAMR) shown in Figure 29.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对应如下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// sys/arch/powerpc64/powerpc64/cpu.c
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * Set AMR to inhibit loads and stores for all virtual page
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * class keys, except for Key0 which is used for normal kernel
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * access.  This means we can pick any other key to implement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * execute-only mappings.  But we pick Key1 since that allows
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * us to use the same bit in the PTE as was used to enable the
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * Data Access Compare mechanism on CPUs based on older
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * versions of the architecture (such as the PowerPC 970).
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * Set UAMOR (and AMOR just to be safe) to zero to prevent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * userland from modifying any bits in AMR.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mtamr&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x3fffffffffffffff&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mtuamor&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mtamor&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;isync&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到方法是一样的，Key0 正常，其他 Key 禁止读写。额外地，PowerISA 还可以设置 Protection Key 禁止执行。并且通过设置 UAMOR 寄存器，用户态不可以修改 AMR 寄存器，这让 xonly 比 AMD64 上更为完备。&lt;/p&gt;
&lt;p&gt;最后一步，就是修改 PTE 属性，指定 Key 即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// sys/arch/powerpc64/include/pte.h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PTE_AC			0x0000000000000200ULL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// sys/arch/powerpc64/powerpc64/pmap.c
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((prot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (PROT_READ &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PROT_WRITE)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		pte&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pte_lo &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; PTE_AC;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;其他指令集架构&#34;&gt;其他指令集架构&lt;/h2&gt;
&lt;p&gt;一些指令集架构的页表在设计的时候，就有独立的 R W X 权限位，于是不需要特殊的处理，直接把 mmap 的参数映射过去即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solaris 11.4 安装</title>
      <link>https://jia.je/system/2023/02/03/solaris/</link>
      <pubDate>Fri, 03 Feb 2023 12:26:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2023/02/03/solaris/</guid>
      <description>&lt;h2 id=&#34;下载安装镜像&#34;&gt;下载安装镜像&lt;/h2&gt;
&lt;p&gt;访问 &lt;a href=&#34;https://www.oracle.com/solaris/solaris11/downloads/solaris-downloads.html&#34;&gt;https://www.oracle.com/solaris/solaris11/downloads/solaris-downloads.html&lt;/a&gt;，点击下载，登录后跳转到一个新的页面。在 Platform 下拉框选择 x86，会出现一系列可以下载的文件。以 11.4.42.111.0 为例，需要下载的是：V1019840-01.iso Oracle Solaris 11.4.42.111.0 Interactive Text Install ISO (x86) for (Oracle Solaris on x86-64 (64-bit)), 890.5 MB。可以直接在浏览器中下载，也可以点击网页中的 WGET Options，用 wget 脚本下载。&lt;/p&gt;
&lt;p&gt;下载以后，挂载 ISO 到虚拟机，正常按照指示进行安装&lt;/p&gt;
&lt;h2 id=&#34;配置软件源&#34;&gt;配置软件源&lt;/h2&gt;
&lt;p&gt;Solaris 的在线软件源需要订阅，如果不想订阅，需要下载和 Solaris &lt;strong&gt;版本一致&lt;/strong&gt; 的 IPS 仓库。下载的地址和上面一样，需要 7 个 zip 文件，如 V1019847-01_1of7.zip Oracle Solaris 11.4.42.111.0 IPS Repository (SPARC, x86) for (Oracle Solaris on x86-64 (64-bit)), 2.2 GB。建议用 wget 脚本批量下载。&lt;/p&gt;
&lt;p&gt;UPDATE: 根据 &lt;a href=&#34;https://blogs.oracle.com/solaris/post/building-open-source-software-on-oracle-solaris-114-cbe-release&#34;&gt;https://blogs.oracle.com/solaris/post/building-open-source-software-on-oracle-solaris-114-cbe-release&lt;/a&gt;，实际上可以不下载 IPS 仓库，而是用在线的仓库，内容和下载的一致：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo pkg set-publisher -G &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; -g http://pkg.oracle.com/solaris/release/ solaris
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下载好了以后，全部解压到一个目录中，如 &lt;code&gt;/export/home/user/solaris&lt;/code&gt;，然后启动本地的软件源服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo svccfg -s application/pkg/server setprop pkg/inst_root&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/export/home/user/solaris
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo svccfg -s application/pkg/server setprop pkg/readonly&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo svccfg -s application/pkg/server setprop pkg/port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8081&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo svcadm refresh application/pkg/server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo svcadm enable application/pkg/server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后配置 &lt;code&gt;pkg&lt;/code&gt; 使用本地软件源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo pkg set-publisher -G &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; -g http://localhost:8081 solaris
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后就可以正常使用了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo pkg install gcc-11
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;命令参考：&lt;a href=&#34;https://www.oracle.com/docs/tech/solaris-11-cheat-sheet.pdf&#34;&gt;https://www.oracle.com/docs/tech/solaris-11-cheat-sheet.pdf&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FreeBSD/NetBSD/OpenBSD/DragonFlyBSD Cookbook</title>
      <link>https://jia.je/system/2023/01/21/bsd-cookbook/</link>
      <pubDate>Sat, 21 Jan 2023 20:18:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2023/01/21/bsd-cookbook/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在维护 lsof 的时候，需要在 FreeBSD/NetBSD/OpenBSD/DragonFlyBSD 上进行开发和测试，于是就装了虚拟机，特此记录我在使用过程中，与 Linux 不一样的一些常用 FreeBSD/NetBSD/OpenBSD/DragonFlyBSD 命令。&lt;/p&gt;
&lt;h2 id=&#34;freebsd&#34;&gt;FreeBSD&lt;/h2&gt;
&lt;p&gt;文档参考：&lt;a href=&#34;https://docs.freebsd.org/en/books/handbook&#34;&gt;https://docs.freebsd.org/en/books/handbook&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;在 &lt;a href=&#34;https://www.freebsd.org/where/&#34;&gt;https://www.freebsd.org/where/&lt;/a&gt; 找到最新版下载，对于虚拟机的需求，用 &lt;code&gt;-disk1.iso&lt;/code&gt;，1 GB 左右。安装过程按照 UI 一步步走即可。&lt;/p&gt;
&lt;h3 id=&#34;root-权限&#34;&gt;root 权限&lt;/h3&gt;
&lt;p&gt;FreeBSD 的 su 默认只有 wheel 组可以 su 到 root，所以安装的时候，建议给创建的帐号加上 wheel 组。也可以通过 pw 命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pw groupmod wheel -m freebsd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;sudo 需要通过包管理器安装，用法和 Linux 一样。&lt;/p&gt;
&lt;h3 id=&#34;包管理&#34;&gt;包管理&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;pkg&lt;/code&gt; 命令进行包管理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg install -U sudo vim fish
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-U&lt;/code&gt; 表示在 install 的时候不要再 update。&lt;/p&gt;
&lt;p&gt;也可以从 Ports 源码编译，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://git.FreeBSD.org/ports.git /usr/ports
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /usr/ports/sysutils/lsof
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;升级&#34;&gt;升级&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;freebsd-update&lt;/code&gt; 命令升级：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;freebsd-update fetch
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;freebsd-update install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;网络配置&#34;&gt;网络配置&lt;/h3&gt;
&lt;p&gt;显示路由表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;netstat -nr
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改路由：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ip route add 1.2.3.0/24 via 4.5.6.7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;route add -net 1.2.3.0/24 4.5.6.7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ip route del 1.2.3.0/24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;route delete -net 1.2.3.0/24
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;网络接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ip a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ifconfig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ip link set dev abc up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ifconfig abc up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ip a add 1.2.3.4/24 dev abc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iconfig abc inet 1.2.3.4/24
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;网路配置在 &lt;code&gt;/etc/rc.conf&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# DHCP
ifconfig_xxx=&amp;#34;DHCP&amp;#34;
# Default Gateway
defaultrouter=&amp;#34;1.2.3.4&amp;#34;
# Static IP
ifconfig_xxx=&amp;#34;inet 1.2.3.4/24&amp;#34;
# Static route
static_routes=&amp;#34;name1 name2&amp;#34;
route_name1=&amp;#34;-net 1.2.3.0/24 4.5.6.7&amp;#34;
route_name2=&amp;#34;-net 3.2.1.0/24 7.6.5.4&amp;#34;
# Bridge
cloned_interfaces=&amp;#34;bridge0&amp;#34;
ifconfig_bridge0=&amp;#34;addm net0 addm net1 up&amp;#34;
ifconfig_net0=&amp;#34;up&amp;#34;
ifconfig_net1=&amp;#34;up&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;换源&#34;&gt;换源&lt;/h3&gt;
&lt;p&gt;USTC &lt;a href=&#34;https://mirrors.ustc.edu.cn/help/freebsd-pkg.html&#34;&gt;https://mirrors.ustc.edu.cn/help/freebsd-pkg.html&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p /usr/local/etc/pkg/repos/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FreeBSD: { url: &amp;#34;pkg+http://mirrors.ustc.edu.cn/freebsd-pkg/${ABI}/quarterly&amp;#34; }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        &amp;gt; /usr/local/etc/pkg/repos/FreeBSD.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;truss&#34;&gt;truss&lt;/h3&gt;
&lt;p&gt;truss 相当于 Linux 中的 strace。&lt;/p&gt;
&lt;h3 id=&#34;编译内核&#34;&gt;编译内核&lt;/h3&gt;
&lt;p&gt;文档：&lt;a href=&#34;https://docs.freebsd.org/en/books/handbook/kernelconfig/&#34;&gt;https://docs.freebsd.org/en/books/handbook/kernelconfig/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先下载内核源码，然后创建内核配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /path/to/kernel/src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd sys/amd64/conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp GENERIC MYKERNEL
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译和安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make buildkernel KERNCONF&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;MYKERNEL
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make installkernel KERNCONF&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;MYKERNEL
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;提交 patch：&lt;a href=&#34;https://wiki.freebsd.org/Phabricator&#34;&gt;https://wiki.freebsd.org/Phabricator&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;关机&#34;&gt;关机&lt;/h3&gt;
&lt;p&gt;FreeBSD 的 shutdown 默认会停留在 halt 的状态，但是不会断电，需要添加 &lt;code&gt;-p&lt;/code&gt; 选项。&lt;/p&gt;
&lt;h2 id=&#34;netbsd&#34;&gt;NetBSD&lt;/h2&gt;
&lt;h3 id=&#34;包管理-1&#34;&gt;包管理&lt;/h3&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://www.netbsd.org/docs/pkgsrc/using.html&#34;&gt;https://www.netbsd.org/docs/pkgsrc/using.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 pkgin 做二进制包的包管理，首先安装 pkgin：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/pkg/sbin:/usr/pkg/bin:&lt;/span&gt;$PATH&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PKG_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdn.NetBSD.org/pub/pkgsrc/packages&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PKG_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PKG_PATH&lt;span style=&#34;color:#e6db74&#34;&gt;/NetBSD/amd64/9.3/All/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export PATH PKG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg_add pkgin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;包管理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkgin install sudo vim fish
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkgin upgrade
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和 FreeBSD 一样，NetBSD 的 su 默认只有 wheel 组可以 su 到 root，建议在安装创建新用户的时候就把自己的帐号加入到 wheel 组中。sudo 使用之前需要 visudo 修改配置。&lt;/p&gt;
&lt;p&gt;也可以从源码 pkgsrc 进行编译，在 /usr/pkgsrc 路径下，编译好的程序会安装到 /usr/pkg/bin。&lt;/p&gt;
&lt;p&gt;克隆并初始化 pkgsrc：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /usr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cvs -q -z2 -d anoncvs@anoncvs.NetBSD.org:/cvsroot checkout -P pkgsrc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /usr/pkgsrc/bootstrap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./bootstrap
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译 pkgsrc 中的软件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /usr/pkgsrc/sysutils/lsof
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;网络配置-1&#34;&gt;网络配置&lt;/h3&gt;
&lt;p&gt;网络配置的命令和 FreeBSD 基本一样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;netstat -nr&lt;/code&gt;：查看路由表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;route&lt;/code&gt;：修改路由表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ifconfig&lt;/code&gt;：配置网络接口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是 &lt;code&gt;/etc/rc.conf&lt;/code&gt; 的配置语法不同，见 &lt;code&gt;man rc.conf&lt;/code&gt; 和 &lt;a href=&#34;https://www.netbsd.org/docs/network/#configuration_files&#34;&gt;https://www.netbsd.org/docs/network/#configuration_files&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;升级-1&#34;&gt;升级&lt;/h3&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://www.netbsd.org/docs/guide/en/chap-upgrading.html&#34;&gt;https://www.netbsd.org/docs/guide/en/chap-upgrading.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 sysupgrade 命令升级：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pkgin install sysupgrade
sysupgrade auto https://cdn.NetBSD.org/pub/NetBSD/NetBSD-9.3/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;安装内核源码&#34;&gt;安装内核源码&lt;/h3&gt;
&lt;p&gt;内核源码可以从 &lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/NetBSD/NetBSD-9.3/source/sets/&#34;&gt;https://mirrors.tuna.tsinghua.edu.cn/NetBSD/NetBSD-9.3/source/sets/&lt;/a&gt; 下载。对于 lsof 只需要其中的 syssrc.tgz。&lt;/p&gt;
&lt;p&gt;解压：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -xzf syssrc.tgz -C /
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;openbsd&#34;&gt;OpenBSD&lt;/h2&gt;
&lt;h3 id=&#34;安装-1&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;文档：&lt;a href=&#34;https://www.openbsd.org/faq/faq4.html&#34;&gt;https://www.openbsd.org/faq/faq4.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载 &lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/OpenBSD/7.2/amd64/install72.iso&#34;&gt;https://mirrors.tuna.tsinghua.edu.cn/OpenBSD/7.2/amd64/install72.iso&lt;/a&gt;，然后按照 UI 提示进行安装。使用 virt-manager 安装 OpenBSD 虚拟机的时候，在安装界面会遇到无法输入的问题，可以创建一个 USB Keyboard 来解决。&lt;/p&gt;
&lt;h3 id=&#34;包管理-2&#34;&gt;包管理&lt;/h3&gt;
&lt;p&gt;文档：&lt;a href=&#34;https://www.openbsdhandbook.com/package_management/&#34;&gt;https://www.openbsdhandbook.com/package_management/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;常用命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Use TUNA Mirrors&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://mirrors.tuna.tsinghua.edu.cn/OpenBSD/&amp;#34;&lt;/span&gt; &amp;gt; /etc/installurl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Search&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg_info -Q fish
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg_add sudo fish vim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Update packages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg_add -u
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另一个方法是从源码编译，首先下载 ports：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://mirrors.tuna.tsinghua.edu.cn/OpenBSD/7.2/ports.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /usr/src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar xzf /path/to/ports.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;系统升级&#34;&gt;系统升级&lt;/h3&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://www.openbsdhandbook.com/system_management/updates/&#34;&gt;https://www.openbsdhandbook.com/system_management/updates/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;syspatch -c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;syspatch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;autotools&#34;&gt;autotools&lt;/h3&gt;
&lt;p&gt;OpenBSD 允许存在多个版本的 autoconf/automake，所以在运行的时候需要用环境变量指定版本，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AUTOCONF_VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2.71
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AUTOMAKE_VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1.16
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;获取内核源码&#34;&gt;获取内核源码&lt;/h3&gt;
&lt;p&gt;文档：&lt;a href=&#34;https://www.openbsd.org/faq/faq5.html&#34;&gt;https://www.openbsd.org/faq/faq5.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add exampleuser to group wsrc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user mod -G wsrc exampleuser
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Download and extract&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://mirrors.tuna.tsinghua.edu.cn/OpenBSD/7.2/sys.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /usr/src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar xzf /path/to/sys.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ktrace&#34;&gt;ktrace&lt;/h3&gt;
&lt;p&gt;ktrace 相当于 Linux 中的 strace。结果会保存在文件中，用 kdump 命令显示。&lt;/p&gt;
&lt;h2 id=&#34;dragonflybsd&#34;&gt;DragonFlyBSD&lt;/h2&gt;
&lt;h3 id=&#34;安装-2&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;下载 ISO 文件：&lt;a href=&#34;https://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-6.4.0_REL.iso&#34;&gt;https://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-6.4.0_REL.iso&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用 installer 用户登录开始安装。&lt;/p&gt;
&lt;h3 id=&#34;用户管理&#34;&gt;用户管理&lt;/h3&gt;
&lt;p&gt;和 FreeBSD 一样，su 需要 wheel 组，所以需要手动添加用户到 wheel 组中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pw groupmod wheel -m username
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sshd&#34;&gt;SSHD&lt;/h3&gt;
&lt;p&gt;DragonFlyBSD 默认 sshd 配置不允许密码登录，如果要允许，需要修改 &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;，然后重启 ssh：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/etc/rc.d/sshd restart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;包管理-3&#34;&gt;包管理&lt;/h3&gt;
&lt;p&gt;DragonFlyBSD 可以下载二进制包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg upgrade
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg install sudo vim fish
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以从源码编译，见 &lt;a href=&#34;https://www.dragonflybsd.org/docs/howtos/HowToDPorts/&#34;&gt;https://www.dragonflybsd.org/docs/howtos/HowToDPorts/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 FreeBSD 上运行 code-server</title>
      <link>https://jia.je/software/2023/01/13/vscode-server-on-freebsd/</link>
      <pubDate>Fri, 13 Jan 2023 19:23:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2023/01/13/vscode-server-on-freebsd/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在 FreeBSD 上移植开源软件，但是因为 vscode 官方不支持 FreeBSD，所以尝试使用 code-server&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;p&gt;首先按照官方文档安装 code-server：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -fsSL https://code-server.dev/install.sh | sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动 code-server：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code-server --bind-addr 0.0.0.0:8080
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是很快你会发现，运行日志中会报告很多错误，缺少了一些包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo npm i -g yazl yauzl @microsoft/1ds-core-js vscode-regexpp xterm-headless vscode-proxy-agent --unsafe-perm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到这里就能在网页里看到 UI 了，但是发现很多功能都不工作。例如搜索的时候，会告诉你找不到 rg，是因为 ripgrep 没有提供 FreeBSD 的 prebuilt binary，但是可以用 pkg 安装：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo pkg install ripgrep
cd /usr/local/lib/node_modules/@vscode/ripgrep/bin &amp;amp;&amp;amp; ln -s /usr/local/bin/rg
cd /usr/local/lib/node_modules/code-server/lib/vscode/node_modules/@vscode/ripgrep/bin &amp;amp;&amp;amp; ln -s /usr/local/bin/rg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，日志中会显示 @parcel/watcher 启动失败，显示 Undefined symbol，这是因为这个库没有做 FreeBSD 支持。需要使用 &lt;a href=&#34;https://github.com/parcel-bundler/watcher/pull/128&#34;&gt;https://github.com/parcel-bundler/watcher/pull/128&lt;/a&gt; 版本，编译出 watcher.node 文件，替换：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd watcher
npm install
sudo cp build/Release/watcher.node /usr/local/lib/node_modules/@parcel/watcher/build/Release/
sudo cp build/Release/watcher.node /usr/local/lib/node_modules/code-server/lib/vscode/node_modules/@parcel/watcher/build/Release/watcher.node
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就解决了 watcher 的问题。&lt;/p&gt;
&lt;p&gt;最后一个问题是无法打开 Terminal，因为在 VSCode 代码中，检测到不支持的 Platform 的时候，会抛出异常：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[IPC Library: Pty Host] The factory function of &amp;#34;vs/platform/terminal/node/ptyHostMain&amp;#34; has thrown an exception
[IPC Library: Pty Host] Error: Platform not supported
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以修改源码：&lt;code&gt;sudo vim /usr/local/lib/node_modules/code-server/lib/vscode/out/vs/platform/terminal/node/ptyHostMain.js&lt;/code&gt; 把这个检查改掉，例如替换 linux 为 freebsd，当成 linux 来检测。&lt;/p&gt;
&lt;p&gt;接下来的问题和 &lt;a href=&#34;https://github.com/coder/code-server/issues/5760&#34;&gt;https://github.com/coder/code-server/issues/5760&lt;/a&gt; 一致，安装依赖，重新 &lt;code&gt;npm install&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo pkg install libsecret pkgconf
cd /usr/local/lib/node_modules/code-server
sudo npm install --unsafe-perm
# go back to @parcel/watcher
cd watcher
sudo cp build/Release/watcher.node /usr/local/lib/node_modules/code-server/lib/vscode/node_modules/@parcel/watcher/build/Release
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完成这些步骤以后，Terminal 也正常了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CHI 学习笔记</title>
      <link>https://jia.je/hardware/2023/01/12/chi-notes/</link>
      <pubDate>Thu, 12 Jan 2023 00:10:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/01/12/chi-notes/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/cache_coherence_protocol.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;chi-介绍&#34;&gt;CHI 介绍&lt;/h2&gt;
&lt;p&gt;CHI 协议是 AMBA 5 标准中的缓存一致性协议，前身是 ACE 协议。最新的 CHI 标准可以从 &lt;a href=&#34;https://developer.arm.com/documentation/ihi0050/latest&#34;&gt;AMBA 5 CHI Architecture Specification&lt;/a&gt; 处下载。&lt;/p&gt;
&lt;p&gt;相比 AXI，CHI 更加复杂，进行了分层：协议层，物理层和链路层。因此，CHI 适用于片上网络，支持根据 Node ID 进行路由，而不像 AXI 那样只按照物理地址进行路由。CHI 的地位就相当于 Intel 的环形总线。CHI 也可以桥接到 CCIX 上，用 CCIX 连接 SMP 的的多个 Socket，或者连接支持 CCIX 的显卡等等。&lt;/p&gt;
&lt;h2 id=&#34;缓存行状态&#34;&gt;缓存行状态&lt;/h2&gt;
&lt;p&gt;首先回顾 ACE 的缓存行状态，共有五种，与 MOESI 相对应：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UniqueDirty: Modified&lt;/li&gt;
&lt;li&gt;SharedDirty: Owned&lt;/li&gt;
&lt;li&gt;UniqueClean: Exclusive&lt;/li&gt;
&lt;li&gt;SharedClean: Shared&lt;/li&gt;
&lt;li&gt;Invalid: Invalid&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在此基础上，CHI 考虑缓存行只有部分字节有效的情况，即 Full，Partial 或者 Empty。因此 CHI 的缓存行状态共有七种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UniqueDirty: Modified&lt;/li&gt;
&lt;li&gt;UniqueDirtyPartial: 新增，可能有部分字节合法，在写回的时候，需要和下一级缓存或者内存中的合法缓存行内容进行合并&lt;/li&gt;
&lt;li&gt;SharedDirty: Owned&lt;/li&gt;
&lt;li&gt;UniqueClean: Exclusive&lt;/li&gt;
&lt;li&gt;UniqueCleanEmpty: 新增，所有字节都不合法，但是本缓存占有该缓存行，如果要修改的话，不需要通知其他缓存&lt;/li&gt;
&lt;li&gt;SharedClean: Shared&lt;/li&gt;
&lt;li&gt;Invalid: Invalid&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，比较特别的就是 UniqueDirtyPartial 和 UniqueCleanEmpty。CHI 标准在 4.1.1 章节给出了使用场景：如果一个 CPU 即将要写入一片内存，那么可以先转换到 UniqueCleanEmpty 状态中，把其他缓存中的数据都清空，这样后续写入的时候，不需要询问其他缓存，性能比较好。但此时因为数据还没写进去，所以就是 Empty，只更新状态，不占用缓存的空间。另一方面，如果 CPU 只写了缓存行的一部分字节，其他部分没有碰，那么引入 UniqueDirtyPartial 以后，可以把合并新旧缓存行数据这一步，下放到比较靠近内存的层级上，减少了数据搬运的次数。&lt;/p&gt;
&lt;h2 id=&#34;chi-网络节点&#34;&gt;CHI 网络节点&lt;/h2&gt;
&lt;p&gt;CHI 的节点组织成一个网络，可能是片上网络，也可能是片间的连接。CHI 的节点分成三种类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Request Node：发起 CHI 请求的节点，对应 CPU 的缓存，或者是网卡等外设&lt;/li&gt;
&lt;li&gt;Home Node：管理 Request Node 来的请求，对应最后一级缓存&lt;/li&gt;
&lt;li&gt;Subordinate Node：处理 Home Node 来的请求，对应内存或者显存等有内存的外设&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这种设计下，Node 之间可以互相通信，因此方便做一些新的优化。例如传统的缓存层次里，请求是一级一级下去，响应再一级一级上来。但是 CHI 可能是 Request Node 发给 Home Node 的请求，响应直接由 Subordinate Node 发送回 Request Node 了。&lt;/p&gt;
&lt;h2 id=&#34;读请求&#34;&gt;读请求&lt;/h2&gt;
&lt;p&gt;CHI 提供了复杂性的同时，也带来了很多的灵活性，也意味着潜在的性能优化的可能。例如在 CHI 中实现一个读操作，可能有很多种过程（CHI 标准第 2.3.1 章节）：&lt;/p&gt;
&lt;p&gt;第一种是 Home Node 直接提供了数据（Combined response from home）：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    Requester-&gt;&gt;Home: Read*
    Home-&gt;&gt;Requester: CompData
    Requester-&gt;&gt;Home: CompAck
&lt;/div&gt;
&lt;p&gt;第二种是 Home Node 把响应拆成两份，一份表示读取结果，一份携带读取的数据（Separate data and response from Home）：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    Requester-&gt;&gt;Home: Read*
    Home-&gt;&gt;Requester: RespSepData
    Home-&gt;&gt;Requester: DataSepResp
    Requester-&gt;&gt;Home: CompAck
&lt;/div&gt;
&lt;p&gt;第三种是 Home Node 没有数据，转而询问 Subordinate，Subordinate 把结果直接发回给了 Requester（Combined response from Subordinate）：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    participant Subordinate
    Requester-&gt;&gt;Home: Read*
    Home-&gt;&gt;Subordinate: ReadNoSnp
    Subordinate-&gt;&gt;Requester: CompData
    Requester-&gt;&gt;Home: CompAck
&lt;/div&gt;
&lt;p&gt;第四种是 Home Node 没有数据，转而询问 Subordinate，但这次提前告诉 Requester 读取的结果，最后 Subordinate 把结果发回给了 Requester（Response from Home, Data from Subordinate）：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    participant Subordinate
    Requester-&gt;&gt;Home: Read*
    Home-&gt;&gt;Requester: RespSepData
    Home-&gt;&gt;Subordinate: ReadNoSnpSep
    Subordinate-&gt;&gt;Home: ReadReceipt
    Subordinate-&gt;&gt;Requester: DataSepResp
    Requester-&gt;&gt;Home: CompAck
&lt;/div&gt;
&lt;p&gt;第五种是数据在其他的 Requester Node 中，此时 Home 负责 Snoop（Forwarding snoop）：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    participant Snoopee
    Requester-&gt;&gt;Home: Read*
    Home-&gt;&gt;Snoopee: Snp*Fwd
    Snoopee-&gt;&gt;Requester: CompData
    Snoopee-&gt;&gt;Home: SnpRespFwded
    Requester-&gt;&gt;Home: CompAck
&lt;/div&gt;
&lt;p&gt;第六种是 MakeReadUnique，此时只更新权限，不涉及数据的传输（MakeReadUnique only）：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    Requester-&gt;&gt;Home: MakeReadUnique
    Home-&gt;&gt;Requester: Comp
    Requester-&gt;&gt;Home: CompAck
&lt;/div&gt;
&lt;h2 id=&#34;写请求&#34;&gt;写请求&lt;/h2&gt;
&lt;p&gt;CHI 标准第 2.3.2 描述了写请求的流程。和读请求一样，写请求也有很多类型，下面进行介绍。与读请求不同的点在于，写入的时候，并不是直接把写入的地址和数据等一次性发送过去，而是先发一个写消息，对方回复可以发送数据了（DBIDResp），再把实际的数据传输过去（NCBWrData）。当然了，也可以中途反悔（WriteDataCancel）。&lt;/p&gt;
&lt;p&gt;第一种是 Direct Write-data Transfer，意思是数据要从 Requester 直接传到 Subordinate 上：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    participant Subordinate
    Requester-&gt;&gt;Home: Write*
    Home-&gt;&gt;Subordinate: Write*
    Subordinate-&gt;&gt;Requester: DBIDResp
    Requester-&gt;&gt;Subordinate: NCBWrData/WriteDataCancel
    Subordinate-&gt;&gt;Home: Comp
    Home-&gt;&gt;Requester: Comp
&lt;/div&gt;
&lt;p&gt;第二种比较常规，就是把数据写给 Home Node，其中 Comp 表示读取结果，DBIDResp 表示可以发写入的内容了：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    Requester-&gt;&gt;Home: Write*
    Home-&gt;&gt;Requester: DBIDResp/DBIDRespOrd
    Home-&gt;&gt;Requester: Comp
    Requester-&gt;&gt;Home: NCBWrData/WriteDataCancel
&lt;/div&gt;
&lt;p&gt;第三种是把第二种的 DBIDResp 和 Comp 合并成一个响应：&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant Requester
    participant Home
    Requester-&gt;&gt;Home: Write*
    Home-&gt;&gt;Requester: CompDBIDResp
    Requester-&gt;&gt;Home: NCBWrData/WriteDataCancel
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Intel 处理器</title>
      <link>https://jia.je/hardware/2023/01/11/intel-cpu/</link>
      <pubDate>Wed, 11 Jan 2023 08:59:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/01/11/intel-cpu/</guid>
      <description>&lt;h2 id=&#34;xeon-系列&#34;&gt;Xeon 系列&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/support/articles/000059657/processors/intel-xeon-processors.html&#34;&gt;命名方式&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一位数字：8-9 对应 Platinum，5-6 对应 Gold，4 对应 Silver，3 对应 Bronze&lt;/li&gt;
&lt;li&gt;第二位数字：对应代次，1 对应 1st Generation，2 对应 2nd Generation，依此类推&lt;/li&gt;
&lt;li&gt;第三位第四位数字：一般越大性能越好&lt;/li&gt;
&lt;li&gt;后缀：H/L/M/N/P/Q/S/T/U/V/Y/Y+/+
&lt;ul&gt;
&lt;li&gt;L：大内存&lt;/li&gt;
&lt;li&gt;M：媒体/大内存&lt;/li&gt;
&lt;li&gt;N：网络&lt;/li&gt;
&lt;li&gt;P：虚拟化，IaaS&lt;/li&gt;
&lt;li&gt;Q: 水冷&lt;/li&gt;
&lt;li&gt;S：存储/搜索&lt;/li&gt;
&lt;li&gt;T：长寿命&lt;/li&gt;
&lt;li&gt;U：单插槽&lt;/li&gt;
&lt;li&gt;V：虚拟化，SaaS&lt;/li&gt;
&lt;li&gt;Y: Speed Select&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4th-generation-intel-xeon-scalable-processorsxeon-cpu-max-series&#34;&gt;4th Generation Intel® Xeon® Scalable Processors/Xeon CPU Max Series&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/228622/4th-generation-intel-xeon-scalable-processors.html&#34;&gt;CPU 型号列表&lt;/a&gt; &lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/232643/intel-xeon-cpu-max-series.html&#34;&gt;Xeon CPU Max 型号列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发布时间：Q1&#39;23&lt;/li&gt;
&lt;li&gt;代号：Sapphire Rapids/Sapphire Rapids HBM&lt;/li&gt;
&lt;li&gt;用途：Server&lt;/li&gt;
&lt;li&gt;旗舰：Xeon CPU Max 9480(56C112T，112.5 MB L3，HBM)/Xeon Platinum 8490H(60C120T，Golden Cove，112.5 MB L3)/Xeon Platinum 8480+(56C112T，105 MB L3)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3rd-generation-intel-xeon-scalable-processors&#34;&gt;3rd Generation Intel® Xeon® Scalable Processors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/204098/3rd-generation-intel-xeon-scalable-processors.html&#34;&gt;CPU 型号列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发布时间：Q2&#39;21(Ice Lake), Q2&#39;20(Cooper Lake)&lt;/li&gt;
&lt;li&gt;代号：Cooper Lake/Ice Lake&lt;/li&gt;
&lt;li&gt;用途：Server&lt;/li&gt;
&lt;li&gt;旗舰：Xeon Platinum 8380(40C80T，Sunny Cove，60 MB L3)&lt;/li&gt;
&lt;li&gt;相关阅读：&lt;a href=&#34;https://www.anandtech.com/show/16594/intel-3rd-gen-xeon-scalable-review&#34;&gt;Ice Lake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2nd-generation-intel-xeon-scalable-processors&#34;&gt;2nd Generation Intel® Xeon® Scalable Processors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/192283/2nd-generation-intel-xeon-scalable-processors.html&#34;&gt;CPU 型号列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发布时间：Q1&#39;20, Q2&#39;19&lt;/li&gt;
&lt;li&gt;代号：Cascade Lake&lt;/li&gt;
&lt;li&gt;用途：Server&lt;/li&gt;
&lt;li&gt;旗舰：Xeon Platinum 9282(56C112T)，Xeon Platinum 8280(28C56T，38.5 MB L3)&lt;/li&gt;
&lt;li&gt;相关阅读：&lt;a href=&#34;https://www.anandtech.com/show/14146/intel-xeon-scalable-cascade-lake-deep-dive-now-with-optane&#34;&gt;Cascade Lake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1st-generation-intel-xeon-scalable-processors&#34;&gt;1st Generation Intel® Xeon® Scalable Processors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/125191/intel-xeon-scalable-processors.html&#34;&gt;CPU 型号列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发布时间：Q2&#39;18, Q3&#39;17&lt;/li&gt;
&lt;li&gt;代号：Skylake&lt;/li&gt;
&lt;li&gt;用途：Server&lt;/li&gt;
&lt;li&gt;旗舰：Xeon Platinum 8180(28C56T)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;core-系列&#34;&gt;Core 系列&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/processors/processor-numbers.html&#34;&gt;命名方式&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i3/i5/i7/i9：数字越大越高端&lt;/li&gt;
&lt;li&gt;万位 + 千位：对应代次，13 对应 13 代&lt;/li&gt;
&lt;li&gt;百位 + 十位 + 千位：型号，一般越大越高端&lt;/li&gt;
&lt;li&gt;后缀：F/H/HK/HX/K/P/U/X/XE/Y
&lt;ul&gt;
&lt;li&gt;F：桌面，无核显&lt;/li&gt;
&lt;li&gt;H：笔记本，高性能&lt;/li&gt;
&lt;li&gt;HK：笔记本，高性能，可超频&lt;/li&gt;
&lt;li&gt;HX：笔记本，高高性能，可超频&lt;/li&gt;
&lt;li&gt;K：桌面，高性能，可超频&lt;/li&gt;
&lt;li&gt;P：笔记本，轻薄本&lt;/li&gt;
&lt;li&gt;S：桌面，特别版&lt;/li&gt;
&lt;li&gt;U：笔记本，节能&lt;/li&gt;
&lt;li&gt;X/XE：桌面，高高性能，可超频&lt;/li&gt;
&lt;li&gt;Y：特别节能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13th-generation-intel-core-processors&#34;&gt;13th Generation Intel® Core™ Processors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/230485/13th-generation-intel-core-i9-processors.html&#34;&gt;i9 CPU 型号列表&lt;/a&gt; &lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/230486/13th-generation-intel-core-i7-processors.html&#34;&gt;i7 CPU 型号列表&lt;/a&gt; &lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/230487/13th-generation-intel-core-i5-processors.html&#34;&gt;i5 CPU 型号列表&lt;/a&gt; &lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/230488/13th-generation-intel-core-i3-processors.html&#34;&gt;i3 CPU 型号列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发布时间：Q1&#39;23，Q4&#39;22&lt;/li&gt;
&lt;li&gt;代号：Raptor Lake，大小核&lt;/li&gt;
&lt;li&gt;用途：桌面，笔记本&lt;/li&gt;
&lt;li&gt;旗舰：i9-13900K（8+16C32T）/i9-13900KF&lt;/li&gt;
&lt;li&gt;相关阅读：&lt;a href=&#34;https://www.anandtech.com/show/17601/intel-core-i9-13900k-and-i5-13600k-review&#34;&gt;Intel Core i9-13900K and i5-13600K Review: Raptor Lake Brings More Bite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12th-generation-intel-core-processors&#34;&gt;12th Generation Intel® Core™ Processors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/217839/12th-generation-intel-core-i9-processors.html&#34;&gt;i9 CPU 型号列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发布时间：Q1&#39;22，Q4&#39;21&lt;/li&gt;
&lt;li&gt;代号：Alder Lake，大小核&lt;/li&gt;
&lt;li&gt;旗舰：i9-12900KS（8+8C24T）&lt;/li&gt;
&lt;li&gt;相关阅读：&lt;a href=&#34;https://www.anandtech.com/show/17479/the-intel-core-i9-12900ks-review-the-best-of-intel-s-alder-lake-and-the-hottest&#34;&gt;The Intel Core i9-12900KS Review: The Best of Intel&amp;rsquo;s Alder Lake, and the Hottest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11th-generation-intel-core-processors&#34;&gt;11th Generation Intel® Core™ Processors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/202984/11th-generation-intel-core-i9-processors.html&#34;&gt;i9 CPU 型号列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发布时间：Q2&#39;21，Q1&#39;21&lt;/li&gt;
&lt;li&gt;代号：Rocket Lake&lt;/li&gt;
&lt;li&gt;旗舰：i9-11900K（8C16T）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;10th-generation-intel-core-processors&#34;&gt;10th Generation Intel® Core™ Processors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/195735/10th-generation-intel-core-i9-processors.html&#34;&gt;i9 CPU 型号列表&lt;/a&gt; &lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/series/123588/intel-core-x-series-processors.html&#34;&gt;Intel® Core™ X-series Processors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发布时间：Q3&#39;20，Q2&#39;20，Q4&#39;19&lt;/li&gt;
&lt;li&gt;代号：Comet Lake&lt;/li&gt;
&lt;li&gt;旗舰：i9-10900K（10C20T，Comet Lake）；特别地，在 X-series 系列中还有 i9-10980XE（18C36T，Cascade Lake）&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AMD 处理器</title>
      <link>https://jia.je/hardware/2023/01/09/amd-cpu/</link>
      <pubDate>Mon, 09 Jan 2023 19:37:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/01/09/amd-cpu/</guid>
      <description>&lt;h2 id=&#34;ryzen-系列&#34;&gt;Ryzen 系列&lt;/h2&gt;
&lt;h3 id=&#34;ryzen-5000&#34;&gt;Ryzen 5000&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代号&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;核显&lt;/th&gt;
&lt;th&gt;插槽&lt;/th&gt;
&lt;th&gt;微架构&lt;/th&gt;
&lt;th&gt;型号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vermeer&lt;/td&gt;
&lt;td&gt;桌面&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;AM4&lt;/td&gt;
&lt;td&gt;Zen 3&lt;/td&gt;
&lt;td&gt;5950X/5900(X)/5800(X(3D))/5700X/5600(X)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chagall&lt;/td&gt;
&lt;td&gt;工作站&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;sWRX8&lt;/td&gt;
&lt;td&gt;Zen 3&lt;/td&gt;
&lt;td&gt;5995WX/5975WX/5965WX/5955WX/5945WX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cezanne&lt;/td&gt;
&lt;td&gt;桌面&lt;/td&gt;
&lt;td&gt;GCN5&lt;/td&gt;
&lt;td&gt;AM4&lt;/td&gt;
&lt;td&gt;Zen 3&lt;/td&gt;
&lt;td&gt;5750G/5700G(E)/5650G/5600G(E)/5500/5300G(E)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cezanne&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;GCN5&lt;/td&gt;
&lt;td&gt;FP6&lt;/td&gt;
&lt;td&gt;Zen 3&lt;/td&gt;
&lt;td&gt;5980HX/5980HS/5900HX/5900HS/5800H(S)/5800U/5600H(S)/5600U/5560U/5400U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Barceló&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;GCN5&lt;/td&gt;
&lt;td&gt;FP6&lt;/td&gt;
&lt;td&gt;Zen 3&lt;/td&gt;
&lt;td&gt;5825U/5825C/5625U/5625C/5425U/5425C/5125C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lucienne&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;GCN5&lt;/td&gt;
&lt;td&gt;FP6&lt;/td&gt;
&lt;td&gt;Zen 2&lt;/td&gt;
&lt;td&gt;5700U/5500U/5300U&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：Ryzen 5 5500 虽然代号是 Cezanne，但是去掉了核显。&lt;/p&gt;
&lt;h3 id=&#34;ryzen-6000&#34;&gt;Ryzen 6000&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代号&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;核显&lt;/th&gt;
&lt;th&gt;插槽&lt;/th&gt;
&lt;th&gt;微架构&lt;/th&gt;
&lt;th&gt;型号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Rembrandt&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;RDNA2&lt;/td&gt;
&lt;td&gt;FP7&lt;/td&gt;
&lt;td&gt;Zen 3+&lt;/td&gt;
&lt;td&gt;6980HX/6980HS/6900HX/6900HS/6800H(S)/6800U/6600H(S)/6600U&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;ryzen-7000&#34;&gt;Ryzen 7000&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代号&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;核显&lt;/th&gt;
&lt;th&gt;插槽&lt;/th&gt;
&lt;th&gt;微架构&lt;/th&gt;
&lt;th&gt;型号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Raphael&lt;/td&gt;
&lt;td&gt;桌面&lt;/td&gt;
&lt;td&gt;RDNA2&lt;/td&gt;
&lt;td&gt;AM5&lt;/td&gt;
&lt;td&gt;Zen 4&lt;/td&gt;
&lt;td&gt;7950X(3D)/7900(X(3D))/7800X3D/7700(X)/7600(X)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dragon Range&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;RDNA2&lt;/td&gt;
&lt;td&gt;FL1&lt;/td&gt;
&lt;td&gt;Zen 4&lt;/td&gt;
&lt;td&gt;7945HX/7845HX/7745HX/7645HX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Phoenix&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;RDNA3&lt;/td&gt;
&lt;td&gt;FP7/FP7r2/FP8&lt;/td&gt;
&lt;td&gt;Zen 4&lt;/td&gt;
&lt;td&gt;7940HS/7840HS/7640HS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rembrandt R&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;RDNA2&lt;/td&gt;
&lt;td&gt;FP7&lt;/td&gt;
&lt;td&gt;Zen 3+&lt;/td&gt;
&lt;td&gt;7735HS/7535HS/7736U/7735U/7535U/7335U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Barcelo R&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;GCN5?&lt;/td&gt;
&lt;td&gt;FP6&lt;/td&gt;
&lt;td&gt;Zen 3&lt;/td&gt;
&lt;td&gt;7730U/7530U/7330U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mendocino&lt;/td&gt;
&lt;td&gt;笔记本&lt;/td&gt;
&lt;td&gt;RDNA2&lt;/td&gt;
&lt;td&gt;？&lt;/td&gt;
&lt;td&gt;Zen 2&lt;/td&gt;
&lt;td&gt;7520U/7320U&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;AMD 笔记本处理器产品从 2023 年到 2025 年采用新的&lt;a href=&#34;https://www.anandtech.com/show/18718/amd-2023-ryzen-mobile-7000-cpus-unveiled-zen-4-phoenix-takes-point&#34;&gt;命名方式&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数字第一位：7 对应 2023，8 对应 2024，9 对应 2025，约等于 Intel 的代次&lt;/li&gt;
&lt;li&gt;数字第二位：1 对应 Athlon Silver，2 对应 Athlon Gold，3-4 对应 Ryzen 3，5-6 对应 Ryzen 5，7-8 对应 Ryzen 7，8-9 对应 Ryzen 9，类似 Intel 的 i3/i5/i7/i9&lt;/li&gt;
&lt;li&gt;数字第三位：1 对应 Zen/Zen+，2 对应 Zen 2，依次类推&lt;/li&gt;
&lt;li&gt;数字第四位：0 表示低端，5 表示高端&lt;/li&gt;
&lt;li&gt;后缀：性能从高到低 HX，HS，U/C&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此代号和编号有直接的对应关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dragon Range: 7045, Extreme Gaming and Creator&lt;/li&gt;
&lt;li&gt;Phoenix: 7040, Elite Ultrathin&lt;/li&gt;
&lt;li&gt;Rembrandt R: 7035, Premium Thin &amp;amp; Light&lt;/li&gt;
&lt;li&gt;Bracelo R: 7030, Mainstream Thin &amp;amp; Light&lt;/li&gt;
&lt;li&gt;Mendocino: 7020, Everyday Computing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;参考资料&#34;&gt;参考资料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_AMD_Ryzen_processors&#34;&gt;List of AMD Ryzen processors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vermeer: &lt;a href=&#34;https://www.anandtech.com/show/16214/amd-zen-3-ryzen-deep-dive-review-5950x-5900x-5800x-and-5700x-tested&#34;&gt;AMD Zen 3 Ryzen Deep Dive Review: 5950X, 5900X, 5800X and 5600X Tested&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chagall: &lt;a href=&#34;https://www.anandtech.com/show/17296/amd-announces-ryzen-threadripper-pro-5000-wx-series-zen-3-core-for-oem-workstations&#34;&gt;AMD Announces Ryzen Threadripper Pro 5000 WX-Series: Zen 3 For OEM Workstations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cezanne: &lt;a href=&#34;https://www.anandtech.com/show/16405/amd-launches-ryzen-5000-mobile-zen-3-and-cezanne-for-notebooks&#34;&gt;AMD Launches Ryzen 5000 Mobile: Zen 3 and Cezanne for Notebooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cezanne: &lt;a href=&#34;https://www.anandtech.com/show/16446/amd-ryzen-9-5980hs-cezanne-review-ryzen-5000-mobile-tested&#34;&gt;AMD Ryzen 9 5980HS Cezanne Review: Ryzen 5000 Mobile Tested&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cezanne: &lt;a href=&#34;https://www.anandtech.com/show/16824/amd-ryzen-7-5700g-and-ryzen-5-5600g-apu-review&#34;&gt;The AMD Ryzen 7 5700G, Ryzen 5 5600G, and Ryzen 3 5300G Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Barcelo: &lt;a href=&#34;https://www.anandtech.com/show/17190/amds-barcelo-zen-3-apu-refresh-for-2022&#34;&gt;AMD’s Barcelo: Zen 3 APU Refresh for 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Barcelo: &lt;a href=&#34;https://www.anandtech.com/show/17373/amd-announces-ryzen-5000-cseries-for-highend-chromebooks&#34;&gt;AMD Announces Ryzen 5000 C-Series For High-End Chromebooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lucienne: &lt;a href=&#34;https://www.anandtech.com/show/16451/amds-ryzen-5000-lucienne-not-simply-rebranded-ryzen-4000-renoir-&#34;&gt;AMD&amp;rsquo;s Ryzen 5000 Lucienne: Not Simply Rebranded Ryzen 4000 Renoir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rembrandt: &lt;a href=&#34;https://www.anandtech.com/show/17276/amd-ryzen-9-6900hs-rembrandt-benchmark-zen3-plus-scaling&#34;&gt;AMD&amp;rsquo;s Ryzen 9 6900HS Rembrandt Benchmarked: Zen3+ Power and Performance Scaling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Raphael: &lt;a href=&#34;https://www.anandtech.com/show/17585/amd-zen-4-ryzen-9-7950x-and-ryzen-5-7600x-review-retaking-the-high-end&#34;&gt;AMD Zen 4 Ryzen 9 7950X and Ryzen 5 7600X Review: Retaking The High-End&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mendocino: &lt;a href=&#34;https://www.anandtech.com/show/17584/amd-launches-mendocino-apus-zen-2-ryzen-and-athlon-7020-series-with-rdna-2-graphics&#34;&gt;AMD Launches Mendocino APUs: Zen 2-based Ryzen and Athlon 7020 Series with RDNA 2 Graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Barcelo R: &lt;a href=&#34;https://www.notebookcheck.net/Barcelo-R-Ryzen-5-7530U-brings-Zen-3-into-the-mix-for-the-messy-AMD-Ryzen-7000-mobile-APU-lineup.662046.0.html&#34;&gt;Barcelo-R Ryzen 5 7530U brings Zen 3 into the mix for the messy AMD Ryzen 7000 mobile APU lineup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dragon Range: &lt;a href=&#34;https://www.anandtech.com/show/18716/amd-announces-ryzen-7045-hx-series-cpus-for-laptops-up-to-16-cores-and-5-4-ghz&#34;&gt;AMD Announces Ryzen Mobile 7045 HX-Series CPUs, Up to 16-Cores and 5.4 GHz for Laptops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Phoenix/Rembrandt R: &lt;a href=&#34;https://www.anandtech.com/show/18718/amd-2023-ryzen-mobile-7000-cpus-unveiled-zen-4-phoenix-takes-point&#34;&gt;AMD Lays Out 2023 Ryzen Mobile 7000 CPUs: Top-to-Bottom Updates, New Zen 4 &amp;lsquo;Phoenix&amp;rsquo; CPU Takes Point&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;epyc-系列&#34;&gt;EPYC 系列&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代号&lt;/th&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;最大核心数&lt;/th&gt;
&lt;th&gt;微架构&lt;/th&gt;
&lt;th&gt;插槽&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Naples&lt;/td&gt;
&lt;td&gt;7001&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;Zen 1&lt;/td&gt;
&lt;td&gt;SP3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rome&lt;/td&gt;
&lt;td&gt;7002&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;Zen 2&lt;/td&gt;
&lt;td&gt;SP3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Milan&lt;/td&gt;
&lt;td&gt;7003&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;Zen 3&lt;/td&gt;
&lt;td&gt;SP3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Milan-X&lt;/td&gt;
&lt;td&gt;7003&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;Zen 3&lt;/td&gt;
&lt;td&gt;SP3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Genoa&lt;/td&gt;
&lt;td&gt;9004&lt;/td&gt;
&lt;td&gt;96&lt;/td&gt;
&lt;td&gt;Zen 4&lt;/td&gt;
&lt;td&gt;SP5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bergamo&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;Zen 4c&lt;/td&gt;
&lt;td&gt;SP5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;参考资料-1&#34;&gt;参考资料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.anandtech.com/show/17055/amd-gives-details-on-epyc-zen4-genoa-and-bergamo-up-to-96-and-128-cores&#34;&gt;AMD Gives Details on EPYC Zen4: Genoa and Bergamo, up to 96 and 128 Cores&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PCIe Bifurcation</title>
      <link>https://jia.je/hardware/2023/01/05/pcie-bifurcation/</link>
      <pubDate>Thu, 05 Jan 2023 15:41:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2023/01/05/pcie-bifurcation/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/pcie.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近看到两篇关于 PCIe Bifurcation 的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/read/cv15596863&#34;&gt;intel 部分桌面级 CPU 的 pcie 通道拆分另类低成本实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/read/cv16530665&#34;&gt;Intel Alder Lake 12 代酷睿 CPU PCIe 拆分实现方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文章讲的是如何在 CPU 上进行跳线，从而实现 PCIe Bifurcation 的配置。正好借此机会来研究一下 PCIe Bifurcation。&lt;/p&gt;
&lt;h2 id=&#34;pcie-bifurcation&#34;&gt;PCIe Bifurcation&lt;/h2&gt;
&lt;p&gt;PCIe Bifurcation 的目的是让 PCIe 有更好的灵活性。从 CPU 出来的几路 PCIe，它的宽度一般是确定的，比如有一个 x16，但是实际使用的时候，想要接多个设备，例如把 x16 当成两个 x8 来用，这就是 PCIe Bifurcation。这需要 PCIe 两端的支持，CPU 端需要可配置 PCIe Bifurcation，不然只能从一个 x16 降级到一个 x8，剩下的 8x 就没法利用了；设备端需要拆分卡，把 x16 的信号分成两路，然后提供两个 PCIe 插槽以及使用 Clock Buffer 来提供下游设备的时钟，有时则是主板设计时就做了拆分，不需要额外的拆分卡。&lt;/p&gt;
&lt;p&gt;那么怎么配置 CPU 端的 PCIe Bifurcation 呢？其实就是上面两篇文章提到的办法：CPU 根据 CFG 信号来决定 PCIe Bifurcation 配置，例如要选择 1x16，2x8 还是 1x8+2x4 等等。简单总结一下实现思路都是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据 CPU 型号（如 i7-12700K）找到 datasheet，如 &lt;a href=&#34;https://cdrdv2.intel.com/v1/dl/getContent/655258&#34;&gt;12th Generation Intel Core Processors Datasheet Volume 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;寻找 datasheet 中关于 PCIe Bifurcation 的配置，找到 CFG 信号的取值&lt;/li&gt;
&lt;li&gt;找到 CPU 的引脚定义图（如 LGA1700），找到 CFG 引脚，然后找到附近的地或者电源&lt;/li&gt;
&lt;li&gt;连接跳线&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体细节这里就不赘述了，可以查看上面的两篇文章。&lt;/p&gt;
&lt;h2 id=&#34;可配置性&#34;&gt;可配置性&lt;/h2&gt;
&lt;p&gt;这时候就有一个疑问了，如果 PCIe Bifurcation 配置是通过引脚输入的，一般电路是固定的，那是不是就不可以动态配置了？&lt;/p&gt;
&lt;h3 id=&#34;桌面平台&#34;&gt;桌面平台&lt;/h3&gt;
&lt;p&gt;实际找一个主板来研究一下。型号是 ASRock Fatal1ty Z97X Killer，从主板的描述中，可以看到：&lt;code&gt;3 x PCI Express 3.0 x16 Slots (PCIE2/PCIE4/PCIE6: single at x16 (PCIE2); dual at x8 (PCIE2) / x8 (PCIE4); triple at x8 (PCIE2) / x4 (PCIE4) / x4 (PCIE6)&lt;/code&gt;，说明它是支持 PCIe Bifurcation 的，涉及到三个 PCIe Slot，支持三种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PCIE2 Slot x16&lt;/li&gt;
&lt;li&gt;PCIE2 Slot x8, PCIE4 Slot x8&lt;/li&gt;
&lt;li&gt;PCIE2 Slot x8, PCIE4 Slot x4, PCIE6 Slot x4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 &lt;a href=&#34;https://schematic-x.blogspot.com/2018/04/asus-pack-198-files.html&#34;&gt;网上&lt;/a&gt; 找到该主板的 &lt;a href=&#34;https://drive.google.com/file/d/1j9tUFJ7n60OLIoboVuPIWZA9cNJtwsCt/view&#34;&gt;原理图&lt;/a&gt;，可以用 &lt;a href=&#34;https://github.com/OpenBoardView/OpenBoardView&#34;&gt;OpenBoardView&lt;/a&gt; 软件打开。这个主板上的 CPU 插槽是 LGA1150，找到一个兼容的 CPU 版本 i7-4771，下载 &lt;a href=&#34;https://cdrdv2.intel.com/v1/dl/getcontent/328897&#34;&gt;Datasheet&lt;/a&gt;，可以看到决定 PCIe Bifurcation 的引脚是 &lt;code&gt;CFG[6:5]&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CFG[6:5]=00&lt;/code&gt;: 1x8, 2x4&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CFG[6:5]=10&lt;/code&gt;: 2x8&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CFG[6:5]=11&lt;/code&gt;: 1x16&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，这三种配置和主板网站上描述的是一致的。既然主板支持 Bifurcation，说明一定有办法设置 &lt;code&gt;CFG[6:5]&lt;/code&gt; 为以上三种取值。&lt;/p&gt;
&lt;p&gt;接下来，要找到主板上怎么连接 &lt;code&gt;CFG[6:5]&lt;/code&gt;。在原理图中，可以找到 LGA1150 的 &lt;code&gt;U39 CPU_CFG5&lt;/code&gt; 和 &lt;code&gt;U40 V_CFG6&lt;/code&gt;，继续往下找，可以看到它们通过电阻连到了同一个 &lt;a href=&#34;https://www.vishay.com/docs/85508/bat54.pdf&#34;&gt;BAT54C&lt;/a&gt; 芯片上，所以只需要看 BAT54C 第三个引脚 N105955695 的电平。N105955695 接到了一个 &lt;a href=&#34;https://assets.nexperia.com/documents/data-sheet/2N7002BKS.pdf&#34;&gt;2N7002BKS&lt;/a&gt; 芯片上，根据电路图，最后是要看 &lt;code&gt;X4_PRSNT1#&lt;/code&gt; 信号。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X4_PRSTN1#&lt;/code&gt; 信号连接到了 PCIE6 上，如果 PCIE6 Slot 插入了设备，那么 &lt;code&gt;X4_PRSTN1#&lt;/code&gt; 信号生效，根据分析出来的电路，它会使得 &lt;code&gt;CFG[6:0]&lt;/code&gt; 变为 00，对应 1x8+2x4 的 Bifurcation 模式。回想一下，在主板支持的三种 PCIe Bifurcation 模式下，只有这一种涉及到了 PCIE6 Slot。所以如果用户在 PCIE6 Slot 插入了设备，那说明用户需要的是 1x8+2x4 的模式，自动配置 CPU 的 &lt;code&gt;CFG[6:5]&lt;/code&gt; 信号为预期值。&lt;/p&gt;
&lt;p&gt;另一方面，设置 &lt;code&gt;CFG[6:5]&lt;/code&gt; 还不够，上面提到过，主板需要负责把 PCIE2/4/6 的信号连接到原来的完整的 x16 上，并且根据实际情况连接不同的线。具体的实现方式也可以在原理图中找到：信号 &lt;code&gt;X4_PRSTN1#&lt;/code&gt; 连接到了 &lt;a href=&#34;https://www.nxp.com.cn/docs/en/data-sheet/CBTL04083A_CBTL04083B.pdf&#34;&gt;CBTL04083BBS&lt;/a&gt;，这是一个 PCIe Mux/Demux 芯片，也就是把同样一组差分线连到不同 PCIe Slot 上所需要的芯片。&lt;/p&gt;
&lt;p&gt;于是目前推断出了一部分的工作原理：用户在 PCIE6 Slot 插入设备，电路计算出 &lt;code&gt;CFG[6:5]=00&lt;/code&gt;，同时配置好了 PCIe Mux/Demux 芯片，把 1x16 切分为 1x8+2x4。&lt;/p&gt;
&lt;p&gt;继续往下看，主板如何实现剩下两种配置：&lt;code&gt;CFG[6:5]=10&lt;/code&gt; 对应 2x8，&lt;code&gt;CFG[6:5]=11&lt;/code&gt; 对应 1x16。这两种编码里，CFG6 都为 1，只需要考虑如何处理 CFG5。CFG5 除了连接上面提到的 BAT54C 以外，还通过另一个 2N7002BKS 芯片连接到了 &lt;code&gt;NB_X8_PRSENT#&lt;/code&gt; 信号上。如果你想明白了前面的过程，应该可以推断出来，这里的 &lt;code&gt;NB_X8_PRSENT#&lt;/code&gt; 连接到了 PCIE4 Slot 上。当 PCIE4 Slot 插入了设备，同时 PCIE6 Slot 没有插入设备，那么根据相应的 PRESENT 信号，可以得到 &lt;code&gt;CFG[6:5]=10&lt;/code&gt;。如果 PCIE4 Slot 和 PCIE6 Slot 都没有插入设备，那就 &lt;code&gt;CFG[6:5]=11&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;总结一下，动态检测并计算出 &lt;code&gt;CFG[6:5]&lt;/code&gt; 的逻辑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果 PCIE6 Slot 插入了设备，说明要配置为 1x8+2x4，设置 &lt;code&gt;CFG[6:5]=00&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;否则，如果 PCIE4 Slot 插入了设备，说明要配置为 2x8，设置 &lt;code&gt;CFG[6:5]=10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;否则，说明要配置为 1x16，设置 &lt;code&gt;CFG[6:5]=11&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而主板设计者就是要把这个逻辑转化为电路，用 BAT54C 和 CBTL04083BBS 芯片来实现逻辑运算。&lt;/p&gt;
&lt;p&gt;顺便一提，这里的 PCIE2/4/6 物理尺寸都是 x16，只不过实际分配到的宽度不一定与物理尺寸一致。&lt;/p&gt;
&lt;h3 id=&#34;服务器平台&#34;&gt;服务器平台&lt;/h3&gt;
&lt;p&gt;在服务器平台上，Intel CPU 的 Bifurcation 变成运行时可配置的，例如在 &lt;a href=&#34;https://cdrdv2-public.intel.com/333810/xeon-e5-v4-datasheet-vol-2.pdf&#34;&gt;Xeon E5 v4 Datasheet Volume 2&lt;/a&gt; 中，可以找到寄存器 &lt;code&gt;pcie_iou_bif_ctrl&lt;/code&gt; 寄存器的定义：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_bifurcation.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个寄存器在 PCIe 配置空间中，可以通过 &lt;code&gt;setpci&lt;/code&gt; 命令来读取或写入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ setpci -s 00:00.0 190.B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ setpci -s 00:01.0 190.B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# x8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ setpci -s 00:02.0 190.B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# x16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ setpci -s 00:03.0 190.B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# x8x8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ setpci -s 80:02.0 190.B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# x16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过 &lt;code&gt;lspci -bPP&lt;/code&gt; 命令以及 &lt;code&gt;lspci -vvv&lt;/code&gt;，可以看到在这几个 PCIe Root Port 下的设备以及速度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;00:01.0(x8)/02:00.0 RAID 控制器 PCIe 3.0 x8&lt;/li&gt;
&lt;li&gt;00:02.0(x16)/03:00.0 NVIDIA 显卡 PCIe 3.0 x16&lt;/li&gt;
&lt;li&gt;00:03.0(x8x8)/01:00.0 BCM 2x10G+2x1G 网卡 PCIe 2.0 x8&lt;/li&gt;
&lt;li&gt;80:02.0(x16)/82:00.0 NVIDIA 显卡 PCIe 3.0 x16&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中前三个设备连接到 CPU1，后三个设备连接到 CPU2&lt;/p&gt;
&lt;p&gt;在 BIOS 设置中，进入 Integrated Devices -&amp;gt; Slot Bifurcation 可以看到设置，可选项有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slot 1/2/3/5: Default Bifurcation, x4+x4 Bifurcation&lt;/li&gt;
&lt;li&gt;Slot 4/6: Default Bifurcation, x4+x4+x4+x4 Bifurcation, x8+x8 Bifurcation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;阅读 R730 文档，可以发现它最多可以有 7 个 Slot，其中 Slot 1/2/3/5/7 是 PCIe 3.0x8，Slot 4 是 PCIe 3.0 x16，Slot 6 根据不同的 Riser 可以提供 PCIe 3.0 x8 或 x16，对应关系如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PCIe Slot 1: x8, CPU2&lt;/li&gt;
&lt;li&gt;PCIe Slot 2: x8, CPU2&lt;/li&gt;
&lt;li&gt;PCIe Slot 3: x8, CPU2&lt;/li&gt;
&lt;li&gt;PCIe Slot 4: x16, CPU2&lt;/li&gt;
&lt;li&gt;PCIe Slot 5: x8, CPU1&lt;/li&gt;
&lt;li&gt;PCIe Slot 6: x8/x16, CPU1&lt;/li&gt;
&lt;li&gt;PCIe Slot 7: x8, CPU1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;阅读 E5 v4 CPU 文档，可以发现它有三个 PCIe Port，一共有 40 PCIe lanes（x8+x16+x16）。由此可知，其中一个 x16 连接到 Slot4/6 上，另一个 x16 拆分成 x8+x8，连接到其余的 Slot。有些奇怪的是 CPU1 少了一个 x8 不知去向，怀疑是连接到了 RAID 卡或者网卡上。缺少主板的原理图，无法继续深入研究。&lt;/p&gt;
&lt;p&gt;遗憾的是，这个寄存器的 &lt;code&gt;iou_start_bifurcation&lt;/code&gt; 字段只能写入一次 1 来初始化 Bifurcation，而这一般是由 BIOS 完成的。如果 BIOS 没有做，或许可以后面再写入一次；如果 BIOS 已经写入了，但是没有提供可选项，那么可以考虑逆向 BIOS，使用 UEFITool 查看是否有隐藏的配置，如果有，则可以尝试绕过 BIOS 设置去修改隐藏的配置，如果没有，可以考虑修改 BIOS 的指令。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;简单总结一下，PCIe Bifurcation 的目的是保证总 lane 数不变的情况下，连接更多设备的较低成本的方法。它需要 CPU 一侧和设备一侧的支持。桌面级别的 CPU 通过 CFG 信号来配置，服务器端的 CPU 通过 PCIe 配置空间来配置。设备一侧，可以由主板进行拆分，此时主板上会有多余的 PCIe 接口，根据插在主板上的设备的情况，主板自适应出一个 PCIe Bifurcation 配置；主板也可以什么都不做，直接把 CPU 的 PCIe 接到 Slot 上，此时需要用户自己购买 PCIe 拆分卡。淘宝上可以搜到不少 &lt;a href=&#34;https://www.taobao.com/list/product/pcie%E6%8B%86%E5%88%86%E5%8D%A1.htm&#34;&gt;PCIe 拆分卡&lt;/a&gt;，其中用于 NVMe 的较多，毕竟 M.2 接口面积小，而且只需要 PCIe x4。&lt;/p&gt;
&lt;p&gt;另一种方案是 PCIe 交换机（如 &lt;a href=&#34;https://docs.broadcom.com/doc/12351854&#34;&gt;PEX 8747&lt;/a&gt;），缺点是成本较高，增加了延迟，好处是灵活性很强，不需要 CPU 额外配置，可以外接更多设备，并且设备空闲时可以让出带宽。例如一个 x16 使用 Bifurcation 方法可以拆成两个 x8，也可以使用 PCIe 交换机连接两个 x16，类似网络，这两个 x16 共享带宽，下游的两个设备之间也可以直接通信，这个在 HPC 场景下会比较常见，例如使用 PCIe 交换机连接显卡和 IB 网卡。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ACPI 学习笔记</title>
      <link>https://jia.je/hardware/2022/12/10/acpi-notes/</link>
      <pubDate>Sat, 10 Dec 2022 20:44:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/12/10/acpi-notes/</guid>
      <description>&lt;h2 id=&#34;标准&#34;&gt;标准&lt;/h2&gt;
&lt;p&gt;ACPI 标准可以从&lt;a href=&#34;https://uefi.org/specifications&#34;&gt;官网&lt;/a&gt;下载。&lt;/p&gt;
&lt;p&gt;ACPI 的表现形式为一颗树加若干个表，表的结构比较规整，里面每个字段都有固定的含义。树的结点可能是属性，或者是一些函数。操作系统可以操作上面的属性，调用 ACPI 中的函数，来进行一些硬件相关的操作。ACPI 一般与主板密切相关，主板厂家配置好 ACPI 后，操作系统就不需要给每个主板都写一遍代码了。&lt;/p&gt;
&lt;h2 id=&#34;asl&#34;&gt;ASL&lt;/h2&gt;
&lt;p&gt;为了开发 ACPI，需要使用 ACPI Source Language(ASL) 来进行编程，使用 iasl 编译成 ACPI 表以后，由操作系统进行解释执行。推荐阅读一个比较好的 ASL 教程：&lt;a href=&#34;https://acpica.org/sites/acpica/files/asl_tutorial_v20190625.pdf&#34;&gt;ACPI Source Language (ASL) Tutorial&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;简单来说，ASL 中的变量类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integer: &lt;code&gt;int32_t/int64_t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;String: &lt;code&gt;char *&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Buffer: &lt;code&gt;uint8_t []&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Package: &lt;code&gt;object []&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Object Reference: &lt;code&gt;object &amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Method&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ACPI 需要访问硬件，一般是通过 MMIO 或者 IO Port 来进行访问。在内核开发的时候，MMIO 一般是用一系列 volatile 指针来对应硬件的寄存器定义。ASL 中也可以做类似的事情，分为两步：&lt;code&gt;OperationRegion&lt;/code&gt; 和 &lt;code&gt;Field&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OperationRegion&lt;/code&gt; 就是声明了一片地址空间，以及对应的类型，常见的类型有 SystemMemory、SystemIO、PCI_Config、SMBus 等等。当 ACPI 中的代码要访问 &lt;code&gt;OperationRegion&lt;/code&gt; 中的数据的时候，内核按照类型去进行实际的访问。&lt;/p&gt;
&lt;p&gt;有了地址空间以后，还需要根据寄存器的定义，给各个字段起个名字，这就是 &lt;code&gt;Field&lt;/code&gt;。&lt;code&gt;Field&lt;/code&gt; 给 &lt;code&gt;OperationRegion&lt;/code&gt; 中的字段起名，与硬件的定义想对应，这就像在内核中定义一个结构体，保证结构体的成员的偏移和硬件是一致的。这样就可以通过成员来访问，而不是每次都去计算一次偏移。&lt;/p&gt;
&lt;h2 id=&#34;获取当前系统的-acpi-表&#34;&gt;获取当前系统的 ACPI 表&lt;/h2&gt;
&lt;p&gt;使用以下命令获取 ACPI 表并转换为可以阅读的格式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo acpidump -o acpi.raw
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;acpixtract -a acpi.raw
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iasl -d *.dat
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;串口&#34;&gt;串口&lt;/h2&gt;
&lt;h3 id=&#34;x86_64&#34;&gt;x86_64&lt;/h3&gt;
&lt;p&gt;下面来看一个具体的例子，主板 &lt;code&gt;WS X299 PRO/SE&lt;/code&gt; 的 ACPI 表中记录的串口信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// UART 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (UAR1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0501&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* 16550A-compatible COM Serial Port */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_UID, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _UID: Unique ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (LDN, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_STA, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _STA: Status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;^^&lt;/span&gt;SIO1.&lt;span style=&#34;color:#a6e22e&#34;&gt;DSTA&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;// Device Status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_DIS, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _DIS: Disable Device
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;^^&lt;/span&gt;SIO1.&lt;span style=&#34;color:#a6e22e&#34;&gt;DCNT&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Device Control
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_CRS, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _CRS: Current Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;^^&lt;/span&gt;SIO1.&lt;span style=&#34;color:#a6e22e&#34;&gt;DCRS&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_SRS, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _SRS: Set Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;^^&lt;/span&gt;SIO1.&lt;span style=&#34;color:#a6e22e&#34;&gt;DSRS&lt;/span&gt; (Arg0, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_PRS, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceTemplate&lt;/span&gt; ()  &lt;span style=&#34;color:#75715e&#34;&gt;// _PRS: Possible Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;StartDependentFn&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03F8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03F8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IRQNoFlags&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;DMA&lt;/span&gt; (Compatibility, NotBusMaster, Transfer8, )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;StartDependentFnNoPri&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03F8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03F8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IRQNoFlags&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;DMA&lt;/span&gt; (Compatibility, NotBusMaster, Transfer8, )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;StartDependentFnNoPri&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02F8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02F8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IRQNoFlags&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;DMA&lt;/span&gt; (Compatibility, NotBusMaster, Transfer8, )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;StartDependentFnNoPri&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03E8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03E8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IRQNoFlags&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;DMA&lt;/span&gt; (Compatibility, NotBusMaster, Transfer8, )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;StartDependentFnNoPri&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02E8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02E8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;IRQNoFlags&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;DMA&lt;/span&gt; (Compatibility, NotBusMaster, Transfer8, )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;EndDependentFn&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个设备在 Linux 中的路径是 &lt;code&gt;/sys/devices/LNXSYSTM:00/LNXSYBUS:00/PNP0A08:00/device:86/PNP0501:00&lt;/code&gt;，进一步可以发现，它的 &lt;code&gt;path&lt;/code&gt; 是 &lt;code&gt;\_SB_.PC00.LPC0.UAR1&lt;/code&gt;，与 DSDT 中的路径一致。进一步探索，可以发现它匹配到了 Linux 的 &lt;code&gt;serial&lt;/code&gt; 驱动，并且最终对应到了 &lt;code&gt;/dev/ttyS0&lt;/code&gt; 设备。还可以看到 Linux 生成的 &lt;code&gt;resources&lt;/code&gt; 描述：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;state = active
io 0x3f8-0x3ff
irq 4
dma disabled
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这和上面看到的是一致的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03F8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03F8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里表达的正是 &lt;code&gt;0x3F8-0x3FF&lt;/code&gt; 这一段 IO Port。这个地址和 &lt;a href=&#34;https://wiki.osdev.org/Serial_Ports#Port_Addresses&#34;&gt;OSDev&lt;/a&gt; 上看到的也是吻合的。&lt;/p&gt;
&lt;p&gt;进一步分析代码，&lt;code&gt;_STA&lt;/code&gt; 函数返回设备当前的状态。可以在 Linux 的 ACPI 结点路径下看 &lt;code&gt;status&lt;/code&gt; 文件，其内容是 &lt;code&gt;15&lt;/code&gt;，表示工作正常。实现中，它调用了 &lt;code&gt;^^SIO1.DSTA(0x00)&lt;/code&gt;，这里的 &lt;code&gt;^&lt;/code&gt; 表示上一级命名空间。进一步找到 &lt;code&gt;DSTA&lt;/code&gt; 的实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Device Status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (DSTA, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, NotSerialized)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Enter Configuration Mode
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ENFG&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;CGLD&lt;/span&gt; (Arg0))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Local0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ACTR &lt;span style=&#34;color:#75715e&#34;&gt;/* \_SB_.PC00.LPC0.SIO1.ACTR */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Exit Configuration Mode
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;EXFG&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; ((Local0 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Local0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; ((Arg0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// IO State
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        IOST &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; (Local0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Arg0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; (Local0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ElseIf&lt;/span&gt; ((Arg0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; (((&lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Arg0) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; IOST))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Else
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Else
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，核心是要判断 &lt;code&gt;ACTR&lt;/code&gt; 的取值，继续寻找，可以发现 &lt;code&gt;ACTR&lt;/code&gt; 是一个 SuperIO 的寄存器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Super IO
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (SP1O, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2E&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;OperationRegion&lt;/span&gt; (IOID, SystemIO, SP1O, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Field&lt;/span&gt; (IOID, ByteAcc, NoLock, Preserve)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    INDX,   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATA,   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;IndexField&lt;/span&gt; (INDX, DATA, ByteAcc, NoLock, Preserve)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Offset&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ACTR,   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;// Activate Register
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ACTR&lt;/code&gt; 寄存器需要通过 0x2E/0x2F 这两个 IO Port 来访问，所以这里使用了 &lt;code&gt;IndexField&lt;/code&gt;，例如要读取 &lt;code&gt;ACTR&lt;/code&gt; 的当前值的话，首先要往 &lt;code&gt;0x2E&lt;/code&gt; 处写入 &lt;code&gt;ACTR&lt;/code&gt; 的偏移，再从 &lt;code&gt;0x2F&lt;/code&gt; 处读出当前值。这些寄存器应该就属于 SuperIO 了。&lt;/p&gt;
&lt;p&gt;其他的几个函数含义是，&lt;code&gt;_CRS&lt;/code&gt; 返回当前的资源配置，&lt;code&gt;_SRS&lt;/code&gt; 可以修改资源配置，&lt;code&gt;_PRS&lt;/code&gt; 列出可能的资源配置，&lt;code&gt;_DIS&lt;/code&gt; 禁用设备。&lt;/p&gt;
&lt;p&gt;从 Linux 内核日志，可以发现这款主板用的是 NCT6796D 兼容的 SuperIO 芯片：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nct6775: Found NCT6796D or compatible chip at 0x2e:0x290
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查询 &lt;a href=&#34;https://www.nuvoton.com/resource-files/NCT6796D_Datasheet_V0_6.pdf&#34;&gt;NCT6796D Datasheet&lt;/a&gt;，可以发现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;芯片通过 LPC 总线与 CPU 连接，支持多种外设接口，包括 UART，PS/2，红外，GPIO，SMBus 等等&lt;/li&gt;
&lt;li&gt;偏移 0x30 的寄存器 &lt;code&gt;ACTR&lt;/code&gt; 的最低位表示了 logical device 的当前状态。&lt;/li&gt;
&lt;li&gt;读取 &lt;code&gt;ACTR&lt;/code&gt; 之前需要设置 LDN(Logical Device Number) 为 2，2 对应 Serial Port 1(UARTA)。这一步是在 &lt;code&gt;ENFG(CGLD(Arg0))&lt;/code&gt; 中完成的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CGLD&lt;/code&gt; 函数查询了 &lt;code&gt;DCAT&lt;/code&gt;，可以发现，串口在 &lt;code&gt;DCAT&lt;/code&gt; 的下标是 0，查表得到的是 2，也就是 Logial Device Number 为 2，和上面的发现是吻合的。&lt;code&gt;DCAT&lt;/code&gt; 的下一项是 &lt;code&gt;0x3&lt;/code&gt;，也就是 Logical Device Number 为 3，在 Datasheet 中可以看到是 Serial Port 2(UARTB)。&lt;/li&gt;
&lt;li&gt;DSDT 中还可以找到 &lt;code&gt;PS2K&lt;/code&gt; 的结点，就是 PS/2 键鼠，属性中标记了 &lt;code&gt;LDN=5&lt;/code&gt;，和 Datasheet 也是一致的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;arm64&#34;&gt;ARM64&lt;/h3&gt;
&lt;p&gt;前面看过了 x86_64 平台的串口，是需要通过 IO Port 进行访问的。在 ARM 平台上，则一般是通过 MMIO 访问。搜索内核日志，可以发现内核从 SPCR(Serial Port Console Redirection table) 表获取得到串口的信息：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-dmesg&#34; data-lang=&#34;dmesg&#34;&gt;ACPI: SPCR: console: uart,mmio,0x3f00002f8,115200
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SPCR 表的内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[024h 0036   1]               Interface Type : 00
[025h 0037   3]                     Reserved : 000000

[028h 0040  12]         Serial Port Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 01 [Byte Access:8]
[02Ch 0044   8]                      Address : 00000003F00002F8

[034h 0052   1]               Interrupt Type : 08
[035h 0053   1]          PCAT-compatible IRQ : 00
[036h 0054   4]                    Interrupt : 000001E4
[03Ah 0058   1]                    Baud Rate : 07
[03Bh 0059   1]                       Parity : 00
[03Ch 0060   1]                    Stop Bits : 01
[03Dh 0061   1]                 Flow Control : 00
[03Eh 0062   1]                Terminal Type : 03
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SPCR 表的定义可以在 &lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/drivers/serports/serial-port-console-redirection-table&#34;&gt;Serial Port Console Redirection Table (SPCR)&lt;/a&gt; 处看到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type(00): Full 16550 interface&lt;/li&gt;
&lt;li&gt;Interrupt Type(08): ARMH GIC interrupt (Global System Interrupt)&lt;/li&gt;
&lt;li&gt;Baud Rate(07): 115200&lt;/li&gt;
&lt;li&gt;Terminal Type(03): ANSI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和内核得到的信息是一致的。内核中解析 SPCR 表的函数是 &lt;code&gt;acpi_sparse_spcr&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; __init &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_parse_spcr&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; enable_earlycon, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; enable_console)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (table&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;serial_port.space_id &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ACPI_ADR_SPACE_SYSTEM_MEMORY) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;ACPI_ACCESS_BIT_WIDTH&lt;/span&gt;((bit_width))) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			iotype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mmio&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (table&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;interface_type) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; ACPI_DBG2_16550_COMPATIBLE:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		uart &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uart&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (table&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;baud_rate) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		baud_rate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115200&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;baud_rate) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;snprintf&lt;/span&gt;(opts, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(opts), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s,%s,0x%llx&amp;#34;&lt;/span&gt;, uart, iotype,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			 table&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;serial_port.address);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// uart,mmio,0x3f00002f8,115200
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;snprintf&lt;/span&gt;(opts, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(opts), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s,%s,0x%llx,%d&amp;#34;&lt;/span&gt;, uart, iotype,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			 table&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;serial_port.address, baud_rate);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ipmi&#34;&gt;IPMI&lt;/h2&gt;
&lt;h3 id=&#34;x86_64-1&#34;&gt;x86_64&lt;/h3&gt;
&lt;p&gt;接下来，再来看 ACPI 中是如何声明 IPMI 的。主板依然是 &lt;code&gt;WS X299 PRO/SE&lt;/code&gt;，主板自带了 BMC，可以在 DSDT 中搜到相关的部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (IDTP, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0CA2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (ICDP, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0CA3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (SRVV, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0200&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (SPMI)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IPI0001&amp;#34;&lt;/span&gt;))  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_STR, &lt;span style=&#34;color:#a6e22e&#34;&gt;Unicode&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IPMI_KCS&amp;#34;&lt;/span&gt;))  &lt;span style=&#34;color:#75715e&#34;&gt;// _STR: Description String
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_UID, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _UID: Unique ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// IPMI Status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;OperationRegion&lt;/span&gt; (IPST, SystemIO, ICDP, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Field&lt;/span&gt; (IPST, ByteAcc, NoLock, Preserve)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        STAS,   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_STA, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _STA: Status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Local0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; STAS &lt;span style=&#34;color:#75715e&#34;&gt;/* \_SB_.PC00.LPC0.SPMI.STAS */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; ((Local0 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Else
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (ICRS, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceTemplate&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            _Y1E)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            _Y1F)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_CRS, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _CRS: Current Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; (IDTP)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateWordField&lt;/span&gt; (ICRS, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PC00.LPC0.SPMI._Y1E._MIN, IPDB)  &lt;span style=&#34;color:#75715e&#34;&gt;// _MIN: Minimum Base Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateWordField&lt;/span&gt; (ICRS, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PC00.LPC0.SPMI._Y1E._MAX, IPDH)  &lt;span style=&#34;color:#75715e&#34;&gt;// _MAX: Maximum Base Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateByteField&lt;/span&gt; (ICRS, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PC00.LPC0.SPMI._Y1E._LEN, IPDL)  &lt;span style=&#34;color:#75715e&#34;&gt;// _LEN: Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            IPDB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; IDTP &lt;span style=&#34;color:#75715e&#34;&gt;/* \IDTP */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            IPDH &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; IDTP &lt;span style=&#34;color:#75715e&#34;&gt;/* \IDTP */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            IPDL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; (ICDP)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateWordField&lt;/span&gt; (ICRS, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PC00.LPC0.SPMI._Y1F._MIN, IPCB)  &lt;span style=&#34;color:#75715e&#34;&gt;// _MIN: Minimum Base Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateWordField&lt;/span&gt; (ICRS, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PC00.LPC0.SPMI._Y1F._MAX, IPCH)  &lt;span style=&#34;color:#75715e&#34;&gt;// _MAX: Maximum Base Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateByteField&lt;/span&gt; (ICRS, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PC00.LPC0.SPMI._Y1F._LEN, IPCL)  &lt;span style=&#34;color:#75715e&#34;&gt;// _LEN: Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            IPCB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ICDP &lt;span style=&#34;color:#75715e&#34;&gt;/* \ICDP */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            IPCH &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ICDP &lt;span style=&#34;color:#75715e&#34;&gt;/* \ICDP */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            IPCL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (ICRS) &lt;span style=&#34;color:#75715e&#34;&gt;/* \_SB_.PC00.LPC0.SPMI.ICRS */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_IFT, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _IFT: IPMI Interface Type
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_SRV, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _SRV: IPMI Spec Revision
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (SRVV) &lt;span style=&#34;color:#75715e&#34;&gt;/* \SRVV */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Linux 中可以找到相应的结点：&lt;code&gt;/sys/devices/LNXSYSTM:00/LNXSYBUS:00/PNP0A08:00/device:86/IPI0001:00&lt;/code&gt;。可以发现匹配到了 &lt;code&gt;ipmi_si&lt;/code&gt; 驱动，并且可以正常工作。&lt;/p&gt;
&lt;p&gt;函数 &lt;code&gt;_STA&lt;/code&gt; 返回设备的当前状态，它读取了 IO Port 0x0CA3 的内容，进而判断 IPMI 是否正常。&lt;/p&gt;
&lt;p&gt;函数 &lt;code&gt;_CRS&lt;/code&gt; 返回当前的资源配置，它动态地计算出一个资源配置，对应 IO Port 是 0x0CA2 和 0x0CA3。&lt;/p&gt;
&lt;p&gt;函数 &lt;code&gt;_IFT&lt;/code&gt; 返回 IPMI Interface Type，0x01 表示 KCS(Keyboard Controller Style)，&lt;code&gt;_SRV&lt;/code&gt; 返回 IPMI Spec Revision，在这里是 0x0200，也就是 IPMI 2.0。&lt;/p&gt;
&lt;p&gt;这些内容可以在 Linux 下 ACPI 结点的 &lt;code&gt;physical_node/params&lt;/code&gt; 文件中看到：&lt;code&gt;kcs,i/o,0xca2,rsp=1,rsi=1,rsh=0,irq=0,ipmb=32&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;查阅 Linux 源码，可以找到 &lt;code&gt;acpi_ipmi_probe&lt;/code&gt; 函数，这个函数负责从 ACPI 中寻找 IPMI 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_ipmi_probe&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; platform_device &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pdev)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;dev_info&lt;/span&gt;(dev, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;probing via ACPI&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/* _IFT tells us the interface type: KCS, BT, etc */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_evaluate_integer&lt;/span&gt;(handle, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_IFT&amp;#34;&lt;/span&gt;, NULL, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tmp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (tmp) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		io.si_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SI_KCS;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		io.si_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SI_SMIC;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		io.si_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SI_BT;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* SSIF, just ignore */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ENODEV;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;dev_info&lt;/span&gt;(dev, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unknown IPMI type %lld&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, tmp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;EINVAL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ipmi_get_info_from_resources&lt;/span&gt;(pdev, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;io);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;res)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;EINVAL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; acpi_device_id acpi_ipmi_match[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IPI0001&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{ },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和上面的分析是可以对上的。&lt;/p&gt;
&lt;h4 id=&#34;ipmi-kcs&#34;&gt;IPMI KCS&lt;/h4&gt;
&lt;p&gt;查阅 IPMI 标准文档，可以看到 KCS(Keyboard Controller Style) Interface 下，操作系统通过两个 IO Port 来访问 BMC：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ipmi_kcs.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中的 &lt;code&gt;base&lt;/code&gt; 就是上面 ACPI 表记录的 &lt;code&gt;IDTP=0x0CA2&lt;/code&gt;，&lt;code&gt;base+1&lt;/code&gt; 就是 ACPI 表记录的 &lt;code&gt;ICDP=0x0CA3&lt;/code&gt;。结合寄存器的用途，可以猜测 IDTP 是 IPMI Data Transfer Port 的缩写，因为这个 Port 对应的是 &lt;code&gt;Data_In&lt;/code&gt; 和 &lt;code&gt;Data_Out&lt;/code&gt;；ICDP 是 IPMI Command Data Port 的缩写。&lt;/p&gt;
&lt;h3 id=&#34;arm64-1&#34;&gt;ARM64&lt;/h3&gt;
&lt;p&gt;再看一个 ARM64 平台上的 IPMI：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (IPI0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IPI0001&amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_IFT, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _IFT: IPMI Interface Type
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// BT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_CRS, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceTemplate&lt;/span&gt; ()  &lt;span style=&#34;color:#75715e&#34;&gt;// _CRS: Current Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;QWordMemory&lt;/span&gt; (ResourceConsumer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000000&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000003F00000E4&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000003F00000E7&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000000&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000004&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, , AddressRangeMemory, TypeStatic)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Interrupt&lt;/span&gt; (ResourceConsumer, Level, ActiveHigh, Shared, ,, )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000001E4&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;_IFT&lt;/code&gt; 返回值是 0x3，查阅文档可知这表示的是 BT 类型。&lt;code&gt;_CRS&lt;/code&gt; 中使用了 QWordMemory 宏来描述地址空间，这里实际上就是表示内存地址 &lt;code&gt;0x3F00000E4-0x3F00000E7&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;io-apic&#34;&gt;IO APIC&lt;/h2&gt;
&lt;p&gt;在 DSDT 中，可以找到 IO APIC 的基地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (APIC)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0003&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* IO-APIC Interrupt Controller */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_CRS, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceTemplate&lt;/span&gt; ()  &lt;span style=&#34;color:#75715e&#34;&gt;// _CRS: Current Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Memory32Fixed&lt;/span&gt; (ReadOnly,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFEC00000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Address Base
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00100000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Address Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 IO APIC 基地址是 0xFEC00000，在网上也可以查到同样的结果。实际上，在 Multiple APIC Description Table (MADT) 中也可以找到 IO APIC 的基地址：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[1ECh 0492   1]                Subtable Type : 01 [I/O APIC]
[1EDh 0493   1]                       Length : 0C
[1EEh 0494   1]                  I/O Apic ID : 08
[1EFh 0495   1]                     Reserved : 00
[1F0h 0496   4]                      Address : FEC00000
[1F4h 0500   4]                    Interrupt : 00000000

[1F8h 0504   1]                Subtable Type : 01 [I/O APIC]
[1F9h 0505   1]                       Length : 0C
[1FAh 0506   1]                  I/O Apic ID : 09
[1FBh 0507   1]                     Reserved : 00
[1FCh 0508   4]                      Address : FEC01000
[200h 0512   4]                    Interrupt : 00000018

[204h 0516   1]                Subtable Type : 01 [I/O APIC]
[205h 0517   1]                       Length : 0C
[206h 0518   1]                  I/O Apic ID : 0A
[207h 0519   1]                     Reserved : 00
[208h 0520   4]                      Address : FEC08000
[20Ch 0524   4]                    Interrupt : 00000020

[210h 0528   1]                Subtable Type : 01 [I/O APIC]
[211h 0529   1]                       Length : 0C
[212h 0530   1]                  I/O Apic ID : 0B
[213h 0531   1]                     Reserved : 00
[214h 0532   4]                      Address : FEC10000
[218h 0536   4]                    Interrupt : 00000028

[21Ch 0540   1]                Subtable Type : 01 [I/O APIC]
[21Dh 0541   1]                       Length : 0C
[21Eh 0542   1]                  I/O Apic ID : 0C
[21Fh 0543   1]                     Reserved : 00
[220h 0544   4]                      Address : FEC18000
[224h 0548   4]                    Interrupt : 00000030
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;dma&#34;&gt;DMA&lt;/h2&gt;
&lt;p&gt;继续搜索 &lt;code&gt;_HID&lt;/code&gt;，还可以找到一些传统的设备，比如 DMA Controller：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// DMA Controller
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (DMAC)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0200&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* PC-class DMA Controller */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_CRS, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceTemplate&lt;/span&gt; ()  &lt;span style=&#34;color:#75715e&#34;&gt;// _CRS: Current Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0081&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0081&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0087&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0087&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0089&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0089&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x008F&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x008F&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00C0&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00C0&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;DMA&lt;/span&gt; (Compatibility, NotBusMaster, Transfer8, )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它定义了如下的 IO Port 范围：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0x00-0x0F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;0x81, 0x87, 0x89, 0x8F&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0xC0-0xDE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;寄存器定义可以在 &lt;a href=&#34;https://wiki.osdev.org/ISA_DMA&#34;&gt;ISA DMA - OSDev&lt;/a&gt; 处找到。&lt;/p&gt;
&lt;h2 id=&#34;cmosrtc&#34;&gt;CMOS/RTC&lt;/h2&gt;
&lt;p&gt;经典的 CMOS/RTC 的 IO 端口定义也可以找到：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (RTC)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0B00&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* AT Real-Time Clock */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_CRS, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceTemplate&lt;/span&gt; ()  &lt;span style=&#34;color:#75715e&#34;&gt;// _CRS: Current Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0070&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0070&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0074&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0074&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IRQNoFlags&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_STA, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _STA: Status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; ((STAS &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Else
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它的 IO Port 是 0x70-0x71 和 0x74-0x78，中断号 8，和 &lt;a href=&#34;https://wiki.osdev.org/CMOS&#34;&gt;CMOS - OSDev&lt;/a&gt; 是一致的。&lt;/p&gt;
&lt;h2 id=&#34;启动图片&#34;&gt;启动图片&lt;/h2&gt;
&lt;p&gt;启动图片以 BMP 格式保存在内存中，基地址记录在 BGRT 表中。可以直接从 &lt;code&gt;/sys/firmware/acpi/bgrt/image&lt;/code&gt; 获取启动的图片内容。&lt;/p&gt;
&lt;h2 id=&#34;pcie&#34;&gt;PCIe&lt;/h2&gt;
&lt;h3 id=&#34;root-bridge&#34;&gt;Root Bridge&lt;/h3&gt;
&lt;p&gt;PCIe 总线是自带枚举功能的，所以只需要找到 Root Bridge，其他设备都可以枚举出来。而 ACPI 就提供了寻找 Root Bridge 的方法。&lt;/p&gt;
&lt;p&gt;搜索 &lt;code&gt;PNP0A08&lt;/code&gt; 可以找到 PCIe 总线：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// PCIe Bus 00
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (PC00)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0A08&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* PCI Express Bus */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_CID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0A03&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* PCI Bus */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _CID: Compatible ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (P0RS, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceTemplate&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;WordBusNumber&lt;/span&gt; (ResourceProducer, MinFixed, MaxFixed, PosDecode,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0015&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0016&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt; (Decode16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0CF8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0CF8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Alignment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;WordIO&lt;/span&gt; (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0CF7&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0CF8&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, , TypeStatic, DenseTranslation)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;WordIO&lt;/span&gt; (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x57FF&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4800&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, , TypeStatic, DenseTranslation)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;DWordMemory&lt;/span&gt; (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000A0000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000BFFFF&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00020000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, , AddressRangeMemory, TypeStatic)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;DWordMemory&lt;/span&gt; (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, _Y00, AddressRangeMemory, TypeStatic)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;DWordMemory&lt;/span&gt; (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFE010000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFE010FFF&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00001000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, , AddressRangeMemory, TypeStatic)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;DWordMemory&lt;/span&gt; (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFD000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFE7FFFFF&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01800000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, , AddressRangeMemory, TypeStatic)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;DWordMemory&lt;/span&gt; (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x70000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x92FFFFFF&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x23000000&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, , AddressRangeMemory, TypeStatic)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;QWordMemory&lt;/span&gt; (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000000&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Granularity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000000&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Range Minimum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000000&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Range Maximum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000000&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Translation Offset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000000&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ,, , AddressRangeMemory, TypeStatic)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_CRS, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _CRS: Current Resource Settings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;EROM&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; (P0RS) &lt;span style=&#34;color:#75715e&#34;&gt;/* \_SB_.PC00.P0RS */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面省略掉了很多内容，只保留了 Root Bridge 的资源 &lt;code&gt;_CRS&lt;/code&gt;，这部分内容和 Linux 的 dmesg 是一致的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ACPI: PCI Root Bridge [PC00] (domain 0000 [bus 00-15])
acpi PNP0A08:00: _OSC: OS supports [ExtendedConfig ASPM ClockPM Segments MSI]
acpi PNP0A08:00: _OSC: platform does not support [SHPCHotplug AER LTR]
acpi PNP0A08:00: _OSC: OS now controls [PCIeHotplug PME PCIeCapability]
acpi PNP0A08:00: host bridge window expanded to [mem 0xfd000000-0xfe7fffff window]; [mem 0xfd000000-0xfe7fffff window] ignored
PCI host bridge to bus 0000:00
pci_bus 0000:00: root bus resource [io  0x0000-0x0cf7 window]
pci_bus 0000:00: root bus resource [io  0x1000-0x57ff window]
pci_bus 0000:00: root bus resource [mem 0x000a0000-0x000bffff window]
pci_bus 0000:00: root bus resource [mem 0x000c4000-0x000c7fff window]
pci_bus 0000:00: root bus resource [mem 0xfd000000-0xfe7fffff window]
pci_bus 0000:00: root bus resource [mem 0x70000000-0x92ffffff window]
pci_bus 0000:00: root bus resource [bus 00-15]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Linux 相关代码在 &lt;code&gt;acpi_pci_root_create&lt;/code&gt; 函数中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; pci_bus &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_pci_root_create&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; acpi_pci_root &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;root,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				     &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; acpi_pci_root_ops &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ops,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				     &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; acpi_pci_root_info &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;info,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				     &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sysdata)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_pci_probe_root_resources&lt;/span&gt;(info);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pci_acpi_root_add_resources&lt;/span&gt;(info);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;pci_add_resource&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;info&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;resources, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;secondary);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	bus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pci_create_root_bus&lt;/span&gt;(NULL, busnum, ops&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pci_ops,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				  sysdata, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;info&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;resources);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mcfg&#34;&gt;MCFG&lt;/h3&gt;
&lt;p&gt;除了上面的 Root Bridge 以外，还有一个很重要的问题是，如何访问 PCIe 的 Configuration Space。传统的办法是通过 IO Port 0xCF8 和 0xCFC，但是这个方法慢，并且有局限性。而较新的办法是 Enhanced Configuration Access Mechanism (ECAM)，把 PCIe 设备的 Configuration Space 映射到内存中，那么就需要一个基地址。这个基地址是在 MCFG 表中给出的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[02Ch 0044   8]                 Base Address : 0000000060000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;内核输出：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PCI: MMCONFIG for domain 0000 [bus 00-ff] at [mem 0x60000000-0x6fffffff] (base 0x60000000)
PCI: MMCONFIG at [mem 0x60000000-0x6fffffff] reserved in E820
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有了这个信息以后，就可以计算出要访问 Configuration Space 时 MMIO 的地址了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_ecam.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;相关文档&#34;&gt;相关文档&lt;/h3&gt;
&lt;p&gt;Linux 的文档 &lt;a href=&#34;https://docs.kernel.org/PCI/acpi-info.html&#34;&gt;ACPI considerations for PCI host bridges&lt;/a&gt; 对 ACPI PCIe 描述的比较详细，摘录如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The general rule is that the ACPI namespace should describe everything the
OS might use unless there’s another way for the OS to find it [1, 2].

For example, there’s no standard hardware mechanism for enumerating PCI host
bridges, so the ACPI namespace must describe each host bridge, the method
for accessing PCI config space below it, the address space windows the host
bridge forwards to PCI (using _CRS), and the routing of legacy INTx
interrupts (using _PRT).

PCI devices, which are below the host bridge, generally do not need to be
described via ACPI. The OS can discover them via the standard PCI
enumeration mechanism, using config accesses to discover and identify
devices and read and size their BARs. However, ACPI may describe PCI devices
if it provides power management or hotplug functionality for them or if the
device has INTx interrupts connected by platform interrupt controllers and a
_PRT is needed to describe those connections.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;文档和上面讲的是一致的，对于 PCIe 自己可以枚举出来的，ACPI 就不需要再重复；但是枚举需要首先知道有哪些 Root Bridge 以及 ECAM 的基地址，这个信息只能由 ACPI 来提供。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The PCIe spec requires the Enhanced Configuration Access Method (ECAM)
unless there’s a standard firmware interface for config access, e.g., the
ia64 SAL interface [7]. A host bridge consumes ECAM memory address space and
converts memory accesses into PCI configuration accesses. The spec defines
the ECAM address space layout and functionality; only the base of the
address space is device-specific. An ACPI OS learns the base address from
either the static MCFG table or a _CBA method in the PNP0A03 device.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这一段讲的其实就是 ECAM 与 MCFG 的关系。&lt;/p&gt;
&lt;h3 id=&#34;pcie-设备&#34;&gt;PCIe 设备&lt;/h3&gt;
&lt;p&gt;虽然有了 Root Bridge 以后，PCIe 总线下的设备都可以枚举出来，但是 ACPI 表中也可以记录 PCIe 设备，可以提供更多信息，例如 Power State 等等。具体来说，只需要在 Root Bridge 的结点下继续增加 Device 就可以了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Scope&lt;/span&gt; (_SB)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (PC00)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 00:00.0 DMI3 Registers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (DMI0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 00:04.0 CBDMA Registers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (CB0A)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00040000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (CB0B)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00040001&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 00:05.0 MM/Vt-d Configuration Registers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (IIM0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00050000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 00:08.0 Ubox Registers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (UBX0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00080000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (ALZA)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000E0000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (DISP)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000F0000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (IHC1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00100000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (IHC2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00100001&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (IIDR)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00100002&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (IMKT)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00100003&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (IHC3)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00100004&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (MRO0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00110000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (MRO1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00110001&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 00:14.0 USB 3.0 xHCI Controller
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (XHCI)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00140000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (OTG0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00140001&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 00:14.2 PCH Thermal Subsystem
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (TERM)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00140002&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (CAMR)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00140003&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (NTHP)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00140004&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 00:16.0 PCH CSME HECI #1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (HEC1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00160000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (HEC2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00160001&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (IDER)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00160002&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (MEKT)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00160003&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (HEC3)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00160004&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (NAN1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00180000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;_ADR&lt;/code&gt; 编码了设备的 Device 和 Function，ACPI 标准 Table 6.2 定义：高 word 表示 Device，低 word 表示 Function。所以上面的 &lt;code&gt;DMI0&lt;/code&gt; 就是 &lt;code&gt;Device=0, Function=0&lt;/code&gt;，&lt;code&gt;CB0A&lt;/code&gt; 就是 &lt;code&gt;Device=4, Function=0&lt;/code&gt;，&lt;code&gt;CB0B&lt;/code&gt; 就是 &lt;code&gt;Device=4, Function=1&lt;/code&gt;。这些与 &lt;code&gt;lspci&lt;/code&gt; 的输出基本是一致的，有一些设备没有出现，可能和具体的 CPU 型号有关：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;00:00.0 Host bridge: Intel Corporation Sky Lake-E DMI3 Registers (rev 07)
00:04.0 System peripheral: Intel Corporation Sky Lake-E CBDMA Registers (rev 07)
00:04.1 System peripheral: Intel Corporation Sky Lake-E CBDMA Registers (rev 07)
00:04.2 System peripheral: Intel Corporation Sky Lake-E CBDMA Registers (rev 07)
00:04.3 System peripheral: Intel Corporation Sky Lake-E CBDMA Registers (rev 07)
00:04.4 System peripheral: Intel Corporation Sky Lake-E CBDMA Registers (rev 07)
00:04.5 System peripheral: Intel Corporation Sky Lake-E CBDMA Registers (rev 07)
00:04.6 System peripheral: Intel Corporation Sky Lake-E CBDMA Registers (rev 07)
00:04.7 System peripheral: Intel Corporation Sky Lake-E CBDMA Registers (rev 07)
00:05.0 System peripheral: Intel Corporation Sky Lake-E MM/Vt-d Configuration Registers (rev 07)
00:05.2 System peripheral: Intel Corporation Sky Lake-E RAS (rev 07)
00:05.4 PIC: Intel Corporation Sky Lake-E IOAPIC (rev 07)
00:08.0 System peripheral: Intel Corporation Sky Lake-E Ubox Registers (rev 07)
00:08.1 Performance counters: Intel Corporation Sky Lake-E Ubox Registers (rev 07)
00:08.2 System peripheral: Intel Corporation Sky Lake-E Ubox Registers (rev 07)
00:14.0 USB controller: Intel Corporation 200 Series/Z370 Chipset Family USB 3.0 xHCI Controller
00:14.2 Signal processing controller: Intel Corporation 200 Series PCH Thermal Subsystem
00:16.0 Communication controller: Intel Corporation 200 Series PCH CSME HECI #1
00:17.0 SATA controller: Intel Corporation 200 Series PCH SATA controller [AHCI mode]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;前面提到的一些传统的设备，比如 DMA Controller，RTC 等，其实就是在 PCIe 下的 ISA bridge 下声明的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Scope&lt;/span&gt; (_SB)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (PC00)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 00:1f.0 ISA bridge: Intel Corporation X299 Chipset LPC/eSPI Controller
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (LPC0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_ADR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x001F0000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _ADR: Address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (DMAC)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0200&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* PC-class DMA Controller */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (RTC)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0B00&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* AT Real-Time Clock */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (PIC)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0000&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* 8259-compatible Programmable Interrupt Controller */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (FPU)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0C04&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* x87-compatible Floating Point Processing Unit */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (TMR)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0100&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* PC-class System Timer */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Device&lt;/span&gt; (HPET)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#a6e22e&#34;&gt;EisaId&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNP0103&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* HPET System Timer */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;修改-acpi-表内容&#34;&gt;修改 ACPI 表内容&lt;/h2&gt;
&lt;p&gt;想要修改 ACPI 表内容，最根本的办法是修改固件，但是修改起来比较麻烦。Linux 提供了一些方法来运行时打补丁：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/acpi/initrd_table_override.html&#34;&gt;Upgrading ACPI tables via initrd&lt;/a&gt;：覆盖 ACPI 表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/acpi/ssdt-overlays.html&#34;&gt;SSDT Overlays&lt;/a&gt;：添加额外的 SSDT 表，类似 DT Overlay&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在黑苹果中，一般则是在 Bootloader(Clover/OpenCore) 一步把 ACPI 表修改了，如 &lt;a href=&#34;https://elitemacx86.com/threads/how-to-patch-laptop-dsdt-and-ssdts.178/&#34;&gt;How to Patch Laptop DSDT and SSDTs&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;acpi-硬件规范&#34;&gt;ACPI 硬件规范&lt;/h2&gt;
&lt;p&gt;除了用来描述系统中已有的设备，ACPI 还对硬件做出了一些要求，在标准的 Chapter 4 ACPI Hardware Specification 中定义。例如，电源按钮是如何通知操作系统的？操作系统的重启和关机是怎么实现的？&lt;/p&gt;
&lt;h3 id=&#34;电源按钮&#34;&gt;电源按钮&lt;/h3&gt;
&lt;p&gt;首先来看电源按钮（Power Button）。在 ACPI 中，定义了两种 Power Button 的实现方法，第一种就是比较经典的硬件按钮 + 中断的模式，当按下按钮的时候，中断状态（&lt;code&gt;PWRBTN_STS&lt;/code&gt;）拉高，如果此时中断使能（&lt;code&gt;PWRBTN_EN&lt;/code&gt;）也为高，就触发中断。这时候操作系统就知道电源键被按下了，开始进行关机操作。&lt;/p&gt;
&lt;p&gt;第二种实现方法则利用了 ACPI 的可编程性。具体来说，当按下电源键的时候，操作系统会收到一个 SCI（System Control Interrupt），此时操作系统会根据中断编号，去执行 ACPI 中的函数，函数去读取当前的电源键状态，然后调用 &lt;code&gt;Notify&lt;/code&gt; 函数来通知操作系统，电源键被按下了。&lt;/p&gt;
&lt;p&gt;在使用虚拟机的时候，会知道 ACPI Shutdown 的说法，其实就是模拟了按下电源键的行为。QEMU 的相关代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_pm1_evt_power_down&lt;/span&gt;(ACPIREGS &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ar)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ar&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pm1.evt.en &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; ACPI_BITMASK_POWER_BUTTON_ENABLE) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ar&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pm1.evt.sts &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; ACPI_BITMASK_POWER_BUTTON_STATUS;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ar&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tmr.&lt;span style=&#34;color:#a6e22e&#34;&gt;update_sci&lt;/span&gt;(ar);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个函数模拟了电源按钮，如果 &lt;code&gt;PWRBTN_EN=1&lt;/code&gt;，就设置 &lt;code&gt;PWRBTN_STS=1&lt;/code&gt; 并发送 SCI 中断。&lt;/p&gt;
&lt;p&gt;那么，操作系统如何访问 &lt;code&gt;PWRBTN_EN&lt;/code&gt; 和 &lt;code&gt;PWRBTN_STS&lt;/code&gt; 呢？在 FADP(Fixed ACPI Descrption Table) 表中，可以找到 PM1A/B Event Block Address 和 PM1A/B Control Block Address：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[038h 0056   4]     PM1A Event Block Address : 0000B000
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 0000B004
[044h 0068   4]   PM1B Control Block Address : 00000000

[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么就可以通过 IO Port 来访问这些寄存器了。&lt;code&gt;PWNBTN_STS&lt;/code&gt; 属于 PM1 Status Registers，地址是 &lt;code&gt;PM1A/B Event Block Address=0xB000&lt;/code&gt;；&lt;code&gt;PWNBTN_EN&lt;/code&gt; 属于 PM1 Enable Registers，地址是 &lt;code&gt;PM1A/B Event Block Register + PM1 Event Block Length / 2=0xB002&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这里的 PM1A/B 是 Register Grouping，使得硬件上可以把寄存器实现在两个不同的芯片上，分别实现一部分功能。操作系统读取的时候，要读取 A 和 B 然后 OR 起来，写入的时候则是 A 和 B 都要写。像上面的情况，就是只有 A 没有 B，那就直接读写 A 就可以了。&lt;/p&gt;
&lt;h3 id=&#34;关机&#34;&gt;关机&lt;/h3&gt;
&lt;p&gt;另一方面，如果 OS 想要关机，那要怎么告诉硬件呢？还是通过 ACPI。在 PM1 Control Registers 中，可以通过写入 &lt;code&gt;SLP_TYPx&lt;/code&gt; 和 &lt;code&gt;SLP_EN&lt;/code&gt; 字段来进行休眠或者关机操作。&lt;/p&gt;
&lt;p&gt;下面是 QEMU 针对 &lt;code&gt;SLP_EN&lt;/code&gt; 写入的处理代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* ACPI PM1aCNT */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_pm1_cnt_write&lt;/span&gt;(ACPIREGS &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ar, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ar&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pm1.cnt.cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(ACPI_BITMASK_SLEEP_ENABLE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; ACPI_BITMASK_SLEEP_ENABLE) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/* change suspend type */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; sus_typ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (sus_typ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* soft power off */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;qemu_system_shutdown_request&lt;/span&gt;(SHUTDOWN_CAUSE_GUEST_SHUTDOWN);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;qemu_system_suspend_request&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sus_typ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ar&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pm1.cnt.s4_val) { &lt;span style=&#34;color:#75715e&#34;&gt;/* S4 request */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;qapi_event_send_suspend_disk&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;qemu_system_shutdown_request&lt;/span&gt;(SHUTDOWN_CAUSE_GUEST_SHUTDOWN);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pm-timer&#34;&gt;PM Timer&lt;/h3&gt;
&lt;p&gt;ACPI 还提供了一个 3.579545 MHz 的时钟 PM_TMR。QEMU 相关代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* PM Timer ticks per second (HZ) */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PM_TIMER_FREQUENCY  3579545
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64_t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_pm_tmr_get_clock&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;muldiv64&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;qemu_clock_get_ns&lt;/span&gt;(QEMU_CLOCK_VIRTUAL), PM_TIMER_FREQUENCY,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    NANOSECONDS_PER_SECOND);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Linux 也可以把它当成一个时钟源：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-dmesg&#34; data-lang=&#34;dmesg&#34;&gt;clocksource: acpi_pm: mask: 0xffffff max_cycles: 0xffffff, max_idle_ns: 2085701024 ns
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;相关代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * The I/O port the PMTMR resides at.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * The location is detected during setup_arch(),
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * in arch/i386/kernel/acpi/boot.c
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;u32 pmtmr_ioport __read_mostly;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; u32 &lt;span style=&#34;color:#a6e22e&#34;&gt;read_pmtmr&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/* mask the output to 24 bits */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inl&lt;/span&gt;(pmtmr_ioport) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; ACPI_PM_MASK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; u64 &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_pm_read&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; clocksource &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (u64)&lt;span style=&#34;color:#a6e22e&#34;&gt;read_pmtmr&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; clocksource clocksource_acpi_pm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	.name		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;acpi_pm&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	.rating		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	.read		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; acpi_pm_read,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	.mask		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (u64)ACPI_PM_MASK,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	.flags		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CLOCK_SOURCE_IS_CONTINUOUS,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Number of PMTMR ticks expected during calibration run */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PMTMR_TICKS_PER_SEC 3579545
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; __init &lt;span style=&#34;color:#a6e22e&#34;&gt;init_acpi_pm_clocksource&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clocksource_register_hz&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;clocksource_acpi_pm,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;						PMTMR_TICKS_PER_SEC);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gpe&#34;&gt;GPE&lt;/h3&gt;
&lt;p&gt;除了上面 PM1 中提到的一些中断来源，ACPI 还提供了通用的 General Purpose Event，硬件可以自定义一些中断编号，依然是通过 SCI 中断通知操作系统，操作系统根据 GPE 的 STS 寄存器来判断哪个 GPE 触发了中断，然后执行对应的 ACPI 函数。GPE 的地址也是在 FADT 中提供：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[050h 0080   4]           GPE0 Block Address : 0000AFE0

[05Ch 0092   1]            GPE0 Block Length : 04
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 DSDT 的 &lt;code&gt;\_GPE&lt;/code&gt; 下面，可以定义函数，在 GPE 到达的时候，会被操作系统执行。格式是 &lt;code&gt;\_GPE._Exx&lt;/code&gt; 或 &lt;code&gt;\_GPE._Lxx&lt;/code&gt;，E 表示 Edge sensitive，L 表示 Level sensitive。例如操作系统判断收到了 GPE 4，那可能会执行 &lt;code&gt;\_GPE._L04&lt;/code&gt; 或 &lt;code&gt;\_GPE._E04&lt;/code&gt; 函数。&lt;/p&gt;
&lt;h2 id=&#34;pcie-hot-plug&#34;&gt;PCIe Hot Plug&lt;/h2&gt;
&lt;p&gt;在 QEMU 中，如果虚拟机要进行 PCIe Hot Plug 的时候，例如要增加 PCIe 设备，或者删除已有的 PCIe 设备，需要设法通知操作系统，告知操作系统哪个地方有新的设备，或者哪个已有的设备被弹出。QEMU 的实现文档是&lt;a href=&#34;https://www.qemu.org/docs/master/specs/acpi_pci_hotplug.html&#34;&gt;QEMU&amp;lt;-&amp;gt;ACPI BIOS PCI hotplug interface&lt;/a&gt;，这里结合代码来解释一下。&lt;/p&gt;
&lt;p&gt;在 QEMU 中，要插入一个新的 PCIe 设备的时候，按照设备的 bus 和 slot 设置位为 1，并且发送 GPE：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_pcihp_device_plug_cb&lt;/span&gt;(HotplugHandler &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;hotplug_dev, AcpiPciHpState &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               DeviceState &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dev, Error &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;errp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bsel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_pcihp_get_bsel&lt;/span&gt;(bus);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;g_assert&lt;/span&gt;(bsel &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;acpi_pcihp_pci_status[bsel].up &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1U&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; slot);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_send_event&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;DEVICE&lt;/span&gt;(hotplug_dev), ACPI_PCI_HOTPLUG_STATUS);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// acpi_send_event eventually calls piix4_send_gpe
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;piix4_send_gpe&lt;/span&gt;(AcpiDeviceIf &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;adev, AcpiEventStatusBits ev)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PIIX4PMState &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PIIX4_PM&lt;/span&gt;(adev);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_send_gpe_event&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ar, s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;irq, ev);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_send_gpe_event&lt;/span&gt;(ACPIREGS &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ar, qemu_irq irq,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         AcpiEventStatusBits status)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ar&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;gpe.sts[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;acpi_update_sci&lt;/span&gt;(ar, irq);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看头文件，可知 &lt;code&gt;ACPI_PCI_HOTPLUG_STATUS=2&lt;/code&gt;，根据上面的代码，可知这实际上就是发送了 GPE1。操作系统会执行 &lt;code&gt;\_GPE._E01&lt;/code&gt; 函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Scope&lt;/span&gt; (_GPE)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; (_HID, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ACPI0006&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* GPE Block Device */&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// _HID: Hardware ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (_E01, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)  &lt;span style=&#34;color:#75715e&#34;&gt;// _Exx: Edge-Triggered GPE, xx=0x00-0xFF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Acquire&lt;/span&gt; (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PCI0.BLCK, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFFF&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PCI0.&lt;span style=&#34;color:#a6e22e&#34;&gt;PCNT&lt;/span&gt; () &lt;span style=&#34;color:#75715e&#34;&gt;// PCIe Notify
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Release&lt;/span&gt; (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_SB.PCI0.BLCK)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个代码上了锁，然后调用 &lt;code&gt;\_SB.PCI0.PCNT&lt;/code&gt; 函数，&lt;code&gt;PCNT&lt;/code&gt; 函数定义如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// PCIe Status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;OperationRegion&lt;/span&gt; (PCST, SystemIO, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAE00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Field&lt;/span&gt; (PCST, DWordAcc, NoLock, WriteAsZeros)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PCIU,   &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Up
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    PCID,   &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Down
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// PCIe Notify
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (PCNT, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BNUM &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Zero &lt;span style=&#34;color:#75715e&#34;&gt;// Bus Num = 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;DVNT&lt;/span&gt; (PCIU, One) &lt;span style=&#34;color:#75715e&#34;&gt;// Device Notify
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;DVNT&lt;/span&gt; (PCID, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Device Notify
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码中，PCIU 的意思是 PCIe Up，就是新出现的设备；PCID 的意思是 PCIe Down，就是要删除的设备。PCIU 和 PCID 都要通过 IO Port 访问，根据上面的 &lt;code&gt;OperationRegion&lt;/code&gt; 可知 &lt;code&gt;PCIU=0xAE00&lt;/code&gt;，&lt;code&gt;PCID=0xAE04&lt;/code&gt;。你可能已经猜到了 &lt;code&gt;PCIU&lt;/code&gt; 和 &lt;code&gt;PCID&lt;/code&gt; 的实现：当 CPU 读取这两个 IO Port 的时候，就会返回前面 &lt;code&gt;acpi_pcihp_device_plug_cb&lt;/code&gt; 函数写入的 &lt;code&gt;acpi_pcihp_pci_status&lt;/code&gt; 数组：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pci_read&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;opaque, hwaddr addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (addr) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; PCI_UP_BASE:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;acpi_pcihp_pci_status[bsel].up;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;legacy_piix) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;acpi_pcihp_pci_status[bsel].up &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;trace_acpi_pci_up_read&lt;/span&gt;(val);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; PCI_DOWN_BASE:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;acpi_pcihp_pci_status[bsel].down;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;trace_acpi_pci_down_read&lt;/span&gt;(val);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此在 &lt;code&gt;PCNT&lt;/code&gt; 函数中，读取 &lt;code&gt;PCIU&lt;/code&gt; 和 &lt;code&gt;PCID&lt;/code&gt; 就可以知道一个 Bitmap，记录了哪些设备出现了变化。最后一步就是通知操作系统了。在 ACPI 中，可以调用 &lt;code&gt;Notify&lt;/code&gt; 函数，用于通知操作系统，通知的参数见 Table 5.187，这里列出来前面几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0: Bus Check, This notification is performed on a device object to indicate to OSPM that it needs to perform a Plug and Play re-enumeration operation on the device tree starting from the point where it has been notified&lt;/li&gt;
&lt;li&gt;1: Device Check, Used to notify OSPM that the device either appeared or disappeared. If the device has appeared, OSPM will re-enumerate from the parent.&lt;/li&gt;
&lt;li&gt;2: Device Wake, Used to notify OSPM that the device has signaled its wake event, and that OSPM needs to notify OSPM native device driver for the device.&lt;/li&gt;
&lt;li&gt;3: Eject Request, Used to notify OSPM that the device should be ejected, and that OSPM needs to perform the Plug and Play ejection operation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;PCNT&lt;/code&gt; 函数调用 &lt;code&gt;DVNT&lt;/code&gt; 函数来进行最终的 &lt;code&gt;Notify&lt;/code&gt;，对于 PCI Up，需要发送 1(Device Check) 让操作系统新的设备出现；对于 PCI Down，需要发送 3(Eject Request) 让操作系统弹出设备。这就解释了 &lt;code&gt;PCNT&lt;/code&gt; 为什么要这样实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// PCIe Notify
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (PCNT, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NotSerialized)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BNUM &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Zero &lt;span style=&#34;color:#75715e&#34;&gt;// Bus Num = 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;DVNT&lt;/span&gt; (PCIU, One) &lt;span style=&#34;color:#75715e&#34;&gt;// Device Notify(1=Device Check)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;DVNT&lt;/span&gt; (PCID, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Device Notify(3=Eject Request)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;DVNT&lt;/code&gt; 的实现方法很粗暴，就是检查各个位，然后发送 &lt;code&gt;Notify&lt;/code&gt; 到相应的 PCIe Slot 上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Device Notify
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; (DVNT, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, NotSerialized)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; ((Arg0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Notify&lt;/span&gt; (S18, Arg1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; ((Arg0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Notify&lt;/span&gt; (S20, Arg1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;If&lt;/span&gt; ((Arg0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Notify&lt;/span&gt; (S28, Arg1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// omitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就完成了整个 PCIe Hot Plug 的过程。回顾一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QEMU 要进行 PCIe Hot Plug&lt;/li&gt;
&lt;li&gt;QEMU 记录要 Hot Plug 设备到数组中&lt;/li&gt;
&lt;li&gt;QEMU 发送 GPE&lt;/li&gt;
&lt;li&gt;OS 执行 GPE 1 Handler&lt;/li&gt;
&lt;li&gt;Handler 读取 PCIU/PCID，根据 Bitmap 去 Notify&lt;/li&gt;
&lt;li&gt;OS 根据 Notify 的设备进行对应的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，大部分的工作其实是 QEMU 完成的，OS 只需要在收到 SCI 的时候，判断是 GPE 1 事件，执行对应的处理函数，等待 Notify 的到来。&lt;/p&gt;
&lt;h2 id=&#34;power-state&#34;&gt;Power State&lt;/h2&gt;
&lt;p&gt;ACPI 定义的 Power State：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/acpi_power.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G0-G3: 全局状态，G0 表示正在工作&lt;/li&gt;
&lt;li&gt;S0-S5：睡眠状态，S0 表示正在工作，S5 表示关机&lt;/li&gt;
&lt;li&gt;D0-D3：设备状态&lt;/li&gt;
&lt;li&gt;C0-Cn：CPU 状态&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>InfiniBand 学习笔记</title>
      <link>https://jia.je/hardware/2022/12/06/infiniband-notes/</link>
      <pubDate>Tue, 06 Dec 2022 18:47:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/12/06/infiniband-notes/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/networking/infiniband.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.snia.org/sites/default/files/files2/files2/SDC2013/presentations/Hardware/DavidDeming_Infiniband_Architectural_Overview.pdf&#34;&gt;Infiniband Architecture Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.afs.enea.it/asantoro/V1r1_2_1.Release_12062007.pdf&#34;&gt;InfiniBand Architecture Specification Volume 1 Release 1.2.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cw.infinibandta.org/document/dl/8566&#34;&gt;InfiniBand Architecture Specification Volume 2 Release 1.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cali-doc.unilim.fr/_media/mpi/intel-mpi/infinibandchap42.pdf&#34;&gt;An Introduction to the InfiniBand Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;InfiniBand Network Architecture - MindShare&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/InfiniBand&#34;&gt;ArchWiki - InfiniBand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;概览&#34;&gt;概览&lt;/h2&gt;
&lt;p&gt;InfiniBand 的网络分为两层，第一层是由 End Node 和 Switch 组成的 Subnet，第二层是由 Router 连接起来的若干个 Subnet。有点类似以太网以及 IP 的关系，同一个二层内通过 MAC 地址转发，三层间通过 IP 地址转发。&lt;/p&gt;
&lt;p&gt;在 IB 网络中，End Node 一般是插在结点上的 IB 卡（Host Channel Adapter，HCA）或者是存储结点上的 Target Channel Adapter。End Node 之间通过 Switch 连接成一个 Subnet，由 Subnet Manager 给每个 Node 和 Switch 分配 Local ID，同一个 Subnet 中通过 LID（Local ID）来路由。但是 LID 位数有限，为了进一步扩展，可以用 Router 连接多个 Subnet，此时要通过 GID（Global ID）来路由。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/iba.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ib_am.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;queue-pair&#34;&gt;Queue Pair&lt;/h2&gt;
&lt;p&gt;回顾一下，以太网网卡在传输的时候，涉及到两类队列，分别用于发送和接收，由操作系统来负责维护。当要发送的时候，操作系统向发送队列上插入一项，并提供要发送的数据的指针，然后让网卡自己进行 DMA 并发送；同时，操作系统也会分配一些缓冲区，填入接收队列，当网卡接收到新的数据的时候，就会进行 DMA 把数据填入缓冲区，然后通过中断让操作系统去进行处理。&lt;/p&gt;
&lt;p&gt;在 IB 中，也有类似的概念，就是 Queue Pair（QP），其实就是 Send Queue 和 Receive Queue 成对出现。另外还有 Completion Queue，当请求完成的时候，会在 CQ 上得到结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ib_qp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;transport-functions&#34;&gt;Transport Functions&lt;/h2&gt;
&lt;p&gt;有了 Queue Pair 以后，上层应用就可以进行一些操作了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SEND：发送数据&lt;/li&gt;
&lt;li&gt;RESYNC：同步 PSN&lt;/li&gt;
&lt;li&gt;RDMA WRITE：远程写入内存&lt;/li&gt;
&lt;li&gt;RDMA READ：远程读取内存&lt;/li&gt;
&lt;li&gt;ATOMIC：远程进行内存原子操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有发就有收，接收方需要在 Receive Queue 中准备好接受数据的缓冲区。&lt;/p&gt;
&lt;p&gt;此外，为了在保证安全性以及正确性的前提下，允许 RDMA 操作，应用需要首先进行 Memory Binding 操作，标记哪些内存区域可以通过 RDMA 访问，并且生成一个 &lt;code&gt;R_KEY&lt;/code&gt; 来标记这片内存区域。之后的 RDMA WRITE 和 RDMA READ 需要使用同样的 &lt;code&gt;R_KEY&lt;/code&gt; 来进行访问。&lt;/p&gt;
&lt;h2 id=&#34;transport-services&#34;&gt;Transport Services&lt;/h2&gt;
&lt;p&gt;IB 支持四种 Transport Service，当 QP 在创建的时候，就需要从以下的四种中选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reliable Connection(RC)&lt;/li&gt;
&lt;li&gt;Reliable Datagram(RD)&lt;/li&gt;
&lt;li&gt;Unreliable Datagram(UD)&lt;/li&gt;
&lt;li&gt;Unreliable Connection(UC)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于 IPoIB 等传输其他协议的情况，也可以直接封装：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Raw IPv6 Datagram&lt;/li&gt;
&lt;li&gt;Raw Ethertype Datagram&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;几种 Transport Service 的对比：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ib_comparison.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在编程的时候，需要知道对端的 LID（Local ID）、QPN（Queue Pair Number）和 PSN（Packet Sequence Number），才能进行通信。如果要进行 RDMA，还需要知道 &lt;code&gt;R_Key&lt;/code&gt; 和内存地址。这些信息一般是通过 TCP 来传输的。&lt;/p&gt;
&lt;h2 id=&#34;switches&#34;&gt;Switches&lt;/h2&gt;
&lt;p&gt;在 IB 网络中，交换机用来连接同一个 IB Subnet 中的 End Node。在 Subnet 中，通过 Local ID 来路由，而 Local ID 是由 Subnet Manager 负责分配的。Subnet Manager 扫描网络中的交换机和节点，动态分配 LID，并且根据网络拓扑，计算出交换机的转发表。&lt;/p&gt;
&lt;p&gt;交换机的转发表就是一个 LID 到端口号的映射，可以实现为线性表（数组，下标是 LID）或随机访问表（CAM，用 LID 查端口号）。&lt;/p&gt;
&lt;p&gt;由于 LID 唯一确定了转发路径，所以如果网络有冗余，从一个 End Node 到另一个 End Node 有多条路径，那么为了利用上不同路径的带宽，每条路径都要分配一个 LID。为了简化，在分配的时候，Subnet Manager 会分配一段连续的 LID，具体来说，是 &lt;code&gt;2^{LMC}&lt;/code&gt; 个，LMC 是 LID Mask Control，表示低多少位 Mask 掉属于同一个 Endpoint。例如 Base LID=4，LMC=2，那么实际上分配的 LID 是 &lt;code&gt;{4,5,6,7}&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;opensm 的 LID 分配算法可以在&lt;a href=&#34;https://github.com/linux-rdma/opensm/blob/844ab3b7edaad983449b5d3a4a773088b8daa299/opensm/osm_lid_mgr.c#L290&#34;&gt;代码&lt;/a&gt;中找到。&lt;/p&gt;
&lt;p&gt;LID 是一个 16 位的整数，所以同一个 Subnet 中可以连接的设备数量有限。更多的话就需要多个 Subnet。LID 定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0x0000：Reserved&lt;/li&gt;
&lt;li&gt;0xFFFF：Permissive，目标 QP0&lt;/li&gt;
&lt;li&gt;0x0001-0xBFFF：Unicast&lt;/li&gt;
&lt;li&gt;0xC000-0xFFFE：Multicast&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想要做隔离，可以创建一个 Partition，类似 VLAN 的概念，通过 &lt;code&gt;P_Key&lt;/code&gt; 来判断是否属于同一个 Partition。&lt;/p&gt;
&lt;h2 id=&#34;常用命令&#34;&gt;常用命令&lt;/h2&gt;
&lt;p&gt;常用的可以用来调试 IB 的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ibstat&lt;/li&gt;
&lt;li&gt;ibhosts&lt;/li&gt;
&lt;li&gt;ibswitches&lt;/li&gt;
&lt;li&gt;iblinkinfo&lt;/li&gt;
&lt;li&gt;ibping&lt;/li&gt;
&lt;li&gt;ibdiagnet&lt;/li&gt;
&lt;li&gt;qperf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 qperf/ib_send_lat 可以测量带宽和延迟。一个测试例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以太网（udp_lat）：24.5 us&lt;/li&gt;
&lt;li&gt;IPoIB (udp_lat): 8.7 us&lt;/li&gt;
&lt;li&gt;IB (rc, ib_send_lat): 1.02 us&lt;/li&gt;
&lt;li&gt;IB (rc_lat): 3.6 ~ 4.6 us&lt;/li&gt;
&lt;li&gt;IB (uc_lat): 4.2 ~ 5.5 us&lt;/li&gt;
&lt;li&gt;IB (ud_lat): 5.5 ~ 6.4 us&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>升级 Mellanox 网卡固件</title>
      <link>https://jia.je/hardware/2022/11/23/upgrade-mlnx-firmware/</link>
      <pubDate>Wed, 23 Nov 2022 19:24:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/11/23/upgrade-mlnx-firmware/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近发现有一台机器，插上 ConnectX-4 IB 网卡后，内核模块可以识别到设备，但是无法使用，现象是 &lt;code&gt;ibstat&lt;/code&gt; 等命令都看不到设备。降级 OFED 从 5.8 到 5.4 以后问题消失，所以认为可能是新的 OFED 与比较旧的固件版本有兼容性问题，所以尝试升级网卡固件。升级以后，问题就消失了。&lt;/p&gt;
&lt;h2 id=&#34;安装-mft&#34;&gt;安装 MFT&lt;/h2&gt;
&lt;p&gt;首先，在 &lt;a href=&#34;https://network.nvidia.com/products/adapter-software/firmware-tools/&#34;&gt;https://network.nvidia.com/products/adapter-software/firmware-tools/&lt;/a&gt; 下载 MFT，按照指示解压，安装后，启动 mst 服务，就可以使用 &lt;code&gt;mlxfwmanager&lt;/code&gt; 得到网卡的型号以及固件版本：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Device Type: ConnectX4
Description: Mellanox ConnectX-4 Single Port EDR PCIE Adapter LP
PSID:        DEL2180110032
Versions:    Current
  FW         12.20.1820
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;升级固件&#34;&gt;升级固件&lt;/h2&gt;
&lt;p&gt;从 PSID 可以看到，这是 DELL OEM 版本的网卡，可以在 &lt;a href=&#34;https://network.nvidia.com/support/firmware/dell/&#34;&gt;https://network.nvidia.com/support/firmware/dell/&lt;/a&gt; 处寻找最新固件，注意需要保证 PSID 一致，可以找到这个 PSID 的 DELL 固件地址：https://www.mellanox.com/downloads/firmware/fw-ConnectX4-rel-12_28_4512-06W1HY_0JJN39_Ax-FlexBoot-3.6.203.bin.zip。&lt;/p&gt;
&lt;p&gt;下载以后，解压，然后就可以升级固件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mlxfwmanager -u -i fw-ConnectX4-rel-12_28_4512-06W1HY_0JJN39_Ax-FlexBoot-3.6.203.bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;升级以后重启就工作了。&lt;/p&gt;
&lt;p&gt;考虑到类似的情况之后还可能发生，顺便还升级了其他几台机器的网卡，下面是一个例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Device Type: ConnectX4
Description: ConnectX-4 VPI adapter card; FDR IB (56Gb/s) and 40GbE; dual-port QSFP28; PCIe3.0 x8; ROHS R6
PSID:        MT_2170110021
Versions:    Current
  FW         12.25.1020
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意这里的 PSID 是 MT_ 开头，说明是官方版本。这个型号可以在 &lt;a href=&#34;https://network.nvidia.com/support/firmware/connectx4ib/&#34;&gt;https://network.nvidia.com/support/firmware/connectx4ib/&lt;/a&gt; 找到最新的固件，注意 PSID 要正确，可以找到固件下载地址 &lt;a href=&#34;https://www.mellanox.com/downloads/firmware/fw-ConnectX4-rel-12_28_2006-MCX454A-FCA_Ax-UEFI-14.21.17-FlexBoot-3.6.102.bin.zip&#34;&gt;https://www.mellanox.com/downloads/firmware/fw-ConnectX4-rel-12_28_2006-MCX454A-FCA_Ax-UEFI-14.21.17-FlexBoot-3.6.102.bin.zip&lt;/a&gt;。用同样的方法更新即可。&lt;/p&gt;
&lt;p&gt;还有一个 ConnectX-3 的例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Device Type: ConnectX3
Description: ConnectX-3 VPI adapter card; single-port QSFP; FDR IB (56Gb/s) and 40GigE; PCIe3.0 x8 8GT/s; RoHS R6
PSID:        MT_1100120019
Versions:    Current
  FW         2.36.5150
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ConnectX-3 系列的网卡固件可以在 &lt;a href=&#34;https://network.nvidia.com/support/firmware/connectx3ib/&#34;&gt;https://network.nvidia.com/support/firmware/connectx3ib/&lt;/a&gt; 找，根据 PSID，可以找到固件下载地址是 &lt;a href=&#34;http://www.mellanox.com/downloads/firmware/fw-ConnectX3-rel-2_42_5000-MCX353A-FCB_A2-A5-FlexBoot-3.4.752.bin.zip&#34;&gt;http://www.mellanox.com/downloads/firmware/fw-ConnectX3-rel-2_42_5000-MCX353A-FCB_A2-A5-FlexBoot-3.4.752.bin.zip&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;如果遇到 Mellanox 网卡能识别 PCIe，但是不能使用，可以考虑降级 OFED 或者升级网卡固件。&lt;/p&gt;
&lt;p&gt;可以用 mlxfwmanager 查看 PSID 和更新固件。根据 PSID，判断是 OEM（DELL）版本还是官方版本。如果是 OEM 版本，要到对应 OEM 的固件下载地址找，例如 &lt;a href=&#34;https://network.nvidia.com/support/firmware/dell/&#34;&gt;https://network.nvidia.com/support/firmware/dell/&lt;/a&gt;；如果是官方版，在 &lt;a href=&#34;https://network.nvidia.com/support/firmware/firmware-downloads/&#34;&gt;https://network.nvidia.com/support/firmware/firmware-downloads/&lt;/a&gt; 找。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CXL 学习笔记</title>
      <link>https://jia.je/hardware/2022/11/20/cxl-notes/</link>
      <pubDate>Sun, 20 Nov 2022 23:05:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/11/20/cxl-notes/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/pcie.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;前段时间学习了 PCIe，趁此机会，进一步学习一下密切相关的 CXL。&lt;/p&gt;
&lt;p&gt;CXL 的标准是公开下载的：https://www.computeexpresslink.org/download-the-specification，我目前参考的是 2022 年 8 月 1 日的 CXL 3.0 版本。&lt;/p&gt;
&lt;h2 id=&#34;cxl-设备类型&#34;&gt;CXL 设备类型&lt;/h2&gt;
&lt;p&gt;CXL 对 PCIe 的重要的扩展，一是在于让设备可以和 CPU 实现缓存一致性（CXL.cache），二是可以做远程的内存（CXL.mem）。&lt;/p&gt;
&lt;p&gt;具体下来，CXL 标准主要定义了三类设备：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CXL Type 1: 设备带有与 CPU 一致的缓存，实现 CXL.io 和 CXL.cache&lt;/li&gt;
&lt;li&gt;CXL Type 2: 设备带有自己的内存和与 CPU 一致的缓存，实现 CXL.io，CXL.cache 和 CXL.mem&lt;/li&gt;
&lt;li&gt;CXL Type 3: 设备带有自己的内存，实现 CXL.io 和 CXL.mem&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cxl-传输层&#34;&gt;CXL 传输层&lt;/h2&gt;
&lt;h3 id=&#34;cxlio&#34;&gt;CXL.io&lt;/h3&gt;
&lt;p&gt;CXL.io 基本上就是 PCIe 协议：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CXL.io provides a non-coherent load/store interface for I/O devices. Figure
3-1 shows where the CXL.io transaction layer exists in the Flex Bus layered
hierarchy. Transaction types, transaction packet formatting, credit-based
flow control, virtual channel management, and transaction ordering rules
follow the PCIe* definition; please refer to the “Transaction Layer
Specification” chapter of PCIe Base Specification for details. This chapter
highlights notable PCIe operational modes or features that are used for
CXL.io.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CXL 3.0 速度是 64.0 GT/s，使用 PAM4 编码，对应的是 PCIe 6.0。&lt;/p&gt;
&lt;h3 id=&#34;cxlcache&#34;&gt;CXL.cache&lt;/h3&gt;
&lt;p&gt;CXL.cache 每个方向上有三个 channel：请求，响应和数据。考虑到 Host 和 Device 的传输方向，就是六个 channel：D2H Req，D2H Resp，D2H Data，H2D Req，H2D Resp，H2D Data。在 Data channel 上传输的缓存行大小是 64 字节。&lt;/p&gt;
&lt;p&gt;CXL.cache 的缓存行状态采用的是 MESI。&lt;/p&gt;
&lt;p&gt;CXL.cache 传输有三种模式：68B Flit，256B Flit 和 PBR Flit。&lt;/p&gt;
&lt;p&gt;H2D Request 的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valid&lt;/li&gt;
&lt;li&gt;Opcode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Address[51:6]&lt;/code&gt;: 物理地址&lt;/li&gt;
&lt;li&gt;UQID: Unique Queue ID&lt;/li&gt;
&lt;li&gt;CacheID: Only in 256B Flit&lt;/li&gt;
&lt;li&gt;SPID/DPID: Only in PBR Flit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;D2H Response 的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valid&lt;/li&gt;
&lt;li&gt;Opcode&lt;/li&gt;
&lt;li&gt;UQID: Unique Queue ID&lt;/li&gt;
&lt;li&gt;DPID: Only in PBR Flit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;D2H Data 的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valid&lt;/li&gt;
&lt;li&gt;UQID: Unique Queue ID&lt;/li&gt;
&lt;li&gt;ChunkValid: Only in 68B Flit&lt;/li&gt;
&lt;li&gt;Bogus&lt;/li&gt;
&lt;li&gt;Poison: data is corrupted&lt;/li&gt;
&lt;li&gt;BEP: Only in 256B Flit &amp;amp; PBR Flit&lt;/li&gt;
&lt;li&gt;DPID: Only in PBR Flit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;D2H Request 的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valid&lt;/li&gt;
&lt;li&gt;Opcode&lt;/li&gt;
&lt;li&gt;CQID: Command Queue ID&lt;/li&gt;
&lt;li&gt;NT: Non Temporal&lt;/li&gt;
&lt;li&gt;CacheID: Only in 256B Flit&lt;/li&gt;
&lt;li&gt;Address: 46 位物理地址&lt;/li&gt;
&lt;li&gt;SPID/DPID: Only in PBR Flit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;H2D Response 的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valid&lt;/li&gt;
&lt;li&gt;Opcode&lt;/li&gt;
&lt;li&gt;RspData&lt;/li&gt;
&lt;li&gt;RSP_PRE&lt;/li&gt;
&lt;li&gt;CQID: Command Queue ID&lt;/li&gt;
&lt;li&gt;CacheID: Only in 256B Flit&lt;/li&gt;
&lt;li&gt;DPID: Only in PBR Flit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;H2D Data 的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valid&lt;/li&gt;
&lt;li&gt;CQID: Command Queue ID&lt;/li&gt;
&lt;li&gt;ChunkValid: Only in 68B Flit&lt;/li&gt;
&lt;li&gt;Bogus&lt;/li&gt;
&lt;li&gt;GO-Err&lt;/li&gt;
&lt;li&gt;CacheID: Only in 256B Flit&lt;/li&gt;
&lt;li&gt;DPID: Only in PBR Flit&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;请求类型&#34;&gt;请求类型&lt;/h4&gt;
&lt;p&gt;首先考虑 Host 会发送的请求。&lt;/p&gt;
&lt;p&gt;第一种是 SnpData，例如在 Host 在读取的时候出现缺失，此时需要向 Device 发送 Snoop，获取最新的 Dirty 的 Data，或者让 Device 的缓存行降级为 Shared 状态。&lt;/p&gt;
&lt;p&gt;Device 收到 SnpData 后，如果发现缓存行不在缓存中（状态是 I），会回复一个 RspIHitI；如果缓存行在缓存中且数据没有修改（状态是 S 或者 E），降级到 S，会回复一个 RspSHitSE；如果缓存行是 dirty（状态是 M），可以选择降级到 S，然后回复 RspSFwdM 以及缓存行的数据，也可以选择变成 Invalid，回复 RspIFwdM 以及缓存行的数据。&lt;/p&gt;
&lt;p&gt;可以看到，这些 D2H Response 的 Opcode 的名字格式很有规律，&lt;code&gt;Rsp+A+Hit/Fwd+B&lt;/code&gt;，A 表示新的缓存行状态，B 是原来的缓存行状态，Hit 不附带数据，Fwd 附带数据。&lt;/p&gt;
&lt;p&gt;第二种是 SnpInv，例如 Host 要写入缓存，就要 invalidate 其他缓存。Device 收到以后，可能返回 RspIHitI、RspIHitSE 和 RspIFwdM，分别对应不同的初始状态，最终都是 Invalid 态。&lt;/p&gt;
&lt;p&gt;第三种是 SnpCur，获取当前的缓存行状态。Device 可以修改缓存行状态，但是不建议。可能的返回有 RspIHitI，RspVHitV，RspSHitSE，RspSFwdM，RspIFwdM 和 RspVFwdV。这里的 V 表示 Valid，对应 MESI 中的 MES 三种状态。所以如果缓存行状态不变的话，就是 RspIHitI，RspVHitV 和 RspVFwdV 三种响应。&lt;/p&gt;
&lt;p&gt;再考虑 Device 会发送的请求。首先，请求可以分为四类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read：发送 D2H Request，接收 H2D Response 和 H2D Data&lt;/li&gt;
&lt;li&gt;Read0：发送 D2H Request，接收 H2D Response&lt;/li&gt;
&lt;li&gt;Write：发送 D2H Request，接收 H2D Response，发送 D2H Data，可选接收 H2D Response&lt;/li&gt;
&lt;li&gt;Read0-Write：发送 D2H Request，接收 H2D Response，发送 D2H Data&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;RdCurr(Read)，Device 读取 Host 的缓存行，不造成任何的缓存状态的修改。Device 缓存还是处于 Invalid 状态。&lt;/li&gt;
&lt;li&gt;RdOwn(Read)，Device 读取 Host 的缓存行，可以进入 E 态或者 M 态。Host 响应 GO-Err/GO-I/GO-E/GO-M。&lt;/li&gt;
&lt;li&gt;RdShared(Read)，Device 读取 Host 的缓存行，进入 S 态。Host 响应 GO-Err/GO-I/GO-S。&lt;/li&gt;
&lt;li&gt;RdAny(Read)，Device 读取 Host 的缓存行，进入 M 态，E 态或 S 态。Host 响应 GO-Err/GO-I/GO-S/GO-E/GO-M。&lt;/li&gt;
&lt;li&gt;RdOwnNoData(Read0)，Device 不读取现在缓存行的数据，进入 E 态。一般用于整个缓存行的数据都要更新的情况，所以不需要或许当前缓存行的数据。&lt;/li&gt;
&lt;li&gt;ItoMWr(Read0-Write)，Device 写入新的完整缓存行到 Host 中，并且进入 M 态。Host 响应 GO_WritePull/GO_ERR_WritePull。&lt;/li&gt;
&lt;li&gt;WrCur(Read0-Write)，和 ItoMWr 基本一样，区别在于，如果缓存行命中了，就写入到缓存中；如果缺失了，就写入到内存中。Host 响应 GO_WritePull/GO_ERR_WritePull。&lt;/li&gt;
&lt;li&gt;CLFlush(Read0)，要求 Host Invalidate 一个缓存行。Host 响应 GO-Err/GO-I。&lt;/li&gt;
&lt;li&gt;CleanEvict(Write)，Device 要 Evict 一个 Exclusive 的缓存行。Host 响应 GO_WritePull/GO_WritePull_Drop。&lt;/li&gt;
&lt;li&gt;DirtyEvict(Write)，Device 要 Evict 一个 Modified 的缓存行。Host 响应 GO_WritePull/GO_ERR_WritePull。&lt;/li&gt;
&lt;li&gt;CleanEvictNoData(Write)，Device 要 Evict 一个 Exclusive 的缓存行，但是不传输数据，只用于更新 Snoop Filter。Host 响应 GO-I。&lt;/li&gt;
&lt;li&gt;WrInv(Write)，Write Invalidate Line，向 Host 写入 0-64 字节的数据，并且 Invalidate 缓存。Host 响应 WritePull/GO-Err/GO-I。&lt;/li&gt;
&lt;li&gt;WOWrInv(Write)，Weakly Ordered 版本的 WrInV，写入 0-63 字节的数据。Host 响应 ExtCmp/FastGO_WritePull/GO_ERR_WritePull。&lt;/li&gt;
&lt;li&gt;WOWrInvF(Write)，Weakly Ordered 版本的 WrInv，写入 64 字节的数据。Host 响应 ExtCmp/FastGO_WritePull/GO_ERR_WritePull。&lt;/li&gt;
&lt;li&gt;CacheFlushed(Read0)，告诉 Host 自己的缓存都被清空了，所有缓存行都在 I 状态。Host 响应 GO-I。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;和其他协议的对比&#34;&gt;和其他协议的对比&lt;/h4&gt;
&lt;p&gt;之前在 &lt;a href=&#34;https://jia.je/hardware/2022/05/09/tilelink/#tilelink-cached&#34;&gt;TileLink 总线协议分析&lt;/a&gt; 分析过 TileLink 的缓存一致性实现方法，如果某一个缓存（Master A）出现了缺失，需要经过如下的过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Master A -&amp;gt; Slave: Acquire&lt;/li&gt;
&lt;li&gt;Slave -&amp;gt; Master B: Probe&lt;/li&gt;
&lt;li&gt;Master B -&amp;gt; Slave: ProbeAck&lt;/li&gt;
&lt;li&gt;Slave -&amp;gt; Master A: Grant&lt;/li&gt;
&lt;li&gt;Master A -&amp;gt; Slave: GrantAck&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 TileLink Cached 里面，所有的 Master 都是平等的。而在 CXL 中，需要维护缓存一致性的，有 CPU 内部的各个缓存之间，还有 CPU 和设备之间。而 CXL.cache 主要负责的是与设备的缓存一致性部分，维护缓存一致性的核心是在 CPU 一侧，Host 相当于 TileLink 的 Slave，Device 相当于 TileLink 的 Master A。可以说 CXL.cache 是不对称的缓存一致性协议。&lt;/p&gt;
&lt;p&gt;另一个相关的协议是 &lt;a href=&#34;https://jia.je/hardware/2022/05/16/ace&#34;&gt;ACE 缓存一致性协议&lt;/a&gt;，和 TileLink 类似。&lt;/p&gt;
&lt;p&gt;例如 CXL 中设备读取缓存的时候，出现了缺失，那么需要经过如下的过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Device -&amp;gt; Host: RdShared/RdOwn&lt;/li&gt;
&lt;li&gt;Host -&amp;gt; CPU Caches: Custom Snoop Messages&lt;/li&gt;
&lt;li&gt;Host -&amp;gt; Other CXL Device: SnpData&lt;/li&gt;
&lt;li&gt;Other CXL Device -&amp;gt; Host: RspSHitSE/RspSFwdM&lt;/li&gt;
&lt;li&gt;Host -&amp;gt; Device: GO-S&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，整体的流程也是差不多的。&lt;/p&gt;
&lt;h3 id=&#34;cxlmem&#34;&gt;CXL.mem&lt;/h3&gt;
&lt;p&gt;CXL.mem 用于扩展内存，根据类型的不同，它可能单独使用，也可能和 CXL.cache 配合使用。具体来说，有三种一致性模型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HDM-H(Host-only Coherent)：仅 Type 3 设备，也就是无 CXL.cache&lt;/li&gt;
&lt;li&gt;HDM-D(Device Coherent)：仅 Legacy Type 2 设备，也就是有 CXL.cache&lt;/li&gt;
&lt;li&gt;HDM-DB(Device Coherent using Back-Invalidation)：Type 2 或 Type 3 设备&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 CXL.cache 中，两端是 Host 和 Device；而 CXL.mem，两端是 Master 和 Subordinate。&lt;/p&gt;
&lt;p&gt;从 Master 到 Subordinate 的消息（M2S）有三类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Request(Req)&lt;/li&gt;
&lt;li&gt;Request with Data(RwD)&lt;/li&gt;
&lt;li&gt;Back-Invalidation Response(BIRsp)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从 Subordinate 到 Master 的消息（S2M）有三类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Response without data(NDR, No Data Response)&lt;/li&gt;
&lt;li&gt;Response with Data(DRS, Data Response)&lt;/li&gt;
&lt;li&gt;Back-Invalidation Snoop(BiSnp)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中比较特别的是 Back-Invalidation，这个的目的是让 Device 可以通过 Snoop 修改 Host 中缓存了 Device 内存中的数据的缓存行。&lt;/p&gt;
&lt;p&gt;对于 Type 3 的设备（无 CXL.cache）来说，Device 就是一个扩展的内存，比较简单，只需要支持读写内存就可以了。Host 发送 &lt;code&gt;MemRd*&lt;/code&gt;，Device 响应 MemData；Host 发送 &lt;code&gt;MemWr*&lt;/code&gt;，Device 响应 Cmp。&lt;/p&gt;
&lt;p&gt;对于 Type 2 的设备（有 CXL.cache）来说，Device 既有自己的缓存，又有自己的内存，所以这时候就比较复杂了。例如 Host 在读取数据的时候（MemRd，SnpData/SnpInv/SnpCur），还需要对 Device Cache 进行 Snoop（SnpData/SnpInv/SnpCur），保证缓存的一致性。Host 想要写入数据到 Device Memory 的时候，如果此时 Device Cache 中有 Dirty 数据，需要进行写合并，再把合并后的数据写入到 Device Memory。当 Device 想要从自己的缓存读取数据，又缺失的时候，首先需要判断数据在 Host 端的缓存中，还是在 Device Memory 中，不同的偏置（Bias）模式决定了数据应该放在 Host 还是 Device 的缓存上。Device 要写入数据的时候，如果 Host 中缓存了该缓存行，则需要 Back-Invalidation。为了支持这些场景，CXL.cache 和 CXL.mem 会比较复杂。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PCIe 学习笔记</title>
      <link>https://jia.je/hardware/2022/11/12/pcie-notes/</link>
      <pubDate>Sat, 12 Nov 2022 14:56:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/11/12/pcie-notes/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/pcie.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在知乎上看到 &lt;a href=&#34;https://www.zhihu.com/people/ljgibbs&#34;&gt;LogicJitterGibbs&lt;/a&gt; 的 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/447134701&#34;&gt;资料整理：可以学习 1W 小时的 PCIe&lt;/a&gt;，我跟着资料学习了一下，然后在这里记录一些我学习 PCIe 的笔记。&lt;/p&gt;
&lt;p&gt;下面的图片主要来自 PCIe 3.0 标准以及 MindShare 的 PCIe 3.0 书本。&lt;/p&gt;
&lt;h2 id=&#34;分层&#34;&gt;分层&lt;/h2&gt;
&lt;p&gt;PCIe 定义了三个层：Transaction Layer，Data Link Layer，Physical Layer，和 TCP/IP 四层模型很像。PCIe 也是基于 Packet 传输的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_layer.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;transaction-layer&#34;&gt;Transaction Layer&lt;/h3&gt;
&lt;p&gt;Transaction Layer 的核心是 Transaction Layer Packet(TLP)。TLP 格式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_tlp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;即可选的若干个 Prefix，一个 Header，可选的 Data Payload，可选的 Digest。&lt;/p&gt;
&lt;p&gt;Prefix 和 Header 开头的一个字节是 &lt;code&gt;Fmt[2:0]&lt;/code&gt; 和 &lt;code&gt;Type[4:0]&lt;/code&gt; 字段。Fmt 决定了 header 的长度，有无数据，或者这是一个 Prefix。&lt;/p&gt;
&lt;p&gt;它支持几类 Packet：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Memory: MMIO
&lt;ul&gt;
&lt;li&gt;Read Request(MRd)/Completion(CplD)&lt;/li&gt;
&lt;li&gt;Write Request(MWr): 注意只有 Request，没有 Completion&lt;/li&gt;
&lt;li&gt;AtomicOp Request(FetchAdd/Swap/CAS)/Completion(CplD)&lt;/li&gt;
&lt;li&gt;Locked Memory Read(MRdLk)/Completion(CplDLk): Legacy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IO: Legacy
&lt;ul&gt;
&lt;li&gt;Read Request(IORd)/Completion(CplD)&lt;/li&gt;
&lt;li&gt;Write Request(IOWr)/Completion(Cpl)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Configuration: 访问配置空间
&lt;ul&gt;
&lt;li&gt;Read Request(CfgRd0/CfgRd1)/Completion(CplD)&lt;/li&gt;
&lt;li&gt;Write Request(CfgWr0/CfgWr1)/Completion(Cpl)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Message: 传输 event
&lt;ul&gt;
&lt;li&gt;Request(Msg/MsgD)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;括号里的是 TLP Type，对应了它 Fmt 和 Type 字段的取值。如果 Completion 失败了，原来应该是 CplD/CplDLk 的 Completion 会变成不带数据的 Cpl/CplLk。&lt;/p&gt;
&lt;p&gt;在 PCIe 3.0 标准的表 2-3 中列出了 TLP Type 以及对应的 Fmt 和 Type 编码。&lt;/p&gt;
&lt;p&gt;TLP 路由有三个方法，决定了这个 TLP 目的地是哪里：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Address-based: 32 位或 64 位地址，用于 Memory 和 IO 请求&lt;/li&gt;
&lt;li&gt;ID-based：lspci 看到的地址，也就是 Bus Device Function，用于 Configuration 请求&lt;/li&gt;
&lt;li&gt;Implicit：用于 Message 请求，路由方法：
&lt;ul&gt;
&lt;li&gt;Routed to Root Complex&lt;/li&gt;
&lt;li&gt;Routed by Address: PCIe 3.0 标准中没有用这个路由方法的 Message&lt;/li&gt;
&lt;li&gt;Routed by ID&lt;/li&gt;
&lt;li&gt;Broadcast from Root Complex&lt;/li&gt;
&lt;li&gt;Local - Terminate at Receiver&lt;/li&gt;
&lt;li&gt;Gathered and router to Root Complex&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-link-layer&#34;&gt;Data Link Layer&lt;/h3&gt;
&lt;p&gt;Data Link Layer 的主要功能是进行 TLP 的可靠传输。它在传输 TLP 的时候，会在开头加上一个两字节的 Sequence Number，最后加上一个四字节的 LCRC（Link CRC）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_tlp_link.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;除了传输 TLP，Data Link Layer 还会传输 Data Link Layer Packet(DLLP)，类型包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ack DLLP: 告诉对方自己已经成功收到了 TLP&lt;/li&gt;
&lt;li&gt;Nak DLLP：告诉对方自己接收 TLP 失败，请重试&lt;/li&gt;
&lt;li&gt;InitFC1/InitFC2/UpdateFC DLLPs：流量控制&lt;/li&gt;
&lt;li&gt;PM_Enter_L1/PM_Enter_L23/PM_Active_State_Request_L1/PM_Request_Ack：用于电源管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Data Link Layer 收到上层要发送 TLP 时候，首先拼接 Sequence Number 和 LCRC，然后会保存在 retry buffer 中，通过 Physical Layer 发送。从 Physical Layer 收到新的 TLP/DLLP 时，会检查它的完整性（CRC），如果正确，就向发送方发送一个 Ack DLLP，并把 TLP 提交给 Transaction Layer；如果不正确，就向发送方发送一个 Nak DLLP。如果收到了 Ack DLLP，就可以把相应的 TLP 从 retry buffer 中删掉；如果收到了 Nak DLLP，则要重传。这样就实现了 TLP 的可靠传输。&lt;/p&gt;
&lt;p&gt;需要注意的是，TLP 和 DLLP 的区别：TLP 就像 IP，目的地址可能会跨越多跳；而 DLLP 是点对点地工作，所以一个 TLP 在转发的每一跳中，接受方都会发送一次 Ack DLLP。&lt;/p&gt;
&lt;p&gt;Data Link Layer 的流量是 Credit-based 的：接受方会告诉发送方自己的 Buffer 还有多少空间（Credit），然后发送方根据 Credit 来控制是否继续发送 TLP。&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;p&gt;接触 PCIe 的时候可能会有一个疑惑，就是这些 Bus Device Function 都是怎么分配的，分配完之后，访问请求又是怎么路由的。&lt;/p&gt;
&lt;h3 id=&#34;路由&#34;&gt;路由&lt;/h3&gt;
&lt;p&gt;首先回顾一下，上面提到了 TLP 的 Memory 和 IO 是根据地址路由，Configuration 是根据 Bus Device Function 路由，而 PCIe 大概是一个树形的结构，叶子结点就是 PCIe 设备，非叶子结点是桥或者交换机。回想一下，IP 的路由是按照最长前缀匹配，如果在 PCIe 中还这样做的话，又太过于复杂了，毕竟 PCIe 可以人为地设定每个设备的地址，让地址满足一定的连续性和局部性，这样路由选择就非常简单了。&lt;/p&gt;
&lt;p&gt;观察 PCIe 标准中 7.3.3 Configuration Request Routing Rules，结合 MindShare 的书，看 Root Ports，Switches 和 Bridges 的要求，就知道 Configuration 请求是如何路由的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Configuration 请求只能由 Host Bridge 发起&lt;/li&gt;
&lt;li&gt;如果 Configuration 请求是 Type0，那么这个请求的目的设备就是当前设备&lt;/li&gt;
&lt;li&gt;如果 Configuration 请求是 Type1，
&lt;ul&gt;
&lt;li&gt;如果请求的 Bus Number 等于某一个 Downstream Port 的 Secondary Bus Number，则把 Configuration 请求转换为 Type0，然后发给该 Downstream Port&lt;/li&gt;
&lt;li&gt;如果不等于，但是 Bus Number 属于某一个 Downstream Port 的 Secondary Bus Number 和 Subordinate Bus Number 之间，则不修改 Configuration 请求，发送给该 Downstream Port。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果类比一下 IP，那么分组在中途路由器转发的时候就是 Type1，Type0 就是最后一跳。路由就是直接按照几个不重合的 Bus Number 区间进行判断，没有复杂的最长前缀匹配。但是又有一个问题，如果按照 Bus 路由，那同一个 Bus 下不同的 Device 咋办？这就像是以太网，最后一跳的时候，如果同一个链路上有多个设备，那么多个设备都能收到，每个设备根据自己的 Device 号判断是否是发给自己的。PCI（注意不是 PCIe）总线也类似。随着速度越来越高，通过交换机，以太网已经变成了点对点，所以很少见到一个链路上同时有多个设备的情况了。PCIe 也一样，所以根据 Bus 路由就足够了。至于 lspci 看到的那些 Device 不等于 0 的设备，要么是兼容 PCI 设备的，要么是虚拟的，在设备内部进行路由的，并不是真的有一个 PCIe link 连了多个物理设备。&lt;/p&gt;
&lt;p&gt;所以简单理解一下，PCI 总线确实是一条总线，一条总线上很多设备。而 PCIe 实际上是一个网络，可以看作是很多个 PCI 总线连接在一起，可以把 Root Complex 或者 Switch 内部看成一个虚拟的有很多设备的 PCI 总线，而 PCIe Link 可以看成是只有一个设备的 PCI 总线。这样 PCIe 交换机可以看成若干个 PCI-PCI Bridge：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_bridge.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;还有 MindShare 书中的图 3-5:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_system.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，这里的每一个 Bus 就是一个 PCI 总线，既有内部的虚拟 PCI 总线（Bus 0/2/6），也有 PCIe Link 充当的 PCI 总线（Bus 1/3/4/5/7/8/9）。在虚拟的 PCI 总线里，比如 PCIe Switch，一个 Device 对应一个 Downstream Port；而 PCIe Link 对应的 PCI 总线上就只有一个 Device。然后 PCIe Switch 的每个 Upstream Port 和 Downstream Port 里会记录三个 Bus Number：Primary(Pri)，Secondary(Sec) 和 Subordinate(Sub)。Primary 指的就是它上游直接连接的 PCI 总线编号，Sec 指的是下游直接连接的 PCI 总线编号，Sub 指的是它下游的最大 PCI 总线编号。&lt;/p&gt;
&lt;p&gt;这样，收到 Type1 的时候，Switch 按照各个 Downstream Port 的 Sec 和 Sub 进行判断，如果目标 Bus Number 等于 Sec，就转换为 Type0 发出去；如果大于 Sec，但是小于或等于 Sub，就原样发出去。可以看到，从 Host Bridge 到每个设备都可以通过这样的方式一路转发。&lt;/p&gt;
&lt;p&gt;既然 BDF 是把 Bus 划分为多个区间来路由的，那么 Memory 和 IO 请求也类似地可以对地址进行划分，变成多个区间，然后用类似的方法进行路由。&lt;/p&gt;
&lt;p&gt;这些用于路由的区间上下界，可以在各个端口的 Type1 Configuration Space 中找到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_type1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路由 Type1 Configuration Request：Primary Bus Number, Secondary Bus Number, Subordinate Bus Number
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Request Bus Number == Secondary Bus Number&lt;/code&gt;: Type1 -&amp;gt; Type0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Secondary Bus Number &amp;lt; Request Bus Number &amp;lt;= Subordinate Bus Number&lt;/code&gt;: Type1 -&amp;gt; Type1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;路由 IO Request：&lt;code&gt;I/O Base &amp;lt;= IO Address &amp;lt;= I/O Limit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;路由 Prefetchable Memory Request：&lt;code&gt;Prefetchable Memory Base &amp;lt;= Memory Address &amp;lt;= Prefetchable Memory Limit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;路由 Non-Prefetchable Memory Request：&lt;code&gt;Memory Base &amp;lt;= Memory Address &amp;lt;= Memory Limit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而具体到每一个设备上，设备会提供若干个 BAR（Base Address Register），在枚举设备的时候，会给 BAR 分配地址，然后把设备的地址进行合并，记录到 Switch 上的 Base 和 Limit，然后一直递归，一路更新到 Root Complex。这样，就完成了地址分配，以及请求的路由。&lt;/p&gt;
&lt;h3 id=&#34;分配&#34;&gt;分配&lt;/h3&gt;
&lt;p&gt;既然知道了 BDF 是如何路由的，那么接下来的问题是，怎么枚举设备和交换机，分配 Bus Number。这个事情在系统启动的时候会做（例如 UEFI），Linux 中也有相关的代码。下面就来对着 &lt;a href=&#34;https://github.com/tianocore/edk2&#34;&gt;edk2&lt;/a&gt; 的源代码来看看它是怎么做的。&lt;/p&gt;
&lt;p&gt;在 edk2 中，分配 Bus Number 的核心代码是 &lt;code&gt;PciScanBus&lt;/code&gt; 函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  Scan pci bus and assign bus number to the given PCI bus system.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  @param  Bridge           Bridge device instance.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  @param  StartBusNumber   start point.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  @param  SubBusNumber     Point to sub bus number.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  @param  PaddedBusRange   Customized bus number.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  @retval EFI_SUCCESS      Successfully scanned and assigned bus number.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  @retval other            Some error occurred when scanning pci bus.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  @note   Feature flag PcdPciBusHotplugDeviceSupport determine whether need support hotplug.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EFI_STATUS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PciScanBus&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IN PCI_IO_DEVICE  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Bridge,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IN UINT8          StartBusNumber,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  OUT UINT8         &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SubBusNumber,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  OUT UINT8         &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PaddedBusRange
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  );
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输入一个桥设备和初始的 Bus Number，输出 Subordinate Bus Number，也就是分配的最大的 Bus Number，以及 Padded Bus Range，例如如果要考虑热插拔的话，就需要预留一些 Bus Number。它在 &lt;code&gt;PciRootBridgeEnumerator&lt;/code&gt; 函数中被调用，传入的是 RootBridgeDev。你可能也猜到了，这个函数可以递归调用，从 Root Bridge 开始往下，遇到新的桥设备的时候，就继续递归，然后根据下一层分配的 Bus Number 来计算上一层的 Subordinate Bus Number。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PciScanBus&lt;/code&gt; 首先枚举当前桥设备下的所有 Device 和 Function，因为当前的桥设备已经被分配了 Bus Number，所以是可以访问它下面的 Device 和 Function 的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (Device &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; Device &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; PCI_MAX_DEVICE; Device&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TempReservedBusNum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (Func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; Func &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; PCI_MAX_FUNC; Func&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Check to see whether a pci device is present
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PciDevicePresent(PciRootBridgeIo, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Pci, StartBusNumber, Device, Func);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EFI_ERROR(Status) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (Func &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// go to next device if there is no Function 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EFI_ERROR(Status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Get the PCI device information
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PciSearchDevice(Bridge, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Pci, StartBusNumber, Device, Func, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;PciDevice);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EFI_ERROR(Status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PciAddress &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EFI_PCI_ADDRESS(StartBusNumber, Device, Func, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (IS_PCI_BRIDGE(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Pci) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; IS_CARDBUS_BRIDGE(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Pci)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// For PPB
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciAllocateBusNumber(Bridge, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SubBusNumber, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, SubBusNumber);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EFI_ERROR(Status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      SecondBus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SubBusNumber;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Register &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (UINT16)((SecondBus &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (UINT16)StartBusNumber);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EFI_PCI_ADDRESS(StartBusNumber, Device, Func,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                PCI_BRIDGE_PRIMARY_BUS_REGISTER_OFFSET);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciRootBridgeIo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Pci.Write(PciRootBridgeIo, EfiPciWidthUint16,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          Address, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Register);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// If it is PPB, recursively search down this bridge
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (IS_PCI_BRIDGE(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Pci)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Temporarily initialize SubBusNumber to maximum bus number to ensure
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// the PCI configuration transaction to go through any PPB
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        Register &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciGetMaxBusNumber(Bridge);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EFI_PCI_ADDRESS(StartBusNumber, Device, Func,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  PCI_BRIDGE_SUBORDINATE_BUS_REGISTER_OFFSET);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciRootBridgeIo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Pci.Write(PciRootBridgeIo, EfiPciWidthUint8,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                            Address, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Register);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciScanBus(PciDevice, SecondBus, SubBusNumber, PaddedBusRange);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EFI_ERROR(Status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Set the current maximum bus number under the PPB
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      Address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EFI_PCI_ADDRESS(StartBusNumber, Device, Func,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                PCI_BRIDGE_SUBORDINATE_BUS_REGISTER_OFFSET);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciRootBridgeIo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Pci.Write(PciRootBridgeIo, EfiPciWidthUint8,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          Address, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, SubBusNumber);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// It is device. Check PCI IOV for Bus reservation
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Go through each function, just reserve the MAX ReservedBusNum for one
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// device
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// OMITTED
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((Func &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;IS_PCI_MULTI_FUNC(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Pci)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Skip sub functions, this is not a multi function device
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCI_MAX_FUNC;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从代码中去掉了一些热插拔相关的代码，简单来说，它的思路如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;枚举当前设备下的 Device 和 Function&lt;/li&gt;
&lt;li&gt;如果找到了一个桥设备，为它分配一个新的 Bus Number
&lt;ol&gt;
&lt;li&gt;设置这个新的桥设备的 Primary Bus Number 为 Start Bus Number（也就是上一级的 Secondary Bus Number），Secondary Bus 是新分配的 Bus Number，Subordinate Bus Number 是最大值&lt;/li&gt;
&lt;li&gt;这样设置完成后，相当于所有的在 &lt;code&gt;[Secondary Bus Number, Max Bus Number]&lt;/code&gt; 范围中的 Bus 请求都会路由到新的桥设备上&lt;/li&gt;
&lt;li&gt;递归调用 PciScanBus，参数是新的桥设备，Start Bus Number 为新的 Secondary Bus Number&lt;/li&gt;
&lt;li&gt;递归调用返回以后，新的桥设备下面所有的设备都分配到了自己的 Bus Number，这时候就可以知道准确的 Subordinate Bus Number 了，不再是刚才临时设置的 Max Bus Number，因此这时候再把准确的 Subordinate Bus Number 写入桥设备的 Subordinate Bus Number 中&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;枚举完所有设备以后，返回目前递归分配得到的最大的 Bus Number&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样整理出来一看，其实很清楚，这就是一个 DFS 算法，在搜索过程中，为了保证当前的结点可达，保证从 Root Bridge 到当前的结点路径上的 Bus Number 范围都是 &lt;code&gt;[Secondary Bus Number, Max Bus Number]&lt;/code&gt;；当结点搜索完以后，再回溯，回溯的时候就知道了实际分配到多大的 Bus Number，这时候再填回 Subordinate Bus Number，最后保证这个树上每一层的 &lt;code&gt;[Secondary Bus Number, Subordinate Bus Number]&lt;/code&gt; 区间不重合，且每个子结点的区间都包含于父结点的区间。&lt;/p&gt;
&lt;p&gt;最后的结果，类似 MindShare 书中的这个图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_enum.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;为了支持 PCIe 热插拔，或者可能会动态产生新设备的 SR-IOV，代码中做了相应的预留：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (FeaturePcdGet(PcdPciBusHotplugDeviceSupport)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// If Hot Plug is supported,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Get the bridge information
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  BusPadding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FALSE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (gPciHotPlugInit &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (IsPciHotPlugBus(PciDevice)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// If it is initialized, get the padded bus range
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gPciHotPlugInit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetResourcePadding(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          gPciHotPlugInit, PciDevice&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;DevicePath, PciAddress, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;State,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (VOID &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Descriptors, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Attributes);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EFI_ERROR(Status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      BusRange &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      NextDescriptors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Descriptors;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciGetBusRange(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;NextDescriptors, NULL, NULL, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;BusRange);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      FreePool(Descriptors);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;EFI_ERROR(Status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        BusPadding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TRUE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt; (Status &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; EFI_NOT_FOUND) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// EFI_NOT_FOUND is not a real error. It indicates no bus number padding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// requested.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (FeaturePcdGet(PcdPciBusHotplugDeviceSupport) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; BusPadding) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Ensure the device is enabled and initialized
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((Attributes &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; EfiPaddingPciRootBridge) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ((State &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; EFI_HPC_STATE_ENABLED) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ((State &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; EFI_HPC_STATE_INITIALIZED) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PaddedBusRange &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (UINT8)((UINT8)(BusRange) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PaddedBusRange);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Reserve the larger one between the actual occupied bus number and padded
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// bus number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciAllocateBusNumber(PciDevice, SecondBus, (UINT8)(BusRange),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;PaddedSubBus);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EFI_ERROR(Status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SubBusNumber &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MAX(PaddedSubBus, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SubBusNumber);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SR-IOV:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// It is device. Check PCI IOV for Bus reservation
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Go through each function, just reserve the MAX ReservedBusNum for one device
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (PcdGetBool(PcdSrIovSupport) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (PciDevice&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SrIovCapabilityOffset &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (TempReservedBusNum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; PciDevice&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ReservedBusNum) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciAllocateBusNumber(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PciDevice, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SubBusNumber,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (UINT8)(PciDevice&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ReservedBusNum &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; TempReservedBusNum), SubBusNumber);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EFI_ERROR(Status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TempReservedBusNum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PciDevice&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ReservedBusNum;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Func &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      DEBUG((DEBUG_INFO, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PCI-IOV ScanBus - SubBusNumber - 0x%x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SubBusNumber));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      DEBUG((DEBUG_INFO, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PCI-IOV ScanBus - SubBusNumber - 0x%x (Update)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SubBusNumber));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;分配好 Bus 以后，就可以对所有设备进行 Configuration Request 了，后续的 Memory 和 IO 地址的分配和路由，也是类似地递归地进行分配，然后回溯的时候合并地址区间即可。&lt;/p&gt;
&lt;h2 id=&#34;物理层&#34;&gt;物理层&lt;/h2&gt;
&lt;p&gt;物理层编码上，PCIe 1.0 和 2.0 采用的是 NRZ 8b/10b，PCIe 3.0 到 5.0 用的是 NRZ 128b/130b，最新的 PCIe 6.0 和 7.0 则换成了 PAM4 FLIT。可以计算出每一代 x16 Lane 情况下的最大数据带宽：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PCIe 1.0: &lt;code&gt;2.5 * 8 / 10 * 16 = 32 Gb/s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PCIe 2.0: &lt;code&gt;5.0 * 8 / 10 * 16 = 64 Gb/s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PCIe 3.0: &lt;code&gt;8.0 * 128 / 130 * 16 = 126 Gb/s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PCIe 4.0: &lt;code&gt;16.0 * 128 / 130 * 16 = 252 Gb/s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PCIe 5.0: &lt;code&gt;32.0 * 128 / 130 * 16 = 504 Gb/s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PCIe 6.0: &lt;code&gt;64.0 * 16 = 1024 Gb/s&lt;/code&gt;，如果考虑 FLIT 引入的开销，则是 &lt;code&gt;64.0 * 242 / 256 * 16 = 968 Gb/s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PCIe 7.0: &lt;code&gt;128.0 * 16 = 2048 Gb/s&lt;/code&gt;，如果考虑 FLIT 引入的开销，则是 &lt;code&gt;128.0 * 242 / 256 * 16 = 1936 Gb/s&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pcie-60&#34;&gt;PCIe 6.0&lt;/h2&gt;
&lt;p&gt;PCIe 6.0 引入了 PAM4 来替代原来的 NRZ，实现了波特率不变的情况下速度翻倍，并且不再使用 128b/130b，为了解决 PAM4 带来的更高的错误率，引入了 FEC，CRC 还有格雷码，以及新的 FLIT。&lt;/p&gt;
&lt;p&gt;网上可以搜到关于 PCIe 的 PPT：https://pcisig.com/sites/default/files/files/PCIe%206.0%20Webinar_Final_.pdf 和 &lt;a href=&#34;https://www.openfabrics.org/wp-content/uploads/2022-workshop/2022-workshop-presentations/206_DDasSharma.pdf&#34;&gt;https://www.openfabrics.org/wp-content/uploads/2022-workshop/2022-workshop-presentations/206_DDasSharma.pdf&lt;/a&gt;，以及关于 FLIT 的博客：https://pcisig.com/blog/pcie%C2%AE-60-specification-webinar-qa-deeper-dive-flit-mode-pam4-and-forward-error-correction-fec&lt;/p&gt;
&lt;p&gt;总结 FLIT 的要点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个 FLIT 固定长度 256 字节，其中 236 字节传输 TLP，6 字节传输 DLLP，8 字节传输 CRC，6 字节传输 FEC。&lt;/li&gt;
&lt;li&gt;接受方接受到 FLIT 后，会尝试进行 FEC 解码，并且尝试修复错误，再进行 CRC 校验。如果中途出现了错误，则会发送一个 NAK 给发送方。&lt;/li&gt;
&lt;li&gt;一个 TLP 可能跨越多个 FLIT，一个 FLIT 可能包括多个 TLP，根据 TLP 大小而定。TLP 不需要对齐到 FLIT 的开头或者结尾。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以发现，FLIT 的 CRC 用了 8 个字节，不再需要原来 TLP 和 DLLP 中的 ECRC 和 LCRC。在之前的 PCIe 版本，TLP 的可选 Digest 是 4 个字节的 ECRC，TLP+DLLP 的 LCRC 是 4 字节。具体采用多少字节的 CRC，和目标的错误率，以及传输的字节数相关。&lt;/p&gt;
&lt;h2 id=&#34;ats&#34;&gt;ATS&lt;/h2&gt;
&lt;p&gt;ATS（Address Translation Service）是在 PCIe 上给外设提供查询页表的方式，从而可以使用虚拟地址。标准可以在 &lt;a href=&#34;https://composter.com.ua/documents/ats_r1.1_26Jan09.pdf&#34;&gt;https://composter.com.ua/documents/ats_r1.1_26Jan09.pdf&lt;/a&gt; 处下载，以及关于 ATS 的 PPT：https://composter.com.ua/documents/Address_Translation_Services.pdf。&lt;/p&gt;
&lt;p&gt;它的整体工作方式如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pcie_ats.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;就是在 Root Complex 和 Memory 之间设置一个 Translation Agent，负责查表，也就是 Page Table Walker。它会接收来自 PCIe 设备的地址翻译请求，然后它获取到页表地址后，根据虚拟地址去查内存中的页表。TLB（在标准中叫做 Address Translation Cache，ATC）是实现在 PCIe 设备侧的，而不是统一的 TLB，也不是 CPU 核心的 TLB。&lt;/p&gt;
&lt;p&gt;为了支持 ATS，需要支持如下的操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PCIe Device 向 Translation Agent 发送 Translation Request；Translation Agent 向 PCIe Device 回复 Translation Completion；&lt;/li&gt;
&lt;li&gt;当页表出现变化的时候，需要通知 PCIe 设备端的 TLB，因此需要向 PCIe 设备发送 Invalidate Request Message；PCIe 设备完成 TLB 刷新后，回复一个 Invalidate Complete Message。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ATS 标准还定义了一个可选功能，就是 Page Request Interface（PRI），其实就是缺页的时候，设备可以去发送 Page Request，要求操作系统去分配一个物理页。这就像用户程序里 mmap 一个匿名的页，一开始是没有分配的，直到第一次访问的时候，出现缺页异常，然后 OS 分配一个物理页，再更新页表。这样的好处是用于 DMA 的物理页也可以 Swap 或者延迟分配。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 ppc64le Linux 上运行 Nix</title>
      <link>https://jia.je/software/2022/10/29/nix-on-ppc64le/</link>
      <pubDate>Sat, 29 Oct 2022 18:54:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/10/29/nix-on-ppc64le/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;之前尝试过在 ppc64le 的机器上运行 Nix，当时的尝试是把代码克隆下来编译，我还写了一个 Docker 脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Based on https://github.com/NixOS/nix/issues/6048&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Build nixos/nix from source&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ubuntu:20.04&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/ports.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g&amp;#39;&lt;/span&gt; /etc/apt/sources.list&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt-get update&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; DEBIAN_FRONTEND&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;noninteractive apt-get install -y &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    autoconf-archive autoconf automake pkg-config build-essential git gcc g++ jq libboost-all-dev libcrypto++-dev libcurl4-openssl-dev &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    libssh-dev libarchive-dev libsqlite3-dev libbz2-dev wget liblzma-dev libbrotli-dev libseccomp-dev bison flex libsodium-dev libgc-dev &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    libgtest-dev libgmock-dev cmake unzip&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install editline - newer version required&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; wget https://github.com/troglobit/editline/releases/download/1.17.1/editline-1.17.1.tar.xz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; tar xf editline-1.17.1.tar.xz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root/editline-1.17.1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; ./configure --prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; make all&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; make install&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install lowdown - not available via apt&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; wget https://github.com/kristapsdz/lowdown/archive/refs/tags/VERSION_0_10_0.tar.gz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; tar xf VERSION_0_10_0.tar.gz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root/lowdown-VERSION_0_10_0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; ./configure&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; make all&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; make install  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install nlohmann_json - newer version required&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; wget https://github.com/nlohmann/json/archive/refs/tags/v3.10.5.tar.gz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; tar xf v3.10.5.tar.gz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root/json-3.10.5&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; mkdir build&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root/json-3.10.5/build&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; cmake .. &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make -j&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;nproc&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; make install&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; wget https://github.com/nlohmann/json/releases/download/v3.10.5/include.zip &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; unzip include.zip&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; mv include/nlohmann/* /usr/local/include/nlohmann/&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Compile &amp;amp; build nix&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; git clone -b 2.8.1 https://github.com/NixOS/nix.git&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /root/nix&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; ./bootstrap.sh&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; ./configure&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; make -j&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;nproc&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; make install -k &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; true&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是发现问题在于，离开了 nix install 脚本，我并不知道如何配置一个 multi-user install。但是官方的 nix install 脚本会报错，因为没有 ppc64le 的 prebuilt tarball。&lt;/p&gt;
&lt;h2 id=&#34;解决办法&#34;&gt;解决办法&lt;/h2&gt;
&lt;h3 id=&#34;binarytarballcross-方法&#34;&gt;binaryTarballCross 方法&lt;/h3&gt;
&lt;p&gt;该方法学自 @NickCao，在 NixOS/nix 的 flake 中，有生成 tarball 的方法，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix build &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.#hydraJobs.binaryTarballCross.x86_64-linux.armv7l-linux&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以在 x86_64-linux 的 host 上，交叉编译生成一个用于 armv7l-linux 的安装 tarball。类似地，可以修改 flake.nix 来加入其他架构，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git a/flake.nix b/flake.nix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index cc2a48d9c..c55a267e2 100644
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- a/flake.nix
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ b/flake.nix
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -21,7 +21,7 @@
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;       linuxSystems = linux64BitSystems ++ [ &amp;#34;i686-linux&amp;#34; ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       systems = linuxSystems ++ [ &amp;#34;x86_64-darwin&amp;#34; &amp;#34;aarch64-darwin&amp;#34; ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-      crossSystems = [ &amp;#34;armv6l-linux&amp;#34; &amp;#34;armv7l-linux&amp;#34; ];
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+      crossSystems = [ &amp;#34;armv6l-linux&amp;#34; &amp;#34;armv7l-linux&amp;#34; &amp;#34;powerpc64le-linux&amp;#34; &amp;#34;riscv64-linux&amp;#34; ];
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       stdenvs = [ &amp;#34;gccStdenv&amp;#34; &amp;#34;clangStdenv&amp;#34; &amp;#34;clang11Stdenv&amp;#34; &amp;#34;stdenv&amp;#34; &amp;#34;libcxxStdenv&amp;#34; &amp;#34;ccacheStdenv&amp;#34; ];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就可以用下面的命令来生成 riscv64-linux 和 powerpc64le-linux 架构的安装 tarball 了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix build &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.#hydraJobs.binaryTarballCross.x86_64-linux.powerpc64le-linux&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix build &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.#hydraJobs.binaryTarballCross.x86_64-linux.riscv64-linux&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成的 tarball 可以在 result 中找到。&lt;/p&gt;
&lt;h3 id=&#34;手动替换法&#34;&gt;手动替换法&lt;/h3&gt;
&lt;p&gt;因此，我在网上进行搜索，发现 &lt;a href=&#34;https://discourse.nixos.org/t/getting-started-with-nix-on-ppc64le/12712/8?u=jiegec&#34;&gt;Getting started with Nix on ppc64le&lt;/a&gt; 中有人提到，可以先在 x86 的机器上交叉编译出 ppc64le 的 nix，然后把 nix tarball 中的 x86 nix 替换成 ppc64le 版本，再复制到 ppc64le 上安装，其余的步骤就一样了。&lt;/p&gt;
&lt;p&gt;我把脚本更新了一下，适配了最新的 nix 版本，最后得到了如下的脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Based on https://discourse.nixos.org/t/getting-started-with-nix-on-ppc64le/12712/8?u=jiegec&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-build &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;nixpkgs&amp;gt;&amp;#39;&lt;/span&gt; -A pkgsCross.powernv.nix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Get a donor copy of the installer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget -c https://releases.nixos.org/nix/nix-2.11.1/nix-2.11.1-x86_64-linux.tar.xz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar xf nix-2.11.1-x86_64-linux.tar.xz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Keep the cert package&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p nix-ppc64le-linux/store
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp -r nix-2.11.1-x86_64-linux/store/*nss-cacert* nix-ppc64le-linux/store/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Toss other packages, keep the scripts&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf nix-2.11.1-x86_64-linux/store
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mv nix-2.11.1-x86_64-linux/* nix-ppc64le-linux/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add ppc64le packages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp -r &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;nix-store -qR result&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; nix-ppc64le-linux/store/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Generate a .reginfo for those ppc64le packages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-store --dump-db &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;nix-store -qR result&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &amp;gt; nix-ppc64le-linux/.reginfo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Replace NIX_INSTALLED_NIX in install script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export NIX_INSTALLED_NIX&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;readlink result&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s#NIX_INSTALLED_NIX=\&amp;#34;.*\&amp;#34;#NIX_INSTALLED_NIX=\&amp;#34;&lt;/span&gt;$NIX_INSTALLED_NIX&lt;span style=&#34;color:#e6db74&#34;&gt;\&amp;#34;#&amp;#34;&lt;/span&gt; nix-ppc64le-linux/install-multi-user
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Done! Copy nix-ppc64le-linux to ppc64le machine and run ./install --daemon&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把生成的目录复制到 ppc64le 机器上就可以了。&lt;/p&gt;
&lt;h2 id=&#34;编译问题&#34;&gt;编译问题&lt;/h2&gt;
&lt;p&gt;当然了，既然 ppc64le 的 Nixpkgs 没有什么人测试，所以肯定会遇到一些问题。下面是遇到的几个比较主要的问题，以及相应的解决方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boehm-gc checkPhase 会失败，见 &lt;a href=&#34;https://github.com/ivmai/bdwgc/issues/376&#34;&gt;ivmai/bdwgc#376&lt;/a&gt;，一直没有修复。解决办法是添加 overlay，让它不要跑测试：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;custom-overlay = final: prev: {
  # https://github.com/ivmai/bdwgc/issues/376
  boehmgc = prev.boehmgc.overrideAttrs (_: { doCheck = false; });
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;UPDATE: 向 nixpkgs 提交了 pr: &lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/198591&#34;&gt;https://github.com/NixOS/nixpkgs/pull/198591&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外根据 bdwgc 的 issue 提示，添加下列的选项可以让它测试通过：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;makeFlags = [&amp;#34;CFLAGS_EXTRA=\&amp;#34;-DNO_SOFT_VDB\&amp;#34;&amp;#34;];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是 issue 也说，这个方法对于 Power9 不工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linux-headers 编译失败，报告 unknown type name __vector128，见 &lt;a href=&#34;https://www.spinics.net/lists/netdev/msg694314.html&#34;&gt;tools/bpf: Compilation issue on powerpc: unknown type name &amp;lsquo;__vector128&amp;rsquo;
&lt;/a&gt; &lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/192670&#34;&gt;bpftools: add enableDebugger, set to false on Power64 (WIP)&lt;/a&gt;。目前的解决办法是让 procps/tmux 等包不要依赖 systemd，进而不会依赖 linux-headers：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;custom-overlay = final: prev: {
  # systemd cannot build due to linux-headers
  procps = prev.procps.override { withSystemd = false; };
  tmux = prev.tmux.override { withSystemd = false; };
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于 home-manager，可以用下面的配置让它不要编译 systemd：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# systemd does not build
systemd.user.systemctlPath = &amp;#34;/bin/systemctl&amp;#34;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然了，这个治标不治本，还是要等上游修复。&lt;/p&gt;
&lt;p&gt;UPDATE: 向 nixpkgs 提交了 pr: &lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/198587&#34;&gt;https://github.com/NixOS/nixpkgs/pull/198587&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 GNURadio Companion 中收听 FM 广播</title>
      <link>https://jia.je/hardware/2022/10/24/gnuradio-fm-radio/</link>
      <pubDate>Mon, 24 Oct 2022 23:33:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/10/24/gnuradio-fm-radio/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;以前买过 RTL-SDR，用 Gqrx 做过收音机，当时还给 Homebrew 尝试提交过几个 sdr 相关的 &lt;a href=&#34;https://github.com/Homebrew/legacy-homebrew/pulls?q=is%3Apr+author%3Ajiegec+&#34;&gt;pr&lt;/a&gt;，但是限于知识的缺乏，后来就没有再继续尝试了。&lt;/p&gt;
&lt;p&gt;前两天，@OceanS2000 讲了一次 &lt;a href=&#34;https://tuna.moe/event/2022/hacking-radio/&#34;&gt;Tunight: 高级收音机使用入门&lt;/a&gt;，又勾起了我的兴趣，所以我来尝试一下在 GNURadio Companion 中收听 FM 广播电台。&lt;/p&gt;
&lt;p&gt;我没有上过无线电相关课程，所以下面有一些内容可能不正确或者不准确。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;我的实验环境是 NixOS，所以是用下面的配置来安装 gnuradio 的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# SDR
# https://github.com/NixOS/nixpkgs/pull/170253
(gnuradio.override { extraMakeWrapperArgs = [ &amp;#34;--prefix&amp;#34; &amp;#34;SOAPY_SDR_PLUGIN_PATH&amp;#34; &amp;#34;:&amp;#34; (soapyrtlsdr + &amp;#34;/lib/SoapySDR/modules0.8/&amp;#34;) ]; })
soapysdr-with-plugins
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中 gnuradio 的 override 是为了让它可以找到 soapyrtlsdr 的库，否则它会找不到设备；&lt;code&gt;soapysdr-with-plugins&lt;/code&gt; 是为了提供 &lt;code&gt;SoapySDRUtil&lt;/code&gt; 命令，来确认它可以找到 RTL-SDR 设备：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ SoapySDRUtil --probe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-- Device identification
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  driver&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;RTLSDR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  hardware&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;R820T
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  origin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;https://github.com/pothosware/SoapyRTLSDR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rtl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-- Peripheral summary
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Channels: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; Rx, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Tx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Timestamps: NO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Other Settings:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     * Direct Sampling - RTL-SDR Direct Sampling Mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;direct_samp, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;string, options&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;0, 1, 2&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     * Offset Tune - RTL-SDR Offset Tuning Mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;offset_tune, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bool&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     * I/Q Swap - RTL-SDR I/Q Swap Mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;iq_swap, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bool&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     * Digital AGC - RTL-SDR digital AGC Mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;digital_agc, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bool&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-- RX Channel &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Full-duplex: NO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Supports AGC: YES
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Stream formats: CS8, CS16, CF32
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Native format: CS8 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;full-scale&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;128&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Stream args:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     * Buffer Size - Number of bytes per buffer, multiples of &lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt; only.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bufflen, units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bytes, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;262144, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     * Ring buffers - Number of buffers in the ring.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;buffers, units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;buffers, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;15, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     * Async buffers - Number of async usb buffers &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;advanced&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;asyncBuffs, units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;buffers, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Antennas: RX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Full gain range: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0, 49.6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; dB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TUNER gain range: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0, 49.6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; dB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Full freq range: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;23.999, 1764&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; MHz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RF freq range: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;24, 1764&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; MHz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CORR freq range: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-0.001, 0.001&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; MHz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Sample rates: 0.25, 1.024, 1.536, 1.792, 1.92, 2.048, 2.16, 2.56, 2.88, 3.2 MSps
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;寻找-fm-广播&#34;&gt;寻找 FM 广播&lt;/h2&gt;
&lt;p&gt;接着，就可以在 GRC(GNURadio Companion) 中从 RTL-SDR 读取数据了。首先，我按照 &lt;a href=&#34;https://wiki.gnuradio.org/index.php/Guided_Tutorial_Hardware_Considerations&#34;&gt;Guided Tutorial Hardware Considerations&lt;/a&gt; 的方法进行分析，可以看到哪些频率上有信号：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/rtlsdr-analyze.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sample Rate: 3.2MHz，这里要取比较大，如果太小可能找不到信号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/rtlsdr-analyze-waterfall.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到在 100.6MHz 附近有比较明显的信号，查询了一下，这对应了北京新闻广播 FM100.6，确实是一个 FM 广播电台。通过修改中心频率，还可以找到附近的 FM97.4 音乐广播和 FM 103.9 交通广播。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/rtlsdr-analyze-waterfall-fm974.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;收听-fm-广播&#34;&gt;收听 FM 广播&lt;/h2&gt;
&lt;p&gt;找到频率以后，就可以进行 FM 解调了。我继续按照 &lt;a href=&#34;https://wiki.gnuradio.org/index.php/FM_Demod&#34;&gt;FM Demod&lt;/a&gt; 的方法进行搭建，由于我用的是 RTL-SDR，考虑到它支持的采样率，我选取了 2.88MHz 采样率，经过一个 1/10 的 Rational Resampler 变成 288KHz 采样率，再进行 FM 解调，最后得到 &lt;code&gt;288KHz / 6 = 48KHz&lt;/code&gt; 的音频，然后保存在 WAV 文件中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/rtlsdr-fm.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sample Rate: 2.88MHz，这里取了 48KHz 的整数倍数&lt;/li&gt;
&lt;li&gt;Rational Resampler - Decimation: FM Demod 的 Decimation 不能太大，所以这里先进行 10 倍降采样，把采样率从 2.88MHz 降到 288KHz&lt;/li&gt;
&lt;li&gt;FM Demod - Channel Rate: 输入的采样率是 288KHz&lt;/li&gt;
&lt;li&gt;FM Demod - Audio Decimation: 6 倍降采样，这样输出就是 48KHz&lt;/li&gt;
&lt;li&gt;FM Demod - Deviation: 75KHz，维基百科：&lt;code&gt;The maximum frequency deviation of the carrier is usually specified and regulated by the licensing authorities in each country. For a stereo broadcast, the maximum permitted carrier deviation is invariably ±75 kHz, although a little higher is permitted in the United States when SCA systems are used. For a monophonic broadcast, again the most common permitted maximum deviation is ±75 kHz. However, some countries specify a lower value for monophonic broadcasts, such as ±50 kHz.[5]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;FM Demod - Audio Pass/Audio Stop: 低通滤波器参数，保留 0-16 KHz 的频率（Passband），到 20KHz 截止（Stopband）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行一段时间，收听保存下来的 wav 文件，发现可以清晰地听到广播电台的声音。&lt;/p&gt;
&lt;p&gt;把输出改成 Audio Sink(Sample Rate = 48KHz)，然后就可以当成收音机应用来跑了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grcc -r rtlsdr_fm_play.grc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>ESXi 配置 LACP 链路聚合</title>
      <link>https://jia.je/devops/2022/09/24/vmware-esxi-lacp/</link>
      <pubDate>Sat, 24 Sep 2022 14:18:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2022/09/24/vmware-esxi-lacp/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;给 ESXi 接了两路 10Gbps 的以太网，需要用 LACP 来聚合。ESXi 自己不能配置 LACP，需要配合 vCenter Server 的 Distributed Switch 来配置。&lt;/p&gt;
&lt;h2 id=&#34;步骤&#34;&gt;步骤&lt;/h2&gt;
&lt;p&gt;参考文档：&lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.networking.doc/GUID-0D1EF5B4-7581-480B-B99D-5714B42CD7A9.html&#34;&gt;LACP Support on a vSphere Distributed Switch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一步是创建一个 Distributed Switch。找到 Cluster，点击 ACTIONS，在 Distributed Switch 里面选择 New Distributed Switch。里面的选项都可以用默认的，按需修改。&lt;/p&gt;
&lt;p&gt;第二步，找到刚刚创建的 Distributed Switch，点击 Configure，在 Settings 下点击 LACP，点击 NEW，选项可以用默认的，按需修改。&lt;/p&gt;
&lt;p&gt;第三步，找到 Distributed Switch，点击 ACTIONS，点击 Add and Manage Hosts，找到要配置的主机，在 Manage physical adapters 这一步，找到要加入到链路聚合的 vmnic，每个要聚合的 vmnic 都在右边的 Assign uplink 处选择刚刚创建的 LAG 下的 Uplink，按顺序，一一对应。其余选项可以使用默认的。这一步配置好以后，在交换机上应该就可以看到 LACP 正常运转。&lt;/p&gt;
&lt;p&gt;第四步，如果要把虚拟机连到链路聚合的网络上，找到虚拟机，点击 ACTIONS，点击 Edit Settings，新建一个网卡，Network adapter 处选择刚刚创建的 Distributed Port Group。这一步是让虚拟机多一个网卡，可以连接到 Distributed Switch 上。这一步配置好以后，虚拟机就可以收到来自其他物理机的网络流量，但是发送不出去。&lt;/p&gt;
&lt;p&gt;注：Static Binding 和 Ephemeral Binding 的区别见 &lt;a href=&#34;https://kb.vmware.com/s/article/1022312&#34;&gt;Static (non-ephemeral) or ephemeral port binding on a vSphere Distributed Switch (1022312)&lt;/a&gt;。在 vCenter 上可以给虚拟机分配到 Static binding 的 Distributed Port Group 上，而在 ESXi 上只可以分配到 Ephemeral Port Group。通常来讲，只需要 Static binding，而 Ephemeral binding 是在紧急情况下使用的。&lt;/p&gt;
&lt;p&gt;第五步，如果要把 VMKernel 连到链路聚合的网络上，找到虚拟机，添加一个 VMKernel adapter，端口组为 Distributed Port Group，如默认创建的第一个 Distributed Port Group。类似地，此时 VMKernel 配置的 IP 地址还不能从外面访问，但是可以从同一个 Distributed Switch 的虚拟机中访问。&lt;/p&gt;
&lt;p&gt;第六步，修改 Failover 配置，找到 Distributed Switch，点击 ACTIONS，在 Distributed Port Group 里点击 Manager Distributed Port Groups，勾选 Teaming and failover，勾上所有的 Distributed Port Group，修改下面的 Failover Order，默认状态是 Active uplinks 只有 Uplink，没有 LAG，需要修改为 Active uplinks 只有 LAG，而 Uplink 都在 Unused Uplinks 中。这样才可以让虚拟机和 VMKernel 出去的流量走链路聚合。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.networking.doc/GUID-9454ED41-6CFC-49F1-9982-34C1276F775A.html&#34;&gt;LACP Teaming and Failover Configuration for Distributed Port Groups&lt;/a&gt; 和 &lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.networking.doc/GUID-45DF45A6-DBDB-4386-85BF-400797683D05.html&#34;&gt;Configure a Link Aggregation Group to Handle the Traffic for Distributed Port Groups&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这样就配置完成了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Buildroot 2020.08 的 Fakeroot 版本过旧导致的兼容性问题</title>
      <link>https://jia.je/software/2022/09/19/buildroot-fakeroot-incompat/</link>
      <pubDate>Mon, 19 Sep 2022 20:14:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/09/19/buildroot-fakeroot-incompat/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在给之前的 Buildroot 2020.09 增加新的软件包，结果编译的时候报错：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mknod: ....../dev/console: Operation not permitted
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还有一个背景是前段时间把系统升级到了 Ubuntu 22.04 LTS。&lt;/p&gt;
&lt;h2 id=&#34;研究&#34;&gt;研究&lt;/h2&gt;
&lt;p&gt;跑的时候没有用 root，而是用 fakeroot 跑的，按理说在 fakeroot 里跑 mknod 是不会报错的，我直接运行系统的 fakeroot 是正常的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fakeroot -- mknod -m &lt;span style=&#34;color:#ae81ff&#34;&gt;0622&lt;/span&gt; test c &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时 fakeroot 会生成一个空文件，这是正常现象。那么为什么 Buildroot 里跑就不对了呢？&lt;/p&gt;
&lt;p&gt;我仔细观察了一下，buildroot 用的是自己编译的 fakeroot，版本是 1.20.2，用这个版本跑就会报错：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./output/host/bin/fakeroot -- mknod -m &lt;span style=&#34;color:#ae81ff&#34;&gt;0622&lt;/span&gt; test c &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mknod: test: Operation not permitted
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;果然就出问题了。&lt;/p&gt;
&lt;p&gt;用 strace 观察下区别：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ fakeroot -- strace mknod -m &lt;span style=&#34;color:#ae81ff&#34;&gt;0622&lt;/span&gt; test c &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newfstatat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AT_FDCWD, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;st_mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S_IFREG|0644, st_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, ...&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, AT_SYMLINK_NOFOLLOW&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msgget&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x4b33194b, IPC_CREAT|0600&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32771&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msgget&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x4b33194c, IPC_CREAT|0600&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32772&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msgsnd&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newfstatat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AT_FDCWD, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;st_mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S_IFREG|0644, st_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, ...&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, AT_SYMLINK_NOFOLLOW&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msgsnd&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AT_FDCWD, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;, O_RDONLY|O_NOFOLLOW|O_CLOEXEC|O_PATH&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newfstatat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;st_mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S_IFREG|0644, st_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, ...&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, AT_EMPTY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fchmodat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AT_FDCWD, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/proc/self/fd/3&amp;#34;&lt;/span&gt;, 0622&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./output/host/bin/fakeroot -- strace mknod -m &lt;span style=&#34;color:#ae81ff&#34;&gt;0622&lt;/span&gt; test c &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;umask&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                              &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;umask&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;002&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                              &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mknodat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AT_FDCWD, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;, S_IFCHR|0622, makedev&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x5, 0x1&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -1 EPERM &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Operation not permitted&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，正常情况下，mknodat 系统调用被拦截，由 fakeroot 来创建空文件；而错误的 fakeroot 版本下，没有拦截成功，就出现了 EPERM。&lt;/p&gt;
&lt;h2 id=&#34;解决&#34;&gt;解决&lt;/h2&gt;
&lt;p&gt;一个粗暴的解决办法是，直接修改 buildroot 源代码，让它用系统的 fakeroot：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$$&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BR_PATH&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; FAKEROOTDONTTRYCHOWN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; /usr/bin/fakeroot -- $$&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;FAKEROOT_SCRIPT&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我还尝试重新编译 fakeroot 1.20.2，会出现编译错误，采用类似 &lt;a href=&#34;https://bugs.archlinux.org/task/69572&#34;&gt;bug 69572 fakeroot failes to build: _STAT_VER undeclared&lt;/a&gt; 的方法可以解决编译的问题，但是还是出现 EPERM。&lt;a href=&#34;https://github.com/buildroot/buildroot/commit/f45925a951318e9e53bead80b363e004301adc6f&#34;&gt;Buildroot&lt;/a&gt; 后来也引入了类似的修复。&lt;/p&gt;
&lt;p&gt;于是在&lt;a href=&#34;https://salsa.debian.org/clint/fakeroot&#34;&gt;源代码&lt;/a&gt;历史中搜寻了一番，发现了一个疑似的修复 commit：&lt;a href=&#34;https://salsa.debian.org/clint/fakeroot/-/commit/c3eebec293e35b997bb46c22fb5a4e114afb5e7f&#34;&gt;configure.ac: fix __xmknod{,at} pointer argument&lt;/a&gt;，不过我并不能确定是不是这个问题。&lt;/p&gt;
&lt;p&gt;进一步，我在 Docker 镜像中手动下载并编译 fakeroot 1.20.2、1.21 和 1.25.3，都可以复现这个问题，编译 1.29 版本则没有问题。用 git 克隆&lt;a href=&#34;https://salsa.debian.org/clint/fakeroot&#34;&gt;仓库&lt;/a&gt;，进一步定位到 upstream/1.26 和 upstream/1.27 版本都是正常的。而 upstream/1.25.2 会出错。进一步二分，找到修复的 commit 是 &lt;a href=&#34;https://salsa.debian.org/clint/fakeroot/-/commit/feda578ca3608b7fc9a28a3a91293611c0ef47b7&#34;&gt;libfakeroot.c: add wrappers for new glibc 2.33+ symbols&lt;/a&gt;，相关的代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  int mknod(const char *pathname, mode_t mode, dev_t dev) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+     return WRAP_MKNOD MKNOD_ARG(_STAT_VER, pathname, mode, &amp;amp;dev);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  #if defined(HAVE_FSTATAT) &amp;amp;&amp;amp; defined(HAVE_MKNODAT)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    int mknodat(int dir_fd, const char *pathname, mode_t mode, dev_t dev) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+       return WRAP_MKNODAT MKNODAT_ARG(_STAT_VER, dir_fd, pathname, mode, &amp;amp;dev);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  #endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+#endif /* GLIBC_PREREQ */
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这说明在这个修复之前，不能正确地拦截 mknod 的调用。所以 glibc 2.33+ 要配合 fakeroot 1.26+ 版本才可以正确地运行 fakeroot。&lt;/p&gt;
&lt;p&gt;结论：找个时间用新版的 Buildroot 重新构建一份。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>从 TeX 到 PDF 的过程</title>
      <link>https://jia.je/software/2022/08/05/from-tex-to-pdf/</link>
      <pubDate>Fri, 05 Aug 2022 20:50:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/08/05/from-tex-to-pdf/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;今天跑 &lt;code&gt;xdvipdfmx&lt;/code&gt; 的时候出现了报错，忽然想研究一下，DVI 格式是什么，TeX 是如何一步步变成 PDF 的。&lt;/p&gt;
&lt;h2 id=&#34;流程&#34;&gt;流程&lt;/h2&gt;
&lt;p&gt;实际上从 TeX 到 PDF 有不同的工具，其中可能经历了不同的转化过程。&lt;/p&gt;
&lt;p&gt;我们今天来看一种比较原始的转换方式：从 TeX 到 DVI，从 DVI 到 PS，再 PS 到 PDF，主要目的是看看这些格式内部都是什么样子的。&lt;/p&gt;
&lt;h2 id=&#34;从-tex-到-dvi&#34;&gt;从 TeX 到 DVI&lt;/h2&gt;
&lt;p&gt;举一个很小的例子，例如 &lt;code&gt;test.tex&lt;/code&gt; 有如下的内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tex&#34; data-lang=&#34;tex&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello, world!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;\bye&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在命令行中运行 &lt;code&gt;tex test.tex&lt;/code&gt;，可以看到它生成了 &lt;code&gt;test.dvi&lt;/code&gt; 文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tex test.tex
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;test.tex &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Output written on test.dvi &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; page, &lt;span style=&#34;color:#ae81ff&#34;&gt;228&lt;/span&gt; bytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Transcript written on test.log.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么 DVI 就是 TeX 引擎输出的默认格式了。我们可以用 dviinfox 和 dviasm 工具来看它的一些信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dviinfox test.dvi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test.dvi: DVI format 2; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; page
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Magnification: 1000/1000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Size unit: 1000x25400000/&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1000x473628672&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;dum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0.054dum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1.000sp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Page size: 469ptx667pt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 16.510cmx23.449cm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Stack size: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Comment: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; TeX output 2022.08.05:2055&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Font   0:     cmr10 at 10.000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;design size 10.000, checksum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1274110073&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dviasm test.dvi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;preamble&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;id: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;numerator: &lt;span style=&#34;color:#ae81ff&#34;&gt;25400000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;denominator: &lt;span style=&#34;color:#ae81ff&#34;&gt;473628672&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;magnification: &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;comment: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; TeX output 2022.08.05:2058&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;postamble&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maxv: 667.202545pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maxh: 469.754990pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maxs: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pages: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;font definitions&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fntdef: cmr10 at 10pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;page &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;push:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  down: -14pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pop:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;down: 643.202545pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;push:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  down: -633.202545pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  push:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    right: 20pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fnt: cmr10 at 10pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello,&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    right: 3.333328pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    right: -0.277786pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;orld!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pop:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pop:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;down: 24pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;push:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  right: 232.377487pt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  set: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pop:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它定义了文档的一些尺寸和字体信息，然后主体部分就是每个页面上需要绘制的内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;push:
  down: -14pt
pop:
down: 643.202545pt
push:
  down: -633.202545pt
  push:
    right: 20pt
    fnt: cmr10 at 10pt
    set: &amp;#39;Hello,&amp;#39;
    right: 3.333328pt
    set: &amp;#39;w&amp;#39;
    right: -0.277786pt
    set: &amp;#39;orld!&amp;#39;
  pop:
pop:
down: 24pt
push:
  right: 232.377487pt
  set: &amp;#39;1&amp;#39;
pop:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，它保存了一些命令，就像是在移动光标，然后输出文字：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向下移动 643.20 pt&lt;/li&gt;
&lt;li&gt;向上移动 633.20 pt&lt;/li&gt;
&lt;li&gt;向右移动 20.00 pt&lt;/li&gt;
&lt;li&gt;设置字体为 cmr10&lt;/li&gt;
&lt;li&gt;输出 &amp;ldquo;Hello,&amp;rdquo;&lt;/li&gt;
&lt;li&gt;向右移动 3.33 pt&lt;/li&gt;
&lt;li&gt;输出 &amp;ldquo;w&amp;rdquo;&lt;/li&gt;
&lt;li&gt;向左移动 0.28 pt&lt;/li&gt;
&lt;li&gt;输出 &amp;ldquo;orld!&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实际上，它的编码也比较简单，就是一个字节的命令加上若干字节的参数。DVI 二进制格式详细的文档可见 &lt;a href=&#34;https://www.mn.uio.no/ifi/tjenester/it/hjelp/latex/dvi.pdf&#34;&gt;https://www.mn.uio.no/ifi/tjenester/it/hjelp/latex/dvi.pdf&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;从-dvi-到-ps&#34;&gt;从 DVI 到 PS&lt;/h2&gt;
&lt;p&gt;有了 DVI 文件以后，下一步是用 &lt;code&gt;dvips&lt;/code&gt; 工具来生成 PS 文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dvips test.dvi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This is dvips&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;k&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 2020.1 Copyright &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt; Radical Eye Software &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;www.radicaleye.com&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; TeX output 2022.08.05:2058&amp;#39;&lt;/span&gt; -&amp;gt; test.ps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/usr/share/texlive/texmf-dist/dvips/base/tex.pro&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/usr/share/texlive/texmf-dist/dvips/base/texps.pro&amp;gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/usr/share/texlive/texmf-dist/fonts/type1/public/amsfonts/cm/cmr10.pfb&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;DVI 是二进制格式，而 PS 是纯文本格式，我们可以用编辑器打开，看到里面大概有几部分内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开头的元数据&lt;/li&gt;
&lt;li&gt;tex.pro 文件的内容&lt;/li&gt;
&lt;li&gt;texps.pro 文件的内容&lt;/li&gt;
&lt;li&gt;定义 CMR10 字体&lt;/li&gt;
&lt;li&gt;描述文档内容&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;让我们直接来看最后一部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postscript&#34; data-lang=&#34;postscript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TeXDict&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39158280&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55380996&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;(test.dvi)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@start&lt;/span&gt; /Fa &lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;[{}&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83.022&lt;/span&gt; /CMR10 &lt;span style=&#34;color:#a6e22e&#34;&gt;rf&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%EndProlog
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%BeginSetup
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%Feature: *Resolution 600dpi
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TeXDict&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%BeginPaperSize: a4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;/setpagedevice &lt;span style=&#34;color:#a6e22e&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt; &amp;lt;&amp;lt; /PageSize [&lt;span style=&#34;color:#ae81ff&#34;&gt;595&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;842&lt;/span&gt;] &amp;gt;&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setpagedevice&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ /a4 &lt;span style=&#34;color:#a6e22e&#34;&gt;where&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a4&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ifelse&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%EndPaperSize
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%EndSetup
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%Page: 1 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TeXDict&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bop&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Fa&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(Hello,)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(w)&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(orld!)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1929&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5539&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(1)&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eop&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%Trailer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;userdict&lt;/span&gt; /end-hook &lt;span style=&#34;color:#a6e22e&#34;&gt;known&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;end-hook&lt;/span&gt;}&lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%%EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看到这个，肯定觉得很疑惑，这都是啥？除了隐约可以看到的 &lt;code&gt;Hello,&lt;/code&gt; &lt;code&gt;w&lt;/code&gt; &lt;code&gt;orld!&lt;/code&gt; 字样以外，有很多不明含义的字母和代码。&lt;/p&gt;
&lt;p&gt;为了读懂这些代码在做什么，首先来学习一下 PostScript。PostScript 是一个基于栈的语言，类似 Forth，所以很多运算都和我们平时看到的不一样。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postscript&#34; data-lang=&#34;postscript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;userdict&lt;/span&gt; /end-hook &lt;span style=&#34;color:#a6e22e&#34;&gt;known&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;end-hook&lt;/span&gt;}&lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际上做的事情是，判断 userdict 中是否存在 &lt;code&gt;/end-hook&lt;/code&gt;，如果存在，则展开它。它的计算过程是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postscript&#34; data-lang=&#34;postscript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;userdict&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;userdict&lt;/span&gt; /end-hook
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;userdict&lt;/span&gt; /end-hook &lt;span style=&#34;color:#a6e22e&#34;&gt;known&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;true&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;end-hook&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;true&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;end-hook&lt;/span&gt;} &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;end-hook&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么回过头来看 &lt;code&gt;Hello, world!&lt;/code&gt; 相关的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postscript&#34; data-lang=&#34;postscript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TeXDict&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bop&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Fa&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(Hello,)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(w)&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(orld!)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1929&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5539&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(1)&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eop&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里出现的 &lt;code&gt;TeXDict&lt;/code&gt; &lt;code&gt;bop&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; 等等应该也是在前面定义的了。往回翻，发现正是 &lt;code&gt;tex.pro&lt;/code&gt; 文件定义了这些对象。让我们一点点来看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postscript&#34; data-lang=&#34;postscript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/TeXDict &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dict&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;def&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;% define a working dictionary
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;表示 &lt;code&gt;TexDict&lt;/code&gt; 会展开为 &lt;code&gt;300 dict&lt;/code&gt;，即创建一个最大容量为 300 的 dict。接下来的 begin 和 end 就是在这个 dict 的作用域中进行运算。&lt;/p&gt;
&lt;p&gt;接下来是 &lt;code&gt;1 0 bop&lt;/code&gt;，那么我们要看 &lt;code&gt;bop&lt;/code&gt; 的定义，根据 DVI 中同名的命令，我们知道它的意思是 &lt;code&gt;begin of page&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postscript&#34; data-lang=&#34;postscript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bop           &lt;span style=&#34;color:#75715e&#34;&gt;% %t %d bop -  -- begin a brand new page, %t=pageno %d=seqno
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;userdict&lt;/span&gt; /bop-hook &lt;span style=&#34;color:#a6e22e&#34;&gt;known&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;bop-hook&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /SI &lt;span style=&#34;color:#a6e22e&#34;&gt;save&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;N&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@rigin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%   Now we check the resolution.  If it&amp;#39;s correct, we use RV as V,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%   otherwise we use QV.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;moveto&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /V &lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;currentmatrix&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mul&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exch&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mul&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.99&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {/QV} {/RV} &lt;span style=&#34;color:#a6e22e&#34;&gt;ifelse&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;def&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#a6e22e&#34;&gt;N&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里有一些代码的含义我还不清楚，先跳过。&lt;/p&gt;
&lt;p&gt;接下来的 &lt;code&gt;166 83 a&lt;/code&gt;，根据定义就可以判断出来它是在移动位置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postscript&#34; data-lang=&#34;postscript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/a { &lt;span style=&#34;color:#a6e22e&#34;&gt;moveto&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;% absolute positioning
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;紧随其后的 &lt;code&gt;Fa&lt;/code&gt; 指的是字体。&lt;/p&gt;
&lt;p&gt;接下来是 &lt;code&gt;(Hello,)&lt;/code&gt;，即把 &lt;code&gt;Hello,&lt;/code&gt; 这些文字压入栈。&lt;/p&gt;
&lt;p&gt;接下来看到 &lt;code&gt;28 b&lt;/code&gt;，它输出了栈顶的文本，进行了一个相对的水平移动，并且更新了 delta：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postscript&#34; data-lang=&#34;postscript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/delta &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;N&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;% we need a variable to hold space moves
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%   The next ten macros allow us to make horizontal motions that
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%   are within 4 of the previous horizontal motion with a single
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%   character.  These are typically used for spaces.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;%
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;/tail { &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; /delta &lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rmoveto&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/M { &lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delta&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tail&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/b { &lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tail&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;% show and tail!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后面的也都是类似的操作，让我们简单来总结一下 &lt;code&gt;TeXDict begin 1 0 bop 166 83 a Fa(Hello,)28 b(w)n(orld!)1929 5539 y(1)p eop end&lt;/code&gt; 都做了什么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1 0 bop&lt;/code&gt;: 创建了新页面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;166 83 a&lt;/code&gt;: 移动坐标到 &lt;code&gt;(166, 83)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fa&lt;/code&gt;: 设置字体&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(Hello,)&lt;/code&gt;: 压栈 &amp;ldquo;Hello,&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;28 b&lt;/code&gt;: 输出栈顶，移动坐标，对应 &lt;code&gt;dviasm&lt;/code&gt; 输出中的 &lt;code&gt;right: 3.333328pt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(w)&lt;/code&gt;: 压栈 &amp;ldquo;w&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;: 输出栈顶，移动坐标，对应 &lt;code&gt;dviasm&lt;/code&gt; 输出中的 &lt;code&gt;right: -0.277786pt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(orld!)&lt;/code&gt;: 压栈 &amp;ldquo;orld!&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1929 5539 y&lt;/code&gt;: 输出栈顶，移动坐标到页码的位置，对应 &lt;code&gt;dviasm&lt;/code&gt; 输出中的 &lt;code&gt;down: 24pt&lt;/code&gt; 和 &lt;code&gt;right: 232.377487.pt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(1)&lt;/code&gt;: 压栈 &amp;ldquo;1&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;: 输出栈顶&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eop&lt;/code&gt;: 结束页面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由此我们基本明白了从 DVI 到 PS 是怎么一个流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先在 &lt;code&gt;tex.pro&lt;/code&gt; 中定义了一些函数，来实现 DVI 中的命令&lt;/li&gt;
&lt;li&gt;把 DVI 中的命令翻译成 PS 代码&lt;/li&gt;
&lt;li&gt;把 &lt;code&gt;tex.pro&lt;/code&gt;、字体等还有翻译出来的 PS 拼接起来作为最终的输出&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这算是一种元编程，在 PS 中定义了一个 DSL，可以很方便地执行 DVI 指令。&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&#34;https://github.com/MiKTeX/miktex/blob/ab8ebca7c70fe8c9a1392dfb2393a0a7683e14cc/Programs/DviWare/dvips/source/tex.lpro&#34;&gt;这里&lt;/a&gt; 可以看到原始的带注释的 &lt;code&gt;tex.lpro&lt;/code&gt; 实现，上面涉及 &lt;code&gt;tex.pro&lt;/code&gt; 的代码内容也是从这里复制来的。&lt;/p&gt;
&lt;h2 id=&#34;从-ps-到-pdf&#34;&gt;从 PS 到 PDF&lt;/h2&gt;
&lt;p&gt;最后一步，我们可以用 &lt;code&gt;ps2pdf&lt;/code&gt; 把 PS 转换为 PDF。转换以后，就可以用常见的 PDF 浏览器来阅读了。让我们解压缩其中被压缩的部分，这样就方便阅读它的内容了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ps2pdf test.ps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pdftk test.pdf output test.unc.pdf uncompress
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在里面就可以找到我们的 &lt;code&gt;Hello, world!&lt;/code&gt; 了：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pdf&#34; data-lang=&#34;pdf&#34;&gt;5 0 obj

&amp;lt;&amp;lt;
/Length 225
&amp;gt;&amp;gt;
stream
q 0.1 0 0 0.1 0 0 cm
0 g
q
10 0 0 10 0 0 cm BT
/R7 9.96264 Tf
1 0 0 1 91.9199 710.04 Tm
[(H)3.21024(e)-1.66516(llo)-5.88993(,)-337.276(w)23.3747(o)-5.88993(r)-6.48419(ld)0.929988(!)]TJ
211.56 -654.72 Td
[(1)-5.8887]TJ
ET
Q
Q

endstream
endobj
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;阅读 &lt;a href=&#34;https://opensource.adobe.com/dc-acrobat-sdk-docs/pdfstandards/PDF32000_2008.pdf&#34;&gt;PDF 标准&lt;/a&gt;，可以发现它的输出文本部分是这样的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pdf&#34; data-lang=&#34;pdf&#34;&gt;BT
	/R7 9.96264 Tf
	1 0 0 1 91.9199 710.04 Tm
	[(H)3.21024(e)-1.66516(llo)-5.88993(,)-337.276(w)23.3747(o)-5.88993(r)-6.48419(ld)0.929988(!)]TJ
	211.56 -654.72 Td
	[(1)-5.8887]TJ
ET
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/R7 9.96264 Tf&lt;/code&gt; 设置了字体 &lt;code&gt;/R7&lt;/code&gt;，大小是 &lt;code&gt;9.96264&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 0 0 1 91.9199 710.04 Tm&lt;/code&gt; 设置 Text matrix&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[(H)3.21024(e)-1.66516(llo)-5.88993(,)-337.276(w)23.3747(o)-5.88993(r)-6.48419(ld)0.929988(!)]TJ&lt;/code&gt; 输出一系列的 &lt;code&gt;Hello, world!&lt;/code&gt;，中间的数字表示的是文字之间移动的坐标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;211.56 -654.72 Td&lt;/code&gt; 移动坐标到页码的位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[(1)-5.8887]TJ&lt;/code&gt; 输出页码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，从 PS 到 PDF 这一步就不是简单的映射了，例如在 DVI 和 PS 中都是 &lt;code&gt;Hello,&lt;/code&gt; &lt;code&gt;w&lt;/code&gt; &lt;code&gt;orld!&lt;/code&gt; 这样断开，而在 PDF 里面则是 &lt;code&gt;H&lt;/code&gt; &lt;code&gt;e&lt;/code&gt; &lt;code&gt;llo&lt;/code&gt; &lt;code&gt;,&lt;/code&gt; &lt;code&gt;w&lt;/code&gt; &lt;code&gt;o&lt;/code&gt; &lt;code&gt;r&lt;/code&gt; &lt;code&gt;ld&lt;/code&gt; &lt;code&gt;!&lt;/code&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用 Nix 编译 Rust 项目</title>
      <link>https://jia.je/software/2022/08/02/rust-nix/</link>
      <pubDate>Tue, 02 Aug 2022 14:28:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/08/02/rust-nix/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;Rust 项目一般是用 Cargo 管理，但是它的缺点是每个项目都要重新编译一次所有依赖，硬盘空间占用较大，不能跨项目共享编译缓存。调研了一下，有若干基于 Nix 的 Rust 构建工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cargo2nix: &lt;a href=&#34;https://github.com/cargo2nix/cargo2nix&#34;&gt;https://github.com/cargo2nix/cargo2nix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;carnix: 不再更新&lt;/li&gt;
&lt;li&gt;crane: &lt;a href=&#34;https://github.com/ipetkov/crane&#34;&gt;https://github.com/ipetkov/crane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;crate2nix: &lt;a href=&#34;https://github.com/kolloch/crate2nix&#34;&gt;https://github.com/kolloch/crate2nix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;naersk: &lt;a href=&#34;https://github.com/nix-community/naersk&#34;&gt;https://github.com/nix-community/naersk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nocargo: &lt;a href=&#34;https://github.com/oxalica/nocargo&#34;&gt;https://github.com/oxalica/nocargo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我分别来尝试一下这几个工具的使用。&lt;/p&gt;
&lt;p&gt;下面出现的一些命令参考了对应项目的文档。&lt;/p&gt;
&lt;h2 id=&#34;cargo2nix&#34;&gt;cargo2nix&lt;/h2&gt;
&lt;h3 id=&#34;卖点&#34;&gt;卖点&lt;/h3&gt;
&lt;p&gt;cargo2nix 的 README 提到了它的卖点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Development Shell - knowing all the dependencies means easy creation of complete shells. Run nix develop or direnv allow in this repo and see!&lt;/li&gt;
&lt;li&gt;Caching - CI &amp;amp; CD pipelines move faster when purity guarantees allow skipping more work!&lt;/li&gt;
&lt;li&gt;Reproducibility - Pure builds. Access to all of nixpkgs for repeatable environment setup across multiple distributions and platforms&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;cargo2nix 提供了 flakes 支持，不需要单独安装。&lt;/p&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;cargo2nix 的运行比较简单，利用 flakes 的特性，直接 &lt;code&gt;nix run&lt;/code&gt; 即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix run github:cargo2nix/cargo2nix
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它会生成一个 Cargo.nix 文件，还需要编写一个 &lt;code&gt;flake.nix&lt;/code&gt; 配合使用，这里以 &lt;code&gt;jiegec/webhookd&lt;/code&gt; 为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cargo2nix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:cargo2nix/cargo2nix/release-0.11.0&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;follows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cargo2nix/flake-utils&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;follows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cargo2nix/nixpkgs&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inputs: &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; inputs;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eachDefaultSystem (system:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nixpkgs {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;inherit&lt;/span&gt; system;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          overlays &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [cargo2nix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;overlays&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;default];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        rustPkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rustBuilder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;makePackageSet {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          rustVersion &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.61.0&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          packageFun &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./Cargo.nix&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rec&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        packages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          webhookd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (rustPkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;workspace&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;webhookd {})&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bin;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          default &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; packages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;webhookd;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后编译：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./result-bin/bin/webhookd --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;webhookd 0.2.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;cargo2nix 解析了 Cargo.lock，生成 Cargo.nix 文件，最后包装成 flake.nix。&lt;/p&gt;
&lt;h2 id=&#34;crane&#34;&gt;crane&lt;/h2&gt;
&lt;h3 id=&#34;卖点-1&#34;&gt;卖点&lt;/h3&gt;
&lt;p&gt;crane 的 README 提到了它的卖点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source fetching: automatically done using a Cargo.lock file&lt;/li&gt;
&lt;li&gt;Incremental: build your workspace dependencies just once, then quickly lint, build, and test changes to your project without slowing down&lt;/li&gt;
&lt;li&gt;Composable: split builds and tests into granular steps. Gate CI without burdening downstream consumers building from source.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装-1&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;crane 不需要安装，直接用 flakes 即可。&lt;/p&gt;
&lt;h3 id=&#34;使用-1&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;crane 使用的时候，直接在项目中编写 &lt;code&gt;flake.nix&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:NixOS/nixpkgs/nixpkgs-unstable&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    crane&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:ipetkov/crane&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    crane&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;follows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nixpkgs&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:numtide/flake-utils&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { self&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; crane&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eachDefaultSystem (system: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      packages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;default &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; crane&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;system&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buildPackage {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./.&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以了，不需要使用工具从 Cargo.lock 生成对应的 Cargo.nix。&lt;/p&gt;
&lt;p&gt;但是由于 webhookd 依赖 native 库，所以还需要需要手动加入 native 依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:NixOS/nixpkgs/nixpkgs-unstable&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    crane&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:ipetkov/crane&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    crane&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;follows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nixpkgs&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:numtide/flake-utils&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { self&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; crane&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eachDefaultSystem (system:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nixpkgs {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;inherit&lt;/span&gt; system;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        packages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;default &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; crane&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;system&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buildPackage {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./.&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          buildInputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            libiconv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            darwin&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apple_sdk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frameworks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Security
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;构建：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./result/bin/webhookd --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;webhookd 0.2.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;原理-1&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;crane 会把所有的依赖下载起来用 cargo 进行一次构建，把生成的 target 目录打成 &lt;code&gt;target.tar.zst&lt;/code&gt;，然后再加上项目的源代码再构建一次，这样来实现 incremental compilation。它还提供了一些 check lint 等实用的命令。但是，它的目的和其他项目不大一样，它并不考虑跨项目的依赖缓存。&lt;/p&gt;
&lt;h2 id=&#34;crate2nix&#34;&gt;crate2nix&lt;/h2&gt;
&lt;h3 id=&#34;卖点-2&#34;&gt;卖点&lt;/h3&gt;
&lt;p&gt;crate2nix 在 README 中写的卖点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Same dependency tree as cargo: It uses cargo_metadata to obtain the dependency tree from cargo. Therefore, it will use the exact same library versions as cargo and respect any locked down version in Cargo.lock.&lt;/li&gt;
&lt;li&gt;Smart caching: It uses smart crate by crate caching so that nix rebuilds exactly the crates that need to be rebuilt. Compare that to docker layers&amp;hellip;&lt;/li&gt;
&lt;li&gt;Nix ecosystem goodness: You can use all things that make the nix/NixOS ecosystem great, e.g. distributed/remote builds, build minimal docker images, deploy your binary as a service to the cloud with NixOps, &amp;hellip;&lt;/li&gt;
&lt;li&gt;Out of the box support for libraries with non-rust dependencies: It builds on top of the buildRustCrate function from NixOS so that native dependencies of many rust libraries are already correctly fetched when needed. If your library with native dependencies is not yet supported, you can customize defaultCrateOverrides / crateOverrides, see below.&lt;/li&gt;
&lt;li&gt;Easy to understand nix template: The actual nix code is generated via templates/build.nix.tera so you can fix/improve the nix code without knowing rust if all the data is already there.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装-2&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;首先要安装 crate2nix，由于它的稳定版本 0.10.0 已经是去年的版本了，我直接用了 master 分支。如果是直接安装，用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-env -i -f https://github.com/kolloch/crate2nix/tarball/master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但我是用 flakes + home-manager 管理的，所以我实际的配置方法是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向 flake.nix 添加 crate2nix 到 inputs，并且设置 &lt;code&gt;crate2nix.flake = false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把 crate2nix 从 inputs 传到实际的 home manager 配置，然后在 &lt;code&gt;home.packages&lt;/code&gt; 里加入 &lt;code&gt;callPackage crate2nix {}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;使用-2&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;接下来，找到一个 Rust 项目，在其中运行 &lt;code&gt;crate2nix generate&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ crate2nix generate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Generated ./Cargo.nix successfully.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;构建：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix build -f Cargo.nix rootCrate.build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译的结果可以在 &lt;code&gt;result/bin&lt;/code&gt; 下看到。&lt;/p&gt;
&lt;p&gt;我编译的是 &lt;code&gt;jiegec/webhookd&lt;/code&gt;，编译过程中出现了报错：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;   = note: ld: framework not found Security
&amp;gt;           clang-11: error: linker command failed with exit code 1 (use -v to see invocation)
&amp;gt;
&amp;gt;
&amp;gt; error: aborting due to previous error
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;前面的 cargo2nix 没有出现这样的问题，应该是因为 cargo2nix 帮我们引入了 Security 的依赖，见 &lt;a href=&#34;https://github.com/cargo2nix/cargo2nix/blob/9c3b846c727300f8146f20f01c5387b398d1e0e4/overlay/overrides.nix&#34;&gt;overrides.nix&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;根据 crate2nix 的文档，需要添加额外的 native 依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ pkgs &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;nixpkgs&amp;gt;&lt;/span&gt; { } }:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  generatedBuild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./Cargo.nix&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;inherit&lt;/span&gt; pkgs;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    defaultCrateOverrides &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; defaultCrateOverrides &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      webhookd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; attrs: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        buildInputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;optionals
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            stdenv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isDarwin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            [ darwin&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apple_sdk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frameworks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Security ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;generatedBuild&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rootCrate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后构建：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix build -f default.nix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./result/bin/webhookd --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;webhookd 0.2.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以正常运行了。&lt;/p&gt;
&lt;h3 id=&#34;原理-2&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;它的原理是使用 &lt;code&gt;cargo_metadata&lt;/code&gt; 库从 Cargo.lock 中获取各个 crate 的信息，然后翻译成 &lt;code&gt;Cargo.nix&lt;/code&gt;，之后就是由 nix 来编译各个 crate 的内容。所以一开始还是需要先用 Cargo 创建项目，添加依赖，生成 &lt;code&gt;Cargo.lock&lt;/code&gt;；之后再用 &lt;code&gt;crate2nix generate&lt;/code&gt; 同步依赖信息到 &lt;code&gt;Cargo.nix&lt;/code&gt; 文件，构建的时候就不需要 Cargo 参与了，直接 rustc。&lt;/p&gt;
&lt;h2 id=&#34;naersk&#34;&gt;naersk&lt;/h2&gt;
&lt;h3 id=&#34;安装-3&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;需要安装 &lt;a href=&#34;https://github.com/nmattia/niv&#34;&gt;niv&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-env -iA nixpkgs.niv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用-3&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;在项目目录下，首先用 &lt;code&gt;niv&lt;/code&gt; 导入 naersk：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;niv init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;niv add nix-community/naersk
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后编写一个 &lt;code&gt;default.nix&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;nixpkgs&amp;gt;&lt;/span&gt; { };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sources &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./nix/sources.nix&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  naersk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;callPackage sources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;naersk { };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;naersk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buildPackage &lt;span style=&#34;color:#e6db74&#34;&gt;./.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;构建：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix build -f default.nix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./result/bin/webhookd --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;webhookd 0.2.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;原理-3&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;naersk 的原理和 crane 是类似的：把所有依赖下载下来，创建一个只有依赖的项目，然后用 cargo 预编译，编译完得到的 target 目录打成 &lt;code&gt;target.tar.zst&lt;/code&gt;；然后基于预编译的结果再编译整个项目。&lt;/p&gt;
&lt;h2 id=&#34;nocargo&#34;&gt;nocargo&lt;/h2&gt;
&lt;h3 id=&#34;卖点-3&#34;&gt;卖点&lt;/h3&gt;
&lt;p&gt;nocargo 的 README 提到了以下卖点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No IFDs (import-from-derivation). See meme.&lt;/li&gt;
&lt;li&gt;No cargo dependency during building. Only rustc.&lt;/li&gt;
&lt;li&gt;No need for hash prefetching or code generation1.&lt;/li&gt;
&lt;li&gt;Crate level caching, globally shared.&lt;/li&gt;
&lt;li&gt;nixpkgs integration for non-Rust dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;README 也提到了 nocargo, cargo2nix, naersk 和 buildRustPackage 的对比。&lt;/p&gt;
&lt;h3 id=&#34;使用-4&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;nocargo 目前&lt;a href=&#34;https://github.com/oxalica/nocargo/blob/90a6d0e8dcfc2205fa69423d42bff6fd1b997121/flake.nix#L13&#34;&gt;仅支持 x86_64-linux 平台&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在一个 Cargo 项目中，运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix run github:oxalica/nocargo init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它会生成 &lt;code&gt;flake.nix&lt;/code&gt; 文件如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# See more usages of nocargo at https://github.com/oxalica/nocargo#readme&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  description &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rust package webhookd&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:NixOS/nixpkgs&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:numtide/flake-utils&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nocargo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:oxalica/nocargo&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;follows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nixpkgs&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# inputs.registry-crates-io.follows = &amp;#34;registry-crates-io&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Optionally, you can override crates.io index to get cutting-edge packages.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# registry-crates-io = { url = &amp;#34;github:rust-lang/crates.io-index&amp;#34;; flake = false; };&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nocargo&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;inputs:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eachSystem [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x86_64-linux&amp;#34;&lt;/span&gt; ] (system:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ws &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nocargo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;system&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mkRustPackageOrWorkspace {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./.&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rec&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        packages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          default &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; packages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;webhookd;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          webhookd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ws&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;release&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;webhookd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bin;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          webhookd-dev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ws&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;webhookd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bin;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;构建：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;出现了编译错误，说明 crates.io index 版本不是最新的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;error: Package bytes doesn&amp;#39;t have version 1.2.0 in index. Available versions: 0.0.1 0.1.0 0.1.1 0.1.2 0.2.0 0.2.1 0.2.10 0.2.11 0.2.2 0.2.3 0.2.4 0.2.5 0.2.6 0.2.7 0.2.8 0.2.9 0.3.0 0.4.0 0.4.1 0.4.10 0.4.11 0.4.12 0.4.2 0.4.3 0.4.4 0.4.5 0.4.6 0.4.7 0.4.8 0.4.9 0.5.0 0.5.1 0.5.2 0.5.3 0.5.4 0.5.5 0.5.6 0.6.0 1.0.0 1.0.1 1.1.0
(use &amp;#39;--show-trace&amp;#39; to show detailed location information)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;按照 &lt;code&gt;flake.nix&lt;/code&gt; 中的提示，使用最新的 crates.io index：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# See more usages of nocargo at https://github.com/oxalica/nocargo#readme&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  description &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rust package webhookd&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:NixOS/nixpkgs&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:numtide/flake-utils&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nocargo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:oxalica/nocargo&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;follows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nixpkgs&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;registry-crates-io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;follows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;registry-crates-io&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Optionally, you can override crates.io index to get cutting-edge packages.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    registry-crates-io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:rust-lang/crates.io-index&amp;#34;&lt;/span&gt;; flake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nocargo&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;inputs:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eachSystem [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x86_64-linux&amp;#34;&lt;/span&gt; ] (system:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ws &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nocargo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;system&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mkRustPackageOrWorkspace {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./.&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rec&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        packages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          default &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; packages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;webhookd;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          webhookd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ws&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;release&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;webhookd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bin;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          webhookd-dev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ws&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;webhookd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bin;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;继续构建就成功了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;• Updated input &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nocargo/registry-crates-io&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;github:rust-lang/crates.io-index/1ce12a7e3367a2a673f91f07ab7cc505a0b8f069&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2022-07-17&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  → follows &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;registry-crates-io&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;• Added input &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;registry-crates-io&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;github:rust-lang/crates.io-index/627caba32f416e706bf3f2ceac55230ec79710c5&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2022-08-02&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./result/bin/webhookd --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;webhookd 0.2.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;可以看到，上面的不同工具采用了不同的方法，如果要比较的话：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nix drv 粒度：每个依赖（cargo2nix，crate2nix，nocargo）、所有依赖（crane，naersk）。前者的好处是会跨项目共享依赖，进一步可以传到 binary cache。&lt;/li&gt;
&lt;li&gt;是否生成包括完整依赖信息的 nix 文件：是（cargo2nix，crate2nix）、否（crane，naersk，nocargo）。生成的话，仓库里的 Cargo.lock 和 Cargo.nix 的信息是重复的，如果修改了 Cargo.lock，需要重新同步 Cargo.nix。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>invalid date 报错与时区的关系</title>
      <link>https://jia.je/software/2022/07/26/invalid-date-timezone/</link>
      <pubDate>Tue, 26 Jul 2022 21:51:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/07/26/invalid-date-timezone/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在验题的时候，@HarryChen 发现了一个现象：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ date -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1919-04-13&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;date: invalid date ‘1919-04-13’
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ TZ&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;UTC date -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1919-04-13&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 00:00:00 UTC &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也就是说，这个现象与时区有关，那么为啥 &lt;code&gt;1919-04-13&lt;/code&gt; 是一个不合法的日期呢？&lt;/p&gt;
&lt;h2 id=&#34;时区&#34;&gt;时区&lt;/h2&gt;
&lt;p&gt;实际上，对于某一个时区来说，有的时间是不存在的，最常见的就是夏令时。在 &lt;a href=&#34;https://timezonedb.com/time-zones/Asia/Shanghai&#34;&gt;Timezone DB&lt;/a&gt; 里可以看到，恰好在 1919 年 4 月 13 日发生了一次 UTC+8 到 UTC+9 的变化，因此零点变成了一点，就变成了不合法的日期。&lt;/p&gt;
&lt;p&gt;这个数据，实际上保存在 tzdata 中，可以用 zdump 工具查看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tzdata -v Asia/Shanghai
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 20:45:52 &lt;span style=&#34;color:#ae81ff&#34;&gt;1901&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 04:45:52 &lt;span style=&#34;color:#ae81ff&#34;&gt;1901&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 20:45:52 &lt;span style=&#34;color:#ae81ff&#34;&gt;1901&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 04:45:52 &lt;span style=&#34;color:#ae81ff&#34;&gt;1901&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 15:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 16:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Tue Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 14:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tue Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Tue Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 15:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tue Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1919&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri May &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 15:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1940&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fri May &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1940&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri May &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 16:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1940&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Jun  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1940&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 14:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1940&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1940&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 15:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1940&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 23:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1940&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Mar &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 15:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1941&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fri Mar &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1941&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Mar &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 16:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1941&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Mar &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1941&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Nov  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 14:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1941&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Nov  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1941&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Nov  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 15:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1941&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Nov  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 23:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1941&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 15:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1942&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fri Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1942&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 16:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1942&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1942&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 14:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1945&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Sep  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1945&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 15:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1945&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Sep  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 23:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1945&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Tue May &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 15:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1946&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tue May &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1946&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Tue May &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 16:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1946&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Wed May &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1946&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Mon Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 14:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1946&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mon Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1946&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Mon Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 15:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1946&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mon Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1946&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Mon Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 15:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1947&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mon Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1947&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Mon Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 16:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1947&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tue Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1947&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 14:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1947&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fri Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1947&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 15:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1947&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fri Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 23:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1947&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 15:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1948&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fri Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1948&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 16:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1948&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat May  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1948&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Thu Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 14:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1948&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Thu Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1948&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Thu Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 15:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1948&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Thu Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1948&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 15:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1949&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1949&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; 16:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1949&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun May  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1949&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri May &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 14:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1949&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fri May &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 23:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1949&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Fri May &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 15:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1949&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fri May &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 23:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1949&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat May  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; 17:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1986&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun May  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1986&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat May  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; 18:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1986&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun May  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 03:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1986&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 16:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1986&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1986&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 17:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1986&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1986&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 17:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 18:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 03:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 16:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; 17:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 17:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1988&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1988&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 18:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1988&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 03:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1988&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; 16:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1988&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1988&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; 17:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1988&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1988&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 17:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1989&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1989&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 18:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1989&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 03:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1989&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 16:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1989&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1989&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 17:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1989&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1989&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 17:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1990&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1990&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 18:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1990&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 03:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1990&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 16:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1990&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1990&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 17:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1990&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1990&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 17:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1991&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1991&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 18:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1991&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 03:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1991&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 16:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1991&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 01:59:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;1991&lt;/span&gt; CDT isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Sat Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 17:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1991&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sun Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; 01:00:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;1991&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Mon Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; 03:14:07 &lt;span style=&#34;color:#ae81ff&#34;&gt;2038&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mon Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; 11:14:07 &lt;span style=&#34;color:#ae81ff&#34;&gt;2038&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Asia/Shanghai  Tue Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; 03:14:07 &lt;span style=&#34;color:#ae81ff&#34;&gt;2038&lt;/span&gt; UTC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tue Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; 11:14:07 &lt;span style=&#34;color:#ae81ff&#34;&gt;2038&lt;/span&gt; CST isdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它列出来了历史上 Asia/Shanghai 时区的变化历史。具体的历史，可以查看 &lt;a href=&#34;https://zh.wikipedia.org/zh-cn/%E4%B8%AD%E5%9C%8B%E6%99%82%E5%8D%80&#34;&gt;中国时区&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;此外，历史上，从儒略历到格里高利历的演变过程，也出现了一段“不存在”的日期，如 &lt;a href=&#34;https://stackoverflow.com/questions/35194544/setting-october-14-1582-fails-in-java-sql-date&#34;&gt;Setting October 14 ,1582 fails in java.sql.Date&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ceph Cookbook</title>
      <link>https://jia.je/devops/2022/07/16/ceph-cookbook/</link>
      <pubDate>Sat, 16 Jul 2022 19:32:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2022/07/16/ceph-cookbook/</guid>
      <description>&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OSD：负责操作硬盘的程序，一个硬盘一个 OSD&lt;/li&gt;
&lt;li&gt;MON：管理集群状态，比较重要，可以在多个节点上各跑一个&lt;/li&gt;
&lt;li&gt;MGR：监测集群状态&lt;/li&gt;
&lt;li&gt;RGW(optional)：提供对象存储 API&lt;/li&gt;
&lt;li&gt;MDS(optional)：提供 CephFS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 Ceph 做存储的方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;librados: 库&lt;/li&gt;
&lt;li&gt;radosgw: 对象存储 HTTP API&lt;/li&gt;
&lt;li&gt;rbd: 块存储&lt;/li&gt;
&lt;li&gt;cephfs: 文件系统&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;认证&#34;&gt;认证&lt;/h2&gt;
&lt;p&gt;Ceph 客户端认证需要用户名 + 密钥。默认情况下，用户名是 &lt;code&gt;client.admin&lt;/code&gt;，密钥路径是 &lt;code&gt;/etc/ceph/ceph.用户名.keyring&lt;/code&gt;。&lt;code&gt;ceph --user abc&lt;/code&gt; 表示以用户 &lt;code&gt;client.abc&lt;/code&gt; 的身份访问集群。&lt;/p&gt;
&lt;p&gt;用户的权限是按照服务类型决定的。可以用 &lt;code&gt;ceph auth ls&lt;/code&gt; 显示所有的用户以及权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ceph auth ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;osd.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        key: REDACTED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        caps: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;mgr&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; allow profile osd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        caps: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;mon&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; allow profile osd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        caps: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;osd&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; allow *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client.admin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        key: REDACTED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        caps: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;mds&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; allow *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        caps: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;mgr&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; allow *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        caps: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;mon&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; allow *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        caps: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;osd&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; allow *
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，&lt;code&gt;osd.0&lt;/code&gt; 对 OSD 有所有权限，对 mgr 和 mon 都只有 osd 相关功能的权限；&lt;code&gt;client.admin&lt;/code&gt; 有所有权限。&lt;code&gt;profile&lt;/code&gt; 可以认为是预定义的一些权限集合。&lt;/p&gt;
&lt;p&gt;新建用户并赋予权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph auth get-or-create client.abc mon &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;allow r&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph auth caps client.abc mon &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;allow rw&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;获取权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph auth get client.abc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;删除用户：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph auth print-key client.abc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;osd&#34;&gt;OSD&lt;/h2&gt;
&lt;p&gt;管理 OSD 实际上就是管理存储数据的硬盘。&lt;/p&gt;
&lt;p&gt;查看状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd stat
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显示有多少个在线和离线的 OSD。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd tree
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显示了存储的层级，其中 ID 非负数是实际的 OSD，负数是其他层级，例如存储池，机柜，主机等等。&lt;/p&gt;
&lt;h2 id=&#34;crush&#34;&gt;CRUSH&lt;/h2&gt;
&lt;p&gt;CRUSH 是一个算法，指定了如何给 PG 分配 OSD，到什么类型的设备，确定它的 failure domain 等等。例如，如果指定 failure domain 为 host，那么它就会分配到不同 host 上的 osd，这样一个 host 挂了不至于全军覆没。类似地，还可以设定更多级别的 failure domain，例如 row，rack，chassis 等等。&lt;/p&gt;
&lt;p&gt;OSD 可以设置它的 CRUSH Location，在 ceph.conf 中定义。&lt;/p&gt;
&lt;p&gt;为了配置数据置放的规则，需要设置 CRUSH Rule。&lt;/p&gt;
&lt;p&gt;列举 CRUSH Rule：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd crush rule ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd crush rule dump
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看 CRUSH 层级：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd crush tree --show-shadow
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在里面可能会看到 &lt;code&gt;default~ssd&lt;/code&gt;，它指的意思就是只保留 default 下面的 ssd 设备。&lt;/p&gt;
&lt;p&gt;文本形式导出 CRUSH 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd getcrushmap | crushtool -d - -o crushmap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat crushmap
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 Rule 的定义，如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# simple replicated
rule replicated_rule {
        id 0
        # a replicated rule
        type replicated
        # iterate all devices of &amp;#34;default&amp;#34;
        step take default
        # select n osd with failure domain &amp;#34;osd&amp;#34;
        # firstn: continuous
        step chooseleaf firstn 0 type osd
        step emit
}

# erasure on hdd
rule erasure-hdd {
        id 4
        # an erasure rule
        type erasure
        # try more times to find a good mapping
        step set_chooseleaf_tries 5
        step set_choose_tries 100
        # iterate hdd devices of &amp;#34;default&amp;#34;, i.e. &amp;#34;default~hdd&amp;#34;
        step take default class hdd
        # select n osd with failure domain &amp;#34;osd&amp;#34;
        # indep: replace failed osd with another
        step choose indep 0 type osd
        step emit
}

# replicated on hdd
rule replicated-hdd-osd {
        id 5
        # a replicated rule
        type replicated
        # iterate hdd devices of &amp;#34;default&amp;#34;, i.e. &amp;#34;default~hdd&amp;#34;
        step take default class hdd
        # select n osd with failure domain &amp;#34;osd&amp;#34;
        # firstn: continuous
        step choose firstn 0 type osd
        step emit
}

# replicated on different hosts
rule replicated-host {
        id 6
        # a replicated rule
        type replicated
        # iterate all devices of &amp;#34;default&amp;#34;
        step take default
        # select n osd with failure domain &amp;#34;host&amp;#34;
        # firstn: continuous
        step chooseleaf firstn 0 type host
        step emit
}

# replicate one on ssd, two on hdd
rule replicated-ssd-primary {
        id 7
        # a replicated rule
        type replicated

        # iterate ssd devices of &amp;#34;default&amp;#34;
        step take default class ssd
        step chooseleaf firstn 1 type host
        step emit

        # iterate hdd devices of &amp;#34;default&amp;#34;
        step take default class hdd
        step chooseleaf firstn 2 type host
        step emit
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;choose 和 chooseleaf 的区别是，前者可以 choose 到中间层级，例如先选择 host，再在 host 里面选 osd；而 chooseleaf 是直接找到 osd。所以 &lt;code&gt;choose type osd&lt;/code&gt; 和 &lt;code&gt;chooseleaf type osd&lt;/code&gt; 是等价的。&lt;/p&gt;
&lt;p&gt;如果这个搜索条件比较复杂，例如找到了某一个 host，里面的 osd 个数不够，就需要重新搜。&lt;/p&gt;
&lt;p&gt;新建一个 Replicated CRUSH Rule：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# root=default, failure domain=osd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd crush rule create-replicated xxx default osd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# root=default, failure domain=host, class=ssd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd crush rule create-replicated yyy default host ssd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果指定了 device class，它只会在对应类型的设备上存储。&lt;/p&gt;
&lt;h2 id=&#34;pool&#34;&gt;Pool&lt;/h2&gt;
&lt;p&gt;Pool 是存储池，后续的 RBD/CephFS 功能都需要指定存储池来工作。&lt;/p&gt;
&lt;p&gt;创建存储池：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd pool create xxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd pool create PG_NUM
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了性能考虑，可以设置 PG（Placement Group）数量。默认情况下，会创建 replicated 类型的存储池，也就是会存多份，类似 RAID1。也可以设置成 erasure 类型的存储池，类似 RAID5。&lt;/p&gt;
&lt;p&gt;每个 Placement Group 里的数据会保存在同一组 OSD 中。数据通过 hash，会分布在不同的 PG 里。&lt;/p&gt;
&lt;p&gt;列举所有的存储池：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd lspools
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看存储池的使用量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rados df
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;存储池的 IO 状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd pool stats
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对存储池做快照：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd mksnap xxx snap-xxx-123
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pg&#34;&gt;PG&lt;/h3&gt;
&lt;p&gt;PG 是数据存放的组，每个对象都会放到一个 PG 里面，而 PG 会决定它保存到哪些 OSD 上（具体哪些 OSD 是由 CRUSH 决定的）。PG 数量只有一个的话，那么一个 pool 的所有数据都会存放在某几个 OSD 中，一旦这几个 OSD 都不工作了，那么整个 pool 的数据都不能访问了。PG 增多了以后，就会分布到不同的 OSD 上，并且各个 OSD 的占用也会比较均匀。&lt;/p&gt;
&lt;p&gt;查看 PG 状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph pg dump
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;auto-scale&#34;&gt;Auto Scale&lt;/h4&gt;
&lt;p&gt;PG 数量可以让集群自动调整：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd pool set xxx pg_autoscale_mode on
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置 autoscale 目标为每个 OSD 平均 100 个 PG：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph config set global mon_target_pg_per_osd &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;全局 autoscale 开关：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Enable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd pool unset noautoscale
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Disable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd pool set unautoscale
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Read&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd pool get noautoscale
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看 autoscale 状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph osd pool autoscale-status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果没有显示，说明 autoscale 没有工作，可能的原因是，部分 pool 采用了指定 osd class 的 crush rule，例如指定了 hdd 盘，但是也有部分 pool 没有指定盘的类型，例如默认的 replicated_rule。这时候，把这些盘也设置成一个指定 osd class 的 crush rule 即可。&lt;/p&gt;
&lt;h2 id=&#34;rbd&#34;&gt;RBD&lt;/h2&gt;
&lt;p&gt;RBD 把 Ceph 暴露为块设备。&lt;/p&gt;
&lt;h3 id=&#34;创建&#34;&gt;创建&lt;/h3&gt;
&lt;p&gt;初始化 Pool 用于 RBD：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd pool init xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了安全性考虑，一般会为 RBD 用户创建单独的用户：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph auth get-or-create client.abc mon &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;profile rbd&amp;#39;&lt;/span&gt; osd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;profile rbd pool=xxx&amp;#39;&lt;/span&gt; mgr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;profile rbd pool=xxx&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建 RBD 镜像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd create --size &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; xxx/yyy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;表示在 Pool xxx 上面创建了一个名字为 yyy 大小为 1024MB 的镜像。&lt;/p&gt;
&lt;h3 id=&#34;状态&#34;&gt;状态&lt;/h3&gt;
&lt;p&gt;列举 Pool 里的镜像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd ls xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认的 Pool 名字是 &lt;code&gt;rbd&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;查看镜像信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd info yyy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd info xxx/yyy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;扩容&#34;&gt;扩容&lt;/h3&gt;
&lt;p&gt;修改镜像的容量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd resize --size &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; yyy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd resize --size &lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt; yyy --allow-shrink
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;挂载&#34;&gt;挂载&lt;/h3&gt;
&lt;p&gt;在其他机器挂载 RBD 的时候，首先要修改 &lt;code&gt;/etc/ceph&lt;/code&gt; 下配置，确认有用户，密钥和 MON 的地址。&lt;/p&gt;
&lt;p&gt;然后，用 rbd 挂载设备：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd device map xxx/yyy --id abc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以用户 abc 的身份挂载 Pool xxx 下面的 yyy 镜像。&lt;/p&gt;
&lt;p&gt;这时候就可以在 &lt;code&gt;/dev/rbd*&lt;/code&gt; 或者 &lt;code&gt;/dev/rbd/&lt;/code&gt; 下面看到设备文件了。&lt;/p&gt;
&lt;p&gt;显示已经挂载的设备：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbd device list
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cephfs&#34;&gt;CephFS&lt;/h2&gt;
&lt;h3 id=&#34;创建-1&#34;&gt;创建&lt;/h3&gt;
&lt;p&gt;如果配置了编排器（Orchestrator），可以直接用命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph fs volume create xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建一个名为 &lt;code&gt;xxx&lt;/code&gt; 的 CephFS。&lt;/p&gt;
&lt;p&gt;也可以手动创建：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ceph osd pool create xxx_data0
ceph osd pool create xxx_metadata
ceph fs new xxx xxx_metadata xxx_data0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就创建了两个 pool，分别用于存储元数据和文件数据。一个 CephFS 需要一个 pool 保存元数据，若干个 pool 保存文件数据。&lt;/p&gt;
&lt;p&gt;创建了 CephFS 以后，相应的 MDS 也会启动。&lt;/p&gt;
&lt;h3 id=&#34;状态-1&#34;&gt;状态&lt;/h3&gt;
&lt;p&gt;查看 MDS 状态：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ceph mds stat
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;客户端配置&#34;&gt;客户端配置&lt;/h3&gt;
&lt;p&gt;在挂载 CephFS 之前，首先要配置客户端。&lt;/p&gt;
&lt;p&gt;在集群里运行 &lt;code&gt;ceph config generate-minimal-conf&lt;/code&gt;，它会生成一个配置文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ceph config generate-minimal-conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# minimal ceph.conf for &amp;lt;fsid&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;global&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fsid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &amp;lt;fsid&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mon_host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v2:x.x.x.x:3300/0,v1:x.x.x.x:6789/0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把内容复制到客户端的 &lt;code&gt;/etc/ceph/ceph.conf&lt;/code&gt;。这样客户端就能找到集群的 MON 地址和 FSID。&lt;/p&gt;
&lt;p&gt;接着，我们在集群上给客户端创建一个用户：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ceph fs authorize xxx client.abc / rw
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建一个用户 abc，对 CephFS xxx 有读写的权限。把输出保存到客户端的 &lt;code&gt;/etc/ceph/ceph.client.abc.keyring&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h3 id=&#34;挂载-1&#34;&gt;挂载&lt;/h3&gt;
&lt;p&gt;挂载：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t ceph abc@.xxx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/ MOUNTPOINT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t ceph abc@&amp;lt;fsid&amp;gt;.xxx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/ MOUNTPOINT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t ceph abc@&amp;lt;fsid&amp;gt;.xxx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/ -o mon_addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x.x.x.x:6789,secret&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;REDACTED MOUNTPOINT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t ceph abc@.xxx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/ -o mon_addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x.x.x.x:6789/y.y.y.y:6789,secretfile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/etc/ceph/xxx.secret MOUNTPOINT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t ceph -o name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;client.abc,secret&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;REDACTED,mds_namespace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;xxx MON_IP:/ MOUNTPOINT
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以用户 &lt;code&gt;client.abc&lt;/code&gt; 的身份登录，挂载 CepFS &lt;code&gt;xxx&lt;/code&gt; 下面的 &lt;code&gt;/&lt;/code&gt; 目录到 &lt;code&gt;MOUNTPOINT&lt;/code&gt;。它会读取 &lt;code&gt;/etc/ceph&lt;/code&gt; 下面的配置，如果已经 &lt;code&gt;ceph.conf&lt;/code&gt; 写了，命令行里就可以不写。&lt;/p&gt;
&lt;p&gt;fsid 指的不是 CephFS 的 ID，实际上是集群的 ID：&lt;code&gt;ceph fsid&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;限额&#34;&gt;限额&lt;/h3&gt;
&lt;p&gt;CephFS 可以对目录进行限额：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setfattr -n ceph.quota.max_bytes -v LIMIT PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setfattr -n ceph.quota.max_files -v LIMIT PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getfattr -n ceph.quota.max_bytes PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getfattr -n ceph.quota.max_files PATH
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;限制目录大小和文件数量。LIMIT 是 0 的时候表示没有限制。&lt;/p&gt;
&lt;h3 id=&#34;nfs&#34;&gt;NFS&lt;/h3&gt;
&lt;p&gt;可以把 CephFS 或者 RGW 通过 NFS 的方式共享出去。&lt;/p&gt;
&lt;p&gt;启动 NFS 服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph nfs cluster create xxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph nfs cluster create xxx &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host1,host2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在主机上运行 NFS 服务器，NFS 集群的名字叫做 xxx。&lt;/p&gt;
&lt;p&gt;查看 NFS 集群信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph nfs cluster info xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;列举所有 NFS 集群：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph nfs cluster ls
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;NFS 导出 CephFS：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph nfs export create cephfs --cluster-id xxx --pseudo-path /a/b/c --fsname some-cephfs-name &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/d/e/f&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--client_addr y.y.y.y&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就导出了 CephFS 内的一个目录，客户端可以通过 NFS 挂载 /a/b/c 路径（pseudo path）来访问。可以设置客户端的 IP 访问权限。&lt;/p&gt;
&lt;p&gt;这样在客户端就可以 mount：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t nfs x.x.x.x:/a/b/c /mnt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;radosgw&#34;&gt;RadosGW&lt;/h2&gt;
&lt;p&gt;RGW 提供了 S3 或者 OpenStack Swift 兼容的对象存储 API。&lt;/p&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h2 id=&#34;编排器&#34;&gt;编排器&lt;/h2&gt;
&lt;p&gt;由于 Ceph 需要运行多个 daemon，并且都在不同的容器中运行，所以一般会跑一个系统级的编排器，用于新增和管理这些容器。&lt;/p&gt;
&lt;p&gt;查看当前编排器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ceph orch status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Backend: cephadm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Available: Yes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Paused: No
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比较常见的就是 cephadm，安装的时候如果用了 cephadm，那么编排器也是它。&lt;/p&gt;
&lt;p&gt;被编排的服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch ls
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;被编排的容器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch ps
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;被编排的主机：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch host ls
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;添加新机器&#34;&gt;添加新机器&lt;/h3&gt;
&lt;p&gt;首先，复制 &lt;code&gt;/etc/ceph/ceph.pub&lt;/code&gt; 到新机器的 &lt;code&gt;/root/.ssh/authorized_keys&lt;/code&gt; 中&lt;/p&gt;
&lt;p&gt;接着，添加机器到编排器中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch host add xxxx y.y.y.y
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;导出编排器配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch ls --export &amp;gt; cephadm.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果想让一些 daemon 只运行在部分主机上，可以修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# change&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;placement&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;host_pattern&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# to&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;placement&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;host_pattern&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xxx&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch apply -i cephadm.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;配置监控&#34;&gt;配置监控&lt;/h3&gt;
&lt;p&gt;添加监控相关的服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch apply node-exporter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch apply alertmanager
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch apply prometheus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch apply grafana
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch ps
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以访问 Grafana 看到集群的状态。&lt;/p&gt;
&lt;h2 id=&#34;更新&#34;&gt;更新&lt;/h2&gt;
&lt;p&gt;使用容器编排器来升级：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch upgrade start --ceph-version x.x.x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch upgrade start --image quay.io/ceph/ceph:vx.x.x
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果 docker hub 上找不到 image，就从 quay.io 拉取。&lt;/p&gt;
&lt;p&gt;查看升级状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph orch upgrade status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph -s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看 cephadm 日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ceph -W cephadm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/architecture/&#34;&gt;Ceph Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/rados/operations/user-management/&#34;&gt;Ceph User Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/cephfs/createfs/&#34;&gt;Ceph Create a Ceph File System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/man/8/mount.ceph/&#34;&gt;mount.ceph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/cephfs/quota/&#34;&gt;Ceph CephFS Quota&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/rbd/rados-rbd-cmds/&#34;&gt;Ceph Basic Block Device Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/quincy/cephadm/upgrade/&#34;&gt;Ceph Upgrade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/mgr/nfs/&#34;&gt;Ceph CephFS &amp;amp; RGW Exports Over NFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/quincy/rados/operations/crush-map/&#34;&gt;CRUSH Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/rados/operations/crush-map-edits/&#34;&gt;CRUSH Map Edits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://llussy.github.io/2019/08/17/ceph-architecture/&#34;&gt;ceph 架构和概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_ceph_storage/5/html/object_gateway_guide/the-ceph-object-gateway_rgw&#34;&gt;RedHat Object Gateway Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>编程作业中的学术诚信</title>
      <link>https://jia.je/programming/2022/07/12/writing-code-cn/</link>
      <pubDate>Tue, 12 Jul 2022 10:49:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2022/07/12/writing-code-cn/</guid>
      <description>&lt;p&gt;本文是我自己对 &lt;a href=&#34;https://integrity.mit.edu/handbook/writing-code&#34;&gt;Academic Integrity at MIT: Writing Code&lt;/a&gt; 的非官方中文翻译。本文已经得到了官方的邮件授权。&lt;/p&gt;
&lt;h2 id=&#34;编写代码-writing-code&#34;&gt;编写代码 Writing Code&lt;/h2&gt;
&lt;p&gt;与学术写作类似，当你在做课程项目的时候，如果使用了或者改编了其他人开发的代码，你必须要引用代码的来源。你可以在代码注释中引用代码来源。这些注释不仅保护了他人的劳动成果，也会帮助你理解代码和调试。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Writing code is similar to academic writing in that when you use or
adapt code developed by someone else as part of your project, you must
cite your source. However, instead of quoting or paraphrasing a source,
you include an inline comment in the code. These comments not only
ensure you are giving proper credit, but help with code understanding
and debugging.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;什么时候应该在代码中引用来源when-should-i-cite-a-source-in-my-code&#34;&gt;什么时候应该在代码中引用来源？When should I cite a source in my code?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当你从外部来源复制了代码。无论你是复制了代码片段，还是一整个模块，你都需要引用来源。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; When you copy code from an external source. Whether you are copying a
 snippet of code or an entire module, you should credit the source.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当你复制了代码并做了改动，你依然要引用来源。你并不是代码的原作者。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; When you copy the code and adapt it, you should still credit the source.
 You were not the original developer of the code.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;我应该如何引用代码how-should-i-cite-the-code&#34;&gt;我应该如何引用代码？How should I cite the code?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通常来说，代码的网址和下载时间就足够了。如果可以让读者更加清晰地了解到代码来源，可以增加更多的细节。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Generally, the URL and the date of retrieval are sufficient. Add
 more details if it will help the reader get a clearer
 understanding of the source.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你修改了代码，你需要注明：“Adapted from:”（修改自）或者“Based on”（基于）。这样读者就知道你修改了代码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; If you adapted the code, you should indicate “Adapted from:” or
 “Based on” so it is understood that you modified the code.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你的老师可能会对你如何引用代码有具体的要求。如果你不能确认什么是可行的，请询问你的老师。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Your instructor may have specific instructions on how you should
 or should not cite your sources. If you are not clear on what is
 acceptable, ask your instructor.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;开源软件的使用-use-of-open-source-software&#34;&gt;开源软件的使用 Use of Open Source Software&lt;/h2&gt;
&lt;p&gt;当你使用开源软件项目的代码的时候，你不仅要注明代码的来源，还需要遵循代码的开源软件许可证。请记住：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;When you use code from an open source project, you need both to
attribute the source and follow the terms of any open source license
that applies to the code you are using. Keep in mind:
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当你下载源码的时候，它的开源软件许可证通常也在源码中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; When you download the source, the license is typically part of the
 download.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同时，代码里也通常会包括它的版权和使用条款。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Also, the source code itself will typically contain the
 copyright and terms of use.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当你引入了开源代码，并且它附带了开源软件许可证，你应该把它的版权声明复制到你的代码中，和/或把许可证复制到代码目录中的文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; When you incorporate open-source-licensed code into a program,
 it is good practice to duplicate the copyright in your code,
 and/or store the license in a file with the code.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果在下载的文件里没有找到开源软件许可证，你可以在开源项目的网站上找到全文，如 &lt;a href=&#34;https://httpd.apache.org/&#34;&gt;Apache HTTP Server 网站&lt;/a&gt; 或者 &lt;a href=&#34;https://opensource.org/&#34;&gt;Open Source Initiative (OSI) 网站&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; If you don’t obtain the license with the download, you should be
 able to find it on the site of the open source project, such as
 Apache HTTP Server site, or on the Open Source Initiative (OSI)
 site.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;老师决定具体的代码复用程度-instructors-determine-the-specific-expectations-around-re-use-of-code-in-each-class&#34;&gt;老师决定具体的代码复用程度 Instructors determine the specific expectations around re-use of code in each class.&lt;/h2&gt;
&lt;p&gt;通常，老师会确定课程的协作规则。如果这个规则没有明确地给出来，或者你不确认什么是可行的，请询问你的老师。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Often, the requirements are described in the collaboration policy for
the class. If policy is not clearly described in the course materials
and you are not sure what is acceptable, ask your instructor.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;例子&#34;&gt;例子&lt;/h3&gt;
&lt;p&gt;下面给出一个例子，是课程（Spring 2012 6.005 Elements of Software Construction）的协作规则：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Collaboration policy from Spring 2012 6.005 Elements of Software
Construction: (used with the permission of Professor Rob Miller, Dept of
Electrical Engineering &amp;amp; Computer Science)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们鼓励同学们互相帮助，但是为了保证每个人都有良好的独立学习体验，我们对你们做了如下的限制：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;We encourage you to help each other with work in this class, but there
are limits to what you can do, to ensure that everybody has a good
individual learning experience.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;单人作业-individual-work&#34;&gt;单人作业 Individual work&lt;/h4&gt;
&lt;p&gt;课程里的习题都要单人完成。我们鼓励同学们讨论实现方法，但是你的代码和报告都需要自己完成。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Problem sets in this class are intended to be primarily individual
efforts. You are encouraged to discuss approaches with other students
but your code and your write-up must be your own.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你不能使用其他同学编写的资料，无论是这个学期还是以往学期的同学。你也不可以把你的成果提供给其他同学。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You may not use materials produced as course work by other students,
whether in this term or previous terms, nor may you provide work for
other students to use.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;帮助其他同学是应该的。但要保证一个原则，当你在帮助其他同学的时候，你自己的答案或代码不应该可以看到，无论是自己还是其他同学。可以养成一个习惯，帮助他人的时候把笔记本电脑合上。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;It’s good to help other students. But as a general rule, during the time
that you are helping another student, your own solution should not be
visible, either to you or to them. Make a habit of closing your laptop
while you’re helping.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在帮助其他同学，阅读同学的代码的时候，你会看到同学的解答。你可以从同学的方法里获得灵感，但是不能复制他们的成果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;During code review, you will see classmates’ solutions to a problem set.
While it is fine to take inspiration from their approach, do not copy
their work.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可以用外部网站上的资料，比如 StackOverflow，但前提是加上引用，并且作业要求里允许这么做。特别地，如果作业要求里写了“实现 X 功能”，那么你必须自己实现 X 功能，而不能复用外部的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;It’s fine to use material from external sources like StackOverflow, but
only with proper attribution, and only if the assignment allows it. In
particular, if the assignment says “implement X,” then you must create
your own X, not reuse one from an external source.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你也可以用课程组提供的代码，不需要引用。老师提供的代码在未经允许的情况下，不能公开分享，我们后面会讨论这个问题。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;It’s also fine to use any code provided by this semester’s 6.031 staff
(in class, readings, or problem sets), without need for attribution.
Staff-provided code may not be publicly shared without permission,
however, as discussed later in this document.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例子一 Example 1：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A 和 B 做作业的时候坐在一起。他们简略地讨论实现的不同方法。他们在白板上画流程图。当 A 发现 Java 标准库中一个有用的类，她把这个发现告诉了 B。当 B 发现了 StackOverflow 上的一个回答，他给 A 发送了 URL。可以。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Alyssa and Ben sit next to each other with their laptops while
  working on a problem set. They talk in general terms about
  different approaches to doing the problem set. They draw
  diagrams on the whiteboard. When Alyssa discovers a useful class
  in the Java library, she mentions it to Ben. When Ben finds a
  StackOverflow answer that helps, he sends the URL to Alyssa. OK.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在他们编写代码的时候，他们把代码大声念出来，好让双方都可以编写正确的代码。错误！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  As they type lines of code, they speak the code aloud to the
  other person, to make sure both people have the right code.
  INAPPROPRIATE.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在作业最困难的部分，A 和 B 互相看电脑屏幕，并对比代码，确认他们代码实现都是正确的。错误！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  In a tricky part of the problem set, Alyssa and Ben look at each
  other’s screens and compare them so that they can get their code
  right. INAPPROPRIATE.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子二 Example 2：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;J 已经完成了作业，但是他的朋友 B 正在努力解决一个 bug。J 坐在 B 旁边，看他的代码，帮他调试出了问题。可以。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Jerry already finished the problem set, but his friend Ben is
  now struggling with a nasty bug. Jerry sits next to Ben, looks
  at his code, and helps him debug. OK.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;J 打开了自己的笔记本，找到自己的答案，然后指着自己的代码给 B 纠正错误。错误！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Jerry opens his own laptop, finds his solution to the problem
  set, and refers to it while he’s helping Ben correct his code.
  INAPPROPRIATE.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子三 Example 3：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;L 这周有很多作业，但是因为时间和身体原因来不及做。他已经错过截止时间两天了，但基本没有什么进度。B 觉得 L 可怜，想要帮助 L。在 L 写作业的时候，B 告诉 L 他是怎么做作业的。B 已经提交了自己的答案，并且在帮助 L 的时候，不打开自己的笔记本电脑。可以。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Louis had three problem sets and two quizzes this week, was away
  from campus for several days for a track meet, and then got
  sick. He’s already taken two slack days on the deadline and has
  made almost no progress on the problem set. Ben feels sorry for
  Louis and wants to help, so he sits down with Louis and talks
  with him about how to do the problem set while Louis is working
  on it. Ben already handed in his own solution, but he doesn’t
  open his own laptop to look at it while he’s helping Louis. OK.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B 打开了自己的笔记本电脑，并且在帮助 L 的时候阅读自己的代码。错误！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Ben opens his laptop and reads his own code while he’s helping
  Louis. INAPPROPRIATE.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B 花了几个小时帮助 L，但是 L 还是没有完成。但是 B 需要去做自己的事情了。在 L 承诺只有在必要的时候才会看 B 的代码之后，B 把自己的代码上传到 Dropbox 并且分享给了 L。错误！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Ben has by now spent a couple hours with Louis, and Louis still
  needs help, but Ben really needs to get back to his own work. He
  puts his code in a Dropbox and shares it with Louis, after Louis
  promises only to look at it when he really has to.
  INAPPROPRIATE.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子四 Example 4：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;J 和 E 独立完成作业。他们交换了自己的测例来检查作业。错误！测例是题目的一部分，也是学习体验的一部分。如果你使用了其他人的测例，就是在抄袭，即使只是临时的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  John and Ellen both worked on their problem sets separately.
  They exchange their test cases with each other to check their
  work. INAPPROPRIATE. Test cases are part of the material for the
  problem set, and part of the learning experience of the course.
  You are copying if you use somebody else’s test cases, even if
  temporarily.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，在上面的例子中，双方都负有学术不端的责任。抄袭作业，或者把自己的作业提供给他人，是一个很严重的事情，可能导致分数扣减，课程不及格甚至处分。抄袭作业，或者帮助他人抄袭，可能会给你的成绩单上添加一个不能消除的 F。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Note that in the examples marked inappropriate above, both people are
held responsible for the violation in academic honesty. Copying work, or
knowingly making work available for copying, in contravention of this
policy is a serious offense that may incur reduced grades, failing the
course, and disciplinary action. Copying, or helping somebody copy, may
result in an F on your transcript that you will not be able to drop.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述的要求对课程所有的单人作业都使用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This policy applies to all coursework that is handed in by an
individual: problem sets, reading exercises, nanoquiz makeups, etc.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;组队作业-group-work&#34;&gt;组队作业 Group work&lt;/h4&gt;
&lt;p&gt;你应该和你的队友合作完成组队作业，并且每个人都应该有接近的任务量。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You should collaborate with your partners on all aspects of group
project work and in-class collaborative exercises, and each of you is
expected to contribute a roughly equal share to design and
implementation.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可以复用自己在学期内早些时候编写的代码等（包括之前自己和其他队友完成的）。你也可以用课程提供的任何代码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You may reuse designs, ideas and code from your own work earlier in the
semester (even if it was done with a different partner). You may also
use any code provided by this semester’s 6.031 staff.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可以使用外部代码，只要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有同学都可以访问这个资料&lt;/li&gt;
&lt;li&gt;进行了合理的引用&lt;/li&gt;
&lt;li&gt;作业允许你这么做&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;特别地，如果作业要求你“实现 X 功能”，你就必须自己实现 X 功能，不能复用他人的。&lt;/p&gt;
&lt;p&gt;你们组不能复用其他组的代码和思路，无论是其他组是当前学期还是以往学期的同学。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You may also use material from external sources, so long as: (1) the
material is available to all students in the class; (2) you give proper
attribution; and (3) the assignment itself allows it. In particular, if
the assignment says “implement X,” then you must create your own X, not
reuse someone else’s. Finally, your group may not reuse designs, ideas,
or code created by another group, in this semester or previous
semesters.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;即使修改网络上的代码很常见-although-it-is-common-practice-to-adapt-code-examples-found-on-the-web&#34;&gt;即使修改网络上的代码很常见 Although it is common practice to adapt code examples found on the web,&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;你不能抄袭其他同学的代码。你的同学不是一个合法的代码来源。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  You should never copy code from other students. Your peers are
  not considered an authorized source.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你不能简单地复用网上的代码。就像学术写作，你可以采用别人的思路，但是你也要把自己的理解加进去。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  You should not simply re-use code as the solution to an
  assignment. Like academic writing, your code can incorporate the
  ideas of others but should reflect your original approach to the
  problem.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;引用代码的例子-examples-of-citing-code-sources&#34;&gt;引用代码的例子 Examples of citing code sources&lt;/h2&gt;
&lt;p&gt;例子一 Example 1：&lt;/p&gt;
&lt;p&gt;在 Apache 项目的源码的 PluginProxyUtil 类中，开发者引用了论坛的 URL，作者和时间：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;In describing the class PluginProxyUtil in the Apache Project source
code, the developer cites the source as a post in a forum and includes
the URL, author and date:
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* A utility class that gives applets the ability to detect proxy host settings.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* This was adapted from a post from Chris Forster on 20030227 to a Sun Java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* forum here:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* http://forum.java.sun.com/thread.jspa?threadID=364342&amp;amp;tstart=120
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;[…]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（来源：Apache Project 源代码 &lt;a href=&#34;http://svn.apache.org&#34;&gt;http://svn.apache.org&lt;/a&gt; 于 2019 年 7 月获取）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(Source: Apache Project source code http://svn.apache.org retrieved in
July 2019.)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例子二 Example 2：&lt;/p&gt;
&lt;p&gt;在 Google Chrome &lt;code&gt;stack_trace_win&lt;/code&gt; 的 &lt;code&gt;OutputTraceToStream&lt;/code&gt; 函数中，开发者引用了 Microsoft Developer Network 并且附带了 URL：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;In the function OutputTraceToStream in the Google Chrome stack_trace_win
source code, the developer cites the source code as the Microsoft
Developer Network and includes a URL:
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Code adapted from MSDN example:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// http://msdn.microsoft.com/en-us/library/ms680578(VS.85).aspx 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（来源：https://github.com/adobe/chromium/blob/master/base/debug/stack_trace_win.cc 于 2019 年 7 月获取）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(Source:
https://github.com/adobe/chromium/blob/master/base/debug/stack_trace_win.cc
retrieved in July 2019.)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;引用附有开源许可证的代码的例子-example-of-open-source-licensed-code&#34;&gt;引用附有开源许可证的代码的例子 Example of open-source-licensed code:&lt;/h2&gt;
&lt;p&gt;在 Google Chrome &lt;code&gt;stack_trace_win&lt;/code&gt; 代码的开头，可以看到版权声明和开源许可证的引用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;At the top of the Google Chrome stack_trace_win source file, note the
copyright and reference to the open source license:
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Copyright (c) 2011 The Chromium Authors. All rights reserved.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Use of this source code is governed by a BSD-style license that can be
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// found in the LICENSE file.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你把这个代码加入到你的程序中，你需要遵守 Chromium 作者的开源许可证协议中的条款。虽然这个开源许可证只要求你在重分发的时候复制一份版权声明和许可证，一个好习惯是无论是否要求，你都要复制它的版权声明到代码中，和/或把它的许可证放到代码目录的文件中。这样的话，如果你在将来想要重分发你的代码，就很容易检查知识产权相关的问题。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;If you incorporate this code into a program, you should follow the terms
outlined in The Chromium Authors&#39; open source license file, which is
shown below. While this license only requires that you duplicate the
copyright and license if you are redistributing the code, it is good
practice to always duplicate the copyright in your code, and/or store
the license in a file with the code. This way, if you want to
redistribute the code later, intellectual property reviewing becomes
much easier.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Copyright (c) 2014 The Chromium Authors. All rights reserved.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Redistribution and use in source and binary forms, with or without
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// modification, are permitted provided that the following conditions are
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// met:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//* Redistributions of source code must retain the above copyright
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// notice, this list of conditions and the following disclaimer.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//* Redistributions in binary form must reproduce the above
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// copyright notice, this list of conditions and the following disclaimer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in the documentation and/or other materials provided with the
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// distribution.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//* Neither the name of Google Inc. nor the names of its
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// contributors may be used to endorse or promote products derived from
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// this software without specific prior written permission.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;AS IS&amp;#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（来源：The Chromium Authors license file &lt;a href=&#34;https://src.chromium.org/viewvc/chrome/trunk/src/LICENSE&#34;&gt;https://src.chromium.org/viewvc/chrome/trunk/src/LICENSE&lt;/a&gt; 于 2019 年 7 月获取）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(Source: The Chromium Authors license file
https://src.chromium.org/viewvc/chrome/trunk/src/LICENSE retrieved in
July 2019.)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Archive 中 COMMON 符号的链接问题</title>
      <link>https://jia.je/software/2022/07/11/archive-common-linking/</link>
      <pubDate>Mon, 11 Jul 2022 22:53:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/07/11/archive-common-linking/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近看到一个 &lt;a href=&#34;https://github.com/NixOS/nixpkgs/issues/180308&#34;&gt;issue: irssi 1.4.1 fails to build on darwin arm64&lt;/a&gt;，它的现象是，链接的时候会报错：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Undefined symbols for architecture arm64:
  &amp;#34;_current_theme&amp;#34;, referenced from:
      _format_get_text_theme in libfe_common_core.a(formats.c.o)
      _format_get_text in libfe_common_core.a(formats.c.o)
      _strip_codes in libfe_common_core.a(formats.c.o)
      _format_send_as_gui_flags in libfe_common_core.a(formats.c.o)
      _window_print_daychange in libfe_common_core.a(fe-windows.c.o)
      _printformat_module_dest_charargs in libfe_common_core.a(printtext.c.o)
      _printformat_module_gui_args in libfe_common_core.a(printtext.c.o)
      ...
  &amp;#34;_default_formats&amp;#34;, referenced from:
      _format_find_tag in libfe_common_core.a(formats.c.o)
      _format_get_text_theme_args in libfe_common_core.a(formats.c.o)
      _printformat_module_dest_args in libfe_common_core.a(printtext.c.o)
      _printformat_module_gui_args in libfe_common_core.a(printtext.c.o)
ld: symbol(s) not found for architecture arm64
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码 &lt;code&gt;themes.c&lt;/code&gt; 定义了这两个全局变量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;THEME_REC &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;current_theme;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GHashTable &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;default_formats;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并且 &lt;code&gt;themes.c&lt;/code&gt; 编译出来的 &lt;code&gt;themes.c.o&lt;/code&gt; 也在 archive 文件中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ar t src/fe-common/core/libfe_common_core.a | grep themes.c.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;themes.c.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并且 &lt;code&gt;themes.c.o&lt;/code&gt; 也定义了这两个符号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -t src/fe-common/core/libfe_common_core.a.p/themes.c.o | grep COM
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000008&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; COM    &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0300&lt;/span&gt; _current_theme
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000008&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; COM    &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0300&lt;/span&gt; _default_formats
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000008&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; COM    &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0300&lt;/span&gt; _themes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么，问题在哪呢？看起来，链接的时候提供了 &lt;code&gt;libfe_common_core.a&lt;/code&gt; 的参数，并且 &lt;code&gt;.a&lt;/code&gt; 里面也有 &lt;code&gt;themes.c.o&lt;/code&gt;，我们要找的符号也有定义，那么为什么会出现 &lt;code&gt;Undefined symbols&lt;/code&gt; 的问题呢？&lt;/p&gt;
&lt;p&gt;答案出在 COMMON 符号上。&lt;/p&gt;
&lt;h2 id=&#34;common-符号&#34;&gt;COMMON 符号&lt;/h2&gt;
&lt;p&gt;COMMON 符号的原因和原理，详细可以见 &lt;a href=&#34;https://maskray.me/blog/2022-02-06-all-about-common-symbols&#34;&gt;MaskRay 的博客 All about COMMON symbols&lt;/a&gt;，里面从链接器的角度很详细地讲述了这个问题。&lt;/p&gt;
&lt;p&gt;简单来说，COMMON 符号的引入是为了和 Fortran 进行互操作。它在 C 中对应了没有初始化语句的全局变量。实际上到最后，还是会保存到 .bss 段中，默认清零。所以：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; common_symbol;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; not_common_symbol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两个语句最终结果是类似的，只不过第一个是 COMMON Symbol，第二个就是普通的 GLOBAL Symbol。&lt;/p&gt;
&lt;p&gt;这看起来和 &lt;code&gt;Undefined symbols&lt;/code&gt; 错误还是没有关系。问题在哪？&lt;/p&gt;
&lt;h2 id=&#34;archive&#34;&gt;Archive&lt;/h2&gt;
&lt;p&gt;静态库通常是以 Archive 的方式给出，后缀是 &lt;code&gt;.a&lt;/code&gt;。它实际上是一堆 &lt;code&gt;.o&lt;/code&gt; 打包的集合，外加一个索引，即单独保存一个表，保存了每个 &lt;code&gt;.o&lt;/code&gt; 定义了哪些符号。这样的好处是找符号的时候，不用遍历 &lt;code&gt;.o&lt;/code&gt;，而是直接在索引里面找相关的符号。&lt;/p&gt;
&lt;p&gt;为了创建一个 Archive，Linux 上可以用 &lt;code&gt;ar&lt;/code&gt; 命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ar cr libxxx.a a.o b.o c.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;c&lt;/code&gt; 表示 create，&lt;code&gt;r&lt;/code&gt; 表示插入（和覆盖）。&lt;/p&gt;
&lt;p&gt;macOS 上要用 &lt;code&gt;libtool -static&lt;/code&gt; 来创建 Archive：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libtool -static libxxx.a a.o b.o c.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;否则链接的时候会报错：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ld: warning: ignoring file libxxx.a, building for macOS-arm64 but attempting to link with file built for unknown-unsupported file format
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后用 &lt;code&gt;ar t&lt;/code&gt; 命令就可以看 Archive 有哪些内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ar t libxxx.a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以用 &lt;code&gt;nm --print-armap&lt;/code&gt; 命令查看 Archive 的索引：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nm --print-armap libxxx.a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Archive index:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;symbol1 in a.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;symbol2 in b.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;symbol3 in c.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a.o:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; T symbol1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以我们已经了解了 Archive 的情况：它是多个 &lt;code&gt;.o&lt;/code&gt; 文件的集合，并且实现了索引。链接的时候，会通过索引来找 &lt;code&gt;.o&lt;/code&gt;，而不是遍历所有的 &lt;code&gt;.o&lt;/code&gt; 文件。&lt;/p&gt;
&lt;h2 id=&#34;链接问题&#34;&gt;链接问题&lt;/h2&gt;
&lt;p&gt;那么，回到一开始的链接问题，既然我们已经确认了，&lt;code&gt;.o&lt;/code&gt; 文件中定义了符号，并且这个 &lt;code&gt;.o&lt;/code&gt; 也确实在 &lt;code&gt;.a&lt;/code&gt; 文件中，那就只剩下最后一个可能了：索引里面没有这个符号。&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;nm --print-armap&lt;/code&gt; 命令尝试，发现上面的 &lt;code&gt;_default_formats&lt;/code&gt; 和 &lt;code&gt;_current_theme&lt;/code&gt; 只在对应的 &lt;code&gt;.o&lt;/code&gt; 中有定义，在 Archive index 部分是没有的。&lt;/p&gt;
&lt;p&gt;网友 @ailin-nemui 指出了这个问题，并且提供了一个链接：&lt;a href=&#34;https://stackoverflow.com/questions/19398742/os-x-linker-unable-to-find-symbols-from-a-c-file-which-only-contains-variables/26581710#26581710&#34;&gt;OS X linker unable to find symbols from a C file which only contains variables&lt;/a&gt;。它讲了很重要的一点，是 macOS 的 ar/ranlib/libtool 版本默认情况下不会为 COMMON 符号创建索引。所以，解决方案也很明确了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一种 不要创建 COMMON 符号：添加编译选项 &lt;code&gt;-fno-common&lt;/code&gt;，这个选项在比较新的编译器里都是默认了&lt;/li&gt;
&lt;li&gt;第二种 为 COMMON 符号创建索引：用 &lt;code&gt;libtool -static -c&lt;/code&gt; 命令，其中 &lt;code&gt;-c&lt;/code&gt; 选项就是打开为 COMMON 符号创建索引&lt;/li&gt;
&lt;li&gt;第三种 修改代码：给全局变量设置一个初始化值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样，这个问题就得到了妥善的解决。&lt;/p&gt;
&lt;h2 id=&#34;附录&#34;&gt;附录&lt;/h2&gt;
&lt;p&gt;下面是 &lt;a href=&#34;https://www.unix.com/man-page/osx/1/LIBTOOL/&#34;&gt;macOS libtool manpage&lt;/a&gt; 中写的相关文档：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-c     Include common symbols as definitions with respect to the table of contents.  This is seldom the intended behavior for linking  from
	      a library, as it forces the linking of a library member just because it uses an uninitialized global that is undefined at that point
	      in the linking.  This option is included only because this was the original behavior of ranlib.  This option is not the default.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>NVIDIA 驱动和 CUDA 安装速查</title>
      <link>https://jia.je/software/2022/07/06/install-nvidia-cuda/</link>
      <pubDate>Wed, 06 Jul 2022 11:42:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/07/06/install-nvidia-cuda/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在 Ubuntu 上配置 NVIDIA 驱动和 CUDA 环境的次数比较多，在此总结一下整个流程，作为教程供大家学习。&lt;/p&gt;
&lt;h2 id=&#34;配置-nvidia-apt-源&#34;&gt;配置 NVIDIA APT 源&lt;/h2&gt;
&lt;p&gt;Ubuntu 源有自带的 NVIDIA 驱动版本，但这里我们要使用 NVIDIA 的 APT 源。首先，我们要访问 &lt;a href=&#34;https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;amp;target_arch=x86_64&amp;amp;Distribution=Ubuntu&amp;amp;target_version=20.04&amp;amp;target_type=deb_network&#34;&gt;https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;amp;target_arch=x86_64&amp;amp;Distribution=Ubuntu&amp;amp;target_version=20.04&amp;amp;target_type=deb_network&lt;/a&gt;，在网页中选择我们的系统，例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Operating System: Linux&lt;/li&gt;
&lt;li&gt;Architecture: x86_64&lt;/li&gt;
&lt;li&gt;Distribution: Ubuntu&lt;/li&gt;
&lt;li&gt;Version: 20.04&lt;/li&gt;
&lt;li&gt;Installer Type: deb (network)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此时，下面就会显示一些命令，复制下来执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dpkg -i cuda-keyring_1.0-1_all.deb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后一步的 &lt;code&gt;sudo apt-get -y install cuda&lt;/code&gt; 可以不着急安装，我们在后面再来讨论 CUDA 版本的问题。&lt;/p&gt;
&lt;h2 id=&#34;nvidia-驱动&#34;&gt;NVIDIA 驱动&lt;/h2&gt;
&lt;p&gt;配置好源以后，接下来，我们就要安装 NVIDIA 驱动了。首先，我们要选取一个 NVIDIA 版本，选择的标准如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;驱动版本需要支持所使用的显卡&lt;/li&gt;
&lt;li&gt;驱动版本需要支持所使用的 CUDA 版本&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些信息在网络上都可以查到，也可以参考 &lt;a href=&#34;https://jia.je/software/2021/12/26/nvidia-cuda/&#34;&gt;NVIDIA 驱动和 CUDA 版本信息速查&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;假如我们已经选择了要安装 470.129.06 版本，那么，我们接下来要确认一下 NVIDIA 的 APT 源的版本名称：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt show -a nvidia-driver-470
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在输出的结果中搜索 &lt;code&gt;470.129.06&lt;/code&gt;，找到 &lt;code&gt;Version: 470.129.06-0ubuntu1&lt;/code&gt;，下面写了 &lt;code&gt;APT-Sources: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64 Packages&lt;/code&gt;，这就说明这个版本是从 NVIDIA 的 APT 源来的。&lt;/p&gt;
&lt;p&gt;所以，我们要用 &lt;code&gt;470.129.06-0ubuntu1&lt;/code&gt;，而不是 &lt;code&gt;470.129.06-0ubuntu0.20.04.1&lt;/code&gt;，后者是 Ubuntu 源自带的，我们要用前者。&lt;/p&gt;
&lt;p&gt;接下来，指定版本安装驱动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install nvidia-driver-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果系统里已经安装了其他版本的 nvidia 驱动，可能会出现冲突。这时候，只需要把冲突的包也写在要安装的包里即可，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install nvidia-utils-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 cuda-drivers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-1 cuda-drivers-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-1 nvidia-driver-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 libnvidia-gl-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 libnvidia-compute-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 libnvidia-decode-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 libnvidia-encode-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 libnvidia-ifr1-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 libnvidia-fbc1-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 libnvidia-common-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 nvidia-kernel-source-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 nvidia-dkms-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 nvidia-kernel-common-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 libnvidia-extra-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 nvidia-compute-utils-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 xserver-xorg-video-nvidia-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 libnvidia-cfg1-470&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 nvidia-settings&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 libxnvctrl0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1 nvidia-modprobe&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;470.129.06-0ubuntu1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最终，我们要保证，系统里面所有 nvidia 驱动相关的包都是同一个版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt list --installed | grep nvidia
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libnvidia-cfg1-470/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed,automatic&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libnvidia-common-470/unknown,now 470.129.06-0ubuntu1 all &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed,automatic&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libnvidia-compute-470/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libnvidia-decode-470/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libnvidia-encode-470/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libnvidia-extra-470/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed,automatic&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libnvidia-fbc1-470/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libnvidia-gl-470/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libnvidia-ifr1-470/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nvidia-compute-utils-470/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed,automatic&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nvidia-dkms-470/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nvidia-driver-470/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nvidia-fabricmanager-470/unknown,now 470.129.06-1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed,automatic&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nvidia-kernel-common-470/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed,automatic&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nvidia-kernel-source-470/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed,automatic&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nvidia-modprobe/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed,upgradable to: 515.48.07-0ubuntu1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nvidia-settings/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed,upgradable to: 515.48.07-0ubuntu1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nvidia-utils-470/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed,automatic&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xserver-xorg-video-nvidia-470/unknown,now 470.129.06-0ubuntu1 amd64 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;installed,automatic&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，为了防止 apt 升级的时候顺手破坏了一致的版本，我们要把包固定在一个版本里：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-mark hold cuda-drivers nvidia-modprobe nvidia-settings libxnvctrl0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果有其他 nvidia 包说要自动升级，也可以类似地固定住。&lt;/p&gt;
&lt;h2 id=&#34;cuda&#34;&gt;CUDA&lt;/h2&gt;
&lt;p&gt;CUDA 实际上是绿色软件，把整个目录放在任意一个目录，都可以使用。&lt;/p&gt;
&lt;p&gt;安装 CUDA 的方式有很多，我们可以用 APT 安装全局的，也可以用 Spack 或者 Anaconda 安装到本地目录。实际上这些安装过程都是把同样的文件复制到不同的地方而已。&lt;/p&gt;
&lt;p&gt;如果要安装全局的话，还是推荐用 NVIDIA 的 APT 源，以安装 CUDA 11.1 为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install cuda-11-1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么 CUDA 就会安装到 /usr/local/cuda-11.1 目录下。如果想要用 nvcc，我们可以手动把它加到 PATH 环境变量中。&lt;/p&gt;
&lt;p&gt;CUDA 是可以多版本共存的，比如你可以把 CUDA 11.1 到 CUDA 11.7 一口气都装了。不过注意，CUDA 对 NVIDIA 驱动有版本要求，所以有一些可能会不满足 APT 的版本要求；同时，CUDA 对编译器版本有要求，所以如果系统还是 Ubuntu 16.04 或者 18.04，赶紧升级吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>切换 ConnectX-4 为以太网模式</title>
      <link>https://jia.je/software/2022/07/02/connectx-4-switch-to-ethernet/</link>
      <pubDate>Sat, 02 Jul 2022 20:26:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/07/02/connectx-4-switch-to-ethernet/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在给机房配置网络，遇到一个需求，就是想要把 ConnectX-4 当成以太网卡用，它既支持 Infiniband，又支持 Ethernet，只不过默认是 Infiniband 模式，所以需要用 mlxconfig 工具来做这个切换。&lt;/p&gt;
&lt;h2 id=&#34;切换方法&#34;&gt;切换方法&lt;/h2&gt;
&lt;p&gt;在 &lt;a href=&#34;https://docs.nvidia.com/networking/display/MFTv4110/Using+mlxconfig&#34;&gt;Using mlxconfig&lt;/a&gt; 文档中，写了如何切换网卡为 Infiniband 模式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mlxconfig -d /dev/mst/mt4103_pci_cr0 set LINK_TYPE_P1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; LINK_TYPE_P2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Device &lt;span style=&#34;color:#75715e&#34;&gt;#1:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;----------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Device type:   ConnectX3Pro
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PCI device:    /dev/mst/mt4103_pci_cr0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Configurations:        Next Boot        New
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  LINK_TYPE_P1         ETH&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;           IB&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  LINK_TYPE_P2         ETH&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;           IB&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Apply new Configuration? ? &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;y/n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; : y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Applying... Done!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-I- Please reboot machine to load new configurations.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么，我们只需要反其道而行之，设置模式为 &lt;code&gt;ETH(2)&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h2 id=&#34;mst-安装&#34;&gt;MST 安装&lt;/h2&gt;
&lt;p&gt;要使用 mlxconfig，就需要安装 &lt;a href=&#34;https://network.nvidia.com/products/adapter-software/firmware-tools/&#34;&gt;MFT(Mellanox Firmware Tools)&lt;/a&gt;。我们用的是 Debian bookworm，于是要下载 DEB：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://www.mellanox.com/downloads/MFT/mft-4.20.1-14-x86_64-deb.tgz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;unar mft-4.20.1-14-x86_64-deb.tgz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd mft-4.20.1-14-x86_64-deb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;UPDATE 2022-10-28: 现在最新版本 mft-4.21.0-99 已经修复了下面出现的编译问题。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://www.mellanox.com/downloads/MFT/mft-4.21.0-99-x86_64-deb.tgz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;unar mft-4.21.0-99-x86_64-deb.tgz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd mft-4.21.0-99-x86_64-deb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;尝试用 &lt;code&gt;sudo ./install.sh&lt;/code&gt; 安装，发现 dkms 报错。查看日志，发现是因为内核过高（5.18），有函数修改了用法，即要把 pci_unmap_single 的调用改为 dma_unmap_single，并且修改第一个参数，如 &lt;a href=&#34;https://github.com/torvalds/linux/commit/a2e759612e5ff3858856fe97be5245eecb84e29b&#34;&gt;linux commit a2e759612e5ff3858856fe97be5245eecb84e29b&lt;/a&gt; 指出的那样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-patch&#34; data-lang=&#34;patch&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-           pci_unmap_single(dev-&amp;gt;pci_dev, dev-&amp;gt;dma_props[i].dma_map, DMA_MBOX_SIZE, DMA_BIDIRECTIONAL);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+           dma_unmap_single(&amp;amp;dev-&amp;gt;pci_dev-&amp;gt;dev, dev-&amp;gt;dma_props[i].dma_map, DMA_MBOX_SIZE, DMA_BIDIRECTIONAL);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改完以后，手动 &lt;code&gt;sudo dkms install kernel-mft-dkms/4.20.1&lt;/code&gt;，发现就编译成功了。再手动安装一下 mft 并启动服务：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo dpkg -i DEBS/mft_4.20.1-14_amd64.deb
$ sudo mst start
Starting MST (Mellanox Software Tools) driver set
Loading MST PCI module - Success
[warn] mst_pciconf is already loaded, skipping
Create devices
Unloading MST PCI module (unused) - Success
$ sudo mst status
MST modules:
------------
    MST PCI module is not loaded
    MST PCI configuration module loaded

MST devices:
------------
/dev/mst/mtxxxx_pciconf0         - PCI configuration cycles access.
                                   domain:bus:dev.fn=0000:xx:xx.0 addr.reg=yy data.reg=zz cr_bar.gw_offset=-1
                                   Chip revision is: 00
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;既然已经安装好了，最后执行 &lt;code&gt;mlxconfig&lt;/code&gt; 即可切换为以太网：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo mlxconfig -d /dev/mst/mtxxxx_pciconf0 set LINK_TYPE_P1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; LINK_TYPE_P2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Device &lt;span style=&#34;color:#75715e&#34;&gt;#1:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;----------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Device type:    ConnectX4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Name:           REDACTED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Description:    ConnectX-4 VPI adapter card; FDR IB &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;56Gb/s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; and 40GbE; dual-port QSFP28; PCIe3.0 x8; ROHS R6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Device:         /dev/mst/mtxxxx_pciconf0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Configurations:                              Next Boot       New
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         LINK_TYPE_P1                        IB&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;           ETH&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         LINK_TYPE_P2                        IB&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;           ETH&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Apply new Configuration? &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;y/n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; : y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Applying... Done!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-I- Please reboot machine to load new configurations.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显示各个配置可能的选项和内容：&lt;code&gt;sudo mlxconfig -d /dev/mst/mtxxxx_pciconf0 show_confs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;整个安装流程在仓库 &lt;a href=&#34;https://github.com/jiegec/mft-debian-bookworm&#34;&gt;https://github.com/jiegec/mft-debian-bookworm&lt;/a&gt; 中用脚本实现。&lt;/p&gt;
&lt;h2 id=&#34;vmware-esxi&#34;&gt;VMware ESXi&lt;/h2&gt;
&lt;p&gt;如果要在 ESXi 上把网卡改成以太网模式，可以参考下面的文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/networking/pages/releaseview.action?pageId=15049813&#34;&gt;https://docs.nvidia.com/networking/pages/releaseview.action?pageId=15049813&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/networking/plugins/servlet/mobile?contentId=15051769#content/view/15051769&#34;&gt;https://docs.nvidia.com/networking/plugins/servlet/mobile?contentId=15051769#content/view/15051769&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命令（ESXi 7.0U3）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;scp *.vib root@esxi:/some/path
esxcli software vib install -v /some/path/MEL_bootbank_mft_4.21.0.703-0.vib
esxcli software vib install -v /some/path/MEL_bootbank_nmst_4.21.0.703-1OEM.703.0.0.18434556.vib
reboot
/opt/mellanox/bin/mst start
/opt/mellanox/bin/mst status -vv
/opt/mellanox/bin/mlxfwmanager --query
/opt/mellanox/bin/mlxconfig -d mt4115_pciconf0 set LINK_TYPE_P1=2 LINK_TYPE_P2=2
reboot
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后就可以看到网卡了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>rsyslog 收集远程日志</title>
      <link>https://jia.je/software/2022/07/01/rsyslog-remote/</link>
      <pubDate>Fri, 01 Jul 2022 20:14:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/07/01/rsyslog-remote/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在运维的时候发现网络设备（如交换机）有一个远程发送日志的功能，即可以通过 syslog udp 协议发送日志到指定的服务器。为此，可以在服务器上运行 rsyslog 并收集日志。&lt;/p&gt;
&lt;h2 id=&#34;rsyslog-配置&#34;&gt;rsyslog 配置&lt;/h2&gt;
&lt;p&gt;默认的 rsyslog 配置是收集系统本地的配置，因此我们需要编写一个 rsyslog 配置，用于收集远程的日志。&lt;/p&gt;
&lt;p&gt;首先复制 &lt;code&gt;/etc/rsyslog.conf&lt;/code&gt; 到 &lt;code&gt;/etc/rsyslog-remote.conf&lt;/code&gt;，然后修改：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注释掉 &lt;code&gt;imuxsock&lt;/code&gt; 和 &lt;code&gt;imklog&lt;/code&gt; 相关的 module 加载&lt;/li&gt;
&lt;li&gt;去掉 &lt;code&gt;imudp&lt;/code&gt; 和 &lt;code&gt;imtcp&lt;/code&gt; 相关的注释，这样就会监听在相应的端口上&lt;/li&gt;
&lt;li&gt;修改 &lt;code&gt;$WorkDirectory&lt;/code&gt;，例如 &lt;code&gt;$WorkDirectory /var/spool/rsyslog-remote&lt;/code&gt;，防止与已有的 rsyslog 冲突&lt;/li&gt;
&lt;li&gt;注释 &lt;code&gt;$IncludeConfig&lt;/code&gt;，防止引入了不必要的配置&lt;/li&gt;
&lt;li&gt;注释所有已有的 &lt;code&gt;RULES&lt;/code&gt; 下面的配置&lt;/li&gt;
&lt;li&gt;添加如下配置：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;$template FromIp,&amp;#34;/var/log/rsyslog-remote/%FROMHOST-IP%.log&amp;#34;
*.* ?FromIp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样，就会按照来源的 IP 地址进行分类，然后都写入到 &lt;code&gt;/var/log/rsyslog-remote/x.x.x.x.log&lt;/code&gt; 文件里。&lt;/p&gt;
&lt;h2 id=&#34;systemd-service&#34;&gt;systemd service&lt;/h2&gt;
&lt;p&gt;最后，写一个 systemd service 让它自动启动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;Unit&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ConditionPathExists&lt;/span&gt;=&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;etc&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rsyslog-remote&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;conf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Description&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;Remote&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Syslog&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;Service&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;simple&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PIDFile&lt;/span&gt;=&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rsyslogd-remote&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecStart&lt;/span&gt;=&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;usr&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sbin&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rsyslogd&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;-n&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;-f&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;etc&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rsyslog-remote&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;conf&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;-i&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rsyslogd-remote&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecReload&lt;/span&gt;=&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bin&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;kill&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;-HUP&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MAINPID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;Install&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;WantedBy&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;multi-user&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl daemon-reload
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl enable --now rsyslog-remote
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就实现了远程日志的收集。&lt;/p&gt;
&lt;h2 id=&#34;logrotate-设置&#34;&gt;logrotate 设置&lt;/h2&gt;
&lt;p&gt;为了防止日志太多，还需要配置 logrotate。&lt;/p&gt;
&lt;p&gt;复制 &lt;code&gt;/etc/logrotate.d/rsyslog&lt;/code&gt; 到 &lt;code&gt;/etc/logrotate.d/rsyslog-remote&lt;/code&gt;，然后修改开头为 &lt;code&gt;/var/log/rsyslog-remote/*.log&lt;/code&gt; 即可，路径和上面对应。注意脚本 &lt;code&gt;/usr/lib/rsyslog/rsyslog-remote&lt;/code&gt; 也需要复制一份，然后修改一下 systemd service 名字。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.makeuseof.com/set-up-linux-remote-logging-using-rsyslog/&#34;&gt;How to Set Up Remote Logging on Linux Using rsyslog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.thegeekdiary.com/configuring-remote-logging-using-rsyslog-in-centos-rhel/&#34;&gt;Configuring Remote Logging using rsyslog in CentOS/RHEL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tecmint.com/install-rsyslog-centralized-logging-in-centos-ubuntu/&#34;&gt;How to Setup Central Logging Server with Rsyslog in Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tecmint.com/setup-rsyslog-client-to-send-logs-to-rsyslog-server-in-centos-7/&#34;&gt;How to Setup Rsyslog Client to Send Logs to Rsyslog Server in CentOS 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>「教学」Wishbone 总线协议</title>
      <link>https://jia.je/hardware/2022/06/19/wishbone/</link>
      <pubDate>Sun, 19 Jun 2022 17:05:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/06/19/wishbone/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/bus_protocol.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在研究如何把 Wishbone 总线协议引入计算机组成原理课程，因此趁此机会学习了一下 Wishbone 的协议。&lt;/p&gt;
&lt;h2 id=&#34;总线&#34;&gt;总线&lt;/h2&gt;
&lt;p&gt;总线是什么？总线通常用于连接 CPU 和外设，为了更好的兼容性和可复用性，会想到能否设计一个统一的协议，其中 CPU 实现的是发起请求的一方（又称为 master），外设实现的是接收请求的一方（又称为 slave），那么如果要添加外设、或者替换 CPU 实现，都会变得比较简单，减少了许多适配的工作量。&lt;/p&gt;
&lt;p&gt;那么，我们来思考一下，一个总线协议需要包括哪些内容？对于 CPU 来说，程序会读写内存，读写内存就需要以下几个信号传输到内存：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;地址（&lt;code&gt;addr&lt;/code&gt;）：例如 32 位处理器就是 32 位地址，或者按照内存的大小计算地址线的宽度&lt;/li&gt;
&lt;li&gt;数据（&lt;code&gt;w_data&lt;/code&gt; 和 &lt;code&gt;r_data&lt;/code&gt;）：分别是写数据和读数据，宽度通常为 32 位 或 64 位，也就是一个时钟周期可以传输的数据量&lt;/li&gt;
&lt;li&gt;读还是写（&lt;code&gt;we&lt;/code&gt;）：高表示写，低表示读&lt;/li&gt;
&lt;li&gt;字节有效（&lt;code&gt;be&lt;/code&gt;）：例如为了实现单字节写，虽然 &lt;code&gt;w_data&lt;/code&gt; 可能是 32 位宽，但是实际写入的是其中的一个字节&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了请求的内容以外，为了表示 CPU 想要发送请求，还需要添加 &lt;code&gt;valid&lt;/code&gt; 信号：高表示发送请求，低表示不发送请求。很多时候，外设的速度比较慢，可能无法保证每个周期都可以处理请求，因此外设可以提供一个 &lt;code&gt;ready&lt;/code&gt; 信号：当 &lt;code&gt;valid=1 &amp;amp;&amp;amp; ready=1&lt;/code&gt; 的时候，发送并处理请求；当 &lt;code&gt;valid=1 &amp;amp;&amp;amp; ready=0&lt;/code&gt; 的时候，表示外设还没有准备好，此时 CPU 需要一直保持 &lt;code&gt;valid=1&lt;/code&gt; 不变，等到外设准备好后，&lt;code&gt;valid=1 &amp;amp;&amp;amp; ready=1&lt;/code&gt; 请求生效。&lt;/p&gt;
&lt;p&gt;简单总结一下上面的需求，可以得到 master 和 slave 端分别的信号列表。这次，我们在命名的时候用 &lt;code&gt;_o&lt;/code&gt; 表示输出、&lt;code&gt;_i&lt;/code&gt; 表示输入，可以得到 master 端（CPU 端）的信号：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;clock_i&lt;/code&gt;：时钟输入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;valid_o&lt;/code&gt;：高表示 master 想要发送请求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ready_i&lt;/code&gt;：高表示 slave 准备好处理请求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addr_o&lt;/code&gt;：master 想要读写的地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;we_o&lt;/code&gt;：master 想要读还是写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data_o&lt;/code&gt;：master 想要写入的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;be_o&lt;/code&gt;：master 读写的字节使能，用于实现单字节写等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data_i&lt;/code&gt;：slave 提供给 master 的读取的数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了时钟都是输入以外，把上面其余的信号输入、输出对称一下，就可以得到 slave 端（外设端）的信号：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;clock_i&lt;/code&gt;：时钟输入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;valid_i&lt;/code&gt;：高表示 master 想要发送请求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ready_o&lt;/code&gt;：高表示 slave 准备好处理请求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addr_i&lt;/code&gt;：master 想要读写的地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;we_i&lt;/code&gt;：master 想要读还是写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data_i&lt;/code&gt;：master 想要写入的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;be_i&lt;/code&gt;：master 读写的字节使能，用于实现单字节写等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data_o&lt;/code&gt;：slave 提供给 master 的读取的数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据我们上面设计的自研总线，可以绘制出下面的波形图（以 master 的信号为例）：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clock&#34;, wave: &#34;p.........&#34;, node: &#34;.abcdefgh&#34;},
      { name: &#34;valid_o&#34;, wave: &#34;0101.01..0&#34;},
      { name: &#34;ready_i&#34;, wave: &#34;010.101..0&#34;},
      { name: &#34;addr_o&#34;, wave: &#34;x=x=.x===x&#34;, data: [&#34;0x01&#34;, &#34;0x02&#34;, &#34;0x03&#34;, &#34;0x01&#34;, &#34;0x02&#34;]},
      { name: &#34;we_o&#34;, wave: &#34;x1x0.x101x&#34;},
      { name: &#34;data_o&#34;, wave: &#34;x=xxxx=x=x&#34;, data: [&#34;0x12&#34;, &#34;0x56&#34;, &#34;0x9a&#34;]},
      { name: &#34;be_o&#34;, wave: &#34;x=x=.x=x=x&#34;, data: [&#34;0x1&#34;, &#34;0x1&#34;, &#34;0x1&#34;, &#34;0x1&#34;]},
      { name: &#34;data_i&#34;, wave: &#34;xxxx=xx=xx&#34;, data: [&#34;0x34&#34;, &#34;0x12&#34;]},
    ]
}
&lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; 周期：此时 &lt;code&gt;valid_o=1 &amp;amp;&amp;amp; ready_i=1&lt;/code&gt; 说明有请求发生，此时 &lt;code&gt;we_o=1&lt;/code&gt; 说明是一个写操作，并且写入地址是 &lt;code&gt;addr_o=0x01&lt;/code&gt;，写入的数据是 &lt;code&gt;data_o=0x12&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; 周期：此时 &lt;code&gt;valid_o=0 &amp;amp;&amp;amp; ready_i=0&lt;/code&gt; 说明无事发生&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; 周期：此时 &lt;code&gt;valid_o=1 &amp;amp;&amp;amp; ready_i=0&lt;/code&gt; 说明 master 想要从地址 0x02（&lt;code&gt;addr_o=0x02&lt;/code&gt;）读取数据（&lt;code&gt;we_o=0&lt;/code&gt;），但是 slave 没有接受（&lt;code&gt;ready_i=0&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; 周期：此时 &lt;code&gt;valid_o=1 &amp;amp;&amp;amp; ready_i=1&lt;/code&gt; 说明有请求发生，master 从地址 0x02（&lt;code&gt;addr_o=0x02&lt;/code&gt;）读取数据（&lt;code&gt;we_o=0&lt;/code&gt;），读取的数据为 0x34（&lt;code&gt;data_i=0x34&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e&lt;/code&gt; 周期：此时 &lt;code&gt;valid_o=0 &amp;amp;&amp;amp; ready_i=0&lt;/code&gt; 说明无事发生&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; 周期：此时 &lt;code&gt;valid_o=1 &amp;amp;&amp;amp; ready_i=1&lt;/code&gt; 说明有请求发生，master 向地址 0x03（&lt;code&gt;addr_o=0x03&lt;/code&gt;）写入数据（&lt;code&gt;we_o=1&lt;/code&gt;），写入的数据为 0x56（&lt;code&gt;data_i=0x56&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g&lt;/code&gt; 周期：此时 &lt;code&gt;valid_o=1 &amp;amp;&amp;amp; ready_i=1&lt;/code&gt; 说明有请求发生，master 从地址 0x01（&lt;code&gt;addr_o=0x01&lt;/code&gt;）读取数据（&lt;code&gt;we_o=0&lt;/code&gt;），读取的数据为 0x12（&lt;code&gt;data_i=0x12&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt; 周期：此时 &lt;code&gt;valid_o=1 &amp;amp;&amp;amp; ready_i=1&lt;/code&gt; 说明有请求发生，master 向地址 0x02（&lt;code&gt;addr_o=0x02&lt;/code&gt;）写入数据（&lt;code&gt;we_o=1&lt;/code&gt;），写入的数据为 0x9a（&lt;code&gt;data_i=0x9a&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从上面的波形中，可以有几点观察：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;master 想要发起请求的时候，就设置 &lt;code&gt;valid_o=1&lt;/code&gt;；当 slave 可以接受请求的时候，就设置 &lt;code&gt;ready_i=1&lt;/code&gt;；在 &lt;code&gt;valid_o=1 &amp;amp;&amp;amp; ready_i=1&lt;/code&gt; 时视为一次请求&lt;/li&gt;
&lt;li&gt;如果 master 发起请求，同时 slave 不能接收请求，即 &lt;code&gt;valid_o=1 &amp;amp;&amp;amp; ready_i=0&lt;/code&gt;，此时 master 要保持 &lt;code&gt;addr_o&lt;/code&gt; &lt;code&gt;we_o&lt;/code&gt; &lt;code&gt;data_o&lt;/code&gt; 和 &lt;code&gt;be_o&lt;/code&gt; 不变，直到请求结束&lt;/li&gt;
&lt;li&gt;当 master 不发起请求的时候，即 &lt;code&gt;valid_o=0&lt;/code&gt;，此时总线上的信号都视为无效数据，不应该进行处理；对于读操作，只有在 &lt;code&gt;valid_o=1 &amp;amp;&amp;amp; ready_i=1&lt;/code&gt; 时 &lt;code&gt;data_i&lt;/code&gt; 上的数据是有效的&lt;/li&gt;
&lt;li&gt;可以连续多个周期发生请求，即 &lt;code&gt;valid_o=1 &amp;amp;&amp;amp; ready_i=1&lt;/code&gt; 连续多个周期等于一，此时是理想情况，可以达到总线最高的传输速度&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;wishbone-classic-standard&#34;&gt;Wishbone Classic Standard&lt;/h2&gt;
&lt;p&gt;首先我们来看最简单的 Wishbone 版本 Wishbone Classic Standard。其设计思路和上面的自研总线非常相似，让我们来看看它的信号，例如 master 端（CPU 端）的信号：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;CLK_I&lt;/code&gt;: 时钟输入，即自研总线中的 &lt;code&gt;clock_i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;STB_O&lt;/code&gt;：高表示 master 要发送请求，即自研总线中的 &lt;code&gt;valid_o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ACK_I&lt;/code&gt;：高表示 slave 处理请求，即自研总线中的 &lt;code&gt;ready_i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ADR_O&lt;/code&gt;：master 想要读写的地址，即自研总线中的 &lt;code&gt;addr_o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WE_O&lt;/code&gt;：master 想要读还是写，即自研总线中的 &lt;code&gt;we_o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DAT_O&lt;/code&gt;：master 想要写入的数据，即自研总线中的 &lt;code&gt;data_o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SEL_O&lt;/code&gt;：master 读写的字节使能，即自研总线中的 &lt;code&gt;be_o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DAT_I&lt;/code&gt;：master 从 slave 读取的数据，即自研总线中的 &lt;code&gt;data_i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CYC_O&lt;/code&gt;：总线的使能信号，无对应的自研总线信号&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还有一些可选信号，这里就不赘述了。可以看到，除了最后一个 &lt;code&gt;CYC_O&lt;/code&gt;，其他的信号其实就是我们刚刚设计的自研总线。&lt;code&gt;CYC_O&lt;/code&gt; 的可以认为是 master 想要占用 slave 的总线接口，在常见的使用场景下，直接认为 &lt;code&gt;CYC_O=STB_O&lt;/code&gt;。它的用途是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;占用 slave 的总线接口，不允许其他 master 访问&lt;/li&gt;
&lt;li&gt;简化 interconnect 的实现&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;把上面自研总线的波形图改成 Wishbone Classic Standard，就可以得到：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;CLK_I&#34;, wave: &#34;p.........&#34;, node: &#34;.abcdefgh&#34;},
      { name: &#34;CYC_O&#34;, wave: &#34;0101.01..0&#34;},
      { name: &#34;STB_O&#34;, wave: &#34;0101.01..0&#34;},
      { name: &#34;ACK_I&#34;, wave: &#34;010.101..0&#34;},
      { name: &#34;ADR_O&#34;, wave: &#34;x=x=.x===x&#34;, data: [&#34;0x01&#34;, &#34;0x02&#34;, &#34;0x03&#34;, &#34;0x01&#34;, &#34;0x02&#34;]},
      { name: &#34;WE_O&#34;, wave: &#34;x1x0.x101x&#34;},
      { name: &#34;DAT_O&#34;, wave: &#34;x=xxxx=x=x&#34;, data: [&#34;0x12&#34;, &#34;0x56&#34;, &#34;0x9a&#34;]},
      { name: &#34;SEL_O&#34;, wave: &#34;x=x=.x=x=x&#34;, data: [&#34;0x1&#34;, &#34;0x1&#34;, &#34;0x1&#34;, &#34;0x1&#34;]},
      { name: &#34;DAT_I&#34;, wave: &#34;xxxx=xx=xx&#34;, data: [&#34;0x34&#34;, &#34;0x12&#34;]},
    ]
}
&lt;/script&gt;
&lt;h2 id=&#34;wishbone-classic-pipelined&#34;&gt;Wishbone Classic Pipelined&lt;/h2&gt;
&lt;p&gt;上面的 Wishbone Classic Standard 协议非常简单，但是会遇到一个问题：假设实现的是一个 SRAM 控制器，它的读操作有一个周期的延迟，也就是说，在这个周期给出地址，需要在下一个周期才可以得到结果。在 Wishbone Classic Standard 中，就会出现下面的波形：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;CLK_I&#34;, wave: &#34;p.....&#34;, node: &#34;.abcd&#34;},
      { name: &#34;CYC_O&#34;, wave: &#34;01...0&#34;},
      { name: &#34;STB_O&#34;, wave: &#34;01...0&#34;},
      { name: &#34;ACK_I&#34;, wave: &#34;0.1010&#34;},
      { name: &#34;ADR_O&#34;, wave: &#34;x=.=.x&#34;, data: [&#34;0x01&#34;, &#34;0x02&#34;]},
      { name: &#34;WE_O&#34;, wave: &#34;x0...x&#34;},
      { name: &#34;DAT_O&#34;, wave: &#34;xxxxxx&#34;},
      { name: &#34;SEL_O&#34;, wave: &#34;x=...x&#34;, data: [&#34;0x1&#34;]},
      { name: &#34;DAT_I&#34;, wave: &#34;xx=x=x&#34;, data: [&#34;0x12&#34;, &#34;0x34&#34;]},
    ]
}
&lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; 周期：master 给出读地址 0x01，此时 SRAM 控制器开始读取，但是此时数据还没有读取回来，所以 &lt;code&gt;ACK_I=0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; 周期：此时 SRAM 完成了读取，把读取的数据 0x12 放在 &lt;code&gt;DAT_I&lt;/code&gt; 并设置 &lt;code&gt;ACK_I=1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; 周期：master 给出下一个读地址 0x02，SRAM 要重新开始读取&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; 周期：此时 SRAM 完成了第二次读取，把读取的数据 0x34 放在 &lt;code&gt;DAT_I&lt;/code&gt; 并设置 &lt;code&gt;ACK_I=1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从波形来看，功能没有问题，但是每两个周期才能进行一次读操作，发挥不了最高的性能。那么怎么解决这个问题呢？我们在 &lt;code&gt;a&lt;/code&gt; 周期给出第一个地址，在 &lt;code&gt;b&lt;/code&gt; 周期得到第一个数据，那么如果能在 &lt;code&gt;b&lt;/code&gt; 周期的时候给出第二个地址，就可以在 &lt;code&gt;c&lt;/code&gt; 周期得到第二个数据。这样，就可以实现流水线式的每个周期进行一次读操作。但是，Wishbone Classic Standard 要求 &lt;code&gt;b&lt;/code&gt; 周期时第一次请求还没有结束，因此我们需要修改协议，来实现流水线式的请求。&lt;/p&gt;
&lt;p&gt;实现思路也很简单：既然 Wishbone Classic Standard 认为 &lt;code&gt;b&lt;/code&gt; 周期时，第一次请求还没有结束，那就让第一次请求提前在 &lt;code&gt;a&lt;/code&gt; 周期完成，只不过它的数据要等到 &lt;code&gt;b&lt;/code&gt; 周期才能给出。实际上，这个时候的一次读操作，可以认为分成了两部分：首先是 master 向 slave 发送读请求，这个请求在 &lt;code&gt;a&lt;/code&gt; 周期完成；然后是 slave 向 master 发送读的结果，这个结果在 &lt;code&gt;b&lt;/code&gt; 周期完成。为了实现这个功能，我们进行如下修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加 &lt;code&gt;STALL_I&lt;/code&gt; 信号：&lt;code&gt;CYC_O=1 &amp;amp;&amp;amp; STB_O=1 &amp;amp;&amp;amp; STALL_I=0&lt;/code&gt; 表示进行一次读请求&lt;/li&gt;
&lt;li&gt;修改 &lt;code&gt;ACK_I&lt;/code&gt; 信号含义：&lt;code&gt;CYC_O=1 &amp;amp;&amp;amp; STB_O=1 &amp;amp;&amp;amp; ACK_I=1&lt;/code&gt; 表示一次读响应&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进行如上修改以后，我们就得到了 Wishbone Classic Pipelined 总线协议。上面的两次连续读操作波形如下：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;CLK_I&#34;, wave: &#34;p....&#34;, node: &#34;.abcd&#34;},
      { name: &#34;CYC_O&#34;, wave: &#34;01..0&#34;},
      { name: &#34;STB_O&#34;, wave: &#34;01.0.&#34;},
      { name: &#34;STALL_I&#34;, wave: &#34;0....&#34;},
      { name: &#34;ACK_I&#34;, wave: &#34;0.1.0&#34;},
      { name: &#34;ADR_O&#34;, wave: &#34;x==xx&#34;, data: [&#34;0x01&#34;, &#34;0x02&#34;]},
      { name: &#34;WE_O&#34;, wave: &#34;x0.xx&#34;},
      { name: &#34;DAT_O&#34;, wave: &#34;xxxxx&#34;},
      { name: &#34;SEL_O&#34;, wave: &#34;x=.xx&#34;, data: [&#34;0x1&#34;]},
      { name: &#34;DAT_I&#34;, wave: &#34;xx==x&#34;, data: [&#34;0x12&#34;, &#34;0x34&#34;]},
    ]
}
&lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; 周期：master 请求读地址 0x01，slave 接收读请求（&lt;code&gt;STALL_O=0&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; 周期：slave 返回读请求结果 0x12，并设置 &lt;code&gt;ACK_I=1&lt;/code&gt;；同时 master 请求读地址 0x02，slave 接收读请求（&lt;code&gt;STALL_O=0&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; 周期：slave 返回读请求结果 0x34，并设置 &lt;code&gt;ACK_I=1&lt;/code&gt;；master 不再发起请求，设置 &lt;code&gt;STB_O=0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; 周期：所有请求完成，master 设置 &lt;code&gt;CYC_O=0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样我们就实现了一个每周期进行一次读操作的 slave。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cdn.opencores.org/downloads/wbspec_b4.pdf&#34;&gt;Wishbone Spec B4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Nix Cookbook</title>
      <link>https://jia.je/software/2022/06/07/nix-cookbook/</link>
      <pubDate>Tue, 07 Jun 2022 22:29:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/06/07/nix-cookbook/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在尝试 NixOS 和在 macOS 上跑 Nix，下面记录一些我在使用过程中遇到的一些小问题和解决思路。&lt;/p&gt;
&lt;h2 id=&#34;nixos&#34;&gt;NixOS&lt;/h2&gt;
&lt;h3 id=&#34;全局配置&#34;&gt;全局配置&lt;/h3&gt;
&lt;p&gt;NixOS 的全局配置路径：&lt;code&gt;/etc/nixos/configuration.nix&lt;/code&gt; 和 &lt;code&gt;/etc/nixos/hardware-configuration.nix&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;应用更新后的全局配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nixos-rebuild switch
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nixos-rebuild switch --upgrade
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用 Flakes 配置文件并显示变化：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getenv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USER&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;home &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/nix/var/nix/profiles/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;old &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; home &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readlink(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;home&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;system&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sudo nixos-rebuild switch --flake .&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; home &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readlink(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;home&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;system&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nix store diff-closures &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;old&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;new&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;更新大版本&#34;&gt;更新大版本&lt;/h3&gt;
&lt;p&gt;如果要更新 NixOS 21.11 到 22.05:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-channel --list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-channel --add https://nixos.org/channels/nixos-22.05 nixos
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nixos-rebuild switch --upgrade
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以考虑改或者不改 &lt;code&gt;/etc/nixos/configuration.nix&lt;/code&gt; 中的 &lt;code&gt;system.stateVersion&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;常用配置&#34;&gt;常用配置&lt;/h3&gt;
&lt;p&gt;常用的 NixOS 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Enable XFCE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xserver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xserver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;desktopManager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xfce&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# System wide packages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;environment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;systemPackages &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  xxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Fish shell&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xxx &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  shell &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fish;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Command not found&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;command-not-found&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Steam gaming&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;allowUnfree &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;steam&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# NOPASSWD for sudo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;security&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sudo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;wheelNeedsPassword &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# QEMU guest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;qemuGuest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spice-vdagentd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# XRDP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xrdp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xrdp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;defaultWindowManager &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xfce4-session&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xrdp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;openFirewall &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# OpenSSH server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;openssh&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Udev rules for Altera USB Blaster&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;udev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;packages &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  usb-blaster-udev-rules
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;vscode-remote&#34;&gt;VSCode Remote&lt;/h3&gt;
&lt;p&gt;VSCode Remote 会在远程的机器上运行一个预编译的 nodejs，运行的时候会因为路径问题无法执行。&lt;/p&gt;
&lt;p&gt;解决方法在 &lt;a href=&#34;https://nixos.wiki/wiki/Visual_Studio_Code#Remote_SSH&#34;&gt;NixOS Wiki&lt;/a&gt; 上有，具体来说，首先，需要安装 &lt;code&gt;nodejs&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;environment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;systemPackages &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nodejs-16_x &lt;span style=&#34;color:#75715e&#34;&gt;# vscode remote&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，用软链接来覆盖 nodejs：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd ~/.vscode-server/bin/HASH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ln -sf /run/current-system/sw/bin/node
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以正常使用 VSCode Remote 了。&lt;/p&gt;
&lt;h2 id=&#34;home-manager&#34;&gt;Home Manager&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nix-community/home-manager&#34;&gt;Home Manager&lt;/a&gt; 描述用户默认看到的程序，而 NixOS 的配置是所有用户的。&lt;/p&gt;
&lt;h3 id=&#34;配置文件&#34;&gt;配置文件&lt;/h3&gt;
&lt;p&gt;配置文件：&lt;code&gt;~/.config/nixpkgs/home.nix&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;应用配置文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;home-manager switch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用 Flakes 配置文件并显示变化：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getenv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USER&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;home &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/nix/var/nix/profiles/per-user/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;user&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;old &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; home &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readlink(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;home&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;profile&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;home-manager switch --flake .&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; home &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readlink(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;home&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;profile&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nix store diff-closures &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;old&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;new&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;常用配置-1&#34;&gt;常用配置&lt;/h3&gt;
&lt;p&gt;常用的 Home Manager 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Allow unfree&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;allowUnfree &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;allowUnfreePredicate &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; (pkg: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# User wide packages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;home&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;packages &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  xxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成 Nix 配置 &lt;code&gt;~/.config/nix/nix.conf&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Enable flakes &amp;amp; setup TUNA mirror&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;package &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nix;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;settings &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  experimental-features &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nix-command&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flakes&amp;#34;&lt;/span&gt; ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  substituters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://mirrors.tuna.tsinghua.edu.cn/nix-channels/store&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cache.nixos.org/&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Shell 环境变量和 PATH：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;home&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sessionVariables &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;home&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sessionPath &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$HOME/.local/bin&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;离线 Home Manager 文档（用 &lt;code&gt;home-manager-help&lt;/code&gt; 命令打开）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;manual&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;覆盖依赖版本&#34;&gt;覆盖依赖版本&lt;/h3&gt;
&lt;p&gt;设置 JVM 程序依赖的 JDK 版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Maven with java 11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;home&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;packages &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (maven&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;override { jdk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; jdk11; })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Many packages with the same JDK&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;home&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;packages &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; java &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jdk11; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (maven&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;override { jdk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; java; })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (sbt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;override { jre &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; java; })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;具体的参数命名要看 nixpkgs 上对应的包的开头。&lt;/p&gt;
&lt;h3 id=&#34;配置-direnv&#34;&gt;配置 direnv&lt;/h3&gt;
&lt;p&gt;direnv 是一个 shell 插件，它的用途是进入目录的时候，会根据 .envrc 来执行命令，比如自动进入 nix-shell 等。配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;direnv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在工程路径下，编写 &lt;code&gt;.envrc&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;use_nix
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么，在 shell 进入目录的时候，就会自动获得 nix-shell 的环境变量。&lt;/p&gt;
&lt;h3 id=&#34;配置-fish&#34;&gt;配置 fish&lt;/h3&gt;
&lt;p&gt;可以在 home manager 配置中编写 fish 配置，这样它会自动生成 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shellAliases &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shellInit &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # Rust
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  set -x PATH ~/.cargo/bin $PATH
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;配置-git&#34;&gt;配置 git&lt;/h3&gt;
&lt;p&gt;同理，也可以在 home manager 中配置 git：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lfs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;userName &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Someone&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;userEmail &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mail@example.com&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;extraConfig &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  core &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    quotepath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pull &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rebase &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ignores &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.DS_Store&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成的 &lt;code&gt;git&lt;/code&gt; 配置在 &lt;code&gt;~/.config/git/config&lt;/code&gt; 和 &lt;code&gt;~/.config/git/ignore&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;flakes&#34;&gt;Flakes&lt;/h2&gt;
&lt;p&gt;Flakes 可以用来把多个系统的 nix 配置写在一个项目中。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  description &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nix configuration&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    home-manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:nix-community/home-manager/release-22.05&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:nixos/nixpkgs/nixos-22.05&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { self&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; home-manager }:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      nixosConfigurations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xxxx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixosSystem {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        system &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x86_64-linux&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        modules &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;./nixos/xxxx/configuration.nix&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          home-manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixosModules&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;home-manager
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;./nixos/xxxx/home.nix&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      homeConfigurations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yyyy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; home-manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;homeManagerConfiguration {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        configuration &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./home-manager/yyyy/home.nix&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        system &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aarch64-darwin&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        homeDirectory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/yyyy&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yyyy&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        stateVersion &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.05&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，要应用上面的配置，运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# NixOS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nixos-rebuild switch --flake .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Home manager&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;home-manager switch --flake .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以把若干个系统上的 nix 配置管理在一个仓库中了。&lt;/p&gt;
&lt;h2 id=&#34;实用工具&#34;&gt;实用工具&lt;/h2&gt;
&lt;h3 id=&#34;nixpkgs-fmt&#34;&gt;nixpkgs-fmt&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nix-community/nixpkgs-fmt&#34;&gt;nixpkgs-fmt&lt;/a&gt; 用来格式化 Nix 代码。&lt;/p&gt;
&lt;h3 id=&#34;searchnixosorg&#34;&gt;search.nixos.org&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;search.nixos.org&#34;&gt;search.nixos.org&lt;/a&gt; 可以搜索 nixpkgs 上的各种包，也可以看到不同平台支持情况。缺点是看不出是否 unfree 和 broken，并且一些 darwin os-specific 的包不会显示。&lt;/p&gt;
&lt;h3 id=&#34;nix-tree&#34;&gt;nix-tree&lt;/h3&gt;
&lt;p&gt;显示各个 nix derivation 的硬盘占用和依赖关系。&lt;/p&gt;
&lt;h2 id=&#34;打包&#34;&gt;打包&lt;/h2&gt;
&lt;p&gt;可以很容易地编写 &lt;code&gt;default.nix&lt;/code&gt; 来给自己的项目打包。&lt;/p&gt;
&lt;h3 id=&#34;cmake&#34;&gt;CMake&lt;/h3&gt;
&lt;p&gt;对于一个简单的 cmake 程序，可以按照如下的格式编写 &lt;code&gt;default.nix&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;nixpkgs&amp;gt;&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stdenv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mkDerivation {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xyz&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./.&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nativeBuildInputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cmake
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buildInputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    xxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    yyy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以用 &lt;code&gt;nix-build&lt;/code&gt; 命令来构建，生成结果会在当前目录下创建一个 &lt;code&gt;result&lt;/code&gt; 的软链接，里面就是安装目录。&lt;/p&gt;
&lt;p&gt;由于 &lt;code&gt;nix-build&lt;/code&gt; 的时候也会创建 &lt;code&gt;build&lt;/code&gt; 目录，为了防止冲突，建议开发的时候用其他的名字。&lt;/p&gt;
&lt;h3 id=&#34;qt&#34;&gt;Qt&lt;/h3&gt;
&lt;p&gt;对于 Qt 项目来说，由于有不同的 Qt 大版本，所以实现的时候稍微复杂一些，要拆成两个文件，首先是 &lt;code&gt;default.nix&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;nixpkgs&amp;gt;&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libsForQt5&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;callPackage &lt;span style=&#34;color:#e6db74&#34;&gt;./xxx.nix&lt;/span&gt; { }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里就表示用 &lt;code&gt;qt5&lt;/code&gt; 来编译，那么编写 &lt;code&gt;xxx.nix&lt;/code&gt; 的时候，传入的 &lt;code&gt;qtbase&lt;/code&gt; 等库就是 &lt;code&gt;qt5&lt;/code&gt; 的版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ stdenv&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; qtbase&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; wrapQtAppsHook&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cmake }:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stdenv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mkDerivation {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./.&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nativeBuildInputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cmake
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wrapQtAppsHook &lt;span style=&#34;color:#75715e&#34;&gt;# must-have for qt apps&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buildInputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    qtbase
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际测试中发现，运行的程序可能会报告 &lt;code&gt;Could not initialize GLX&lt;/code&gt; 的错误，这个方法可以通过 &lt;code&gt;wrapProgram&lt;/code&gt; 添加环境变量解决：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  # https://github.com/NixOS/nixpkgs/issues/66755#issuecomment-657305962
  # Fix &amp;#34;Could not initialize GLX&amp;#34; error
  postInstall = &amp;#39;&amp;#39;
    wrapProgram &amp;#34;$out/bin/xxx&amp;#34; --set QT_XCB_GL_INTEGRATION none
  &amp;#39;&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;开发环境&#34;&gt;开发环境&lt;/h2&gt;
&lt;p&gt;除了打包以外，通常还会在 &lt;code&gt;shell.nix&lt;/code&gt; 中定义开发环境需要的包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ pkgs &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;nixpkgs&amp;gt;&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mkShell {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buildInputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cmake
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后可以用 &lt;code&gt;nix-shell&lt;/code&gt; 来进入开发环境。如果不希望外面的环境变量传递进去，可以用 &lt;code&gt;nix-shell --pure&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;搜索&#34;&gt;搜索&lt;/h2&gt;
&lt;p&gt;按名字搜索一个包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix search nixpkgs xxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-env -qaP yyy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;nixpkgs&#34;&gt;Nixpkgs&lt;/h2&gt;
&lt;p&gt;可以从 TUNA 镜像上先 clone 一份到本地，然后再添加 github 上游作为 remote。&lt;/p&gt;
&lt;p&gt;从本地 nixpkgs 安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-env -f $PWD -iA xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从本地 nixpkgs 编译：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-build $PWD -A xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从本地 nixpkgs 开一个 shell：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-shell -I nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PWD -p xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;nixpkgs-的分支&#34;&gt;Nixpkgs 的分支&lt;/h3&gt;
&lt;p&gt;Nixpkgs 开发分支主要有三个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;master&lt;/li&gt;
&lt;li&gt;staging-next&lt;/li&gt;
&lt;li&gt;staging&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;发 PR 的时候，如果需要重新编译的包比较多，就要往 staging 提交；比较少，就往 staging-next 提交。&lt;/p&gt;
&lt;p&gt;CI 会自动把 master 合并到 staging-next，也会把 staging-next 合并到 staging。这样 master 上的改动也会同步到 staging 上。&lt;/p&gt;
&lt;p&gt;维护者会定义把 staging 手动合并到 staging-next，然后手动合并 staging-next 到 staging。这个的周期一般是一周多，可以在 pr 里搜索 staging-next。&lt;/p&gt;
&lt;p&gt;Hydra 会编译 master 分支和 staging-next 分支上的包，不会编译 staging 分支上的包。同理，binary cache 上前两个分支上有的，而 staging 上没有的。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://nixos.org/manual/nixpkgs/stable/#submitting-changes-commit-policy&#34;&gt;https://nixos.org/manual/nixpkgs/stable/#submitting-changes-commit-policy&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;提交贡献&#34;&gt;提交贡献&lt;/h3&gt;
&lt;p&gt;注意事项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;升级一些比较老的写法，例如 mkDerivation -&amp;gt; stdenv.mkDerivation，Qt 的 hook&lt;/li&gt;
&lt;li&gt;引入 patch 的时候，建议先向上游提 PR，如果合并了，就直接用上游的 commit；如果没有合并，退而求其次可以用 pr 的 patch；如果没有提 PR 的渠道，或者上游的 commit 无法应用到当前的版本，或者这个 patch 没有普适性，再写本地的 patch；注释里要写打 patch 的原因和相关的 issue 链接，什么时候不再需要这个 patch，并且起个名字&lt;/li&gt;
&lt;li&gt;不知道 SHA256 的时候，可以注释掉或者随便写一个，这样 nix build 的时候会重新下载，然后把正确的显示出来&lt;/li&gt;
&lt;li&gt;对于有命令的包，可以添加 testVersion 测试&lt;/li&gt;
&lt;li&gt;长时间没有 review 的 pr，可以在 discourse 上回复帖子。&lt;/li&gt;
&lt;li&gt;更新之前，可以搜索一下，有没有相关的 issue 或者 pr；如果有 issue，新建 pr 的时候要提一下&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一些常见的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编译器打开 &lt;code&gt;-fno-common&lt;/code&gt; 后，可能会导致一些链接问题&lt;/li&gt;
&lt;li&gt;Darwin 上的 clang 没有打开 LTO，也没有打开 Universal 支持&lt;/li&gt;
&lt;li&gt;AArch64 Darwin 上的 gfortran 的 stack protector 不工作，需要把 hardening 关掉&lt;/li&gt;
&lt;li&gt;当编译报错是 &lt;code&gt;-Werror&lt;/code&gt; 导致的时候，按照 warning 类型在 NIX_CFLAGS_COMPILE 中添加 &lt;code&gt;-Wno-error=warning-type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;configure 版本较老，需要引入 autoreconfHook&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;阅读文档：&lt;a href=&#34;https://github.com/NixOS/nixpkgs/blob/master/doc/contributing/quick-start.chapter.md&#34;&gt;https://github.com/NixOS/nixpkgs/blob/master/doc/contributing/quick-start.chapter.md&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/NixOS/nixpkgs/blob/master/doc/contributing/coding-conventions.chapter.md&#34;&gt;https://github.com/NixOS/nixpkgs/blob/master/doc/contributing/coding-conventions.chapter.md&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;vscode&#34;&gt;VSCode&lt;/h2&gt;
&lt;p&gt;可以安装 &lt;a href=&#34;https://github.com/nix-community/vscode-nix-ide/&#34;&gt;https://github.com/nix-community/vscode-nix-ide/&lt;/a&gt; 插件，配合 &lt;code&gt;rnix-lsp&lt;/code&gt; 来使用。&lt;/p&gt;
&lt;h2 id=&#34;杂项&#34;&gt;杂项&lt;/h2&gt;
&lt;p&gt;可以用 &lt;code&gt;nix copy&lt;/code&gt; 命令在不同机器的 store 之间复制文件，见 &lt;a href=&#34;https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-copy.html&#34;&gt;nix copy - copy paths between Nix stores&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 libvirt 中运行 RISC-V 虚拟机</title>
      <link>https://jia.je/software/2022/05/31/qemu-rv64-in-libvirt/</link>
      <pubDate>Tue, 31 May 2022 09:22:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/05/31/qemu-rv64-in-libvirt/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;我在 libvirt 中跑了几个 KVM 加速的虚拟机，然后突发奇想，既然 libvirt 背后是 qemu，然后 qemu 是支持跨指令集的，那是否可以让 libvirt 来运行 RISC-V 架构的虚拟机？经过一番搜索，发现可以跑 ARM：&lt;a href=&#34;https://fedoraproject.org/wiki/Architectures/ARM/HowToQemu#Using_QEMU_with_libvirt&#34;&gt;How To: Running Fedora-ARM under QEMU&lt;/a&gt;，既然如此，我们也可以试试用 libvirt 来运行 RV64 虚拟机。&lt;/p&gt;
&lt;h2 id=&#34;准备-rootfs&#34;&gt;准备 rootfs&lt;/h2&gt;
&lt;p&gt;第一步是根据 Debian 的文档 &lt;a href=&#34;https://wiki.debian.org/RISC-V#Creating_a_riscv64_chroot&#34;&gt;Creating a riscv64 chroot&lt;/a&gt; 来创建 rootfs，然后再用 virt-make-fs 来打包。&lt;/p&gt;
&lt;p&gt;首先是用 mmdebstrap 来生成一个 chroot：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo mkdir -p /tmp/riscv64-chroot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt install mmdebstrap qemu-user-static binfmt-support debian-ports-archive-keyring
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo mmdebstrap --architectures&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;riscv64 --include&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;debian-ports-archive-keyring&amp;#34;&lt;/span&gt; sid /tmp/riscv64-chroot &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb http://deb.debian.org/debian-ports sid main&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb http://deb.debian.org/debian-ports unreleased main&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入 chroot 以后，进行一些配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo chroot /tmp/riscv64-chroot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ apt update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ apt install linux-image-riscv64 u-boot-menu vim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# set root password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ passwd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后修改 &lt;code&gt;/etc/default/u-boot&lt;/code&gt; 文件，添加如下的配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# change ro to rw, set root device&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;U_BOOT_PARAMETERS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rw noquiet root=/dev/vda1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# fdt is provided by qemu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;U_BOOT_FDT_DIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;noexist&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后运行 &lt;code&gt;u-boot-update&lt;/code&gt; 生成配置文件 &lt;code&gt;/boot/extlinux/extlinux.conf&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;到这里，rootfs 已经准备完毕。&lt;/p&gt;
&lt;h2 id=&#34;尝试在-qemu-中启动&#34;&gt;尝试在 QEMU 中启动&lt;/h2&gt;
&lt;p&gt;接下来，可以参考 &lt;a href=&#34;https://wiki.debian.org/RISC-V#Setting_up_a_riscv64_virtual_machine&#34;&gt;Setting up a riscv64 virtual machine&lt;/a&gt; 先启动一个 qemu 来测试一下是否可以正常工作：&lt;/p&gt;
&lt;p&gt;首先制作一个 qcow2 格式的镜像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo virt-make-fs --partition&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gpt --type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ext4 --size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;+10G --format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;qcow2 /tmp/riscv64-chroot rootfs.qcow2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ qemu-img info rootfs.qcow2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;image: rootfs.qcow2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file format: qcow2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;virtual size: 11.4 GiB &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12231971328&lt;/span&gt; bytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;disk size: 1.33 GiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cluster_size: &lt;span style=&#34;color:#ae81ff&#34;&gt;65536&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Format specific information:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    compat: 1.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    compression type: zlib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lazy refcounts: false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    refcount bits: &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    corrupt: false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    extended l2: false
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后启动 qemu，配置好 OpenSBI 和 U-Boot 的路径：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt install qemu-system-misc opensbi u-boot-qemu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo qemu-system-riscv64 -nographic -machine virt -m 8G &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -bios /usr/lib/riscv64-linux-gnu/opensbi/generic/fw_jump.elf &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -kernel /usr/lib/u-boot/qemu-riscv64_smode/uboot.elf &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -object rng-random,filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/dev/urandom,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rng0 -device virtio-rng-device,rng&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rng0 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -append &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;console=ttyS0 rw root=/dev/vda1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -device virtio-blk-device,drive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hd0 -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rootfs.qcow2,format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;qcow2,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hd0 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -device virtio-net-device,netdev&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;usernet -netdev user,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;usernet,hostfwd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tcp::22222-:22
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果系统可以正常工作，看到下面的输出，下一步就可以配置 libvirt 了。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[    6.285024] Run /init as init process
Loading, please wait...
Starting version 251.1-1
[    7.743714] virtio_ring: module verification failed: signature and/or required key missing - tainting kernel
[    8.071762] virtio_blk virtio1: [vda] 23838189 512-byte logical blocks (12.2 GB/11.4 GiB)
[    8.181210]  vda: vda1
Begin: Loading essential drivers ... done.
Begin: Running /scripts/init-premount ... done.
Begin: Mounting root file system ... Begin: Running /scripts/local-top ... done.
Begin: Running /scripts/local-premount ... done.
Warning: fsck not present, so skipping root file system
[    9.003143] EXT4-fs (vda1): mounted filesystem with ordered data mode. Quota mode: none.
done.
Begin: Running /scripts/local-bottom ... done.
Begin: Running /scripts/init-bottom ... done.
[    9.754151] Not activating Mandatory Access Control as /sbin/tomoyo-init does not exist.
[    9.808860] random: fast init done
[   10.651361] systemd[1]: Inserted module &amp;#39;autofs4&amp;#39;
[   10.735574] systemd[1]: systemd 251.1-1 running in system mode (+PAM +AUDIT +SELINUX +APPARMOR +IMA +SMACK +SECCOMP +GCRYPT -GNUTLS +OPENSSL +ACL +BLKID +CURL +ELFUTILS +FIDO2 +IDN2 -IDN +IPTC +KMOD +LIBCRYPTSETUP +LIBFDISK +PCRE2 -PWQUALITY -P11KIT -QRENCODE +TPM2 +BZIP2 +LZ4 +XZ +ZLIB +ZSTD -BPF_FRAMEWORK -XKBCOMMON +UTMP +SYSVINIT default-hierarchy=unified)
[   10.736902] systemd[1]: Detected architecture riscv64.

Welcome to Debian GNU/Linux bookworm/sid!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置-libvirt&#34;&gt;配置 libvirt&lt;/h2&gt;
&lt;p&gt;首先，打开 virt-manager，在向导中，可以在下拉菜单选择自定义的架构，选择 riscv64 和 virt，然后选择 Import existing disk image，找到刚刚创建的 qcow2 文件。&lt;/p&gt;
&lt;p&gt;创建好以后，我们还不能直接启动，因为此时还没有配置 OpenSBI 和 U-Boot。由于 virt-aa-helper 会&lt;a href=&#34;https://github.com/wiedi/libvirt/blob/435b4ad22bf812d97f30e4d6b71e6b3a967f4f75/src/security/virt-aa-helper.c#L529&#34;&gt;检查 OpenSBI 和 U-Boot 的路径，要求它们不能在 /usr/lib 路径下&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Don&amp;#39;t allow access to special files or restricted paths such as /bin, /sbin,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * /usr/bin, /usr/sbin and /etc. This is in an effort to prevent read/write
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * access to system files which could be used to elevate privileges. This is a
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * safety measure in case libvirtd is under a restrictive profile and is
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * subverted and trying to escape confinement.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Note that we cannot exclude block devices because they are valid devices.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * The TEMPLATE file can be adjusted to explicitly disallow these if needed.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * RETURN: -1 on error, 0 if ok, 1 if blocked
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;restricted&lt;/span&gt;[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/lib&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/lost+found/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/proc/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/sbin/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/selinux/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/sys/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/bin/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/sbin/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/share/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/bin/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/etc/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/lib&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/sbin/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以，我手动把 U-Boot 和 OpenSBI 复制一份到 /var/lib 下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo mkdir -p /var/lib/custom
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd /var/lib/custom
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo cp -r /usr/lib/u-boot/qemu-riscv64_smode .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo cp -r /usr/lib/riscv64-linux-gnu .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，再去配置 libvirt 的 XML 配置文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;os&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arch=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;riscv64&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;machine=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;virt&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;hvm&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;loader&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rom&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;/var/lib/custom/riscv64-linux-gnu/opensbi/generic/fw_jump.elf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/loader&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;kernel&amp;gt;&lt;/span&gt;/var/lib/custom/qemu-riscv64_smode/uboot.elf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/kernel&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boot&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dev=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hd&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/os&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其余部分不用修改。在下面可以看到 virt-manager 已经设置好了 qemu-system-riscv64:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;devices&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;emulator&amp;gt;&lt;/span&gt;/usr/bin/qemu-system-riscv64&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/emulator&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;disk&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;device=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;disk&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;driver&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;qemu&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;qcow2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;source&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/path/to/rootfs.qcow2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dev=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vda&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bus=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;virtio&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;address&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pci&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;domain=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x0000&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bus=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x04&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slot=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x00&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/disk&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;保存以后直接启动，就完成了在 libvirt 中运行 Debian RV64 虚拟机的目的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>「教学」异步 SRAM 时序</title>
      <link>https://jia.je/hardware/2022/05/19/async-sram-timing/</link>
      <pubDate>Thu, 19 May 2022 08:40:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/05/19/async-sram-timing/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;在一些场合里，我们会使用异步的（即没有时钟信号的）外部 SRAM 来存储数据，而我们经常使用的很多外部接口都是同步接口（即有时钟信号的接口），比如 SPI 和 I2C 等等，UART 虽然是异步，但是它速度很低，不怎么需要考虑时序的问题。所以在 FPGA 上编写一个正确的异步 SRAM 控制器是具有一定的挑战的。&lt;/p&gt;
&lt;h2 id=&#34;寄存器时序&#34;&gt;寄存器时序&lt;/h2&gt;
&lt;p&gt;考虑到读者可能已经不记得寄存器的时序了，这里首先来复习一下 setup 和 hold 的概念。如果你已经比较熟悉了，可以直接阅读下一节。&lt;/p&gt;
&lt;p&gt;寄存器在时钟的上升沿（下图的 &lt;code&gt;a&lt;/code&gt;）进行采样，为了保证采样的稳定性，输入引脚 &lt;code&gt;D&lt;/code&gt; 需要在时钟上升沿之前 \(t_{su}\) 的时刻（下图的 &lt;code&gt;b&lt;/code&gt;）到时钟上升沿之后 \(t_h\) 的时刻（下图的 &lt;code&gt;c&lt;/code&gt;）保持稳定，输出引脚 &lt;code&gt;Q&lt;/code&gt; 会在时钟上升沿之后 \(t_{cko}\) 的时刻（下图的 &lt;code&gt;d&lt;/code&gt;）变化：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;C&#34;, wave: &#34;p.&#34;, period: 4, node: &#34;.a&#34;},
      { name: &#34;D&#34;, wave: &#34;x..3.x&#34;, phase: 0.2, node: &#34;...b.c&#34;},
      { name: &#34;Q&#34;, wave: &#34;x...3.&#34;, node: &#34;....d&#34;}
    ]
}
&lt;/script&gt;
&lt;h2 id=&#34;接口&#34;&gt;接口&lt;/h2&gt;
&lt;p&gt;首先我们来看看异步 SRAM 的接口。下文中，采用 &lt;a href=&#34;https://www.issi.com/WW/pdf/61WV102416ALL.pdf&#34;&gt;IS61WV102416BLL-10TLI&lt;/a&gt; 和 &lt;a href=&#34;https://www.alliancememory.com/wp-content/uploads/pdf/sram/fa/Alliance%C2%A0Memory_4M%C2%A0Fast_SRAM_AS7C34098A_Sep2021_v2.3.pdf&#34;&gt;AS7C34098A-10TCN&lt;/a&gt; 作为例子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/sram.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，它有 20 位的地址，16 位的数据，若干个控制信号，同时只能进行读或者写（简称 &lt;code&gt;1RW&lt;/code&gt;）。它没有时钟信号，所以是异步 SRAM。&lt;/p&gt;
&lt;h2 id=&#34;时序&#34;&gt;时序&lt;/h2&gt;
&lt;p&gt;对于一个同步接口，我们通常只需要给一个满足时钟周期的时钟，然后通过约束文件保证 setup 和 hold 条件满足即可。但是对于异步接口，由于输出的时候没有时钟，我们需要更小心地完成这件事情。&lt;/p&gt;
&lt;h3 id=&#34;读时序&#34;&gt;读时序&lt;/h3&gt;
&lt;p&gt;首先来看一下比较简单的读时序：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/sram_read.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到地址和数据的关系：首先是地址需要稳定 \(t_{RC}\) 的时间，那么数据合法的范围是地址稳定的初始时刻加上 \(t_{AA}\)，到地址稳定的结束时刻加上 \(t_{OH}\)。我们再来看一下这几个时间的范围：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/sram_read_param.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先可以看到读周期时间 \(t_{RC}\) 至少是 10ns，这对应了型号中最后的数字，这表示了这个 SRAM 最快的读写速度。比较有意思的是 \(t_{AA}\) 最多是 10ns，刚好和 \(t_{RC}\) 的最小值相等。&lt;/p&gt;
&lt;p&gt;接下来我们考虑一下如何为 SRAM 控制器时序读取的功能。看到上面的波形图，大概可以想到几条设计思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先输出要读取的地址，为了让它稳定（\(t_{RC}\) 的时间内不能变化），要直接从 FPGA 内部寄存器的输出端口输出&lt;/li&gt;
&lt;li&gt;等待若干个周期，确保数据已经稳定，在满足 FPGA 内部寄存器的 setup 和 hold 约束的情况下，把结果保存在内部寄存器中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简单起见，先设置一个非常快的 SRAM 控制器频率：500MHz，每个周期 2ns，假如在 &lt;code&gt;a&lt;/code&gt; 时刻地址寄存器输出了当前要读取的地址，那么数据会在一段时间后变为合法。这里 &lt;code&gt;a-&amp;gt;b&lt;/code&gt; 是读取周期时间 \(t_{RC}\)，&lt;code&gt;a-&amp;gt;c&lt;/code&gt; 是地址到数据的延迟 \(t_{AA}\)，&lt;code&gt;b-&amp;gt;d&lt;/code&gt; 是地址改变后数据的保持时间 \(t_{OH}\)。&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clk&#34;, wave: &#34;p........&#34;, node: &#34;......e&#34;},
      { name: &#34;addr&#34;, wave: &#34;x3....xxx&#34;, node: &#34;.a....b&#34;},
      { name: &#34;data&#34;, wave: &#34;xxx4....x&#34;, node: &#34;...c....d&#34;},
    ]
}
&lt;/script&gt;
&lt;p&gt;那么根据这个图，很自然的想法是，我先给出地址，然后数周期，数了五个周期后，此时 \(t_{RC}=10\mathrm{ns}\)，然后我就在 &lt;code&gt;e&lt;/code&gt; 的上升沿上把输入数据锁存到寄存器中，例如下面的波形：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clk&#34;, wave: &#34;p........&#34;, node: &#34;......e&#34;},
      { name: &#34;addr&#34;, wave: &#34;x3....xxx&#34;, node: &#34;.a....b&#34;},
      { name: &#34;data&#34;, wave: &#34;xxx4....x&#34;, node: &#34;...c....d&#34;},
      { name: &#34;data_reg&#34;, wave: &#34;x.....4..&#34;, node: &#34;......f&#34;},
    ]
}
&lt;/script&gt;
&lt;p&gt;这个时候 &lt;code&gt;data_reg&lt;/code&gt; 的 setup 时间是 &lt;code&gt;c-&amp;gt;e&lt;/code&gt;，hold 时间是 &lt;code&gt;e-&amp;gt;d&lt;/code&gt;。从图中看起来还有很多的余量，但如果考虑最坏情况，\(t_{AA}=10\mathrm{ns}\)，就会变成下面的波形：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clk&#34;, wave: &#34;p........&#34;, node: &#34;......e&#34;},
      { name: &#34;addr&#34;, wave: &#34;x3....xxx&#34;, node: &#34;.a....b&#34;},
      { name: &#34;data&#34;, wave: &#34;x.....4.x&#34;, node: &#34;......c.d&#34;},
      { name: &#34;data_reg&#34;, wave: &#34;x.....x4.&#34;, node: &#34;.......&#34;},
    ]
}
&lt;/script&gt;
&lt;p&gt;这个时候在 &lt;code&gt;e&lt;/code&gt; 时刻不再满足 setup 约束。这个问题在仿真中，可能会“极限操作”表现为没有问题，但实际上，地址从 FPGA 到 SRAM 的延迟有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;地址寄存器从时钟上升沿到输出变化的延迟：\(T_{CKO}=0.40\mathrm{ns}\)&lt;/li&gt;
&lt;li&gt;寄存器输出到 FPGA 输出引脚的延迟：\(T_{IOOP} \in (2.56, 3.80)\mathrm{ns}\)&lt;/li&gt;
&lt;li&gt;FPGA 输出的地址信号通过信号线到 SRAM 的延迟：\(T_{PD}\)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数据从 SRAM 到 FPGA 的延迟有：&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;SRAM 数据信号通过信号线到 FPGA 的延迟：\(T_{PD}\)&lt;/li&gt;
&lt;li&gt;FPGA 的输入引脚到内部寄存器输入端的延迟：\(T_{IOPI}=1.26ns\)&lt;/li&gt;
&lt;li&gt;FPGA 内部寄存器的 setup 时间：\(T_{AS}=0.07\mathrm{ns}\)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/sram_read_diagram.drawio.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面的一些数据可以从 &lt;a href=&#34;https://docs.xilinx.com/v/u/en-US/ds181_Artix_7_Data_Sheet&#34;&gt;Artix-7 FPGA Datasheet&lt;/a&gt; 里查到，取的是速度等级 &lt;code&gt;-3&lt;/code&gt; 的数据，IO 标准是 &lt;code&gt;LVCMOS33&lt;/code&gt;。其中寄存器到 FPGA 输入输出引脚的延迟，实际上由两部分组成：从寄存器到 IOB（IO Block）的延迟，以及 IOB 到 FPGA 输入输出引脚的延迟。我们把地址寄存器的输出作为地址输出，这样 Vivado 就会把寄存器放到 IOB，于是可以忽略寄存器到 IOB 的延迟，详情可以阅读文档 &lt;a href=&#34;https://support.xilinx.com/s/article/66668?language=en_US&#34;&gt;Successfully packing a register into an IOB with Vivado&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;把上面一串加起来，已经有大概 4 到 5ns 了。考虑了延迟以后，上面的图可能实际上是这个样子：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clk_fpga&#34;, wave: &#34;p..........&#34;},
      { name: &#34;addr_fpga&#34;, wave: &#34;x3....x....&#34;},
      { name: &#34;addr_sram&#34;, wave: &#34;x.3....x....&#34;, phase: 0.3},
      { name: &#34;data_sram&#34;, wave: &#34;x......4.x..&#34;, phase: 0.3},
      { name: &#34;data_fpga&#34;, wave: &#34;x.......4.x&#34;},
    ]
}
&lt;/script&gt;
&lt;p&gt;考虑了这么多实际的延迟因素以后，会发现这个事情并不简单，需要预先估计出数据在大概什么时候稳定，这时候才能保证数据寄存器上保存的数据是正确的。&lt;/p&gt;
&lt;p&gt;转念一想，我们的 SRAM Controller 肯定不会跑在 500MHz 这么高的频率下。假如采用 100MHz，可以每两个周期进行一次读操作：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clk_fpga&#34;, wave: &#34;p...&#34;, period: 5, phase: 4.0, node: &#34;..ab&#34;},
      { name: &#34;addr_fpga&#34;, wave: &#34;x3.........5....&#34;},
      { name: &#34;addr_sram&#34;, wave: &#34;x.3.........5...&#34;, phase: 0.3},
      { name: &#34;data_sram&#34;, wave: &#34;x......4.....x..&#34;, phase: 0.3},
      { name: &#34;data_fpga&#34;, wave: &#34;x.......4.....x.&#34;},
    ]
}
&lt;/script&gt;
&lt;p&gt;此时在 &lt;code&gt;b&lt;/code&gt; 时钟上边沿对 &lt;code&gt;data_fpga&lt;/code&gt; 采样就可以保证满足时序的要求。注意这里第二个周期（上图的 &lt;code&gt;a&lt;/code&gt;）不能给出第二次读取的地址，否则稳定时间太短，不满足 hold 约束。&lt;/p&gt;
&lt;p&gt;如果频率继续降低，使得一个时钟周期大于 \(t_{AA}\) 加上各种延迟和 setup 时间，那就可以每个周期进行一次读操作：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clk_fpga&#34;, wave: &#34;p...&#34;, period: 8, phase: 7.0, node: &#34;..a.&#34;},
      { name: &#34;addr_fpga&#34;, wave: &#34;x3.......5.......7...&#34;},
      { name: &#34;addr_sram&#34;, wave: &#34;x.3.......5.......7..&#34;, phase: 0.3},
      { name: &#34;data_sram&#34;, wave: &#34;x......4....x..6...x.&#34;, phase: 0.3},
      { name: &#34;data_fpga&#34;, wave: &#34;x.......4....x..6...x&#34;},
    ]
}
&lt;/script&gt;
&lt;p&gt;此时在 &lt;code&gt;a&lt;/code&gt; 时钟上升沿上，对 &lt;code&gt;data_fpga&lt;/code&gt; 进行采样，并且输出下一次读请求的地址。&lt;/p&gt;
&lt;h3 id=&#34;写时序&#34;&gt;写时序&lt;/h3&gt;
&lt;p&gt;接下来再看看写时序。写时序涉及的信号更多，更加复杂一些，但好处是信号都是从 FPGA 到 SRAM，因此考虑延迟的时候会比较简单，比如上面读时序中需要考虑从 FPGA 到 SRAM 的地址，再从 SRAM 到 FPGA 的数据的路径。时序图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/sram_write.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个写的时序图，从时间顺序来看有这么几件事情按顺序发生：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;地址保持稳定&lt;/li&gt;
&lt;li&gt;经过 \(t_{AS}\) 时间后，写使能信号 \(\overline{WE}\) 变为低电平，表示“开始写入操作”，此时地址是稳定的&lt;/li&gt;
&lt;li&gt;经过 \(t_{WP}\) 时间后，写使能信号\(\overline{WE}\) 变为高电平，表示“结束写入操作”，此时地址和数据都是稳定的，并且数据满足 setup（\(t_{DW}\)）和 hold（\(t_{DH}\)）约束&lt;/li&gt;
&lt;li&gt;继续保持地址稳定，直到已经稳定了 \(t_{WC}\) 时间&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些数据的范围如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/sram_write_timing.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据上面的分析，还是先考虑一个 500MHz 的 SRAM 控制器。控制器要写入的话，可以按照如下的顺序操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一个周期（下图的 &lt;code&gt;a&lt;/code&gt;）先输出要写入的地址和数据，并且设置好 &lt;code&gt;ce_n&lt;/code&gt;, &lt;code&gt;oe_n&lt;/code&gt;, &lt;code&gt;we_n&lt;/code&gt;, &lt;code&gt;ub_n&lt;/code&gt; 和 &lt;code&gt;lb_n&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;第二个周期（下图的 &lt;code&gt;c&lt;/code&gt;）设置 \(\overline{WE}\) 为低电平，这是为了满足 \(t_{AS}\) （下图的 &lt;code&gt;a -&amp;gt; c&lt;/code&gt;）的条件&lt;/li&gt;
&lt;li&gt;等待若干个周期（下图的 &lt;code&gt;c -&amp;gt; d&lt;/code&gt;），直到 \(t_{WP}\) （下图的 &lt;code&gt;c -&amp;gt; d&lt;/code&gt;）和 \(t_{AW}\) （下图的 &lt;code&gt;a -&amp;gt; d&lt;/code&gt;）时间满足条件&lt;/li&gt;
&lt;li&gt;设置 \(\overline{WE}\) 为高电平（下图的 &lt;code&gt;d&lt;/code&gt;），等待若干个周期（下图的 &lt;code&gt;d -&amp;gt; b&lt;/code&gt;），直到满足图中的 \(t_{WC}\) （下图的 &lt;code&gt;a -&amp;gt; b&lt;/code&gt;）时间满足条件&lt;/li&gt;
&lt;/ol&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clock&#34;, wave: &#34;p........&#34;, node: &#34;.a.....b&#34;},
      { name: &#34;addr&#34;, wave: &#34;x3.....5.&#34;},
      { name: &#34;data&#34;, wave: &#34;x4.....6.&#34;},
      { name: &#34;we_n&#34;, wave: &#34;1.0...1.0&#34;, node: &#34;..c...d&#34;},
      { name: &#34;oe_n&#34;, wave: &#34;x1.......&#34;},
      { name: &#34;ce_n&#34;, wave: &#34;x0.......&#34;},
    ]
}
&lt;/script&gt;
&lt;p&gt;这时候你可能有点疑惑，之前分析读时序的时候，考虑了那么多延迟，为什么写的时候不考虑了？这是因为，写的时候所有的信号都是从 FPGA 输出到 SRAM 的，只要这些信号都是从寄存器直接输出，它们的延迟基本是一样的，所以在 FPGA 侧是什么波形，在 SRAM 侧也是什么波形（准确来说，数据信号因为输出是三态门，所以延迟会稍微高一点，但是由于数据信号的时序余量很大，这个额外的延迟可以忽略不计）。&lt;/p&gt;
&lt;p&gt;这时候你可能又有一个疑惑了，在阅读 Datasheet 后发现，\(t_{AS}\) 最小是 0ns，那能不能在上图的 &lt;code&gt;a&lt;/code&gt; 时刻就输出 &lt;code&gt;we_n=0&lt;/code&gt;？答案是不行，虽然从波形上来看，是在同一个时钟上升沿更新，但实际上会有一微小的延迟差距，可能导致 &lt;code&gt;we_n&lt;/code&gt; 在 &lt;code&gt;addr&lt;/code&gt; 之前变化，这时候就可能导致 SRAM 观察到的地址是不稳定的。&lt;/p&gt;
&lt;p&gt;再考虑一个比较实际的 100MHz 主频 SRAM 控制器，按照如下的波形，则是每三个周期进行一次写操作：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clock&#34;, wave: &#34;p...&#34;, period: 5, phase: 4.0},
      { name: &#34;addr&#34;, wave: &#34;x3..............5&#34;},
      { name: &#34;data&#34;, wave: &#34;x4..............6&#34;},
      { name: &#34;we_n&#34;, wave: &#34;1.....0....1.....&#34;},
      { name: &#34;oe_n&#34;, wave: &#34;x1...............&#34;},
      { name: &#34;ce_n&#34;, wave: &#34;x0...............&#34;},
    ]
}
&lt;/script&gt;
&lt;p&gt;如果觉得这样做太过保守，想要提升性能，有如下几个可能的思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;让 &lt;code&gt;we_n=0&lt;/code&gt; 在时钟下降沿输出，但是编写的时候需要比较谨慎，比如先设置一个上升沿触发的寄存器，然后用另一个寄存器在下降沿对这个寄存器进行采样，再输出。&lt;/li&gt;
&lt;li&gt;用一个更高频率的时钟驱动 &lt;code&gt;we_n&lt;/code&gt; 的寄存器。&lt;/li&gt;
&lt;li&gt;用 FPGA 提供的 &lt;code&gt;ODELAY&lt;/code&gt; 自定义输出延迟原语，设置一个固定的输出延迟，比如 1ns。&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;ODDR&lt;/code&gt; 原语，人为地添加一个大约 0.50ns 的延迟。&lt;/li&gt;
&lt;li&gt;对 &lt;code&gt;we_n&lt;/code&gt; 设置一个最小的输出延迟（设置了一个很大的 hold），并且不允许输出 &lt;code&gt;we_n&lt;/code&gt; 的寄存器放在 IOB 中（否则无法人为增加信号传播的路径长度）。约束：&lt;code&gt;set_output_delay -clock [get_clocks sram_clk] -min -5.00 [get_ports sram_we_n]&lt;/code&gt; 和 &lt;code&gt;set_property IOB FALSE [get_cells top/sram_controller/we_n_reg]&lt;/code&gt;。这里的信号和寄存器名称需要按照实际情况修改，第二个不允许放置在 IOB 的约束也可以在 Verilog 代码中用 &lt;code&gt;(* IOB = &amp;quot;FALSE&amp;quot; *)&lt;/code&gt; 来实现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;按照上面的思路实现，下面是可能达到的效果：&lt;/p&gt;
&lt;p&gt;单周期：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clock&#34;, wave: &#34;p...&#34;, period: 5, phase: 4.0},
      { name: &#34;addr&#34;, wave: &#34;x3....5....7....&#34;},
      { name: &#34;data&#34;, wave: &#34;x4....6....8....&#34;},
      { name: &#34;we_n&#34;, wave: &#34;1.0...10...10....&#34;, phase: 0.8},
      { name: &#34;oe_n&#34;, wave: &#34;x1..............&#34;},
      { name: &#34;ce_n&#34;, wave: &#34;x0..............&#34;},
    ]
}
&lt;/script&gt;
&lt;p&gt;双周期：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clock&#34;, wave: &#34;p...&#34;, period: 5.0, phase: 4.0},
      { name: &#34;addr&#34;, wave: &#34;x3.........5....&#34;},
      { name: &#34;data&#34;, wave: &#34;x4.........6....&#34;},
      { name: &#34;we_n&#34;, wave: &#34;1.0....1....0....&#34;, phase: 0.8},
      { name: &#34;oe_n&#34;, wave: &#34;x1..............&#34;},
      { name: &#34;ce_n&#34;, wave: &#34;x0..............&#34;},
    ]
}
&lt;/script&gt;
&lt;h2 id=&#34;pl241-sram-控制器&#34;&gt;PL241 SRAM 控制器&lt;/h2&gt;
&lt;p&gt;刚刚我们已经设计好了我们的 SRAM 控制器，再让我们来看看 ARM 提供的 SRAM 控制器时序是怎么样的：ARM 文档提供了 &lt;a href=&#34;https://developer.arm.com/documentation/ddi0389/b/functional-overview/smc-functional-operation/memory-interface-operation?lang=en&#34;&gt;PrimeCell AHB SRAM/NOR Memory Controller (PL241)&lt;/a&gt; 的时序图。&lt;/p&gt;
&lt;p&gt;读时序：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pl241_async_read.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;它第一个周期设置了 &lt;code&gt;ce_n=0&lt;/code&gt; 和 &lt;code&gt;addr&lt;/code&gt;，等待一个周期后，设置 &lt;code&gt;oe_n=0&lt;/code&gt;，再等待两个周期，得到数据。&lt;/p&gt;
&lt;p&gt;写时序：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pl241_async_write.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;它第一个周期设置了 &lt;code&gt;ce_n=0&lt;/code&gt; &lt;code&gt;addr&lt;/code&gt; 和 &lt;code&gt;data&lt;/code&gt;，等待一个周期后，设置 &lt;code&gt;we_n=0&lt;/code&gt;，等待两个周期，再设置 &lt;code&gt;we_n=1&lt;/code&gt;，这样就完成了写入。这和我们的实现是类似的：等待一个额外的周期，保证满足 &lt;code&gt;we_n&lt;/code&gt; 下降时地址已经是稳定的。ARM 的文档里也写了如下的备注：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The timing parameter tWC is controlling the deassertion of smc_we_n_0. You can
use it to vary the hold time of smc_cs_n_0[3:0], smc_add_0[31:0] and
smc_data_out_0[31:0]. This differs from the read case where the timing
parameter tCEOE controls the delay in the assertion of smc_oe_n_0.
Additionally, smc_we_n_0 is always asserted one cycle after smc_cs_n_0[3:0] to
ensure the address bus is valid.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.issi.com/WW/pdf/61WV102416ALL.pdf&#34;&gt;1M x 16 HIGH-SPEED ASYNCHRONOUS CMOS STATIC RAM WITH 3.3V SUPPLY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.xilinx.com/v/u/en-US/ds181_Artix_7_Data_Sheet&#34;&gt;Artix-7 FPGAs Data Sheet: DC and AC Switching Characteristics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.xilinx.com/s/question/0D52E00006iHkeRSAS/timing-constraints-for-an-asynchronous-sram-interface?language=en_US&#34;&gt;Timing constraints for an Asynchronous SRAM interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.xilinx.com/s/article/66668?language=en_US&#34;&gt;Successfully packing a register into an IOB with Vivado&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.xilinx.com/s/article/62661?language=en_US&#34;&gt;How to verify whether an I/O register is packed into IOB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.arm.com/documentation/ddi0389/b/functional-overview/smc-functional-operation/memory-interface-operation?lang=en&#34;&gt;PrimeCell AHB SRAM/NOR Memory Controller (PL241) - Memory interface operation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>「教学」ACE 缓存一致性协议</title>
      <link>https://jia.je/hardware/2022/05/16/ace/</link>
      <pubDate>Mon, 16 May 2022 00:34:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/05/16/ace/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/cache_coherence_protocol.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近几天分析了 TileLink 的缓存一致性协议部分内容，见&lt;a href=&#34;https://jia.je/hardware/2022/05/09/tilelink/&#34;&gt;TileLink 总线协议分析&lt;/a&gt;，趁此机会研究一下之前尝试过研究，但是因为缺少一些基础知识而弃坑的 ACE 协议分析。&lt;/p&gt;
&lt;p&gt;下面主要参考了 IHI0022E 的版本，也就是 AXI4 对应的 ACE 版本。&lt;/p&gt;
&lt;h2 id=&#34;回顾&#34;&gt;回顾&lt;/h2&gt;
&lt;p&gt;首先回顾一下一个缓存一致性协议需要支持哪些操作。对于较上一级 Cache 来说，它需要这么几件事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读或写 miss 的时候，需要请求这个缓存行的数据，并且更新自己的状态，比如读取到 Shared，写入到 Modified 等。&lt;/li&gt;
&lt;li&gt;写入一个 valid &amp;amp;&amp;amp; !dirty 的缓存行的时候，需要升级自己的状态，比如从 Shared 到 Modified。&lt;/li&gt;
&lt;li&gt;需要 evict 一个 valid &amp;amp;&amp;amp; dirty 的缓存行的时候，需要把 dirty 数据写回，并且降级自己的状态，比如 Modified -&amp;gt; Shared/Invalid。如果需要 evict 一个 valid &amp;amp;&amp;amp; !dirty 的缓存行，可以选择通知，也可以选择不通知下一级。&lt;/li&gt;
&lt;li&gt;收到 snoop 请求的时候，需要返回当前的缓存数据，并且更新状态。&lt;/li&gt;
&lt;li&gt;需要一个方法来通知下一级 Cache/Interconnect，告诉它第一和第二步完成了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果之前看过我的 TileLink 分析，那么上面的这些操作对应到 TileLink 就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读或写 miss 的时候，需要请求这个缓存行的数据（发送 AcquireBlock，等待 GrantData），并且更新自己的状态，比如读取到 Shared，写入到 Modified 等。&lt;/li&gt;
&lt;li&gt;写入一个 valid &amp;amp;&amp;amp; !dirty 的缓存行的时候，需要升级自己的状态（发送 AcquirePerm，等待 Grant），比如从 Shared 到 Modified。&lt;/li&gt;
&lt;li&gt;需要 evict 一个 valid &amp;amp;&amp;amp; dirty 的缓存行的时候，需要把 dirty 数据写回（发送 ReleaseData，等待 ReleaseAck），并且降级自己的状态，比如 Modified -&amp;gt; Shared/Invalid。如果需要 evict 一个 valid &amp;amp;&amp;amp; !dirty 的缓存行，可以选择通知（发送 Release，等待 ReleaseAck），也可以选择不通知下一级。&lt;/li&gt;
&lt;li&gt;收到 snoop 请求的时候（收到 Probe），需要返回当前的缓存数据（发送 ProbeAck/ProbeAckData），并且更新状态。&lt;/li&gt;
&lt;li&gt;需要一个方法（发送 GrantAck）来通知下一级 Cache/Interconnect，告诉它第一和第二步完成了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;秉承着这个思路，再往下看 ACE 的设计，就会觉得很自然了。&lt;/p&gt;
&lt;h2 id=&#34;cache-state-model&#34;&gt;Cache state model&lt;/h2&gt;
&lt;p&gt;首先来看一下 ACE 的缓存状态模型，我在之前的&lt;a href=&#34;https://jia.je/hardware/2021/12/17/cache-coherency-protocol/&#34;&gt;缓存一致性协议分析&lt;/a&gt;中也分析过，它有这么五种，就是 MOESI 的不同说法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UniqueDirty: Modified&lt;/li&gt;
&lt;li&gt;SharedDirty: Owned&lt;/li&gt;
&lt;li&gt;UniqueClean: Exclusive&lt;/li&gt;
&lt;li&gt;SharedClean: Shared&lt;/li&gt;
&lt;li&gt;Invalid: Invalid&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;文档中的定义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valid, Invalid: When valid, the cache line is present in the cache. When invalid, the cache line is not present in the cache.&lt;/li&gt;
&lt;li&gt;Unique, Shared: When unique, the cache line exists only in one cache. When shared, the cache line might exist in more than one cache, but this is not guaranteed.&lt;/li&gt;
&lt;li&gt;Clean, Dirty: When clean, the cache does not have responsibility for updating main memory. When dirty, the cache line has been modified with respect to main memory, and this cache must ensure that main memory is eventually updated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大致理解的话，Unique 表示只有一个缓存有这个缓存行，Shared 表示有可能有多个缓存有这个缓存行；Clean 表示它不负责更新内存，Dirty 表示它负责更新内存。下面的很多操作都是围绕这些状态进行的。&lt;/p&gt;
&lt;p&gt;文档中也说，它支持 MOESI 的不同子集：MESI, ESI, MEI, MOESI，所以也许在一个简化的系统里，一些状态可以不存在，实现会有所不同。&lt;/p&gt;
&lt;h2 id=&#34;channel-usage-examples&#34;&gt;Channel usage examples&lt;/h2&gt;
&lt;p&gt;到目前为止，我还没有介绍 ACE 的信号，但是我们可以尝试一下，如果我们是协议的设计者，我们要如何添加信号来完成这个事情。&lt;/p&gt;
&lt;p&gt;首先考虑上面提到的第一件事情：读或写 miss 的时候，需要请求这个缓存行的数据，并且更新自己的状态，比如读取到 Shared，写入到 Modified 等。&lt;/p&gt;
&lt;p&gt;我们知道，AXI 有 AR 和 R channel 用于读取数据，那么遇到读或者写 miss 的时候，可以在 AR channel 上捎带一些信息，让下一级的 Interconnect 知道自己的意图是读还是写，然后 Interconnect 就在 R channel 上返回数据。&lt;/p&gt;
&lt;p&gt;那么，具体要捎带什么信息呢？我们“不妨”用这样一种命名方式：&lt;code&gt;操作 + 目的状态&lt;/code&gt;，比如我读 miss 的时候，需要读取数据，进入 Shared 状态，那就叫 ReadShared；我写 miss 的时候，需要读取数据（通常写入缓存的只是一个缓存行的一部分，所以先要把完整的读进来），那就叫 ReadUnique。这个操作可以编码到一个信号中，传递给 Interconnect。&lt;/p&gt;
&lt;p&gt;再来考虑上面提到的第二件事情：写入一个 valid &amp;amp;&amp;amp; !dirty 的缓存行的时候，需要升级自己的状态，比如从 Shared 到 Modified。&lt;/p&gt;
&lt;p&gt;这个操作，需要让 Interconnect 把其他缓存中的这个缓存行数据清空，并且把自己升级到 Unique。根据上面的 &lt;code&gt;操作 + 目的状态&lt;/code&gt; 的命名方式，我们可以命名为 CleanUnique，即把其他缓存都 Clean 掉，然后自己变成 Unique。&lt;/p&gt;
&lt;p&gt;接下来考虑上面提到的第三件事情：需要 evict 一个 valid &amp;amp;&amp;amp; dirty 的缓存行的时候，需要把 dirty 数据写回，并且降级自己的状态，比如 Modified -&amp;gt; Shared/Invalid。&lt;/p&gt;
&lt;p&gt;按照前面的 &lt;code&gt;操作 + 目的状态&lt;/code&gt; 命名法，可以命名为 WriteBackInvalid。ACE 实际采用的命名是 WriteBack。&lt;/p&gt;
&lt;p&gt;终于到了第四件事情：收到 snoop 请求的时候，需要返回当前的缓存数据，并且更新状态。&lt;/p&gt;
&lt;p&gt;既然 snoop 是从 Interconnect 发给 Master，在已有的 AR R AW W B channel 里没办法做这个事情，不然会打破已有的逻辑。那不得不添加一对 channel，比如我规定一个 AC channel 发送 snoop 请求，规定一个 C channel 让 master 发送响应，这样就可以了。这就相当于 TileLink 里面的 B channel（Probe 请求）和 C channel（ProbeAck 响应）。实际 ACE 和刚才设计的实际有一些区别，把 C channel 拆成了两个：CR 用于返回所有响应，CD 用于返回那些需要数据的响应。这就像 AW 和 W 的关系，一个传地址，一个传数据；类似地，CR 传状态，CD 传数据。&lt;/p&gt;
&lt;p&gt;那么，接下来考虑一下 AC channel 上要发送什么请求呢？我们回顾一下上面已经用到的请求类型：需要 snoop 的有 ReadShared，ReadUnique 和 CleanUnique，不需要 snoop 的有 WriteBack。那我们直接通过 AC channel 把 ReadShared，ReadUnique 和 CleanUnique 这三种请求原样发送给需要 snoop 的 cache 那里就可以了。&lt;/p&gt;
&lt;p&gt;Cache 在 AC channel 收到这些请求的时候，可以做相应的动作。由于 MOESI 协议下同样的请求可以有不同的响应方法，这里就不细说了。&lt;/p&gt;
&lt;p&gt;这时候我们已经基本把 ACE 协议的信号和大题的工作流程推导出来了。哦，我们还忘了第五件事情：需要一个方法来通知下一级 Cache/Interconnect，告诉它第一和第二步完成了。TileLink 添加了一个额外的 E channel 来做这个事情，ACE 更加粗暴：直接用一对 RACK 和 WACK 信号来分别表示最后一次读和写已经完成。&lt;/p&gt;
&lt;p&gt;关于 WACK 和 RACK 详见 &lt;a href=&#34;https://community.arm.com/support-forums/f/soc-design-and-simulation-forum/9888/what-s-the-purpose-for-wack-and-rack-for-ace-and-what-s-the-relationship-with-wvalid-and-rvalid&#34;&gt;What&amp;rsquo;s the purpose for WACK and RACK for ACE and what&amp;rsquo;s the relationship with WVALID and RVALID?&lt;/a&gt; 的讨论。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;到这里就暂时不继续分析了，其他的很多请求类型是服务于更多场景，比如一次写整个 Cache Line 的话，就不需要读取已有的数据了；或者一次性读取完就不管了，或者这是一个不带缓存的加速器，DMA 等，有一些针对性的优化或者简化的处理，比如对于不带缓存的 master，可以简化为 ACE-Lite，比如 ARM 的 CCI-400 支持两个 ACE master 和 三个 ACE-Lite Master，这些 Master 可以用来接 GPU 等外设。再简化一下 ACE-Lite，就得到了 ACP（Accelerator Coherency Port）。&lt;/p&gt;
&lt;p&gt;最后我们再把文章开头的五件事对应到 ACE 上，作为一个前后的呼应：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读或写 miss 的时候，需要请求这个缓存行的数据（AR 上发送 ReadShared/ReadUnique），并且更新自己的状态，比如读取到 Shared，写入到 Modified 等。&lt;/li&gt;
&lt;li&gt;写入一个 valid &amp;amp;&amp;amp; !dirty 的缓存行的时候，需要升级自己的状态（AR 上发送 CleanUnique），比如从 Shared 到 Modified。&lt;/li&gt;
&lt;li&gt;需要 evict 一个 valid &amp;amp;&amp;amp; dirty 的缓存行的时候，需要把 dirty 数据写回（AW 上发送 WriteBack），并且降级自己的状态，比如 Modified -&amp;gt; Shared/Invalid。如果需要 evict 一个 valid &amp;amp;&amp;amp; !dirty 的缓存行，可以选择通知（AW 上发送 Evict），也可以选择不通知下一级。&lt;/li&gt;
&lt;li&gt;收到 snoop 请求的时候（AC 上收到 snoop 请求），需要返回当前的缓存数据（通过 CR 和 CD），并且更新状态。&lt;/li&gt;
&lt;li&gt;需要一个方法（读 RACK 写 WACK）来通知下一级 Cache/Interconnect，告诉它第一和第二步完成了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.arm.com/documentation/ihi0022/e/&#34;&gt;IHI0022E-AMBA AXI and ACE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>向 Rocket Chip 添加自定义调试信号</title>
      <link>https://jia.je/hardware/2022/05/13/rocket-chip-custom-debug/</link>
      <pubDate>Fri, 13 May 2022 08:35:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/05/13/rocket-chip-custom-debug/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在尝试把核心作为一个 Tile 加到 Rocket System 中，所以想要把核心之前自定义的调试信号接到顶层上去。Rocket System 自带的支持是 trace，也就是输出每个周期 retire 的指令信息，但和自定义的不大一样，所以研究了一下怎么添加自定义的调试信号，并且连接到顶层。&lt;/p&gt;
&lt;h2 id=&#34;分析-trace-信号连接方式&#34;&gt;分析 Trace 信号连接方式&lt;/h2&gt;
&lt;p&gt;首先，观察 Rocket Chip 自己使用的 Trace 信号是如何连接到顶层的。在顶层上，可以找到使用的是 &lt;code&gt;testchipip.CanHaveTraceIO&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;trait&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CanHaveTraceIO&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;HasTiles&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; module&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CanHaveTraceIOModuleImp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Bind all the trace nodes to a BB; we&amp;#39;ll use this to generate the IO in the imp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; traceNexus &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BundleBridgeNexusNode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Vec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TracedInstruction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; tileTraceNodes &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; tiles&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flatMap &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; ext_tile&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WithExtendedTraceport&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; tile &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}.&lt;/span&gt;map &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;traceNode &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tileTraceNodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foreach &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; traceNexus &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它采用了 diplomacy 的 BundleBridgeNexusNode，把每个 tile 取出来，把它的 traceNode 接到 traceNexus 上。再看一下模块 &lt;code&gt;CanHaveTraceIOModuleImp&lt;/code&gt; 是怎么实现的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;trait&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CanHaveTraceIOModuleImp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;LazyModuleImpLike&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; outer&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CanHaveTraceIO&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;HasTiles&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;implicit&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; p&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Parameters&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; traceIO &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TracePortKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; traceParams &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; extTraceSeqVec &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;outer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;traceNexus&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_1&lt;span style=&#34;color:#f92672&#34;&gt;)).&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ExtendedTracedInstruction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromVec&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; tio &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TraceOutputTop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;extTraceSeqVec&lt;span style=&#34;color:#f92672&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; tileInsts &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;outer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;traceNexus&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tileTrace&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DeclockedTracedInstruction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromVec&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tileTrace&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Since clock &amp;amp; reset are not included with the traced instruction, plumb that out manually
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;traces zip &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;outer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tile_prci_domains zip tileInsts&lt;span style=&#34;color:#f92672&#34;&gt;)).&lt;/span&gt;foreach &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;port&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;prci&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; insts&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      port&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clock &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prci&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;module&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clock
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      port&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prci&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;module&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;asBool
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      port&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insns &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; insts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tio
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它从 traceNexus 上接了若干的 trace 信号，然后通过 &lt;code&gt;IO(TraceOutputTop())&lt;/code&gt; 接到了顶层的输出信号。&lt;/p&gt;
&lt;p&gt;再来看看 Rocket 是如何连接的，首先是 &lt;code&gt;traceNode&lt;/code&gt; 的定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Node for the core to drive legacy &amp;#34;raw&amp;#34; instruction trace. */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; traceSourceNode &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BundleBridgeSource&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;traceRetireWidth&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TracedInstruction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Node for external consumers to source a legacy instruction trace from the core. */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; traceNode&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BundleBridgeOutwardNode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Vec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TracedInstruction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; traceNexus &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; traceSourceNode
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后 Rocket Tile 实现的时候，把自己的 trace 接到 traceSourceNode 上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;outer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;traceSourceNode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bundle &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; core&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;trace
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加自定义调试信号&#34;&gt;添加自定义调试信号&lt;/h2&gt;
&lt;p&gt;到这里，整个思路已经比较清晰了，我们只需要照猫画虎地做一个就行。比如要把自己的 Custom Debug 接口暴露出去，首先也是在 Tile 里面创建一个 SourceNode：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// expose debug
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; customDebugSourceNode &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BundleBridgeSource&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CustomDebug&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; customDebugNode&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BundleBridgeOutwardNode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CustomDebug&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customDebugSourceNode
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 BaseTileModuleImp 里，进行信号的连接：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// expose debug
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;outer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;customDebugSourceNode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bundle &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; core&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了暴露到顶层，我们可以类似地做。在 Subsystem 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// expose debug
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; customDebugNexus &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BundleBridgeNexusNode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CustomDebug&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; tileCustomDebugNodes &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; tiles
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flatMap &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; tile&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MeowV64Tile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;customDebugNode &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tileCustomDebugNodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foreach &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; customDebugNexus &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后在 SubsystemModule Imp 中连接到 IO：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// wire custom debug signals
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; customDebugIO &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; outer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;customDebugNexus&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; customDebug &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Vec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;customDebugIO&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; customDebugIO&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;cloneType&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; until customDebug&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  customDebug&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; customDebugIO&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就搞定了。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;找到这个实现方法，基本是对着自带的 trace 接口做的，比较重要的是理解 diplomacy 里面的两层，第一层是把不同的模块进行一些连接，然后第二层在 ModuleImp 中处理实际的信号和逻辑。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>「教学」内存认证算法</title>
      <link>https://jia.je/hardware/2022/05/10/memory-authentication/</link>
      <pubDate>Tue, 10 May 2022 20:28:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/05/10/memory-authentication/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;之前 @松 给我讲过一些内存认证（Memory Authentication）算法的内容，受益匪浅，刚好今天某硬件群里又讨论到了这个话题，于是趁此机会再学习和整理一下相关的知识。&lt;/p&gt;
&lt;p&gt;内存认证计算的背景是可信计算，比如要做一些涉及重要数据的处理，从软件上，希望即使系统被攻击非法进入了，也可以保证重要信息不会泄漏；从硬件上，希望即使系统可以被攻击者进行一些物理的操作（比如导出或者修改内存等等），也可以保证攻击者无法读取或者篡改数据。&lt;/p&gt;
&lt;p&gt;下面的内容主要参考了 &lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-3-642-01004-0_1&#34;&gt;Hardware Mechanisms for Memory Authentication: A Survey of Existing Techniques and Engines&lt;/a&gt; 这篇 2009 年的文章。&lt;/p&gt;
&lt;h2 id=&#34;威胁模型&#34;&gt;威胁模型&lt;/h2&gt;
&lt;p&gt;作为一个防御机制，首先要确定攻击方的能力。一个常见的威胁模型是认为，攻击者具有物理的控制，可以任意操控内存中的数据，但是无法读取或者修改 CPU 内部的数据。也就是说，只有 CPU 芯片内的数据是可信的，离开了芯片都是攻击者掌控的范围。一个简单的想法是让内存中保存的数据是加密的，那么怎样攻击者可以如何攻击加密的数据？下面是几个典型的攻击方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spoofing attack：把内存数据改成任意攻击者控制的数据；这种攻击可以通过签名来解决&lt;/li&gt;
&lt;li&gt;Splicing or relocation attack：把某一段内存数据挪到另一部分，这样数据的签名依然是正确的；所以计算签名时需要把地址考虑进来，这样地址变了，验证签名就会失败&lt;/li&gt;
&lt;li&gt;Replay attack：如果同一个地址的内存发生了改变，攻击者可以把旧的内存数据再写进去，这样签名和地址都是正确的；为了防止重放攻击，还需要引入计数器或者随机 nonce&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;authentication-primitives&#34;&gt;Authentication Primitives&lt;/h2&gt;
&lt;p&gt;为了防御上面几种攻击方法，上面提到的文章里提到了如下的思路：&lt;/p&gt;
&lt;p&gt;一是 Hash Function，把内存分为很多个块，每一块计算一个密码学 Hash 保存在片内，那么读取数据的时候，把整块数据读取进来，计算一次 Hash，和片内保存的结果进行比对；写入数据的时候，重新计算一次修改后数据的 Hash，更新到片内的存储。这个方法的缺点是没有加密，攻击者可以看到内容，只不过一修改就会被 CPU 发现（除非 Hash 冲突），并且存储代价很大：比如 512-bit 的块，每一块计算一个 128-bit 的 Hash，那就浪费了 25% 的空间，而片内空间是十分宝贵的。&lt;/p&gt;
&lt;p&gt;二是 MAC Function，也就是密码学的消息验证码，它需要一个 Key，保存在片内；由于攻击者不知道密码，根据 MAC 的性质，攻击者无法篡改数据，也无法伪造 MAC，所以可以直接把计算出来的 MAC 也保存到内存里。为了防御重放攻击，需要引入随机的 nonce，并且把 nonce 保存在片内，比如每 512-bit 的数据，保存 64-bit 的 nonce，这样片内需要保存 12.5% 的空间，依然不少。MAC 本身也不加密，所以如果不希望攻击者看到明文，还需要进行加密。&lt;/p&gt;
&lt;p&gt;三是 Block-Level AREA，也就是在把明文和随机的 nonce 拼接起来，采用块加密算法，保存在内存中；解密的时候，验证最后的 nonce 和片内保存的一致。这个方法和 MAC 比较类似，同时做了加密的事情，也需要在片内保存每块数据对应的随机 nonce。&lt;/p&gt;
&lt;h2 id=&#34;integrity-tree&#34;&gt;Integrity Tree&lt;/h2&gt;
&lt;p&gt;但是上面几种方法开销都比较大，比如要保护 1GB 的内存，那么片内就要保存几百 MB 的数据，这对于片内存储来说太大了。这时候，可以采用区块链里常用的 Merkle Tree 或者类似的方法来用时间换空间。&lt;/p&gt;
&lt;p&gt;这种方法的主要思路是，首先把内存划分为很多个块，这些块对应一颗树的叶子结点；自底向上构建一颗树，每个结点可以验证它的子结点的完整性，那么经过 log(n) 层的树，最后只会得到一个很小的根结点，只需要把根结点保存在片内。&lt;/p&gt;
&lt;p&gt;为了验证某一个块的完整性，就从这一块对应的叶子结点开始，不断计算出一个值，和父亲结点比较；再递归向上，最后计算出根结点的值，和片内保存的值进行对比。这样验证的复杂度是 O(logn)，但是片内保存的数据变成了 O(1)，所以是以时间换空间。更新数据的时候，也是类似地从叶子结点一步一步计算，最后更新根结点的值。&lt;/p&gt;
&lt;p&gt;这个方法浪费的空间，考虑所有非叶子结点保存的数据，如果是二叉树，总的大小就是数据的一半，但是好处是大部分都可以保存在内存里，所以是比较容易实现的。缺点是每次读取和写入都要进行 O(logn) 次的内存访问和计算，开销比较大。&lt;/p&gt;
&lt;p&gt;上面提到的父结点的值的计算方法，如果采用密码学 Hash 函数，这棵树就是 Merkle Tree。它的验证过程是只读的，可以并行的，但是更新过程是串行的，因为要从子结点一步一步计算 Hash，父结点依赖子结点的 Hash 结果。&lt;/p&gt;
&lt;p&gt;另一种设计是 Parallelizable Authentication Tree（PAT），它采用 MAC 而不是 Hash，每个结点保存了一个随机的 nonce 和计算出来的 MAC 值，最底层的 MAC 输入是实际的数据，其他层的 MAC 输入是子结点的 nonce，最后在片内保存最后一次 MAC 使用的 nonce 值。这样的好处是更新的时候，每一层都可以并行算，因为 MAC 的输入是 nonce 值，不涉及到子结点的 MAC 计算结果。缺点是要保存更多数据，即 MAC 和 nonce。&lt;/p&gt;
&lt;p&gt;还有一种设计是 Tamper-Evident Counter Tree（TEC-Tree），计算的方法则是上面提到的 Block-level AREA。类似地，最底层是用数据和随机 nonce 拼起来做加密，而其他层是用子节点的随机 nonce 拼起来，再拼接上这一层的 nonce 做加密。验证的时候，首先对最底层进行解密，然后判断数据是否匹配，然后再解密上一层，判断 nonce 是否匹配，一直递归，最后解密到根的 nonce，和片内保存的进行匹配。更新的时候，也可以类似地一次性生产一系列的 nonce，然后并行地加密每一层的结果。&lt;/p&gt;
&lt;p&gt;最后引用文章里的一个对比：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/memory_integrity.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，后两种算法可以并行地更新树的节点，同时也需要保存更多的数据。&lt;/p&gt;
&lt;h2 id=&#34;cached-trees&#34;&gt;Cached Trees&lt;/h2&gt;
&lt;p&gt;从上面的 Integrity Tree 算法可以发现，每次读取或者写入都要访问内存 O(logn) 次，这个对性能影响是十分巨大的。一个简单的思路是，我把一些经常访问的树结点保存在片内的缓存，这样就可以减少一些内存访问次数；进一步地，如果认为攻击者无法篡改片内的缓存，那就可以直接认为片内的结点都是可信的，在验证和更新的时候，只需要从叶子结点遍历到缓存在片内的结点即可。&lt;/p&gt;
&lt;h2 id=&#34;the-bonsai-merkle-tree&#34;&gt;The Bonsai Merkle Tree&lt;/h2&gt;
&lt;p&gt;为了进一步减少空间的占用，Bonsai Merkle Tree（BMT）的思路是，既然对每个内存块都生成一个比较长的（比如 64 位）的 nonce 比较耗费空间，那是否可以减少一下 nonce 的位数，当 nonce 出现重复的时候，换一个密钥重新加密呢？具体的做法是，每个内存块做一次 MAC 计算，输入是数据，地址和 counter：&lt;code&gt;M=MAC(C, addr, ctr)&lt;/code&gt;。此时，地址和 &lt;code&gt;ctr&lt;/code&gt; 充当了原来的 nonce 的作用，所以类似地，此时的 Merkle Tree 保护的是这些 counter，由于 counter 位数比较少，就可以进一步地减少空间的开销，而且树的层数也更少了。缺点是既然位数少了，如果 counter 出现了重复，就需要更换密钥，重新进行一次加密，这个比较耗费时间，所以还要尽量减少重新加密的次数。&lt;/p&gt;
&lt;p&gt;具体来说，为了避免重放攻击，每次更新数据的时候，就让 counter 加一，这和原来采用一个足够长（比如 64-bit）的随机 nonce 是类似的。重新加密是很耗费时间的，因此为了把重新加密的范围局限到一个小的局部，又设计了一个两级的 counter：7-bit 的 local counter，每次更新数据加一；64-bit 的 global counter，当某一个 local counter 溢出的时候加一。这时候实际传入 MAC 计算的 counter 则是 global counter 拼接上 local counter。这样相当于是做了一个 counter 的共同前缀，在内存访问比较均匀的时候，比如每个 local counter 轮流加一，那么每次 local counter 溢出只需要重新加密一个小范围的内存，减少了开销。&lt;/p&gt;
&lt;p&gt;文章后续还提到了一些相关的算法，这里就不继续翻译和总结了。&lt;/p&gt;
&lt;h2 id=&#34;mountable-merkle-tree&#34;&gt;Mountable Merkle Tree&lt;/h2&gt;
&lt;p&gt;再来看一下 &lt;a href=&#34;https://www.usenix.org/system/files/osdi21-feng.pdf&#34;&gt;Scalable Memory Protection in the Penglai Enclave&lt;/a&gt; 中提到的 Mountable Merkle Tree 设计。它主要考虑的是动态可变的保护内存区域，比如提到的微服务场景，并且被保护内存区域的访问有时间局部性，因此它的思路是，不去构造一个对应完整内存的 Merkle Tree，而是允许一些子树不存在。具体来说，它设计了一个 Sub-root nodes 的概念，对应了 Merkle Tree 中间的一层。这一层往上是预先分配好的，并且大部分保存在内存中，根结点保存在片内，这一层往下是动态分配的。比如应用创建了一个新的 enclave，需要新的一个被保护的内存区域，再动态分配若干个 Merkle Tree，接到 Sub-root nodes 层，成为新的子树。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/mountable_merkle_tree.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于片内空间是有限的，所以这里采取了缓存的方式，只把一部分常用的树结点保存在片内；如果某一个子树一直没有被访问，就可以换出到内存里。如果删除了一个已有的 enclave，那么相应的子树就可以删掉，减少内存空间的占用。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-3-642-01004-0_1&#34;&gt;Hardware Mechanisms for Memory Authentication: A Survey of Existing Techniques and Engines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.usenix.org/system/files/osdi21-feng.pdf&#34;&gt;Scalable Memory Protection in the Penglai Enclave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>TileLink 总线协议分析</title>
      <link>https://jia.je/hardware/2022/05/09/tilelink/</link>
      <pubDate>Mon, 09 May 2022 16:15:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/05/09/tilelink/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/cache_coherence_protocol.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在研究一些支持缓存一致性的缓存的实现，比如 rocket-chip 的实现和 sifive 的实现，因此需要研究一些 TileLink 协议。本文讨论的时候默认读者具有一定的 AXI 知识，因此很多内容会直接参考 AXI。&lt;/p&gt;
&lt;h2 id=&#34;信号&#34;&gt;信号&lt;/h2&gt;
&lt;p&gt;根据 &lt;a href=&#34;https://github.com/chipsalliance/omnixtend/blob/master/OmniXtend-1.0.3/spec/TileLink-1.8.0.pdf&#34;&gt;TileLink Spec 1.8.0&lt;/a&gt;，TileLink 分为以下三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TL-UL: 只支持读写，不支持 burst，类比 AXI-Lite&lt;/li&gt;
&lt;li&gt;TL-UH：支持读写，原子指令，预取，支持 burst，类比 AXI+ATOP（AXI5 引入的原子操作）&lt;/li&gt;
&lt;li&gt;TL-C：在 TL-UH 基础上支持缓存一致性协议，类比 AXI+ACE/CHI&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tilelink-uncached&#34;&gt;TileLink Uncached&lt;/h2&gt;
&lt;p&gt;TileLink Uncached(TL-UL 和 TL-UH) 包括了两个 channel：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A channel: M-&amp;gt;S 发送请求，类比 AXI 的 AR/AW/W&lt;/li&gt;
&lt;li&gt;D channel: S-&amp;gt;M 发送响应，类比 AXI 的 R/W&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此 TileLink 每个周期只能发送读或者写的请求，而 AXI 可以同时在 AR 和 AW channel 上发送请求。&lt;/p&gt;
&lt;p&gt;一些请求的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读：M-&amp;gt;S 在 A channel 上发送 Get，S-&amp;gt;M 在 D channel 上发送 AccessAckData&lt;/li&gt;
&lt;li&gt;写：M-&amp;gt;S 在 A channel 上发送 PutFullData/PutPartialData，S-&amp;gt;M 在 D channel 是发送 AccessAck&lt;/li&gt;
&lt;li&gt;原子操作：M-&amp;gt;S 在 A channel 上发送 ArithmeticData/LogicalData，S-&amp;gt;M 在 D channel 上发送 AccessAckData&lt;/li&gt;
&lt;li&gt;预取操作：M-&amp;gt;S 在 A channel 上发送 Intent，S-&amp;gt;M 在 D channel 上发送 AccessAck&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;axi4totl&#34;&gt;AXI4ToTL&lt;/h2&gt;
&lt;p&gt;针对 &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/blob/850e1d5d56989f031fe3e7939a15afa1ec165d64/src/main/scala/amba/axi4/ToTL.scala#L59&#34;&gt;AXI4ToTL&lt;/a&gt; 模块的例子，来分析一下如何把一个 AXI4 Master 转换为 TileLink。&lt;/p&gt;
&lt;p&gt;首先考虑一下 AXI4 和 TileLink 的区别：一个是读写 channel 合并了，所以这里需要一个 Arbiter；其次 AXI4 中 AW 和 W 是分开的，这里也需要进行合并。这个模块并不考虑 Burst 的情况，而是由 &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/blob/850e1d5d56989f031fe3e7939a15afa1ec165d64/src/main/scala/amba/axi4/Fragmenter.scala#L14=&#34;&gt;AXI4Fragmenter&lt;/a&gt; 来进行拆分，即添加若干个 AW beat，和 W 进行配对。&lt;/p&gt;
&lt;p&gt;具体到代码实现上，首先把 AR channel &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/blob/850e1d5d56989f031fe3e7939a15afa1ec165d64/src/main/scala/amba/axi4/ToTL.scala#L86=&#34;&gt;对应到&lt;/a&gt; 到 A channel 上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; r_out &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Wire&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r_out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r_out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;edgeOut.Get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;r_id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r_addr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; r_size&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;_2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后 AW+W channel 也&lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/blob/850e1d5d56989f031fe3e7939a15afa1ec165d64/src/main/scala/amba/axi4/ToTL.scala#L119=&#34;&gt;连接&lt;/a&gt; 到 A channel，由于不用考虑 burst 的情况，这里在 aw 和 w 同时 valid 的时候才认为有请求。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; w_out &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Wire&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w_out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready  &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w_out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;w_out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;w_out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;edgeOut.Put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;w_id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;w_addr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; w_size&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strb&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;_2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比较有意思的是读写的 id 增加了若干位，最低位 0 表示读，1 表示写，剩下几位是请求编号，这样发出去的是不同 id 的多个请求。&lt;/p&gt;
&lt;p&gt;然后，把读和写的 A channel &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/blob/850e1d5d56989f031fe3e7939a15afa1ec165d64/src/main/scala/amba/axi4/ToTL.scala#L155=&#34;&gt;连接&lt;/a&gt;到 Arbiter 上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TLArbiter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TLArbiter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roundRobin&lt;span style=&#34;color:#f92672&#34;&gt;)(&lt;/span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; r_out&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;len&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; w_out&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其余的部分则是对 D channel 进行判断，有数据的转给 R channel，没有数据的转给 B channel：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mux&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;d_hasData&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ok_r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ok_b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ok_r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; d_hasData
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ok_b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;d_hasData
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后处理了一下 TileLink 和 AXI4 对写请求返回确认的区别：TileLink 中，可以在第一个 burst beat 就返回确认，而 AXI4 需要在最后一个 burst beat 之后返回确认。&lt;/p&gt;
&lt;h2 id=&#34;tltoaxi4&#34;&gt;TLToAXI4&lt;/h2&gt;
&lt;p&gt;再来看一下反过来的转换，从 TileLink Master 到 AXI。由于 TileLink 同时只能进行读或者写，所以它首先做了一个虚构的 arw channel，可以理解为合并了 ar 和 aw channel 的 AXI4，这个设计在 SpinalHDL 的代码中也能看到。然后再根据是否是写入，分别&lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/blob/850e1d5d56989f031fe3e7939a15afa1ec165d64/src/main/scala/tilelink/ToAXI4.scala#L153=&#34;&gt;连接&lt;/a&gt;到 ar 和 aw channel：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; queue_arw &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;irrevocable&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;out_arw&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; entries&lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt;depth&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; flow&lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt;combinational&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue_arw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue_arw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue_arw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue_arw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;wen
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue_arw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  queue_arw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;wen
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;queue_arw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mux&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;queue_arw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;wen&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/blob/850e1d5d56989f031fe3e7939a15afa1ec165d64/src/main/scala/tilelink/ToAXI4.scala#L197=&#34;&gt;这里&lt;/a&gt;处理了 aw 和 w 的 valid 信号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;stall &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mux&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a_isPut&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;doneAW &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; out_arw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; out_w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; out_arw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out_arw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;stall &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mux&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a_isPut&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;doneAW &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; out_w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out_w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;stall &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; a_isPut &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;doneAW &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; out_arw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样做的原因是，在 TileLink 中，每个 burst 都是一个 a channel 上的请求，而 AXI4 中，只有第一个 burst 有 aw 请求，所有 burst 都有 w 请求，因此这里用 doneAW 信号来进行区分。&lt;/p&gt;
&lt;p&gt;接着，要把 b 和 r channel 上的结果连接到 d channel，根据上面的经验，&lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/blob/850e1d5d56989f031fe3e7939a15afa1ec165d64/src/main/scala/tilelink/ToAXI4.scala#L205=&#34;&gt;这里&lt;/a&gt; 又是一个 arbitration：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; r_wins &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b_delay &lt;span style=&#34;color:#f92672&#34;&gt;=/=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; r_holds_d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; r_wins
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;r_wins
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mux&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;r_wins&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后还处理了一下请求和结果顺序的问题。&lt;/p&gt;
&lt;h2 id=&#34;tilelink-cached&#34;&gt;TileLink Cached&lt;/h2&gt;
&lt;p&gt;上面说的两个模块都是 TileLink Uncached，那么它如何支持缓存一致性呢？首先，它引入了三个 channel：B、C 和 E，支持三种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acquire：M-&amp;gt;S 在 A channel 上发送 Acquire，S-&amp;gt;M 在 D channel 上发送 Grant，然后 M-&amp;gt;S 在 E channel 上发送 GrantAck；功能是获取一个 copy，可以看到这个和 Get 是类似的，都是在 A channel 上发送请求，在 D channel 上接受响应，只不过额外需要在 E channel 上发送 GrantAck。&lt;/li&gt;
&lt;li&gt;Release：M-&amp;gt;S 在 C channel 上发送 Release，S-&amp;gt;M 在 D channel 上发送 ReleaseAck；功能是删除自己的 copy，一般是缓存行要被换出的时候，发送 ReleaseData 来写回 Dirty 数据&lt;/li&gt;
&lt;li&gt;Probe：S-&amp;gt;M 在 B channel 上发送 Probe，M-&amp;gt;S 在 C channel 上发送 ProbeAck；功能是要求 M 删除自己的 copy，通常是有某一个缓存发送了 Acquire，导致其他缓存需要降低权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，A C E 三个 channel 是 M-&amp;gt;S，B D 两个 channel 是 S-&amp;gt;M。&lt;/p&gt;
&lt;p&gt;假如一个缓存（Master A）要写入一块只读数据，或者读取一块 miss 的缓存行，如果是广播式的缓存一致性协议，那么需要经历如下的过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Master A -&amp;gt; Slave: Acquire&lt;/li&gt;
&lt;li&gt;Slave -&amp;gt; Master B: Probe&lt;/li&gt;
&lt;li&gt;Master B -&amp;gt; Slave: ProbeAck&lt;/li&gt;
&lt;li&gt;Slave -&amp;gt; Master A: Grant&lt;/li&gt;
&lt;li&gt;Master A -&amp;gt; Slave: GrantAck&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先 Master A 发出 Acquire 请求，然后 Slave 向其他 Master 广播 Probe，等到其他 Master 返回 ProbeAck 后，再向 Master A 返回 Grant，最后 Master A 发送 GrantAck 给 Slave。这样 Master A 就获得了这个缓存行的一份拷贝，并且让 Master B 的缓存行失效或者状态变成只读。&lt;/p&gt;
&lt;p&gt;TileLink 的缓存行有三个状态：None，Branch 和 Trunk(Tip)。基本对应 MSI 模型：None-&amp;gt;Invalid，Branch-&amp;gt;Shared 和 Trunk-&amp;gt;Modified。Rocket Chip 代码中 &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/blob/850e1d5d56989f031fe3e7939a15afa1ec165d64/src/main/scala/tilelink/Metadata.scala#L10=&#34;&gt;ClientStates&lt;/a&gt; 还定义了 Dirty 状态，大致对应 MESI 模型：None-&amp;gt;Invalid，Branch-&amp;gt;Shared，Trunk-&amp;gt;Exclusive，Dirty-&amp;gt;Modified。&lt;/p&gt;
&lt;p&gt;此外，标准还说可以在 B 和 C channel 上进行 TL-UH 的操作。标准这么设计的意图是可以让 Slave 转发操作到拥有缓存数据的 Master 上。比如 Master A 在 A channel 上发送 Put 请求，那么 Slave 向 Master B 的 B channel 上发送 Put 请求，Master B 在 C channel 上发送 AccessAck 响应，Slave 再把响应转回 Master A 的 D channel。这就像是一个片上的网络，Slave 负责在 Master 之间路由请求。&lt;/p&gt;
&lt;h2 id=&#34;broadcast&#34;&gt;Broadcast&lt;/h2&gt;
&lt;p&gt;接下来看看 Rocket Chip 自带的基于广播的缓存一致性协议实现。核心实现是 &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/blob/850e1d5d56989f031fe3e7939a15afa1ec165d64/src/main/scala/tilelink/Broadcast.scala&#34;&gt;TLBroadcast&lt;/a&gt;，核心的逻辑就是，如果一个 Master A 发送了 Acquire，那么 TLBroadcast 需要发送 Probe 到其他的 Master，当其他的 Master 都响应了 ProbeAck 后，再返回 Grant 到 Master A。&lt;/p&gt;
&lt;p&gt;首先来看 B channel 上的 Probe &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/blob/850e1d5d56989f031fe3e7939a15afa1ec165d64/src/main/scala/tilelink/Broadcast.scala#L214=&#34;&gt;逻辑&lt;/a&gt;。它记录了一个 todo bitmask，表示哪些 Master 需要发送 Probe，这里采用了 Probe Filter 来减少发送 Probe 的次数，因为只需要向拥有这个缓存行的 Master 发送 Probe：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; probe_todo &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RegInit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;U&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; caches&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; probe_line &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Reg&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; probe_perms &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Reg&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; probe_next &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; probe_todo &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~(&lt;/span&gt;leftOR&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;probe_todo&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; probe_busy &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; probe_todo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;orR&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; probe_target &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;caches&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;U &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mux1H&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;probe_next&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cache_targets&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Probe whatever the FSM wants to do next
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; probe_busy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;caches&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edgeIn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Probe&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;probe_line &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; lineShift&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; probe_target&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; lineShift&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;U&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; probe_perms&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;_2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;when &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fire&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; probe_todo &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; probe_todo &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;probe_next &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里 &lt;code&gt;probe_next&lt;/code&gt; 就是被 probe 的那个 Master 对应的 bitmask，&lt;code&gt;probe_target&lt;/code&gt; 就是 Master 的 Id。这个 Probe FSM 的输入就是 Probe Filter，它会&lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/blob/850e1d5d56989f031fe3e7939a15afa1ec165d64/src/main/scala/tilelink/Broadcast.scala#L256=&#34;&gt;给出&lt;/a&gt;哪些 Cache 拥有当前的缓存行的信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; leaveB &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;filter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;needT &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;filter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gaveT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; others &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; filter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cacheOH &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;filter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;allocOH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; todo &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mux&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;leaveB&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;U&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; others&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;probe_busy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;when &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;filter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fire&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	probe_todo  &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; todo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	probe_line  &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; filter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; lineShift
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	probe_perms &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mux&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;filter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;needT&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TLPermissions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;toN&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TLPermissions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;toB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里又区分两种情况：如果 Acquire 需要进入 Trunk 状态（比如是个写入操作），意味着其他 Master 需要进入 None 状态，所以这里要发送 toN；如果 Acquire 不需要进入 Trunk 状态（比如是个读取操作），那么只需要其他 Master 进入 Branch 状态，所以这里要发送 toB。&lt;/p&gt;
&lt;p&gt;在 B channel 发送 Probe 的同时，也要&lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/blob/850e1d5d56989f031fe3e7939a15afa1ec165d64/src/main/scala/tilelink/Broadcast.scala#L152=&#34;&gt;处理&lt;/a&gt; C channel 上的 ProbeAck 和 ProbeAckData：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Incoming C can be:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ProbeAck     =&amp;gt; decrement tracker, drop 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ProbeAckData =&amp;gt; decrement tracker, send out A as PutFull(DROP)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ReleaseData  =&amp;gt;                    send out A as PutFull(TRANSFORM)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Release      =&amp;gt; send out D as ReleaseAck
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于这里采用的是 invalidation based，所以如果某个 Master 之前处于 Dirty 状态，那么它会发送 ProbeAckData，此时需要把数据写回，所以需要用 PutFull 把数据写出去。&lt;/p&gt;
&lt;h2 id=&#34;serialization&#34;&gt;Serialization&lt;/h2&gt;
&lt;p&gt;下面来讨论一下 TileLink 对各组信号的一些要求。&lt;/p&gt;
&lt;h3 id=&#34;flow-control-rules&#34;&gt;Flow Control Rules&lt;/h3&gt;
&lt;p&gt;首先是 Flow Control Rules，讨论的是 ready 和 valid 信号的关系，目的是防止死锁。首先是两个比较常规的要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If ready is LOW, the receiver must not process the beat and the sender must not consider the beat processed.&lt;/li&gt;
&lt;li&gt;If valid is LOW, the receiver must not expect the control or data signals to be a syntactically correct TileLink beat.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个说的就是 valid &amp;amp; ready 的时候才认为是一个 beat 处理了，第二个就是如果 valid=LOW，那么信号可能是随机的、不合法的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;valid must never depend on ready. If a sender wishes to send a beat, it must assert valid independently of whether the receiver signals that it is ready.&lt;/li&gt;
&lt;li&gt;As a consequence, there must be no combinational path from ready to valid or any of the control and data signals.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里是为了防止组合逻辑出现环路，如果 valid 依赖 ready，ready 依赖 valid，就会出现问题，所以这里规定，valid 不能依赖 ready，反过来只能 ready 依赖 valid。类似地，其他的数据和控制信号也不可以依赖 ready。简单理解就是 sender 要主动提供数据，而 receiver 决定了是否接受。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A low priority valid may not combinationally depend on a high priority valid. In other words, the decision to send a request may not be based on receiving a response in the same cycle.&lt;/li&gt;
&lt;li&gt;A high priority ready may not combinationally depend on a low priority ready. In other words, acceptance of a response may not be made contingent upon a request being accepted the same cycle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两条的意思是，同一个周期内，我设置发送的请求的 valid，不能依赖于同一个周期内接受到的响应的 valid，比如 A 的 valid 不能组合依赖于 D 的 valid。另一方面，我设置的响应的 ready 不能依赖于同一个周期内的请求，比如 D 的 ready 不能组和依赖于 A 的 ready。&lt;/p&gt;
&lt;p&gt;那么，有这么几种用法是可以的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is acceptable for a receiver to drive ready in response to valid or any of the control and data signals. For example, an arbiter may lower ready if a valid request is made for an address which is busy. However, whenever possible, it is recommended that ready be driven independently so as to reduce the handshaking circuit depth. 接收方可以让 ready 依赖于 valid 或者其他的控制和数据信号，不过这样会让组合逻辑比较长。&lt;/li&gt;
&lt;li&gt;A channel may change valid and all control and data signals based on the value of ready in the prior cycle. For example, after a request has been accepted (ready HIGH), a new request may be presented. Only a same-cycle dependency of valid on ready is forbidden. 可以让当前周期的 valid 依赖于上一个周期的 ready 信号，只是不能有同周期的 valid 对 ready 的依赖。&lt;/li&gt;
&lt;li&gt;A device may legally drive valid for a response based on valid of a request in the same cycle. For example, a combinational ROM which answers immediately. In this case, presumably ready for the request will likewise be driven by ready for the response. The converse relationship is forbidden. 设备可以让响应的 valid 依赖请求的 valid，比如一个组合的 ROM，它的 D channel 的 valid 可以组合依赖于 A channel 的 valid，同时 A channel 的 ready 组合依赖于 D channel 的 ready。这样就简化了设备的设计，并且可以无延迟地进行访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和 AXI 不同的一点在于，TileLink 不要求 irrevocable，也就是说如果一个周期内 valid=HIGH 但是 ready=LOW，那么下一个周期 Master 可以修改控制和数据信号，也可以让 valid=LOW。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Note that a sender may raise valid and then lower it on the following
cycle, even if the message was not accepted on the previous cycle. For example,
the sender might have some other higher priority task to perform on the
following cycle, instead of trying to send the rejected message again.
Furthermore, the sender may change the contents of the control and data signals
when a message was not accepted.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TileLink 的 burst 请求是通过比 bus 更宽的 size 的多个 beat 组成的。一旦第一个 beat fire 了，后续只能发送同一个 burst 的数据，不可以交错。&lt;/p&gt;
&lt;h3 id=&#34;request-response-message-ordering&#34;&gt;Request-Response Message Ordering&lt;/h3&gt;
&lt;p&gt;这里讨论的是请求和响应的顺序关系。TileLink 规定，响应的第一个 beat 不早于第一个请求的 beat，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 Get 请求，如果响应需要多个 beat，那么第一个 beat 不早于请求的那一个周期，这个比较常规，意思是可以组合返回响应。&lt;/li&gt;
&lt;li&gt;对于 Put 请求，如果请求需要多个 beat，那么响应可以在第一个请求的 beat 的周期，这个比较特别，意思是对于多个 beat 的请求，可以立即返回响应，不需要等到所有请求的 beat 完成。&lt;/li&gt;
&lt;li&gt;对于 ArithmeticData 请求，响应和请求都可能有多个 beat，那么响应的第一个 beat 不早于请求的第一个 beat 即可，其他没有顺序要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deadlock-freedom&#34;&gt;Deadlock Freedom&lt;/h3&gt;
&lt;p&gt;那么多规则，一个很重要的目的是要防止死锁。为了防止死锁，有这样三条：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The agent graph (Section 5.3) contains no cycles&lt;/li&gt;
&lt;li&gt;Agents must eventually present all beats of a received message&lt;/li&gt;
&lt;li&gt;Unless they have a higher priority message in flight or unanswered
&lt;ol&gt;
&lt;li&gt;Agents must eventually accept a presented beat&lt;/li&gt;
&lt;li&gt;Agents must eventually answer a received request message&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大概意思是，beat 不能无限推迟，无论是发送方还是接受方。对于每个请求，它的响应不能无限推迟。&lt;/p&gt;
&lt;p&gt;TileLink 定义了各个 channel 的优先级，从低到高是 &lt;code&gt;A&amp;lt;B&amp;lt;C&amp;lt;D&amp;lt;E&lt;/code&gt;。对于同一个 channel，A C E 上是 master/sender 优先级更高，B D 上是 slave/receiver 优先级更高。&lt;/p&gt;
&lt;p&gt;TileLink 的设计里保证了，每个请求的响应都比请求优先级更高。比如 A channel 的请求（Get/Put/AcquireBlock）的响应在 D channel（AccessAckData/AccessAck/Grant），B channel 的请求（Probe）的响应在 C channel（ProbeAck），C channel 的请求（Release）的响应在 D channel（ReleaseAck），D channel 的请求（Grant）的响应在 E channel（GrantAck）。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chipsalliance/omnixtend/blob/master/OmniXtend-1.0.3/spec/TileLink-1.8.0.pdf&#34;&gt;TileLink spec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chipsalliance/rocket-chip&#34;&gt;rocket-chip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>NUC11 ESXi 中 iGPU 直通虚拟机</title>
      <link>https://jia.je/system/2022/05/05/nuc11-igpu-passthrough/</link>
      <pubDate>Thu, 05 May 2022 10:24:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2022/05/05/nuc11-igpu-passthrough/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;之前在 NUC11PAKi5 上装了 ESXI 加几个虚拟机系统，但是自带的 iGPU Intel Iris Xe Graphics(Tiger Lake GT-2) 没用上，感觉有些浪费。因此想要给 Windows 直通。在直通到 Windows 后发现会无限重启，最后直通到 Linux 中。&lt;/p&gt;
&lt;h2 id=&#34;步骤&#34;&gt;步骤&lt;/h2&gt;
&lt;p&gt;第一步是到 esxi 的设备设置的地方，把 iGPU 的 Passthrough 打开，这时候会提示需要重启，但是如果重启，会发现还是处于 Needs reboot 状态。网上进行搜索，发现是 ESXi 自己占用了 iGPU 的输出，&lt;a href=&#34;https://williamlam.com/2020/06/passthrough-of-integrated-gpu-igpu-for-standard-intel-nuc.html&#34;&gt;解决方法&lt;/a&gt;如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ esxcli system settings kernel set -s vga -v FALSE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样设置以后就不会在显卡输出上显示 dcui 了，这是一个比较大的缺点，但是平时也不用自带的显示输出，就无所谓了。&lt;/p&gt;
&lt;p&gt;第二步，重启以后，这时候看设备状态就是 Active。回到 Windows 虚拟机，添加 PCI device，然后启动。这时候，我遇到了这样的错误：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Module ‘DevicePowerOn’ power on failed
Failed to register the device pciPassthru0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;搜索了一番，&lt;a href=&#34;https://shuttletitan.com/vsphere/pci-passthrough-module-devicepoweron-power-on-failed/&#34;&gt;解决方法&lt;/a&gt;是关掉 IOMMU。在虚拟机设计中关掉 IOMMU，就可以正常启动了。&lt;/p&gt;
&lt;p&gt;第三步，进入 Windows，这时候就可以看到有一个新的未知设备了，VID=8086，PID=9a49；等待一段时间，Windows 自动安装好了驱动，就可以正常识别了。GPU-Z 中可以看到效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/igpu-passthrough.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;不过关机重启的时候会蓝屏，可能还有一些问题，有人在&lt;a href=&#34;https://community.intel.com/t5/Graphics/SR-IOV-support-for-intel-Iris-Xe-Graphics-on-i7-1165G7/td-p/1293264&#34;&gt;论坛&lt;/a&gt;上也说 passthrough 之后会蓝屏。这个问题一直没有解决。&lt;/p&gt;
&lt;p&gt;再尝试 Passthrough 到 Linux：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo dmesg | grep i915
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    2.173500&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; i915 0000:13:00.0: enabling device &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000&lt;/span&gt; -&amp;gt; 0003&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    2.180137&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; i915 0000:13:00.0: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;drm&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; VT-d active &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; gfx access
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    2.182109&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; i915 0000:13:00.0: BAR 6: can&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t assign &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;??? 0x00000000 flags 0x20000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;bogus alignment&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    2.182110&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; i915 0000:13:00.0: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;drm&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Failed to find VBIOS tables &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;VBT&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    2.182541&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; i915 0000:13:00.0: vgaarb: changed VGA decodes: olddecodes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;io+mem,decodes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;none:owns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;none
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    2.197374&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; i915 0000:13:00.0: firmware: direct-loading firmware i915/tgl_dmc_ver2_08.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    2.198037&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; i915 0000:13:00.0: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;drm&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Finished loading DMC firmware i915/tgl_dmc_ver2_08.bin &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v2.8&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    3.401676&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; i915 0000:13:00.0: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;drm&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; failed to retrieve link info, disabling eDP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    3.515822&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;drm&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Initialized i915 1.6.0 &lt;span style=&#34;color:#ae81ff&#34;&gt;20200917&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 0000:13:00.0 on minor &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    3.516054&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; i915 0000:13:00.0: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;drm&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Cannot find any crtc or sizes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    3.516144&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; i915 0000:13:00.0: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;drm&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Cannot find any crtc or sizes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OpenCL 也可以检测到：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt install intel-opencl-icd clinfo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Number of devices                                 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Device Name                                     Intel&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Graphics Gen12LP &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0x9a49&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Device Vendor                                   Intel&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Corporation
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Device Vendor ID                                0x8086
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Device Version                                  OpenCL 3.0 NEO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Device Numeric Version                          0xc00000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3.0.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Driver Version                                  1.0.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Vulkan：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ vulkaninfo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Group 1:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Properties:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                physicalDevices: count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        Intel&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Xe Graphics &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TGL GT2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID: 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                subsetAllocation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Present Capabilities:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Intel&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Xe Graphics &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TGL GT2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID: 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        Can present images from the following devices: count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                Intel&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Xe Graphics &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TGL GT2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID: 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Present modes: count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过目前还没找到显示输出的方法，只能用 VMware SVGA 或者远程桌面。&lt;/p&gt;
&lt;h2 id=&#34;吐槽&#34;&gt;吐槽&lt;/h2&gt;
&lt;p&gt;需要吐槽的是，11 代的核显不再支持 Intel GVT-g，而是提供了 SR-IOV 的虚拟化。但是，Linux i915 驱动没有做相应的支持。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://williamlam.com/2020/06/passthrough-of-integrated-gpu-igpu-for-standard-intel-nuc.html&#34;&gt;Passthrough of Integrated GPU (iGPU) for standard Intel NUC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shuttletitan.com/vsphere/pci-passthrough-module-devicepoweron-power-on-failed/&#34;&gt;PCI Passthrough – “Module ‘DevicePowerOn’ power on failed”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>LoongArch64 工具链构建</title>
      <link>https://jia.je/software/2022/05/02/loongarch64-toolchain/</link>
      <pubDate>Mon, 02 May 2022 20:35:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/05/02/loongarch64-toolchain/</guid>
      <description>&lt;p&gt;最近因为龙芯杯的原因，想自己搞个 LoongArch64 的交叉编译工具链试试，结果遇到了很多坑，最后终于算是搞出来了。&lt;/p&gt;
&lt;p&gt;一开始是想搞一个 newlib 的工具链，比较简单，而且之前做过一个仓库：&lt;a href=&#34;https://github.com/jiegec/riscv-toolchain&#34;&gt;jiegec/riscv-toolchain&lt;/a&gt;，就是构建的 riscv64-unknown-elf 工具链，照着 riscv-gnu-toolchain 就可以了。不过研究发现，newlib 还不支持 loongarch，目前只有 glibc 支持，只好硬着头皮上了。&lt;/p&gt;
&lt;p&gt;于是我就在 riscv-toolchain 的基础上搞 loongarch64-unknown-linux-gnu，也就是带 glibc 的工具链，结果发现遇到很多坑。首先编译 libgcc 的时候就找不到头文件，于是先要从 glibc 和 linux 安装头文件到 sysroot 里面，对于 sysroot 里面的头文件路径到底是 include 还是 usr/include 也折腾了半天。然后编译 libgcc 又各种出问题，最后折腾了半天，结果是 gcc stage1 和 glibc 都没问题，gcc stage2 会报链接错误，但是不管它也能用，可以编译出正常的程序，毕竟 libc 是好的。&lt;/p&gt;
&lt;p&gt;于是转念一想，要不要试试 crosstool-ng。克隆了一份上游的版本，照着 riscv 的部分抄了一份变成了 loongarch，然后把 config 里面的 linux/glibc/gcc/binutils-gdb 都替换为 custom location，这样我就可以用上游的最新版本了。中途还遇到了 &lt;a href=&#34;https://github.com/crosstool-ng/crosstool-ng/issues/1564&#34;&gt;crosstool-ng 对 gcc 12/13 不兼容的 bug&lt;/a&gt;，还好下面有人提出了解决方法。这些都搞定以后，终于构建出了一个完整的 loongarch64-unknown-linux-gnu 工具链。仓库地址是 &lt;a href=&#34;https://github.com/jiegec/ct-ng-loongarch64&#34;&gt;jiegec/ct-ng-loongarch64&lt;/a&gt;，需要配合添加了 LoongArch 的 &lt;a href=&#34;https://github.com/jiegec/crosstool-ng/tree/loongarch&#34;&gt;jiegec/crosstool-ng loongarch 分支&lt;/a&gt; 使用。&lt;/p&gt;
&lt;p&gt;最后得到的工具链各组件版本如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
   
loongarch64-unknown-linux-gnu-gcc (crosstool-NG 1.25.0_rc2.1_7e21141) 13.0.0 20220502 (experimental)
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

GNU ld (crosstool-NG 1.25.0_rc2.1_7e21141) 2.38.50.20220502
Copyright (C) 2022 Free Software Foundation, Inc.
This program is free software; you may redistribute it under the terms of
the GNU General Public License version 3 or (at your option) a later version.
This program has absolutely no warranty.
GNU gdb (crosstool-NG 1.25.0_rc2.1_7e21141) 13.0.50.20220502-git
Copyright (C) 2022 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后有时间的话，再把 qemu 和系统搞起来跑跑。&lt;/p&gt;
&lt;p&gt;UPDATE: GCC 12.1 发布了，试了一下这个正式版本可以正确地编译。目前还需要使用 HEAD 版本的 binutils 和龙芯的 glibc 和 linux。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sunhaiyong1978/CLFS-for-LoongArch/blob/main/CLFS_For_LoongArch64-20220108.md&#34;&gt;手把手教你构建基于 LoongArch64 架构的 Linux 系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://preshing.com/20141119/how-to-build-a-gcc-cross-compiler/&#34;&gt;How to Build a GCC Cross-Compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>试用沁恒 CH32V307 评估板</title>
      <link>https://jia.je/hardware/2022/04/19/wch-ch32v307-eval/</link>
      <pubDate>Tue, 19 Apr 2022 22:53:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/04/19/wch-ch32v307-eval/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;之前有一天看到朋友在捣鼓 CH32V307，因此自己也萌生了试用 CH32V307 评估板的兴趣，于是在&lt;a href=&#34;http://www.wch.cn/services/request_sample.html&#34;&gt;沁恒官网申请样品&lt;/a&gt;，很快就接到电话了解情况，几天后就顺丰送到了，不过因为疫情原因直到现在才拿到手上，只能说疫情期间说不定货比人还快。&lt;/p&gt;
&lt;h2 id=&#34;开箱&#34;&gt;开箱&lt;/h2&gt;
&lt;p&gt;收到的盒子里有一个 &lt;a href=&#34;http://special.wch.cn/zh_cn/RISCV_MCU_Index/&#34;&gt;CH32V307 评估板&lt;/a&gt;，和一个 &lt;a href=&#34;http://www.wch.cn/products/WCH-Link.html&#34;&gt;WCH-Link&lt;/a&gt;，相关资料可以在 &lt;a href=&#34;http://www.wch.cn/products/CH32V307.html&#34;&gt;官网&lt;/a&gt; 或者 &lt;a href=&#34;https://github.com/openwch/ch32v307&#34;&gt;openwch/ch32v307&lt;/a&gt; 下载。在说明书中有如下的图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ch32v307.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;板子自带的跳线帽不是很多，建议自备一些，或者用杜邦线替代。比较重要的是 WCH-Link 子板上 CH549 和 CH2V307 连接的几个信号，和下面 BOOT0/1 的选择。&lt;/p&gt;
&lt;h2 id=&#34;wch-link&#34;&gt;WCH-Link&lt;/h2&gt;
&lt;p&gt;可以看到评估板自带了一个 WCH-Link，所以不需要附赠的那一个，直接把 11 号 Type-C 连接到电脑上即可。这里还遇到一个小插曲，用 Type-C to Type-C 的线连电脑上不工作，连 PWR LED 都点不亮，换一根 Type-A to Type-C 的就可以，没有继续研究是什么原因。电脑上可以看到 WCH-Link 的设备：VID=1a86, PID=8010。比较有意思的是，在 RISC-V 模式（CON 灯不亮）的时候 PID 是 8010，ARM 模式（CON 灯亮）的时候 PID 是 8011，从 RISC-V 模式切换到 ARM 模式的方法是连接 TX 和 GND 后上电，反过来要用 MounRiver，详见 WCH-Link 使用说明 &lt;a href=&#34;http://www.wch.cn/uploads/file/20210707/1625645582172366.pdf&#34;&gt;V1.0&lt;/a&gt; &lt;a href=&#34;http://www.wch.cn/uploads/file/20210906/1630922260396691.pdf&#34;&gt;V1.3&lt;/a&gt; 和原理图 &lt;a href=&#34;http://www.wch.cn/uploads/file/20210104/1609725144187113.pdf&#34;&gt;V1.1&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;给沁恒开源 WCH-Link 原理图并开放固件点个赞，在淘宝上也可以看到不少 WCH-Link 的仿真器，挺有意思的。&lt;/p&gt;
&lt;p&gt;在 ARM 模式下，它实现了类似 &lt;a href=&#34;https://www.keil.com/support/man/docs/dapdebug/dapdebug_introduction.htm&#34;&gt;CMSIS-DAP&lt;/a&gt; 的协议，可以用 OpenOCD 调试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;find interface&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cmsis-dap.cfg&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adapter speed &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmsis_dap_vid_pid &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1a86&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8011&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transport select swd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openocd -f openocd.cfg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Open On-Chip Debugger 0.11.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Licensed under GNU GPL v2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For bug reports, read
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        http://openocd.org/doc/doxygen/bugs.html
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : CMSIS-DAP: SWD  Supported
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : CMSIS-DAP: FW Version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 2.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : CMSIS-DAP: Interface Initialised &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SWD&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : SWCLK/TCK &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; SWDIO/TMS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; TDI &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; TDO &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; nTRST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; nRESET &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : CMSIS-DAP: Interface ready
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : clock speed &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; kHz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Warn : gdb services need one or more targets defined
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Listening on port &lt;span style=&#34;color:#ae81ff&#34;&gt;6666&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; tcl connections
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Listening on port &lt;span style=&#34;color:#ae81ff&#34;&gt;4444&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; telnet connections
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过这里我们要用的是 RISC-V 处理器 CH32V307，上面的就当是 WCH-LINK 使用的小贴士。&lt;/p&gt;
&lt;p&gt;给评估板插上 USB Type-C 以后，首先上面的 WCH-Link 部分中红色的 PWR 和绿色的 RUN 亮，CON 不亮，说明 WCH-LINK 的 CH549 已经启动，并且处在 RISC-V 模式（CON 不亮）。CH549 是一个 8051 指令集的处理器，上面的跑的 WCH-LINK 固件在网上可以找到，在下面提到的 MounRiver Studio 目录中也有一份。&lt;/p&gt;
&lt;h2 id=&#34;openocd&#34;&gt;OpenOCD&lt;/h2&gt;
&lt;p&gt;目前开源工具上游还不支持 CH32V307 的开发，需要用 &lt;a href=&#34;http://www.mounriver.com/download&#34;&gt;MounRiver&lt;/a&gt;，支持 Windows 和 Linux，有两部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://file.mounriver.com/tools/MRS_Toolchain_Linux_x64_V1.40.tar.xz&#34;&gt;MRS_Toolchain_Linux_x64_V1.40.tar.xz&lt;/a&gt;: RISC-V GNU Toolchain 和 OpenOCD&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://file.mounriver.com/upgrade/MounRiver_Studio_Community_Linux_x64_V110.tar.xz&#34;&gt;MounRiver_Studio_Community_Linux_V110&lt;/a&gt;：基于 Eclipse 做的 IDE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解压缩后，可以看到它的 OpenOCD 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## wch-arm.cfg
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;adapter driver cmsis-dap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transport select swd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;find ..&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;share&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;openocd&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;scripts&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ch32f1x.cfg&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## wch-riscv.cfg
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#interface wlink
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;adapter driver wlink
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wlink_set
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; _CHIPNAME riscv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jtag newtap $_CHIPNAME cpu &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;irlen &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; _TARGETNAME $_CHIPNAME.cpu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target create $_TARGETNAME.0 riscv &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;chain-position $_TARGETNAME
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$_TARGETNAME.0 configure  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;work-area-phys &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;work-area-size &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;work-area-backup &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; _FLASHNAME $_CHIPNAME.flash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flash bank $_FLASHNAME wch_riscv &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; $_TARGETNAME.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ready for Remote Connections&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 ch32f1x.cfg 就是 stm32f1x.cfg 改了一下名字，可以看到 WCH OpenOCD 把它的 RISC-V 调试协议称为 wlink，估计是取 wch-link 的简称吧。除了 wlink 部分，其他就是正常的 RISC-V CPU 调试的 OpenOCD 配置，比较有意思的就是 IDCODE 设为了 0x00001，比较有个性。&lt;/p&gt;
&lt;p&gt;在网上一番搜索，找到了 WCH OpenOCD 的源码 &lt;a href=&#34;https://git.minori.work/Embedded_Projects/riscv-openocd-wch&#34;&gt;Embedded_Projects/riscv-openocd-wch&lt;/a&gt;，是网友向沁恒获取的源代码，毕竟 OpenOCD 是 GPL 软件。简单看了一下代码，是直接把 RISC-V Debug 中的 DMI 操作封装了一下，然后通过 USB Bulk 和 WCH-Link 通信。我从 riscv-openocd 找到了一个比较接近的 &lt;a href=&#34;https://github.com/jiegec/riscv-openocd/commit/cc0ecfb6d5b939bd109ea84b07b5eab3cdf80316&#34;&gt;commit&lt;/a&gt;，然后把 WCH 的代码提交上去，得到了 &lt;a href=&#34;https://github.com/jiegec/riscv-openocd/commit/bfa3bc7f98d22fa60ef6d3b2f5d98859fa963f85&#34;&gt;diff&lt;/a&gt;，有兴趣的可以看看具体实现，甚至把这个支持提交到上游。&lt;/p&gt;
&lt;p&gt;有源码以后，就可以在 macOS 上编译了（需要修复三处 clang 报告的编译错误，&lt;a href=&#34;https://github.com/jiegec/riscv-openocd/tree/wch&#34;&gt;最终代码&lt;/a&gt;）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./bootstrap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./configure --prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/path/to/prefix/openocd --enable-wlink --disable-werror CAPSTONE_CFLAGS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;-I/opt/homebrew/opt/capstone/include/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make -j4 install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果遇到 makeinfo 报错，把 homebrew 的 texinfo 加到 PATH 即可。&lt;/p&gt;
&lt;p&gt;编译完成后，就可以用前面提到的 wch-riscv.cfg 进行调试了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ /path/to/prefix/openocd -f wch-riscv.cfg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Open On-Chip Debugger 0.11.0+dev-01623-gbfa3bc7f9 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2022-04-20-09:55&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Licensed under GNU GPL v2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For bug reports, read
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        http://openocd.org/doc/doxygen/bugs.html
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : only one transport option; autoselect &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jtag&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Ready &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; Remote Connections
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Listening on port &lt;span style=&#34;color:#ae81ff&#34;&gt;6666&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; tcl connections
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Listening on port &lt;span style=&#34;color:#ae81ff&#34;&gt;4444&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; telnet connections
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : WCH-Link version 2.3 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : wlink_init ok
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : This adapter doesn&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t support configurable speed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : JTAG tap: riscv.cpu tap/device found: 0x00000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mfg: 0x000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&amp;lt;invalid&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, part: 0x0000, ver: 0x0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Warn : Bypassing JTAG setup events due to errors
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;riscv.cpu.0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; datacount&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; progbufsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Examined RISC-V core; found &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; harts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info :  hart 0: XLEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;32, misa&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40901125
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;riscv.cpu.0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Target successfully examined.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : starting gdb server &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; riscv.cpu.0 on &lt;span style=&#34;color:#ae81ff&#34;&gt;3333&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Listening on port &lt;span style=&#34;color:#ae81ff&#34;&gt;3333&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; gdb connections
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这也验证了上面的发现：因为绕过了 jtag，直接发送 dmi，所以 idcode 是假的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(wchwlink){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        buf_set_u32(idcode_buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00001&lt;/span&gt;);  &lt;span style=&#34;color:#75715e&#34;&gt;//Default value,for reuse risc-v jtag debug
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来就可以用 GDB 调试了。里面跑了一个样例的程序，就是向串口打印：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ screen /dev/tty.usbmodem* &lt;span style=&#34;color:#ae81ff&#34;&gt;115200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SystemClk:72000000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后则是针对各个外设，基于沁恒提供的示例代码进行相应的开发了。&lt;/p&gt;
&lt;h2 id=&#34;baremetal-代码&#34;&gt;Baremetal 代码&lt;/h2&gt;
&lt;p&gt;接下来看看沁恒提供的代码是如何配置的。在 EVT/EXAM/SRC/Startup/startup_ch32v30x_D8C.S 可以看到初始化的汇编代码。比较有意思的是，这个核心扩展了 mtvec，支持 ARM 的 vector table 模式，即放一个指针数组，而不是指令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;.section&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;.vector&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ax&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;@progbits&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;.align&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_vector_base:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;.option&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;norvc&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;.word&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;_start&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;.word&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;.word&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;NMI_Handler&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;/* NMI */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;.word&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;HardFault_Handler&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;/* Hard Fault */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这些名字如此熟悉，只能说这是 ARVM 了（ARM + RV）。后面的部分比较常规，把 data 段复制到 sram，然后清空 bss：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;handle_reset:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.option&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;push&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;.option&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;norelax&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;la&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;__global_pointer$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.option&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;pop&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;la&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;_eusrstack&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/* Load data section from flash to RAM */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;la&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;_data_lma&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;la&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;_data_vma&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;la&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a2&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;_edata&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;bgeu&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;a2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;lw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;sw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;a1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;addi&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;addi&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;a1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;bltu&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;a2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;2:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/* Clear bss section */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;la&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;_sbss&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;la&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;_ebss&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;bgeu&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;a1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;sw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;zero&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;addi&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;bltu&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;a1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;2:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后是进行一些 csr 的配置，然后进入 C 代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;csrw&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xbc0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable nested and hardware stack */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;csrw&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x804&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable floating point and interrupt */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6088&lt;/span&gt;           
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;csrs&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mstatus&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;la&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;_vector_base&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ori&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;           
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;csrw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mtvec&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lui&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1ffff&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x300&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;sh&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1b0&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1:&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;lui&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;s2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40022&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;s2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;andi&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;bnez&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jal&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;SystemInit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;la&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;csrw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mepc&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里有一些自定义的 csr，比如 corecfgr(0xbc0)，intsyscr(0x804，设置了 HWSTKEN=1, INESTEN=1, PMTCFG=0b11, HWSTKOVEN=1)，具体参考 &lt;a href=&#34;http://www.wch.cn/downloads/QingKeV4_Processor_Manual_PDF.html&#34;&gt;QingKeV4_Processor_Manual&lt;/a&gt;。接着代码往 0x1ffff1b0 写入 0x300，然后不断读取 FLASH Interface (0x40022000) 的 STATR 字段，没有找到代码中相关的定义，简单猜测与 Flash 的零等待/非零等待区有关，因为后续代码要提高频率，因此 Flash 控制器需要增加 wait state。&lt;/p&gt;
&lt;h2 id=&#34;编译&#34;&gt;编译&lt;/h2&gt;
&lt;p&gt;可以用 MounRiver 编译，也可以用 SiFive 的 riscv64-unknown-elf 工具链进行编译，参考 &lt;a href=&#34;https://git.minori.work/Embedded_Projects/CH32V307_Template&#34;&gt;Embedded_Projects/CH32V307_Template&lt;/a&gt; 项目中的编译方式，修改 &lt;code&gt;riscv64-elf.cmake&lt;/code&gt; 为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;CMAKE_SYSTEM_NAME&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;Generic&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;CMAKE_C_COMPILER&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;riscv64-unknown-elf-gcc&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;CMAKE_CXX_COMPILER&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;riscv64-unknown-elf-g++&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Make CMake happy about those compilers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;CMAKE_TRY_COMPILE_TARGET_TYPE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;STATIC_LIBRARY&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后交叉编译就可以了。需要注意的是对 libnosys 的处理，如果没有正确链接，就会出现 syscall，然后在 ecall handler 里面死循环。&lt;/p&gt;
&lt;p&gt;如果不想用 CMake，也可以用下面的精简版 Makefile：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;USER &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; User/main.c User/ch32v30x_it.c User/system_ch32v30x.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LIBRARY &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; ../../SRC/Peripheral/src/ch32v30x_misc.c &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	../../SRC/Peripheral/src/ch32v30x_usart.c &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	../../SRC/Peripheral/src/ch32v30x_gpio.c &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	../../SRC/Peripheral/src/ch32v30x_rcc.c &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	../../SRC/Debug/debug.c &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	../../SRC/Startup/startup_ch32v30x_D8C.S
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LDSCRIPT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ../../SRC/Ld/Link.ld
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# disable libc first
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;CFLAGS &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; -march&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rv32imafc -mabi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ilp32f &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	-flto -ffunction-sections -fdata-sections &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	-nostartfiles -nostdlib &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	-T &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;LDSCRIPT&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	-I../../SRC/Debug &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	-I../../SRC/Core &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	-I../../SRC/Peripheral/inc &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	-I./User &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	-O2 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	-Wl,--print-memory-usage
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# link libc &amp;amp; libnosys in the end
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;CFLAGS_END &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	-lc -lgcc -lnosys
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PREFIX &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; riscv64-unknown-elf-
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;all&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; obj/build.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;obj/build.bin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; obj/build.elf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PREFIX&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;objcopy -O binary $^ $@
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;obj/build.elf&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;USER&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;LIBRARY&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PREFIX&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;gcc &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;CFLAGS&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; $^ &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;CFLAGS_END&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; -o $@
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	rm -rf obj/*
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;烧写-flash&#34;&gt;烧写 Flash&lt;/h2&gt;
&lt;p&gt;编译好以后，根据 WCH OpenOCD 的文档，可以用下面的配置来进行烧写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#interface wlink
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;adapter driver wlink
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wlink_set
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; _CHIPNAME riscv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jtag newtap $_CHIPNAME cpu &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;irlen &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; _TARGETNAME $_CHIPNAME.cpu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target create $_TARGETNAME.0 riscv &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;chain-position $_TARGETNAME
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$_TARGETNAME.0 configure  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;work-area-phys &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;work-area-size &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;work-area-backup &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; _FLASHNAME $_CHIPNAME.flash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flash bank $_FLASHNAME wch_riscv &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; $_TARGETNAME.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;halt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flash erase_sector wch_riscv &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; last
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;program &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;firmware
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;verify_image &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;firmware
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wlink_reset_resume
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;exit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openocd -f program.cfg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Open On-Chip Debugger 0.11.0+dev-01623-gbfa3bc7f9 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2022-04-20-09:55&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Licensed under GNU GPL v2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For bug reports, read
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        http://openocd.org/doc/doxygen/bugs.html
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : only one transport option; autoselect &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jtag&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Ready &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; Remote Connections
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : WCH-Link version 2.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : wlink_init ok
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : This adapter doesn&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t support configurable speed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : JTAG tap: riscv.cpu tap/device found: 0x00000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mfg: 0x000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&amp;lt;invalid&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, part: 0x0000, ver: 0x0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Warn : Bypassing JTAG setup events due to errors
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;riscv.cpu.0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; datacount&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; progbufsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Examined RISC-V core; found &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; harts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info :  hart 0: XLEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;32, misa&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40901125
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;riscv.cpu.0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Target successfully examined.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : starting gdb server &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; riscv.cpu.0 on &lt;span style=&#34;color:#ae81ff&#34;&gt;3333&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Listening on port &lt;span style=&#34;color:#ae81ff&#34;&gt;3333&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; gdb connections
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : device id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; REDACTED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : flash size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 256kbytes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : JTAG tap: riscv.cpu tap/device found: 0x00000001 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mfg: 0x000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&amp;lt;invalid&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, part: 0x0000, ver: 0x0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Warn : Bypassing JTAG setup events due to errors
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;** Programming Started **
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;** Programming Finished **
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Verify Success
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问串口 &lt;code&gt;screen /dev/tty.usbmodem* 115200&lt;/code&gt;，可以看到正确地输出了内容。&lt;/p&gt;
&lt;h2 id=&#34;转发&#34;&gt;转发&lt;/h2&gt;
&lt;p&gt;本文已授权转发到以下的地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/wJ0X8qdIWRxavGo9N37QSg&#34;&gt;公众号 物联网小生 试用沁恒 CH32V307 评估板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.yuque.com/zsafly/lfxyfc/zseeyx&#34;&gt;语雀 硬件知识库 试用沁恒 CH32V307 评估板&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>导出 Vivado 下载 Bitstream 的 SVF 文件</title>
      <link>https://jia.je/hardware/2022/04/10/vivado-program-bitstream-svf/</link>
      <pubDate>Sun, 10 Apr 2022 09:36:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/04/10/vivado-program-bitstream-svf/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在研究如何实现一个远程 JTAG 的功能，目前实现在 &lt;a href=&#34;https://github.com/jiegec/jtag-remote-server&#34;&gt;jiegec/jtag-remote-server&lt;/a&gt;，实现了简单的 XVC 协议，底层用的是 libftdi 的 MPSSE 协议来操作 JTAG。但是，在用 Vivado 尝试的时候，SysMon 可以正常使用，但是下载 Bitstream 会失败，所以要研究一下 Vivado 都做了什么（目前已经修好，是最后一个字节的部分位读取的处理问题）。&lt;/p&gt;
&lt;h2 id=&#34;svf&#34;&gt;SVF&lt;/h2&gt;
&lt;p&gt;SVF 格式其实是一系列的 JTAG 上的操作。想到这个，也是因为在网上搜到了一个 &lt;a href=&#34;https://www.asc.ohio-state.edu/physics/cms/firmwares/dcfeb_v45.svf&#34;&gt;dcfeb_v45.svf&lt;/a&gt;，里面描述的就是一段 JTAG 操作：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-svf&#34; data-lang=&#34;svf&#34;&gt;// Created using Xilinx Cse Software [ISE - 12.4]
// Date: Mon May 09 11:00:32 2011

TRST OFF;
ENDIR IDLE;
ENDDR IDLE;
STATE RESET;
STATE IDLE;
FREQUENCY 1E6 HZ;
//Operation: Program -p 0 -dataWidth 16 -rs1 NONE -rs0 NONE -bpionly -e -loadfpga 
TIR 0 ;
HIR 0 ;
TDR 0 ;
HDR 0 ;
TIR 0 ;
HIR 0 ;
HDR 0 ;
TDR 0 ;
//Loading device with &amp;#39;idcode&amp;#39; instruction.
SIR 10 TDI (03c9) SMASK (03ff) ;
SDR 32 TDI (00000000) SMASK (ffffffff) TDO (f424a093) MASK (0fffffff) ;
//Boundary Scan Chain Contents
//Position 1: xc6vlx130t
TIR 0 ;
HIR 0 ;
TDR 0 ;
HDR 0 ;
TIR 0 ;
HIR 0 ;
TDR 0 ;
HDR 0 ;
TIR 0 ;
HIR 0 ;
HDR 0 ;
TDR 0 ;
//Loading device with &amp;#39;idcode&amp;#39; instruction.
SIR 10 TDI (03c9) ;
SDR 32 TDI (00000000) TDO (f424a093) ;
//Loading device with &amp;#39;bypass&amp;#39; instruction.
SIR 10 TDI (03ff) ;
//Loading device with &amp;#39;idcode&amp;#39; instruction.
SIR 10 TDI (03c9) ;
SDR 32 TDI (00000000) TDO (f424a093) ;
// Loading device with a `jprogram` instruction. 
SIR 10 TDI (03cb) ;
// Loading device with a `isc_noop` instruction. 
SIR 10 TDI (03d4) ;
RUNTEST 100000 TCK;
// Check init_complete in ircapture.
//IR Capture using specified instruction.
SIR 10 TDI (03d4) TDO (0010) MASK (0010) ;
// Loading device with a `isc_enable` instruction. 
SIR 10 TDI (03d0) ;
SDR 5 TDI (00) SMASK (1f) ;
RUNTEST 100 TCK;
// Loading device with a `isc_program` instruction. 
SIR 10 TDI (03d1) ;
SDR 32 TDI (ffffffff) SMASK (ffffffff) ;
SDR 32 TDI (ffffffff) ;
SDR 32 TDI (ffffffff) ;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;它的语法比较简单，大概就是 &lt;code&gt;SIR&lt;/code&gt; 就是向 IR 输入，&lt;code&gt;SDR&lt;/code&gt; 就是向 DR 输入，后面跟着的 TDO 和 MASK 表示对输出数据进行判断。比较核心的是下面这几步：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-svf&#34; data-lang=&#34;svf&#34;&gt;SIR JPROGRAM
SIR ISC_NOOP
RUNTEST 10000 TCK
SIR ISC_NOOP UNTIL ISC_DONE
SIR ISC_ENABLE
SIR ISC_PROGRAM
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后就是 bitstream 的内容了。&lt;/p&gt;
&lt;h3 id=&#34;openocd-烧写-svf&#34;&gt;OpenOCD 烧写 SVF&lt;/h3&gt;
&lt;p&gt;有了 SVF 以后，就可以用其他的一些支持 SVF 语法的工具来烧写 FPGA，而不需要 Vivado。比如采用如下的 OpenOCD 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# openocd config
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# use ftdi channel 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;adapter speed &lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adapter driver ftdi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transport select jtag
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ftdi_vid_pid &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0403&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6011&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ftdi_layout_init &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0008&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ftdi_tdo_sample_edge falling
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ftdi_channel &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reset_config none
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jtag newtap xcvu37p tap &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;irlen &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;expected-id &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14b79093&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;svf &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tap xcvu37p.tap &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;program.svf progress
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;exit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;从-vivado-中导出-svf&#34;&gt;从 Vivado 中导出 SVF&lt;/h3&gt;
&lt;p&gt;从文件头可以推测，这个功能是 Xilinx 官方提供的，一番搜索，果然找到了命令：&lt;a href=&#34;https://blog.xjtag.com/2016/07/creating-svf-files-using-xilinx-vivado/&#34;&gt;Creating SVF files using Xilinx Vivado&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;program_hw_devices &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;force &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;svf_file &lt;span style=&#34;color:#66d9ef&#34;&gt;{&lt;/span&gt;program.svf&lt;span style=&#34;color:#66d9ef&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_hw_devices xxx&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;添加一个 &lt;code&gt;-svf_file&lt;/code&gt; 参数后，就会生成一个 svf 文件。下面摘录一段：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-svf&#34; data-lang=&#34;svf&#34;&gt;// config/idcode
SIR 18 TDI (009249) ;
SDR 32 TDI (00000000) TDO (04b79093) MASK (0fffffff) ;
// config/jprog
STATE RESET;
STATE IDLE;
SIR 18 TDI (00b2cb) ;
SIR 18 TDI (014514) ;
// Modify the below delay for config_init operation (0.100000 sec typical, 0.100000 sec maximum)
RUNTEST 0.100000 SEC;
// config/jprog/poll
RUNTEST 15000 TCK;
SIR 18 TDI (014514) TDO (011000) MASK (031000) ;
// config/slr
SIR 18 TDI (005924) ;
SDR 226633216 TDI (0000000400000004e00000008001000c00000004d00000008001000c0000000466aa99550000000400000004000000040000000400000004000000040000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结合 Xilinx 官网可以下载的 BSDL 文件，可以找到每个 IR 对应的是什么：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-svf&#34; data-lang=&#34;svf&#34;&gt;// config/idcode
SIR 18 TDI (009249) ;
SDR 32 TDI (00000000) TDO (04b79093) MASK (0fffffff) ;
// BSDL:
&amp;#34;IDCODE           (001001001001001001),&amp;#34; &amp;amp; --   DEVICE_ID reg
attribute IDCODE_REGISTER of XCVU37P_FSVH2892 : entity is
        &amp;#34;XXXX&amp;#34; &amp;amp;        -- version
        &amp;#34;0100101&amp;#34; &amp;amp;     -- family
        &amp;#34;101111001&amp;#34; &amp;amp;   -- array size
        &amp;#34;00001001001&amp;#34; &amp;amp; -- manufacturer
        &amp;#34;1&amp;#34;;            -- required by 1149.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这一段是检查 IDCODE 是否是目标 FPGA 型号。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-svf&#34; data-lang=&#34;svf&#34;&gt;// config/jprog
STATE RESET;
STATE IDLE;
SIR 18 TDI (00b2cb) ;
SIR 18 TDI (014514) ;
// BSDL
&amp;#34;JPROGRAM         (001011001011001011),&amp;#34; &amp;amp; --   PRIVATE
&amp;#34;ISC_NOOP         (010100010100010100),&amp;#34; &amp;amp; --   PRIVATE, ISC_DEFAULT
// Modify the below delay for config_init operation (0.100000 sec typical, 0.100000 sec maximum)
RUNTEST 0.100000 SEC;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这一段发送了 JPROGRAM 和 ISC_NOOP 的 IR，然后进入 RUNTEST 状态一段时间。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-svf&#34; data-lang=&#34;svf&#34;&gt;// config/jprog/poll
RUNTEST 15000 TCK;
SIR 18 TDI (014514) TDO (011000) MASK (031000) ;
// BSDL
&amp;#34;ISC_NOOP         (010100010100010100),&amp;#34; &amp;amp; --   PRIVATE, ISC_DEFAULT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里再次设置 ISC_NOOP，检查了 TDO 中的数据，意义不明。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-svf&#34; data-lang=&#34;svf&#34;&gt;// config/slr
SIR 18 TDI (005924) ;
SDR 226633216 TDI (0000000400000004e00000008001000c00000004d00000008001000c0000000466aa99550000000400000004000000040000000400000004000000040000
// BSDL
&amp;#34;CFG_IN_SLR0      (000101100100100100),&amp;#34; &amp;amp; --   PRIVATE
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从这里就是开始往里面写入 bitstream，可以看到熟悉的 66aa9955 的同步字符，对比 Bitstream 文件内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;000000c0: ffff ffff ffff ffff aa99 5566 2000 0000  ..........Uf ...
000000d0: 2000 0000 3002 2001 0000 0000 3002 0001   ...0. .....0...
000000e0: 0000 0000 3000 8001 0000 0000 2000 0000  ....0....... ...
000000f0: 3000 8001 0000 0007 2000 0000 2000 0000  0....... ... ...
00000100: 3000 2001 0000 0000 3002 6001 0000 0000  0. .....0.`.....
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以发现是每 32 字节按位颠倒：&lt;code&gt;aa995566(10101010 10011001 01010101 01100110) -&amp;gt; 66aa9955(01100110 10101010 10011001 01010101)&lt;/code&gt;，后面的 &lt;code&gt;20000000 -&amp;gt; 00000004&lt;/code&gt; 也是类似的。&lt;/p&gt;
&lt;p&gt;Xilinx UG570 的 Table 6-5 也印证了上面的过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start loading the JPROGRAM instruction, LSB first:&lt;/li&gt;
&lt;li&gt;Load the MSB of the JPROGRAM instruction when exiting SHIFT-IR, as defined in the IEEE standard.&lt;/li&gt;
&lt;li&gt;Start loading the CFG_IN instruction, LSB first:&lt;/li&gt;
&lt;li&gt;Load the MSB of the CFG_IN instruction when exiting SHIFT-IR.&lt;/li&gt;
&lt;li&gt;Shift in the FPGA bitstream. Bit n (MSB) is the first bit in the bitstream.(3)(4)&lt;/li&gt;
&lt;li&gt;Shift in the last bit of the bitstream. Bit 0 (LSB) shifts on the transition to EXIT1-DR.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完成 CFG_IN 之后，再进行 JSTART:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-svf&#34; data-lang=&#34;svf&#34;&gt;// config/start
STATE IDLE;
RUNTEST 100000 TCK;
SIR 18 TDI (00c30c) ;
HIR 0 ;
TIR 0 ;
HDR 0 ;
TDR 0 ;
STATE IDLE;
RUNTEST 2000 TCK;
SIR 18 TDI (009249) TDO (031000) MASK (011000) ;
HIR 0 ;
TIR 0 ;
HDR 0 ;
TDR 0 ;
// BSDL
&amp;#34;JSTART           (001100001100001100),&amp;#34; &amp;amp; --   PRIVATE
&amp;#34;IDCODE           (001001001001001001),&amp;#34; &amp;amp; --   DEVICE_ID reg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后再次进行 CFG_IN_SLR0, CFG_OUT_SLR0，验证是否真的写进去了：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-svf&#34; data-lang=&#34;svf&#34;&gt;// config/status
STATE RESET;
RUNTEST 5 TCK;
SIR 18 TDI (005924) ;
SDR 160 TDI (0000000400000004800700140000000466aa9955) ;
SIR 18 TDI (004924) ;
SDR 32 TDI (00000000) TDO (3f5e0d40) MASK (08000000) ;
STATE RESET;
RUNTEST 5 TCK;
// BSDL
&amp;#34;CFG_IN_SLR0      (000101100100100100),&amp;#34; &amp;amp; --   PRIVATE
&amp;#34;CFG_OUT_SLR0     (000100100100100100),&amp;#34; &amp;amp; --   PRIVATE
// config/status
STATE RESET;
RUNTEST 5 TCK;
SIR 18 TDI (005924) ;
SDR 160 TDI (0000000400000004800700140000000466aa9955) ;
SIR 18 TDI (004924) ;
SDR 32 TDI (00000000) TDO (3f5e0d40) MASK (08000000) ;
STATE RESET;
RUNTEST 5 TCK;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这段操作是进行 Status Register Readback，见 UG570 的 Table 10-4。MASK 设为 &lt;code&gt;08000000&lt;/code&gt; 应该是判断它的第 4 位：END_OF_STARTUP_STATUS（Table 9-25）。&lt;/p&gt;
&lt;p&gt;如果是 Quartus 用户，也可以 &lt;a href=&#34;https://www.intel.com/content/www/us/en/support/programmable/articles/000085709.html&#34;&gt;生成 SVF&lt;/a&gt;，具体操作是：在 Programmer 中，点击 &lt;code&gt;File-&amp;gt;Create JAM, JBC, SVF or ISC file&lt;/code&gt;，然后在弹出的窗口中选择 svf 格式，导出即可。得到的 svf 文件一样可以用 openocd 来下载。&lt;/p&gt;
&lt;p&gt;也可以&lt;a href=&#34;https://www.intel.com/content/www/us/en/support/programmable/articles/000074062.html&#34;&gt;用 &lt;code&gt;quartus_cpf&lt;/code&gt; 在命令行&lt;/a&gt;中进行转换：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;quartus_cpf -q 18MHz -g 3.3 -c -n p input.sof/pof output.svf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>浅谈乱序执行 CPU（二）</title>
      <link>https://jia.je/hardware/2022/03/31/brief-into-ooo-2/</link>
      <pubDate>Thu, 31 Mar 2022 01:18:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/03/31/brief-into-ooo-2/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/ooo_cpu.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;之前写过一个&lt;a href=&#34;https://jia.je/hardware/2021/09/14/brief-into-ooo/&#34;&gt;浅谈乱序执行 CPU&lt;/a&gt;，随着学习的深入，内容越来越多，页面太长，因此把后面的一部分内容独立出来，变成了这篇博客文章。之后也许会有（三）（四）等等。&lt;/p&gt;
&lt;h2 id=&#34;内存访问&#34;&gt;内存访问&lt;/h2&gt;
&lt;p&gt;内存访问是一个比较复杂的操作，它涉及到缓存、页表、内存序等问题。在乱序执行中，要尽量优化内存访问对其他指令的延迟的影响，同时也要保证正确性。这里参考的是 &lt;a href=&#34;https://docs.boom-core.org/en/latest/sections/load-store-unit.html&#34;&gt;BOOM 的 LSU 设计&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;首先是正确性。一般来说可以认为，Load 是没有副作用的（实际上，Load 会导致 Cache 加载数据，这也引发了以 Meltdown 为首的一系列漏洞），因此可以很激进地预测执行 Load。但是，Store 是有副作用的，写出去的数据就没法还原了。因此，Store 指令只有在 ROB Head 被 Commit 的时候，才会写入到 Cache 中。&lt;/p&gt;
&lt;p&gt;其次是性能，我们希望 Load 指令可以尽快地完成，这样可以使得后续的计算指令可以尽快地开始进行。当 Load 指令的地址已经计算好的时候，就可以去取数据，这时候，首先要去 Store Queue 里面找，如果有 Store 指令要写入的地址等于 Load 的地址，说明后面的 Load 依赖于前面的 Store，如果 Store 的数据已经准备好了，就可以直接把数据转发过来，就不需要从 Cache 中获取，如果数据还没准备好，就需要等待这一条 Store 完成；如果没有找到匹配的 Store 指令，再从内存中取。不过，有一种情况就是，当 Store 指令的地址迟迟没有计算出来，而后面的 Load 已经提前从 Cache 中获取数据了，这时候就会出现错误，所以当 Store 计算出地址的时候，需要检查后面的 Load 指令是否出现地址重合，如果出现了，就要把这条 Load 以及依赖这条 Load 指令的其余指令重新执行。&lt;a href=&#34;http://ieeexplore.ieee.org/abstract/document/7029183/&#34;&gt;POWER8 处理器微架构论文&lt;/a&gt;中对此也有类似的表述：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The POWER8 IFU also implements mechanisms to mitigate performance
degradation associated with pipeline hazards. A Store-Hit-Load (SHL) is
an out-of-order pipeline hazard condition, where an older store executes
after a younger overlapping load, thus signaling that the load received
stale data. The POWER8 IFU has logic to detect when this condition
exists and provide control to avoid the hazard by flushing the load
instruction which received stale data (and any following instructions).
When a load is flushed due to detection of a SHL, the fetch address of
the load is saved and the load is marked on subsequent fetches allowing
the downstream logic to prevent the hazard. When a marked load
instruction is observed, the downstream logic introduces an explicit
register dependency for the load to ensure that it is issued after the
store operation.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面再详细讨论一下 LSU 的设计。&lt;/p&gt;
&lt;h2 id=&#34;load-store-unit&#34;&gt;Load Store Unit&lt;/h2&gt;
&lt;p&gt;LSU 是很重要的一个执行单元，负责 Load/Store/Atomic 等指令的实现。最简单的实现方法是按顺序执行，但由于 pipeline 会被清空，Store/Atomic/Uncached Load 这类有副作用（当然了，如果考虑 Meltdown 类攻击的话，Cached Load 也有副作用，这里就忽略了），需要等到 commit 的时候再执行。这样 LSU 很容易成为瓶颈，特别是在访存指令比较多的时候。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，很重要的是让读写也乱序起来，具体怎么乱序，受到实现的影响和 Memory Order/Program Order 的要求。从性能的角度上来看，我们肯定希望 Load 可以尽快执行，因为可能有很多指令在等待 Load 的结果。那么，需要提前执行 Load，但是怎么保证正确性呢？在 Load 更早的时候，可能还有若干个 Store 指令尚未执行，一个思路是等待所有的 Store 执行完毕，但是这样性能不好；另一个思路是用地址来搜索 Store 指令，看看是否出现对同一个地址的 Store 和 Load，如果有，直接转发数据，就不需要从 Cache 获取了，不过这种方法相当于做了一个全相连的 Buffer，面积大，延迟高，不好扩展等问题接踵而至。&lt;/p&gt;
&lt;p&gt;为了解决 Store Queue 需要相连搜索的问题，&lt;a href=&#34;https://repository.upenn.edu/cgi/viewcontent.cgi?article=1001&amp;amp;context=cis_reports&#34;&gt;A high-bandwidth load-store unit for single-and multi-threaded processors&lt;/a&gt; 的解决思路是，把 Store 指令分为两类，一类是需要转发的，一类是不需要的，那么可以设计一个小的相连存储器，只保存这些需要转发的 Store 指令；同时还有一个比较大的，保存所有 Store 指令的队列，因为不需要相连搜索，所以可以做的比较大。&lt;/p&gt;
&lt;p&gt;仔细想想，这里还有一个问题：Load 在执行前，更早的 Store 的地址可能还没有就绪，这时候去搜索 Store Queue 得到的结果可能是错的，这时候要么等待所有的 Store 地址都就绪，要么就先执行，再用一些机制来修复这个问题，显然后者 IPC 要更好。&lt;/p&gt;
&lt;p&gt;修复 Load Store 指令相关性问题，一个方法是当一个 Store 提交的时候，检查是否有地址冲突的 Load 指令（那么 Load Queue 也要做成相连搜索的），是否转发了错误的 Store 数据，这也是 &lt;a href=&#34;https://docs.boom-core.org/en/latest/sections/load-store-unit.html#memory-ordering-failures&#34;&gt;Boom LSU&lt;/a&gt; 采用的方法。另一个办法是 Commit 的时候（或者按顺序）重新执行 Load 指令，如果 Load 结果和之前不同，要把后面依赖的刷新掉，这种方式的缺点是每条 Load 指令都要至少访问两次 Cache。&lt;a href=&#34;https://repository.upenn.edu/cgi/viewcontent.cgi?article=1228&amp;amp;context=cis_papers&#34;&gt;Store Vulnerability Window (SVW): Re-Execution Filtering for Enhanced Load Optimization&lt;/a&gt; 属于重新执行 Load 指令的方法，通过 Bloom filter 来减少一些没有必要重复执行的 Load。还有一种办法，就是预测 Load 指令和哪一条 Store 指令有依赖关系，然后直接去访问那一项，如果不匹配，就认为没有依赖。&lt;a href=&#34;https://ieeexplore.ieee.org/document/1540957&#34;&gt;Scalable Store-Load Forwarding via Store Queue Index Prediction&lt;/a&gt; 把 Load 指令分为三类，一类是不确定依赖哪条 Store 指令（Difficult Loads），一类是基本确定依赖哪一条 Store 指令，一类是不依赖 Store 指令。这个有点像 Cache 里面的 Way Prediction 机制。&lt;/p&gt;
&lt;p&gt;分析完了上述一些优化方法，我们也来看一些 CPU 设计采用了哪种方案。首先来分析一下 &lt;a href=&#34;https://ieeexplore.ieee.org/abstract/document/7029183&#34;&gt;IBM POWER8&lt;/a&gt; 的 LSU，首先，可以看到它设计了比较多项目的 virtual STAG/LTAG，然后再转换成比较少项目的 physical STAG/LTAG，这样 LSQ 可以做的比较小，原文：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A virtual STAG/LTAG scheme is used to minimize dispatch holds due to
running out of physical SRQ/LRQ entries. When a physical entry in the
LRQ is freed up, a virtual LTAG will be converted to a real LTAG. When a
physical entry in the SRQ is freed up, a virtual STAG will be converted
to a real STAG. Virtual STAG/LTAGs are not issued to the LSU until they
are subsequently marked as being real in the UniQueue. The ISU can
assign up to 128 virtual LTAGs and 128 virtual STAGs to each thread.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个思路在 2007 年的论文 &lt;a href=&#34;https://people.csail.mit.edu/emer/papers/2007.06.isca.late_binding.pdf&#34;&gt;Late-Binding: Enabling Unordered Load-Store Queues&lt;/a&gt; 里也可以看到，也许 POWER8 参考了这篇论文的设计。可以看到，POWER8 没有采用那些免除 CAM 的方案：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The SRQ is a 40-entry, real address based CAM structure. Similar to the
SRQ, the LRQ is a 44-entry, real address based, CAM structure. The LRQ
keeps track of out-of-order loads, watching for hazards. Hazards
generally exist when a younger load instruction executes out-of-order
before an older load or store instruction to the same address (in part
or in whole). When such a hazard is detected, the LRQ initiates a flush
of the younger load instruction and all its subsequent instructions from
the thread, without impacting the instructions from other threads. The
load is then re-fetched from the I-cache and re-executed, ensuring
proper load/store ordering.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而是在传统的两个 CAM 设计的基础上，做了减少物理 LSQ 项目的优化。比较有意思的是，POWER7 和 POWER8 的 L1 Cache 都是 8 路组相连，并且采用了 set-prediction 的方式（应该是通常说的 way-prediction）。&lt;/p&gt;
&lt;p&gt;此外还有一个实现上的小细节，就是在判断 Load 和 Store 指令是否有相关性的时候，由于地址位数比较多，完整比较的延迟比较大，可以牺牲精度的前提下，选取地址的一部分进行比较。&lt;a href=&#34;https://ieeexplore.ieee.org/document/8409955&#34;&gt;POWER9 论文&lt;/a&gt; 提到了这一点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POWER8 and prior designs matched the effective address (EA) bits 48:63
between the younger load and the older store queue entry. In POWER9,
through a combination of outright matches for EA bits 32:63 and hashed
EA matches for bits 0:31, false positive avoidance is greatly improved.
This reduces the number of flushes, which are compulsory for false
positives.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里又是一个精确度和时序上的一个 tradeoff。&lt;/p&gt;
&lt;p&gt;具体到 Load/Store Queue 的大小，其实都不大：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/document/9000513&#34;&gt;Zen 2&lt;/a&gt; Store Queue 48&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikichip.org/wiki/intel/microarchitectures/skylake_(client)#Memory_subsystem&#34;&gt;Intel Skylake&lt;/a&gt; Store Buffer 56 Load Buffer 72&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/document/7029183?arnumber=7029183&#34;&gt;POWER 8&lt;/a&gt; Store Queue 40 Load Queue 44 (Virtual 128+128)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ieeexplore.ieee.org/document/755465/&#34;&gt;Alpha 21264&lt;/a&gt; Store Queue 32 Load Queue 32&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;精确异常-vs-非精确异常&#34;&gt;精确异常 vs 非精确异常&lt;/h2&gt;
&lt;p&gt;精确异常是指发生异常的指令之前的指令都完成，之后的没有执行。一般来说，实现方式是完成异常指令之前的所有指令，并撤销异常指令之后的指令的作用。非精确异常则是不保证这个性质，&lt;a href=&#34;http://bwrcs.eecs.berkeley.edu/Classes/cs152/lectures/lec12-exceptions.pdf&#34;&gt;网上资料&lt;/a&gt; 说，这种情况下硬件实现更简单，但是软件上处理比较困难。&lt;/p&gt;
&lt;p&gt;一个非精确异常的例子是 &lt;a href=&#34;https://courses.cs.washington.edu/courses/cse548/99wi/other/alphahb2.pdf&#34;&gt;Alpha&lt;/a&gt;，在章节 4.7.6.1 中提到，一些浮点计算异常可能是非精确的，并且说了一句：&lt;code&gt;In general, it is not feasible to fix up the result value or to continue from the trap.&lt;/code&gt;。同时给出了一些条件，只有当指令序列满足这些条件的时候，异常才是可以恢复的。还有一段描述，摘录在这里：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Alpha lets the software implementor determine the precision of
arithmetic traps.  With the Alpha architecture, arithmetic traps (such
as overflow and underflow) are imprecise—they can be delivered an
arbitrary number of instructions after the instruction that triggered
the trap. Also, traps from many different instructions can be reported
at once. That makes implementations that use pipelining and multiple
issue substantially easier to build.  However, if precise arithmetic
exceptions are desired, trap barrier instructions can be explicitly
inserted in the program to force traps to be delivered at specific
points.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;具体来说，在 &lt;a href=&#34;http://www.bitsavers.org/pdf/dec/alpha/Sites_AlphaAXPArchitectureReferenceManual_2ed_1995.pdf&#34;&gt;Reference Manual&lt;/a&gt; 中第 5.4.1 章节，可以看到当触发 Arithmetic Trap 的时候，会进入 Kernel 的 entArith 函数，并提供参数：a0 表示 exception summary，a1 表示 register write mask。exception summary 可以用来判断发生了什么类型的 exception，比如 integer overflow，inexact result 等等。一个比较特别的 exception 类型是 software completion。第二个参数表示的是触发异常的指令（一个或多个）会写入哪些寄存器（64 位，低 32 位对应整数寄存器，高 32 位对应浮点寄存器），然后保存下来的 PC 值为最后一条执行的指令的下一个地址，从触发异常的第一条指令到最后一条指令就是 trap shadow，这部分指令可能执行了一部分，没有执行一部分，一部分执行结果是错误的。&lt;/p&gt;
&lt;p&gt;Linux 处理代码在 &lt;code&gt;arch/alpha/kernel/traps.c&lt;/code&gt; 的 &lt;code&gt;do_entArith&lt;/code&gt; 函数中。首先判断，如果是 software completion，那就要进行处理；否则直接 SIGFPE 让程序自己处理或者退出。如果是精确异常，那就对 PC-4 进行浮点模拟；如果是非精确异常，就从 trap shadow 的最后一条指令开始往前搜索，并同时记录遇到的指令写入的寄存器，如果发现指令的写入的寄存器已经覆盖了 register write mask，就说明找到了 trap shadow 的开头，则模拟这条指令，然后从下一条开始重新执行。具体代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;alpha_fp_emul_imprecise&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pt_regs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;regs, &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; write_mask)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; trigger_pc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; regs&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; insn, opcode, rc, si_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * Turn off the bits corresponding to registers that are the
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * target of instructions that set bits in the exception
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * summary register.  We have some slack doing this because a
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * register that is the target of a trapping instruction can
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * be written at most once in the trap shadow.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * Branches, jumps, TRAPBs, EXCBs and calls to PALcode all
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * bound the trap shadow, so we need not look any further than
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * up to the first occurrence of such an instruction.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (write_mask) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		get_user(insn, (__u32 __user &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(trigger_pc));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		opcode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; insn &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		rc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; insn &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (opcode) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; OPC_PAL:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; OPC_JSR:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt; ... &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/* branches */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; egress;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; OPC_MISC:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (insn &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffff&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; MISC_TRAPB:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; MISC_EXCB:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; egress;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			      &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; OPC_INTA:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; OPC_INTL:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; OPC_INTS:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; OPC_INTM:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			write_mask &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1UL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; rc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; OPC_FLTC:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; OPC_FLTV:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; OPC_FLTI:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; OPC_FLTL:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			write_mask &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1UL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (rc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;write_mask) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;/* Re-execute insns in the trap-shadow.  */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			regs&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; trigger_pc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			si_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; alpha_fp_emul(trigger_pc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; egress;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		trigger_pc &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;egress:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; si_code;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ARM 架构也有 imprecise asynchronous external abort：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Normally, external aborts are rare. An imprecise asynchronous external
abort is likely to be fatal to the process that is running. An example
of an event that might cause an external abort is an uncorrectable
parity or ECC failure on a Level 2 Memory structure.

Because imprecise asynchronous external aborts are normally fatal to the
process that caused them, ARM recommends that implementations make
external aborts precise wherever possible.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不过这更多是因为内存的无法预知的错误，这种时候机器直接可以拿去维修了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://community.arm.com/developer/ip-products/processors/f/cortex-a-forum/5056/can-anyone-provide-an-example-of-asynchronous-exceptions&#34;&gt;文章&lt;/a&gt; 提到了两个 precise/imprecise async/sync的例子：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;外部中断是异步的，同时也是 precise 的。&lt;/li&gt;
&lt;li&gt;对于一个 Write-allocate 的缓存，如果程序写入一个不存在的物理地址，那么写入缓存的时候不会出现错误，但当这个 cache line 被写入到总线上的时候，就会触发异常，这个异常是异步并且非精确的，因为之前触发这个异常的指令可能已经完成很久了。这种时候这个进程也大概率没救了，直接 SIGBUS 退出。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;处理器前端&#34;&gt;处理器前端&lt;/h2&gt;
&lt;p&gt;再来分析一下乱序执行 CPU 的前端部分。以 RISC-V 为例，指令长度有 4 字节或者 2 字节两种，其中 2 字节属于压缩指令集。如何正确并高效地进行取指令译码？&lt;/p&gt;
&lt;p&gt;首先，我们希望前端能够尽可能快地取指令，前端的取指能力要和后端匹配，比如对于一个四发射的 CPU，前端对应地需要一个周期取 &lt;code&gt;4*4=16&lt;/code&gt; 字节的指令。但是，这 16 字节可能是 4 条非压缩指令，也可能是 8 条压缩指令，也可能是混合的情况。所以，这里会出现一个可能出现指令条数不匹配的情况，所以中间可以添加一个 Fetch Buffer，比如 &lt;a href=&#34;https://github.com/riscv-boom/riscv-boom&#34;&gt;BOOM&lt;/a&gt; 的实现中，L1 ICache 每周期读取 16 字节，然后进行预译码，出来 8 条指令，保存到 Fetch Buffer 中。这里需要考虑以下几点：首先从 ICache 读取的数据是对齐的，但是 PC 可能不是，比如中间的地址。其次，可能一个 4 字节的非压缩指令跨越了两次 Fetch，比如前 2 个字节在前一个 Fetch Bundle，后 2 个字节在后一个 Fetch Bundle；此外，每个 2 字节的边界都需要判断一下是压缩指令还是非压缩指令。一个非常特殊的情况就是，一个 4 字节的指令跨越了两个页，所以两个页都需要查询页表；如果恰好在第二个页处发生了页缺失，此时 epc 是指令的起始地址，但 tval 是第二个页的地址，这样内核才知道是哪个页发生了缺失。&lt;/p&gt;
&lt;p&gt;其次，需要配合分支预测。如果需要保证分支预测正确的情况下，能够在循环中达到接近 100% 的性能，那么，在 Fetch 分支结尾的分支指令的同时，需要保证下一次 Fetch 已经得到了分支预测的目的地址。这个就是 BOOM 里面的 L0 BTB (1-cycle redirect)。但是，一个周期内完成的分支预测，它的面积肯定不能大，否则时序无法满足，所以 BOOM 里面还设计了 2-cycle 和 3-cycle 的比较高级的分支预测器，还有针对函数调用的 RAS（Return Address Stack）。&lt;/p&gt;
&lt;p&gt;分支预测也有很多方法。比较简单的方法是实现一个 BHT，每个项是一个 2 位的饱和计数器，超过一半的时候增加，少于一半时减少。但是，如果遇到了跳转/不跳转/跳转/不跳转这种来回切换的情况，准确率就很低。一个复杂一些的设计，就是用 BHR，记录这个分支指令最近几次的历史，对于每种可能的历史，都对应一个 2 位的饱和计数器。这样，遇到刚才所说的情况就会很好地预测。但实践中会遇到问题：如果在写回之前，又进行了一次预测，因为预测是在取指的时候做的，但是更新 BPU 是在写回的时候完成的，这时候预测就是基于旧的状态进行预测，这时候 BHR 就会出现不准确的问题；而且写回 BPU 的时候，会按照原来的状态进行更新，这个状态可能也是错误的，导致丢失一次更新，识别的模式从跳转/不跳转/跳转/不跳转变成了跳转/跳转/跳转/不跳转，这样又会预测错误。一个解决办法是，在取指阶段，BPU 预测完就立即按照预测的结果更新 BHR，之后写回阶段会恢复到实际的 BHR 取值。论文 &lt;a href=&#34;https://dl.acm.org/doi/10.1145/192724.192756&#34;&gt;The effect of speculatively updating branch history on branch prediction accuracy, revisited&lt;/a&gt; 和 &lt;a href=&#34;https://jilp.org/vol2/v2paper1.pdf&#34;&gt;Speculative Updates of Local and Global Branch History: A Quantitative Analysis&lt;/a&gt; 讨论了这个实现方式对性能的影响。&lt;/p&gt;
&lt;p&gt;比较容易做预测更新和恢复的是全局分支历史，可以维护两个 GHR（Global History Register），一个是目前取指令最新的，一个是提交的最新的。在预测的时候，用 GHR 去找对应的 2-bit 状态，然后把预测结果更新到 GHR 上。在预测失败的时候，把 GHR 恢复为提交的状态。如果要支持一个 Fetch Packet 中有多个分支，可以让 GHR 对应若干个 2-bit 状态，分别对应相应位置上的分支的状态，当然这样面积也会增加很多。&lt;/p&gt;
&lt;h2 id=&#34;处理器内存仿真模型&#34;&gt;处理器/内存仿真模型&lt;/h2&gt;
&lt;p&gt;最后列举一下科研里常用的一些处理器/内存仿真模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gem5: &lt;a href=&#34;https://arxiv.org/abs/2007.03152&#34;&gt;论文 The gem5 Simulator: Version 20.0+&lt;/a&gt; &lt;a href=&#34;https://gem5.googlesource.com/public/gem5&#34;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DRAMSim2: &lt;a href=&#34;https://user.eng.umd.edu/~blj/papers/cal10-1.pdf&#34;&gt;论文 DRAMSim2: A Cycle Accurate Memory System Simulator&lt;/a&gt; &lt;a href=&#34;https://github.com/umd-memsys/DRAMSim2&#34;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DRAMsim3: &lt;a href=&#34;https://ieeexplore.ieee.org/document/8999595&#34;&gt;论文 DRAMsim3: A Cycle-Accurate, Thermal-Capable DRAM Simulator&lt;/a&gt; &lt;a href=&#34;https://github.com/umd-memsys/DRAMsim3&#34;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DRAMSys4.0：&lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-3-030-60939-9_8&#34;&gt;论文 DRAMSys4.0: A Fast and Cycle-Accurate SystemC/TLM-Based DRAM Simulator&lt;/a&gt; &lt;a href=&#34;https://github.com/tukl-msd/DRAMSys&#34;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CACTI: &lt;a href=&#34;https://www.hpl.hp.com/research/cacti/cacti2.pdf&#34;&gt;论文 CACTI 2.0: An Integrated Cache Timing and Power Model&lt;/a&gt; &lt;a href=&#34;https://github.com/HewlettPackard/cacti&#34;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;McPAT: &lt;a href=&#34;https://ieeexplore.ieee.org/document/5375438&#34;&gt;论文 McPAT: An integrated power, area, and timing modeling framework for multicore and manycore architectures&lt;/a&gt; &lt;a href=&#34;https://github.com/HewlettPackard/mcpat&#34;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Multi2Sim: &lt;a href=&#34;https://ieeexplore.ieee.org/document/7842946&#34;&gt;论文 Multi2Sim: A simulation framework for CPU-GPU computing&lt;/a&gt; &lt;a href=&#34;https://github.com/Multi2Sim/multi2sim&#34;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ramulator: &lt;a href=&#34;https://users.ece.cmu.edu/~omutlu/pub/ramulator_dram_simulator-ieee-cal15.pdf&#34;&gt;论文 Ramulator: A Fast and Extensible DRAM Simulator&lt;/a&gt; &lt;a href=&#34;https://github.com/CMU-SAFARI/ramulator&#34;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scarab: &lt;a href=&#34;https://github.com/hpsresearchgroup/scarab&#34;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sniper: &lt;a href=&#34;https://dl.acm.org/doi/abs/10.1145/2063384.2063454&#34;&gt;论文 Sniper: exploring the level of abstraction for scalable and accurate parallel multi-core simulation&lt;/a&gt; &lt;a href=&#34;https://snipersim.org/w/The_Sniper_Multi-Core_Simulator&#34;&gt;官网&lt;/a&gt; &lt;a href=&#34;https://github.com/snipersim/snipersim&#34;&gt;仓库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ZSim: &lt;a href=&#34;https://people.csail.mit.edu/sanchez/papers/2013.zsim.isca.pdf&#34;&gt;论文 ZSim: fast and accurate microarchitectural simulation of thousand-core systems&lt;/a&gt; &lt;a href=&#34;https://github.com/s5z/zsim&#34;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PTLsim: &lt;a href=&#34;https://ieeexplore.ieee.org/document/4211019&#34;&gt;论文 PTLsim: A Cycle Accurate Full System x86-64 Microarchitectural Simulator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>用 sv2v&#43;yosys 把 fpnew 转为 verilog 网表</title>
      <link>https://jia.je/hardware/2022/03/30/sv2v-fpnew/</link>
      <pubDate>Wed, 30 Mar 2022 00:33:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/03/30/sv2v-fpnew/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;FPnew 是一个比较好用的浮点计算单元，但它是 SystemVerilog 编写的，并且用了很多高级特性，虽然闭源软件是支持的，但是开源拖拉机经常会遇到这样那样的问题。所以一直想用 sv2v 把它翻译成 Verilog，但此时的 Verilog 还有很多复杂的结构，再用 yosys 转换为一个通用可综合的网表。&lt;/p&gt;
&lt;h2 id=&#34;步骤&#34;&gt;步骤&lt;/h2&gt;
&lt;p&gt;经过一系列踩坑，一个很重要的点是要用最新的 sv2v(v0.0.9-24-gf868f06) 和 yosys(0.15+70)。Debian 打包的 yosys 版本比较老，不能满足需求。&lt;/p&gt;
&lt;p&gt;首先，用 verilator 进行预处理，把一堆 sv 文件合成一个：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat a.sv b.sv c.sv &amp;gt; test.sv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ verilator -E test.sv &amp;gt; merged.sv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/^`line/d&amp;#39;&lt;/span&gt; merged.sv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意这里用 sed 去掉了无用的行号信息。然后，用 sv2v 进行转换：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sv2v merged.sv &amp;gt; merge.v
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/\$$fatal/d&amp;#39;&lt;/span&gt; merge.v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里又用 sed 把不支持的 $fatal 去掉。最后，用 yosys 进行处理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ yosys -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;read_verilog -defer merge.v&amp;#39;&lt;/span&gt; -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hierarchy -p fpnew_top&amp;#39;&lt;/span&gt; -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;proc&amp;#39;&lt;/span&gt; -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;opt&amp;#39;&lt;/span&gt; -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;write_verilog -noattr output.v&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意这里要用 &lt;code&gt;read_verilog -defer&lt;/code&gt;，否则 yosys 会遇到 TAG_WIDTH=0 默认参数就直接例化，然后就出现 &lt;code&gt;[0:-1]&lt;/code&gt; 这样的下标。&lt;code&gt;read_verilog&lt;/code&gt; 的文档告诉了我们可以分两步做：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-defer
    only read the abstract syntax tree and defer actual compilation
    to a later &#39;hierarchy&#39; command. Useful in cases where the default
    parameters of modules yield invalid or not synthesizable code.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样就得到了简化后的 verilog 代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;$paramod&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;011e4&lt;/span&gt;d7ee08c34f246a38322dc9967d23ecc8081&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;, busy_o);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; _0_;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; _1_;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] arbiter_output;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; busy_o;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; busy_o;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; clk_i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; clk_i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] dst_fmt_i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] dst_fmt_i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; extension_bit_o;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; extension_bit_o;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; flush_i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样虽然比较丑陋，但是解决了 SystemVerilog 的问题。诚然，这样也失去了修改参数的能力，因为参数已经在 yosys 综合途中确定下来了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Synopsys Design Compiler 综合实践</title>
      <link>https://jia.je/hardware/2022/03/14/design-compiler-synthesis/</link>
      <pubDate>Mon, 14 Mar 2022 15:22:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/03/14/design-compiler-synthesis/</guid>
      <description>&lt;h2 id=&#34;工艺库&#34;&gt;工艺库&lt;/h2&gt;
&lt;p&gt;综合很重要的一步是把 HDL 的逻辑变成一个个单元，这些单元加上连接方式就成为了网表。那么，基本单元有哪些，怎么决定用哪些基本单元？&lt;/p&gt;
&lt;p&gt;这个就需要工艺库了，工艺库定义了一个个单元，单元的引脚、功能，还有各种参数，这样 Design Compiler 就可以按照这些信息去找到一个优化的网表。&lt;/p&gt;
&lt;h3 id=&#34;liberty-格式&#34;&gt;Liberty 格式&lt;/h3&gt;
&lt;p&gt;网上可以找到一些 Liberty 格式的工艺库，比如 &lt;a href=&#34;https://raw.githubusercontent.com/The-OpenROAD-Project/OpenROAD-flow-scripts/master/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib&#34;&gt;Nangate45&lt;/a&gt;，它的设定是 25 摄氏度，1.10 伏，属于 TT（Typical/Typical）的 Process Corner。&lt;/p&gt;
&lt;p&gt;在里面可以看到一些基本单元的定理，比如 &lt;code&gt;AND2_X1&lt;/code&gt;，就是一个 drive strength 是 1 的二输入与门：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-liberty&#34; data-lang=&#34;liberty&#34;&gt;cell (AND2_X1) {
    drive_strength : 1;
    pin (A1) {
        direction : input;
    }
    pin (A2) {
        direction : input;
    }
    pin (ZN) {
        direction : output;
        function : &amp;#34;(A1 &amp;amp; A2)&amp;#34;;
    }
    /* ... */
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就定义了两个输入 pin，一个输出 pin，还有它实现的功能。还有很重要的一点是保存了时序信息，比如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-liberty&#34; data-lang=&#34;liberty&#34;&gt;lu_table_template (Timing_7_7) {
    variable_1 : input_net_transition;
    variable_2 : total_output_net_capacitance;
    index_1 (&amp;#34;0.0010,0.0020,0.0030,0.0040,0.0050,0.0060,0.0070&amp;#34;);
    index_2 (&amp;#34;0.0010,0.0020,0.0030,0.0040,0.0050,0.0060,0.0070&amp;#34;);
}
cell (AND2_X1) {
    pin (ZN) {
        timing () {
			related_pin	: &amp;#34;A1&amp;#34;;
            timing_sense : positive_unate;
			cell_fall(Timing_7_7) {
				index_1 (&amp;#34;0.00117378,0.00472397,0.0171859,0.0409838,0.0780596,0.130081,0.198535&amp;#34;);
				index_2 (&amp;#34;0.365616,1.893040,3.786090,7.572170,15.144300,30.288700,60.577400&amp;#34;);
				values (&amp;#34;0.0217822,0.0253224,0.0288237,0.0346827,0.0448323,0.0636086,0.100366&amp;#34;, \
				        &amp;#34;0.0233179,0.0268545,0.0303556,0.0362159,0.0463659,0.0651426,0.101902&amp;#34;, \
				        &amp;#34;0.0296429,0.0331470,0.0366371,0.0425000,0.0526603,0.0714467,0.108208&amp;#34;, \
				        &amp;#34;0.0402311,0.0440292,0.0477457,0.0538394,0.0641187,0.0829203,0.119654&amp;#34;, \
				        &amp;#34;0.0511250,0.0554077,0.0595859,0.0662932,0.0771901,0.0963434,0.133061&amp;#34;, \
				        &amp;#34;0.0625876,0.0673198,0.0719785,0.0794046,0.0910973,0.110757,0.147656&amp;#34;, \
				        &amp;#34;0.0748282,0.0800098,0.0851434,0.0933663,0.106111,0.126669,0.163872&amp;#34;);
			}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先要看 cell_fall 后面的 template 是 Timing_7_7，可以看到 variable_1 和 variable_2 对应的是 input_net_transition 和 total_output_net_capacitance。这里 cell_fall 指的是输出 pin ZN 从 1 变成 0 的时候，这个变化从 A1 的变化传播到 ZN 的时间，这个时间和输入的 transition 时间（大概是从 0 到 1、从 1 到 0 的时间，具体从多少百分比到多少百分比见设置）和输出的 capacitance 有关，所以是一个查找表，查找的时候找最近的点进行插值。输出的 capacitance 取决于 wire load 和连接了这个输出的其他单元的输入。&lt;/p&gt;
&lt;p&gt;除了 cell_fall/cell_rise 两种类型，还有 fall_transition 和 rise_transition，这就是输出引脚的变化时间，又作为后继单元的输入 transition 时间。&lt;/p&gt;
&lt;p&gt;接下来，还能看到功耗的数据：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-liberty&#34; data-lang=&#34;liberty&#34;&gt;power_lut_template (Power_7_7) {
    variable_1 : input_transition_time;
    variable_2 : total_output_net_capacitance;
    index_1 (&amp;#34;0.0010,0.0020,0.0030,0.0040,0.0050,0.0060,0.0070&amp;#34;);
    index_2 (&amp;#34;0.0010,0.0020,0.0030,0.0040,0.0050,0.0060,0.0070&amp;#34;);
}
internal_power () {
    related_pin	         : &amp;#34;A1&amp;#34;;
    fall_power(Power_7_7) {
        index_1 (&amp;#34;0.00117378,0.00472397,0.0171859,0.0409838,0.0780596,0.130081,0.198535&amp;#34;);
        index_2 (&amp;#34;0.365616,1.893040,3.786090,7.572170,15.144300,30.288700,60.577400&amp;#34;);
        values (&amp;#34;2.707163,2.939134,3.111270,3.271119,3.366153,3.407657,3.420511&amp;#34;, \
                &amp;#34;2.676697,2.905713,3.073189,3.236823,3.334156,3.373344,3.387400&amp;#34;, \
                &amp;#34;2.680855,2.891263,3.047784,3.212948,3.315296,3.360694,3.377614&amp;#34;, \
                &amp;#34;2.821141,3.032707,3.182020,3.338567,3.444608,3.488752,3.508229&amp;#34;, \
                &amp;#34;3.129641,3.235525,3.357993,3.567372,3.743682,3.792092,3.808289&amp;#34;, \
                &amp;#34;3.724304,3.738737,3.808381,3.980825,4.147999,4.278043,4.311323&amp;#34;, \
                &amp;#34;4.526175,4.492292,4.510220,4.634217,4.814899,4.934862,5.047389&amp;#34;);
    }
    rise_power(Power_7_7) {
        index_1 (&amp;#34;0.00117378,0.00472397,0.0171859,0.0409838,0.0780596,0.130081,0.198535&amp;#34;);
        index_2 (&amp;#34;0.365616,1.893040,3.786090,7.572170,15.144300,30.288700,60.577400&amp;#34;);
        values (&amp;#34;1.823439,1.926997,1.963153,2.028865,1.957837,2.123314,2.075262&amp;#34;, \
                &amp;#34;1.796317,1.896145,1.960625,2.014112,2.050786,2.046472,1.972327&amp;#34;, \
                &amp;#34;1.811604,1.886741,1.955658,1.978263,1.965671,1.963736,2.071227&amp;#34;, \
                &amp;#34;1.997387,2.045930,2.092357,2.063643,2.099127,1.932089,2.131341&amp;#34;, \
                &amp;#34;2.367285,2.439718,2.440043,2.403446,2.305848,2.351146,2.195145&amp;#34;, \
                &amp;#34;2.916140,2.994325,3.044451,2.962881,2.836259,2.781564,2.633645&amp;#34;, \
                &amp;#34;3.687718,3.756085,3.789394,3.792984,3.773583,3.593022,3.405552&amp;#34;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，这也是一个查找表，也是按照输出的 rise/fall 有不同的功耗。巧合的是，功耗的查找表的 index_1/index_2 和上面的时序查找表是一样的。除了 internal power，还有 leakage power，定义如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-liberty&#34; data-lang=&#34;liberty&#34;&gt;leakage_power_unit : &amp;#34;1nW&amp;#34;;
/* ... */
cell_leakage_power 	: 50.353160;

leakage_power () {
    when           : &amp;#34;!A1 &amp;amp; !A2&amp;#34;;
    value          : 40.690980;
}
leakage_power () {
    when           : &amp;#34;!A1 &amp;amp; A2&amp;#34;;
    value          : 62.007550;
}
leakage_power () {
    when           : &amp;#34;A1 &amp;amp; !A2&amp;#34;;
    value          : 41.294331;
}
leakage_power () {
    when           : &amp;#34;A1 &amp;amp; A2&amp;#34;;
    value          : 57.419780;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，它的 leakage power 取决于输入的状态，单位是 1nW。&lt;/p&gt;
&lt;p&gt;再来看 Flip Flop 的定义：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-liberty&#34; data-lang=&#34;liberty&#34;&gt;cell (DFFRS_X1) {
    ff (&amp;#34;IQ&amp;#34; , &amp;#34;IQN&amp;#34;) {
		next_state         	: &amp;#34;D&amp;#34;;
		clocked_on         	: &amp;#34;CK&amp;#34;;
		preset             	: &amp;#34;!SN&amp;#34;;
		clear              	: &amp;#34;!RN&amp;#34;;
		clear_preset_var1  	: L;
		clear_preset_var2  	: L;
	}
    pin (D) {
		direction		: input;
		capacitance		: 1.148034;
		fall_capacitance	: 1.081549;
		rise_capacitance	: 1.148034;

		timing () {

			related_pin	   : &amp;#34;CK&amp;#34;;
			timing_type	   : hold_rising;
			when	           : &amp;#34;RN &amp;amp; SN&amp;#34;;
			sdf_cond	   : &amp;#34;RN_AND_SN === 1&amp;#39;b1&amp;#34;;
			fall_constraint(Hold_3_3) {
				index_1 (&amp;#34;0.00117378,0.0449324,0.198535&amp;#34;);
				index_2 (&amp;#34;0.00117378,0.0449324,0.198535&amp;#34;);
				values (&amp;#34;0.002921,0.012421,0.011913&amp;#34;, \
				        &amp;#34;0.002707,0.008886,0.005388&amp;#34;, \
				        &amp;#34;0.139993,0.148595,0.137370&amp;#34;);
			}
			rise_constraint(Hold_3_3) {
				index_1 (&amp;#34;0.00117378,0.0449324,0.198535&amp;#34;);
				index_2 (&amp;#34;0.00117378,0.0449324,0.198535&amp;#34;);
				values (&amp;#34;0.004193,0.015978,0.019836&amp;#34;, \
				        &amp;#34;0.020266,0.031864,0.035343&amp;#34;, \
				        &amp;#34;0.099118,0.113075,0.120979&amp;#34;);
			}
		}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，这里的属性变成了 setup/hold 时间。&lt;/p&gt;
&lt;p&gt;SRAM 也有类似的定义，通常是写在单独的 lib 文件中，根据 width 和 depth 生成，比如 &lt;a href=&#34;https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts/blob/master/flow/platforms/nangate45/lib/fakeram45_32x64.lib&#34;&gt;fakeram45_32x64.lib&lt;/a&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-liberty&#34; data-lang=&#34;liberty&#34;&gt;cell(fakeram45_32x64) {
    area : 1754.536;
    interface_timing : true;
    memory() {
        type : ram;
        address_width : 5;
        word_width : 64;
    }
    pin(clk)   {
        direction : input;
        min_period : 0.174 ;
        internal_power(){
            rise_power(scalar) {
                values (&amp;#34;1498.650&amp;#34;)
            }
            fall_power(scalar) {
                values (&amp;#34;1498.650&amp;#34;)
            }
        }
    }
    bus(wd_in)   {
        bus_type : fakeram45_32x64_DATA;
        direction : input;
        timing() {
            related_pin     : clk;
            timing_type     : setup_rising ;
            rise_constraint(scalar) {
                values (&amp;#34;0.050&amp;#34;);
            }
            fall_constraint(scalar) {
                values (&amp;#34;0.050&amp;#34;);
            }
        } 
        internal_power(){
            when : &amp;#34;(we_in)&amp;#34;;
            rise_power(scalar) {
                values (&amp;#34;14.987&amp;#34;);
            }
            fall_power(scalar) {
                values (&amp;#34;14.987&amp;#34;);
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以类似地看到，它的输入 setup/hold，功耗，面积等等信息。&lt;/p&gt;
&lt;h3 id=&#34;db-格式&#34;&gt;DB 格式&lt;/h3&gt;
&lt;p&gt;在给 Design Compiler 配置工艺库前，需要用 Library Compiler 先把 lib 格式转换为更紧凑的二进制 db 格式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;read_lib xxx.lib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;write_lib &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;format db xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实测部分 Liberty 文件会报错，不知道有没有修复的办法。另外，不同版本的 Library Compiler 生成的格式也不大一样，但都是兼容的。&lt;/p&gt;
&lt;p&gt;在 Design Compiler 中，设置当前工艺库命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_app_var target_library xxx.db
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_link_var target_library xxx.db
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# or
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;set_app_var target_library &lt;span style=&#34;color:#66d9ef&#34;&gt;{&lt;/span&gt;xxx.db yyy.db&lt;span style=&#34;color:#66d9ef&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_link_var target_library &lt;span style=&#34;color:#66d9ef&#34;&gt;{&lt;/span&gt;xxx.db yyy.db&lt;span style=&#34;color:#66d9ef&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;综合脚本&#34;&gt;综合脚本&lt;/h2&gt;
&lt;p&gt;准备好工艺库以后，就可以开始编写综合脚本了，通常有这么些步骤：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# step 1: read source code &amp;amp; set top level module name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;read_file &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;format verilog xxx.v
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;read_file &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;format vhdl yyy.vhdl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;current_design xxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# step 2: setup timing constraints
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;create_clock clock &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;period &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0000&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;GHz for example
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# other timing constraints:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# e.g. set_input_delay/set_output_delay
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# step 3: synthesis
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;link
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uniquify
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# use this if you want to ungroup all hierarchy
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ungroup -flatten -all
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# use this to retime design
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# set_optimize_registers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;compile_ultra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# step 4: check &amp;amp; report
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;check_timing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;check_design
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;report_design
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;report_area &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hierarchy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;report_power &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hierarchy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;report_cell
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;report_timing &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;delay_type max
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;report_timing &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;delay_type min
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;report_constraint &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;all_violators
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;report_qor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# step 5: export
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;write &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;format ddc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hierarchy &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;output xxx.ddc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;write_sdc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;version &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; xxx.sdf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;write &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;format verilog &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hierarchy &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;output xxx.syn.v
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;write_sdc xxx.sdc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据需求，进行自定义的修改。综合完成后，可以看到生成的 &lt;code&gt;xxx.syn.v&lt;/code&gt; 文件里都是一个个的 cell，比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AND2X2 U3912 ( .A(n4416), .B(n2168), .Y(n3469) );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OAI21X1 U3913 ( .A(n2872), .B(n4589), .C(n2461), .Y(n3471) );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DFFPOSX1 clock_r_REG147_S1 ( .D(n7634), .CLK(clock), .Q(n7773) );
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还有一些比较特殊的 cell，比如 TIEHI/TIELO 就是恒定输出 1/0，用于门控时钟的 CLKGATE/ICG 等，还有一些综合阶段不会出现的 cell，在后续阶段会使用。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://vlsiuniverse.blogspot.com/2016/12/liberty-format-introduction.html&#34;&gt;Liberty format: an introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eng.biu.ac.il/temanad/files/2017/02/Lecture-4-Standard-Cell-Libraries.pdf&#34;&gt;Digital VLSI Design Lecture 4: Standard Cell Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>OpenROAD Flow 初尝试</title>
      <link>https://jia.je/hardware/2022/03/12/try-openroad-flow/</link>
      <pubDate>Sat, 12 Mar 2022 22:52:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/03/12/try-openroad-flow/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在尝试接触一些芯片前后端的知识。正好有现成的开源工具链 OpenROAD 来做这个事情，借此机会来学习一下整个流程。&lt;/p&gt;
&lt;h2 id=&#34;尝试过程&#34;&gt;尝试过程&lt;/h2&gt;
&lt;p&gt;首先 clone 仓库 OpenROAD-flow-scripts，然后运行：&lt;code&gt;./build_openroad.sh&lt;/code&gt;，脚本会克隆一些仓库，自动进行编译。&lt;/p&gt;
&lt;p&gt;编译中会找不到一些库，比如可能需要安装这些依赖：&lt;code&gt;liblemon-dev libeigen3-dev libreadline-dev swig&lt;/code&gt;，此外运行的时候还需要 &lt;code&gt;klayout&lt;/code&gt; 依赖。&lt;/p&gt;
&lt;p&gt;如果遇到解决 cmake 找不到 LEMON 的问题，这是一个 &lt;a href=&#34;https://lemon.cs.elte.hu/trac/lemon/ticket/628&#34;&gt;BUG&lt;/a&gt;，可以运行下面的命令解决：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /usr/lib/x86_64-linux-gnu/cmake/lemon
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp lemonConfig.cmake LEMONConfig.cmake
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译后整个目录大概有 4.8G，输出的二进制目录是 133M。&lt;/p&gt;
&lt;p&gt;如果要跑一下样例里的 nangate45 工艺的 gcd 例子，运行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd flow
make DESIGN_CONFIG=./designs/nangate45/gcd/config.mk
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;分析-gcd-测例&#34;&gt;分析 GCD 测例&lt;/h2&gt;
&lt;p&gt;这个测例的代码提供了这样一个接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; gcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; clk,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; [  &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] req_msg,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; req_rdy,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; req_val,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; reset,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; [  &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] resp_msg,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; resp_rdy,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; resp_val
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从名字可以推断出，外部通过 req 发送请求到 GCD 模块，然后模块计算出 GCD 后再返回结果。&lt;/p&gt;
&lt;p&gt;根据日志可以看到，从 verilog 到最终的 gds 文件，经过了这些步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一步用 yosys 综合（1_1_yosys），把 verilog 代码转化为网表，网表中的单元就是形如 &lt;code&gt;NAND2_X1&lt;/code&gt; &lt;code&gt;DFF_X1&lt;/code&gt; 等这样由工艺库定义的一些单元。&lt;/li&gt;
&lt;li&gt;第二步进行 floorplan（2_1_floorplan），规划出芯片的大小，逻辑放在哪个位置，输入输出引脚放在什么位置（2_2_floorplan_io），还要考虑 SRAM 等宏或者 IP（2_4_mplace），电源网络 PDN（2_6_floorplan_pdn）&lt;/li&gt;
&lt;li&gt;第三步是 Placement，就是把前面得到的一些 cell 放到芯片上的 (x,y) 坐标上&lt;/li&gt;
&lt;li&gt;第四步是 Clock Tree Synthesis（4_1_cts），简称 CTS，生成时钟树&lt;/li&gt;
&lt;li&gt;第五步是进行路由连线，OpenROAD 有两个路由：FastRoute（5_1_fastroute）和 TritonRoute（5_2_TritonRoute）&lt;/li&gt;
&lt;li&gt;第六步输出结果到 gds 文件（6_1_merge）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些步骤可以在仓库的 &lt;code&gt;flow/Makefile&lt;/code&gt; 里面看得比较清晰，英文版摘抄如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SYNTHESIS
&lt;ol&gt;
&lt;li&gt;Run Synthesis using yosys&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;FLOORPLAN
&lt;ol&gt;
&lt;li&gt;Translate verilog to def&lt;/li&gt;
&lt;li&gt;IO Placement (random)&lt;/li&gt;
&lt;li&gt;Timing Driven Mixed Size Placement (tdms)&lt;/li&gt;
&lt;li&gt;Macro Placement&lt;/li&gt;
&lt;li&gt;Tapcell and Welltie insertion&lt;/li&gt;
&lt;li&gt;PDN generation&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;PLACE
&lt;ol&gt;
&lt;li&gt;Global placement without placed IOs, timing-driven, and routability-driven&lt;/li&gt;
&lt;li&gt;IO placement (non-random)&lt;/li&gt;
&lt;li&gt;Global placement with placed IOs, timing-driven, and routability-driven&lt;/li&gt;
&lt;li&gt;Resizing &amp;amp; Buffering&lt;/li&gt;
&lt;li&gt;Detail placement&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;CTS(Clock Tree Synthesis)
&lt;ol&gt;
&lt;li&gt;Run TritonCTS&lt;/li&gt;
&lt;li&gt;Filler cell insertion&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;ROUTING
&lt;ol&gt;
&lt;li&gt;Run global route (FastRoute)&lt;/li&gt;
&lt;li&gt;Run detailed route (TritonRoute)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后生成的 gds，用 KLayout 打开，可以看到这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/gcd_gds.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;日志里可以看到，预测的总功耗是 1.71 mW，面积占用是 703 um^2。&lt;/p&gt;
&lt;p&gt;还跑了一下其他样例设计的 gds，比如 ibex：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ibex_gds.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;日志里可以看到，预测的总功耗是 10.1 mW，面积占用是 32176 um^2。&lt;/p&gt;
&lt;p&gt;还有 tiny rocket：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/tiny_rocket_gds.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;日志里可以看到，预测的总功耗是 36.8 mW，面积占用是 52786 um^2。&lt;/p&gt;
&lt;h2 id=&#34;工艺库常见术语&#34;&gt;工艺库常见术语&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;slvt/lvt/rvt/hvt: super-low/low/regular/high V threshold 前者速度快：阈值电压低，同时漏电流大&lt;/li&gt;
&lt;li&gt;ss/tt/ff: slow-slow/typical-typical/fast-fast 后者速度快：电压高，温度低，比如 SS（0.99V 125C）TT（1.10V 25C）FF（1.21V -40C）；有时候还会看到 ssg，可以理解为 ss 的比较精确的版本，因此没有那么悲观，延迟比 SS 低一些，详见 &lt;a href=&#34;https://cloud.tencent.com/developer/article/1598417&#34;&gt;STA | ssg 跟 ss corner 的区别——谬误更正版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;c+数字：表示的是 channel length，c40 表示 40nm，数字越大速度越慢，能耗越低&lt;/li&gt;
&lt;li&gt;数字+track：表示的是 track height，sc12 表示 12-track，数字越大速度越快&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ARM 的文档 &lt;a href=&#34;https://developer.arm.com/documentation/102738/0100/Choosing-the-physical-IP-libraries&#34;&gt;Choosing the physical IP libraries&lt;/a&gt; 描述了 Channel length, Track height, Voltage threshold 等不同的选择。&lt;/p&gt;
&lt;p&gt;综合来说，如果要更低的延迟，选择低 vt，小 c 和大 track，反之如果要更低的能耗，选择高 vt，大 c 和 小 track。&lt;/p&gt;
&lt;h2 id=&#34;ccs-vs-nldm&#34;&gt;CCS v.s. NLDM&lt;/h2&gt;
&lt;p&gt;由于物理的特性比较复杂，工艺库里描述的也只是一个大致的模型，刻画了这些 cell 的特性，那么自然可以选取不同的模型。NLDM（上面举的例子就是 NLDM），CCS 就是常见的两个模型，相比之下，CCS 更精确，同时参数更多。更精确的还有直接用 SPICE 描述的电路。详细的对比可以看下面的参考文档。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://theopenroadproject.org/2019/12/11/getting-started-with-openroad-app-part-1/&#34;&gt;GETTING STARTED WITH OPENROAD APP – PART 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://link.springer.com/book/10.1007/b117024&#34;&gt;Advanced ASIC Chip Synthesis Using Synopsys® Design Compiler™ Physical Compiler™ and PrimeTime®&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.paripath.com/blog/characterization-blog/comparing-nldm-and-ccs-delay-models&#34;&gt;Comparing NLDM And CCS delay models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chitlesh.ch/wordpress/liberty-ccs-ecsm-or-ndlm/&#34;&gt;Introduction to Liberty : CCS, ECSM and NDLM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/graymount/article/details/106010388&#34;&gt;STA 概念：一文了解 NLDM 与 CCS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>通过 JTAG 对 VCU128 上的 Rocket Chip 进行调试</title>
      <link>https://jia.je/hardware/2022/03/09/rocket-chip-jtag-debug/</link>
      <pubDate>Wed, 09 Mar 2022 19:04:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/03/09/rocket-chip-jtag-debug/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;两年前，我尝试过用 BSCAN JTAG 来配置 Rocket Chip 的调试，但是这个方法不是很好用，具体来说，如果有独立的一组 JTAG 信号，配置起来会更方便，而且不用和 Vivado 去抢，OpenOCD 可以和 Vivado hw_server 同时运行和工作。但是，苦于 VCU128 上没有 PMOD 接口，之前一直没考虑过在 VCU128 上配置独立的 JTAG。然后最近研究了一下，终于解决了这个问题。&lt;/p&gt;
&lt;h2 id=&#34;寻找-jtag-接口&#34;&gt;寻找 JTAG 接口&lt;/h2&gt;
&lt;p&gt;前几天在研究别的问题的时候，看到 VCU128 文档中的这段话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The FT4232HL U8 multi-function USB-UART on the VCU128 board provides three level-shifted
UART connections through the single micro-AB USB connector J2.
• Channel A is configured in JTAG mode to support the JTAG chain
• Channel B implements 4-wire UART0 (level-shifted) FPGA U1 bank 67 connections
• Channel C implements 4-wire UART1 (level-shifted) FPGA U1 bank 67 connections
• Channel D implements 2-wire (level-shifted) SYSCTLR U42 bank 501 connections
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 Channel A 是到 FPGA 本身的 JTAG 接口，是给 Vivado 用的，如果是通过 BSCAN 的方式，也是在这个 Channel 上，但是需要经过 FPGA 自己的 TAP 再隧道到 BSCAN 上，比较麻烦。Channel B 和 C 是串口，Channel D 是连接 VCU128 上的 System Controller 的。之前的时候，都是直接用 Channel B 做串口，然后突发奇想：注意到这里是 4-wire UART，说明连接到 FPGA 是四条线，那是不是也可以拿来当 JTAG 用？&lt;/p&gt;
&lt;p&gt;查询了一下 FT4232H 的文档，发现它的 Channel A 和 Channel B 是支持 MPSSE 模式的，在 MPSSE 模式下，可以当成 JTAG 使用：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Signal&lt;/th&gt;
&lt;th&gt;Channel A&lt;/th&gt;
&lt;th&gt;Channel B&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TCK&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TDI&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TDO&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TMS&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;对照 VCU128 的 Schematic 看，虽然引脚的编号不大一样，可以发现，Channel A 和 B 分别对应了 ADBUS0-4 和 BDBUS 0-4，对应到 schematic 上的名字是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ADBUS0 - FT4232_TCK&lt;/li&gt;
&lt;li&gt;ADBUS1 - FT4232_TDI&lt;/li&gt;
&lt;li&gt;ADBUS2 - FMCP_HSPC_TDO&lt;/li&gt;
&lt;li&gt;ADBUS3 - FT4232_TMS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这一组是直接连到 FPGA 上专用的 JTAG 引脚，其中 TDO 是连接了额外的逻辑，可以把 FMC 接口上的 JTAG 连接成 daisy chain。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ADBUS0 - FTDI_UART0_TXD_LS - UART0_RXD - BP26 -&amp;gt; TCK&lt;/li&gt;
&lt;li&gt;ADBUS1 - FTDI_UART0_RXD_LS - UART0_TXD - BN26 -&amp;gt; TDI&lt;/li&gt;
&lt;li&gt;ADBUS2 - FTDI_UART0_RTS_B_LS - UART0_RTS_B - BP22 -&amp;gt; TDO&lt;/li&gt;
&lt;li&gt;ADBUS3 - FTDI_UART0_CTS_B_LS - UART0_CTS_B - BP23 -&amp;gt; TMS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里的 RXD/TXD 名字交换也是很容易看错，要小心，只要记住 FT4232H 要求的顺序一定是 TCK-TDI-TDO-TMS 即可。对应到 vivado 内的 xdc 就是这么写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_property &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dict &lt;span style=&#34;color:#66d9ef&#34;&gt;{&lt;/span&gt;PACKAGE_PIN BP26 IOSTANDARD LVCMOS18&lt;span style=&#34;color:#66d9ef&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports jtag_TCK&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_property &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dict &lt;span style=&#34;color:#66d9ef&#34;&gt;{&lt;/span&gt;PACKAGE_PIN BN26 IOSTANDARD LVCMOS18&lt;span style=&#34;color:#66d9ef&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports jtag_TDI&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_property &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dict &lt;span style=&#34;color:#66d9ef&#34;&gt;{&lt;/span&gt;PACKAGE_PIN BP22 IOSTANDARD LVCMOS18&lt;span style=&#34;color:#66d9ef&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports jtag_TDO&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_property &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dict &lt;span style=&#34;color:#66d9ef&#34;&gt;{&lt;/span&gt;PACKAGE_PIN BP23 IOSTANDARD LVCMOS18&lt;span style=&#34;color:#66d9ef&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports jtag_TMS&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，我们要把 Rocket Chip 的 JTAG 信号接出来。&lt;/p&gt;
&lt;h2 id=&#34;配置-rocket-chip-的-jtag&#34;&gt;配置 Rocket Chip 的 JTAG&lt;/h2&gt;
&lt;p&gt;配置 Rocket Chip 的 JTAG，大概需要如下几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给 Config 加上 WithJtagDTM，以 JTAG 作为 DTM 模块&lt;/li&gt;
&lt;li&gt;给 Subsystem 加上 HasPeripheryDebug&lt;/li&gt;
&lt;li&gt;给 SubsystemModuleImp 加上 HasPeripheryDebugModuleImp&lt;/li&gt;
&lt;li&gt;把 JTAG 信号连到自己的顶层模块上&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后一步的相关代码，首先，按照 spec 要求，把 DM 输出的 ndreset 信号连到整个 Rocket 的 reset 上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ndreset can reset all harts
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; childReset &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; reset&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;asBool &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ndreset&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;getOrElse&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;B&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; childReset
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着，把 JTAG 的信号连到顶层：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; systemJtag &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;systemjtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemJtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TCK&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TCK&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemJtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TMS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TMS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemJtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TDI&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TDI&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TDO&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; systemJtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TDO&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了 JTAG 信号以外，还需要配置 IDCODE 相关的变量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemJtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mfr_id &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;JtagDTMKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;idcodeManufId&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;U&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemJtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;part_number &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;JtagDTMKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;idcodePartNum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;U&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemJtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;version &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;JtagDTMKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;idcodeVersion&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;U&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后这一部分比较关键：首先，JTAG 部分的 reset 是独立于其余部分的，这里简单期间就连到了外部的 reset，其实可以改成 FPGA program 的时候进行 reset，然后等时钟来了就释放，实现方法可以参考文末的链接。resetctrl 是给 DM 知道哪些核心被 reset 了，最后是调用 rocket chip 自带的函数。这里踩的一个坑是，传给 systemJtag.reset 一定得是异步的，因为这个时钟域的时钟都是 jtag 的 TCK 信号，所以很可能错过一开始的 reset 信号，所以这里要用异步的 reset。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// MUST use async reset here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// otherwise the internal logic(e.g. TLXbar) might not function
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// if reset deasserted before TCK rises
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;systemJtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reset&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;asAsyncReset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;resetctrl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foreach &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; rc &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hartIsInReset&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foreach &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; childReset &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connectDebugClockAndReset&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; clock&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置-jtag-相关的约束&#34;&gt;配置 JTAG 相关的约束&lt;/h2&gt;
&lt;p&gt;这部分是参考了 pulp 的 VCU118 中 jtag 信号的约束文件。照着抄就行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;create_clock &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;period &lt;span style=&#34;color:#ae81ff&#34;&gt;100.000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name jtag_TCK &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports jtag_TCK&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_input_jitter jtag_TCK &lt;span style=&#34;color:#ae81ff&#34;&gt;1.000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_property CLOCK_DEDICATED_ROUTE FALSE &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_nets jtag_TCK_IBUF_inst&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;O&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_input_delay &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;clock jtag_TCK &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;clock_fall &lt;span style=&#34;color:#ae81ff&#34;&gt;5.000&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports jtag_TDI&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_input_delay &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;clock jtag_TCK &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;clock_fall &lt;span style=&#34;color:#ae81ff&#34;&gt;5.000&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports jtag_TMS&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_output_delay &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;clock jtag_TCK &lt;span style=&#34;color:#ae81ff&#34;&gt;5.000&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports jtag_TDO&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_max_delay &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports jtag_TDO&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20.000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_max_delay &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;from &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports jtag_TMS&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20.000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_max_delay &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;from &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_ports jtag_TDI&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20.000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_clock_groups &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;asynchronous &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;group &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_clocks jtag_TCK&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;group &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_clocks &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;of_objects &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_pins system_i&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;clk_wiz_0&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;inst&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mmcme4_adv_inst&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;CLKOUT1&lt;span style=&#34;color:#66d9ef&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_property ASYNC_REG TRUE &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;get_cells &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hier &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;regexp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;system_i/rocketchip_wrapper_0/.*/cdc_reg_reg.*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和原版本稍微改了一下，一个区别是 &lt;code&gt;set_clock_groups&lt;/code&gt; 的时候，第二个时钟参数用的是 Clocking Wizard 的输出，同时也是 Rocket Chip 自己的时钟输入；另一个区别是用的 ASYNC_REG 查询语句不大一样。我没有具体分析过这些约束为什么这么写，不确定这些约束是否都合理，是否都是需要的，没有测试过不带这些约束会不会出问题。&lt;/p&gt;
&lt;h2 id=&#34;运行-openocd-和-gdb&#34;&gt;运行 OpenOCD 和 GDB&lt;/h2&gt;
&lt;p&gt;最后，采用如下的 OpenOCD 配置来连接：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# openocd config
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# use ftdi channel 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# vcu128 uart0 as jtag
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;adapter speed &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adapter driver ftdi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ftdi_vid_pid &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0403&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6011&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; FT4232H
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ftdi_layout_init &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0008&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000b&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; Output: TCK TDI TMS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ftdi_tdo_sample_edge falling
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ftdi_channel &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; channel B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reset_config none
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; _CHIPNAME riscv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jtag newtap $_CHIPNAME cpu &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;irlen &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; _TARGETNAME $_CHIPNAME.cpu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target create $_TARGETNAME.0 riscv &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;chain-position $_TARGETNAME
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$_TARGETNAME.0 configure &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;work-area-phys &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;work-area-size &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;work-area-backup &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以连接到 Rocket Chip 上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; openocd -f openocd.cfg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Open On-Chip Debugger 0.11.0-rc2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Licensed under GNU GPL v2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For bug reports, read
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        http://openocd.org/doc/doxygen/bugs.html
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : auto-selecting first available session transport &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jtag&amp;#34;&lt;/span&gt;. To override use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transport select &amp;lt;transport&amp;gt;&amp;#39;&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Listening on port &lt;span style=&#34;color:#ae81ff&#34;&gt;6666&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; tcl connections
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Listening on port &lt;span style=&#34;color:#ae81ff&#34;&gt;4444&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; telnet connections
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : clock speed &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; kHz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : JTAG tap: riscv.cpu tap/device found: 0x10000913 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mfg: 0x489 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SiFive Inc&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, part: 0x0000, ver: 0x1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : datacount&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; progbufsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Disabling abstract command reads from CSRs.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Examined RISC-V core; found &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; harts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info :  hart 0: XLEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;64, misa&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x800000000094112d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : starting gdb server &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; riscv.cpu.0 on &lt;span style=&#34;color:#ae81ff&#34;&gt;3333&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Listening on port &lt;span style=&#34;color:#ae81ff&#34;&gt;3333&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; gdb connections
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; riscv64-unknown-elf-gdb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; target remote localhost:3333
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Remote debugging using localhost:3333
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x00000000800001a4 in ?? &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到调试功能都正常了。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;调试这个功能大概花了一天的时间，主要遇到了下面这些问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调试模块的 reset 信号需要是异步的，这个是通过仿真（Remote Bitbang 连接 OpenOCD）调试出来的&lt;/li&gt;
&lt;li&gt;看 schematic 的时候 rxd/txd 搞反了，后来仔细对比才找到了正确的对应关系&lt;/li&gt;
&lt;li&gt;OpenOCD 配置的 irlen 一开始写的不对，dmcontrol 读出来是 0，一直以为是有别的问题，结果改了 irlen 后立马就成功了，这个问题可以让 OpenOCD 自动推断 irlen 来发现&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xilinx.com/support/documentation/boards_and_kits/vcu128/ug1302-vcu128-eval-bd.pdf&#34;&gt;VCU128 User Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ftdichip.com/wp-content/uploads/2020/08/DS_FT4232H.pdf&#34;&gt;FT4232H&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sequencer/rocket-doc/blob/e55f7af549c5859b3c8f5a52c81c4c802153ed60/sanitytests/vcu118/src/DesignKeyWrapper.scala&#34;&gt;DesignKeyWrapper from 中国 Chisel 之父 @sequencer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pulp-platform/pulp/blob/770b4e1d69baf7daceaadcb301ba7212a4310577/fpga/pulp-vcu118/constraints/vcu118.xdc&#34;&gt;pulp VCU118 constraints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>解决 k3s 中 traefik 不会转发 X-Forwarded-For 等头部的问题</title>
      <link>https://jia.je/devops/2022/02/22/k3s-traefik-client-ip/</link>
      <pubDate>Tue, 22 Feb 2022 17:20:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2022/02/22/k3s-traefik-client-ip/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;把应用迁移到 k3s 中，然后用了 traefik 作为 Ingress Controller，发现无法获得真实的用户 IP 地址，而是 cni 内部的地址。搜索了一番，找到了靠谱的解决方案：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@_jonas/traefik-kubernetes-ingresse-x-forwarded-headers-82194d319b0e&#34;&gt;Traefik Kubernetes Ingress and X-Forwarded-Headers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;具体来说，需要给 traefik 传额外的参数，方法是在 k3s 的配置目录下，添加一个 HelmChartConfig：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# edit /var/lib/rancher/k3s/server/manifests/traefik-config.yaml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# content:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apiVersion: helm.cattle.io/v1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kind: HelmChartConfig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name: traefik
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  namespace: kube-system
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  valuesContent: |-
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    additionalArguments:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--entryPoints.web.proxyProtocol.insecure&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--entryPoints.web.forwardedHeaders.insecure&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样相当于让 traefik 信任前一级代理传过来的这些头部。更精细的话，还可以设置信任的 IP 地址范围，不过如果 traefik 不会直接暴露出去，就不用考虑这个问题了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 M1 上运行 Windows ARM 虚拟机</title>
      <link>https://jia.je/os/2022/01/30/windows-on-arm-on-m1/</link>
      <pubDate>Sun, 30 Jan 2022 20:50:00 +0800</pubDate>
      
      <guid>https://jia.je/os/2022/01/30/windows-on-arm-on-m1/</guid>
      <description>&lt;p&gt;目前 Windows ARM 出了预览版，可以从 &lt;a href=&#34;https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewARM64&#34;&gt;Windows Insider Preview Downloads&lt;/a&gt; 下载，得到一个 9.5GB 的 vhdx 文件。&lt;/p&gt;
&lt;p&gt;接着，用 qemu-img 转换为 vmdk 格式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ qemu-img convert Windows11_InsiderPreview_Client_ARM64_en-us_22533.vhdx -O vmdk -o adapter_type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;lsilogic Windows11_InsiderPreview_Client_ARM64_en-us_22533.vmdk
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;转换后，在 VMWare Fusion for Apple Silicon Tech Preview 中，选择从已有的 vmdk 中创建虚拟机，启动前修改一些设置，特别是内存，默认 256MB 肯定不够，默认单核 CPU 也太少了一些。内存不足可能导致安装失败，记住要第一次启动前设置。&lt;/p&gt;
&lt;p&gt;启动以后会无法访问网络，按照下面网页里的方法设置网络：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.gerjon.com/vmware/vmware-fusion-on-apple-silicion-m1/&#34;&gt;https://www.gerjon.com/vmware/vmware-fusion-on-apple-silicion-m1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，bcdedit 选项填的 IP 地址一般是 bridge 上的地址，比如 bridge101 的地址。&lt;/p&gt;
&lt;p&gt;然后就可以正常工作了！&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&#34;https://communities.vmware.com/t5/Fusion-for-Apple-Silicon-Tech/Vmware-Fusion-Apple-Silicon-Support-Windows/m-p/2868331&#34;&gt;VMWare 论坛里&lt;/a&gt;，还谈到了下面几个问题的解决方法：&lt;/p&gt;
&lt;p&gt;为了让声音工作，可以修改 vmx 文件，设置 guestOS：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;guestOS = &amp;#34;arm-windows11-64&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样声音就可以正常播放了。&lt;/p&gt;
&lt;p&gt;分辨率的问题，可以用 RDP 来解决：首先在虚拟机里打开 Remote Desktop，然后用 macOS 的 Microsoft Remote Desktop Beta 访问即可。&lt;/p&gt;
&lt;p&gt;系统里没有 Microsoft Store，要安装的话，用命令行的 Powershell 执行下面的命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wsreset.exe -i
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个方法见 &lt;a href=&#34;https://kb.parallels.com/128520&#34;&gt;Parallels Desktop KB128520&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;UPDATE:&lt;/p&gt;
&lt;p&gt;VMware Fusion 发布了新版本 &lt;a href=&#34;https://blogs.vmware.com/teamfusion/2022/07/just-released-vmware-fusion-22h2-tech-preview.html&#34;&gt;22H2&lt;/a&gt;，有官方的 Windows 11 on ARM 支持了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 11 on Intel and Apple Silicon with 2D GFX and Networking&lt;/li&gt;
&lt;li&gt;VMtools installation for Windows 11 GOS on M1&lt;/li&gt;
&lt;li&gt;Improved Linux support on M1&lt;/li&gt;
&lt;li&gt;3D Graphics HW Acceleration and OpenGL 4.3 in Linux VMs* (Requires Linux 5.19+ &amp;amp; Mesa 22.1.3+)&lt;/li&gt;
&lt;li&gt;Virtual TPM Device&lt;/li&gt;
&lt;li&gt;Fast Encryption&lt;/li&gt;
&lt;li&gt;Universal Binary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并且不需要上面写的网卡的 workaround 了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vmxnet3 Networking Drivers for Windows on ARM

While Windows does not yet ship with our vmxnet3 networking driver for
Windows on ARM as it now does for Intel, the VMware Tools ISO on ARM
contains the 2 currently supported drivers for graphics and networking.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实测安装 VMware Tools 以后，就可以成功用 vmxnet3 网卡上网了，不需要之前的 bcdedit 方案。&lt;/p&gt;
&lt;p&gt;但是目前测试 Linux 虚拟机有一些问题，一些内核版本在启动的时候 vmwgfx 驱动会报错，不能正常显示，但是系统是正常启动的，可以通过 SSH 访问。我测试的情况见下：&lt;/p&gt;
&lt;p&gt;Linux 5.19.6(5.19.0-1-arm64): 可以正常启动和显示，但是没有 3D 加速（按照 VMware 的说法是需要 5.19 内核 + Mesa 22.1.1 以上，但是我的环境版本已经符合了这个要求，可能是 Debian 打包缺了什么东西）；&lt;/p&gt;
&lt;p&gt;UPDATE（2022-09-27）：更新了一下系统，现在 &lt;code&gt;glxinfo&lt;/code&gt; 可以看到 SVGA 了：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Device: SVGA3D; build: RELEASE; LLVM; (0x406)
Version: 22.2.0
Accelerated: no
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是显示有一些 BUG，刷新不正常。&lt;/p&gt;
&lt;p&gt;Linux 5.18(5.18.0-0.bpo.1-arm64): &lt;code&gt;VMware Fusion has encountered an error and has shut down the virtual machine&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Linux 5.16(5.16.0-0.bpo.4-arm64): SSH 也没启动，看不到内核日志&lt;/p&gt;
&lt;p&gt;Linux 5.15.15(5.15.0-0.bpo.3-arm64):&lt;/p&gt;
&lt;p&gt;图形界面起不来，可以通过 SSH 访问。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[   10.765945] kernel BUG at drivers/gpu/drm/vmwgfx/vmwgfx_drv.h:1627!
[   10.766206] Call trace:
[   10.766207]  vmw_event_fence_action_queue+0x328/0x330 [vmwgfx]
[   10.766210]  vmw_stdu_primary_plane_atomic_update+0xd8/0x220 [vmwgfx]
[   10.766214]  drm_atomic_helper_commit_planes+0xf8/0x21c [drm_kms_helper]
[   10.766222]  drm_atomic_helper_commit_tail+0x5c/0xb0 [drm_kms_helper]
[   10.766225]  commit_tail+0x160/0x190 [drm_kms_helper]
[   10.766227]  drm_atomic_helper_commit+0x16c/0x400 [drm_kms_helper]
[   10.766230]  drm_atomic_commit+0x58/0x6c [drm]
[   10.766242]  drm_atomic_helper_set_config+0xe0/0x120 [drm_kms_helper]
[   10.766245]  drm_mode_setcrtc+0x1ac/0x680 [drm]
[   10.766249]  drm_ioctl_kernel+0xd0/0x120 [drm]
[   10.766253]  drm_ioctl+0x250/0x460 [drm]
[   10.766257]  vmw_generic_ioctl+0xbc/0x160 [vmwgfx]
[   10.766261]  vmw_unlocked_ioctl+0x24/0x30 [vmwgfx]
[   10.766264]  __arm64_sys_ioctl+0xb4/0x100
[   10.766287]  invoke_syscall+0x50/0x120
[   10.766300]  el0_svc_common.constprop.0+0x4c/0xf4
[   10.766302]  do_el0_svc+0x30/0x9c
[   10.766303]  el0_svc+0x28/0xb0
[   10.766327]  el0t_64_sync_handler+0x1a4/0x1b0
[   10.766328]  el0t_64_sync+0x1a0/0x1a4
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>RISC-V Vector 1.0 工具链构建</title>
      <link>https://jia.je/software/2022/01/25/rvv-1.0-toolchain/</link>
      <pubDate>Tue, 25 Jan 2022 21:41:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/01/25/rvv-1.0-toolchain/</guid>
      <description>&lt;p&gt;不久前 RVV 1.0 标准终于是出来了，但是工具链的支持目前基本还处于刚 upstream 还没有 release 的状态。而目前 RVV 1.0 的支持主要在 LLVM 上比较活跃，因此也是采用 LLVM Clang + GCC Newlib Toolchain 的方式进行配合，前者做 RVV 1.0 的编译，后者提供 libc 等基础库。&lt;/p&gt;
&lt;p&gt;UPDATE: LLVM 14 已经发布，这个版本已经支持 RVV 1.0，直接从 &lt;a href=&#34;https://apt.llvm.org&#34;&gt;https://apt.llvm.org&lt;/a&gt; 等地安装 LLVM 14 即可。&lt;/p&gt;
&lt;p&gt;LLVM Clang 直接采用 upstream 即可。编译选项：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cmake -G Ninja ../llvm -DCMAKE_C_COMPILER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;clang -DCMAKE_CXX_COMPILER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;clang++ -DCMAKE_INSTALL_PREFIX&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/prefix/llvm -DCMAKE_BUILD_TYPE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Release -DLLVM_ENABLE_PROJECTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clang&amp;#34;&lt;/span&gt; -DLLVM_TARGETS_TO_BUILD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RISCV&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ninja
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ninja install
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ /prefix/llvm/bin/clang --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clang version 14.0.0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;https://github.com/llvm/llvm-project.git 8d298355ca3778a47fd6b3110aeee03ea5e8e02b&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Target: x86_64-unknown-linux-gnu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thread model: posix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;InstalledDir: /data/llvm/bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还需要配合一个 GCC 工具链才可以完整地工作。可以直接采用 riscv-gnu-toolchain nightly 版本，比如 &lt;a href=&#34;https://github.com/riscv-collab/riscv-gnu-toolchain/releases/download/2022.01.17/riscv64-elf-ubuntu-20.04-nightly-2022.01.17-nightly.tar.gz&#34;&gt;riscv64-elf-ubuntu-20.04-nightly-2022.01.17-nightly.tar.gz&lt;/a&gt;。下载以后解压，得到 riscv 目录，GCC 版本是比较新的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ~/riscv/bin/riscv64-unknown-elf-gcc --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;riscv64-unknown-elf-gcc &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GCC&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 11.1.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Copyright &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt; Free Software Foundation, Inc.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This is free software; see the source &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; copying conditions.  There is NO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;warranty; not even &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是如果编译 C++ 程序，链接的时候就会报错：&lt;code&gt;prefixed ISA extension must separate with _&lt;/code&gt;，这是因为 riscv-gnu-toolchain 仓库的 binutils 版本不够新，在 upstream 的 binutils 里面已经修复了这个问题。所以 clone 下来，然后编译，覆盖掉 riscv-gnu-toolchain 里面的 binutils：&lt;/p&gt;
&lt;p&gt;UPDATE: binutils 2.38 已经发布，用这个版本即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ../configure --target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;riscv64-unknown-elf --prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$HOME/riscv --disable-gdb --disable-sim --disable-libdecnumber --disable-readline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make install
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ~/riscv/bin/riscv64-unknown-elf-ld --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GNU ld &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GNU Binutils&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 2.38.50.20220125
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Copyright &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2022&lt;/span&gt; Free Software Foundation, Inc.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This program is free software; you may redistribute it under the terms of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the GNU General Public License version &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; or &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;at your option&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; a later version.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This program has absolutely no warranty.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后编译程序的时候，使用 clang，配置参数 &lt;code&gt;--gcc-toolchain=~/riscv&lt;/code&gt; 即可让 clang 找到 GNU 工具链。这样就可以编译出来 RVV 1.0 的程序了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ /llvm/bin/clang --target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;riscv64-unknown-elf -O2 -march&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rv64gcv1p0 -menable-experimental-extensions -mllvm --riscv-v-vector-bits-min&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; --gcc-toolchain&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$HOME/riscv add.cpp -o add
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ /data/llvm/bin/llvm-objdump --mattr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;+v -S add
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   1020e: &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt; c5   vsetivli        zero, 8, e32, m1, ta, mu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   10212: &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;   vle32.v v8, &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;t1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   10216: &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt; e4 &lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;   vle32.v v9, &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;t2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   1021a: &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt; fe   addi    a5, a4, -32
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   1021e: &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt; e5 &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;   vle32.v v10, &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   10222: &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;   vle32.v v11, &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   10226: &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;   vfadd.vv        v8, v8, v10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   1022a: d7 &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;   vfadd.vv        v9, v9, v11
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   1022e: &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt; fe   addi    a5, a0, -32
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   10232: &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; e4 &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;   vse32.v v8, &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   10236: a7 &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;   vse32.v v9, &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 llvm 的自动向量化是工作的。此外，也可以编写 rvv intrinsic。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jiege.ch 停用</title>
      <link>https://jia.je/misc/2022/01/12/deprecating-jiege-ch/</link>
      <pubDate>Wed, 12 Jan 2022 08:45:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2022/01/12/deprecating-jiege-ch/</guid>
      <description>&lt;p&gt;jiege.ch 域名不再续费，之后一直继续用 jia.je 这个域名。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>分析 Rocket Chip 中 Diplomacy 系统</title>
      <link>https://jia.je/hardware/2022/01/05/diplomacy/</link>
      <pubDate>Wed, 05 Jan 2022 00:29:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/01/05/diplomacy/</guid>
      <description>&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;Diplomacy 主要实现了两个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把整个总线结构在代码中表现出来&lt;/li&gt;
&lt;li&gt;自动配置总线中各个端口的参数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体来说，第一点实现了类似 Vivado Board Design 中连线的功能，第二点则是保证总线两端的参数一致，可以连接起来。&lt;/p&gt;
&lt;p&gt;Diplomacy 为了表示总线的结构，每个模块可以对应一个 Node，Node 和 Node 之间连接形成一个图。Node 的类型主要有以下几个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client：对应 AXI 里面的 Master，发起请求&lt;/li&gt;
&lt;li&gt;Manager：对应 AXI 里面的 Slave，处理请求&lt;/li&gt;
&lt;li&gt;Adapter：对应 AXI Width Converter/Clock Converter/AXI4 to AXI3/AXI4 to AHB bridge 等，会修改 AXI 的参数，然后每个输入对应一个输出&lt;/li&gt;
&lt;li&gt;Nexus：对应 AXI Crossbar，多个输入和多个输出&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每个 Node 可能作为 Manager 连接上游的 Client，这个叫做入边（Inward Edge）；同样地，也可以作为 Client 连接下游的 Manager，这个是出边（Outward Edge）。想象成一个 DAG，从若干个 Client 流向 Manager。&lt;/p&gt;
&lt;p&gt;连接方式采用的是 &lt;code&gt;:=&lt;/code&gt; &lt;code&gt;:=*&lt;/code&gt; &lt;code&gt;:*=&lt;/code&gt; &lt;code&gt;:*=*&lt;/code&gt; 操作符，左侧是 Client，右侧是 Manager。&lt;/p&gt;
&lt;h2 id=&#34;rocket-chip-总线结构&#34;&gt;Rocket Chip 总线结构&lt;/h2&gt;
&lt;p&gt;Rocket Chip 主要有以下几个总线：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sbus: System Bus&lt;/li&gt;
&lt;li&gt;mbus: Memory Bus&lt;/li&gt;
&lt;li&gt;cbus: Control Bus&lt;/li&gt;
&lt;li&gt;pbus: Periphery Bus&lt;/li&gt;
&lt;li&gt;fbus: Frontend Bus&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;图示可以见参考文档中的链接，不过链接中的结构和实际的有一些区别。目前的 Rocket Chip 内存结构大致是这样：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fbus -&amp;gt; sbus -&amp;gt; mbus
tile --/    \-&amp;gt; cbus -&amp;gt; pbus
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主要是 pbus 的位置从连接 sbus 移动到了连接 cbus。&lt;/p&gt;
&lt;p&gt;相关代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Parameterization of a topology containing three additional, optional buses for attaching MMIO devices. */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HierarchicalBusTopologyParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pbus&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PeripheryBusParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fbus&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FrontBusParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cbus&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PeripheryBusParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  xTypes&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SubsystemCrossingParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  driveClocksFromSBus&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Boolean&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TLBusWrapperTopology&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  instantiations &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PBUS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; pbus&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FBUS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; fbus&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CBUS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cbus&lt;span style=&#34;color:#f92672&#34;&gt;)),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  connections &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SBUS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CBUS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TLBusWrapperConnection&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;crossTo&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;xTypes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sbusToCbusXType&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;driveClocksFromSBus&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CBUS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PBUS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TLBusWrapperConnection&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;crossTo&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;xTypes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cbusToPbusXType&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;driveClocksFromSBus&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FBUS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SBUS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TLBusWrapperConnection&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;crossFrom&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;xTypes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fbusToSbusXType&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;driveClocksFromSBus&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然了，也有简化版的 JustOneBusTopology，那就只有 SystemBus 了。如果再配置了 CoherentBusTopology，那么 SBUS 和 MBUS 之间还有一层 L2:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Parameterization of a topology containing a banked coherence manager and a bus for attaching memory devices. */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CoherentBusTopologyParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sbus&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SystemBusParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// TODO remove this after better width propagation
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  mbus&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MemoryBusParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  l2&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BankedL2Params&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sbusToMbusXType&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ClockCrossingType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NoCrossing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  driveMBusClockFromSBus&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Boolean&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TLBusWrapperTopology&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  instantiations &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;l2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nBanks &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MBUS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; mbus&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;L2&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CoherenceManagerWrapperParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mbus&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;blockBytes&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; mbus&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;beatBytes&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; l2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nBanks&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; L2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sbus&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dtsFrequency&lt;span style=&#34;color:#f92672&#34;&gt;)(&lt;/span&gt;l2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;coherenceManager&lt;span style=&#34;color:#f92672&#34;&gt;)))),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  connections &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;l2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nBanks &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SBUS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; L2&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;TLBusWrapperConnection&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;driveClockFromMaster &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; nodeBinding &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BIND_STAR&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)()),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;L2&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;MBUS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;TLBusWrapperConnection&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;crossTo&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      xType &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; sbusToMbusXType&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      driveClockFromMaster &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;driveMBusClockFromSBus&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      nodeBinding &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BIND_QUERY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chipyard.readthedocs.io/en/latest/TileLink-Diplomacy-Reference/index.html&#34;&gt;TileLink and Diplomacy Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chipyard.readthedocs.io/en/latest/Generators/Rocket-Chip.html#memory-system&#34;&gt;Rocket Chip - Memory System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Chisel3 Cookbook</title>
      <link>https://jia.je/hardware/2022/01/03/chisel3-cookbook/</link>
      <pubDate>Mon, 03 Jan 2022 22:19:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/01/03/chisel3-cookbook/</guid>
      <description>&lt;h2 id=&#34;chisel-版本选择&#34;&gt;Chisel 版本选择&lt;/h2&gt;
&lt;p&gt;尽量选择较新版本的 Chisel。Chisel v3.5 完善了编译器插件，使得生成的代码中会包括更多变量名信息。&lt;/p&gt;
&lt;h2 id=&#34;去掉输出-verilog-文件中的寄存器随机初始化&#34;&gt;去掉输出 Verilog 文件中的寄存器随机初始化&lt;/h2&gt;
&lt;p&gt;版本：FIRRTL &amp;gt;= 1.5.0-RC2&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChiselStage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;execute&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;verilog&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-o&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;s&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ChiselGeneratorAnnotation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;genModule&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;CustomDefaultRegisterEmission&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      useInitAsPreset &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      disableRandomization &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置 disableRandomization=true 即可。useInitAsPreset 不建议开启。&lt;/p&gt;
&lt;h2 id=&#34;关闭-firrtl-优化输出尽可能与源代码一致的-verilog&#34;&gt;关闭 FIRRTL 优化，输出尽可能与源代码一致的 Verilog&lt;/h2&gt;
&lt;p&gt;设置 Chisel 生成 MinimumVerilog：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChiselStage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;execute&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mverilog&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-o&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;s&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ChiselGeneratorAnnotation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;genModule&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时代码中会保留更多原始 Chisel 代码的元素。&lt;/p&gt;
&lt;h2 id=&#34;重命名-axi4-为标准命名&#34;&gt;重命名 AXI4 为标准命名&lt;/h2&gt;
&lt;p&gt;Rocket Chip 中 AXI4Bundle 直接生成的名字和标准写法不同，可以利用 Chisel3 3.5.0 的 DataView 功能进行重命名：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// https://www.chisel-lang.org/chisel3/docs/explanations/dataview.html
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// use standard names
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StandardAXI4BundleBundle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; addrBits&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; dataBits&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; idBits&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bundle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWREADY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWVALID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;idBits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWADDR&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addrBits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWLEN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWSIZE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWBURST&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWLOCK&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWCACHE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWPROT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AWQOS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WREADY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WVALID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WDATA&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dataBits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WSTRB&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;dataBits &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WLAST&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BREADY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BVALID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;idBits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BRESP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ARREADY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ARVALID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ARID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;idBits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ARADDR&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addrBits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ARLEN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ARSIZE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ARBURST&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ARLOCK&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ARCACHE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ARPROT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ARQOS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RREADY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RVALID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;idBits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RDATA&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dataBits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RRESP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RLAST&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StandardAXI4BundleBundle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;implicit&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; axiView &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DataView&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;StandardAXI4BundleBundle&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;AXI4Bundle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;](&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vab &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AXI4Bundle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;AXI4BundleParameters&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;vab&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addrBits&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; vab&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dataBits&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; vab&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;idBits&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// AW
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AWREADY&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AWVALID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AWID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AWADDR&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AWLEN&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;len&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AWSIZE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AWBURST&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;burst&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AWLOCK&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lock&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AWCACHE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cache&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AWPROT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;prot&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AWQOS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;qos&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// W
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;WREADY&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;WVALID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;WDATA&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;WSTRB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strb&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;WLAST&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// B
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BREADY&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BVALID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BRESP&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;resp&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// AR
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ARREADY&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ARVALID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ARID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ARADDR&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ARLEN&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;len&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ARSIZE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ARBURST&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;burst&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ARLOCK&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lock&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ARCACHE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cache&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ARPROT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;prot&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ARQOS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;qos&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// R
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;RREADY&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;RVALID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;RID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;RDATA&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;RRESP&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;resp&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;RLAST&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;implicit&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; axiView2 &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StandardAXI4BundleBundle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axiView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;invert&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ab &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StandardAXI4BundleBundle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ab&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addrBits&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ab&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dataBits&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ab&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;idBits
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// usage
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MEM&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StandardAXI4BundleBundle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MEM&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mem_axi4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;viewAs&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;StandardAXI4BundleBundle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;给所有模块添加名称前缀&#34;&gt;给所有模块添加名称前缀&lt;/h2&gt;
&lt;p&gt;有些时候，我们希望给所有模块添加一个名称前缀，防止可能出现的冲突。&lt;/p&gt;
&lt;p&gt;在 Chisel 3 中，可以使用自定义 FIRRTL Transform 来实现这个功能。这一部分的实现参考了 &lt;a href=&#34;https://github.com/chipsalliance/chisel3/issues/1059#issuecomment-814353578&#34;&gt;chisel issue #1059&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; firrtl._
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; firrtl.annotations.NoTargetAnnotation
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; firrtl.options.Dependency
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; firrtl.passes.PassException
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; firrtl.transforms.DedupModules
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// adapted from https://github.com/chipsalliance/chisel3/issues/1059#issuecomment-814353578
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Specifies a global prefix for all module names. */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ModulePrefix&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;prefix&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NoTargetAnnotation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** FIRRTL pass to add prefix to module names
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PrefixModulesPass&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Transform&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DependencyAPIMigration&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// we run after deduplication to save some work
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; prerequisites &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Dependency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DedupModules&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// we do not invalidate the results of any prior passes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; invalidates&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Transform&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; execute&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;state&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CircuitState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CircuitState&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; prefixes &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;annotations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;collect &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; a&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ModulePrefix&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;prefix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}.&lt;/span&gt;distinct
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    prefixes &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[PrefixModulesPass] No ModulePrefix annotation found.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        state
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; state
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; c &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;circuit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mapModule&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;onModule&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; prefix&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;circuit &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;main &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; prefix &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;main&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; other &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PassException&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;s&amp;#34;[PrefixModulesPass] found more than one prefix annotation: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$other&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; onModule&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;m&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ir.DefModule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; prefix&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ir.DefModule&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    m &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; e&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ir.ExtModule&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; prefix &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; mod&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ir.Module&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; prefix &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; mod&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; body &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; onStmt&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mod&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;body&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; prefix&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mod&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; body &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; body&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; onStmt&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ir.Statement&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; prefix&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ir.Statement&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; i&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ir.DefInstance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;module &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; prefix &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;module&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; other             &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mapStmt&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;onStmt&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; prefix&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实现思路就是遍历 IR，找到所有的 Module 并改名，再把所有模块例化也做一次替换。最后在生成 Verilog 的时候添加 Annotation 即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChiselStage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;execute&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-o&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;s&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ChiselGeneratorAnnotation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;genModule&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;RunFirrtlTransformAnnotation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Dependency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PrefixModulesPass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ModulePrefix&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果使用新的 MLIR FIRRTL Compiler，则可以利用 &lt;code&gt;sifive.enterprise.firrtl.NestedPrefixModulesAnnotation&lt;/code&gt; annotation，让 firtool 来进行 &lt;a href=&#34;https://github.com/llvm/circt/blob/fc6b00fd20d8a50f17a908cc681c8cf3a4d1c000/lib/Dialect/FIRRTL/Transforms/PrefixModules.cpp&#34;&gt;prefix 操作&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; sifive &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; enterprise &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; firrtl &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; _root_.firrtl.annotations._
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NestedPrefixModulesAnnotation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; target&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          prefix&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          inclusive&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Boolean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SingleTargetAnnotation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; duplicate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Annotation&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;NestedPrefixModulesAnnotation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; prefix&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; inclusive&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AddPrefix&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; apply&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;module&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Module&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; prefix&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; inclusive&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Boolean&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    annotate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChiselAnnotation&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; toFirrtl &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NestedPrefixModulesAnnotation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;module&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;toTarget&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; prefix&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; inclusive&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个方法的灵感来自 @sequencer。唯一的缺点就是比较 Hack，建议 SiFive 把相关的类也开源出来用。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>升级 Linksys E8450 的 OpenWRT 系统到 UBI</title>
      <link>https://jia.je/networking/2022/01/03/upgrade-e8450-openwrt-ubi/</link>
      <pubDate>Mon, 03 Jan 2022 13:57:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2022/01/03/upgrade-e8450-openwrt-ubi/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;在 &lt;a href=&#34;https://openwrt.org/toh/linksys/e8450&#34;&gt;OpenWRT Linksys E8450 页面&lt;/a&gt; 中，如果要用新版的固件，需要转换到 UBI 格式的文件系统。之前用的是 non-UBI 格式的文件系统，直接在官方的分区下，覆盖掉其中一个启动分区。但是经常会报告 flash 出错，然后系统也不稳定，决定要按照文档更新到 UBI。&lt;/p&gt;
&lt;h2 id=&#34;步骤&#34;&gt;步骤&lt;/h2&gt;
&lt;p&gt;请注意：更换文件系统操作比较危险，请先备份好数据，并做好变砖的心理准备。本文仅记录了作者编写时可行的更新操作，不代表读者在阅读时，依然可以按照这个顺序进行，请按照 &lt;a href=&#34;https://github.com/dangowrt/owrt-ubi-installer&#34;&gt;https://github.com/dangowrt/owrt-ubi-installer&lt;/a&gt; 的文档进行操作。&lt;/p&gt;
&lt;p&gt;基本按照文档一步一步走。初始状态是一个 non-UBI 版本的 OpenWRT 固件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载官方的 1.0 固件：https://downloads.linksys.com/support/assets/firmware/FW_E8450_1.0.01.101415_prod.img&lt;/li&gt;
&lt;li&gt;在 luci 中，刷入官方 1.0 固件，这时候进入了官方固件的系统&lt;/li&gt;
&lt;li&gt;登录官方固件网页，恢复出厂设置&lt;/li&gt;
&lt;li&gt;下载 openwrt ubi recovery &lt;a href=&#34;https://github.com/dangowrt/linksys-e8450-openwrt-installer/releases/download/v0.6.1/openwrt-mediatek-mt7622-linksys_e8450-ubi-initramfs-recovery-installer.itb&#34;&gt;固件&lt;/a&gt; 然后在官方固件里刷入&lt;/li&gt;
&lt;li&gt;这时候进入了 recovery 固件，下载 &lt;a href=&#34;https://downloads.openwrt.org/snapshots/targets/mediatek/mt7622/openwrt-mediatek-mt7622-linksys_e8450-ubi-squashfs-sysupgrade.itb&#34;&gt;ubi 固件&lt;/a&gt;，继续在网页里刷入&lt;/li&gt;
&lt;li&gt;这时候固件就更新完成了。ssh &lt;a href=&#34;mailto:root@192.168.1.1&#34;&gt;root@192.168.1.1&lt;/a&gt;，然后进去安装 luci 等软件，恢复配置即可。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>XRDP 和 NVIDIA 显卡兼容性问题</title>
      <link>https://jia.je/software/2021/12/29/xrdp-nvidia/</link>
      <pubDate>Wed, 29 Dec 2021 15:31:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2021/12/29/xrdp-nvidia/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在尝试配置 XRDP，发现它在有 NVIDIA 的机器上启动远程桌面后会黑屏，查看错误信息可以看到：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;xf86OpenConsole: Cannot open virtual console 1 (Permission denied)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解决方法&#34;&gt;解决方法&lt;/h2&gt;
&lt;p&gt;XRDP 作者在 &lt;a href=&#34;https://github.com/neutrinolabs/xrdp/issues/2010#issuecomment-942561105&#34;&gt;issue #2010&lt;/a&gt; 中提到了解决方法：&lt;/p&gt;
&lt;p&gt;修改 /etc/xrdp/sesman.ini，在 &lt;code&gt;[Xorg]&lt;/code&gt; 部分里加上下面的配置：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;param=-configdir
param=/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实际上就是不让 Xorg 加载 nvidia xorg 驱动，这样就绕过了问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NVIDIA 驱动和 CUDA 版本信息速查</title>
      <link>https://jia.je/software/2021/12/26/nvidia-cuda/</link>
      <pubDate>Sun, 26 Dec 2021 16:03:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2021/12/26/nvidia-cuda/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;之前和 NVIDIA 驱动和 CUDA 搏斗比较多，因此记录一下一些常用信息，方便查询。&lt;/p&gt;
&lt;h2 id=&#34;常用地址&#34;&gt;常用地址&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/cuda-downloads?target_os=Linux&#34;&gt;CUDA Toolkit Downloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/datacenter/tesla/tesla-installation-notes/index.html&#34;&gt;NVIDIA Driver Installation Quickstart Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/Download/index.aspx&#34;&gt;NVIDIA Driver Downloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html&#34;&gt;NVIDIA Docker Installation Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cuda-版本与-nvidia-驱动兼容性&#34;&gt;CUDA 版本与 NVIDIA 驱动兼容性&lt;/h2&gt;
&lt;p&gt;可以通过 apt show cuda-runtime-x-x 找到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cuda 12.1 &amp;gt;= 530&lt;/li&gt;
&lt;li&gt;cuda 12.0 &amp;gt;= 525&lt;/li&gt;
&lt;li&gt;cuda 11.7 &amp;gt;= 515&lt;/li&gt;
&lt;li&gt;cuda 11.6 &amp;gt;= 510&lt;/li&gt;
&lt;li&gt;cuda 11.5 &amp;gt;= 495&lt;/li&gt;
&lt;li&gt;cuda 11.4 &amp;gt;= 470&lt;/li&gt;
&lt;li&gt;cuda 11.3 &amp;gt;= 465&lt;/li&gt;
&lt;li&gt;cuda 11.2 &amp;gt;= 460&lt;/li&gt;
&lt;li&gt;cuda 11.1 &amp;gt;= 455&lt;/li&gt;
&lt;li&gt;cuda 11.0 &amp;gt;= 450&lt;/li&gt;
&lt;li&gt;cuda 10.2 &amp;gt;= 440&lt;/li&gt;
&lt;li&gt;cuda 10.1 &amp;gt;= 418&lt;/li&gt;
&lt;li&gt;cuda 10.0 &amp;gt;= 410&lt;/li&gt;
&lt;li&gt;cuda 9.2 &amp;gt;= 396&lt;/li&gt;
&lt;li&gt;cuda 9.1 &amp;gt;= 387&lt;/li&gt;
&lt;li&gt;cuda 9.0 &amp;gt;= 384&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 nvidia-smi 看到的 CUDA 版本，通常就是这个驱动在上表里对应的 CUDA 版本，例如内核驱动版本是 470 的话，看到的 CUDA 版本就是 11.4。&lt;/p&gt;
&lt;p&gt;不过，实际上兼容的版本会更多一些：&lt;a href=&#34;https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html&#34;&gt;官方文档&lt;/a&gt; 里面写了 CUDA 11.x 可以兼容 NVIDIA &amp;gt;= 450。&lt;/p&gt;
&lt;h2 id=&#34;cuda-版本和-gccclang-版本兼容性&#34;&gt;CUDA 版本和 GCC/Clang 版本兼容性&lt;/h2&gt;
&lt;p&gt;可以在 cuda/include/crt/host_config.h 文件里找到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cuda 12.1: gcc &amp;lt;= 12, 3.2 &amp;lt; clang &amp;lt; 16&lt;/li&gt;
&lt;li&gt;cuda 12.0: gcc &amp;lt;= 12, 3.2 &amp;lt; clang &amp;lt; 15&lt;/li&gt;
&lt;li&gt;cuda 11.5: gcc &amp;lt;= 11&lt;/li&gt;
&lt;li&gt;cuda 11.4: gcc &amp;lt;= 10&lt;/li&gt;
&lt;li&gt;cuda 11.3: gcc &amp;lt;= 10, 3.2 &amp;lt; clang &amp;lt; 12&lt;/li&gt;
&lt;li&gt;cuda 11.1: gcc &amp;lt;= 10, 3.2 &amp;lt; clang &amp;lt; 11&lt;/li&gt;
&lt;li&gt;cuda 11.0: gcc &amp;lt;= 9, 3.2 &amp;lt; clang &amp;lt; 10&lt;/li&gt;
&lt;li&gt;cuda 10.2: gcc &amp;lt;= 8, 3.2 &amp;lt; clang &amp;lt; 9&lt;/li&gt;
&lt;li&gt;cuda 10.1: gcc &amp;lt;= 8, 3.2 &amp;lt; clang &amp;lt; 9&lt;/li&gt;
&lt;li&gt;cuda 10.0: gcc &amp;lt;= 7&lt;/li&gt;
&lt;li&gt;cuda 9.1: gcc &amp;lt;= 6&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cuda-版本与显卡兼容性&#34;&gt;CUDA 版本与显卡兼容性&lt;/h2&gt;
&lt;p&gt;编译选项与显卡对应关系 &lt;a href=&#34;https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/&#34;&gt;https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以在 &lt;code&gt;nvcc --help&lt;/code&gt; 搜索 gpu-architecture 找到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cuda 12.0 sm_50 to sm_90a&lt;/li&gt;
&lt;li&gt;cuda 11.4 sm_35 to sm_87&lt;/li&gt;
&lt;li&gt;cuda 11.3 sm_35 to sm_86&lt;/li&gt;
&lt;li&gt;cuda 11.1 sm_35 to sm_86&lt;/li&gt;
&lt;li&gt;cuda 11.0 sm_35 to sm_80&lt;/li&gt;
&lt;li&gt;cuda 10.2 sm_30 to sm_75&lt;/li&gt;
&lt;li&gt;cuda 10.0 sm_30 to sm_75&lt;/li&gt;
&lt;li&gt;cuda 9.1 sm_30 to sm_72&lt;/li&gt;
&lt;li&gt;cuda 9.0 sm_30 to sm_70&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;显卡的 Compute Capability 可以在 &lt;a href=&#34;https://developer.nvidia.com/cuda-gpus&#34;&gt;https://developer.nvidia.com/cuda-gpus&lt;/a&gt; 找到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;H100: 90&lt;/li&gt;
&lt;li&gt;A100: 80&lt;/li&gt;
&lt;li&gt;V100: 70&lt;/li&gt;
&lt;li&gt;P100: 60&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;升级-nvidia-驱动&#34;&gt;升级 NVIDIA 驱动&lt;/h2&gt;
&lt;p&gt;升级后，需要 rmmod 已有的，再 modprobe 新的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo rmmod nvidia_uvm nvidia_drm nvidia_modeset nvidia &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo modprobe nvidia
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果发现 rmmod 失败，可以 &lt;code&gt;lsof /dev/nvidiactl&lt;/code&gt; 查看谁在占用。DGX 上需要停止：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl stop nvsm.service
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl stop nvidia-dcgm.service 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>「教学」缓存一致性协议分析</title>
      <link>https://jia.je/hardware/2021/12/17/cache-coherency-protocol/</link>
      <pubDate>Fri, 17 Dec 2021 07:39:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/12/17/cache-coherency-protocol/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/cache_coherence_protocol.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在《高等计算机系统结构》课程中学习缓存一致性协议算法，这里用自己的语言来组织一下相关知识的讲解。&lt;/p&gt;
&lt;h2 id=&#34;write-invalidate-和-write-update&#34;&gt;Write-invalidate 和 Write-update&lt;/h2&gt;
&lt;p&gt;最基础的缓存一致性思想有两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write-invalidate：写入数据的时候，将其他 Cache 中这条 Cache Line 设为 Invalid&lt;/li&gt;
&lt;li&gt;Write-update：写入数据的时候，把新的结果写入到有这条 Cache Line 的其他 Cache&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;write-once-协议&#34;&gt;Write-once 协议&lt;/h2&gt;
&lt;p&gt;Write-once 协议定义了四个状态：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Invalid：表示这个块不合法&lt;/li&gt;
&lt;li&gt;Valid：表示这个块合法，并可能是共享的，同时数据没有修改&lt;/li&gt;
&lt;li&gt;Reserved：表示这个块合法，不是共享的，同时数据没有更改&lt;/li&gt;
&lt;li&gt;Dirty：表示这个块合法，不是共享的，数据做了修改，和内存不同。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可见，当一个缓存状态在 R 或者 D，其他缓存只能是 I；而缓存状态是 V 的时候，可以有多个缓存在 V 状态。&lt;/p&gt;
&lt;p&gt;Write-once 协议的特点是，第一次写的时候，会写入到内存（类似 Write-through），连续写入则只写到缓存中，类似 Write-back。&lt;/p&gt;
&lt;p&gt;当 Read hit 的时候，状态不变。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Read hit: The information is supplied by the current cache. No state change.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当 Read miss 的时候，会查看所有缓存，如果有其他缓存处于 Valid/Reserved/Dirty 状态，就从其他缓存处读取数据，然后设为 Valid，其他缓存也设为 Valid。如果其他缓存处于 Dirty 状态，还要把数据写入内存。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Read miss: The data is read from main memory. The read is snooped by other caches; if any of them have the line in the Dirty state, the read is interrupted long enough to write the data back to memory before it is allowed to continue. Any copies in the Dirty or Reserved states are set to the Valid state.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当 Write hit 的时候，如果是 Valid 状态，首先写入内存，把其他 Cache 都设为 Invalid，进入 Reserved 状态，这意味着第一次写是 Write-through。如果是 Reserved/Dirty 状态，则不修改内存，进入 Dirty 状态，这表示后续的写入都是 Write-back。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Write hit: If the information in the cache is in Dirty or Reserved state, the cache line is updated in place and its state is set to Dirty without updating memory. If the information is in Valid state, a write-through operation is executed updating the block and the memory and the block state is changed to Reserved. Other caches snoop the write and set their copies to Invalid.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当 Write miss 的时候，这个行为 Wikipedia 上和上课讲的不一样。按照 Wikipedia 的说法，首先按照 Read miss 处理，再按照 Write hit 处理，类似于 Write Allocate 的思路。如果是这样的话，那么首先从其他缓存或者内存读取数据，然后把其他缓存都设为 Invalid，把更新后的数据写入内存，进入 Reserved 状态。相当于 Write miss 的时候，也是按照 Write-through 实现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Write miss: A partial cache line write is handled as a read miss (if necessary to fetch the unwritten portion of the cache line) followed by a write hit. This leaves all other caches in the Invalid state, and the current cache in the Reserved state.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;教材上则是 Write miss 的时候按照 Write-back 处理。如果其他缓存都是 Invalid 时，从内存里读取数据，然后写入到缓存中，进入 Dirty 状态。如果其他缓存是 Valid/Reserved/Dirty 状态，就从其他缓存里读取数据，让其他缓存都进入 Invalid 状态，然后更新自己的数据，进入 Dirty 状态。&lt;/p&gt;
&lt;h2 id=&#34;msi-协议&#34;&gt;MSI 协议&lt;/h2&gt;
&lt;p&gt;MSI 协议比较简单，它定义了三个状态：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Modified：表示数据已经修改，和内存里不一致&lt;/li&gt;
&lt;li&gt;Shared：数据和内存一致，可以有一到多个缓存同时处在 Shared 状态&lt;/li&gt;
&lt;li&gt;Invalid：不在缓存中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当 Read hit 的时候，状态不变。&lt;/p&gt;
&lt;p&gt;当 Read miss 的时候，检查其他缓存的状态，如果都是 Invalid，就从内存里读取，然后进入 Shared 状态。如果有 Shared，就从其他缓存处读取。如果有 Dirty，那就要把其他缓存的数据写入内存和本地缓存，然后进入 Shared 状态。&lt;/p&gt;
&lt;p&gt;当 Write hit 的时候，如果现在是 Shared 状态，则要让其他的 Shared 缓存进入 Invalid 状态，然后更新数据，进入 Modified 状态。如果是 Modified 状态，那就修改数据，状态保持不变。&lt;/p&gt;
&lt;p&gt;当 Write miss 的时候，如果有其他缓存处于 Modified/Shared 状态，那就从其他缓存处读取数据，并让其他缓存进入 Invalid 状态，然后修改本地数据，进入 Modified 状态。如果所有缓存都是 Invalid 状态，那就从内存读入，然后修改缓存数据，进入 Modified 状态。&lt;/p&gt;
&lt;h2 id=&#34;mesi-协议&#34;&gt;MESI 协议&lt;/h2&gt;
&lt;p&gt;MESI 协议定义了四种状态：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Modified：数据与内存不一致，并且只有一个缓存有数据&lt;/li&gt;
&lt;li&gt;Exclusive：数据与内存一致，并且只有一个缓存有数据&lt;/li&gt;
&lt;li&gt;Shared：数据与内存一致，可以有多个缓存同时有数据&lt;/li&gt;
&lt;li&gt;Invalid：不在缓存中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当 Read hit 的时候，状态不变。&lt;/p&gt;
&lt;p&gt;当 Read miss 的时候，首先会检查其他缓存的状态，如果有数据，就从其他缓存读取数据，并且都进入 Shared 状态，如果其他缓存处于 Modified 状态，还需要把数据写入内存；如果其他缓存都没有数据，就从内存里读取，然后进入 Exclusive 状态。&lt;/p&gt;
&lt;p&gt;当 Write hit 的时候，进入 Modified 状态，同时让其他缓存进入 Invalid 状态。&lt;/p&gt;
&lt;p&gt;当 Write miss 的时候，检查其他缓存的状态，如果有数据，就从其他缓存读取，否则从内存读取。然后，其他缓存都进入 Invalid 状态，本地缓存更新数据，进入 Modified 状态。&lt;/p&gt;
&lt;p&gt;值得一提的是，Shared 状态不一定表示只有一个缓存有数据：比如本来有两个缓存都是 Shared 状态，然后其中一个因为缓存替换变成了 Invalid，那么另一个是不会受到通知变成 Exclusive 的。Exclusive 的设置是为了减少一些总线请求，比如当数据只有一个核心访问的时候，只有第一次 Read miss 会发送总线请求，之后一直在 Exclusive/Modified 状态中，不需要发送总线请求。&lt;/p&gt;
&lt;h2 id=&#34;moesi-协议&#34;&gt;MOESI 协议&lt;/h2&gt;
&lt;p&gt;MOESI 定义了五个状态：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Modified：数据经过修改，并且只有一个缓存有这个数据&lt;/li&gt;
&lt;li&gt;Owned：同时有多个缓存有这个数据，但是只有这个缓存可以修改数据&lt;/li&gt;
&lt;li&gt;Exclusive：数据没有修改，并且只有一个缓存有这个数据&lt;/li&gt;
&lt;li&gt;Shared：同时有多个缓存有这个数据，但是不能修改数据&lt;/li&gt;
&lt;li&gt;Invalid：不在缓存中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;状态中，M 和 E 是独占的，所有缓存里只能有一个。此外，可以同时有多个 S，或者多个 S 加一个 O，但是不能同时有多个 O。&lt;/p&gt;
&lt;p&gt;它的状态转移与 MESI 类似，区别在于：当核心写入 Owned 状态的缓存时，有两种方式：1）通知其他 Shared 的缓存更新数据；2）把其他 Shared 缓存设为 Invalid，然后本地缓存进入 Modified 状态。在 Read miss 的时候，则可以从 Owned 缓存读取数据，进入 Shared 状态，而不用写入内存。它相比 MESI 的好处是，减少了写回内存的次数。&lt;/p&gt;
&lt;p&gt;AMD64 文档里采用的就是 MOESI 协议。AMBA ACE 协议其实也是 MOESI 协议，只不过换了一些名称，表示可以兼容 MEI/MESI/MOESI 中的一个协议。ACE 对应关系如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UniqueDirty: Modified&lt;/li&gt;
&lt;li&gt;SharedDirty: Owned&lt;/li&gt;
&lt;li&gt;UniqueClean: Exclusive&lt;/li&gt;
&lt;li&gt;SharedClean: Shared&lt;/li&gt;
&lt;li&gt;Invalid: Invalid&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要注意的是，SharedClean 并不代表它的数据和内存一致，比如说和 SharedDirty 缓存一致，它只是说缓存替换的时候，不需要写回内存。&lt;/p&gt;
&lt;h2 id=&#34;dragon-协议&#34;&gt;Dragon 协议&lt;/h2&gt;
&lt;p&gt;Dragon 协议是一个基于更新的协议，意味着写入缓存的时候，会把更新的数据同步到拥有这个缓存行的其他核心。它定义了四个状态：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Exclusive clean(E)：独占，并且数据和内存一致&lt;/li&gt;
&lt;li&gt;Shared clean(Sc)：数据同时存在多个缓存中，并且自己不是最后一个写入该缓存数据的&lt;/li&gt;
&lt;li&gt;Shared modified(Sm)：数据同时存在多个缓存中，并且自己设最后一个写入该缓存数据的，类似于前面 MOESI 协议的 Owner 状态&lt;/li&gt;
&lt;li&gt;Modify(M)：独占，并且数据和内存不一致&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，E 和 M 都是独占的，如果出现了多个缓存有同一个缓存行，那就是若干个 Sc 和一个 Sm。&lt;/p&gt;
&lt;p&gt;当 Read miss 的时候，在总线上检查是否有缓存已经有这个缓存行的数据，如果没有，则从内存读取并转到 Exclusive clean 状态；如果已经在其他缓存中，则从其他缓存读取，将其他缓存转移到 Shared clean/Shared modified 状态，然后该缓存转移到 Shared clean 状态。&lt;/p&gt;
&lt;p&gt;当 Write miss 的时候，同样检查其他缓存的状态，如果是第一个访问的，就从内存读取，更新数据，然后转到 Modify 状态；如果不是第一个访问的，就进入 Shared modified 状态，并且让原来 Shared modified 的缓存进入 Shared clean 状态。&lt;/p&gt;
&lt;p&gt;当 Write hit 的时候，如果状态是 Shared modified，这时候需要通知其他缓存更新数据；如果状态是 Shared clean，则要通知其他缓存更新数据的同时，让原来 Shared modified 的缓存进入 Shared clean 状态；如果状态是 Exclusive clean，则进入 Modify 状态。&lt;/p&gt;
&lt;p&gt;在这里，Shared modified 的缓存负责在换出的时候，写入数据到内存中。&lt;/p&gt;
&lt;h2 id=&#34;ace-协议&#34;&gt;ACE 协议&lt;/h2&gt;
&lt;p&gt;ACE 协议在 AXI 的基础上，添加了三个 channel：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AC: Coherent address channel, Input to master: ACADDR, ACSNOOP, ACPROT&lt;/li&gt;
&lt;li&gt;CR: Coherent response channel, Output from master: CRRESP&lt;/li&gt;
&lt;li&gt;CD: Coherent data channel, Output from master: CDDATA, CDLAST&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此外，已有的 Channel 也添加了信号：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ARSNOOP[3:0]/ARBAR[1:0]/ARDOMAIN[1:0]&lt;/li&gt;
&lt;li&gt;AWSNOOP[3:0]/AWBAR[1:0]/AWDOMAIN[1:0]/AWUNIQUE&lt;/li&gt;
&lt;li&gt;RRESP[3:2]&lt;/li&gt;
&lt;li&gt;RACK/WACK&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ACE-lite 只在已有 Channel 上添加了新信号，没有添加新的 Channel。因此它内部不能有 Cache，但是可以访问一致的缓存内容。&lt;/p&gt;
&lt;p&gt;当 Read miss 的时候，首先 AXI master 发送 read transaction 给 Interconnect，Interconnect 向保存了这个缓存行的缓存发送 AC 请求，如果有其他 master 提供了数据，就向请求的 master 返回数据；如果没有其他 master 提供数据，则向内存发起读请求，并把结果返回给 master，最后 master 提供 RACK 信号。&lt;/p&gt;
&lt;p&gt;当 Write miss 的时候，也是类似地，AXI master 发送 MakeUnique 请求给 Interconnect，Interconnect 向保存了该缓存行的缓存发送请求，要求其他 master 状态改为 Invalid；当所有 master 都已经 invalidate 成功，就向原 AXI master 返回结果。&lt;/p&gt;
&lt;h2 id=&#34;基于目录的缓存一致性&#34;&gt;基于目录的缓存一致性&lt;/h2&gt;
&lt;p&gt;上面的缓存一致性协议中，经常有这么一个操作：向所有有这个缓存行的缓存发送/接受消息。简单的方法是直接广播，然后接受端自己判断是否处理。但是这个方法在核心很多的时候会导致广播流量太大，因此需要先保存下来哪些缓存会有这个缓存的信息，然后对这些缓存点对点地发送。这样就可以节省一些网络流量。&lt;/p&gt;
&lt;p&gt;那么，怎么记录这个信息呢？一个简单的办法（Full bit vector format）是，有一个全局的表，对每个缓存行，都记录一个大小为 N（N 为核心数）的位向量，1 表示对应的核心中有这个缓存行。但这个方法保存数据量太大：缓存行数正比于 N，还要再乘以一次 N，总容量是 O(N^2) 的。&lt;/p&gt;
&lt;p&gt;一个稍微好一些的方法（Coarse bit vector format）是，我把核心分组，比如按照 NUMA 节点进行划分，此时每个缓存行都保存一个大小为 M（M 为 NUMA 数量）的位向量，只要这个 NUMA 节点里有这个缓存行，对应位就取 1。这样相当于是以牺牲一部分流量为代价（NUMA 节点内部广播），来节省一些目录的存储空间。&lt;/p&gt;
&lt;p&gt;但实际上，通常情况下，一个缓存行通常只会在很少的核心中保存，所以这里有很大的优化空间。比如说，可以设置一个缓存行同时出现的缓存数量上限 (Limited pointer format)，然后保存核心的下标而不是位向量，这样的存储空间就是 O(Nlog2N)。但是呢，这样限制了缓存行同时出现的次数，如果超过了上限，需要替换掉已有的缓存，可能在一些场景下性能会降低。&lt;/p&gt;
&lt;p&gt;还有一种方式，就是链表 (Chained directory format)。目录中保存最后一次访问的核心编号，然后每个核心的缓存里，保存了下一个保存了这个缓存行的核心编号，或者表示链表终止。这样存储空间也是 O(Nlog2N)，不过发送消息的延迟更长，因为要串行遍历一遍，而不能同时发送。类似地，可以用二叉树 (Number-balanced binary tree format) 来组织：每个缓存保存两个指针，指向左子树和右子树，然后分别遍历，目的还是加快遍历的速度，可以同时发送消息给多个核心。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cache_coherence&#34;&gt;Cache coherence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/MSI_protocol&#34;&gt;MSI protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Write-once_(cache_coherence)&#34;&gt;Write-once (cache coherence)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/MESI_protocol&#34;&gt;MESI protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/MOESI_protocol&#34;&gt;MOESI protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Dragon_protocol&#34;&gt;Dragon protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.synopsys.com/vip-central/2014/12/23/a-strategy-to-verify-an-axi-ace-compliant-interconnect-part-2-of-4/&#34;&gt;A Strategy to Verify an AXI/ACE Compliant Interconnect (2 of 4)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Directory-based_cache_coherence&#34;&gt;Directory-based cache coherence&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>DRAM 在 Kintex 7 FPGA 上内部 Vref 的性能问题</title>
      <link>https://jia.je/hardware/2021/12/13/dram-fpga-vref-problem/</link>
      <pubDate>Mon, 13 Dec 2021 20:06:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/12/13/dram-fpga-vref-problem/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近我们设计的 Kintex 7 FPGA 开发板在测试 DDR SDRAM 的时候遇到了一个问题，因为采用了 Internel VREF，MIG 在配置的时候限制了频率只能是 400 MHz，对应 800 MT/s，这样无法达到 DDR 的最好性能。&lt;/p&gt;
&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;
&lt;p&gt;首先，VREF 在 DDR 中是用来区分低电平和高电平的。在 JESD79-4B 标准中，可以看到，对于直流信号，电压不小于 VREF+0.075V 时表示高电平，而电压不高于 VREF-0.075V 时表示低电平。VREF 本身应该介于 VDD 的 0.49 倍到 0.51 倍之间。&lt;/p&gt;
&lt;p&gt;在连接 FPGA 的时候，有两种选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internal VREF: 从 FPGA 输出 VREF 信号到 DRAM&lt;/li&gt;
&lt;li&gt;External VREF：接入 FPGA 以外的 VREF&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于 7 Series 的 FPGA，Xilinx 要求如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;For DDR3 SDRAM interfaces running at or below 800 Mb/s (400 MHz),
users have the option of selecting Internal VREF to save two I/O
pins or using external VREF. VREF is required for banks containing
DDR3 interface input pins (DQ/DQS).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进一步，Xilinx 在 UltraScale 文档下解释了背后的原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The UltraScale internal VREF circuit includes enhancements compared
to the 7 Series internal VREF circuit. Whereas 7 Series MIG had datarate
limitations on internal VREF usage (see (Xilinx Answer 42036)), internal
VREF is recommended in UltraScale. The VREF for 7 Series had coarse steps
of VREF value that were based on VCCAUX. This saved pins but limited the
performance because VCCAUX did not track with VCCO as voltage went up and
down. Not being able to track with VCCO enforced the performance
limitations of internal VREF in MIG 7 Series. UltraScale includes several
changes to internal VREF including a much finer resolution of VREF for DDR4
read VREF training. Additionally, internal VREF is based on the VCCO supply
enabling it to track with VCCO. Internal VREF is not subject to PCB and
Package inductance and capacitance. These changes in design now give internal
VREF the highest performance.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用中文简单来说：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;7 Series FPGA 中，Internal VREF 可以节省引脚，代价是 VREF 不会随着 VCCO 变化而变化（而是随着 VCCAUX 变化而变化），当 DRAM 频率提高的时候，可能无法满足 VREF 约等于 VDD 一半的要求&lt;/li&gt;
&lt;li&gt;UltraScale FPGA 中，Internal VREF 是随着 VCCO 变化而变化的，并且会比 External VREF 性能更好；因此 UltraScale FPGA 的 DDR4 只支持 Internal VREF。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以 MA703FA-35T 开发板为例，它使用的 FPGA 是 Artix7 35T，内存是 DDR3，采用的是 External VREF。它采用了 &lt;a href=&#34;https://www.ti.com/lit/ds/symlink/tps51200.pdf&#34;&gt;TPS51200 Sink and Source DDR Termination Regulator&lt;/a&gt; 芯片，将芯片的 REFOUT 芯片接到 DRAM 的 VREFDQ 和 VREFCA 引脚上。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.xilinx.com/s/article/42036?language=en_US&#34;&gt;MIG 7 Series - Internal/External VREF Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.xilinx.com/s/article/64410?language=en_US&#34;&gt;UltraScale/UltraScale+ Memory IP - Can either external or internal VREF be used?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>「教学」DRAM 结构和特性</title>
      <link>https://jia.je/hardware/2021/12/12/dram/</link>
      <pubDate>Sun, 12 Dec 2021 15:06:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/12/12/dram/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/sdram.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;dram-是如何组织的&#34;&gt;DRAM 是如何组织的&lt;/h2&gt;
&lt;p&gt;DRAM 分成很多层次：Bank Group，Bank，Row，Column，从大到小，容量也是各级别的乘积。&lt;/p&gt;
&lt;p&gt;举例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4 Bank Group&lt;/li&gt;
&lt;li&gt;4 Bank per Bank Group&lt;/li&gt;
&lt;li&gt;32,768 Row per Bank&lt;/li&gt;
&lt;li&gt;1024 Column per Row&lt;/li&gt;
&lt;li&gt;4 Bits per Column&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么总大小就是 &lt;code&gt;4*4*32768*1024*4=2 Gb&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;访问模式&#34;&gt;访问模式&lt;/h2&gt;
&lt;p&gt;DRAM 的访问模式决定了访问内存的实际带宽。对于每次访问，需要这样的操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用 ACT(Bank Activate) 命令打开某个 Bank Group 下面的某个 Bank 的某个 Row，此时整个 Row 的数据都会复制到 Sense Amplifier 中。这一步叫做 RAS（Row Address Strobe）&lt;/li&gt;
&lt;li&gt;用 RD(Read)/WR(Write) 命令按照 Column 访问数据。这一步叫做 CAS（Column Address Strobe）。&lt;/li&gt;
&lt;li&gt;在访问其他 Row 之前，需要用 PRE(Single Bank Precharge) 命令将 Sense Amplifier 中整个 Row 的数据写回 Row 中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，如果访问连续的地址，就可以省下 ACT 命令的时间，可以连续的进行 RD/WR 命令操作。&lt;/p&gt;
&lt;p&gt;除了显式 PRE 以外，还可以在某次读写之后自动进行 PRE：WRA(Write with Auto-Precharge) 和 RDA(Read with Auto-Precharge)。&lt;/p&gt;
&lt;p&gt;总结一下上面提到的六种命令：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ACT: Bank Activate，激活一个 Row，用于接下来的访问&lt;/li&gt;
&lt;li&gt;PRE: Single Bank Precharge，与 ACT 是逆操作，解除 Row 的激活状态&lt;/li&gt;
&lt;li&gt;RD: Read，读取当前 Row 的某个 Column 数据&lt;/li&gt;
&lt;li&gt;RDA: Read with Auto-Precharge，读取后执行 Precharge&lt;/li&gt;
&lt;li&gt;WR: Write，写入当前 Row 的某个 Column 数据&lt;/li&gt;
&lt;li&gt;WRA: Write with Auto-Precharge，写入后执行 Precharge&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除此之外，还有一些常用命令：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;REF: Refresh，需要定期执行，保证 DRAM 数据不会丢失。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参数&#34;&gt;参数&lt;/h2&gt;
&lt;p&gt;DRAM 有很多参数，以服务器上的内存 &lt;a href=&#34;https://in.micron.com/products/dram-modules/rdimm/part-catalog/mta36asf2g72pz-2g3&#34;&gt;MTA36ASF2G72PZ-2G3A3&lt;/a&gt; 为例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;16GB 容量，DDR4 SDRAM RDIMM&lt;/li&gt;
&lt;li&gt;PC4-2400&lt;/li&gt;
&lt;li&gt;Row address: 64K A[15:0]&lt;/li&gt;
&lt;li&gt;Column address: 1K A[9:0]&lt;/li&gt;
&lt;li&gt;Device bank group address: 4 BG[1:0]&lt;/li&gt;
&lt;li&gt;Device bank address per group: 4 BA[1:0]&lt;/li&gt;
&lt;li&gt;Device configuration: 4Gb (1Gig x 4), 16 banks&lt;/li&gt;
&lt;li&gt;Module rank address: 2 CS_n[1:0]&lt;/li&gt;
&lt;li&gt;Configuration: 2Gig x 72&lt;/li&gt;
&lt;li&gt;Module Bandwidth: 19.2 GB/s=2400 MT/s * 8B/T&lt;/li&gt;
&lt;li&gt;Memory Clock: 0.83ns(1200 MHz)&lt;/li&gt;
&lt;li&gt;Data Rate: 2400 MT/s&lt;/li&gt;
&lt;li&gt;Clock Cycles: CL-nRCD-nRP = 17-17-17&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容量：每个 DRAM 颗粒 &lt;code&gt;64K*1K*4*4*4=4Gb&lt;/code&gt;，不考虑 ECC，一共有 &lt;code&gt;16*2=32&lt;/code&gt; 个这样的颗粒，实际容量是 16 GB。32 个颗粒分为两组，每组 16 个颗粒，两组之间通过 CS_n 片选信号区分。每组 16 个颗粒，每个颗粒 4 位 DQ 数据信号，合并起来就是 64 位，如果考虑 ECC 就是 72 位。&lt;/p&gt;
&lt;p&gt;再举一个 FPGA 开发板上内存的例子：&lt;a href=&#34;https://www.micron.com/products/dram/ddr4-sdram/part-catalog/mt40a512m16ly-075&#34;&gt;MT40A512M16LY-075E&lt;/a&gt;，参数如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Data Rate: 2666 MT/s, Clock Frequency: 1333 MHz, tCK=0.750ns=750ps&lt;/li&gt;
&lt;li&gt;Target CL-nRCD-nRP: 18-18-18&lt;/li&gt;
&lt;li&gt;tAA(Internal READ command to first data)=&lt;code&gt;13.50ns(=18*0.750)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;tRCD(ACTIVATE to internal READ or WRITE delay time)=&lt;code&gt;13.50ns(=18*0.750)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;tRP(PRECHARGE command period)=&lt;code&gt;13.50ns(=18*0.750)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;tRAS(ACTIVATE-to-PRECHARGE command period)=32ns&lt;/li&gt;
&lt;li&gt;512 Meg x 16&lt;/li&gt;
&lt;li&gt;Number of bank groups: 2&lt;/li&gt;
&lt;li&gt;Bank count per group: 4&lt;/li&gt;
&lt;li&gt;Row addressing: 64K&lt;/li&gt;
&lt;li&gt;Column addressing: 1K&lt;/li&gt;
&lt;li&gt;Page size: 2KB=2K*16b&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总大小：&lt;code&gt;2*4*64K*1K*16=1GB&lt;/code&gt;。这个开发板用了 5 个 DRAM 芯片，只采用了其中的 4.5 个芯片：最后一个芯片只用了 8 位数据，这样就是 &lt;code&gt;4.5*16=72&lt;/code&gt; 位的数据线，对应 64 位+ECC。&lt;/p&gt;
&lt;h2 id=&#34;时序&#34;&gt;时序&lt;/h2&gt;
&lt;p&gt;可以看到，上面的 DRAM Datasheet 里提到了三个时序参数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CL=17: CAS Latency，从发送读请求到第一个数据的延迟周期数&lt;/li&gt;
&lt;li&gt;RCD=17: ACT to internal read or write delay time，表示从 ACT 到读/写需要的延迟周期数&lt;/li&gt;
&lt;li&gt;RP=17: Row Precharge Time，表示 Precharge 后需要延迟周期数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果第一次访问一个 Row 中的数据，并且之前没有已经打开的 Row，那么要执行 ACT 和 RD 命令，需要的周期数是 RCD+CL；如果之前已经有打开了的 Row，那么要执行 PRE，ACT 和 RD 命令，需要的周期数是 RP+RCD+CL。但如果是连续访问，虽然还需要 CL 的延迟，但是可以流水线起来，充分利用 DDR 的带宽。&lt;/p&gt;
&lt;p&gt;如果把这个换算到 CPU 角度的内存访问延迟的话，如果每次访问都是最坏情况，那么需要 17+17+17=51 个 DRAM 时钟周期，考虑 DRAM 时钟是 1200MHz，那就是 42.5ns，这个相当于是 DRAM 内部的延迟，实际上测得的是 100ns 左右。&lt;/p&gt;
&lt;p&gt;更严格来说，读延迟 READ Latency = AL + CL + PL，其中 AL 和 PL 是可以配置的，CL 是固有的，所以简单可以认为 READ Latency = CL。同理 WRITE Latency = AL + CWL + PL，可以简单认为 WRITE Latency = CWL。CWL 也是可以配置的，不同的 DDR 速率对应不同的 CWL，范围从 1600 MT/s 的 CWL=9 到 3200 MT/s 的 CWL=20，具体见 JESD79-4B 标准的 Table 7 CWL (CAS Write Latency)。&lt;/p&gt;
&lt;h2 id=&#34;波形&#34;&gt;波形&lt;/h2&gt;
&lt;p&gt;用 Micron 提供的 &lt;a href=&#34;https://media-www.micron.com/-/media/client/global/documents/products/sim-model/dram/ddr4/ddr4_verilog_models.zip?rev=caf27a5eaf6b4a9f81eb894a874a4492&#34;&gt;Verilog Model&lt;/a&gt; 进行仿真，可以看到如下的波形图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ddr4_waveform.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先看第一个命令，ACT_n=0, ADDR=0x009C, CAS_n_A15=0, CKE=1-&amp;gt;1, CS_n=0, RAS_n_A16=0, WE_n_A14=1，查阅标准可知这是 ACT(Bank Activate) 命令。接着第二个命令，ACT_n=1, ADDR=0x0400, CAS_n_A15=0, CKE=1-&amp;gt;1, CS_n=0, RAS_n_A16=1, WE_n_A14=1, A10=1, 这是 RDA(Read with Auto Precharge) 命令。若干个周期后，读取的数据从 DQ 上输出，一共 8 个字节的数据。&lt;/p&gt;
&lt;h2 id=&#34;刷新&#34;&gt;刷新&lt;/h2&gt;
&lt;p&gt;DRAM 的一个特点是需要定期刷新。有一个参数 tREFI，表示刷新的时间周期，这个值通常是 7.8us，在温度大于 85 摄氏度时是 3.9 us（见 JESD79-4B Table 131）。在刷新之前，所有的 bank 都需要 Precharge 完成并等待 RP 的时间，这时候所有的 Bank 都是空闲的，再执行 REF(Refresh) 命令。等待 tRFC(Refresh Cycle) 时间后，可以继续正常使用。&lt;/p&gt;
&lt;p&gt;为了更好的性能，DDR4 标准允许推迟一定次数的刷新，但是要在之后补充，保证平均下来依然满足每过 tREFI 时间至少一次刷新。&lt;/p&gt;
&lt;h2 id=&#34;地址映射&#34;&gt;地址映射&lt;/h2&gt;
&lt;p&gt;如果研究 DRAM 内存控制器，比如 &lt;a href=&#34;https://www.xilinx.com/support/documentation/ip_documentation/ultrascale_memory_ip/v1_4/pg150-ultrascale-memory-ip.pdf&#34;&gt;FPGA 上的 MIG&lt;/a&gt;，可以发现它可以配置不同的地址映射方式，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ROW_COLUMN_BANK&lt;/li&gt;
&lt;li&gt;ROW_BANK_COLUMN&lt;/li&gt;
&lt;li&gt;BANK_ROW_COLUMN&lt;/li&gt;
&lt;li&gt;ROW_COLUMN_LRANK_BANK&lt;/li&gt;
&lt;li&gt;ROW_LRANK_COLUMN_BANK&lt;/li&gt;
&lt;li&gt;ROW_COLUMN_BANK_INTLV&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就是将地址的不同部分映射到 DRAM 的几个地址：Row，Column，Bank。可以想象，不同的地址映射方式针对不同的访存模式会有不同的性能。对于连续的内存访问，ROW_COLUMN_BANK 方式是比较适合的，因为连续的访问会分布到不同的 Bank 上，这样性能就会更好。&lt;/p&gt;
&lt;p&gt;此外，如果访问会连续命中同一个 Page，那么直接读写即可；反之如果每次读写几乎都不会命中同一个 Page，那么可以设置 Auto Precharge，即读写以后自动 Precharge，减少了下一次访问前因为 Row 不同导致的 PRE 命令。一个思路是在对每个 Page 的最后一次访问采用 Auto Precharge。&lt;/p&gt;
&lt;h2 id=&#34;传输速率&#34;&gt;传输速率&lt;/h2&gt;
&lt;p&gt;DDR SDRAM 的传输速率计算方式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Memory Speed (MT/s) * 64 (bits/transfer)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如一个 DDR4-3200 的内存，带宽就是 &lt;code&gt;3200 * 64 = 204.8 Gb/s = 25.6 GB/s&lt;/code&gt;。但前面已经看到，除了传输数据，还需要进行很多命令，实际上很难达到 100% 的带宽。然后 CPU 可以连接多个 channel 的 DRAM，再考虑多个 CPU Socket，系统的总带宽就是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Memory Speed (MT/s) * 64 (bits/transfer) * Channels * Sockets
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 MLC 等工具进行测试，计算实际与理论的比值，我测试得到的大概在 70%-90% 之间。&lt;/p&gt;
&lt;h2 id=&#34;hbm&#34;&gt;HBM&lt;/h2&gt;
&lt;p&gt;HBM 相比前面的 DDR SDRAM，它堆叠了多个 DRAM，提供多个 channel 并且提高了位宽。例如 &lt;a href=&#34;https://media-www.micron.com/-/media/client/global/documents/products/data-sheet/dram/hbm2e/8gb_and_16gb_hbm2e_dram.pdf&#34;&gt;Micron HBM with ECC&lt;/a&gt;，堆叠了 4/8 层 DRAM，提供 8 个 channel，每个 channel 的数据宽度是 128 位，以 3200 MT/s 计算，一个 HBM 芯片的传输速率最大是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;3200 (MT/s) * 128 (bits/transfer) * 8 (Channels) = 3276.8 Gb/s = 409.6 GB/s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以一片 HBM 的传输速率就相当于 16 个传统的 DDR SDRAM：8 个 Channel 加双倍的位宽。128 位实际上就是把两片 64-bit DDR SDRAM 并起来了，可以当成一个 128 位的用，也可以在 Pseudo Channel 模式下，当成共享地址和命令信号的两个 DDR SDRAM 用。&lt;/p&gt;
&lt;p&gt;Xilinx 的 Virtex Ultrascale Plus HBM FPGA 提供了 &lt;code&gt;1800 (MT/s) * 128 (bits/transfer) * 8 (Channels) = 230.4 GB/s&lt;/code&gt; 的带宽，如果用了两片 HBM 就是 460.8 GB/s。暴露给 FPGA 逻辑的是 16 个 256 位的 AXI3 端口，AXI 频率 450 MHz，内存频率 900 MHz。可以看到，每个 AXI3 就对应了一个 HBM 的 pseudo channel。每个 pseudo channel 是 64 位，但是 AXI 端口是 256 位：在速率不变的情况下，从 450MHz 到 900MHz，再加上 DDR，相当于频率翻了四倍，所以位宽要从 64 位翻四倍到 256 位。&lt;/p&gt;
&lt;p&gt;当然了，HBM 的高带宽的代价就是引脚数量很多。根据 &lt;a href=&#34;https://www.jedec.org/system/files/docs/JESD238A.pdf&#34;&gt;HBM3 JESD238A&lt;/a&gt;，每个 Channel 要 120 个 pin，一共 16 个 channel（HBM2 是 8 channel，每个 channel 128 位；HBM3 是 16 channel，每个 channel 64 位），然后还有其他的 52 个 pin，这些加起来就 1972 个 pin 了。所以一般在 Silicon Interposer 上连接，而不是传统的在 PCB 上走线（图源 &lt;a href=&#34;https://picture.iczhiku.com/resource/ieee/WYifSuFTZuHLFcMV.pdf&#34;&gt;A 1.2V 20nm 307GB/s HBM DRAM with At-Speed Wafer-Level I/O Test Scheme and Adaptive Refresh Considering Temperature Distribution&lt;/a&gt;）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/hbm_stack.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以在 HBM3 标准里，用 Microbump 来描述 HBM 的 pin。&lt;/p&gt;
&lt;p&gt;可以理解为把原来插在主板上的内存条，通过堆叠，变成一个 HBM Die，然后紧密地连接到 CPU 中。但是另一方面，密度上去了，价格也更贵了。&lt;/p&gt;
&lt;p&gt;A100 显卡 40GB PCIe 版本提供了 1555 GB/s 的内存带宽。根据倍数关系，可以猜测是 5 个 8GB 的 HBM，每个提供 &lt;code&gt;1555 / 5 = 311 GB/s&lt;/code&gt; 的带宽，那么时钟频率就是 &lt;code&gt;311 (GB/s) * 8 (bits/byte) / 128 (bits/transfer) / 8 (channels) / 2 (DDR) = 1215 MHz&lt;/code&gt;，这与 &lt;code&gt;nvidia-smi -q&lt;/code&gt; 看到的结果是一致的。&lt;/p&gt;
&lt;p&gt;进一步，A100 80GB PCIe 版本提供了 1935 GB/s 的带宽，按照同样的方法计算，可得时钟频率是 &lt;code&gt;1935 (GB/s) / 5 * 8 (bits/byte) / 128 (bits/transfer) / 8 (channels) / 2(DDR) = 1512 MHz&lt;/code&gt;，与 &lt;a href=&#34;https://www.nvidia.com/content/dam/en-zz/Solutions/Data-Center/a100/pdf/PB-10577-001_v02.pdf&#34;&gt;Product Brief&lt;/a&gt; 一致。频率的提高是因为从 HBM2 升级到了 HBM2e。&lt;/p&gt;
&lt;p&gt;A100 文档中的 Memory bus width 5120 的计算方式也就清楚了：&lt;code&gt;128 (bits/transfer) * 8 (channels) * 5 (stacks) = 5120 (bits)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;H100 SXM5 升级到了 HBM3，内存容量依然是 80GB，但是时钟频率提高，内存带宽是 &lt;code&gt;2619 (MHz) * 2 (DDR) * 128 (bits/transfer) * 8 (channels) * 5 (stacks) / 8 (bits/byte) = 3352 GB/s&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Memory systems: Cache, DRAM &amp;amp; Disk&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/262052220&#34;&gt;译文：DDR4 SDRAM - Understanding the Basics（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/263080272&#34;&gt;译文：DDR4 SDRAM - Understanding the Basics（下）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RAMGuide/TheRamGuide-WIP-/raw/main/DDR5%20Spec%20JESD79-5.pdf&#34;&gt;JEDEC STANDARD DDR5 SDRAM JESD79-5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.softnology.biz/pdf/JESD79-4B.pdf&#34;&gt;JEDEC STANDARD DDR4 SDRAM JESD79-4B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://documents.pub/document/jesd79-3e-ddr3-sdram-specification.html&#34;&gt;JEDEC STANDARD DDR3 SDRAM JESD79-3E&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>「教学」RISC-V Debug 协议</title>
      <link>https://jia.je/hardware/2021/12/12/riscv-debug/</link>
      <pubDate>Sun, 12 Dec 2021 14:01:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/12/12/riscv-debug/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;之前用过一些 RISC-V 核心，但是遇到调试相关的内容的时候就两眼一抹黑，不知道原理，出了问题也不知道如何排查，趁此机会研究一下工作原理。&lt;/p&gt;
&lt;h2 id=&#34;架构&#34;&gt;架构&lt;/h2&gt;
&lt;p&gt;为了调试 RISC-V 核心，需要很多部件一起工作。按 RISC-V Debug Spec 所述，有这么几部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Debugger: GDB，连接到 OpenOCD 启动的 GDB Server&lt;/li&gt;
&lt;li&gt;Debug Translator: OpenOCD，向 GDB 提供 Server 实现，同时会通过 FTDI 等芯片控制 JTAG&lt;/li&gt;
&lt;li&gt;Debug Transport Hardware: 比如 FTDI 的芯片，可以提供 USB 接口，让 OpenOCD 控制 JTAG 信号 TMS/TDI/TCK 的变化，并读取 TDO&lt;/li&gt;
&lt;li&gt;Debug Transport Module: 在芯片内部的 JTAG 控制器（TAP），符合 JTAG 标准&lt;/li&gt;
&lt;li&gt;Debug Module Interface：RISC-V 自定义的一系列寄存器，通过这些寄存器来控制 Debug Module 的行为&lt;/li&gt;
&lt;li&gt;Debug Module：调试器，控制 RISC-V 核心，同时也支持直接访问总线，也有内部的 Program Buffer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，DMI 是实际的调试接口，而 JTAG 可以认为是一个传输协议。&lt;/p&gt;
&lt;h2 id=&#34;jtag&#34;&gt;JTAG&lt;/h2&gt;
&lt;p&gt;首先什么是 JTAG？简单来说，它工作流程是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JTAG TAP 维护了一个状态机，由 TMS 信号控制&lt;/li&gt;
&lt;li&gt;当状态机进入 CaptureDR/CaptureIR 状态的时候，加载数据到 DR/IR 中&lt;/li&gt;
&lt;li&gt;在 ShiftDR/ShiftIR 状态下，寄存器从 TDI 移入，从 TDO 移出&lt;/li&gt;
&lt;li&gt;当进入 UpdateDR/UpdateIR 状态的时候，把 DR/IR 的结果输出到其他单元&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体来说，JTAG 定义了两类寄存器：IR 和 DR。可以把 JTAG 理解成一个小的总线，我通过 IR 选择总线上的设备，通过 DR 向指定的设备上进行数据传输。比如在 RISC-V Debug Spec 里面，规定了以下的 5 位 IR 地址定义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;0x00/0x1f: BYPASS&lt;/li&gt;
&lt;li&gt;0x01: IDCODE&lt;/li&gt;
&lt;li&gt;0x10: dtmcs&lt;/li&gt;
&lt;li&gt;0x11: dmi&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以类比为有四个设备：BYPASS，IDCODE，dtmcs，dmi，对应了一些地址。如果要选择 dtmcs 这个设备，就在 ShiftIR 阶段向 TDI 输入二进制的 00001 即可。选择地址以后，再向 DR 写入时，操作的就是 dtmcs 设备。&lt;/p&gt;
&lt;p&gt;那么，每个设备是怎么操作的呢？假如我已经通过 IR 设置了当前设备是 dtmcs，然后进入 ShiftDR 模式时，JTAG 会同时输入和输出。输入的就是当前要输入的数据，输出的就是原来寄存器里的结果，这个结果可能是固定的，也可能是表示上一次输入对应的结果。&lt;/p&gt;
&lt;p&gt;举个例子：IDCODE 设备，在 CaptureDR 阶段的时候，DR 总会被设为一个固定的 IDCODE，表示设备的 ID；在 Shift 的时候，这个 IDCODE 就会一位一位从 TDO 中输出，而 TDI 输入的数据都会被忽略掉。BYPASS 设备则是一个 1 位的寄存器，直接从 TDI 到寄存器，寄存器到 TDO，数据就这么流过去了。&lt;/p&gt;
&lt;p&gt;那么，在 RISC-V Debug 里面，JTAG 是怎么用的呢？我们可以这么类比一下：CaptureDR 相当于读取寄存器到缓冲区，然后 ShiftDR 在读取缓冲区的同时写入缓冲区，最后 UpdateDR 则是把缓冲区中的数据写入到寄存器中。这和 MMIO 有点类似，只不过每次操作不是单独的写和读，而是一次操作等于先读后写。&lt;/p&gt;
&lt;p&gt;还是来看例子。dtmcs 这个设备表示的是 DTM 当前的状态，它有 32 位，读取的时候可以得到 DMI 的状态和配置，写入的时候可以 reset DMI。以 OpenOCD 代码 &lt;code&gt;dtmcontrol_scan&lt;/code&gt; 为例子，它做了这么几个事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先设置 IR 为 0x10，对应 dtmcs。&lt;/li&gt;
&lt;li&gt;向 DR 中写入数据，同时读取数据。&lt;/li&gt;
&lt;li&gt;设置 IR 为 0x11，对应 dmi，因为 dmi 操作是比较多的，所以它默认恢复到 dmi。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果我只想读取 dtmcs 寄存器，那么只要设置写入数据为 0 即可，因为寄存器的设计里考虑到，如果写入全 0 是没有副作用的。同理，如果只想写入 dtmcs 寄存器，直接写入即可，因为设计的时候也保证读入寄存器的值是没有副作用的。这样，就在一个一读一写的操作中，实现了读或者写的功能。&lt;/p&gt;
&lt;p&gt;那么，dmi 寄存器的用途是什么呢？我们前面提到过，JTAG 其实是一个传输层，而 DMI 又定义了一系列的寄存器，这会让人有点混乱，为啥到处都是寄存器？又是 JTAG 的 IR/DR，又是 dmi，dmi 又有一堆寄存器，这是什么关系？&lt;/p&gt;
&lt;p&gt;首先我们来看 dmi 寄存器的定义。它由三部分组成：地址、数据和操作。由于 JTAG 每次操作是一读一写，虽然寄存器定义差不多，但是读和写的含义是不同的。&lt;/p&gt;
&lt;p&gt;比如读的时候，它表示的是上一次 dmi 请求的结果。地址还是上一次请求的地址，数据则是上一次请求的结果，操作字段 0 表示成功，2 表示失败，3 表示还没执行完。而写的时候，地址和数据表示了对哪个寄存器写入什么数据，操作字段 0 表示无操作，1 表示读，2 表示写。&lt;/p&gt;
&lt;p&gt;可以看到，如果想操作 dmi 定义的寄存器，需要如下几个步骤，这也是 OpenOCD &lt;code&gt;dmi_op_timeout&lt;/code&gt; 要做的事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置 IR 为 0x11，对应 DMI。&lt;/li&gt;
&lt;li&gt;向 DR 写入请求的地址 + 数据 + 操作，丢弃读取的结果。&lt;/li&gt;
&lt;li&gt;等待若干个周期。&lt;/li&gt;
&lt;li&gt;向 DR 写入全 0，对应无操作，同时读取结果，这个结果就对应上面的请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以预期，如果首先写入了一个写操作，那么第二次 DR scan 得到的结果就是是否成功写入；如果首先写入了一个读操作，那么第二次 DR scan 得到的结果就是目标寄存器的值。&lt;/p&gt;
&lt;p&gt;可能看起来还是很绕，确实很绕，因为这里有一个封装的过程。首先，DMI 本身定义了一些寄存器，这些寄存器读/写都有一定的含义，比如控制某一个 RISC-V 核心暂停等等。接着，JTAG 需要传输 DMI 的读取和写入操作，同时还要考虑读写尚未完成的情况，怎么办？结论就是通过 DR 来实现，写入 DR 时，按照 DR 中的操作数，对应到 DMI 的写入/读取；然后读取 DR 的时候，按照 DMI 的状态，告诉 OpenOCD 目前是否已经完成了上一次 DMI 操作，和操作的结果。&lt;/p&gt;
&lt;h2 id=&#34;dmi&#34;&gt;DMI&lt;/h2&gt;
&lt;p&gt;讲完 JTAG 以后，终于来到了 DMI。其实 DMI 就是一系列的寄存器，类似于 MMIO 设备，只不过访问方式不是我们通常的内存读写，而是通过 JTAG 的方式进行。它有很多个寄存器，摘录如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;dmcontrol 0x10: Debug Module Control&lt;/li&gt;
&lt;li&gt;dmstatus 0x11: Debug Module Status&lt;/li&gt;
&lt;li&gt;hartinfo 0x12: Hart Info&lt;/li&gt;
&lt;li&gt;hartsum 0x13: Hart Summary&lt;/li&gt;
&lt;li&gt;command 0x16: Abstract Control and Status&lt;/li&gt;
&lt;li&gt;data0 0x04: Abstract Data 0&lt;/li&gt;
&lt;li&gt;progbuf0 0x20: Program Buffer 0&lt;/li&gt;
&lt;li&gt;sbcs 0x38: System Bus Access Control and Status&lt;/li&gt;
&lt;li&gt;sbaddress0 0x39: System Bus Address 31:0&lt;/li&gt;
&lt;li&gt;sbdata0 0x3c: System Bus Data 31:0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OpenOCD 的 &lt;code&gt;examine&lt;/code&gt; 函数对 DMI 初始化并进行一些参数的获取。它的操作如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用 dtmcontrol_scan，读取 JTAG 里的 dtmcs，可以得到 JTAG-DMI 的配置信息&lt;/li&gt;
&lt;li&gt;向 dmcontrol 写入，进行复位&lt;/li&gt;
&lt;li&gt;向 dmcontrol 写入，启用调试模块&lt;/li&gt;
&lt;li&gt;从 hartinfo 读取 hart 信息&lt;/li&gt;
&lt;li&gt;检查各个 hart 的状态&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;类似地，其他各种调试操作都是对这些 DMI 寄存器的读和写进行。RISC-V Debug Spec 附录里还提到了如何实现调试器的一些功能。&lt;/p&gt;
&lt;p&gt;比如要读取 CPU 的寄存器（比如通用寄存器，CSR 等等）的话，有如下的方式：&lt;/p&gt;
&lt;p&gt;第一种是 Abstract Command，直接向 DMI 写入要寄存器编号，就可以实现读/写。&lt;/p&gt;
&lt;p&gt;第二种是 Program Buffer。它是一块小的代码存储，可以通过 DMI 向其中写入指令，比如 &lt;code&gt;csrw s0, mstatus; ebreak&lt;/code&gt;，然后设置 s0 寄存器的值，再执行 Program Buffer 里的代码。&lt;/p&gt;
&lt;p&gt;以 OpenOCD 代码为例，&lt;code&gt;register_read_abstract&lt;/code&gt; 做了以下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到要读取的寄存器对应的 Abstract Register Number&lt;/li&gt;
&lt;li&gt;进行 transfer 命令，DM 会读取对应寄存器到 data0 中&lt;/li&gt;
&lt;li&gt;从 data0 中读取寄存器内容&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果要读取内存的话，也有两种方法。一种是直接向 DMI 写入要读取的总线地址，然后再向指定的寄存器中读取数据。第二种还是利用 Program Buffer，写入一条 &lt;code&gt;lw s0, 0(s0)&lt;/code&gt; 指令，然后先向 s0 写入地址，执行 Program Buffer 后，再把 s0 寄存器的值读出来。&lt;/p&gt;
&lt;h2 id=&#34;abstract-command-实现&#34;&gt;Abstract Command 实现&lt;/h2&gt;
&lt;p&gt;那么，如何实现上面提到的 Abstract Command（比如读写寄存器，读写内存等）呢？Debug Spec 里面提到一种 Execution-Based 的方式，即在 Debug mode 下，核心依然在执行代码，只不过执行的是调试用的特殊代码。它做的就是轮询 Debug Module 等待命令，接受到命令以后，就去读写寄存器/内存，然后通过 data0-12 来传输数据。&lt;/p&gt;
&lt;p&gt;这里还有一个比较特别的点，就是读取寄存器的时候，寄存器的编号是直接记录在指令中的，所以可以让 Debug Module 动态生成指令，然后让核心刷新 ICache 然后跳转过去。另外，还可以利用 dscratch0/dscratch1 寄存器来保存 gpr，然后用 dret 退出的时候再恢复，这样就有两个 gpr 可以用来实现功能了，实际上这已经够用了（一个技巧是，把地址设为 0 附近，然后直接用 zero 寄存器加偏移来寻址）。&lt;/p&gt;
&lt;h2 id=&#34;单步调试实现&#34;&gt;单步调试实现&lt;/h2&gt;
&lt;p&gt;在 dcsr 中，有一个值 step 表示是否在单步调试状态。设 step 为 1 的时候，如果不在 debug mode 中，只需要记录以及执行的指令数，当执行了一条指令后，视为下一个指令发生了进入 debug mode 的异常，这样就实现了单步调试。&lt;/p&gt;
&lt;h2 id=&#34;软件断点实现&#34;&gt;软件断点实现&lt;/h2&gt;
&lt;p&gt;调试器为了打断点，一种简单的方式是，往断点处写入 ebreak 指令，然后设置 dcsr 的 ebreakm/s/u，表示在这些特权集里，ebreak 是进入 debug mode，而不是原来的处理过程。然后，程序运行到 ebreak 指令的时候，进入 debug mode，openocd 发现核心进入 halted 状态后，让 gdb 继续进行调试。&lt;/p&gt;
&lt;p&gt;硬件方面的实现方法就是，在遇到 ebreak 的时候，判断一下当前的特权集，结合 ebreakm/s/u 判断跳转到什么状态。此外，由于它会写入指令到内存，所以还需要执行 fence.i 指令，而 OpenOCD 需要依赖 progbuf 来执行 fence.i 指令，所以为了让这个方案工作，还得实现 Program Buffer。&lt;/p&gt;
&lt;p&gt;当然了，软件断点也有局限性，比如内存不可写，比如 ROM，不能覆盖里面的指令，这样就有可能出问题。而且硬件断点性能也更好，不需要来回这样写指令。&lt;/p&gt;
&lt;h2 id=&#34;semihosting&#34;&gt;Semihosting&lt;/h2&gt;
&lt;p&gt;ARM 有一种 semihosting 机制，就是处理器执行一种特定的指令序列，然后调试器看到整个序列的时候，不是进入 GDB 调试状态，而是去进行一些操作，比如输出信息，读写文件等等，然后结果通过 JTAG 写回去。OpenOCD 给 RISC-V 也做了类似的 semihosting 机制，只不过触发的指令序列不大一样，但是机制是类似的。&lt;/p&gt;
&lt;p&gt;如果用过 Rocket Chip 仿真的或者以前的 ucb-bar/fpga-zynq 项目的话，会知道还有一个目的有些类似的东西：HTIF + fesvr，它是通过 fromhost/tohost 两组地址来进行通信，但是这个方法缺点是需要 poll tohost/fromhost 地址的内容，相对来说比较麻烦。&lt;/p&gt;
&lt;h2 id=&#34;program-buffer&#34;&gt;Program Buffer&lt;/h2&gt;
&lt;p&gt;此外，debug spec 还有一个可选的功能，就是 Program Buffer，调试器可以往里面插入自定义的指令，然后结合 abstract command 进行操作。这样就可以做一些比较高效的操作，比如 OpenOCD 实现的批量写入内存：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;s1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addi&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;a0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ebreak&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并且设置 abstractauto，然后重复的操作是往 s1 里面写入新的数据，然后跳转到 program buffer，进行上面的 sw 操作，这样就可以一次 dmi 请求完成一次内存的写入，比较高效。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;RISC-V Debug Spec 0.13&lt;/li&gt;
&lt;li&gt;IEEE Standard for JTAG 1149.1-2013&lt;/li&gt;
&lt;li&gt;OpenOCD 相关代码&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>教学随想</title>
      <link>https://jia.je/misc/2021/12/09/education/</link>
      <pubDate>Thu, 09 Dec 2021 11:57:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2021/12/09/education/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近关于课程改革的讨论比较多，我也来谈谈我的看法。&lt;/p&gt;
&lt;h2 id=&#34;动机&#34;&gt;动机&lt;/h2&gt;
&lt;p&gt;一位高中毕业的同学，选择计算机系的动机是什么？我想了想，可能有下面几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算机行业就业好，我选了计算机系，毕业以后可以赚到很多钱&lt;/li&gt;
&lt;li&gt;喜欢计算机，希望从事计算机方面的工作&lt;/li&gt;
&lt;li&gt;计算机系分高，大家都说好，那我就选择去这里吧&lt;/li&gt;
&lt;li&gt;我是竞赛保送的，所以来到了这里&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;学校希望计算机系培养出来的学生：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有很好的能力&lt;/li&gt;
&lt;li&gt;有很好的毕业去向（保研/工作/留校等等）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;学校为希望计算机系：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有更多重大科研成果&lt;/li&gt;
&lt;li&gt;能够培养多且精的计算机人才&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;计算机系为了实现上面的目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;教学的专业课程要全面，并且能够支撑后续的科研&lt;/li&gt;
&lt;li&gt;吸引更多学生进入实验室科研&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时还要与其他院系（软件学院，交叉信息学院，集成电路学院等）有区分（分工）。&lt;/p&gt;
&lt;h2 id=&#34;路径&#34;&gt;路径&lt;/h2&gt;
&lt;p&gt;可以看到，上面的这一系列诉求是有矛盾的，可以假想这么几条路径：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;想赚钱-&amp;gt;读研毕业薪资更高-&amp;gt;读研需要高 GPA-&amp;gt;每门课都要 4.0-&amp;gt;每个课程的可选部分都要做-&amp;gt;工作量太大&lt;/li&gt;
&lt;li&gt;想科研-&amp;gt;找好老师-&amp;gt;需要高 GPA 和或论文-&amp;gt;每门课都要 4.0 同时还要在实验室科研-&amp;gt;工作量特别大&lt;/li&gt;
&lt;li&gt;不想科研直接工作-&amp;gt;工作不需要高的 GPA-&amp;gt;放弃一些课程的可选部分-&amp;gt;空余时间学习实用技术-&amp;gt;面试轻松过关&lt;/li&gt;
&lt;li&gt;对未来没有想法-&amp;gt;从众心理卷 GPA-&amp;gt;每个课程都做可选部分-&amp;gt;花费很多时间-&amp;gt;没有时间做自己喜欢的事情&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这对于七字班（2017）或者更早同学来说，这可能是难以理解的。当时，保研不需要很高的 GPA，老师会看重科研潜力，想科研的同学可能选择在实验室科研的同时，放弃一些课程。&lt;/p&gt;
&lt;p&gt;但是从八字班（2018）开始，多重因素下，问题就凸显了。一是总人数更多，保研难度本身就更大，竞争激烈；二是保研名额严格按照 GPA 排序，导致保研的同学必须科研学习两手抓；三是 GPA 改革以后，4.0 难度变低，以前会想 A B C 课程比较难，大部分人都拿不到 4.0，我 A 课程 3.7，B 课程 3.3 和你 A 课程 3.3，B 课程 3.7 是一样的，精力有限，只做三个里面最简单的一个，但现在会发现，比 GPA 实际上就是比谁 4.0 更多，虽然 A B C 课程也比较难，但是此时只能把三个都做了，不然就会排名下降明显。&lt;/p&gt;
&lt;p&gt;这还会带来其他的问题：为了拿到更多 4.0，但精力有限，按照自己的时间，三个课里只能拿到一个 4.0，比不过拿到三个 4.0 的同学，咋办？抄袭。让老师放水，人人 4.0。&lt;/p&gt;
&lt;h2 id=&#34;解决&#34;&gt;解决&lt;/h2&gt;
&lt;p&gt;那么，怎么解决这个问题？&lt;/p&gt;
&lt;p&gt;从个人的角度出发：尽早想好自己要什么。我要做什么，就在我要做的方向上做好，其他方向可以选择性放弃，不要随大流。&lt;/p&gt;
&lt;p&gt;从院系的角度出发：难。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Manycore 处理器架构分析</title>
      <link>https://jia.je/hardware/2021/12/06/manycore/</link>
      <pubDate>Mon, 06 Dec 2021 00:11:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/12/06/manycore/</guid>
      <description>&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/architecture-and-technology/many-integrated-core/intel-many-integrated-core-architecture.html&#34;&gt;Intel® Many Integrated Core Architecture (Intel® MIC Architecture) - Advanced&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/abstract/document/7476487&#34;&gt;Intel® Xeon Phi coprocessor (codename Knights Corner)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=7453080&#34;&gt;https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=7453080&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.alcf.anl.gov/files/HC27.25.710-Knights-Landing-Sodani-Intel.pdf&#34;&gt;Knights Landing (KNL): 2nd Generation Intel® Xeon Phi™ Processor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Fujitsu_A64FX&#34;&gt;Fujitsu A64FX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fujitsu.com/global/about/resources/news/press-releases/2018/0822-02.html&#34;&gt;Fujitsu Presents Post-K CPU Specifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20201205202434/https://hotchips.org/hc30/2conf/2.13_Fujitsu_HC30.Fujitsu.Yoshida.rev1.2.pdf&#34;&gt;Fujitsu High Performance CPU for the Post-K Computer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.top500.org/system/179807/&#34;&gt;SUPERCOMPUTER FUGAKU - SUPERCOMPUTER FUGAKU, A64FX 48C 2.2GHZ, TOFU INTERCONNECT D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=9229635&#34;&gt;Preliminary Performance Evaluation of the Fujitsu A64FX Using HPC Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fujitsu.com/downloads/SUPER/a64fx/a64fx_datasheet.pdf&#34;&gt;FUJITSU Processor A64FX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://images.nvidia.cn/aem-dam/en-zz/Solutions/data-center/nvidia-ampere-architecture-whitepaper.pdf&#34;&gt;NVIDIA A100 Tensor Core GPU Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://images.nvidia.cn/content/volta-architecture/pdf/volta-architecture-whitepaper.pdf&#34;&gt;NVIDIA TESLA V100 GPU ARCHITECTURE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/content/dam/en-zz/Solutions/Data-Center/a100/pdf/nvidia-a100-datasheet-us-nvidia-1758950-r4-web.pdf&#34;&gt;NVIDIA A100 TENSOR CORE GPU&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;xeon-phi---intel-mic&#34;&gt;Xeon Phi - Intel MIC&lt;/h2&gt;
&lt;p&gt;MIC: Many Integrated Core Architecture&lt;/p&gt;
&lt;p&gt;Knights Corner:&lt;/p&gt;
&lt;p&gt;4 路 SMT，AVX512 指令，32 KB L1I，32 KB L1D，每核心 512KB L2，乱序执行，一条 512 位计算流水线，每个周期双精度性能 &lt;code&gt;512 / 64 * 2 = 16 FLOP/cycle&lt;/code&gt;。61 核 1.053GHz 双精度性能是 &lt;code&gt;16 * 61 * 1.053 = 1028 GFLOPS&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;向量寄存器分为四组，每组 128 位，两个 DP/四个 SP。SP 和 DP 计算共享乘法器，来优化面积。&lt;/p&gt;
&lt;p&gt;Knights Landing:&lt;/p&gt;
&lt;p&gt;核心：4 路 SMT，AVX512 指令，乱序执行，两条 512 位计算流水线，每个周期双精度性能 &lt;code&gt;512 / 64 * 2 * 2 = 32 FLOP/cycle&lt;/code&gt;，如果是 64 核 1.3 GHz，总双精度性能是 &lt;code&gt;32 * 64 * 1.3 = 2662 GFLOPS&lt;/code&gt;。一共 36 个 Tile，每个 Tile 有 2 Core + 2 VPU/core + 1MB 16-way L2，最大 72 个核心。&lt;/p&gt;
&lt;p&gt;内存：6-channel 384GB DDR4 2400 RAM（理论 &lt;code&gt;2400 * 6 * 8 = 115.2 GB/s&lt;/code&gt;），8-16GB 3D MCDRAM（400+ GB/s）。&lt;/p&gt;
&lt;h2 id=&#34;fujitsu-a64fx&#34;&gt;Fujitsu A64FX&lt;/h2&gt;
&lt;p&gt;内存：4 组，每组 8GB HBM2，带宽 256 GB/s（&lt;code&gt;1024 bit * 2G&lt;/code&gt;），总共 32GB HBM2，带宽 1TB/s。Cache Line 大小 256 B。&lt;/p&gt;
&lt;p&gt;核心：4 个 NUMA Node（Core Memory Group），每个 NUMA Node 包括 12 计算核，有 8MB 16 路的 L2 Cache。总共 48 计算核，4 辅助核。&lt;/p&gt;
&lt;p&gt;指令集：ARMv8.2+SVE，512 位向量宽度，乱序执行，两个浮点流水线和两个整数流水线，每个周期双精度性能 &lt;code&gt;512 / 64 * 2 * 2 = 32 FLOP/cycle&lt;/code&gt;，主频 2.2 GHz，按主频算理论双精度浮点性能 &lt;code&gt;32 * 2.2 * 48 = 3.4 TFLOPS&lt;/code&gt;。文档里写的是双精度浮点性能 2.7 TFLOPS，单精度 5.4 TFLOPS，半精度 10.8 TFLOPS，8 位整数 21.6 TOPS，应该是按照实际测出来的算。TOP 500 配置是 7630848 核，对应 &lt;code&gt;7630848 / 48 = 158976&lt;/code&gt; 个节点，Rpeak 是 &lt;code&gt;537212 TFLOPS&lt;/code&gt;，那么每个节点是 &lt;code&gt;537212 / 158976 = 3.38 TFLOPS&lt;/code&gt;，和上面的 3.4 接近。Linpack 跑出来的 Rmax 是 442010 TFLOPS，每个节点是 &lt;code&gt;442010 / 158976 = 2.78 TFLOPS&lt;/code&gt;，和文档里说的比较接近。&lt;/p&gt;
&lt;p&gt;部分主要特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Four-operand FMA: ARM FMA 指令只能是 &lt;code&gt;R0=R0+R1*R2&lt;/code&gt;，A64FX 可以合并 &lt;code&gt;R0=R3,R0=R0+R1*R2&lt;/code&gt; 两条为一条 &lt;code&gt;R0=R3+R1*R2&lt;/code&gt; 指令&lt;/li&gt;
&lt;li&gt;Gather/Scatter: 非连续访存，同一个 128B 内连续的 lane 可以合并访问，如果数据有局部性的话，可以得到两倍带宽&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nvidia-gpu&#34;&gt;NVIDIA GPU&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型号&lt;/th&gt;
&lt;th&gt;工艺&lt;/th&gt;
&lt;th&gt;Peak DP(TFLOPS)&lt;/th&gt;
&lt;th&gt;功耗 (W)&lt;/th&gt;
&lt;th&gt;性能功耗比 (TFLOPS/W)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P100&lt;/td&gt;
&lt;td&gt;16 nm FinFET+&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;0.019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;V100&lt;/td&gt;
&lt;td&gt;12 nm FFN&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;250-300&lt;/td&gt;
&lt;td&gt;0.023-0.028&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A100&lt;/td&gt;
&lt;td&gt;7 nm N7&lt;/td&gt;
&lt;td&gt;9.7&lt;/td&gt;
&lt;td&gt;250-400&lt;/td&gt;
&lt;td&gt;0.024-0.039&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型号&lt;/th&gt;
&lt;th&gt;内存容量 (GB)&lt;/th&gt;
&lt;th&gt;内存带宽 (GB/s)&lt;/th&gt;
&lt;th&gt;内存类型&lt;/th&gt;
&lt;th&gt;L2 缓存大小&lt;/th&gt;
&lt;th&gt;寄存器堆大小&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P100&lt;/td&gt;
&lt;td&gt;12-16&lt;/td&gt;
&lt;td&gt;549-732&lt;/td&gt;
&lt;td&gt;4096 bit HBM2&lt;/td&gt;
&lt;td&gt;4096 KB&lt;/td&gt;
&lt;td&gt;14336 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;V100&lt;/td&gt;
&lt;td&gt;16-32&lt;/td&gt;
&lt;td&gt;900&lt;/td&gt;
&lt;td&gt;4096 bit HBM2&lt;/td&gt;
&lt;td&gt;6144 KB&lt;/td&gt;
&lt;td&gt;20480 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A100&lt;/td&gt;
&lt;td&gt;40-80&lt;/td&gt;
&lt;td&gt;1555-2039&lt;/td&gt;
&lt;td&gt;5120 bit HBM2&lt;/td&gt;
&lt;td&gt;40960 KB&lt;/td&gt;
&lt;td&gt;27648 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型号&lt;/th&gt;
&lt;th&gt;SM 数量&lt;/th&gt;
&lt;th&gt;CUDA 核心数&lt;/th&gt;
&lt;th&gt;FP64 核心数&lt;/th&gt;
&lt;th&gt;SM 频率 (MHz)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P100&lt;/td&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;td&gt;3584&lt;/td&gt;
&lt;td&gt;1792&lt;/td&gt;
&lt;td&gt;1328&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;V100&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;5120&lt;/td&gt;
&lt;td&gt;2560&lt;/td&gt;
&lt;td&gt;1380&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A100&lt;/td&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;td&gt;6912&lt;/td&gt;
&lt;td&gt;3456&lt;/td&gt;
&lt;td&gt;1410&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;CUDA 核心数 = SM 数量 * 64&lt;/li&gt;
&lt;li&gt;FP64 核心数 = SM 数量 * 32&lt;/li&gt;
&lt;li&gt;Peak DP = FP64 核心数 * SM 频率 * 2&lt;/li&gt;
&lt;li&gt;寄存器堆大小 = SM 数量 * 256 KB&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Sunway 处理器架构分析</title>
      <link>https://jia.je/hardware/2021/12/04/sunway/</link>
      <pubDate>Sat, 04 Dec 2021 09:13:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/12/04/sunway/</guid>
      <description>&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://crad.ict.ac.cn/CN/10.7544/issn1000-1239.2021.20201041&#34;&gt;高性能众核处理器申威 26010&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cjc.ict.ac.cn/online/onlinepaper/lyy-202065163512.pdf&#34;&gt;稀疏矩阵向量乘法在申威众核架构上的性能优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Sunway_SW26010&#34;&gt;Sunway SW26010&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://link.springer.com/content/pdf/10.1007/s11432-016-5588-7.pdf&#34;&gt;The Sunway TaihuLight supercomputer: system and applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netlib.org/utk/people/JackDongarra/PAPERS/sunway-report-2016.pdf&#34;&gt;Report on the Sunway TaihuLight System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/3458817.3487399&#34;&gt;Closing the “Quantum Supremacy” Gap: Achieving Real-Time Simulation of a Random Quantum Circuit Using a New Sunway Supercomputer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/3458817.3476161&#34;&gt;SW_Qsim: A Minimize-Memory Quantum Simulator with High-Performance on a New Sunway Supercomputer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/3126908.3126910&#34;&gt;18.9-Pflops Nonlinear Earthquake Simulation on Sunway TaihuLight: Enabling Depiction of 18-Hz and 8-Meter Scenarios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nextplatform.com/2021/02/10/a-sneak-peek-at-chinas-sunway-exascale-supercomputer/&#34;&gt;A FIRST PEEK AT CHINA’S SUNWAY EXASCALE SUPERCOMPUTER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nextplatform.com/2021/03/10/the-nitty-gritty-of-the-sunway-exascale-system-network-and-storage/&#34;&gt;THE NITTY GRITTY OF THE SUNWAY EXASCALE SYSTEM NETWORK AND STORAGE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sciengine.com/publisher/scp/journal/SCIS/64/4/10.1007/s11432-020-3104-7?slug=fulltext&#34;&gt;Sunway supercomputer architecture towards exascale computing: analysis and practice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sw26010&#34;&gt;SW26010&lt;/h2&gt;
&lt;p&gt;Sunway TaihuLight 的层次：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1 Sunway TaihuLight = 40 Cabinet&lt;/li&gt;
&lt;li&gt;1 Cabinet = 4 Super nodes&lt;/li&gt;
&lt;li&gt;1 Super node = 256 nodes&lt;/li&gt;
&lt;li&gt;1 node = 4 core groups&lt;/li&gt;
&lt;li&gt;1 core group = 1 MPE(management processing element) + 8*8 CPE(computer processing element)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;MPE 双精度性能：&lt;code&gt;16 FLOP/cycle * 1.45 GHz = 23.2 GFlops&lt;/code&gt;
CPE 双精度性能：&lt;code&gt;8 FLOP/cycle * 1.45 GHz = 11.6 GFlops&lt;/code&gt;
CPE 单精度性能：&lt;code&gt;8 FLOP/cycle * 1.45 GHz = 11.6 GFlops&lt;/code&gt;
单节点双精度性能：&lt;code&gt;4 * 8 * 8 * 11.6 + 4 * 23.2 = 3.0624 TFlops&lt;/code&gt;
Sunway TaihuLight 双精度性能：&lt;code&gt;40 * 4 * 256 * 3.0624 = 125.435904 PFlops&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;MPE: 32KB L1I, 32 KB L1D, 256 KB L2(中文文献里写的是 512 KB)。乱序执行，4 译码，7 发射（5 整数 2 浮点）。指令预取，分支预测，寄存器重命名，预测执行。5 条整数流水线，2 条 256 位 SIMD 浮点流水线。&lt;/p&gt;
&lt;p&gt;CPE：16KB L1I，无 DCache，有 64KB 可重构局部数据存储器（SPM scratch pad memory/LDM local data memory）。2 译码 2 发射，乱序执行，1 条 256 位 SIMD 流水线，1 条整数流水线。不同精度的 SIMD 宽度不同，单精度浮点运算 128 位（4 个单精度），双精度浮点运算 256 位（4 个双精度）。从 SPM 每个周期可以读取 32 字节的数据（正好一个 SIMD 寄存器）。&lt;/p&gt;
&lt;p&gt;每个 core group 中还有一个 MC（Memory Controller），连接 8GB DDR3 memory，每个 MC 内存带宽 &lt;code&gt;128 bit * 2133 MT/s = 34.128 GB/s&lt;/code&gt;，单节点内存带宽 &lt;code&gt;4 * 34.128 = 136.512 GB/s&lt;/code&gt;。在 Stream Triad 测试，每个 core group 用 DMA 从内存到 SPM 传输数据带宽为 22.6 GB/s，而全局读写 gload/gstore 带宽只有 1.5 GB/s。访问全局内存需要 120+ 个周期。&lt;/p&gt;
&lt;p&gt;8x8 矩阵中的从核可以在同行和同列方向上进行低延迟和高带宽的数据传递：2 个从核点对点通信延迟不超过 11 个周期，单个 core group 寄存器通信集合带宽达到 637 GB/s。&lt;/p&gt;
&lt;p&gt;28nm 工艺流片，芯片 die 面积超过 500 mm^2，峰值功耗 292.7W，峰值能效比达 10.559 GFLOPS∕W（HPL 6.05 GFLOPS/W）。&lt;/p&gt;
&lt;h2 id=&#34;sw26010psw26016pro&#34;&gt;SW26010P(SW26016pro)&lt;/h2&gt;
&lt;p&gt;SW26010P 是升级版 SW26010，目前信息还比较少，从上面的论文里可以推断出的区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个 node 从 4 个 core group 升级到 6 个，一共有 &lt;code&gt;6 * (8 * 8 + 1) = 390&lt;/code&gt; 个核心。峰值双精度浮点性能 &lt;code&gt;6 * 8 * 8 * 11.6 + 6 * 23.2 = 4.5936 TFlops&lt;/code&gt;。SIMD 宽度扩展到 512 位，但可能没有增加双精度浮点计算部件：单精度浮点性能 14 TFlops，半精度浮点性能 53 TFlops。&lt;/li&gt;
&lt;li&gt;每个 MC 连接了 16 GB DDR4 内存，带宽是 &lt;code&gt;128 bit * 3200 MT/s = 51.2 GB/s&lt;/code&gt;；单节点总内存 96 GB，总内存带宽 &lt;code&gt;51.2 * 6 = 307.2 GB/s&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;每个 CPE 的局部存储（LDM）从 64KB 升级到 256KB。&lt;/li&gt;
&lt;li&gt;CPE 之间的通信可以通过 RMA 进行，而之前的 SW26010 只能在同一行/列之间进行寄存器通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;sw52020&#34;&gt;SW52020&lt;/h2&gt;
&lt;p&gt;在新闻稿和 Sunway supercomputer architecture towards exascale computing: analysis and practice 文章中出现，没有在今年发出来的论文里实际采用，名称可能是新闻稿自己编的，我猜可能没有实际采用，而是做了 SW26010P。和 SW26010 区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Core Group 从 4 个提升到了 8 个，所以每个 node 有 &lt;code&gt;8 * (8 * 8 + 1) = 520&lt;/code&gt; 个核心。&lt;/li&gt;
&lt;li&gt;MPE 和 CPE 向量宽度从 256 位扩展到了 512 位。添加了 16 位半精度浮点支持。&lt;/li&gt;
&lt;li&gt;每个 node 提供超过 12 TFlops 的双精度浮点性能。应该是靠两倍的 Core Group，乘上两倍的向量计算宽度，达到四倍的性能。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>移植系统到 Rocket Chip on VCU128</title>
      <link>https://jia.je/hardware/2021/10/18/port-system-to-rocket-chip-on-vcu128/</link>
      <pubDate>Mon, 18 Oct 2021 08:35:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/10/18/port-system-to-rocket-chip-on-vcu128/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近需要在 VCU128 上搭建一个 SOC，然后想到可以把 OpenSBI、U-Boot 和 Linux 移植到这个平台上方便测试，于是又开始折腾这些东西。代码仓库都已经开源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/rocket-chip-vcu128&#34;&gt;rocket-chip-vcu128&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/opensbi/tree/rocket-chip-vcu128&#34;&gt;opensbi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/u-boot/tree/rocket-chip-vcu128&#34;&gt;u-boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/linux/tree/rocket-chip-vcu128&#34;&gt;linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rocket-chip-on-vcu128&#34;&gt;Rocket Chip on VCU128&lt;/h2&gt;
&lt;p&gt;第一部分是基于之前 &lt;a href=&#34;https://github.com/jiegec/rocket2thinpad&#34;&gt;rocket2thinpad&lt;/a&gt; 在 Thinpad 上移植 Rocket Chip 的经验，做了一些更新，主要是因为 VCU128 的外设不大一样，同时我也要运行更复杂的程序，主要做了这些事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加了 VCU128 的内存和外设：HBM、SPI、I2C、UART、ETH&lt;/li&gt;
&lt;li&gt;打开了更多核心选项：S-mode 和 U-mode&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;主要踩过的坑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;BSCAN 不工作，估计是因为一些参数不对，@jsteward 之前在 zcu 平台上做了一些测试，估计要用类似的办法进行修改；我最后直接去掉了这部分逻辑&lt;/li&gt;
&lt;li&gt;这个板子的 PHY RESET 信号要通过 I2C 接口访问 TI 的 Port Expander，所以没法直接连，要通过 gpio 输出来手动 reset&lt;/li&gt;
&lt;li&gt;SPI Startup Flash 的时序配置，见我之前的&lt;a href=&#34;https://jia.je/hardware/2021/09/27/xilinx-axi-quad-spi-timing/&#34;&gt;博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Xilinx PCS/PMA IP 也会自己挂一个设备到 MDIO bus 上，应该有自己的 PHY 地址，而不要和物理的 PHY 冲突&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;u-boot&#34;&gt;U-Boot&lt;/h2&gt;
&lt;p&gt;在 U-Boot 上花了比较多的时间，用它的目的主要是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;BootROM 中的代码只支持从串口加载程序，如果后续要加载 Linux 内核等软件，性能太差。&lt;/li&gt;
&lt;li&gt;U-Boot 驱动比较完善，而且 dts 也可以很容易地迁移到 Linux 中&lt;/li&gt;
&lt;li&gt;有一些可以参考的资料&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;移植的时候，首先新建一个自定义的 board，然后自己写 defconfig 和 dts，其中 dts 可以参考 rocket chip 生成的 dts 文件。然后，按照各个外设的 device tree binding 去写，然后打开/关闭各个 CONFIG 开关。&lt;/p&gt;
&lt;p&gt;对代码主要的改动是，实现了 DCache 的 flush 功能，因为以太网部分用了 DMA，所以要让外设看到内存的更改，这里采用的是 SiFive 的扩展指令 &lt;code&gt;cflush.d.l1&lt;/code&gt;。由于编译器还不支持这个指令，就按照网上的方式去构造了汇编指令。实现完成以后，就可以用网络了。&lt;/p&gt;
&lt;p&gt;一开始的时候，为了简单，直接在 M-mode 中运行 U-Boot，这样不需要 OpenSBI，同时 DTB 也是内置的。但后续为了运行 Linux，还是需要一个 SBI 实现：OpenSBI，然后在 S-mode 中运行 U-Boot，再引导到 Linux。&lt;/p&gt;
&lt;p&gt;此外还花了很多努力来缩小 binary 大小，首先可以用 &lt;code&gt;nm --size -r u-boot | head -20&lt;/code&gt; 来找到比较大的一些符号，不考虑其中 BSS 的部分（type=b），主要看哪些代码/数据比较占空间。&lt;/p&gt;
&lt;p&gt;UPDATE: U-Boot 在 v2022.01 版本&lt;a href=&#34;https://github.com/u-boot/u-boot/commit/eeaa3fe65270758ab0bdb1515e14f9bf936d3a25&#34;&gt;修复了一个 BUG&lt;/a&gt;，之前的版本在 riscv 架构下没有 reserve lmb region，使得加载 initrd 的时候，会覆盖掉自己的栈空间，这解释了之前的诸多玄学内存问题，升级到 v2022.01 后就好了。&lt;/p&gt;
&lt;h2 id=&#34;opensbi&#34;&gt;OpenSBI&lt;/h2&gt;
&lt;p&gt;OpenSBI 移植比较简单，直接参考 template 修改即可，主要就是串口的配置，其他基本不用改。然后，我把 U-Boot 作为 OpenSBI 的 Payload 放到 OpenSBI 的后面，此时要把 U-Boot 配置为 S-mode 模式。接着，遇到了新的问题：&lt;code&gt;cflush.d.l1&lt;/code&gt; 指令只能在 M-mode 用，因此我在 OpenSBI 代码中处理了 trap，转而在 M-mode 里面运行这条指令。这样，就可以在 S-mode 里刷新 Cache 了。&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;
&lt;p&gt;Linux 目前可以 boot 到寻找 init，还没有碰文件系统，之后计划用 buildroot 打一个 initramfs 出来。为了在 U-Boot 中启动 Linux，用 U-Boot 的 mkimage 工具生成了 FIT 格式的 uImage，里面打包了 kernel image 和 dtb，就可以用 bootm 命令启动了，注意地址不要和加载地址重复。&lt;/p&gt;
&lt;p&gt;此外还遇到一个坑：RV64 里面 Linux dts 的 address cell 得是 2（对应 64 位），否则会有错误。但 U-Boot 对这个没有做要求。&lt;/p&gt;
&lt;h2 id=&#34;缓存一致性&#34;&gt;缓存一致性&lt;/h2&gt;
&lt;p&gt;一开始的时候，AXI DMA 直接接到内存上，所以与 CPU 缓存是不一致的，网卡驱动需要经常地刷缓存。在 Rocket Chip 上，可以用 sifive 自己的 cflush 指令来刷缓存，但是它只能在 M 态执行，同时又支持虚拟地址，这种奇怪的设计就使得要在 OpenSBI，U-Boot 和 Linux 三处都添加逻辑：OpenSBI 处理 illegal instruction，如果发现是 cflush 指令，就再次 cflush；U-Boot 和 Linux 修改驱动，在合适的地方添加 cflush 指令。U-Boot 驱动比较简单，工作得比较好，但是 Linux 的网卡驱动怎么都改不好。&lt;/p&gt;
&lt;p&gt;最后决定，打开 Rocket Chip 的 Frontend Bus，添加一个 AXI Slave 接口，然后让 AXI DMA 通过 AXI Slave 接入到 Rocket Chip 中，然后通过 TLBroadcast 实现缓存一致性。这样软件实现会比较简单，但是硬件就更复杂了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ESXi 常用信息</title>
      <link>https://jia.je/devops/2021/10/05/vmware-esxi-notes/</link>
      <pubDate>Tue, 05 Oct 2021 21:19:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2021/10/05/vmware-esxi-notes/</guid>
      <description>&lt;h2 id=&#34;常用链接&#34;&gt;常用链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.erben.sk/2020/02/04/how-to-check-cpu-microcode-revision-in-esxi/&#34;&gt;检查 CPU microcode 版本&lt;/a&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vsish -e cat /hardware/cpu/cpuList/0 | grep -i -E &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;family|model|stepping|microcode|revision&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kb.vmware.com/s/article/56145&#34;&gt;ESXi 从 6.7 到 6.7U1 升级时出现版本问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://customerconnect.vmware.com/downloads/info/slug/datacenter_cloud_infrastructure/vmware_vsphere/6_7#custom_iso&#34;&gt;ESXi 6.7 OEM 版本下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://customerconnect.vmware.com/downloads/info/slug/datacenter_cloud_infrastructure/vmware_vsphere/7_0#custom_iso&#34;&gt;ESXi 7.0 OEM 版本下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://customerconnect.vmware.com/en/web/vmware/evalcenter?p=free-esxi7&#34;&gt;ESXi 7.0 标准版下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flings.vmware.com/community-networking-driver-for-esxi/comments&#34;&gt;NUC 11 ESXi 7.0 网卡支持&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ esxcli software vib install -d $PWD/Net-Community-Driver_1.2.0.0-1vmw.700.1.0.15843807_18028830.zip
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;离线升级方法&#34;&gt;离线升级方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;下载 Offline Bundle 文件&lt;/li&gt;
&lt;li&gt;上传到 ESXi datastore 中&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;/vmfs/volumes/&lt;/code&gt; 里找到更新文件&lt;/li&gt;
&lt;li&gt;查询 profile 列表 &lt;code&gt;esxcli software sources profile list -d &amp;lt;zip&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更新到 profile &lt;code&gt;esxcli software profile update -p &amp;lt;profile&amp;gt; -d &amp;lt;zip&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ref: &lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.esxi.upgrade.doc/GUID-E51C5DB6-F28E-42E8-ACA4-0EBDD11DF55D.html&#34;&gt;Upgrade or Update a Host with Image Profiles&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果 CPU 比较旧，可能会有警告：&lt;a href=&#34;https://kb.vmware.com/s/article/82794&#34;&gt;Updated Plan for CPU Support Discontinuation In Future Major vSphere Releases&lt;/a&gt;，按照信息添加参数忽略即可，ESXi 7.0 系列都是支持的，如果之后出了新的版本可能不支持。&lt;/p&gt;
&lt;h2 id=&#34;在线升级方法&#34;&gt;在线升级方法&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ esxcli network firewall ruleset set -e true -r httpClient
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# find profile name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ esxcli software sources profile list -d https://hostupdate.vmware.com/software/VUM/PRODUCTION/main/vmw-depot-index.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# upgrade to 7.0u3 for example&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ esxcli software profile update -p ESXi-7.0U3-18644231-standard -d https://hostupdate.vmware.com/software/VUM/PRODUCTION/main/vmw-depot-index.xml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ref: &lt;a href=&#34;https://docs.macstadium.com/docs/update-standalone-esxi-host-via-online-bundle&#34;&gt;Update Standalone ESXi Host&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;防火墙&#34;&gt;防火墙&lt;/h2&gt;
&lt;p&gt;列出所有防火墙规则：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ esxcli network firewall ruleset list
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;允许出站 SSH：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ esxcli network firewall ruleset set --enabled&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true --ruleset-id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sshClient
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关闭出站 SSH：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ esxcli network firewall ruleset set --enabled&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false --ruleset-id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sshClient
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;nuc11i5-esxi-70-安装过程&#34;&gt;NUC11i5 ESXi 7.0 安装过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;下载 ESXi ISO 文件，用 UNetbootin 制作安装盘&lt;/li&gt;
&lt;li&gt;插入 U 盘，在 NUC 上安装 ESXi，在 81% 的时候卡住了，不管直接重启&lt;/li&gt;
&lt;li&gt;用 root 无密码登录进去，然后重置网络设置&lt;/li&gt;
&lt;li&gt;配置 usb 网卡，然后通过网页访问 ESXi，打开 SSH&lt;/li&gt;
&lt;li&gt;下载 Fling 上面的社区网卡支持，用 esxcli 安装&lt;/li&gt;
&lt;li&gt;重启以后，就可以看到 vmnic0 网卡了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://www.virten.net/2020/07/solution-esxi-installation-with-usb-nic-only-fails-at-81/&#34;&gt;Solution: ESXi Installation with USB NIC only fails at 81%&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;推荐博客&#34;&gt;推荐博客&lt;/h2&gt;
&lt;p&gt;发现以下博客有很多关于 ESXi 的内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://williamlam.com/&#34;&gt;https://williamlam.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.virten.net/&#34;&gt;https://www.virten.net/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重要版本更新&#34;&gt;重要版本更新&lt;/h2&gt;
&lt;p&gt;参考 ESXi/vCSA Release Notes：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performance improvements for AMD Zen CPUs: With ESXi 7.0 Update 2, out-of-the-box optimizations can increase AMD Zen CPU performance by up to 30% in various benchmarks. The updated ESXi scheduler takes full advantage of the AMD NUMA architecture to make the most appropriate placement decisions for virtual machines and containers. AMD Zen CPU optimizations allow a higher number of VMs or container deployments with better performance.&lt;/li&gt;
&lt;li&gt;Reduced compute and I/O latency, and jitter for latency sensitive workloads: Latency sensitive workloads, such as in financial and telecom applications, can see significant performance benefit from I/O latency and jitter optimizations in ESXi 7.0 Update 2. The optimizations reduce interference and jitter sources to provide a consistent runtime environment. With ESXi 7.0 Update 2, you can also see higher speed in interrupt delivery for passthrough devices.&lt;/li&gt;
&lt;li&gt;vSphere Lifecycle Manager fast upgrades: Starting with vSphere 7.0 Update 2, you can configure vSphere Lifecycle Manager to suspend virtual machines to memory instead of migrating them, powering them off, or suspending them to disk. For more information, see Configuring vSphere Lifecycle Manager for Fast Upgrades.&lt;/li&gt;
&lt;li&gt;Zero downtime, zero data loss for mission critical VMs in case of Machine Check Exception (MCE) hardware failure: With vSphere 7.0 Update 3, mission critical VMs protected by VMware vSphere Fault Tolerance can achieve zero downtime, zero data loss in case of Machine Check Exception (MCE) hardware failure, because VMs fallback to the secondary VM, instead of failing. For more information, see How Fault Tolerance Works.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vcsa-相关常见错误&#34;&gt;vCSA 相关常见错误&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kb.vmware.com/s/article/85468&#34;&gt;https://kb.vmware.com/s/article/85468&lt;/a&gt; vCSA 日志分区 &lt;code&gt;/storage/log&lt;/code&gt; 满，原因是访问 vmware 网站失败打印的日志太大：&lt;code&gt;/storage/log/vmware/analytics/analytics-runtime.log*&lt;/code&gt;；解决方法：&lt;code&gt;vmon-cli -r analytics&lt;/code&gt; 重启服务，然后删掉旧的日志。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kb.vmware.com/s/article/83070&#34;&gt;https://kb.vmware.com/s/article/83070&lt;/a&gt; vCSA 日志分区 &lt;code&gt;/storage/log&lt;/code&gt; 满，原因是 tomcat 日志太大。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XXX Service Health Alarm&lt;/code&gt;：尝试重启对应服务，比如 &lt;code&gt;vmon-cli -r perfcharts&lt;/code&gt; 对应 &lt;code&gt;Performance Charts&lt;/code&gt;，&lt;code&gt;vmon-cli -r vapi-endpoint&lt;/code&gt; 对应 &lt;code&gt;VMWare vAPI Endpoint&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看更新状态：&lt;code&gt;cat /storage/core/software-update/stage_operation&lt;/code&gt;；更新文件下载路径：&lt;code&gt;/storage/updatemgr/software-update*/stage&lt;/code&gt;。有一个包特别大：&lt;code&gt;wcpovf&lt;/code&gt; 需要两个多 G。&lt;/p&gt;
&lt;p&gt;CLI 更新方法：https://earlruby.org/2021/01/upgrading-vcenter-7-via-the-command-line/&lt;/p&gt;
&lt;h2 id=&#34;迁移虚拟机到不同-vm&#34;&gt;迁移虚拟机到不同 VM&lt;/h2&gt;
&lt;p&gt;首先，unregister 原来的 VM，然后把文件移动到新的路径下。对于 Thin Provisioned Disk，需要特殊处理，否则直接复制的话，会变成 Thick Provisioned Disk，正确方法是采用 &lt;code&gt;vmkfstool&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vmkfstool -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;old.vmdk&amp;#34;&lt;/span&gt; -d thin &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new.vmdk&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的是，这里的路径用的是不带 &lt;code&gt;-flat&lt;/code&gt; 的 vmdk，因为这个文件记录了 metadata，而 &lt;code&gt;-flat.vmdk&lt;/code&gt; 保存了实际的数据。可以用 &lt;code&gt;du&lt;/code&gt; 命令看实际的硬盘占用，从而确认它确实是 Thin Provisioned。&lt;/p&gt;
&lt;p&gt;如果已经在 Web UI 上复制了，你会发现无法停止复制，解决办法是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/etc/init.d/hostd restart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就会重启 Web UI，不过等它恢复需要很长的时间，还要删掉 cookie。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>「教学」AXI Quad SPI 时序分析</title>
      <link>https://jia.je/hardware/2021/09/27/xilinx-axi-quad-spi-timing/</link>
      <pubDate>Mon, 27 Sep 2021 22:22:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/09/27/xilinx-axi-quad-spi-timing/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/spi.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;之前一直没搞懂 Vivado 中 xdc 需要怎么编写，遇到一些必须要写 xdc 的时候就很头疼，不知道怎么写才可以得到正确的结果。今天分析了一下 AXI Quad SPI 的时序 xdc，终于理解了其中的含义。&lt;/p&gt;
&lt;h2 id=&#34;axi-quad-spi&#34;&gt;AXI Quad SPI&lt;/h2&gt;
&lt;p&gt;AXI Quad SPI 是一个 SPI 的控制器，它支持 XIP（eXecute In Place）模式，即可以暴露一个只读 AXI Slave 接口，当接收到读请求的时候，就按照标准的 SPI Flash 命令去对应的地址进行读取，然后返回结果。由于不同厂家的 SPI Flash 支持有所不同，所以 IP 上的设置可以看到厂家的选择。&lt;/p&gt;
&lt;p&gt;特别地，一个常见的需求是希望访问 Cfg（Configuration）Flash，亦即用来保存 Bitstream 的 Flash。当 FPGA 上电的时候，如果启动模式设置为 SPI Flash，FPGA 就会向 Cfg Flash 读取 Bitstream，Cfg Flash 需要连接到 FPGA 的指定引脚上，当 FPGA 初始化的时候由内部逻辑驱动，初始化完成后又要转交给用户逻辑。转交的方式就是通过 STARTUP 系列的 primitive。&lt;/p&gt;
&lt;p&gt;通常，如果要连接外部的 SPI Flash，需要连接几条信号线到顶层，然后通过 xdc 把信号绑定到引脚上，然后引脚连接了一个外部的 SPI Flash。但由于 Cfg Flash 比较特殊，所以信号从 AXI Quad SPI 直接连到 STARTUP 系列的 primitive 上。如果是采用 STARTUPE2 原语的 7 系列的 FPGA，那么只有时钟会通过 STARTUPE2 pritimive 连接到 SPI Flash 上，其他数据信号还是正常通过顶层绑定；如果是采用 STARTUPE3 原语的 UltraScale 系列的 FPGA，那么时钟和数据都通过 STARTUPE3 primitive 连接到 SPI Flash。&lt;/p&gt;
&lt;h2 id=&#34;virtex-ultrascale-时序&#34;&gt;Virtex UltraScale+ 时序&lt;/h2&gt;
&lt;p&gt;把信号连好了只是第一步，因为外设对时序要求比较复杂，如果用一个比较高直接跑，很大可能就读取到错误的数据了。很贴心的是，AXI Quad SPI 已经在生成的文件里提供了一个样例的 xdc，在文档里也有体现。在这里，我使用的设备是 Virtex Ultrascale+ 的 FPGA，其他系列的 FPGA 会有所不一样。它内容如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xdc&#34; data-lang=&#34;xdc&#34;&gt;#### All the delay numbers have to be provided by the user

#### Following are the SPI device parameters
#### Max Tco
set tco_max 7
#### Min Tco
set tco_min 1
#### Setup time requirement
set tsu 2
#### Hold time requirement
set th 3
#####################################################################################################
# STARTUPE3 primitive included inside IP for US+                                                             #
#####################################################################################################
set tdata_trace_delay_max 0.25
set tdata_trace_delay_min 0.25
set tclk_trace_delay_max 0.2
set tclk_trace_delay_min 0.2

create_generated_clock -name clk_sck -source [get_pins -hierarchical *axi_quad_spi_0/ext_spi_clk] [get_pins -hierarchical */CCLK] -edges {3 5 7}
set_input_delay -clock clk_sck -max [expr $tco_max + $tdata_trace_delay_max + $tclk_trace_delay_max] [get_pins -hierarchical *STARTUP*/DATA_IN[*]] -clock_fall;
set_input_delay -clock clk_sck -min [expr $tco_min + $tdata_trace_delay_min + $tclk_trace_delay_min] [get_pins -hierarchical *STARTUP*/DATA_IN[*]] -clock_fall;
set_multicycle_path 2 -setup -from clk_sck -to [get_clocks -of_objects [get_pins -hierarchical */ext_spi_clk]]
set_multicycle_path 1 -hold -end -from clk_sck -to [get_clocks -of_objects [get_pins -hierarchical */ext_spi_clk]]
set_output_delay -clock clk_sck -max [expr $tsu + $tdata_trace_delay_max - $tclk_trace_delay_min] [get_pins -hierarchical *STARTUP*/DATA_OUT[*]];
set_output_delay -clock clk_sck -min [expr $tdata_trace_delay_min - $th - $tclk_trace_delay_max] [get_pins -hierarchical *STARTUP*/DATA_OUT[*]];
set_multicycle_path 2 -setup -start -from [get_clocks -of_objects [get_pins -hierarchical */ext_spi_clk]] -to clk_sck
set_multicycle_path 1 -hold -from [get_clocks -of_objects [get_pins -hierarchical */ext_spi_clk]] -to clk_sck
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们分段来看这个 xdc 都做了什么：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xdc&#34; data-lang=&#34;xdc&#34;&gt;create_generated_clock -name clk_sck -source [get_pins -hierarchical *axi_quad_spi_0/ext_spi_clk] [get_pins -hierarchical */CCLK] -edges {3 5 7}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先，它创建了一个时钟 &lt;code&gt;clk_sck&lt;/code&gt;。CCLK 是 STARTUP 输出的实际时钟，会连接到 Cfg Flash 的时钟信号上。而 AXI Quad SPI 的 ext_spi_clk 会输出到 CCLK 上，因此这里是一个生成的时钟，并且指定上下边沿的位置。&lt;code&gt;edges&lt;/code&gt; 参数有三个，分别表示上升、下降和上升沿分别的位置。1 表示源时钟的第一个上升沿，2 表示源时钟的第一个下降沿，以此类推，所以 {3, 5, 7} 的意思就是频率减半，相位差半个周期。&lt;/p&gt;
&lt;p&gt;接着，最主要的就是，怎么设置延迟。可以看到，代码中首先定义了一些参数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xdc&#34; data-lang=&#34;xdc&#34;&gt;#### Max Tco
set tco_max 7
#### Min Tco
set tco_min 1
#### Setup time requirement
set tsu 2
#### Hold time requirement
set th 3

#### Trace delay
set tdata_trace_delay_max 0.25
set tdata_trace_delay_min 0.25
set tclk_trace_delay_max 0.2
set tclk_trace_delay_min 0.2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先是 \(t_{co}\)，应该表示的是 SPI Flash 的时钟到输出的延迟。本文用的 SPI Flash 型号是 Micron MT25QU02GCBB8E12-0SIT，可以从它的 &lt;a href=&#34;https://media-www.micron.com/-/media/client/global/documents/products/data-sheet/nor-flash/serial-nor/mt25q/die-rev-b/mt25q_qlkt_u_02g_cbb_0.pdf&#34;&gt;Datasheet&lt;/a&gt; 看到，时钟到输出的延迟应该是 Max 7ns：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Clock LOW to output valid under 30pF Max 7ns
Clock LOW to output valid under 10pF Max 6ns
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因此 &lt;code&gt;tco_max&lt;/code&gt; 设为 7，&lt;code&gt;tco_min&lt;/code&gt; 默认即可，因为 Datasheet 中没有做要求。&lt;/p&gt;
&lt;p&gt;然后 \(t_{su}\) 和 \(t_h\) 则是输入的 setup 和 hold time。类似的，可以查到 SPI Flash 的参数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Data in setup time Min 2.5ns
Data in hold time Min 2ns
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以 &lt;code&gt;tsu&lt;/code&gt; 设为 2.5，&lt;code&gt;th&lt;/code&gt; 设为 2。&lt;/p&gt;
&lt;p&gt;接下来则是 tdata 和 tclk 的 trace delay。这指的是从 FPGA 引脚到 SPI Flash 引脚的信号传输延迟。从严谨的角度来说，可以从板子的布线上测量长度来计算出来，不过这里就先用默认值了。一个简单的估算方法：光速 \(3*10^8 \text{m/s}\)，考虑电信号传播速度是光速的一半，可以得到延迟和长度的比值： \(0.06 \text{ns/cm} = 0.15 \text{ns/inch}\)。&lt;/p&gt;
&lt;p&gt;那么，这些变量怎么参与到 input/output delay 的计算呢？&lt;/p&gt;
&lt;p&gt;首先考虑 input delay。它指的是，从 SPI Flash 到 FPGA 的数据，相对于时钟的延迟。这个延迟由三部分组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从 FPGA 输出的时钟 CCLK 到 SPI Flash 的时钟有延迟 \(t_{clk}\)，下图 &lt;code&gt;a -&amp;gt; b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;从 SPI Flash 的时钟到数据输出有延迟 \(t_{co}\)，下图 &lt;code&gt;b -&amp;gt; c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;从 SPI Flash 的数据到 FPGA 的数据输入有延迟 \(t_{data}\)，下图 &lt;code&gt;c -&amp;gt; d&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clk_fpga&#34;, wave: &#34;p..&#34;, node: &#34;.a&#34; },
      { name: &#34;clk_flash&#34;, wave: &#34;p...&#34;, node: &#34;..b&#34;, phase: 2.7 },
      { name: &#34;data_flash&#34;, wave: &#34;3456&#34;, node: &#34;..c&#34;, phase: 2.5 },
      { name: &#34;data_fpga&#34;, wave: &#34;3456&#34;, node: &#34;..d&#34;, phase: 2.3 },
    ],
  config: { hscale: 3 },
}
&lt;/script&gt;
&lt;p&gt;因此总延迟就是 \(t_{clk}+t_{co}+t_{data}\)，就可以得到对应的设置：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xdc&#34; data-lang=&#34;xdc&#34;&gt;set_input_delay -clock clk_sck -max [expr $tco_max + $tdata_trace_delay_max + $tclk_trace_delay_max] [get_pins -hierarchical *STARTUP*/DATA_IN[*]] -clock_fall;
set_input_delay -clock clk_sck -min [expr $tco_min + $tdata_trace_delay_min + $tclk_trace_delay_min] [get_pins -hierarchical *STARTUP*/DATA_IN[*]] -clock_fall;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来要考虑 output delay。虽然 output delay 也有 min 和 max，但其含义有所区别，需要分别考虑。&lt;/p&gt;
&lt;p&gt;首先是 max，它对应的是 setup time。如果定义时间 0 为时钟的上升沿，沿更早的时间为正的时间轴，沿更晚的时间为负的时间轴。那么，我们希望的是，数据到达寄存器输入的时间大于 setup time，此时可以满足 setup 条件。那么，具体怎么算呢？注意，我们要考虑的是从 FPGA 数据输出到 SPI Flash 上时钟的延迟。&lt;/p&gt;
&lt;p&gt;假设 FPGA CCLK 时钟上升沿在 \(0\) 时刻（下图的 &lt;code&gt;a&lt;/code&gt;），那么 SPI Flash 时钟上升沿在 \(-t_{clk}\) 时刻（下图的 &lt;code&gt;b&lt;/code&gt;）。假设 FPGA 数据输出时刻为 \(t_0\)（通常为正，下图的 &lt;code&gt;c&lt;/code&gt;），那么 FPGA 数据输出到达 SPI Flash 在 \(t_0-t_{data}\) 时刻（下图的 &lt;code&gt;d&lt;/code&gt;），我们期望 \(t_0-t_{data}\) 在 \(-t_{clk}\) 时刻之前（下图的 &lt;code&gt;d -&amp;gt; b&lt;/code&gt;）至少 \(t_{su}\) 时间到达，可以得到表达式：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clk_fpga&#34;, wave: &#34;p..&#34;, node: &#34;.a&#34; },
      { name: &#34;clk_flash&#34;, wave: &#34;p...&#34;, node: &#34;..b&#34;, phase: 2.7 },
      { name: &#34;data_fpga&#34;, wave: &#34;3456&#34;, node: &#34;..c&#34;, phase: 3.6 },
      { name: &#34;data_flash&#34;, wave: &#34;3456&#34;, node: &#34;..d&#34;, phase: 3.4 }
    ],
  config: { hscale: 3 },
}
&lt;/script&gt;
&lt;p&gt;$$
t_0 - t_{data} &amp;gt; -t_{clk} + t_{su}
$$&lt;/p&gt;
&lt;p&gt;化简一下，就可以得到 \(t_0 &amp;gt; t_{data} + t_{su} - t_{clk}\)，如果考虑极端情况，右侧 \(t_{data}\) 取最大值，\(t_{clk}\) 取最小值，我们就可以得到约束：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xdc&#34; data-lang=&#34;xdc&#34;&gt;set_output_delay -clock clk_sck -max [expr $tsu + $tdata_trace_delay_max - $tclk_trace_delay_min] [get_pins -hierarchical *STARTUP*/DATA_OUT[*]];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来考虑 output delay 的 min，这对应的是 hold time。我们希望数据到达 SPI Flash 寄存器的时候，距离上升沿时间超过了 \(t_h\)。还是一样的假设，如果 FPGA CCLK 时钟上升沿在 0 时刻（下图的 &lt;code&gt;a&lt;/code&gt;），那么 SPI Flash 时钟上升沿在 \(-t_{clk}\) 时刻（下图的 &lt;code&gt;b&lt;/code&gt;）。假设 FPGA 数据输出时刻为 \(t_0\)（下图的 &lt;code&gt;c&lt;/code&gt;），那么 FPGA 数据输出到达 SPI Flash 在 \(t_0-t_{data}\) 时刻（下图的 &lt;code&gt;d&lt;/code&gt;），要求满足 hold 条件，可以得到：&lt;/p&gt;
&lt;script type=&#34;WaveDrom&#34;&gt;
{
  signal:
    [
      { name: &#34;clk_fpga&#34;, wave: &#34;p..&#34;, node: &#34;.a&#34; },
      { name: &#34;data_fpga&#34;, wave: &#34;3456&#34;, node: &#34;..c&#34;, phase: 2.6 },
      { name: &#34;clk_flash&#34;, wave: &#34;p...&#34;, node: &#34;..b&#34;, phase: 2.3 },
      { name: &#34;data_flash&#34;, wave: &#34;3456&#34;, node: &#34;..d&#34;, phase: 2.2 },
    ],
  config: { hscale: 3 },
}
&lt;/script&gt;
&lt;p&gt;$$
t_0 - t_{data} &amp;lt; -t_{clk} - t_h
$$&lt;/p&gt;
&lt;p&gt;化简以后，可以得到 \(t_0 &amp;lt; t_{data} - t_{clk} - t_h\)，按照极限来取，\(t_{data}\) 取最小值，$t_{clk}$ 取最大值，可以得到最终的时序约束：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xdc&#34; data-lang=&#34;xdc&#34;&gt;set_output_delay -clock clk_sck -min [expr $tdata_trace_delay_min - $th - $tclk_trace_delay_max] [get_pins -hierarchical *STARTUP*/DATA_OUT[*]];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就可以实现 FPGA 和 SPI Flash 之间的正常通讯了。我觉得，这里比较绕的就是时间轴的定义，和我们平常思考的是反过来的。而且，这里的 min 和 max 并不是指 \([\min, \max]\)，而是 \((-\inf, \min] \cup [\max, \inf)\)。代入上面的数据，可以得到 \(\max=2.05, \min=-2.95, t_0 \in (\inf, -2.95] \cup [2.05, \inf)\)。如果变化的时刻距离时钟上升沿太接近，就会导致在 SPI Flash 侧出现不满足 setup 或者 hold 约束的情况。&lt;/p&gt;
&lt;p&gt;也可以换个角度来理解 min 和 max：对于同一个周期的时钟和数据来说，数据相对时钟有一个延迟，这个延迟不能太小，至少要满足 hold，所以这是一个最小的延迟；同时这个延迟不能太大，最多需要满足下一个时钟上升沿的 setup，所以这是一个最大的延迟。如果从这个角度来看，那就是延迟在一个 \([\min, \max]\) 的范围内。但是，这样在计算的时候就需要把时钟周期纳入到 \(\max\) 的计算中，比如 \(\max=t_c-t_{su}\)。如果我们把坐标轴修改一下，原点变成原来的下一个时钟周期的上升沿，x 的正方向变成反向，就可以得到上面的形式了。&lt;/p&gt;
&lt;h2 id=&#34;artix-7-时序&#34;&gt;Artix 7 时序&lt;/h2&gt;
&lt;p&gt;那么，更常见的 FPGA 是 7 系列的，比如 Artix 7，它采用的是 STARTUPE2 原语，只有时钟是通过 STARTUPE2 原语的 USRCCLKO 信号传递到 CCLK 引脚上的，其他数据信号都是需要在顶层信号绑定对应的引脚。在 AXI Quad SPI 文档中，描述了 STARTUPE2 所需要的时序约束，我们分段来分析一下。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xdc&#34; data-lang=&#34;xdc&#34;&gt;# You must provide all the delay numbers
# CCLK delay is 0.5, 6.7 ns min/max for K7-2; refer Data sheet
# Consider the max delay for worst case analysis
set cclk_delay 6.7
# Following are the SPI device parameters
# Max Tco
set tco_max 7
# Min Tco
set tco_min 1
# Setup time requirement
set tsu 2
# Hold time requirement
set th 3
# Following are the board/trace delay numbers
# Assumption is that all Data lines are matched
set tdata_trace_delay_max 0.25
set tdata_trace_delay_min 0.25
set tclk_trace_delay_max 0.2
set tclk_trace_delay_min 0.2
### End of user provided delay numbers
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，这一部分和上面 UltraScale+ 部分差不多，只是多一个 &lt;code&gt;cclk_delay&lt;/code&gt; 变量，这是因为 Artix 7 中，时钟只能创建到 USRCCLKO 引脚上，但是实际 SPI Flash 接收到的时钟等于 USRCCLKO 到 CCLK 引脚，然后再通过 PCB 上的线传播到 SPI Flash，所以需要手动添加一个偏移，这个偏移就是 USRCCLKO 到 CCLK 的延迟，可以在 &lt;a href=&#34;https://www.xilinx.com/support/documentation/data_sheets/ds181_Artix_7_Data_Sheet.pdf&#34;&gt;Artix 7 Data Sheet&lt;/a&gt; 里面看到：对于 1.0V，-2 速度的 FPGA，这个延迟最小值为 0.50ns，最大值为 6.70ns，这里采用了最大值。&lt;/p&gt;
&lt;p&gt;所以，下面的约束，除了时钟部分以外，和上面分析的 UltraScale+ 时序约束计算方法是相同的。不同点在于，首先约束了从 AXI Quad SPI 到 STARTUPE2 的路由时延，从 0.1ns 到 1.5ns，然后又从 USRCCLKO 创建了一个分频 + 延迟 &lt;code&gt;cclk_delay&lt;/code&gt; 纳秒的时钟，作为 SPI Flash 上 SCK 引脚的时钟。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xdc&#34; data-lang=&#34;xdc&#34;&gt;# this is to ensure min routing delay from SCK generation to STARTUP input
# User should change this value based on the results
# having more delay on this net reduces the Fmax
set_max_delay 1.5 -from [get_pins -hier *SCK_O_reg_reg/C] -to [get_pins -hier
*USRCCLKO] -datapath_only
set_min_delay 0.1 -from [get_pins -hier *SCK_O_reg_reg/C] -to [get_pins -hier
*USRCCLKO]
# Following command creates a divide by 2 clock
# It also takes into account the delay added by STARTUP block to route the CCLK
create_generated_clock -name clk_sck -source [get_pins -hierarchical
*axi_quad_spi_1/ext_spi_clk] [get_pins -hierarchical *USRCCLKO] -edges {3 5 7}
-edge_shift [list $cclk_delay $cclk_delay $cclk_delay]
# Data is captured into FPGA on the second rising edge of ext_spi_clk after the SCK
falling edge

# Data is driven by the FPGA on every alternate rising_edge of ext_spi_clk
set_input_delay -clock clk_sck -max [expr $tco_max + $tdata_trace_delay_max +
$tclk_trace_delay_max] [get_ports IO*_IO] -clock_fall;
set_input_delay -clock clk_sck -min [expr $tco_min + $tdata_trace_delay_min +
$tclk_trace_delay_min] [get_ports IO*_IO] -clock_fall;
set_multicycle_path 2 -setup -from clk_sck -to [get_clocks -of_objects [get_pins
-hierarchical */ext_spi_clk]]
set_multicycle_path 1 -hold -end -from clk_sck -to [get_clocks -of_objects [get_pins
-hierarchical */ext_spi_clk]]
# Data is captured into SPI on the following rising edge of SCK
# Data is driven by the IP on alternate rising_edge of the ext_spi_clk
set_output_delay -clock clk_sck -max [expr $tsu + $tdata_trace_delay_max -
$tclk_trace_delay_min] [get_ports IO*_IO];
set_output_delay -clock clk_sck -min [expr $tdata_trace_delay_min - $th -
$tclk_trace_delay_max] [get_ports IO*_IO];
set_multicycle_path 2 -setup -start -from [get_clocks -of_objects [get_pins
-hierarchical */ext_spi_clk]] -to clk_sck
set_multicycle_path 1 -hold -from [get_clocks -of_objects [get_pins -hierarchical */
ext_spi_clk]] -to clk_sck
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一个 Artix 7 上配置 STARTUP SPI Flash 的例子 &lt;a href=&#34;https://github.com/trivialmips/nontrivial-mips/blob/master/vivado/NonTrivialMIPS.srcs/constrs_1/new/io_timings.xdc&#34;&gt;io_timings.xdc&lt;/a&gt; 可供参考。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>研究 k8s 网络工作原理</title>
      <link>https://jia.je/devops/2021/09/18/k8s-networking/</link>
      <pubDate>Sat, 18 Sep 2021 10:29:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2021/09/18/k8s-networking/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;用 k8s 也有一段时间了，之前遇到过 iptables 等出现问题，导致 k8s 节点间网络出现问题，于是想研究一下 k8s 的网络工作原理。&lt;/p&gt;
&lt;h2 id=&#34;docker-网络&#34;&gt;Docker 网络&lt;/h2&gt;
&lt;p&gt;首先研究一下 Docker 网络连接是如何实现的。Docker 首先会创建一个 bridge，名为 bridge0:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ip a show docker0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3: docker0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1500&lt;/span&gt; qdisc noqueue state UP group default
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    link/ether 02:42:c4:87:73:bf brd ff:ff:ff:ff:ff:ff
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inet6 fe80::42:c4ff:fe87:73bf/64 scope link
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认情况下，每个容器都会有单独的一个 netns，然后创建一对 veth pair，一端留在 global netns，另一端放到容器中。在 global netns 中的 veth 端口会加入到 docker0 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ip a show dev veth3db9316
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21: veth3db9316@if20: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1500&lt;/span&gt; qdisc noqueue master docker0 state UP group default
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    link/ether e2:49:a6:2d:5a:bd brd ff:ff:ff:ff:ff:ff link-netnsid &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inet6 fe80::e049:a6ff:fe2d:5abd/64 scope link
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brctl show docker0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bridge name     bridge id               STP enabled     interfaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker0         8000.0242c48773bf       no              veth3db9316
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;容器中的网络，在 veth 上 docker 会分配并配置一个地址（比如 172.17.0.2），然后设置默认路由 via 172.17.0.1。一方面，可以通过默认路由到 172.17.0.1 再通过 iptables NAT 访问外面的网络：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ iptables-save -t nat
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Generated by xtables-save v1.8.2 on Sat Sep 18 10:44:49 2021&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*nat
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:PREROUTING ACCEPT &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:INPUT ACCEPT &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:POSTROUTING ACCEPT &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:OUTPUT ACCEPT &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:DOCKER - &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-A DOCKER -i docker0 -j RETURN
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COMMIT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Completed on Sat Sep 18 10:44:49 2021&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另一方面，因为连接不同容器的 veth 在同一个 bridge 下面，所以不同容器的可以认为在同一个二层网络中，自然可以互相访问。&lt;/p&gt;
&lt;h2 id=&#34;k8s-网络&#34;&gt;K8s 网络&lt;/h2&gt;
&lt;p&gt;在 k8s 中，所有的 pod 都希望可以通过 IP 地址互联。一个思路是把各个节点上的 pod 通过类似 docker 的方法实现，即每个 netns 通过 veth 连接到一个 bridge 上，然后再想办法去路由在其它节点上的 pod。&lt;/p&gt;
&lt;p&gt;因为我用 k3s 搭建 k8s 集群，它用的 cni 是 flannel。flannel 采用的是 vxlan 的方式来实现节点间的网络通信。&lt;/p&gt;
&lt;p&gt;首先还是看看节点内的 pod 如何组网。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5: cni0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1450&lt;/span&gt; qdisc noqueue state UP group default qlen &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    link/ether 6a:4f:ff:8b:b1:b3 brd ff:ff:ff:ff:ff:ff
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inet 10.42.0.1/24 brd 10.42.0.255 scope global cni0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inet6 fe80::7cf6:57ff:fed7:c49b/64 scope link
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;6: vethc47d6140@if3: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1450&lt;/span&gt; qdisc noqueue master cni0 state UP group default
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    link/ether da:19:f8:48:f6:49 brd ff:ff:ff:ff:ff:ff link-netns cni-9d2a5120-16a3-453e-bf64-c4006c06c93b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inet6 fe80::d819:f8ff:fe48:f649/64 scope link
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先，flannel 给每个节点分配了一个 /24 的网段，比如第一个节点是 10.42.0.0/24，第二个是 10.42.1.0/24，依次类推。然后，节点内的 pod 就从这个网段里分配地址，比如 10.42.0.50/24，它的默认网关是 10.42.0.1。这些 veth 都会加入到 cni0 的 bridge 中。这一部分原理和 docker 是一样的，只不过名字不同了。也有相应的 iptables 规则：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ iptables-save | grep MASQUERADE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-A POSTROUTING -s 10.42.0.0/16 ! -d 224.0.0.0/4 -j MASQUERADE --random-fully
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-A POSTROUTING ! -s 10.42.0.0/16 -d 10.42.0.0/16 -j MASQUERADE --random-fully
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么，节点间网络如何实现呢？假如，我们要从第一个节点 pod 10.42.0.50/24 访问第二个节点的 pod 10.42.1.51/24，首先，pod 根据默认路由会发给 10.42.0.1/24，到达第一个节点的 cni0，然后查路由表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ip r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.42.0.0/24 dev cni0 proto kernel scope link src 10.42.0.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.42.1.0/24 via 10.42.1.0 dev flannel.1 onlink
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它会匹配 10.42.1.0/24 via 10.42.1.0 dev flannel.1 的路由。flannel.1 是一个 vxlan 的 interface：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ip a show flannel.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4: flannel.1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1450&lt;/span&gt; qdisc noqueue state UNKNOWN group default
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    link/ether b6:2f:39:4a:02:c0 brd ff:ff:ff:ff:ff:ff
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inet 10.42.0.0/32 scope global flannel.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inet6 fe80::b42f:39ff:fe4a:2c0/64 scope link
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当这个 interface 接收到一个 packet 的时候，会查询 fdb：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ bridge fdb show brport flannel.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个 fdb 中包括了 (MAC 地址，IP 地址) 的 tuple。当 flannel.1 收到一个 Ethernet Frame 的时候，如果目的地址匹配这里的 MAC 地址，就会直接把 Eth Frame 封装到 UDP 里面发给目的 IP 地址；否则，就会在这个表里面 broadcast。这样，第二个节点就会收到 packet 并且转给实际的 pod。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;总结一下 k8s 的网络互联的实现方法：节点内通过 bridge 实现，把链接各个 netns 的 veth 桥接起来；节点间划分为多个子网，子网间通过 flannel 的网关进行路由，flannel 网关间通过 vxlan 进行互联。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/34749675&#34;&gt;技术干货 | 深入理解 flannel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/140711132&#34;&gt;一文看懂 k8s 的 Flannel 网络&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>浅谈乱序执行 CPU</title>
      <link>https://jia.je/hardware/2021/09/14/brief-into-ooo/</link>
      <pubDate>Tue, 14 Sep 2021 13:47:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/09/14/brief-into-ooo/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/hardware/ooo_cpu.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最早学习乱序执行 CPU 的时候，是在 Wikipedia 上自学的，后来在计算机系统结构课上又学了一遍，但发现学的和现在实际采用的乱序执行 CPU 又有很大区别，后来又仔细研究了一下，觉得理解更多了，就想总结一下。&lt;/p&gt;
&lt;h2 id=&#34;经典-tomasulo&#34;&gt;经典 Tomasulo&lt;/h2&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://people.eecs.berkeley.edu/~pattrsn/252F96/Lecture04.pdf&#34;&gt;Stanford 教材&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;经典 Tomasulo，也是 Wikipedia 上描述的 Tomasulo 算法，它的核心是保留站。指令在 Decode 之后，会被分配到一个保留站中。保留站有以下的这些属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Op：需要执行的操作&lt;/li&gt;
&lt;li&gt;Qj，Qk：操作数依赖的指令目前所在的保留站 ID&lt;/li&gt;
&lt;li&gt;Vj，Qk：操作数的值&lt;/li&gt;
&lt;li&gt;Rj，Rk：操作数是否 ready（或者用特殊的 Qj，Qk 值表示是否 ready）&lt;/li&gt;
&lt;li&gt;Busy：这个保留站被占用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此外还有一个 mapping（Wikipedia 上叫做 RegisterStat），记录了寄存器是否会被某个保留站中的指令写入。&lt;/p&gt;
&lt;p&gt;指令分配到保留站的时候，会查询 RegisterStat，得知操作数寄存器是否 ready，如果不 ready，说明有一个先前的指令要写入这个寄存器，那就记录下对应的保留站 ID。当操作数都 ready 了，就可以进入计算单元计算。当一条指令在执行单元中完成的时候，未出现 WAW 时会把结果写入寄存器堆，并且通过 Common Data Bus 进行广播，目前在保留站中的指令如果发现，它所需要的操作数刚好计算出来了，就会把取值保存下来。&lt;/p&gt;
&lt;p&gt;这里有一些细节：因为保留站中的指令可能要等待其他指令的完成，为了保证计算单元利用率更高，对于同一个计算类型（比如 ALU），需要有若干个同类的保留站（比如 Add1，Add2，Add3）。在 Wikipedia 的表述中，每个保留站对应了一个计算单元，这样性能比较好，但自然面积也就更大。如果节省面积，也可以减少计算单元的数量，然后每个计算单元从多个保留站中获取计算的指令。&lt;/p&gt;
&lt;p&gt;可以思考一下，这种方法的瓶颈在什么地方。首先，每条指令都放在一个保留站中，当保留站满的时候就不能发射新的指令。其次，如果计算单元的吞吐跟不上保留站的填充速度，也会导致阻塞。&lt;/p&gt;
&lt;p&gt;这种方法的一个比较麻烦的点在于难以实现精确异常。精确异常的关键在于，异常之前的指令都生效，异常和异常之后的指令不生效，但这种方法无法进行区分。&lt;/p&gt;
&lt;p&gt;从寄存器重命名的角度来看，可以认为这种方法属于 Implicit Register Renaming，也就是说，把 Register 重命名为保留站的 ID。&lt;/p&gt;
&lt;p&gt;再分析一下寄存器堆需要哪些读写口。有一条规律是，寄存器堆的面积与读写口个数的平方成正比。对于每条发射的指令，都需要从寄存器堆读操作数，所以读口是操作数 x 指令发射数。当执行单元完成计算的时候，需要写入寄存器堆，所以每个执行单元都对应一个寄存器堆的写口。&lt;/p&gt;
&lt;p&gt;硬件实现的时候，为了性能，希望保留站可以做的比较多，这样可以容纳更多的指令。但是，保留站里面至少要保存操作数的值，会比较占用面积，并且时延也比较大。&lt;/p&gt;
&lt;h2 id=&#34;rob-reorder-buffer&#34;&gt;ROB (ReOrder Buffer)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://web.stanford.edu/class/cs349g/cs349g-speculation.pdf&#34;&gt;参考教材&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了实现精确异常，我们需要引入 ROB。在上面的 Tomasulo 算法中，计算单元计算完成的时候，就会把结果写入到寄存器堆中，因此精确异常时难以得到正确的寄存器堆取值。既然我们希望寄存器堆的状态与顺序执行的结果一致，我们需要引入 ROB。&lt;/p&gt;
&lt;p&gt;ROB 实际上就是一个循环队列，队列头尾指针之间就是正在执行的指令，每个 ROB 表项记录了指令的状态、目的寄存器和目的寄存器将要写入的值。ROB 会检查队列头的指令，如果已经执行完成，并且没有异常，就可以让结果生效，并把指令从队列头中删去，继续检查后面的。Decode 出来的指令则会插入到 ROB 的尾部，并且随着指令的执行过程更新状态。遇到异常的指令，就把队列中的指令、保留站和执行单元清空，从异常处理地址开始重新执行。&lt;/p&gt;
&lt;p&gt;为了保证寄存器堆的正确性，运算单元的运算结果会写入 ROB 项中，当这一项在 ROB 队列头部被删去时，就会写入寄存器堆。在经典 Tomasulo 中，寄存器重命名为保留站的 ID，但在这种设计中，应该重命名为 ROB 的 ID，也就是说，需要维护一个寄存器到 ROB ID 的映射，当指令进入保留站的时候，需要从寄存器堆或者 ROB 中去读取操作数的值。在 CDB 上广播的也是 ROB 的 ID，而不是保留站的 ID。&lt;/p&gt;
&lt;p&gt;这种方法中，ROB 的大小成为了一个新的瓶颈，因为每条在正在执行的指令都需要在 ROB 中记录一份。不过好处是实现了精确异常。&lt;/p&gt;
&lt;h2 id=&#34;explicit-register-renaming&#34;&gt;Explicit Register Renaming&lt;/h2&gt;
&lt;p&gt;上面两种设计都是采用的 Implicit Register Renaming 的方法，第一种方法重命名到了保留站，第二种方法重命名到了 ROB。还有一种设计，把寄存器编号映射到物理的寄存器。把 ISA 中的寄存器称为架构寄存器（比如 32 个通用寄存器），CPU 中实际的寄存器称为物理寄存器，物理寄存器一般会比架构寄存器多很多（一两百个甚至更多）。&lt;/p&gt;
&lt;p&gt;Explicit Register Renaming 和 ReOrder Buffer 这两个设计方向可以同时使用，也可以单独使用。&lt;/p&gt;
&lt;p&gt;映射的方法和前面的类似，也是维护一个 mapping，从架构寄存器到物理寄存器。当一条指令 Dispatch 的时候，操作数在 mapping 中找到实际的物理寄存器编号。如果这条指令要写入新的架构寄存器，则从未分配的物理寄存器中分配一个新的物理寄存器，并且更新 mapping，即把写入的架构寄存器映射到新的物理寄存器上。然后，放到 Issue Queue 中。&lt;/p&gt;
&lt;p&gt;Issue Queue 可以理解为保留站的简化版，它不再保存操作数的取值，而仅仅维护操作数是否 ready。后面解释为什么不需要保存操作数的取值。在 Issue Queue 中的指令在所有操作数都 ready 的时候，则会 Issue 到不同的端口中。每个端口对应着一个执行单元，比如两个 ALU 端口分别对应两个 ALU 执行单元。指令首先通过寄存器堆，以物理寄存器为编号去读取数据，然后这个值直接传给执行单元，不会存下来。当执行单元执行完毕的时候，结果也是写到物理寄存器堆中，ROB 不保存数据。&lt;/p&gt;
&lt;p&gt;可以发现，这种设计中，值仅保存在寄存器堆中，Issue Queue 和 ROB 都只保存一些状态位，因此它们可以做的很大，典型的 Issue Queue 有几十项，ROB 则有几百项。&lt;/p&gt;
&lt;p&gt;接下来讨论一些细节。首先是，物理寄存器何时释放。当一条指令写入一个架构寄存器的时候，在下一次这个架构寄存器被写入之前，这个寄存器的值都有可能被读取，因此这个架构寄存器到物理寄存器的映射要保留。如果我们能保证读取这个值的指令都已经完成，我们就可以释放这个物理寄存器了。一个方法是，我在覆盖架构寄存器到物理寄存器的映射时，我还要记录原来的物理寄存器，当该指令在 ROB 中提交了（从队头出去了），说明之前可能依赖这个物理寄存器的所有指令都完成了，这时候就可以把原来的物理寄存器放到未映射的列表中。&lt;/p&gt;
&lt;p&gt;还有一个问题，就是在遇到异常的时候，如何恢复在异常指令处的架构寄存器到物理寄存器的映射呢？一个办法是，利用我在 ROB 中记录的被覆盖的物理寄存器编号，从 ROB 队尾往前回滚，当发现一条指令覆盖了一个架构寄存器映射的时候，就恢复为覆盖之前的值。这样，当回滚到异常指令的时候，就会得到正确的映射。&lt;a href=&#34;https://ieeexplore.ieee.org/document/491460&#34;&gt;MIPS R10K 的论文&lt;/a&gt;中是这么描述的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The active list contains the logical-destination register number and its
old physical-register number for each instruction. An instruction&#39;s
graduation commits its new mapping, so the old physical register can
return to the free list for reuse. When an exception occurs, however,
subsequent instructions never graduate. Instead, the processor restores
old mappings from the active list. The R1OOOO unmaps four instructions
per cycle--in reverse order, in case it renamed the same logical
register twice. Although this is slower than restoring a branch,
exceptions are much rarer than mispredicted branches. The processor
returns new physical registers to the free lists by restoring their read
pointers.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;和 @CircuitCoder 讨论并参考 &lt;a href=&#34;https://docs.boom-core.org/en/latest/sections/reorder-buffer.html#parameterization-rollback-versus-single-cycle-reset&#34;&gt;BOOM 文档&lt;/a&gt; 后发现，另一种办法是记录一个 Committed Map Table，也就是，只有当 ROB Head 的指令被 Commit 的时候，才更新 Committed Map Table，可以认为是顺序执行的寄存器映射表。当发生异常的时候，把 Committed Map Table 覆盖到 Register Map Table 上。这样需要的周期比较少，但是时序可能比较差。&lt;/p&gt;
&lt;h2 id=&#34;implicit-renamingrob-和-explicit-renaming-的比较&#34;&gt;Implicit Renaming(ROB) 和 Explicit Renaming 的比较&lt;/h2&gt;
&lt;p&gt;这两种方法主要区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Implicit Renaming 在分发的时候，就会从寄存器堆读取数据，保存到保留站中；而 Explicit Renaming 是指令从 Issue Queue 到执行单元时候从寄存器堆读取数据&lt;/li&gt;
&lt;li&gt;Implicit Renaming 的寄存器堆读取口较少，只需要考虑发射数乘以操作数个数，但所有类型的寄存器堆（整数、浮点）都需要读取；Explicit Renaming 的寄存器堆读取口更多，对于每个 Issue Queue，都需要操作数个数个读取口，但好处是可以屏蔽掉不需要访问的读取口，比如浮点 FMA 流水不需要读取整数寄存器堆。写和读是类似的：Implicit Renaming 中，寄存器堆的写入是从 ROB 上提交；而 Explicit Renaming 则是执行单元计算完后写入寄存器堆。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;其他优化的手段&#34;&gt;其他优化的手段&lt;/h2&gt;
&lt;p&gt;在第一和第二种设计中，当一条指令计算完成时，结果会直接通过 CDB 转发到其他指令的输入，这样可以提高运行效率。在第三种设计中，为了提高效率，也可以做类似的事情，但因为中间多了一级寄存器堆读取的流水线级，处理会更加复杂一点。比如，有一条 ALU 指令，可以确定它在一个周期后一定会得到计算结果，那么我就可以提前把依赖这条指令的其他指令 Dispatch 出去，然后在 ALU 之间连接一个 bypass 网络，这样就可以减少一些周期。&lt;/p&gt;
&lt;p&gt;此外，为了提高吞吐率，一般计算单元都被设计为每个周期可以接受一条指令，在内部实现流水线执行，每个周期完成一条指令的计算。当然了，很多时候由于数据依赖问题，可能并不能达到每个周期每个计算单元都满载的情况。&lt;/p&gt;
&lt;p&gt;有些时候，一些指令不方便后端实现，就会加一层转换，从指令转换为 uop，再由后端执行。这在 x86 处理器上很普遍，因为指令集太复杂了。像 AArch64 指令集，它在 Load/Store 的时候可以对地址进行计算，这种时候也是拆分为两条 uop 来执行。一些实用的指令需要三个操作数，比如 &lt;code&gt;D = A ? B : C&lt;/code&gt;，在 Alpha 21264 中，这条指令会转换为两条 uop，这两条 uop 的操作数就只有两个，便于后端实现，否则在各个地方都允许三个操作数会导致一定的浪费。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Locale 影响排序的特殊副作用</title>
      <link>https://jia.je/software/2021/09/02/locale/</link>
      <pubDate>Thu, 02 Sep 2021 12:35:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2021/09/02/locale/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在答疑的时候，发现同一条命令在不同系统上行为不同，一开始以为是 bash 版本问题，排查后最后发现是 locale 的问题。一个例子如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat poc.txt | tr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; + - * / &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;a b A B 一 二 测 试 α
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ LANG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; sort poc.txt | tr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* + - / &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; A B &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;a b α 一 二 测 试
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ LANG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zh_CN.UTF-8&amp;#34;&lt;/span&gt; sort poc.txt | tr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* + - / &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 测 二 试 一 a A b B α
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ LANG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en_US.UTF-8&amp;#34;&lt;/span&gt; sort poc.txt | tr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* + - / &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; a A b B α 一 二 测 试
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意 \ 1 a A 的顺序，在不同的 locale 下结果不同。&lt;/p&gt;
&lt;p&gt;网上也有关于这个问题的讨论：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://unix.stackexchange.com/questions/75341/specify-the-sort-order-with-lc-collate-so-lowercase-is-before-uppercase&#34;&gt;https://unix.stackexchange.com/questions/75341/specify-the-sort-order-with-lc-collate-so-lowercase-is-before-uppercase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/43448655/weird-behavior-of-bash-glob-regex-ranges&#34;&gt;https://stackoverflow.com/questions/43448655/weird-behavior-of-bash-glob-regex-ranges&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>一次从 RHEL 6 到 CentOS 7 的更新</title>
      <link>https://jia.je/system/2021/08/30/rhel6-upgrade-centos7/</link>
      <pubDate>Mon, 30 Aug 2021 13:20:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2021/08/30/rhel6-upgrade-centos7/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;有一台 RHEL 6 的服务器，各种软件版本太老了，用起来很难受，因此想升级。一开始想升级到 RHEL 7，但是发现必须要从 RedHat 下载 ISO，比较慢，所以我就先切换到 CentOS 6，再升级到 CentOS 7&lt;/p&gt;
&lt;h2 id=&#34;过程&#34;&gt;过程&lt;/h2&gt;
&lt;h3 id=&#34;rhel-6-pre-upgrade&#34;&gt;RHEL 6 Pre upgrade&lt;/h3&gt;
&lt;p&gt;一开始还是打算升级到 RHEL 7，所以跟随 RedHat 的文档去做 pre upgrade check，发现有一步要跑好久，网上搜了一下，发现这个步骤会扫描已有的各种程序，检查升级以后会不会出现不能运行的问题。但是如果有很多小文件，这一个过程就会进行很久，好在可以设置 exclusion 目录。最后检查出来的结果就是 GNOME 没法升级，建议卸载。&lt;/p&gt;
&lt;p&gt;倒腾了一下升级工具，发现需要离线安装，比较麻烦，我就干脆换 CentOS 了。&lt;/p&gt;
&lt;h3 id=&#34;rhel-6---centos-6&#34;&gt;RHEL 6 -&amp;gt; CentOS 6&lt;/h3&gt;
&lt;p&gt;首先，把软件源都切换到 CentOS，这一步很简单，因为包都是一样的。只不过，因为 CentOS 6 在 centos-vault 里面，所以用起来比较麻烦。&lt;/p&gt;
&lt;h3 id=&#34;centos-6---centos-7&#34;&gt;CentOS 6 -&amp;gt; CentOS 7&lt;/h3&gt;
&lt;p&gt;由于 CentOS 6 到 CentOS 7 升级涉及的改动比较多，官方提供了一个升级工具。一开始，我想直接升级到 CentOS 7 最新版本，但是报错，看到网上说可以升级到 CentOS 7 的早期版本，试了一下，确实没问题。&lt;/p&gt;
&lt;p&gt;一通升级以后，重启，进入更新过程，发现很多包都安装失败了。重启以后，因为找不到 rootfs，挂在了 dracut 的 initramfs 里面。&lt;/p&gt;
&lt;h3 id=&#34;漫长的修复过程&#34;&gt;漫长的修复过程&lt;/h3&gt;
&lt;p&gt;简单试了一下，发现 dracut 的 initramfs 里程序太少了，调试起来很痛苦。所以，我在 BMC 里通过 Virtual Media 挂了一个 Arch Linux 的 Live CD。因为通过 Web 访问延迟太高，我设了一个 root 密码，然后直接 ssh 到 live cd 系统中。&lt;/p&gt;
&lt;p&gt;接着，我发现，可以正常找到盘和里面的各个分区，所以怀疑是之前 initramfs 里缺了什么东西，导致找不到硬盘。我 arch-chroot 到 root 分区里，然后手动更新各个包，特别麻烦：我首先升级了 yum repos 到最新的 CentOS 7，然后手动删掉/升级 el6 的各个软件包。最后好不容易把 kernel 终于升级好了，又重新生成 grub2 的配置，因为 CentOS 6 是 grub1。这时候，重启进入系统，发现可以找到 rootfs 了，但是经过 selinux relabel 以后，仍然会遇到 systemd-logind 起不来的问题，伴随着一系列的 audit 报警。&lt;/p&gt;
&lt;p&gt;最后，使出了暴力的解决办法：在 cmdline 中设置 selinux=0 audit=0，然后终于进入系统了。再继续删掉一些 el6 的包，然后升级各种包，最后终于是恢复了正常。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>轶事一则</title>
      <link>https://jia.je/misc/2021/08/06/intel-intrinsics-guide/</link>
      <pubDate>Fri, 06 Aug 2021 19:37:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2021/08/06/intel-intrinsics-guide/</guid>
      <description>&lt;p&gt;7.31 号周六的时候，发现 Intel Intrinsics Guide(&lt;a href=&#34;https://software.intel.com/sites/landingpage/IntrinsicsGuide/&#34;&gt;https://software.intel.com/sites/landingpage/IntrinsicsGuide/&lt;/a&gt;) 出现错误，加载数据失败，于是在 Intel 的网站上提交了一个 bug。&lt;/p&gt;
&lt;p&gt;8.2 号的时候，Intel 发邮件过来，说已经复现了问题，已经汇报给了后端团队。邮件原文：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Thank you for bringing this to our attention. We have verified and
encountered the same issue. Please know that we have escalated this
issue to our backend technical team. 

We will get back to you as soon as we have an update. Have a nice day
ahead!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;8.4 号的时候，Intel 再次发邮件过来，说后端团队正在处理这个问题，会尽快完成修复，请我耐心等待。这个时候我去网站上看，还是有问题。邮件原文：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Our backend team is still working on this issue. We are trying our level
best to get back to you with an update soon.

Have a nice day ahead!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;8.6 号 19:27 的时候，Intel 又发了一次邮件，说后端团队依然在处理这个问题，并且正在进行一个永久性的修复（言下之意是现在提供了一个临时性的修复）。这个时候去网站上看，终于是修好了。邮件原文：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;We have received an update from our backend team is that they are
working on this issue and, a more permanent fix is in the works.
Hopefully, it will resolve soon.

We appreciate your patience and understanding on this matter. Have a
nice day!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我回复了一下邮件，告诉 Intel 我这边看到已经是修复好的版本，紧接着又收到了一封邮件，告诉我可以从网站上下载离线版的 Intrinsics Guide：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Thank you for your prompt response. We are glad that your issue has been
resolved and we would like to thank you for your co operation.  Please
be informed that the offline version of the Intrinsic Guide is now
available for download from the site. The offline version of the guide
has the same content as the site, but is viewable offline by the user. A
link to the download is now added in the left column of the site:
https://software.intel.com/sites/landingpage/IntrinsicsGuide/

That said, we are closing this ticket and if you have further issues
please open another ticket and we will be happy to help you.

After case closure, you will receive a survey email. We appreciate it if
you can complete this survey regarding the support you received.  Your
feedback will help us improve our support.

For any concerns related to Intel® Developer Zone account, login or
website, please feel free to open a new ticket:
https://software.intel.com/en-us/support
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这次 Intel Support 的反应挺快的，给个好评。就是希望 Intel 能够不挤牙膏，能拿出和 AMD 相当水平的 CPU。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>配置 homebridge-broadlink-rm-pro</title>
      <link>https://jia.je/software/2021/07/24/homebridge-rm-mini-3/</link>
      <pubDate>Sat, 24 Jul 2021 20:42:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2021/07/24/homebridge-rm-mini-3/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近发现空调遥控器电池有点不足，有时候会自动关机，于是拿出以前买的 Broadlink RM mini 3 充当远程的空调遥控器使用。为了方便手机上配置，分别采用了官方的 App 智慧星和 homebridge 进行配置。&lt;/p&gt;
&lt;h2 id=&#34;步骤&#34;&gt;步骤&lt;/h2&gt;
&lt;p&gt;首先用官方的智慧星配置好 Broadlink RM mini 3 的网络，然后配置 homebridge-broadlink-rm-pro。最早的插件作者不怎么更新了，这个版本是目前用的比较多的一个 fork。&lt;/p&gt;
&lt;p&gt;安装好以后，在 Home 里面可以看到 Scan Code 的开关。打开以后，用遥控器在 Broadlink RM mini 3 附近按按键，就可以在 Homebridge 日志里看到 hex code 了。然后，就按照插件教程里的方法写配置，例子如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;platform&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BroadlinkRM&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Broadlink RM&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;accessories&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Air Conditioner&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;air-conditioner&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;noHumidity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;minTemperature&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;maxTemperature&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;defaultCoolTemperature&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;off&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2600...&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cool28&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2600...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cool27&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2600...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cool26&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2600...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以在手机上方便地控制空调温度了。测试了一下，可以用 Siri 说“设置空调为 XX 度”，也是完全可以工作的。&lt;/p&gt;
&lt;p&gt;P.S. 小米的空气净化器现在可以用插件 &lt;a href=&#34;https://github.com/torifat/xiaomi-mi-air-purifier#readme&#34;&gt;https://github.com/torifat/xiaomi-mi-air-purifier#readme&lt;/a&gt;，之前博客里写的那一个已经不更新了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>轶事一则</title>
      <link>https://jia.je/misc/2021/07/19/sigs/</link>
      <pubDate>Mon, 19 Jul 2021 21:29:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2021/07/19/sigs/</guid>
      <description>&lt;p&gt;7.17 号周六的时候，一位朋友 &lt;a href=&#34;https://github.com/elenacliu&#34;&gt;@elenacliu&lt;/a&gt; 发现&lt;a href=&#34;https://www.sigs.tsinghua.edu.cn/2020/0923/c118a21164/page.htm&#34;&gt;深研院网站&lt;/a&gt;的一个&lt;a href=&#34;https://www.sigs.tsinghua.edu.cn/_upload/article/files/81/7c/a5c0421f4e418de32ef13701da95/448b40b3-87e2-4026-832e-28b113a01f4a.pdf&#34;&gt;文档链接&lt;/a&gt;，文档中标题写的是 2021，但是网页的标题显示的是 2006 年。于是我发邮件给深研院的招生办，抄送本部的研招办，提交了这个 issue。&lt;/p&gt;
&lt;p&gt;7.19 号周一上午的时候，本部的研招办回复了一封邮件，没有理解我想表达的意思，可能以为我是要报考的学生，让我关注明年发布的文档。&lt;/p&gt;
&lt;p&gt;7.19 号周一下午的时候，深研院招生办回复了邮件，说“谢谢你的反馈”，不过没有提到是否进行了修复。我晚上再查看页面的时候，发现&lt;a href=&#34;https://www.sigs.tsinghua.edu.cn/_upload/article/files/81/7c/a5c0421f4e418de32ef13701da95/7917dd50-ad49-4664-a275-821fab3bfd87.pdf&#34;&gt;新的文档链接&lt;/a&gt;已经修复了问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nginx 处理 POST 请求出现 Internal Server Error 排查一则</title>
      <link>https://jia.je/software/2021/07/16/nginx-post-internal-server-error/</link>
      <pubDate>Fri, 16 Jul 2021 00:16:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2021/07/16/nginx-post-internal-server-error/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近一个服务忽然出现问题，用户反馈，HTTP POST 一个小的 body 不会出错，POST 一个大的 body 就会 500 Internal Server Error。&lt;/p&gt;
&lt;h2 id=&#34;排查&#34;&gt;排查&lt;/h2&gt;
&lt;p&gt;观察后端日志，发现没有出错的那一个请求。观察 Nginx 日志，发现最后一次日志是几个小时前。最后几条 Nginx 日志写的是 &lt;code&gt;a client request body is buffered to a temporary file&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;继续研究后，发现是硬盘满了。Nginx 在处理 POST body 的时候，如果 body 超过阈值，会写入到临时文件中：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Syntax: client_body_buffer_size size;
Default: client_body_buffer_size 8k|16k;
Context: http, server, location
Sets buffer size for reading client request body. In case the request body is larger than the buffer, the whole body or only its part is written to a temporary file. By default, buffer size is equal to two memory pages. This is 8K on x86, other 32-bit platforms, and x86-64. It is usually 16K on other 64-bit platforms.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;详见 &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size&#34;&gt;https://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这就可以解释为什么 Nginx 返回 500 而且没有转发到后端，也可以解释为什么 Nginx 没有输出新的错误日志。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>将 k8s rook ceph 集群迁移到 cephadm</title>
      <link>https://jia.je/devops/2021/06/25/ceph-k8s-to-external/</link>
      <pubDate>Fri, 25 Jun 2021 20:29:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2021/06/25/ceph-k8s-to-external/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;前段时间用 rook 搭建了一个 k8s 内部的 ceph 集群，但是使用过程中遇到了一些稳定性问题，所以想要用 cephadm 重建一个 ceph 集群。&lt;/p&gt;
&lt;h2 id=&#34;重建过程&#34;&gt;重建过程&lt;/h2&gt;
&lt;p&gt;重建的时候，我首先用 cephadm 搭建了一个 ceph 集群，再把原来的 MON 数据导入，再恢复各个 OSD。理论上，可能有更优雅的办法，但我还是慢慢通过比较复杂的办法解决了。&lt;/p&gt;
&lt;h3 id=&#34;cephadm-搭建-ceph-集群&#34;&gt;cephadm 搭建 ceph 集群&lt;/h3&gt;
&lt;p&gt;首先，配置 &lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/help/ceph/&#34;&gt;TUNA 源&lt;/a&gt;，在各个节点上安装 &lt;code&gt;docker-ce&lt;/code&gt; 和 &lt;code&gt;cephadm&lt;/code&gt;。接着，在主节点上 bootstrap：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cephadm bootstrap --mon-ip HOST1_IP
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，在主节点上会运行最基础的 ceph 集群，不过此时还没有任何数据。寻找 ceph 分区，会发现因为 FSID 不匹配而无法导入。所以，首先要恢复 MON 数据。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;a href=&#34;https://docs.ceph.com/en/latest/cephadm/install/&#34;&gt;cephadm install&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;恢复-mon-数据&#34;&gt;恢复 MON 数据&lt;/h3&gt;
&lt;p&gt;首先，关掉 rook ceph 集群，找到留存下来的 MON 数据目录，默认路径是 &lt;code&gt;/var/lib/rook&lt;/code&gt; 下的 &lt;code&gt;mon-[a-z]&lt;/code&gt; 目录，找到最新的一个即可。我把目录下的路径覆盖到 cephadm 生成的 MON 目录下，然后跑起来，发现有几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;cephadm 生成的 /etc/ceph/ceph.client.admin.keyring 与 MON 中保存的 auth 信息不匹配，导致无法访问&lt;/li&gt;
&lt;li&gt;FSID 不一致，而 cephadm 会将各个设置目录放到 &lt;code&gt;/var/lib/ceph/$FSID&lt;/code&gt; 下&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一个问题的解决办法就是临时用 MON 目录下的 keyring 进行认证，再创建一个新的 client.admin 认证。第二个问题的解决办法就是将遇到的各种 cephadm 生成的 FSID 替换为 MON 中的 FSID，包括目录名、各个目录下 unit.run 中的路径和 systemd unit 的名称。&lt;/p&gt;
&lt;p&gt;进行一系列替换以后，原来的 MON 已经起来了，可以看到原来保留的各个 pool 和 cephfs 信息。&lt;/p&gt;
&lt;h3 id=&#34;扩展到多节点&#34;&gt;扩展到多节点&lt;/h3&gt;
&lt;p&gt;接下来，由于 MON 中保存的数据更新了，所以要重新生成 cephadm 的 SSH 密钥。将 SSH 密钥复制到各节点后，再用 cephadm 的 orch 功能部署到其他节点上。此时 FSID 都已经是 MON 中的 FSID，不需要替换。此时可以在 &lt;code&gt;ceph orch ps&lt;/code&gt; 命令中看到在各个节点上运行的程序。接下来，还需要恢复各个 OSD。&lt;/p&gt;
&lt;h3 id=&#34;导入-osd&#34;&gt;导入 OSD&lt;/h3&gt;
&lt;p&gt;为了从 ceph 分区从导出 OSD 的配置文件，需要用 &lt;code&gt;ceph-volume&lt;/code&gt; 工具。这个工具会生成一个 &lt;code&gt;/var/lib/ceph/osd-ID&lt;/code&gt; 目录，在 cephadm 的概念里属于 legacy，因此我们首先要把路径 mount 到 shell 里面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cephadm shell --mount /var/lib/ceph:/var/lib/ceph
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着，生成 osd 目录配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ceph-volume lvm activate --all --no-systemd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，可以看到创建了对应的 osd 路径，再用 cephadm 进行转换：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cephadm adopt --style legacy --name osd.ID
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以用 cephadm 管理了。&lt;/p&gt;
&lt;h2 id=&#34;配置-k8s&#34;&gt;配置 k8s&lt;/h2&gt;
&lt;p&gt;配置好外部 ceph 集群后，还需要配置 k8s rook。&lt;/p&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://rook.github.io/docs/rook/v1.8/ceph-cluster-crd.html#external-cluster&#34;&gt;https://rook.github.io/docs/rook/v1.8/ceph-cluster-crd.html#external-cluster&lt;/a&gt;，大概有这么几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 ceph 集群上运行 create-external-cluster-resources.sh，创建用户，并且导出 key&lt;/li&gt;
&lt;li&gt;在 k8s 集群上应用第一步生成的环境变量，然后运行 import-external-cluster.sh&lt;/li&gt;
&lt;li&gt;复制一份 cluster-external.yaml 然后应用&lt;/li&gt;
&lt;li&gt;复制 storageclass.yaml，把里面的 namespace 改成 rook-ceph-external&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 11 的 ABI 问题</title>
      <link>https://jia.je/programming/2021/06/23/cpp-11-abi-problem/</link>
      <pubDate>Wed, 23 Jun 2021 14:48:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2021/06/23/cpp-11-abi-problem/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;有同学遇到这样的一个问题，代码中链接了一个第三方的动态库，在链接的时候出现了不一致的问题，比如有一个函数签名如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foobar&lt;/span&gt;(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string s) {}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 GCC 11.1.0 编译上面的代码，可以发现它需要的符号是 &lt;code&gt;_Z6foobarNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE&lt;/code&gt;，但是第三方库里面却是 &lt;code&gt;_Z6foobarSs&lt;/code&gt;，因此找不到对应的符号，链接失败。&lt;/p&gt;
&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;经过一番研究，发现 &lt;code&gt;Ss&lt;/code&gt; 在 &lt;a href=&#34;https://itanium-cxx-abi.github.io/cxx-abi/abi.html&#34;&gt;Itanium ABI&lt;/a&gt; 中表示的是缩写：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;In addition, the following catalog of abbreviations of the form &amp;#34;Sx&amp;#34; are used:


   &amp;lt;substitution&amp;gt; ::= St # ::std::
   &amp;lt;substitution&amp;gt; ::= Sa # ::std::allocator
   &amp;lt;substitution&amp;gt; ::= Sb # ::std::basic_string
   &amp;lt;substitution&amp;gt; ::= Ss # ::std::basic_string &amp;lt; char,
						 ::std::char_traits&amp;lt;char&amp;gt;,
						 ::std::allocator&amp;lt;char&amp;gt; &amp;gt;
   &amp;lt;substitution&amp;gt; ::= Si # ::std::basic_istream&amp;lt;char,  std::char_traits&amp;lt;char&amp;gt; &amp;gt;
   &amp;lt;substitution&amp;gt; ::= So # ::std::basic_ostream&amp;lt;char,  std::char_traits&amp;lt;char&amp;gt; &amp;gt;
   &amp;lt;substitution&amp;gt; ::= Sd # ::std::basic_iostream&amp;lt;char, std::char_traits&amp;lt;char&amp;gt; &amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这看起来很正常，&lt;code&gt;_Z6foobarSs&lt;/code&gt; 表示的是 &lt;code&gt;foobar(std::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt;)&lt;/code&gt;，但是 GCC 11.1.0 编译出来的上面的代码却没有用这个符号，而是 &lt;code&gt;foobar(std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt;)&lt;/code&gt;。差别就在于 &lt;code&gt;__cxx11&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;经过一番搜索，找到了 GCC &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dual_abi.html&#34;&gt;关于这个问题的文档&lt;/a&gt;和&lt;a href=&#34;https://developers.redhat.com/blog/2015/02/05/gcc5-and-the-c11-abi&#34;&gt;网上的文章&lt;/a&gt;，找到了原因：从 GCC5 开始，为了兼容 C++11 标准的改变，做了这个变动。如果要恢复原来的行为，需要添加一个定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ g++ -D_GLIBCXX_USE_CXX11_ABI&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; -c test.cpp -o test.o &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nm test.o | grep foobar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; T _Z6foobarSs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ g++ -c test.cpp -o test.o &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nm test.o | grep foobar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; T _Z6foobarNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# install g++-4.9 in ubuntu 16.04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ g++-4.9 -c test.cpp -o test.o &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nm test.o | grep foobar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; T _Z6foobarSs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以正常链接到第三方的动态库了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>硬盘相关的概念</title>
      <link>https://jia.je/hardware/2021/05/06/disk/</link>
      <pubDate>Thu, 06 May 2021 11:37:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/05/06/disk/</guid>
      <description>&lt;h2 id=&#34;ata&#34;&gt;ATA&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Parallel_ATA&#34;&gt;ATA&lt;/a&gt; 定义了发送给硬盘的命令，&lt;a href=&#34;https://people.freebsd.org/~imp/asiabsdcon2015/works/d2161r5-ATAATAPI_Command_Set_-_3.pdf&#34;&gt;标准&lt;/a&gt;定义了命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ech IDENTIFY DEVICE: 获取设备信息&lt;/li&gt;
&lt;li&gt;25h READ DMA EXT: 读取扇区&lt;/li&gt;
&lt;li&gt;35h WRITE DMA EXT: 写入扇区&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ATA 同时也是接口，图片如下。ATA 前身是 IDE，现在 ATA 叫做 PATA。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/d/d9/ATA_Plug.svg/600px-ATA_Plug.svg.png&#34; alt=&#34;PATA Pin&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ahci&#34;&gt;AHCI&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Host_Controller_Interface&#34;&gt;AHCI&lt;/a&gt; 可以简单理解为 PCIe &amp;lt;-&amp;gt; SATA 的转换器。AHCI 暴露为一个 PCIe 设备：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ lspci -vv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00:1f.2 SATA controller: Intel Corporation C600/X79 series chipset 6-Port SATA AHCI Controller &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rev 05&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Kernel modules: ahci
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;处理器通过 IO port/MMIO 访问 AHCI，然后 AHCI HBA 连接到 SATA 设备。&lt;/p&gt;
&lt;h2 id=&#34;sata&#34;&gt;SATA&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Serial_ATA&#34;&gt;SATA&lt;/a&gt; 一般说的是接口。它一般分为两个部分，数据和电源。数据部分只有 7 个 pin，三个 GND 和两对差分线（A+A- B+B-），图片如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/e/ef/SATA_Data_Cable.jpg&#34; alt=&#34;SATA Data&#34;&gt;&lt;/p&gt;
&lt;p&gt;电源部分有 15 个 pin，有 GND 3.3V 5V 和 12V，图片如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/SATA_power_cable.jpg/400px-SATA_power_cable.jpg&#34; alt=&#34;SATA Power&#34;&gt;&lt;/p&gt;
&lt;p&gt;常见的 SATA 盘有 2.5 英寸（small form factor, SFF）和 3.5 英寸（large form factor，LFF）两种规格。&lt;/p&gt;
&lt;h2 id=&#34;m2&#34;&gt;M.2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/M.2&#34;&gt;M.2&lt;/a&gt; 又称 NGFF，有不同的 key 类型。常见的是 B 和 M：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B key: 12-19 notched, PCIe x2, SATA&lt;/li&gt;
&lt;li&gt;M key: 59-66 notched, PCIe x4, SATA&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都有部分引脚的位置是空的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/e/ed/M2_Edge_Connector_Keying.svg/620px-M2_Edge_Connector_Keying.svg.png&#34; alt=&#34;M.2&#34;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href=&#34;https://pinoutguide.com/HD/M.2_NGFF_connector_pinout.shtml&#34;&gt;这里&lt;/a&gt;可以看到两种 key 的 pinout。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B key: SATA pin B(41,43) A(47,49), PCIe x2 pin R1(29,31) T1(35,37) R0(41,43) T0(47,49), USB 3.0 pin TX(29, 31) RX(35,37)&lt;/li&gt;
&lt;li&gt;M key: SATA 同上，PCIe x4 pin R3(5,7) T3(11,13) R2(17,19) T2(23,25) Lane 0,1 同上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，SATA pin 和 PCIe 的两个 lane 在 B 和 M key 中是一样的，物理上也是可以兼容的。&lt;/p&gt;
&lt;p&gt;因为支持 SATA 和 PCIe，就有下面三种可能的使用方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PCIe &amp;ndash; AHCI HBA(Board) &amp;ndash; SATA(M.2) &amp;ndash; Disk: 传统方式，只不过物理接口从 SATA 变成了 M.2&lt;/li&gt;
&lt;li&gt;PCIe &amp;ndash; PCIe Device(M.2) &amp;ndash; Disk(AHCI)：硬盘实现了 AHCI 的接口，通过 PCIe 连接到 CPU&lt;/li&gt;
&lt;li&gt;PCIe &amp;ndash; PCIe Device(M.2) &amp;ndash; Disk(NVMe)：硬盘实现了 NVMe 的接口，通过 PCIe 连接到 CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/SATA_Express_interface.svg/620px-SATA_Express_interface.svg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sata-express&#34;&gt;SATA express&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/SATA_Express&#34;&gt;SATA express&lt;/a&gt; 在 SATA 3.2 引入，它用的很少，被 U.2 取代。提供了 PCIe x2 或者 SATA x2。&lt;/p&gt;
&lt;h2 id=&#34;u2&#34;&gt;U.2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/U.2&#34;&gt;U.2&lt;/a&gt; 也叫 &lt;a href=&#34;https://members.snia.org/document/dl/26489&#34;&gt;SFF-8639&lt;/a&gt;。它和 &lt;a href=&#34;https://en.wikipedia.org/wiki/SATA_Express&#34;&gt;SATA express&lt;/a&gt; 接口一样，但提供了 PCIe x4 或者 SATA x2。详见 &lt;a href=&#34;https://pinoutguide.com/HD/U.2_SATA_connector_pinout.shtml&#34;&gt;pinout&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.delock.com/infothek/U.2-NVMe/images/teaser.jpg&#34; alt=&#34;U.2&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;速度比较&#34;&gt;速度比较&lt;/h2&gt;
&lt;p&gt;不同的协议的速度如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SATA 3.0: 6Gb/s(8b/10b, 4Gb/s uncoded)&lt;/li&gt;
&lt;li&gt;SAS-1: 3Gb/s&lt;/li&gt;
&lt;li&gt;SAS-2: 6Gb/s&lt;/li&gt;
&lt;li&gt;SAS-3: 12Gb/s&lt;/li&gt;
&lt;li&gt;SAS-4: 22.5Gb/s&lt;/li&gt;
&lt;li&gt;PCIe 3.0 x4: 32Gb/s(8GT/s, 128b/130b, 31.5 Gb/s uncoded)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更完整的可以看&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_interface_bit_rates&#34;&gt;List of interface bit rates&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/192574/intel-ssd-dc-p4618-series-6-4tb-1-2-height-pcie-3-1-x8-3d2-tlc.html&#34;&gt;Intel SSD DC P4618 Series&lt;/a&gt; 读写速度可以达到 40~50 Gb/s，它采用的是 PCIe 3.0 x8(64Gb/s) NVMe。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/125024/intel-ssd-545s-series-1-024tb-2-5in-sata-6gb-s-3d2-tlc.html&#34;&gt;Intel SSD 545s Series&lt;/a&gt; 读写速度约 4Gb/s，采用的是 SATA 3.0 6Gb/s。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.samsung.com/semiconductor/minisite/ssd/product/consumer/970evo/&#34;&gt;SAMSUNG 970 EVO&lt;/a&gt; 读写速度 20~30 Gb/s，它采用的是 PCIe 3.0 x4(32Gb/s) NVMe。&lt;/p&gt;
&lt;h2 id=&#34;sas&#34;&gt;SAS&lt;/h2&gt;
&lt;p&gt;SAS 涉及的物理接口比较多，下面举一个具体的例子：DELL SCv2000&lt;/p&gt;
&lt;p&gt;文档：https://dl.dell.com/topicspdf/storage-sc2000_owners-manual_en-us.pdf&lt;/p&gt;
&lt;p&gt;它的背面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/scv2000.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;它有四个前端接口 Mini-SAS High Density (HD)，即 SFF-8644；两个后端接口 Mini-SAS，即 SFF-8088。&lt;/p&gt;
&lt;p&gt;RAID 卡例子：MegaRAID SAS 9361-8i&lt;/p&gt;
&lt;p&gt;文档：https://docs.broadcom.com/doc/12351995&lt;/p&gt;
&lt;p&gt;它的接口有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;两个 mini-SAS SFF-8643(Mini Multilane 4/8X 12 Gb/s Unshielded Connector (HD12un)) 内部连接器，连接到硬盘&lt;/li&gt;
&lt;li&gt;PCIe 3.0 8x 连接主板&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SAS 标准：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;INCITS 417 Serial Attached SCSI 1.1 (SAS-1.1)&lt;/li&gt;
&lt;li&gt;INCITS 457 Serial Attached SCSI 2 (SAS-2)&lt;/li&gt;
&lt;li&gt;INCITS 478 Serial Attached SCSI 2.1 (SAS-2.1)&lt;/li&gt;
&lt;li&gt;INCITS 519 Serial Attached SCSI - 3 (SAS-3)&lt;/li&gt;
&lt;li&gt;INCITS 534 Serial Attached SCSI - 4 (SAS-4)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以从 &lt;a href=&#34;https://www.t10.org/drafts.htm#SCSI3_SAS&#34;&gt;https://www.t10.org/drafts.htm#SCSI3_SAS&lt;/a&gt; 免费下载尚未成为标准的 SAS-4.1 Working Draft。&lt;/p&gt;
&lt;h2 id=&#34;sas-相关的物理接口&#34;&gt;SAS 相关的物理接口&lt;/h2&gt;
&lt;p&gt;查找 SFF 标准：https://www.snia.org/technology-communities/sff/specifications&lt;/p&gt;
&lt;p&gt;中文介绍：https://www.163.com/dy/article/H8TGPEUA0532B75P.html&lt;/p&gt;
&lt;h3 id=&#34;sff-8087&#34;&gt;SFF-8087&lt;/h3&gt;
&lt;p&gt;Mini Multilane 4X Unshielded Connector Shell and Plug&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/sff8087.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;介绍：https://cs-electronics.com/sff-8087/&lt;/p&gt;
&lt;p&gt;Mini SAS 4i 连接器就是 36 pin 的 SFF-8087，支持四路 SAS。i 表示用于 internal 连接。对应的 external 接口是 SFF-8088。&lt;/p&gt;
&lt;p&gt;标准下载地址：https://members.snia.org/document/dl/25823&lt;/p&gt;
&lt;p&gt;它的引脚定义可以在 &lt;a href=&#34;https://members.snia.org/document/dl/27380&#34;&gt;SFF-9402&lt;/a&gt; 看到，它的引脚分为 A 面和 B 面，每面有 18 个 PIN，用途如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A2(Rx0+), A3(Rx0-), B2(Tx0+), B3(Tx0-)：第一组差分对&lt;/li&gt;
&lt;li&gt;A4(Rx1+), A5(Rx1-), B4(Tx1+), B5(Tx1-)：第二组差分对&lt;/li&gt;
&lt;li&gt;A13(Rx2+), A14(Rx2-), B13(Tx2+), B14(Tx2-)：第三组差分对&lt;/li&gt;
&lt;li&gt;A16(Rx3+), A17(Rx3-), B16(Tx3+), B17(Tx3-)：第四组差分对&lt;/li&gt;
&lt;li&gt;B8(Sclock), B9(Sload), A10(SDataOut), A11(SDataIn)：SGPIO 协议&lt;/li&gt;
&lt;li&gt;B8(2W-CLK), B9(2W-DATA)：用于 SES 的 I2C 协议&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这四组差分对对应四路 SAS 或者 SATA。SGPIO 协议的标准是 &lt;a href=&#34;https://members.snia.org/document/dl/25923&#34;&gt;SFF-8485&lt;/a&gt;，主要用途是控制硬盘状态灯，以及判断盘是否插入。&lt;/p&gt;
&lt;p&gt;相关标准：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SFF-8086: Mini Multilane 10 Gb/s 4X Common Elements Connector&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sff-8088&#34;&gt;SFF-8088&lt;/h3&gt;
&lt;p&gt;Mini Multilane 4X Shielded Connector Shell and Plug&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/sff8088.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;标准下载地址：https://members.snia.org/document/dl/25824&lt;/p&gt;
&lt;p&gt;Mini SAS 4x 连接器就是 26 pin 的 SFF-8088，支持四路 SAS。用于 external 连接。对应的 internal 接口是 SFF-8087。&lt;/p&gt;
&lt;h3 id=&#34;sff-8482sff-8678sff-8680sff-8681&#34;&gt;SFF-8482/SFF-8678/SFF-8680/SFF-8681&lt;/h3&gt;
&lt;p&gt;SFF-8482: Serial Attachment 2X Unshielded Connector (EIA-966)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/sff8482.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;介绍：https://cs-electronics.com/sff-8482/&lt;/p&gt;
&lt;p&gt;支持两路 SAS，29 个引脚。和 SATA 的接口大小一样，目的是为了可以兼容 SATA 和 SAS 盘，比较常见。&lt;/p&gt;
&lt;p&gt;标准下载地址：https://members.snia.org/document/dl/25920&lt;/p&gt;
&lt;p&gt;不同速率的版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SFF-8678: Serial Attachment 2X 6Gb/s Unshielded Connector&lt;/li&gt;
&lt;li&gt;SFF-8680: Serial Attachment 2X 12Gb/s Unshielded Connector, 支持 SAS-2.x 和 SAS-3&lt;/li&gt;
&lt;li&gt;SFF-8681: Serial Attachment 2X 24Gb/s Unshielded Connector, 支持 SAS-4&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sff-86148644&#34;&gt;SFF-8614/8644&lt;/h3&gt;
&lt;p&gt;SFF-8614: Mini Multilane 4/8X Shielded Cage/Connector (HDsh)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/sff8614.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;标准下载地址：https://members.snia.org/document/dl/25939&lt;/p&gt;
&lt;p&gt;对应的 internal 版本是 SFF-8643: Mini Multilane 4/8X 12 Gb/s Unshielded Connector&lt;/p&gt;
&lt;p&gt;名称：External Mini-SAS HD(High Density)&lt;/p&gt;
&lt;p&gt;升级版本：&lt;/p&gt;
&lt;p&gt;SFF-8644: Mini Multilane 4/8X 12 Gb/s Shielded Cage/Connector (HD12sh)&lt;/p&gt;
&lt;p&gt;标准下载地址：https://members.snia.org/document/dl/25952&lt;/p&gt;
&lt;p&gt;支持 SAS-3 和 PCIe 3.0&lt;/p&gt;
&lt;h3 id=&#34;sff-8639&#34;&gt;SFF-8639&lt;/h3&gt;
&lt;p&gt;Multifunction 6X Unshielded Connector&lt;/p&gt;
&lt;p&gt;又称 U.2&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/sff8639.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;标准下载地址：https://members.snia.org/document/dl/26489&lt;/p&gt;
&lt;p&gt;用途：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single port SATA (as defined by Serial ATA revision 3.1)&lt;/li&gt;
&lt;li&gt;Two port SATA Express (as defined in Serial ATA Technical Proposal #TPR_C109, currently under development)&lt;/li&gt;
&lt;li&gt;Dual port SAS (as defined by SFF-8482)&lt;/li&gt;
&lt;li&gt;MultiLink SAS (as defined by SFF-8630)&lt;/li&gt;
&lt;li&gt;Up to 4 lanes of PCIe (as defined in this specification)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sff-8611&#34;&gt;SFF-8611&lt;/h3&gt;
&lt;p&gt;MiniLink 4/8X I/O Cable Assemblies&lt;/p&gt;
&lt;p&gt;又称 OCuLink 1.0&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/sff8611.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;标准下载地址：https://members.snia.org/document/dl/27937&lt;/p&gt;
&lt;p&gt;用途：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PCIe&lt;/li&gt;
&lt;li&gt;SAS&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>在 ESXi 中用 PERCCli 换 RAID 中的盘</title>
      <link>https://jia.je/devops/2021/04/15/vmware-esxi-perccli/</link>
      <pubDate>Thu, 15 Apr 2021 14:31:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2021/04/15/vmware-esxi-perccli/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近有一台机器的盘出现了报警，需要换掉，然后重建 RAID5 阵列。iDRAC 出现报错：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Disk 2 in Backplane 1 of Integrated RAID Controller 1 is not functioning correctly.&lt;/li&gt;
&lt;li&gt;Virtual Disk 1 on Integrated RAID Controller 1 has become degraded.&lt;/li&gt;
&lt;li&gt;Error occurred on Disk2 in Backplane 1 of Integrated RAID Controller 1 : (Error 2)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;安装-perccli&#34;&gt;安装 PERCCli&lt;/h2&gt;
&lt;p&gt;首先，因为系统是 VMware ESXi 6.7，所以在&lt;a href=&#34;https://www.dell.com/support/home/zh-cn/drivers/driversdetails?driverid=5v7xx&#34;&gt;DELL 官网&lt;/a&gt;下载对应的文件。按照里面的 README 安装 vib：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;esxcli software vib install -v /vmware-perccli-007.1420.vib
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果要升级系统，需要先卸载 vib：&lt;code&gt;esxcli software vib remove -n vmware-perccli&lt;/code&gt;，因为升级的时候会发现缺少新版系统的 perccli，建议先卸载，升级后再安装新的。&lt;/p&gt;
&lt;p&gt;需要注意的是，如果复制上去 Linux 版本的 PERCCli，虽然也可以运行，但是找不到控制器。安装好以后，就可以运行 &lt;code&gt;/opt/lsi/perccli/perccli&lt;/code&gt; 。接着，运行 &lt;code&gt;perccli show all&lt;/code&gt;，可以看到类似下面的信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ perccli show all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EID:Slt DID State  DG     Size Intf Med SED PI SeSz Model               Sp Type
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;32:2      &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; Failed  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 3.637 TB SATA HDD N   N  512B ST4000NM0033-9ZM170 U  -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;32:4      &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; UGood   F 3.637 TB SATA HDD N   N  512B ST4000NM0033-9ZM170 U  -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 E32S2 是 Failed 的盘，属于 Disk Group 1；E32S4 是新插入的盘，准备替换掉 E32S2，目前不属于任何的 Disk Group。查看一下 Disk Group：&lt;code&gt;perccli /c0/dall show&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ perccli /c0/dall show
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-----------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DG Arr Row EID:Slot DID Type  State BT       Size PDC  PI SED DS3  FSpace TR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-----------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -   -   -        -   RAID5 Dgrd   N    7.276 TB dflt N  N   dflt N      N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   -   -        -   RAID5 Dgrd   N    7.276 TB dflt N  N   dflt N      N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   32:1     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   DRIVE Onln   N    3.637 TB dflt N  N   dflt -      N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   32:2     &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   DRIVE Failed N    3.637 TB dflt N  N   dflt -      N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   32:3     &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   DRIVE Onln   N    3.637 TB dflt N  N   dflt -      N
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 DG1 处于 Degraded 状态，然后 E32S4 处于 Failed 状态。参考了一下 &lt;a href=&#34;https://dl.dell.com/topicspdf/cli_guide_en-us.pdf&#34;&gt;PERCCli 文档&lt;/a&gt;，它告诉我们要这么做：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perccli /cx&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;/ex&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;/sx set offline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perccli /cx&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;/ex&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;/sx set missing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perccli /cx /dall show
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perccli /cx&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;/ex&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;/sx insert dg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a array&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;b row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perccli /cx&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;/ex&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;/sx start rebuild
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;具体到我们这个情景，就是把 E32S2 设为 offline，然后用 E32S4 来替换它：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perccli /c0/e32/s2 set offline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perccli /c0/e32/s2 set missing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perccli /cx /dall show
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perccli /cx/e32/s4 insert dg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perccli /cx/e32/s4 start rebuild
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成以后的状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TOPOLOGY :
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;========&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DG Arr Row EID:Slot DID Type  State BT     Size PDC  PI SED DS3  FSpace TR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -   -   -        -   RAID5 Dgrd  N  7.276 TB dflt N  N   dflt N      N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   -   -        -   RAID5 Dgrd  N  7.276 TB dflt N  N   dflt N      N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   32:1     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   DRIVE Onln  N  3.637 TB dflt N  N   dflt -      N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   32:4     &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;   DRIVE Rbld  Y  3.637 TB dflt N  N   dflt -      N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   32:3     &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   DRIVE Onln  N  3.637 TB dflt N  N   dflt -      N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 E32S4 替换了原来 E32S2 的位置，并且开始重建。查看重建进度：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ perccli /c0/32/s4 show rebuild
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Drive-ID   Progress% Status      Estimated Time Left
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/c0/e32/s4         &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; In progress -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ perccli show all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Need Attention :
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==============&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Controller &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;============&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-------------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EID:Slt DID State DG     Size Intf Med SED PI SeSz Model               Sp Type
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-------------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;32:4      &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; Rbld   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 3.637 TB SATA HDD N   N  512B ST4000NM0033-9ZM170 U  -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-------------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，查看一下出错的盘：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ perccli /c0/e32/s2 show all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Drive /c0/e32/s2 State :
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;======================&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Shield Counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Media Error Count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Other Error Count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Drive Temperature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  36C &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;96.80 F&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Predictive Failure Count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;S.M.A.R.T alert flagged by drive &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; No
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;果然有错误，但是也看不到更多信息了。&lt;/p&gt;
&lt;p&gt;坏块统计：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ perccli /c0 show badblocks
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Detailed Status :
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;===============&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Ctrl Status Ctrl_Prop       Value ErrMsg               ErrCd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Failed Bad Block Count -     BadBlockCount failed     &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;经过检查以后，发现 E32S2 盘的 SMART 并没有报告什么问题，所以也没有把盘取走，而是作为 hot spare 当备用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ perccli /c0/e32/s2 add hotsparedrive DG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ perccli /c0/d1 show
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TOPOLOGY :
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;========&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DG Arr Row EID:Slot DID Type  State BT     Size PDC  PI SED DS3  FSpace TR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -   -   -        -   RAID5 Dgrd  N  7.276 TB dflt N  N   dflt N      N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   -   -        -   RAID5 Dgrd  N  7.276 TB dflt N  N   dflt N      N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   32:1     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   DRIVE Onln  N  3.637 TB dflt N  N   dflt -      N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   32:4     &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;   DRIVE Rbld  Y  3.637 TB dflt N  N   dflt -      N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   32:3     &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   DRIVE Onln  N  3.637 TB dflt N  N   dflt -      N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -   -   32:2     &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   DRIVE DHS   -  3.637 TB -    -  -   -    -      N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Disk Group Index|Arr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Array Index|Row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Row Index|EID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Enclosure Device ID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Device ID|Type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Drive Type|Onln&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Online|Rbld&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Rebuild|Optl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Optimal|Dgrd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Degraded
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Pdgd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Partially degraded|Offln&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Offline|BT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Background Task Active
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PDC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;PD Cache|PI&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Protection Info|SED&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Self Encrypting Drive|Frgn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Foreign
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DS3&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Dimmer Switch 3|dflt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Default|Msng&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Missing|FSpace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Free Space Present
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Transport Ready
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以做后备盘，当别的盘坏的时候，作为备用。&lt;/p&gt;
&lt;h2 id=&#34;相关软件下载&#34;&gt;相关软件下载&lt;/h2&gt;
&lt;p&gt;可以在&lt;a href=&#34;https://www.broadcom.com/products/storage/raid-controllers/megaraid-sas-9361-8i#downloads&#34;&gt;这里&lt;/a&gt;寻找 StorCLI 版本。&lt;/p&gt;
&lt;p&gt;StorCLI：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;007.1613.0000.0000 Oct 29, 2020 &lt;a href=&#34;https://docs.broadcom.com/docs/007.1613.0000.0000_Unified_StorCLI.zip&#34;&gt;007.1613.0000.0000_Unified_StorCLI.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;007.1506.0000.0000 Aug 11, 2020 &lt;a href=&#34;https://downloadcenter.intel.com/download/30286/StorCLI-Standalone-Utility&#34;&gt;StorCLI_MR7.15.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.15.12 Apr 23, 2015 &lt;a href=&#34;https://docs.broadcom.com/docs/12354905&#34;&gt;MR_SAS_StorCLI_6-7-1-15-12-SCGCQ00852539.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.15.05 Jan 22, 2015 &lt;a href=&#34;https://docs.broadcom.com/docs/12354804&#34;&gt;1-15-05_StorCLI.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MegaCLI:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;8.07.07 Dec 19, 2012 &lt;a href=&#34;https://docs.broadcom.com/docs/12351585&#34;&gt;8-07-07_MegaCLI.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PercCLI:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;007.1420.0000.0000 Dec 10, 2020 &lt;a href=&#34;https://www.dell.com/support/home/zh-cn/drivers/driversdetails?driverid=n65f1&#34;&gt;PERCCLI_N65F1_7.1420.00_A10_Linux.tar.gz&lt;/a&gt; &lt;a href=&#34;https://www.dell.com/support/home/zh-cn/drivers/driversdetails?driverid=5v7xx&#34;&gt;PERCCLI_5V7XX_7.1420.0_A10_VMware.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;007.1327.0000.0000 July 27, 2020 &lt;a href=&#34;https://www.dell.com/support/home/zh-cn/drivers/driversdetails?driverid=d6ywp&#34;&gt;PERCCLI_D6YWP_7.1327.00_A09_Linux.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;007.0127.0000.0000 July 13, 2017 &lt;a href=&#34;https://www.dell.com/support/home/zh-cn/drivers/driversdetails?driverid=f48c2&#34;&gt;perccli_7.1-007.0127_linux.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>用 fluentd 收集 k8s 中容器的日志</title>
      <link>https://jia.je/devops/2021/04/02/k8s-fluentd-log-collect/</link>
      <pubDate>Fri, 02 Apr 2021 23:19:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2021/04/02/k8s-fluentd-log-collect/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;在维护一个 k8s 集群的时候，一个很常见的需求就是把日志持久化存下来，一方面是方便日后回溯，一方面也是聚合 replicate 出来的同一个服务的日志。&lt;/p&gt;
&lt;p&gt;在我目前的需求下，只需要把日志持久下来，还不需要做额外的分析。所以我并没有部署类似 ElasticSearch 的服务来对日志进行索引。&lt;/p&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;p&gt;实现主要参考官方的仓库：https://github.com/fluent/fluentd-kubernetes-daemonset。它把一些常用的插件打包到 docker 镜像中，然后提供了一些默认的设置，比如获取 k8s 日志和 pod 日志等等。为了达到我的需求，我希望：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个结点上有一个 fluentd 收集日志，forward 到单独的 log server 上的 fluentd&lt;/li&gt;
&lt;li&gt;log server 上的 fluentd 把收到的日志保存到文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于 log server 不由 k8s 管理，所以按照&lt;a href=&#34;https://docs.fluentd.org/installation/install-by-deb&#34;&gt;官网&lt;/a&gt;的方式手动安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ curl -L https://toolbelt.treasuredata.com/sh/install-debian-buster-td-agent4.sh | sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，编辑配置 &lt;code&gt;/etc/td-agent/td-agent.conf&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;source&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @type forward
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @id input_forward
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bind x.x.x.x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/source&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;match **&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @type file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  path /var/log/fluentd/k8s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  compress gzip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;buffer&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    timekey 1d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    timekey_use_utc true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    timekey_wait 10m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/buffer&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/match&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;分别设置输入：监听 fluentd forward 协议；输出：设置输出文件，和 buffer 配置。如有需要，可以加鉴权。&lt;/p&gt;
&lt;p&gt;接着，按照 &lt;a href=&#34;https://github.com/fluent/fluentd-kubernetes-daemonset/blob/master/fluentd-daemonset-forward.yaml&#34;&gt;https://github.com/fluent/fluentd-kubernetes-daemonset/blob/master/fluentd-daemonset-forward.yaml&lt;/a&gt;，我做了一些修改，得到了下面的配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ServiceAccount&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fluentd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kube-system&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ClusterRole&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fluentd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kube-system&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;rules&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;apiGroups&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;pods&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;namespaces&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;verbs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;get&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;watch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ClusterRoleBinding&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fluentd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;roleRef&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ClusterRole&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fluentd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;apiGroup&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;subjects&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ServiceAccount&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fluentd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kube-system&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apps/v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;DaemonSet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fluentd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kube-system&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;k8s-app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fluentd-logging&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;k8s-app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fluentd-logging&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;k8s-app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fluentd-logging&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;serviceAccount&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fluentd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;serviceAccountName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fluentd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;tolerations&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;node-role.kubernetes.io/master&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;effect&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;NoSchedule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fluentd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fluent/fluentd-kubernetes-daemonset:v1-debian-forward&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;FLUENT_FOWARD_HOST&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x.x.x.x&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;FLUENT_FOWARD_PORT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;24224&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;FLUENTD_SYSTEMD_CONF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;disable&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;limits&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;memory&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;200Mi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;cpu&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100m&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;memory&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;200Mi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;config-volume&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/fluentd/etc/tail_container_parse.conf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;subPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;tail_container_parse.conf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;varlog&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/var/log&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;varlibdockercontainers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/var/lib/docker/containers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;readOnly&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;terminationGracePeriodSeconds&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;config-volume&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;configMap&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fluentd-config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;varlog&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;hostPath&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/var/log&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;varlibdockercontainers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;hostPath&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/var/lib/docker/containers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ConfigMap&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fluentd-config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kube-system&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;tail_container_parse.conf&lt;/span&gt;: |-&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;parse&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      @type cri
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/parse&amp;gt;&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和原版有几点细节上的不同：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;k8s 启用了 rbac，所以需要对应的配置；照着仓库里其他带 rbac 配置的文件抄一下即可。&lt;/li&gt;
&lt;li&gt;禁用了 SYSTEMD 日志的抓取，因为我用的是 k3s，而不是 kubeadm，自然找不到 kubelet 的 systemd service。&lt;/li&gt;
&lt;li&gt;覆盖了 container 日志的读取，因为使用的 container runtime 日志格式和默认的不同，这部分设置在仓库的 README 中也有提到。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;部署到 k8s 中即可。为了保证日志的准确性，建议各个结点都保持 NTP 的同步。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静态编译 ipmitool</title>
      <link>https://jia.je/system/2021/03/29/static-ipmitool/</link>
      <pubDate>Mon, 29 Mar 2021 12:20:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2021/03/29/static-ipmitool/</guid>
      <description>&lt;p&gt;为了在 ESXi 上运行 ipmitool，需要静态编译 ipmitool。网上已经有一些解决方案：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ryanbarrie/ESXI-ipmitool&#34;&gt;https://github.com/ryanbarrie/ESXI-ipmitool&lt;/a&gt;
&lt;a href=&#34;https://github.com/hobbsh/static-ipmitool&#34;&gt;https://github.com/hobbsh/static-ipmitool&lt;/a&gt;
&lt;a href=&#34;https://github.com/ewenmcneill/docker-build-static-ipmitool&#34;&gt;https://github.com/ewenmcneill/docker-build-static-ipmitool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我稍微修改了一下，用来编译最新 ipmitool：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;set -x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1.8.18
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf ipmitool_$VERSION
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -L -o ipmitool_$VERSION.tar.bz2 http://deb.debian.org/debian/pool/main/i/ipmitool/ipmitool_$VERSION.orig.tar.bz2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar xvf ipmitool_$VERSION.tar.bz2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd ipmitool-$VERSION
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gcc CFLAGS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;-m64 LDFLAGS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;-static ./configure
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make -j24
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;../libtool --silent --tag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;CC --mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;link gcc -m64 -fno-strict-aliasing -Wreturn-type -all-static -o ipmitool.static ipmitool.o ipmishell.o ../lib/libipmitool.la plugins/libintf.la
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file $PWD/ipmitool.static
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;复制下来，编译完成后 scp 到 esxi 中即可使用。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>通过 ipmitool 配置 iLO 4 管理端口</title>
      <link>https://jia.je/system/2021/03/29/ilo-nic-selection-ipmitool/</link>
      <pubDate>Mon, 29 Mar 2021 08:30:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2021/03/29/ilo-nic-selection-ipmitool/</guid>
      <description>&lt;p&gt;ipmitool 自带了对 iDRAC 的支持，可以通过 &lt;code&gt;ipmitool delloem&lt;/code&gt; 设置 iDRAC 的管理端口。但是对 iLO 的支持并没有实现。研究了一番，找到了通过 raw command 配置 iLO 4 管理端口的方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://computercheese.blogspot.com/2013/05/ipmi-lan-commands.html&#34;&gt;这篇文章&lt;/a&gt; 讲述了 &lt;code&gt;ipmitool lan&lt;/code&gt; 命令实际会发送的命令：&lt;/p&gt;
&lt;p&gt;读取配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ipmitool raw 0x0c 0x02 CHANNEL KEY SET BLOCK
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一般来说 SET 和 BLOCK 都是 0。KEY 的常见取值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3: IP 地址&lt;/li&gt;
&lt;li&gt;4: IP 地址来源&lt;/li&gt;
&lt;li&gt;5: MAC 地址&lt;/li&gt;
&lt;li&gt;6: 子网掩码&lt;/li&gt;
&lt;li&gt;12: 默认网关&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回的数据中，第一个字节忽略，剩下的就是数据了。&lt;/p&gt;
&lt;p&gt;写入配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ipmitool raw 0x0c 0x01 CHANNEL KEY DATA...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;知道如何读取配置后，接下来就是找到 iLO 4 配置 NIC 的地方了。一番搜索，找到了 &lt;a href=&#34;https://support.hpe.com/hpesc/public/docDisplay?docId=c04530505&amp;amp;docLocale=en_US&#34;&gt;HPE iLO IPMI User Guide&lt;/a&gt;。在第 101 页，可以找到一个用于配置 iLO NIC 选择的设置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Index: 224
iLO Dedicated/Shared NIC Selection.
data 3:
• Selected iLO NIC.
◦ 0h = iLO Dedicated NIC is selected.
◦ 1h = iLO Shared NIC is selected.
◦ All others = reserved
• To switch to another iLO NIC:
1. Write this (and possibly parameter 197) to the desired NIC selection
2. Configure all other relevant network parameters for the desin
3. Reset iLO. The desired NIC will be in use after iLO reset.
• When writing changes to data 3, NIC selection:
◦ data 1 must be AAh
◦ data 2 must be 55h
◦ data 4 must be FFh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有这样的信息以后，可以通过下面的命令来设置 Shared NIC：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ipmitool raw 0x0c 0x01 0x01 &lt;span style=&#34;color:#ae81ff&#34;&gt;224&lt;/span&gt; 0xAA 0x55 0x01 0xFF
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再读出来 224，发现它的 data 4 表示 &lt;code&gt;iLO reset needed for some settings changes that have been made&lt;/code&gt;。于是，执行 &lt;code&gt;ipmitool mc reset warm&lt;/code&gt; 之后，就可以看到 NIC 选择已经更新：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ipmitool raw 0x0c 0x02 0x01 &lt;span style=&#34;color:#ae81ff&#34;&gt;197&lt;/span&gt; 0x00 0x00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;数据分别表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0x02: Shared NIC Selection = ALOM&lt;/li&gt;
&lt;li&gt;0x01: Shared NIC Port Number = Port 1&lt;/li&gt;
&lt;li&gt;0x02: Platform supports ALOM shared NIC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想要的端口和默认选择不一样，可以写入 197 来更新。详见上面的文档链接。&lt;/p&gt;
&lt;p&gt;超微的机器也有类似的办法：https://www.supermicro.org.cn/support/faqs/faq.cfm?faq=15868，可以用 &lt;code&gt;ipmiutil smcoem lanport&lt;/code&gt; 命令来读取/修改。&lt;/p&gt;
&lt;p&gt;Update：我给 IPMITOOL 提交了 &lt;a href=&#34;https://github.com/ipmitool/ipmitool/pull/278&#34;&gt;PR&lt;/a&gt;，来简化这个过程&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ESXi 网络配置</title>
      <link>https://jia.je/networking/2021/03/27/esxi-network-config/</link>
      <pubDate>Sat, 27 Mar 2021 22:07:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2021/03/27/esxi-network-config/</guid>
      <description>&lt;p&gt;用过 ESXi 的大家都知道，它网页版对网络的配置功能有限，特别是 IPv6 的部分，有的事情无法实现。更好的办法是 SSH 到 ESXi 上直接用命令行进行配置。&lt;/p&gt;
&lt;p&gt;可能会用到的一些命令：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;esxcfg-vmknic: 用来给 vmkernel 配置地址&lt;/li&gt;
&lt;li&gt;esxcfg-route: 设置系统路由表&lt;/li&gt;
&lt;li&gt;esxcli: 大杂烩，很多功能都在里面&lt;/li&gt;
&lt;li&gt;tcpdump-uw：魔改版 tcpdump&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一些例子：&lt;/p&gt;
&lt;p&gt;设置 IPv6 默认路由：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@esxi:~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;esxcfg-route -f V6 -a default $IPV6
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;删除 vmkernel 的 IPv6 地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@esxi:~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;esxcli network ip interface ipv6 address remove -i $VMKERNEL -I $IPV6/$PREFIX
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考：https://kb.vmware.com/s/article/1002662&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linksys E8450 OpenWRT 配置 w/ 802.11ax</title>
      <link>https://jia.je/hardware/2021/03/18/linksys-e8450-openwrt/</link>
      <pubDate>Thu, 18 Mar 2021 12:25:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/03/18/linksys-e8450-openwrt/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;之前用的 newifi 路由器（Lenovo y1s）无线网总是出问题，于是换了一个新的支持 802.11ax 的路由器 Linksys E8450，目前在 openwrt snapshot 支持。Openwrt 的支持页面：&lt;a href=&#34;https://openwrt.org/toh/linksys/linksys_e8450&#34;&gt;Linksys E8450&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;过程&#34;&gt;过程&lt;/h2&gt;
&lt;p&gt;按照支持页面，下载固件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://downloads.openwrt.org/snapshots/targets/mediatek/mt7622/openwrt-mediatek-mt7622-linksys_e8450-squashfs-sysupgrade.bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更新（2023-02-27）：固件已经从 snapshot 进入正式版，下载链接为 &lt;a href=&#34;https://downloads.openwrt.org/releases/22.03.3/targets/mediatek/mt7622/openwrt-22.03.3-mediatek-mt7622-linksys_e8450-squashfs-sysupgrade.bin&#34;&gt;https://downloads.openwrt.org/releases/22.03.3/targets/mediatek/mt7622/openwrt-22.03.3-mediatek-mt7622-linksys_e8450-squashfs-sysupgrade.bin&lt;/a&gt;。如果已经替换为 UBI，则使用 &lt;a href=&#34;https://downloads.openwrt.org/releases/22.03.3/targets/mediatek/mt7622/openwrt-22.03.3-mediatek-mt7622-linksys_e8450-ubi-squashfs-sysupgrade.itb&#34;&gt;https://downloads.openwrt.org/releases/22.03.3/targets/mediatek/mt7622/openwrt-22.03.3-mediatek-mt7622-linksys_e8450-ubi-squashfs-sysupgrade.itb&lt;/a&gt; 固件。&lt;/p&gt;
&lt;p&gt;然后访问固件升级页面：http://192.168.1.1/config-admin-firmware.html#firmware，选择下载的 bin 文件。点击“开始升级”，然后等待。一段时间后，ssh 到路由器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ssh root@192.168.1.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The authenticity of host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;192.168.1.1 (192.168.1.1)&amp;#39;&lt;/span&gt; can&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t be established.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ED25519 key fingerprint is SHA256:REDACTED.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;No matching host key fingerprint found in DNS.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;This key is not known by any other names
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Warning: Permanently added &amp;#39;&lt;/span&gt;192.168.1.1&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ED25519&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; to the list of known hosts.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BusyBox v1.33.0 &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; built-in shell &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ash&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  _______                     ________        __
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; |       |.-----.-----.-----.|  |  |  |.----.|  |_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; |   -   &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;  _  |  -__|     &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;  |  |  &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;   _&lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;   _|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; |_______&lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;   __|_____|__|__&lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;________&lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;__|  |____|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          |__| W I R E L E S S   F R E E D O M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; OpenWrt SNAPSHOT, r16242-41af8735d4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; WARNING! &lt;span style=&#34;color:#f92672&#34;&gt;=====================================&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;There is no root password defined on this device!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Use the &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;passwd&amp;#34;&lt;/span&gt; command to set up a new password
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;in order to prevent unauthorized SSH logins.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@OpenWrt:~# uname -a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Linux OpenWrt 5.10.23 &lt;span style=&#34;color:#75715e&#34;&gt;#0 SMP Wed Mar 17 19:55:38 2021 aarch64 GNU/Linux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置 luci:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ opkg update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ opkg install luci
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以网页访问看到 luci 了：Powered by LuCI Master (git-21.060.51374-cd06e70) / OpenWrt SNAPSHOT r16242-41af8735d4。&lt;/p&gt;
&lt;p&gt;由于目前 luci 不支持 802.11ax 的配置，可以直接修改 uci 配置来达到效果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@OpenWrt:/# uci show wireless
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@OpenWrt:/# uci set wireless.radio1.htmode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HE80&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@OpenWrt:/# /etc/init.d/network restart
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;radio0&amp;#39;&lt;/span&gt; is disabled
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注：实际上设置为 HE 开头的字符串即可，见 &lt;a href=&#34;https://github.com/openwrt/openwrt/blob/8019c54d8a191cfb90c3bf06ff367f601f872fd1/package/kernel/mac80211/files/lib/netifd/wireless/mac80211.sh#L334&#34;&gt;mac80211.sh&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;再连接上 Wi-Fi 的时候就可以看到是 802.11ax 模式了。也在 &lt;a href=&#34;https://forum.openwrt.org/t/got-802-11ax-working-in-linksys-e8450/91533&#34;&gt;OpenWRT 论坛&lt;/a&gt; 上分享了一下这个方案。&lt;/p&gt;
&lt;p&gt;更新（2021-07-31）：目前最新的 luci 版本已经可以在网页上配置 802.11ax 模式了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用 gitlab ci 构建并部署应用到 k8s</title>
      <link>https://jia.je/devops/2021/03/16/gitlab-ci-k8s-integration/</link>
      <pubDate>Tue, 16 Mar 2021 08:41:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2021/03/16/gitlab-ci-k8s-integration/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;在 k8s 集群中部署了 gitlab-runner，并且希望在 gitlab ci 构建完成后，把新的 docker image push 到 private repo，然后更新应用。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;a href=&#34;https://www.qikqiak.com/post/gitlab-ci-k8s-cluster-feature/&#34;&gt;Gitlab CI 与 Kubernetes 的结合&lt;/a&gt;，&lt;a href=&#34;https://docs.gitlab.com/ee/ci/docker/using_docker_build.html&#34;&gt;Using Docker to build Docker images&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;在-gitlab-ci-中构建-docker-镜像&#34;&gt;在 gitlab ci 中构建 docker 镜像&lt;/h2&gt;
&lt;p&gt;这一步需要 DinD 来实现在容器中构建容器。为了达到这个目的，首先要在 gitlab-runner 的配置中添加一个 volume 来共享 DinD 的证书路径：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;gitlabUrl&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;REDACTED&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;rbac&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;create&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;runnerRegistrationToken&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;REDACTED&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;runners&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    [[runners]]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      [runners.kubernetes]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        image = &amp;#34;ubuntu:20.04&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        privileged = true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      [[runners.kubernetes.volumes.empty_dir]]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        name = &amp;#34;docker-certs&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        mount_path = &amp;#34;/certs/client&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        medium = &amp;#34;Memory&amp;#34;&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;privileged&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意两点：1. privileged 2. 多出来的 volume&lt;/p&gt;
&lt;p&gt;用 helm 部署 gitlab runner 之后，按照下面的方式配置 gitlab-ci：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;docker:19.03.12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;variables&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;DOCKER_HOST&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;tcp://docker:2376&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# The &amp;#39;docker&amp;#39; hostname is the alias of the service container as described at&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# If you&amp;#39;re using GitLab Runner 12.7 or earlier with the Kubernetes executor and Kubernetes 1.6 or earlier,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# the variable must be set to tcp://localhost:2376 because of how the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Kubernetes executor connects services to the job container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# DOCKER_HOST: tcp://localhost:2376&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Specify to Docker where to create the certificates, Docker will&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# create them automatically on boot, and will create&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# `/certs/client` that will be shared between the service and job&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# container, thanks to volume mount from config.toml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;DOCKER_TLS_CERTDIR&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/certs&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# These are usually specified by the entrypoint, however the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Kubernetes executor doesn&amp;#39;t run entrypoints&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4125&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;DOCKER_TLS_VERIFY&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;DOCKER_CERT_PATH&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$DOCKER_TLS_CERTDIR/client&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;DOCKER_DAEMON_OPTIONS&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--insecure-registry=${REGISTRY}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;docker:19.03.12-dind&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;entrypoint&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sh&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;before_script&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Wait until client certs are generated&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27384&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;until docker info; do sleep 1; done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;echo &amp;#34;$REGISTRY_PASS&amp;#34; | docker login $REGISTRY --username $REGISTRY_USER --password-stdin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;stage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;build&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./build.sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里有很多细节，包括 DinD 的访问方式，等待 client cert，设置 docker 的 insecure registry 和 login 等等。经过 &lt;a href=&#34;https://github.com/CircuitCoder&#34;&gt;@CircuitCoder&lt;/a&gt; 的不断摸索，终于写出了可以用的配置。&lt;/p&gt;
&lt;p&gt;如此配置以后，就可以在 gitlab ci 的构建脚本里用 docker 来 build 并且 push 到自己的 registry 了。为了防止泄露密钥，建议把这些变量放到 gitlab ci 设置的 secrets 中。&lt;/p&gt;
&lt;h2 id=&#34;自动部署到-k8s&#34;&gt;自动部署到 k8s&lt;/h2&gt;
&lt;p&gt;为了让 k8s 重启一个 deployment，一般的做法是：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl -n NAMESPACE rollout restart deployment/NAME
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们希望 gitlab ci 在 build 之后，去执行这一个命令，但又不希望提供太多的权限给 gitlab。所以，我们创建 Service Account 并设置最小权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ServiceAccount&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitlab&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;default&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Role&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitlab-test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;rules&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;verbs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;get&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;patch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;apiGroups&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apps&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;deployments&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;resourceNames&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test-deployment&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;RoleBinding&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitlab&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;subjects&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ServiceAccount&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitlab&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;default&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;roleRef&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;apiGroup&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Role&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitlab-test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要特别注意这几个配置的 namespace 的对应关系：Role 和 RoleBinding 需要放在同一个 ns 下。&lt;/p&gt;
&lt;p&gt;接着，到 GitLab 的 Operations-&amp;gt;Kubernetes 创建 cluster，把 service account 的 token 和 ca.crt 从 secret 里找到并贴到网页上。GitLab 会按照 Environment scope 匹配到 environment，如果某个 stage 的 environment 匹配上了，就会把 kube credentials 配置好。修改 gitlab-ci.yml：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;deploy&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;stage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deploy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bitnami/kubectl:1.20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;production&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;only&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;master&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;kubectl -n test rollout restart deployment/test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就完成配置了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gnome 的 Fractional Scaling</title>
      <link>https://jia.je/software/2021/03/13/gnome-fractional-scaling/</link>
      <pubDate>Sat, 13 Mar 2021 23:11:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2021/03/13/gnome-fractional-scaling/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近发现部分软件（包括 Google Chrome，Firefox 和 Visual Studio Code）在 125% 的 Fractional Scaling 模式下会很卡。找到了一些临时解决方法，但是很不优雅，也很麻烦。所以深入研究了一下 Fractional Scaling 的工作方式。&lt;/p&gt;
&lt;h2 id=&#34;临时解决方法&#34;&gt;临时解决方法&lt;/h2&gt;
&lt;p&gt;根据关键字，找到了 &lt;a href=&#34;https://askubuntu.com/questions/1274719/chrome-menus-too-slow-after-enabling-fractional-scaling-in-ubuntu-20-04&#34;&gt;Chrome menus too slow after enabling fractional scaling in Ubuntu 20.04&lt;/a&gt;。按它的方法，关闭 Google Chrome 的硬件加速，发现卡顿问题确实解决了。&lt;/p&gt;
&lt;p&gt;类似地，也可以[关闭 VSCode 的硬件加速](Chrome menus too slow after enabling fractional scaling in Ubuntu 20.04)，在 Firefox 里也可以找到相应的设置。这样操作确实可以解决问题。但是，对于每一个出问题的应用都这样搞一遍，还是挺麻烦的。&lt;/p&gt;
&lt;p&gt;另一个思路是，&lt;a href=&#34;https://askubuntu.com/questions/1230208/fractional-scaling-does-not-work-properly-ubuntu-20-04/1272794#1272794&#34;&gt;不使用 Fractional Scaling，而只是把字体变大&lt;/a&gt;。但毕竟和我们想要的效果不大一样。&lt;/p&gt;
&lt;h2 id=&#34;一些发现&#34;&gt;一些发现&lt;/h2&gt;
&lt;p&gt;在物理机进行了一些实验以后，发现一个现象：125% 的时候卡顿，而其他比例（100%，150%，175%，200%）都不卡顿。&lt;/p&gt;
&lt;p&gt;网上一顿搜到，找到了 xrandr 工具。下面是观察到的一些现象（GNOME 设置分辨率一直是 1920x1080）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;放缩比例&lt;/th&gt;
&lt;th&gt;xrandr 显示的分辨率&lt;/th&gt;
&lt;th&gt;xrandr 显示的 transform&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;100%&lt;/td&gt;
&lt;td&gt;1920x1080&lt;/td&gt;
&lt;td&gt;diag(1.0, 1.0, 1.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;125%&lt;/td&gt;
&lt;td&gt;3072x1728&lt;/td&gt;
&lt;td&gt;diag(1.6, 1.6, 1.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;150%&lt;/td&gt;
&lt;td&gt;2560x1440&lt;/td&gt;
&lt;td&gt;diag(1.33, 1.33, 1.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;175%&lt;/td&gt;
&lt;td&gt;2208x1242&lt;/td&gt;
&lt;td&gt;diag(1.15, 1.15, 1.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;200%&lt;/td&gt;
&lt;td&gt;1920x1080&lt;/td&gt;
&lt;td&gt;diag(1.0, 1.0, 1.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在 &lt;a href=&#34;https://www.x.org/releases/X11R7.5/doc/man/man1/xrandr.1.html&#34;&gt;xrandr 文档&lt;/a&gt; 中，写了：transform 是一个 3x3 矩阵，矩阵乘以输出的点的坐标得到图形缓存里面的坐标。&lt;/p&gt;
&lt;p&gt;由此可以猜想：fractional scaling 的工作方式是，把绘制的 buffer 调大，然后再用 transform 把最终输出分辨率调成 1920x1080。可以看到，xrandr 显示的分辨率除以 transform 对应的值，就是 1920x1080。但这并不能解释 100% 和 200% 的区别，所以肯定还漏了什么信息。&lt;/p&gt;
&lt;p&gt;翻了翻 &lt;a href=&#34;https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/3/diffs#989734a4aea877b0c1d80fa73cbe2ee59de79fba_376_422&#34;&gt;mutter 实现 fractional scaling 的 pr&lt;/a&gt;，找到了实现 scale 的一部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (clutter_actor_get_resource_scale (priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;actor, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;resource_scale) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resource_scale &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0f&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; paint_scale &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0f&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; resource_scale;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cogl_matrix_scale (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;modelview, paint_scale, paint_scale, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后找到了一段对 scale 做 ceiling 的&lt;a href=&#34;https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/3/diffs#989734a4aea877b0c1d80fa73cbe2ee59de79fba_238_265&#34;&gt;代码&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (_clutter_actor_get_real_resource_scale (priv&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;actor, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;resource_scale))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ceiled_resource_scale &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ceilf (resource_scale);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stage_width &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; ceiled_resource_scale;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stage_height &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; ceiled_resource_scale;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样，100% 和其他比例就区分开了。&lt;/p&gt;
&lt;p&gt;另外，也在&lt;a href=&#34;https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/3/diffs#d66a28cda989fbb17c8a7302b3f6360640c3c152_33_33&#34;&gt;代码&lt;/a&gt; 中发现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define SCALE_FACTORS_PER_INTEGER 4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define SCALE_FACTORS_STEPS (1.0 / (float) SCALE_FACTORS_PER_INTEGER)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MINIMUM_SCALE_FACTOR 1.0f
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MAXIMUM_SCALE_FACTOR 4.0f
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码规定了比例只能是 25% 的倍数。&lt;/p&gt;
&lt;p&gt;我也试了一下用 xrandr &amp;ndash;scale 1.5x1.5：效果就是窗口看起来都更小了，分辨率变成了 2880x1620，transform 是 diag(1.5, 1.5, 1.0)。&lt;/p&gt;
&lt;h2 id=&#34;虚拟机测试&#34;&gt;虚拟机测试&lt;/h2&gt;
&lt;p&gt;接着，用虚拟机做了一些测试。为了在 GNOME over Wayland 上使用 fractional scaling，需要运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gsettings set org.gnome.mutter experimental-features &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#39;scale-monitor-framebuffer&amp;#39;]&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着又做了类似上面的测试（GNOME 设置分辨率一直是 2560x1600）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;放缩比例&lt;/th&gt;
&lt;th&gt;xrandr 显示的分辨率&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;100%&lt;/td&gt;
&lt;td&gt;2560x1600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;125%&lt;/td&gt;
&lt;td&gt;2048x1280&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;150%&lt;/td&gt;
&lt;td&gt;1704x1065&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;175%&lt;/td&gt;
&lt;td&gt;1464x915&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;200%&lt;/td&gt;
&lt;td&gt;1280x800&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在这个测试中，xrandr 显示的 transform 一直都是单位矩阵；还用了来自 &lt;a href=&#34;https://github.com/xyproto/wallutils&#34;&gt;xyproto/wallutils&lt;/a&gt; 的 &lt;code&gt;wayinfo&lt;/code&gt; 命令查看输出的分辨率，一直是 2560x1600，DPI 一直是 96。用 wallutils 的 xinfo 看到的结果和 xrandr 一致（通过 XWayland）。但是和物理机有一点不同：物理机有一个选项问要不要打开 fractional scaling，下面还会提示性能下降的问题；但是虚拟机上并没有这个提示，而是直接给了一些 Scale 比例的选项。&lt;/p&gt;
&lt;p&gt;尝试了一下，在 GNOME over X11 上是找不到 fractional scaling 的（没有出现设置 scale 的选项）。找到一个实现这个功能的 fork：https://github.com/puxplaying/mutter-x11-scaling，不过没有尝试过。&lt;/p&gt;
&lt;p&gt;我也尝试在虚拟机中用 xrandr &amp;ndash;scale，结果就是输出黑屏，需要重启 gdm 来恢复到登录界面。&lt;/p&gt;
&lt;p&gt;更新：由于物理机使用的是 Ubuntu，想到是不是 Ubuntu 采用了上面那个 fork 的 patch，然后就在 &lt;a href=&#34;https://changelogs.ubuntu.com/changelogs/pool/main/m/mutter/mutter_3.38.1-1ubuntu1/changelog&#34;&gt;changelog&lt;/a&gt; 中看到：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mutter (3.38.1-1ubuntu1) groovy; urgency=medium

  * Merge with debian, including new upstream version, remaining changes:
    - debian/gbp.conf: update upstream branch to point to ubuntu/master
    - debian/patches/x11-Add-support-for-fractional-scaling-using-Randr.patch:
      + X11: Add support for fractional scaling using Randr
  * d/p/clutter-backend-x11-Don-t-set-the-font-dpi-computed-on-X1.patch:
    - Dropped, applied upstream
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也找到了对应的 &lt;a href=&#34;https://git.launchpad.net/ubuntu/+source/mutter/tree/debian/patches/x11-Add-support-for-fractional-scaling-using-Randr.patch?h=applied/ubuntu/groovy&#34;&gt;patch 文件&lt;/a&gt;。这也就解释了，为什么网上会说 GNOME over X11 支持 fractional scaling，并且需要用 gsettings 打开，而我在 Debian 和 Arch Linux 上设置这个选项也没有用了。原来是 Ubuntu 加的私货啊。&lt;/p&gt;
&lt;p&gt;在 patch 中，找到了这么一段配置的解释：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-patch&#34; data-lang=&#34;patch&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    &amp;lt;key name=&amp;#34;fractional-scale-mode&amp;#34; enum=&amp;#34;org.gnome.mutter.X11.scale-mode&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+      &amp;lt;default&amp;gt;&amp;#34;scale-ui-down&amp;#34;&amp;lt;/default&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+      &amp;lt;description&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        Choose the scaling mode to be used under X11 via Randr extension.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        Supported methods are:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        • “scale-up”     — Scale everything up to the requested scale, shrinking
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+                           the UI. The applications will look blurry when scaling
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+                           at higher values and the resolution will be lowered.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        • “scale-ui-down — Scale up the UI toolkits to the closest integer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+                           scaling value upwards, while scale down the display
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+                           to match the requested scaling level.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+                           It increases the resolution of the logical display.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+      &amp;lt;/description&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    &amp;lt;/key&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以解释前面看到的现象了：默认是 &lt;code&gt;scale-ui-down&lt;/code&gt;，也就是先放大到两倍（closest integer scaling value upwards），再缩小（scale down the display to match the requested scaling level）。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>常用交换机命令</title>
      <link>https://jia.je/devops/2021/03/12/switch-config/</link>
      <pubDate>Fri, 12 Mar 2021 11:35:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2021/03/12/switch-config/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近接触了 Cisco，DELL，Huawei，H3C，Ruijie 的网络设备，发现配置方式各有不同，故记录一下各个厂家的命令。&lt;/p&gt;
&lt;h2 id=&#34;huawei&#34;&gt;Huawei&lt;/h2&gt;
&lt;p&gt;测试型号：S5320&lt;/p&gt;
&lt;h3 id=&#34;保存配置&#34;&gt;保存配置&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;HUAWEI&amp;gt;save
The current configuration will be written to flash:/vrpcfg.zip.
Are you sure to continue?[Y/N]y
Now saving the current configuration to the slot 0....
Save the configuration successfully.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;进入配置模式&#34;&gt;进入配置模式&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;HUAWEI&amp;gt; system-view
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看当前配置&#34;&gt;查看当前配置&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[HUAWEI] display current-configuration
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看-lldp-邻居&#34;&gt;查看 LLDP 邻居&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[HUAWEI]display lldp neighbor brief
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看-cdp-邻居&#34;&gt;查看 CDP 邻居&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[HUAWEI]display cdp neighbor brief
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;启用-lldp&#34;&gt;启用 LLDP&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[HUAWEI]lldp enable
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;启用-cdp&#34;&gt;启用 CDP&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[HUAWEI-XGigabitEthernet0/0/1]lldp compliance cdp txrx
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;启用只读-snmpv1-community&#34;&gt;启用只读 SNMPv1 community&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[HUAWEI]snmp-agent sys-info version all
Warning: This command may cause confliction in netconf status. Continue? [Y/N]:y
Warning: SNMPv1/SNMPv2c is not secure, and it is recommended to use SNMPv3.
[HUAWEI]snmp-agent community read [COMMUNITY NAME]
Warning: This command may cause confliction in netconf status. Continue? [Y/N]:y
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;启用-snmp-iso-view&#34;&gt;启用 SNMP iso view&lt;/h3&gt;
&lt;p&gt;默认情况下 SNMP 会缺少一些标准的 MIB（比如 LLDP），可以打开 iso view：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[HUAWEI]snmp-agent mib-view included iso-view iso
Warning: This command may cause confliction in netconf status. Continue? [Y/N]:y
[HUAWEI]snmp-agent community read [COMMUNITY NAME] mib-view iso-view
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看-arp-表&#34;&gt;查看 ARP 表&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[HUAWEI]display arp
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;arping&#34;&gt;ARPING&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[HUAWEI]arp send-packet X.X.X.X ffff-ffff-ffff interface Vlanif VLAN
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;dell&#34;&gt;DELL&lt;/h2&gt;
&lt;p&gt;测试型号：N3048&lt;/p&gt;
&lt;h3 id=&#34;保存配置-1&#34;&gt;保存配置&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;console#copy running-config startup-config

This operation may take few minutes.
Management interfaces will not be available during this time.

Are you sure you want to save? (y/n) y

Configuration Saved!
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;进入配置模式-1&#34;&gt;进入配置模式&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;console&amp;gt;enable
console# configure
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看当前配置-1&#34;&gt;查看当前配置&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;console# show running-config
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看-lldp-邻居-1&#34;&gt;查看 LLDP 邻居&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;console#show lldp remote-device all
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;vlan-trunk-配置&#34;&gt;VLAN Trunk 配置&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;console(config)#interface Gi1/0/1
console(config-if-Gi1/0/1)#switchport mode trunk
console(config-if-Gi1/0/1)#switchport trunk allowed vlan xxx,xxx-xxx
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;vlan-access-配置&#34;&gt;VLAN Access 配置&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;console(config)#interface Gi1/0/1
console(config-if-Gi1/0/1)#switchport mode access
console(config-if-Gi1/0/1)#switchport access vlan xxx
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看-vlan-配置&#34;&gt;查看 VLAN 配置&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;console#show vlan
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;批量配置-interface&#34;&gt;批量配置 interface&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;console(config)#interface range Gi1/0/1-4
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;启用-ssh-服务器&#34;&gt;启用 SSH 服务器&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;console(config)#crypto key generate rsa
console(config)#crypto key generate dsa
console(config)#ip ssh server
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;启用-cdpdell-称之为-isdp&#34;&gt;启用 CDP(DELL 称之为 ISDP)&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;console(config)#isdp enable
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;启用只读-snmpv1-community-1&#34;&gt;启用只读 SNMPv1 community&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;console(config)#snmp-server community [COMMUNITY NAME] ro
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;h3c&#34;&gt;H3C&lt;/h2&gt;
&lt;h3 id=&#34;进入配置模式-2&#34;&gt;进入配置模式&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;switch&amp;gt;system-view
System View: return to User View with Ctrl+Z.
[switch]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看当前配置-2&#34;&gt;查看当前配置&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[switch]display current-configuration
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看-lldp-邻居-2&#34;&gt;查看 lldp 邻居&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[switch]display lldp neighbor-information
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;保存配置-2&#34;&gt;保存配置&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[switch]save
The current configuration will be written to the device. Are you sure? [Y/N]:y
Please input the file name(*.cfg)[flash:/startup.cfg]
(To leave the existing filename unchanged, press the enter key):y
The file name is invalid(does not end with .cfg).
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;批量配置-interface-1&#34;&gt;批量配置 interface&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[switch]interface range GigabitEthernet 1/0/1 to GigabitEthernet 1/0/24
[switch-if-range]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看-mac-地址表&#34;&gt;查看 MAC 地址表&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[switch]show mac-address
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;打开-lldp-和-cdp&#34;&gt;打开 LLDP 和 CDP&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[switch]lldp global enable
[switch]lldp compliance cdp
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;mellanox&#34;&gt;Mellanox&lt;/h2&gt;
&lt;h3 id=&#34;进入配置模式-3&#34;&gt;进入配置模式&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch &amp;gt; enable
switch # configure terminal
switch (config) #
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看当前配置-3&#34;&gt;查看当前配置&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch (config) # show running-config
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看-interface-状态&#34;&gt;查看 interface 状态&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch (config) # show interfaces brief
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看以太网端口状态&#34;&gt;查看以太网端口状态&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch (config) # show interfaces ethernet status
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看-lldp-邻居-3&#34;&gt;查看 lldp 邻居&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch (config) # show lldp remote
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;保存配置-3&#34;&gt;保存配置&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch (config) # configuration write
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;批量配置-interface-2&#34;&gt;批量配置 interface&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch (config) # interface ethernet 1/1/1-1/1/4
switch (config interface ethernet 1/1/1-1/1/4) #
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看-mac-地址表-1&#34;&gt;查看 MAC 地址表&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch (config) # show mac-address-table
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看链路聚合状态&#34;&gt;查看链路聚合状态&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch (config) # show interfaces port-channel summary
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;把拆分的四个-sfp-口恢复成一个&#34;&gt;把拆分的四个 SFP 口恢复成一个&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch (config interface ethernet 1/1/1) # module-type qsfp 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;把一个-qsfp-口拆分成四个&#34;&gt;把一个 QSFP 口拆分成四个&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch (config interface ethernet 1/1) # shutdown
switch (config interface ethernet 1/1) # module-type qsfp-split-4
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>用 k3s 部署 k8s</title>
      <link>https://jia.je/devops/2021/03/12/k3s-deploy/</link>
      <pubDate>Fri, 12 Mar 2021 00:41:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2021/03/12/k3s-deploy/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近需要部署一个 k8s 集群，觉得之前配置 kubeadm 太繁琐了，想要找一个简单的。比较了一下 k0s 和 k3s，最后选择了 k3s。&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;p&gt;k3s 的好处就是配置十分简单：https://rancher.com/docs/k3s/latest/en/quick-start/。不需要装 docker，也不需要装 kubeadm。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在第一个 node 上跑：&lt;code&gt;curl -sfL https://get.k3s.io | sh -&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在第一个 node 上获取 token：&lt;code&gt;cat /var/lib/rancher/k3s/server/node-token&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在其他 node 上跑：&lt;code&gt;curl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh -&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后就搞定了。从第一个 node 的 &lt;code&gt;/etc/rancher/k3s/k3s.yaml&lt;/code&gt;获取 &lt;code&gt;kubectl&lt;/code&gt; 配置。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>通过 rook 在 k8s 上部署 ceph 集群</title>
      <link>https://jia.je/devops/2021/03/12/ceph-on-k8s/</link>
      <pubDate>Fri, 12 Mar 2021 00:41:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2021/03/12/ceph-on-k8s/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;为了方便集群的使用，想在 k8s 集群里部署一个 ceph 集群。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.ceph.com/en/latest/start/intro/&#34;&gt;Ceph 介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ceph 有这些组成部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;mon：monitor&lt;/li&gt;
&lt;li&gt;mgr：manager&lt;/li&gt;
&lt;li&gt;osd：storage&lt;/li&gt;
&lt;li&gt;mds(optional)：用于 CephFS&lt;/li&gt;
&lt;li&gt;radosgw(optional：用于 Ceph Object Storage&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;p&gt;我们采用的是 &lt;a href=&#34;rook.io&#34;&gt;rook&lt;/a&gt; 来部署 ceph 集群。&lt;/p&gt;
&lt;p&gt;参考文档：https://rook.github.io/docs/rook/v1.5/ceph-examples.html&lt;/p&gt;
&lt;p&gt;首先，克隆 rook 的仓库。建议选择一个 release 版本。&lt;/p&gt;
&lt;p&gt;接着，运行下面的命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install -y lvm2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# required&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f rook/cluster/examples/kubernetes/ceph/crds.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f rook/cluster/examples/kubernetes/ceph/common.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f rook/cluster/examples/kubernetes/ceph/operator.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# debugging only&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f rook/cluster/examples/kubernetes/ceph/toolbox.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f rook/cluster/examples/kubernetes/ceph/direct-mount.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# CephFS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f rook/cluster/examples/kubernetes/ceph/filesystem.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f rook/cluster/examples/kubernetes/ceph/csi/cephfs/storageclass.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;前面三个 yaml 是必须的，toolbox 是用来查看 ceph 状态的，direct mount 是用来 mount cephfs 的，后两个是为了用 cephfs 的。&lt;/p&gt;
&lt;p&gt;接着，按照自己的需求编辑 &lt;code&gt;rook/cluster/exmaples/kuberenetes/ceph/cluster.yaml&lt;/code&gt; 然后应用。此时你的集群应该就已经起来了。&lt;/p&gt;
&lt;p&gt;然后，可以&lt;a href=&#34;https://rook.github.io/docs/rook/v1.5/ceph-toolbox.html&#34;&gt;进 toolbox 查看 ceph 状态&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl -n rook-ceph exec -it deploy/rook-ceph-tools -- bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以&lt;a href=&#34;https://rook.github.io/docs/rook/v1.5/direct-tools.html&#34;&gt;进 direct-mount 容器查看 pv 路径&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# get volume path of pvc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pv -o custom-columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;NAME:.metadata.name,NAMSEPACE:.spec.claimRef.namespace,CLAIM:.spec.claimRef.name,PATH:.spec.csi.volumeAttributes.subvolumeName
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl -n rook-ceph exec -it deploy/rook-direct-mount -- bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in the pod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir /tmp/registry
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mon_endpoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;grep mon_host /etc/ceph/ceph.conf | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $3}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my_secret&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;grep key /etc/ceph/keyring | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $3}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t ceph -o mds_namespace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;myfs,name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;admin,secret&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$my_secret $mon_endpoints:/ /tmp/registry
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df -h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /tmp/registry/volumes/csi/PATH
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>PCB 笔记</title>
      <link>https://jia.je/hardware/2021/03/08/pcb-notes/</link>
      <pubDate>Mon, 08 Mar 2021 00:03:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/03/08/pcb-notes/</guid>
      <description>&lt;p&gt;记录一下在学习画板子过程中学到的心得。&lt;/p&gt;
&lt;h2 id=&#34;工具&#34;&gt;工具&lt;/h2&gt;
&lt;p&gt;目前使用过 &lt;a href=&#34;https://kicad.org/&#34;&gt;KiCad&lt;/a&gt; 和 &lt;a href=&#34;https://lceda.cn/&#34;&gt;lceda&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KiCad: 开源软件，跨平台。&lt;/li&gt;
&lt;li&gt;lceda：在线编辑，不需要安装，和 lcsc 有深度集成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目 &lt;a href=&#34;https://github.com/jiegec/HT42B534USB2UART&#34;&gt;jiegec/HT42B534USB2UART&lt;/a&gt; 采用的是 KiCad 5 编写的。目前正在做的另一个项目采用 lceda&lt;/p&gt;
&lt;h2 id=&#34;流程&#34;&gt;流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;选择所需要使用的芯片，查找芯片的 datasheet。&lt;/li&gt;
&lt;li&gt;寻找采用了芯片的一些设计，特别是看 schematic。&lt;/li&gt;
&lt;li&gt;按照 datasheet 里面推荐的电路，或者是其他人的设计，画自己需要的 schematic。&lt;/li&gt;
&lt;li&gt;设置好各个元件的 footprint，然后转到 PCB 设计。&lt;/li&gt;
&lt;li&gt;在 PCB 里面布线，生成 Gerber 等文件。&lt;/li&gt;
&lt;li&gt;把 Gerber 给到生产商（比如 jlc），交付生产。&lt;/li&gt;
&lt;li&gt;如果是自己焊接，则需要购买元件，比如从 lcsc 购买。&lt;/li&gt;
&lt;li&gt;收到 PCB 和元件后，自己按照 BOM 和 schematic 焊接各个元件。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;笔记&#34;&gt;笔记&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;对于一些连接很多元件的信号，比如 GND，可以留作铺铜解决。也就是说，先不管 GND，把其他所有的信号都接好以后，再在顶层铺铜；如果还是有没有连接上的 GND，可以通过过孔（Via）走到底层，在底层再铺一层铜。&lt;/li&gt;
&lt;li&gt;对于外部供电的 VCC 和 GND，在 KiCad 中需要用 PWR_FLAG 标记一下。&lt;/li&gt;
&lt;li&gt;在 KiCad 中设计 PCB 前，要把生产商的工艺参数设置好，不然画了也要重画。&lt;/li&gt;
&lt;li&gt;lceda 在选择元件的时候，可以直接从 lcsc 里选择，这样可以保证封装和商品可以对得上，不需要手动进行匹配。&lt;/li&gt;
&lt;li&gt;如果要用 jlc 的 SMT 贴片，先在 &lt;a href=&#34;https://www.jlc.com/portal/smtComponentList.html&#34;&gt;SMT 元件列表&lt;/a&gt; 里搜索所需要的元件；推荐用基本库，如果用其他库，则要加钱；选好元件以后，用元件编号去 lceda 里搜索并添加到 schematic。&lt;/li&gt;
&lt;li&gt;对于涉及模拟信号的设计，比如音频，需要特别注意模拟信号的电和地都是单独的：&lt;code&gt;AVCC&lt;/code&gt; 和 &lt;code&gt;AGND&lt;/code&gt;。所以要特别注意 datasheet 里面不同的地的表示方法。最后，再用磁珠把 &lt;code&gt;VCC&lt;/code&gt; 和 &lt;code&gt;AVCC&lt;/code&gt;、&lt;code&gt;GND&lt;/code&gt; 和 &lt;code&gt;AGND&lt;/code&gt; 分别连接起来就可以了。可以参考 &lt;a href=&#34;https://wiki.bu.ost.ch/infoportal/_media/fpga/cyclone_iv/de2_115_schematic.pdf&#34;&gt;DE2 板子中第 19 页的音频部分设计&lt;/a&gt; 和 &lt;a href=&#34;https://www.analog.com/en/analog-dialogue/articles/staying-well-grounded.html&#34;&gt;Staying well grounded&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;在 schematic 里经常会出现在电源附近的电容，那么，在 PCB 中，也尽量把这些电容放在对应的电源的旁边。&lt;/li&gt;
&lt;li&gt;耳机插座里面，一般分三种组成部件：Tip，Ring，Sleeve。只有两段的是 TS，三段的是 TRS，四段的是 TRRS。TS 是单声道，T 是声音，S 是地。TRS 是双声道，T 是左声道（或者单声道），R 是右声道，S 是地。TRRS 则是双声道加录音。一般来说，LINE IN 是双声道，MIC IN 是单声道，它们的阻抗也不同；LINE OUT 和 HEADPHONE OUT 都是双声道，但 HEADPHONE OUT 经过了额外的放大器。&lt;/li&gt;
&lt;li&gt;遇到一个 SPI 协议没有 &lt;code&gt;SPI_MISO&lt;/code&gt; 引脚的芯片，可能说明它是 write-only 的。&lt;/li&gt;
&lt;li&gt;手焊的基本元件，一般用 0603 加一些 Padding 的封装；SMT 的话，则建议用 0402 封装。&lt;/li&gt;
&lt;li&gt;I2C 的信号线一般需要加一个几 K 欧姆的上拉电阻到 VCC。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JLC SMT 的基础库不需要换料费，如何寻找&lt;a href=&#34;https://www.jlcsmt.com/lcsc/basic&#34;&gt;基础库&lt;/a&gt;中的元件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;电阻品牌是 UNI-ROYAL，型号命名规则是：
&lt;ol&gt;
&lt;li&gt;封装：0603/0402&lt;/li&gt;
&lt;li&gt;功率：WA/WG/W8&lt;/li&gt;
&lt;li&gt;误差：F(1%)&lt;/li&gt;
&lt;li&gt;阻值：三位整数 + 一位 exp（J 表示 -1，K 表示 -2，L 表示 -3），例如 2002 表示 &lt;code&gt;200*10^2=20k&lt;/code&gt;，1003 表示 &lt;code&gt;100*10^3=100k&lt;/code&gt;，3300 表示 &lt;code&gt;330*10^0=330&lt;/code&gt;，330J 表示 &lt;code&gt;330*10^-1=33&lt;/code&gt;，330K 表示 &lt;code&gt;330*10^-2=3.3&lt;/code&gt;
例子：要找 0402 封装的 10k 欧电阻，搜索 0402WGF1003；要找 0603 封装的 33 欧电阻，搜索 0603WAF330。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;电容品牌有风华/三星/国巨，三星的电容型号命名规则是：
&lt;ol&gt;
&lt;li&gt;封装：05(0402)/10(0603)&lt;/li&gt;
&lt;li&gt;字母：A/B/C&lt;/li&gt;
&lt;li&gt;电容：两位整数 + 一位 exp，单位是 pF，例如 105 表示 &lt;code&gt;10*10^5pF=10^6pF=1uF&lt;/code&gt;，104 表示 &lt;code&gt;10*10^4pF=10^5pF=0.1uF&lt;/code&gt;
例子：要找 0402 封装的 100nF 电容，搜索 CL05B104；要找 0603 封装的 1uF 电容，搜索 CL10A105。也可以只搜电容的数字部分，可以找到更多品牌。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;阻抗匹配&#34;&gt;阻抗匹配&lt;/h2&gt;
&lt;p&gt;在传输线上，如果出现阻抗变化，就会导致信号出现反射，质量变差。因此，需要保证传输线的两端和传输线整个过程的阻抗一致。&lt;/p&gt;
&lt;p&gt;阻抗设置为多少，一般要看协议的规定。确定好协议定义的阻抗以后，需要查看信号两端的芯片内部的阻抗，如果和协议不一致，需要额外添加电阻，并且电阻要尽量放在接近芯片的位置上。由于传输线在 PCB 上，所以和 PCB 厂商的工艺有关，需要去厂商的阻抗计算器上进行计算，例如 &lt;a href=&#34;https://tools.jlc.com/jlcTools/index.html#/impedanceCalculatenew&#34;&gt;jlc 阻抗计算器&lt;/a&gt;。涉及到的参数有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;板子层数：PCB 层数，最简单的正反面就是 2 层&lt;/li&gt;
&lt;li&gt;成品厚度：整个 PCB 加起来的厚度，例如 1.6mm&lt;/li&gt;
&lt;li&gt;内层铜厚：夹在内部的 PCB 的铜的厚度，例如 0.5 oz，就是 1.37/2=0.685 mil&lt;/li&gt;
&lt;li&gt;外层铜厚：PCB 上下暴露在外面的两层的铜的厚度，常见 1 oz=1.37 mil&lt;/li&gt;
&lt;li&gt;需求阻抗：协议所要求的阻抗，例如单端 50 欧姆（SDIO），差分 90 欧姆（USB）&lt;/li&gt;
&lt;li&gt;阻抗模式：传输线的连接方式，见下（图源 KiCad）
&lt;ol&gt;
&lt;li&gt;单端阻抗（Microstrip Line）：一根线传输信号，地线在另一个平面，图中上面的长方形就是传输线，底部就是地平面
&lt;img src=&#34;https://jia.je/images/microstrip_line.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;差分阻抗（Coupled Microstrip Line）：差分线传输信号，地线在另一个平面，图中上方两个长方形就是差分传输线，底部是地平面
&lt;img src=&#34;https://jia.je/images/couple_microstrip_line.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;共面单端：一根线传输信号，周围就是地平面
&lt;img src=&#34;https://jia.je/images/coplanar_wave_guide.png&#34; alt=&#34;&#34;&gt;
&lt;img src=&#34;https://jia.je/images/coplanar_wave_guide_ground_plane.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;共面差分：差分线传输信号，周围就是地平面&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;阻抗层：传输线所在的层&lt;/li&gt;
&lt;li&gt;参考层：地线所在的层&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于双层 PCB 的两层铜之间距离比较远（例如 57.68 mil），如果采用单端阻抗，那么需要比较大的线宽，例如用 jlc 阻抗计算器，50 欧姆阻抗需要 106.68 mil 的线宽。如果采用四层 PCB，最上面两层之间距离缩小了很多（例如 7.99 mil），此时即使用单端阻抗，用 jlc 计算得出只需要 13.2 mil 的线宽。所以双层 PCB 更适合使用共面单端的方式，此时传输线和地线放在了同一个平面，距离比较小，就不需要那么大的线宽。&lt;/p&gt;
&lt;p&gt;这里的单位：1 mil = 0.0254 mm，1 inch = 1000 mil = 0.0254 m，1 oz = 1.37 mil = 0.0348 mm&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iDRAC 各版本</title>
      <link>https://jia.je/system/2021/03/03/idrac-versions/</link>
      <pubDate>Wed, 03 Mar 2021 20:13:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2021/03/03/idrac-versions/</guid>
      <description>&lt;h2 id=&#34;idrac-版本&#34;&gt;iDRAC 版本&lt;/h2&gt;
&lt;p&gt;目前接触到的 iDRAC 版本有：7 8 9。一些常见的服务器型号和 iDRAC 版本对应关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;7: PowerEdge R320, PowerEdge R720&lt;/li&gt;
&lt;li&gt;8: &lt;a href=&#34;https://www.dell.com/support/home/en-us/product-support/product/poweredge-r730xd/drivers&#34;&gt;PowerEdge R730xd&lt;/a&gt;，PowerEdge R630，PowerEdge R730，PowerEdge C4130&lt;/li&gt;
&lt;li&gt;9: &lt;a href=&#34;https://www.dell.com/support/home/en-us/product-support/product/poweredge-r7425/drivers&#34;&gt;PowerEdge R7425&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上，如果是 PowerEdge R 什么的，就看第二位数字，就可以推断出版本号了。&lt;/p&gt;
&lt;p&gt;下面列举了一下可能会用到的版本。&lt;/p&gt;
&lt;h2 id=&#34;idrac-7&#34;&gt;iDRAC 7&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.dell.com/support/kbdoc/en-us/000175831/support-for-integrated-dell-remote-access-controller-7-idrac7&#34;&gt;iDRAC 7 在 2020 年 2 月停止更新了&lt;/a&gt;，最新版本是 2.65.65.65。&lt;/p&gt;
&lt;p&gt;升级路线参考：&lt;a href=&#34;https://www.reddit.com/r/homelab/comments/abuc09/psa_read_this_before_you_upgrade_your_firmware_on/&#34;&gt;Reddit&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.66.65 &lt;a href=&#34;https://www.dell.com/support/home/en-us/drivers/driversdetails?driverid=3f4wv&#34;&gt;下载页面&lt;/a&gt;，2014 年 12 月版本。&lt;/li&gt;
&lt;li&gt;2.10.10.10 &lt;a href=&#34;https://www.dell.com/support/home/en-us/drivers/driversdetails?driverId=Y5K20&#34;&gt;下载页面&lt;/a&gt;，2015 年 4 月版本。&lt;/li&gt;
&lt;li&gt;2.65.65.65 &lt;a href=&#34;https://www.dell.com/support/home/en-us/drivers/driversdetails?driverid=0ghf4&#34;&gt;下载页面&lt;/a&gt;，2020 年 3 月版本，添加了 HSTS。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;idrac-8&#34;&gt;iDRAC 8&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2.10.10.10 &lt;a href=&#34;https://www.dell.com/support/home/en-us/drivers/driversdetails?driverid=fm1pc&#34;&gt;下载页面&lt;/a&gt;，2015 年 3 月版本。&lt;/li&gt;
&lt;li&gt;2.30.30.30: &lt;a href=&#34;https://www.dell.com/support/home/en-us/drivers/driversdetails?driverid=5gchc&#34;&gt;下载页面&lt;/a&gt;，2016 年 2 月版本，添加了 HTML5 virtual console 支持。&lt;/li&gt;
&lt;li&gt;2.60.60.60: &lt;a href=&#34;https://www.dell.com/support/home/en-us/drivers/driversdetails?driverid=cx8n2&#34;&gt;下载页面&lt;/a&gt;，2018 年 6 月版本，添加了 virtual media over HTTP 支持。&lt;/li&gt;
&lt;li&gt;2.70.70.70: &lt;a href=&#34;https://www.dell.com/support/home/en-us/drivers/driversdetails?driverid=dnh17&#34;&gt;下载页面&lt;/a&gt;，2019 年 10 月版本。&lt;/li&gt;
&lt;li&gt;2.75.75.75: &lt;a href=&#34;https://www.dell.com/support/home/en-us/drivers/driversdetails?driverid=krcxx&#34;&gt;下载页面&lt;/a&gt;，2020 年 6 月版本。&lt;/li&gt;
&lt;li&gt;2.75.100.75: &lt;a href=&#34;https://www.dell.com/support/home/en-us/drivers/driversdetails?driverid=dpv0r&#34;&gt;下载页面&lt;/a&gt;，2021 年 1 月版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;idrac-9&#34;&gt;iDRAC 9&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;4.00.00.00: &lt;a href=&#34;https://www.dell.com/support/home/en-us/drivers/driversdetails?driverid=4jcpk&#34;&gt;下载页面&lt;/a&gt;，2019 年 12 月版本。LLDP 连接视图。&lt;/li&gt;
&lt;li&gt;4.22.00.00: &lt;a href=&#34;https://www.dell.com/support/home/en-us/drivers/driversdetails?driverid=9f2tg&#34;&gt;下载页面&lt;/a&gt;，2020 年 7 月版本。&lt;/li&gt;
&lt;li&gt;4.40.00.00: &lt;a href=&#34;https://www.dell.com/support/home/en-us/drivers/driversdetails?driverid=62gw1&#34;&gt;下载页面&lt;/a&gt;，2020 年 12 月版本，下一代的 iDRAC virtual console 和 virtual media，支持 Infiniband。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>使用 SSSD 的 LDAP 认证</title>
      <link>https://jia.je/software/2021/02/15/sssd-ldap/</link>
      <pubDate>Mon, 15 Feb 2021 10:44:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2021/02/15/sssd-ldap/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近在研究替换一个老的用户系统，于是顺便学习了一下 LDAP，还有 SSSD。LDAP 是一个目录协议，顺带的，因为用户信息也可以存在里面，所以也就成了一个常见的用户认证协议。SSSD 就是一个 daemon，把系统的 NSS PAM 的机制和 LDAP 连接起来。&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;p&gt;其实很简单，安装 sssd 并且配置即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt install sssd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo vim /etc/sssd/sssd.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# file content:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sssd&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config_file_version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nss,pam
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;domains &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LDAP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;domain/LDAP&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cache_credentials &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;enumerate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;entry_cache_timeout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ldap_network_timeout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;id_provider &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ldap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;auth_provider &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ldap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chpass_provider &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ldap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ldap_uri &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ldap://127.0.0.1/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ldap_chpass_uri &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ldap://127.0.0.1/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ldap_search_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ldap_default_bind_dn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;localhost,ou&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;machines,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ldap_default_authtok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; REDACTED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo systemctl enable --now sssd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一些字段需要按照实际情况编写，请参考&lt;a href=&#34;https://manpages.debian.org/testing/sssd-common/sssd.conf.5.en.html&#34;&gt;sssd.conf&lt;/a&gt; 和 &lt;a href=&#34;https://manpages.debian.org/testing/sssd-ldap/sssd-ldap.5.en.html&#34;&gt;sssd-ldap&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;协议&#34;&gt;协议&lt;/h2&gt;
&lt;p&gt;那么，LDAP 里面的用户是如何和 Linux 里的用户对应起来的呢？可以看到，SSSD 会查询 posixAccount：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&amp;amp;(objectclass=posixAccount)(uid=*)(uidNumber=*)(gidNumber=*))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，可以查到 &lt;a href=&#34;https://ldapwiki.com/wiki/PosixAccount&#34;&gt;posixAccount 的 schema&lt;/a&gt;，里面可以见到对应 &lt;code&gt;/etc/passwd&lt;/code&gt; 的各个字段。相应的，也有 &lt;code&gt;shadowAccount&lt;/code&gt; 对应 &lt;code&gt;/etc/shadow&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;按照要求配好以后（建议用 ldapvi 工具），就可以用 &lt;code&gt;getent passwd&lt;/code&gt; 看到新增的用户了。&lt;/p&gt;
&lt;p&gt;上面的部分是通过 NSS 接口来查询的，除了用户以外，还有其他的一些 NIS 信息可以通过 LDAP 查询。此外，如果要登录的话，则是用 PAM 认证，SSSD 则会把 PAM 认证转换成 LDAP 的 Bind：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ su test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Password:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sssd: bind to dn of test user with password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果 Bind 成功，则认为登录成功；否则就是登录失败。&lt;/p&gt;
&lt;p&gt;如果用户要修改密码，SSSD 默认用的是 &lt;a href=&#34;https://tools.ietf.org/html/rfc3062&#34;&gt;RFC3062 LDAP Password Modify Extended Operation&lt;/a&gt; 的方式；如果服务器不支持的话，可以按照 &lt;a href=&#34;https://sssd.io/docs/design_pages/chpass_without_exop.html&#34;&gt;文档&lt;/a&gt; 使用 ldap modify 方式来修改密码。&lt;/p&gt;
&lt;p&gt;SSD 还可以&lt;a href=&#34;https://linux.die.net/man/5/sssd-sudo&#34;&gt;配置 sudo 支持&lt;/a&gt;，也是用类似的方法，添加 objectClass=sudoRole 的目录项即可。可以参考 &lt;a href=&#34;https://linux.die.net/man/5/sudoers.ldap&#34;&gt;man sudoers.ldap&lt;/a&gt; 编写对应的目录项。&lt;/p&gt;
&lt;p&gt;对于 SSH 配置，可以参考 &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/openssh-sssd&#34;&gt;RedHat 的文档&lt;/a&gt;，和参考 &lt;a href=&#34;https://www.systutorials.com/docs/linux/man/1-sss_ssh_authorizedkeys/&#34;&gt;man sss_ssh_authorizedkeys&lt;/a&gt; 配置 authorized keys 命令。然后，给用户添加 &lt;code&gt;sshPublicKey&lt;/code&gt; 属性即可，内容与 &lt;code&gt;~/.ssh/id_*.pub&lt;/code&gt; 一致。&lt;/p&gt;
&lt;h2 id=&#34;相关-rfc&#34;&gt;相关 RFC&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ldap.com/ldap-related-rfcs/&#34;&gt;LDAP-Related RFCs&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2307&#34;&gt;RFC2307 An Approach for Using LDAP as a Network Information Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3062&#34;&gt;RFC3062 LDAP Password Modify Extended Operation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4511&#34;&gt;RFC4511 Lightweight Directory Access Protocol (LDAP): The Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4512&#34;&gt;RFC4512 Lightweight Directory Access Protocol (LDAP): Directory Information Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4513&#34;&gt;RFC4513 Lightweight Directory Access Protocol (LDAP): Authentication Methods and Security Mechanisms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4517&#34;&gt;RFC4517 Lightweight Directory Access Protocol (LDAP): Syntaxes and Matching Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4519&#34;&gt;RFC4519 Lightweight Directory Access Protocol (LDAP): Schema for User Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>在 Big Sur(M1) 上解决 LaTeX 找不到楷体字体的问题</title>
      <link>https://jia.je/software/2021/02/09/big-sur-m1-latex-kaiti-fonts/</link>
      <pubDate>Tue, 09 Feb 2021 20:08:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2021/02/09/big-sur-m1-latex-kaiti-fonts/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在尝试移植 &lt;a href=&#34;https://github.com/MiKTeX/miktex/pull/710&#34;&gt;MiKTeX 到 Apple Silicon 上&lt;/a&gt;，添加了一些 patch 以后就可以工作了，但遇到了新的问题，即找不到 KaiTi&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/Library/Application Support/MiKTeX/texmfs/install/tex/latex/ctex/fontset/ctex-fontset-macnew.def:99:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   Package fontspec Error:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      The font &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Kaiti SC&amp;#34;&lt;/span&gt; cannot be found.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用 &lt;code&gt;miktex-fc-list&lt;/code&gt; 命令找了一下，确实没有找到：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ /Applications/MiKTeX&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;Console.app/Contents/bin/miktex-fc-list | grep Kaiti
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Nothing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上网搜了一下，找到了一个&lt;a href=&#34;https://www.jianshu.com/p/8f35c57901e3&#34;&gt;解决方案&lt;/a&gt;：字体在目录 &lt;code&gt;/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Support/FontSubsets/Kaiti.ttc&lt;/code&gt; 里，所以手动安装一下，就可以让 LaTeX 找到了。但我觉得，与其安装多一份在文件系统里，不如让 LaTeX 去找它。&lt;/p&gt;
&lt;h2 id=&#34;解决方法&#34;&gt;解决方法&lt;/h2&gt;
&lt;p&gt;按照上面的线索，找到了 &lt;code&gt;Kaiti.ttc&lt;/code&gt; 所在的路径：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ fd Kaiti.ttc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/System/Library/PrivateFrameworks/FontServices.framework/Versions/A/Resources/Fonts/Subsets/Kaiti.ttc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，和上面的路径又不大一样。研究了一下 fontconfig，发现可以用 &lt;code&gt;miktex-fc-conflist&lt;/code&gt; 找到配置文件的目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ /Applications/MiKTeX&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;Console.app/Contents/bin/miktex-fc-conflist
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+ ~/Library/Application Support/MiKTeX/texmfs/config/fontconfig/config/localfonts2.conf: No description
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+ ~/Library/Application Support/MiKTeX/texmfs/config/fontconfig/config/localfonts.conf: No description
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看了下第一个文件（localfonts.conf）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  DO NOT EDIT THIS FILE! It will be replaced when MiKTeX is updated.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  Instead, edit the configuration file localfonts2.conf.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;fontconfig&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;include&amp;gt;&lt;/span&gt;localfonts2.conf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/include&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dir&amp;gt;&lt;/span&gt;/Library/Fonts/&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dir&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dir&amp;gt;&lt;/span&gt;/System/Library/Fonts/&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dir&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dir&amp;gt;&lt;/span&gt;~/Library/Application Support/MiKTeX/texmfs/install/fonts/type1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dir&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dir&amp;gt;&lt;/span&gt;~/Library/Application Support/MiKTeX/texmfs/install/fonts/opentype&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dir&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dir&amp;gt;&lt;/span&gt;~/Library/Application Support/MiKTeX/texmfs/install/fonts/truetype&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dir&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/fontconfig&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，我们可以添加路径，不过建议修改的是 &lt;code&gt;localfonts2.conf&lt;/code&gt;。按照类似的格式，修改成：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;fontconfig&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dir&amp;gt;&lt;/span&gt;/System/Library/PrivateFrameworks/FontServices.framework/Versions/A/Resources/Fonts/Subsets&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dir&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- REMOVE THIS LINE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;dir&amp;gt;Your font directory here&amp;lt;/dir&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;dir&amp;gt;Your font directory here&amp;lt;/dir&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;dir&amp;gt;Your font directory here&amp;lt;/dir&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     REMOVE THIS LINE --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/fontconfig&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;UPDATE: 新版本 macOS 中，路径建议加上 &lt;code&gt;/System/Library/AssetsV2/com_apple_MobileAsset_Font7&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dir&amp;gt;&lt;/span&gt;/System/Library/AssetsV2/com_apple_MobileAsset_Font7&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dir&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样，就可以找到 Kaiti SC 了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ miktex-fc-list | grep Kaiti
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/System/Library/PrivateFrameworks/FontServices.framework/Versions/A/Resources/Fonts/Subsets/Kaiti.ttc: Kaiti TC,楷體&lt;span style=&#34;color:#ae81ff&#34;&gt;\-&lt;/span&gt;繁,楷体&lt;span style=&#34;color:#ae81ff&#34;&gt;\-&lt;/span&gt;繁:style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Regular,標準體,常规体
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/System/Library/PrivateFrameworks/FontServices.framework/Versions/A/Resources/Fonts/Subsets/Kaiti.ttc: Kaiti SC,楷體&lt;span style=&#34;color:#ae81ff&#34;&gt;\-&lt;/span&gt;簡,楷体&lt;span style=&#34;color:#ae81ff&#34;&gt;\-&lt;/span&gt;简:style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Regular,標準體,常规体
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/System/Library/PrivateFrameworks/FontServices.framework/Versions/A/Resources/Fonts/Subsets/Kaiti.ttc: Kaiti SC,楷體&lt;span style=&#34;color:#ae81ff&#34;&gt;\-&lt;/span&gt;簡,楷体&lt;span style=&#34;color:#ae81ff&#34;&gt;\-&lt;/span&gt;简:style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Bold,粗體,粗体
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/System/Library/PrivateFrameworks/FontServices.framework/Versions/A/Resources/Fonts/Subsets/Kaiti.ttc: Kaiti TC,楷體&lt;span style=&#34;color:#ae81ff&#34;&gt;\-&lt;/span&gt;繁,楷体&lt;span style=&#34;color:#ae81ff&#34;&gt;\-&lt;/span&gt;繁:style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Bold,粗體,粗体
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/System/Library/PrivateFrameworks/FontServices.framework/Versions/A/Resources/Fonts/Subsets/Kaiti.ttc: Kaiti SC,楷體&lt;span style=&#34;color:#ae81ff&#34;&gt;\-&lt;/span&gt;簡,楷体&lt;span style=&#34;color:#ae81ff&#34;&gt;\-&lt;/span&gt;简:style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Black,黑體,黑体
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/System/Library/PrivateFrameworks/FontServices.framework/Versions/A/Resources/Fonts/Subsets/Kaiti.ttc: Kaiti TC,楷體&lt;span style=&#34;color:#ae81ff&#34;&gt;\-&lt;/span&gt;繁,楷体&lt;span style=&#34;color:#ae81ff&#34;&gt;\-&lt;/span&gt;繁:style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Black,黑體,黑体
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/System/Library/PrivateFrameworks/FontServices.framework/Versions/A/Resources/Fonts/Subsets/Kaiti.ttc: STKaiti:style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Regular,標準體,Ordinær,Normal,Normaali,Regolare,レギュラー,일반체,Regulier,Обычный,常规体
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就搞定了，用 LaTeX 找字体的时候也没有出现问题了。&lt;/p&gt;
&lt;p&gt;如果你用的是 TeX Live，那么直接把上面的 Kaiti.ttc 路径复制到 &lt;code&gt;~/Library/Fonts&lt;/code&gt; 下即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>COMMON 符号</title>
      <link>https://jia.je/software/2021/02/09/common-symbols-linking/</link>
      <pubDate>Tue, 09 Feb 2021 19:02:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2021/02/09/common-symbols-linking/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;在编译一个程序的时候，遇到了 undefined symbol 的问题。具体情况是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一开始的时候，直接把所有的源代码编译成 &lt;code&gt;.o&lt;/code&gt;，再一次性链接，这样不会报错&lt;/li&gt;
&lt;li&gt;后来，把一些代码编译成静态库，即把其中一部分源代码编译成 &lt;code&gt;.o&lt;/code&gt; 后，用 &lt;code&gt;ar&lt;/code&gt; 合并到一个 &lt;code&gt;.a&lt;/code&gt; 中，再和其余的 &lt;code&gt;.o&lt;/code&gt; 链接在一起，这时候就报错了：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Undefined symbols for architecture arm64:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;_abcd&amp;#34;, referenced from:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果换台机器，编译（使用的是 gcc 10.2.0）就没有问题。&lt;/p&gt;
&lt;p&gt;而如果去找这个符号存在的 &lt;code&gt;.o&lt;/code&gt; 里，是可以找到的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -t /path/to/abcd.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000028&lt;/span&gt;         *COM*  &lt;span style=&#34;color:#ae81ff&#34;&gt;00000008&lt;/span&gt; _abcd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在合成的静态库 &lt;code&gt;.a&lt;/code&gt; 里，也是存在的（一个定义 + 若干个引用）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -t /path/to/libabc.a | grep abcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000028&lt;/span&gt;         *COM*  &lt;span style=&#34;color:#ae81ff&#34;&gt;00000008&lt;/span&gt; _abcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;         *UND* _abcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;         *UND* _abcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;         *UND* _abcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;         *UND* _abcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;         *UND* _abcd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是觉得很奇怪，就上网搜了一下，找到了一篇 &lt;a href=&#34;https://stackoverflow.com/questions/63665653/different-behavior-between-clang-and-gcc-10-when-linking-to-static-library-conta&#34;&gt;StackOverflow&lt;/a&gt; 讲了这个问题。解决方案很简单，就是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编译的时候打开 &lt;code&gt;-fno-common&lt;/code&gt; 设置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而 gcc 10 不会出错的原因是，它默认从 &lt;code&gt;-fcommon&lt;/code&gt; 改成了 &lt;code&gt;-fno-common&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;common-是什么&#34;&gt;COMMON 是什么&lt;/h2&gt;
&lt;p&gt;这时候，肯定不满足于找到一个解决方案，肯定还是会去找背后的原理。&lt;/p&gt;
&lt;p&gt;首先，搜索了一下 COMMON 是什么，找到了 &lt;a href=&#34;https://binarydodo.wordpress.com/2016/05/09/investigating-linking-with-common-symbols-in-elf/&#34;&gt;Investigating linking with COMMON symbols in ELF&lt;/a&gt; 这篇文章。&lt;/p&gt;
&lt;p&gt;文章里讲了 COMMON 是做什么的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Common symbols are a feature that allow a programmer to &amp;lsquo;define&amp;rsquo; several variables of the same name in different source files.  This is in contrast with the more popular way of doing, where you define a variable once in a source file, and reference it everywhere else in other source files, using extern.  When common symbols are used, the linker will merge all symbols of the same name into a single memory location, the size of which is the largest type of the individual common symbol definitions.  For example, if fileA.c defines an uninitialized 32-bit integer myint, and fileB.c defines an 8-bit char myint, then in the final executable, references to myint from both files will point to the same memory location (common location), and the linker will reserve 32 bits for that location.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文章里还讲了具体的实现方法：一个没有初始化的全局变量，在 &lt;code&gt;-fcommon&lt;/code&gt; 的情况下，会设为 COMMON；如果有初始化，就按照初始化的值预分配到 .bss 或者 .data。链接的时候，如果有多个同名的 symbol，会有一个规则决定最后的 symbol 放到哪里；如果有冲突的话，就是我们熟悉的 &lt;code&gt;multiple definition&lt;/code&gt; 错误了。&lt;/p&gt;
&lt;p&gt;为啥会有这种需求，多个 variable 同名，不会冲突而且共享内存？又在别的地方看到说法，COMMON 是给 &lt;code&gt;ancient&lt;/code&gt; 代码使用的，还有的提到了 FORTRAN。于是去搜了一下，果然，FORTRAN 是问题的关键&lt;/p&gt;
&lt;h2 id=&#34;fortran-里面的-common&#34;&gt;FORTRAN 里面的 COMMON&lt;/h2&gt;
&lt;p&gt;用关键词很容易可以搜索到讲 &lt;a href=&#34;https://www.obliquity.com/computer/fortran/common.html&#34;&gt;COMMON BLOCK in FORTRAN 的文章&lt;/a&gt;，FORTRAN 里面的 COMMON 是一种通过全局存储隐式传递参数的方法。拿文章里的例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fortran&#34; data-lang=&#34;fortran&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;PROGRAM&lt;/span&gt; MAIN
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;INTEGER&lt;/span&gt; A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;REAL&lt;/span&gt;    F,R,X,Y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;COMMON&lt;/span&gt;  R,A,F
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      R &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9.9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      F &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;CALL&lt;/span&gt; SUB(X,Y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;SUBROUTINE&lt;/span&gt; SUB(P,Q)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;INTEGER&lt;/span&gt; I
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;REAL&lt;/span&gt;    A,B,P,Q
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;COMMON&lt;/span&gt;  A,I,B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在函数 MAIN 和 SUB 中，都有 COMMON 语句，而 COMMON 后面的变量，就是存储在一个 COMMON 的 symbol 之中，按照顺序映射到 symbol 的内存地址。尝试编译一下上面的代码，然后看一下 symbol：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gfortran -g -c test.f -o test.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -t test.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test.o:	file format Mach-O arm64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SYMBOL TABLE:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000078&lt;/span&gt; g     F __TEXT,__text _main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; g     F __TEXT,__text _sub_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000000000000000c         *COM*	&lt;span style=&#34;color:#ae81ff&#34;&gt;00000010&lt;/span&gt; ___BLNK__
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，出现了一个叫做 &lt;code&gt;___BLNK__&lt;/code&gt; 的 COMMON symbol，大小是 16 字节。看一下代码中是如何引用的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -S --reloc test.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test.o:	file format Mach-O arm64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Disassembly of section __TEXT,__text:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000018&lt;/span&gt; _MAIN__:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;         PROGRAM MAIN
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      18: fd 7b be a9                  	stp	x29, x30, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sp, &lt;span style=&#34;color:#75715e&#34;&gt;#-32]!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      1c: fd &lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;                  	mov	x29, sp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;         A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -14
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      20: &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;                  	adrp	x0, &lt;span style=&#34;color:#75715e&#34;&gt;#0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGE21	___BLNK__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      24: &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; f9                  	ldr	x0, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;x0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		0000000000000024:  ARM64_RELOC_GOT_LOAD_PAGEOFF12	___BLNK__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      28: a1 &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;                  	mov	w1, &lt;span style=&#34;color:#75715e&#34;&gt;#-14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      2c: &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; b9                  	str	w1, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;x0, &lt;span style=&#34;color:#75715e&#34;&gt;#4]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;         R &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 99.9
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      30: &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;                  	adrp	x0, &lt;span style=&#34;color:#75715e&#34;&gt;#0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		0000000000000030:  ARM64_RELOC_GOT_LOAD_PAGE21	___BLNK__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      34: &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; f9                  	ldr	x0, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;x0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		0000000000000034:  ARM64_RELOC_GOT_LOAD_PAGEOFF12	___BLNK__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      38: a1 &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;                  	mov	w1, &lt;span style=&#34;color:#75715e&#34;&gt;#52429&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      3c: e1 &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; a8 &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;                  	movk	w1, &lt;span style=&#34;color:#75715e&#34;&gt;#17095, lsl #16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      40: &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 1e                  	fmov	s0, w1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      44: &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; bd                  	str	s0, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;x0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;         F &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      48: &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;                  	adrp	x0, &lt;span style=&#34;color:#75715e&#34;&gt;#0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		0000000000000048:  ARM64_RELOC_GOT_LOAD_PAGE21	___BLNK__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      4c: &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; f9                  	ldr	x0, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;x0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		000000000000004c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12	___BLNK__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      50: a1 &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;                  	mov	w1, &lt;span style=&#34;color:#75715e&#34;&gt;#52429&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      54: &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; c9 a7 &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;                  	movk	w1, &lt;span style=&#34;color:#75715e&#34;&gt;#15948, lsl #16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      58: &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 1e                  	fmov	s0, w1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      5c: &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; bd                  	str	s0, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;x0, &lt;span style=&#34;color:#75715e&#34;&gt;#8]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;         CALL SUB&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;X,Y&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      60: e1 &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;                  	add	x1, sp, &lt;span style=&#34;color:#75715e&#34;&gt;#24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      64: e0 &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;                  	add	x0, sp, &lt;span style=&#34;color:#75715e&#34;&gt;#28&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      68: &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;                  	bl	&lt;span style=&#34;color:#75715e&#34;&gt;#0 &amp;lt;_MAIN__+0x50&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		0000000000000068:  ARM64_RELOC_BRANCH26	_sub_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;         END
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      6c: 1f &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt; d5                  	nop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      70: fd 7b c2 a8                  	ldp	x29, x30, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sp&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;#32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      74: c0 &lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt; 5f d6                  	ret
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，在 MAIN 中引用 &lt;code&gt;A&lt;/code&gt; 的时候，取的地址是 &lt;code&gt;___BLNK__+4&lt;/code&gt;，&lt;code&gt;R&lt;/code&gt; 是 &lt;code&gt;___BLNK__+0&lt;/code&gt;，&lt;code&gt;F&lt;/code&gt; 是 &lt;code&gt;___BLNK__+8&lt;/code&gt;。这和代码里的顺序也是一致的。所以在 SUB 中读 A I B 的时候，对应了 MAIN 中的 A R F。通过这种方式，可以在 MAIN 函数里面隐式地给所有函数传递参数。&lt;/p&gt;
&lt;p&gt;此外，COMMON 还可以命名，这样就可以区分不同的参数用途：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fortran&#34; data-lang=&#34;fortran&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;PROGRAM&lt;/span&gt; MAIN
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;INTEGER&lt;/span&gt; A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;REAL&lt;/span&gt;    F,R,X,Y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;COMMON&lt;/span&gt;  R,A,F
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;COMMON&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;test&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; X,Y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        R &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9.9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        F &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;CALL&lt;/span&gt; SUB(X,Y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;SUBROUTINE&lt;/span&gt; SUB(P,Q)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;INTEGER&lt;/span&gt; I
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;REAL&lt;/span&gt;    A,B,P,Q
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;COMMON&lt;/span&gt;  A,I,B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码添加了一行 &lt;code&gt;COMMON /test/&lt;/code&gt;，观察一下 symbol：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -t test.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test.o:	file format Mach-O arm64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SYMBOL TABLE:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000088&lt;/span&gt; g     F __TEXT,__text _main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; g     F __TEXT,__text _sub_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000000000000000c         *COM*	&lt;span style=&#34;color:#ae81ff&#34;&gt;00000010&lt;/span&gt; ___BLNK__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000008&lt;/span&gt;         *COM*	&lt;span style=&#34;color:#ae81ff&#34;&gt;00000010&lt;/span&gt; _test_
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和预期的一致：出现了新的 COMMON symbol，对应了 named COMMON Block 里面的变量 X 和 Y。&lt;/p&gt;
&lt;p&gt;再看一下汇编里怎么引用的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;         CALL SUB&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;X,Y&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      60: &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;                   adrp    x0, &lt;span style=&#34;color:#75715e&#34;&gt;#0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                0000000000000060:  ARM64_RELOC_GOT_LOAD_PAGE21  _test_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      64: &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; f9                   ldr     x0, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;x0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                0000000000000064:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _test_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      68: &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;                   add     x1, x0, &lt;span style=&#34;color:#75715e&#34;&gt;#4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      6c: &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;                   adrp    x0, &lt;span style=&#34;color:#75715e&#34;&gt;#0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                000000000000006c:  ARM64_RELOC_GOT_LOAD_PAGE21  _test_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      70: &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; f9                   ldr     x0, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;x0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                0000000000000070:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _test_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      74: &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;                   bl      &lt;span style=&#34;color:#75715e&#34;&gt;#0 &amp;lt;_MAIN__+0x5c&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                0000000000000074:  ARM64_RELOC_BRANCH26 _sub_
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，第一个参数（x0）为 &lt;code&gt;_test_&lt;/code&gt;，第二个参数（x1）为 &lt;code&gt;_test_+4&lt;/code&gt;，和预期也是一样的。&lt;/p&gt;
&lt;p&gt;读到这里，就可以理解为啥有 COMMON symbol 了。可能是为了让 C 代码和 FORTRAN 代码可以互操作 COMMON symbol，就有了这么一出。也可能有的 C 库确实用了类似的方法来实现某些功能。&lt;/p&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;但是，这种用法在现在来看是不推荐的，建议还是该 extern 就 extern，另外，在编译静态库的时候，记得加上 &lt;code&gt;-fno-common&lt;/code&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Skid Buffer</title>
      <link>https://jia.je/hardware/2021/01/26/skid-buffer/</link>
      <pubDate>Tue, 26 Jan 2021 20:34:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/01/26/skid-buffer/</guid>
      <description>&lt;h2 id=&#34;skid-buffer&#34;&gt;Skid buffer&lt;/h2&gt;
&lt;p&gt;Skid buffer 指的就是，对于 valid + ready 的握手信号，用空间（更多的逻辑）来换取时间（更好的时序）的一个硬件模块。&lt;/p&gt;
&lt;p&gt;简单来说，背景就是，为了解决 valid 和 ready 信号在数据流水线上一路经过组合逻辑导致的时序问题，在中途加上一些寄存器来阻隔。当然了，代价就是延迟和面积，不过吞吐量还是需要保持的。&lt;/p&gt;
&lt;p&gt;由于需求的不同，Skid buffer 也有不同的实现。目前，找到了四个实现，实现上有所不同，特性也不大一样。&lt;/p&gt;
&lt;h3 id=&#34;统一约定&#34;&gt;统一约定&lt;/h3&gt;
&lt;p&gt;由于我在 SpinalHDL 语言中重新实现了下面的这些 Skid buffer，所以按照 SpinalHDL 的 Stream 定义接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SkidBufferCommon&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;](&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gen&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; T
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Component&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; io &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bundle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; s &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; slave&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Stream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gen&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; m &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; master&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Stream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gen&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这里，&lt;code&gt;io.s&lt;/code&gt; 表示从上游取的数据，&lt;code&gt;io.m&lt;/code&gt; 表示传递给下游的数据。&lt;/p&gt;
&lt;p&gt;输出信号共有：&lt;code&gt;io.s.ready&lt;/code&gt;、&lt;code&gt;io.m.valid&lt;/code&gt; 和 &lt;code&gt;io.m.payload&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;zipcpu-版本&#34;&gt;ZipCPU 版本&lt;/h3&gt;
&lt;p&gt;第一个版本来自 ZipCPU：&lt;/p&gt;
&lt;p&gt;博客地址：&lt;a href=&#34;https://zipcpu.com/blog/2019/05/22/skidbuffer.html&#34;&gt;Building a Skid Buffer for AXI processing&lt;/a&gt;
代码地址：&lt;a href=&#34;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&#34;&gt;skidbuffer.v&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;它有两个参数，一个表示是否有额外的输出寄存器（outputReg），一个表示是否低功耗（lowPower）。&lt;/p&gt;
&lt;h3 id=&#34;fpgacpu-版本&#34;&gt;FPGACPU 版本&lt;/h3&gt;
&lt;p&gt;第二个版本来自 FPGACPU：&lt;/p&gt;
&lt;p&gt;文章地址：&lt;a href=&#34;http://fpgacpu.ca/fpga/Pipeline_Skid_Buffer.html&#34;&gt;Pipeline Skid Buffer&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;spinalhdl-s2m-版本&#34;&gt;SpinalHDL S2M 版本&lt;/h3&gt;
&lt;p&gt;第三个版本来自 SpinalHDL Library 的 s2mPipe：&lt;/p&gt;
&lt;p&gt;代码地址：&lt;a href=&#34;https://github.com/SpinalHDL/SpinalHDL/blob/f9eda46bb5968659fe4e97cad8b69c8c0cb2bf89/lib/src/main/scala/spinal/lib/Stream.scala#L348&#34;&gt;Stream.scala L348&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;spinalhdl-m2s-版本&#34;&gt;SpinalHDL M2S 版本&lt;/h3&gt;
&lt;p&gt;第四个版本来自 SpinalHDL Library 的 m2sPipe：&lt;/p&gt;
&lt;p&gt;代码地址：&lt;a href=&#34;https://github.com/SpinalHDL/SpinalHDL/blob/f9eda46bb5968659fe4e97cad8b69c8c0cb2bf89/lib/src/main/scala/spinal/lib/Stream.scala#L327&#34;&gt;Stream.scala L327&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;四个版本的对比&#34;&gt;四个版本的对比&lt;/h3&gt;
&lt;p&gt;在研究了代码以后，可以看到这四个版本的区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;ZipCPU w/ outputReg&lt;/th&gt;
&lt;th&gt;ZipCPU w/o outputReg&lt;/th&gt;
&lt;th&gt;FPGACPU&lt;/th&gt;
&lt;th&gt;S2M&lt;/th&gt;
&lt;th&gt;M2S&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;io.s.ready&lt;/td&gt;
&lt;td&gt;Reg&lt;/td&gt;
&lt;td&gt;Reg&lt;/td&gt;
&lt;td&gt;Reg&lt;/td&gt;
&lt;td&gt;Reg&lt;/td&gt;
&lt;td&gt;Comb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;io.m.valid&lt;/td&gt;
&lt;td&gt;Reg&lt;/td&gt;
&lt;td&gt;Comb&lt;/td&gt;
&lt;td&gt;Reg&lt;/td&gt;
&lt;td&gt;Comb&lt;/td&gt;
&lt;td&gt;Reg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;io.m.payload&lt;/td&gt;
&lt;td&gt;Reg&lt;/td&gt;
&lt;td&gt;Comb&lt;/td&gt;
&lt;td&gt;Reg&lt;/td&gt;
&lt;td&gt;Comb&lt;/td&gt;
&lt;td&gt;Reg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;latency&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;buffer 数量&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reg 表示从寄存器输出，Comb 表示从组合逻辑输出&lt;/li&gt;
&lt;li&gt;Latency 表示从 &lt;code&gt;io.s.fire&lt;/code&gt; 到 &lt;code&gt;io.m.fire&lt;/code&gt; 的延迟&lt;/li&gt;
&lt;li&gt;Buffer 表示缓冲的 payload 个数&lt;/li&gt;
&lt;li&gt;ZipCPU w/o outputReg 和 S2M 实现的逻辑是一样的&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;形式化验证&#34;&gt;形式化验证&lt;/h3&gt;
&lt;p&gt;为了确认上面这些类型的 Skid Buffer 都可以正常工作，按照 ZipCPU Skid Buffer 的文章，也照着写了几个 property：&lt;/p&gt;
&lt;p&gt;1: 在 valid &amp;amp;&amp;amp; ~ready 的时候，valid 需要继续保持为高，并且 payload 不变：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// When valid goes high, data is stable and valid stays high before ready
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;when&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;past&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;stream&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;stream&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;outerReset&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    slaveAssume&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;stream&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dataStable&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        slaveAssume&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;stable&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;stream&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;payload&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;asBits&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2: 在 reset 释放的第一个周期里，valid 不能为高：&lt;/p&gt;
&lt;p&gt;参考 AXI 标准 (IHI0022E Page 38 A3.1.2) 原文：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The earliest point after reset that a master is permitted to begin driving ARVALID, AWVALID, or WVALID HIGH is at a rising ACLK edge after ARESETn is HIGH.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Valid is low in the first cycle after reset falls
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;when&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pastValid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; past&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;outerReset&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;outerReset&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    slaveAssume&lt;span style=&#34;color:#f92672&#34;&gt;(~&lt;/span&gt;stream&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3: 添加 cover property，要求 &lt;code&gt;io.s&lt;/code&gt; 和 &lt;code&gt;io.m&lt;/code&gt; 可以连续若干个周期 valid &amp;amp;&amp;amp; ready，保证吞吐率：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cover&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pastValid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; genPast&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pastValid&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cycles&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; genPast&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;outerReset&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cycles
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; genPast&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;stream&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fire&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; payload&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cycles&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;采用 &lt;code&gt;yosys-smtbmc&lt;/code&gt; 工具验证了以上四种 Skid buffer 都满足这些属性。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 M1 上用 QEMU 运行 Debian 虚拟机</title>
      <link>https://jia.je/software/2021/01/02/aarch64-debian-in-qemu-m1/</link>
      <pubDate>Sat, 02 Jan 2021 13:05:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2021/01/02/aarch64-debian-in-qemu-m1/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;看到 @jsteward 在 M1 的 QEMU 中运行了 Windows on ARM，所以我先来试试 Debian on AArch64，这样会简单一些。&lt;/p&gt;
&lt;p&gt;参考：https://gist.github.com/niw/e4313b9c14e968764a52375da41b4278#file-readme-md&lt;/p&gt;
&lt;p&gt;大约需要 3G 的硬盘空间。&lt;/p&gt;
&lt;h2 id=&#34;安装-qemu-w-m1-patches&#34;&gt;安装 QEMU w/ M1 patches&lt;/h2&gt;
&lt;p&gt;目前上游的 QEMU 还不支持 M1 的 Hypervisor framework，需要打 patch：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://mirrors.tuna.tsinghua.edu.cn/git/qemu.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd qemu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout master -b wip/hvf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://patchwork.kernel.org/series/400619/mbox/&amp;#39;&lt;/span&gt;|git am --3way
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;../configure --target-list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aarch64-softmmu --enable-cocoa --disable-gnutls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make -j4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译后，得到 &lt;code&gt;qemu-system-aarch64&lt;/code&gt; 的二进制&lt;/p&gt;
&lt;h2 id=&#34;准备好文件系统&#34;&gt;准备好文件系统&lt;/h2&gt;
&lt;p&gt;需要下载 &lt;a href=&#34;https://gist.github.com/niw/4f1f9bb572f40d406866f23b3127919b/raw/f546faea68f4149c06cca88fa67ace07a3758268/QEMU_EFI-cb438b9-edk2-stable202011-with-extra-resolutions.tar.gz&#34;&gt;EFI 固件&lt;/a&gt; 和 &lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/debian-cd/current/arm64/iso-cd/debian-10.7.0-arm64-xfce-CD-1.iso&#34;&gt;Debian 安装镜像&lt;/a&gt;，解压前者以后把文件放同一个目录中，并且创建需要的文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls *.fd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;QEMU_EFI.fd   QEMU_VARS.fd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dd &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/dev/zero of&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pflash0.img bs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1m count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dd &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/dev/zero of&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pflash1.img bs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1m count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dd &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;QEMU_EFI.fd of&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pflash0.img conv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;notrunc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dd &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;QEMU_VARS.fd of&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pflash1.img conv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;notrunc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ $QEMU/qemu-img create -f qcow2 disk.qcow2 40G
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;安装-debian-系统&#34;&gt;安装 Debian 系统&lt;/h2&gt;
&lt;p&gt;接着，执行以下的命令，然后按照提示安装系统：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ $QEMU/qemu-system-aarch64 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -serial mon:stdio &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -M virt,highmem&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;off &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -accel hvf &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -cpu cortex-a72 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -smp &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -m &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./pflash0.img,format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;raw,if&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pflash,readonly&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;on &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./pflash1.img,format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;raw,if&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pflash &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -device virtio-scsi-pci &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -device virtio-gpu-pci &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -device qemu-xhci &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -device usb-kbd &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -device usb-tablet &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./disk.qcow2,if&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;none,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;boot,cache&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;writethrough &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -device nvme,drive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;boot,serial&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;boot &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -drive &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;none,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cd,file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;debian-10.7.0-arm64-xfce-CD-1.iso,media&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cdrom &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -device scsi-cd,drive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cd &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -display default,show-cursor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;on
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的是，如果用 &lt;code&gt;-cdrom&lt;/code&gt; 选项，Debian 会无法识别，所以需要走 SCSI。安装完成后，第一次重启可能会显示失败，不用管。另外，安装界面只在串口处显示，但不会显示在 GUI 中，估计是因为 &lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=977466&#34;&gt;BUG&lt;/a&gt;（感谢 @Harry-Chen 指出）。&lt;/p&gt;
&lt;h2 id=&#34;启动系统&#34;&gt;启动系统&lt;/h2&gt;
&lt;p&gt;安装好后，运行下面的命令来启动 Debian 系统：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ $QEMU/qemu-system-aarch64 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -monitor stdio &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -M virt,highmem&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;off &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -accel hvf &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -cpu cortex-a72 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -smp &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -m &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./pflash0.img,format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;raw,if&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pflash,readonly&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;on &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./pflash1.img,format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;raw,if&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pflash &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -device virtio-gpu-pci &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -device virtio-scsi-pci &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -device qemu-xhci &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -device usb-kbd &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -device usb-tablet &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./disk.qcow2,if&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;none,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;boot,cache&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;writethrough &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -device nvme,drive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;boot,serial&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;boot &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -display default,show-cursor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;on &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -nic user,model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;virtio
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意参数和上面有所不同。启动后就可以在 GUI 上看到 Debian 登录的界面了。&lt;/p&gt;
&lt;h2 id=&#34;网络&#34;&gt;网络&lt;/h2&gt;
&lt;p&gt;起来以后，可以看到一个网卡 &lt;code&gt;enp0s1&lt;/code&gt; 启动并获取 IP 地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ip l set enp0s1 up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dhclient enp0s1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;获取到一个 IP 地址后，就可以上网了。&lt;/p&gt;
&lt;h2 id=&#34;已知问题&#34;&gt;已知问题&lt;/h2&gt;
&lt;p&gt;在虚拟机内重启以后，可能会启动失败。退出 QEMU 进程重新启动即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>以太网的物理接口</title>
      <link>https://jia.je/hardware/2020/12/27/ethernet-physical-interfaces/</link>
      <pubDate>Sun, 27 Dec 2020 08:46:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/12/27/ethernet-physical-interfaces/</guid>
      <description>&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;https://jia.je/kb/networking/ethernet.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近逐渐接触到了一些高速的以太网的接口，被一大堆的名字搞得有点懵，所以特意学习了一下并整理成这篇博客。&lt;/p&gt;
&lt;p&gt;更新：经 &lt;a href=&#34;https://github.com/z4yx&#34;&gt;@z4yx&lt;/a&gt; 指出，还可以看&lt;a href=&#34;https://support.huawei.com/hedex/hdx.do?docid=EDOC1100156553&amp;amp;id=ZH-CN_TOPIC_0250303640&amp;amp;lang=zh&#34;&gt;华为的介绍文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;几几-base-杠什么是什么意思&#34;&gt;几几 BASE 杠什么是什么意思&lt;/h2&gt;
&lt;p&gt;在下文里，经常可以看到类似 100BASE-TX 这种写法，它表示的意思是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;BASE 前面的数字表示速率，比如 10，100，1000，10G 等等&lt;/li&gt;
&lt;li&gt;BASE 之后的第一个字母，常见的 T 表示双绞线，S 表示 850nm 光纤，L 表示 1310nm 光纤，C 表示同轴电缆&lt;/li&gt;
&lt;li&gt;之后可能还有别的字母，比如 X 表示 8b/10b 或者 4b/5b（FE）的编码，R 表示 64b/66b 的编码&lt;/li&gt;
&lt;li&gt;之后可能还有别的数字，如果是 LAN PHY 表示的是所使用的 lane 数量；如果是 WAN PHY 表示的是传输的公里数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;详见 &lt;a href=&#34;https://en.wikipedia.org/wiki/Ethernet_physical_layer#Naming_conventions&#34;&gt;Wikipedia - Ethernet Physical Layer # Naming Conventions&lt;/a&gt; 和 IEEE 802.3 1.2.3 节 Physical Layer and media notation：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The data rate, if only a number, is in Mb/s, and if suffixed by a “G”, is in
Gb/s. The modulation type (e.g., BASE) indicates how encoded data is
transmitted on the medium. The additional distinction may identify
characteristics of transmission or medium and, in some cases, the type of PCS
encoding used (examples of additional distinctions are “T” for twisted pair,
“B” for bidirectional optics, and “X” for a block PCS coding used for that
speed of operation). Expansions for defined Physical Layer types are included
in 1.4.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;和 IEEE 802.3 1.4 节 Definitions 中的几个例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;100BASE-T: IEEE 802.3 Physical Layer specification for a 100 Mb/s CSMA/CD local area network. (See IEEE Std 802.3, Clause 22 and Clause 28.)&lt;/li&gt;
&lt;li&gt;100BASE-TX: IEEE 802.3 Physical Layer specification for a 100 Mb/s CSMA/CD local area network over two pairs of Category 5 twisted-pair cabling. (See IEEE Std 802.3, Clause 24 and Clause 25.)&lt;/li&gt;
&lt;li&gt;1000BASE-T: IEEE 802.3 Physical Layer specification for a 1000 Mb/s CSMA/CD LAN using four pairs of Category 5 balanced copper cabling. (See IEEE Std 802.3, Clause 40.)&lt;/li&gt;
&lt;li&gt;1000BASE-X: IEEE 802.3 Physical Layer specification for a 1000 Mb/s CSMA/CD LAN that uses a Physical Layer derived from ANSI X3.230-1994 (FC-PH) [B21]23. (See IEEE Std 802.3, Clause 36.)&lt;/li&gt;
&lt;li&gt;2.5GBASE-T: IEEE 802.3 Physical Layer specification for a 2.5 Gb/s LAN using four pairs of Category 5e/Class D balanced copper cabling. (See IEEE Std 802.3, Clause 126.)&lt;/li&gt;
&lt;li&gt;5GBASE-T: IEEE 802.3 Physical Layer specification for a 5 Gb/s LAN using four pairs of Category 5e/Class D balanced copper cabling. (See IEEE Std 802.3, Clause 126.)&lt;/li&gt;
&lt;li&gt;10GBASE-T: IEEE 802.3 Physical Layer specification for a 10 Gb/s LAN using four pairs of Class E or Class F balanced copper cabling. (See IEEE Std 802.3, Clause 55.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;各个速率对应的英文单词是什么&#34;&gt;各个速率对应的英文单词是什么&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fast Ethernet: 100Mbps&lt;/li&gt;
&lt;li&gt;Gigabit Ethernet: 1Gbps&lt;/li&gt;
&lt;li&gt;Multi Gigabit Ethernet: 2.5Gbps&lt;/li&gt;
&lt;li&gt;Ten Gigabit Ethernet: 10Gbps&lt;/li&gt;
&lt;li&gt;Forty Gigabit Ethernet: 40Gbps&lt;/li&gt;
&lt;li&gt;Hundred Gigabit Ethernet: 100Gbps&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常见的连接器&#34;&gt;常见的连接器&lt;/h2&gt;
&lt;p&gt;连接器（connector）一般来说指的就是线缆和网络设备之间的物理接口了。常见的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Modular_connector#8P8C&#34;&gt;8P8C&lt;/a&gt;：一般我们会称之为 RJ45，关于它们俩的关系，可以看 Wikipedia 上面的说明，不过在日常生活中，这两个混用其实也没有什么大问题&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Optical_fiber_connector#LC&#34;&gt;LC&lt;/a&gt;：一种光纤的接口，有两个突出来的插到 SFP 光模块中的突起，比较常见&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Twinaxial_cabling#SFP+_Direct-Attach_Copper_(10GSFP+Cu)&#34;&gt;SFP+ DAC&lt;/a&gt;：一般是 DAC（Direct Attatched Cable）线，线的两端直接就是 SFP+ 的接口，直接插到 SFP+ 笼子中，不需要光模块；更高速率的也有 DAC 线&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于光纤的接口，注意购买的时候要和光模块对应，不然可能插不进去。常见的有 LC-LC，SC-LC，SC-SC 等等，表示线的两端分别是什么接口。&lt;/p&gt;
&lt;h2 id=&#34;mdi-和-mdi-x&#34;&gt;MDI 和 MDI-X&lt;/h2&gt;
&lt;p&gt;这其实就是大家常见的 RJ45 里面 8 根线对应的信号，在十兆和百兆的时候，需要区分 MDI 和 MDI-X，在同种类型的端口之间用交叉线，在不同类型的端口之间用直通线。在后来，有了 Auto MDI-X，也就是会按照实际情况自动检测并且匹配。从千兆开始，设备都支持 Auto MDI-X 了，所以线本身是交叉还是直通就无所谓了。&lt;/p&gt;
&lt;h2 id=&#34;各种-sfp&#34;&gt;各种 SFP&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Small_form-factor_pluggable_transceiver&#34;&gt;SFP&lt;/a&gt; 是很常见的，特别是在高速的网络之中。而它又分为几种，对应不同的速率：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SFP: 1Gbps/100Mbps&lt;/li&gt;
&lt;li&gt;SFP+: 10Gbps&lt;/li&gt;
&lt;li&gt;SFP28: 25Gbps&lt;/li&gt;
&lt;li&gt;SFP56: 50Gbps&lt;/li&gt;
&lt;li&gt;QSFP: 4Gbps&lt;/li&gt;
&lt;li&gt;QSFP+: 40Gbps&lt;/li&gt;
&lt;li&gt;QSFP28: 100Gbps/50Gbps&lt;/li&gt;
&lt;li&gt;QSFP56: 200Gbps&lt;/li&gt;
&lt;li&gt;QSFP-DD: 400Gbps/200Gbps&lt;/li&gt;
&lt;li&gt;QSFP-DD112: 800Gbps&lt;/li&gt;
&lt;li&gt;OSFP: 800Gbps/400Gbps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，名字前面加了个 Q（Quad），速率就翻了 4 倍，因为有 4 个 lane，同时物理接口的尺寸也变大了。所以，不带 Q 的 SFP 的物理尺寸都一样，带 Q 的 SFP 物理尺寸都一样大，但后者比前者大一些（SFP 是 113.9 mm^2，QSFP 是 156 mm^2）。OSFP 又比 QSFP 更大一些，O 表示 Octal，就是 8 个 lane 的意思。&lt;/p&gt;
&lt;p&gt;可以在 &lt;a href=&#34;https://community.fs.com/blog/400g-qsfp-dd-transceiver-types-overview.html&#34;&gt;400G QSFP Transceiver Types and Fiber Connections&lt;/a&gt; 和 &lt;a href=&#34;https://community.fs.com/blog/400g-osfp-transceiver-types-overview.html&#34;&gt;400G OSFP Transceiver Types Overview&lt;/a&gt; 看到 QSFP-DD 和 OSFP 的对比。&lt;/p&gt;
&lt;p&gt;通常，网络设备也会支持把一个 QSFP 接口拆成多个 SFP 接口来使用，比如有的线，一边是 QSFP28，另一边是 4xSFP28，只要设备支持即可，目的是节省空间。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://members.snia.org/document/dl/26184&#34;&gt;SFP 标准 SFF INF-8074&lt;/a&gt; 规定了 &lt;a href=&#34;https://en.wikipedia.org/wiki/Small_form-factor_pluggable_transceiver#Signals&#34;&gt;20 根信号线&lt;/a&gt;，正反面各 10 根，重要的是下面的这些（括号里写得是 Pin 的编号）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mod_ABS（6）：模块是否插入&lt;/li&gt;
&lt;li&gt;RD+（13）、RD-（12）：接收数据的差分对&lt;/li&gt;
&lt;li&gt;TD+（18）、TD-（19）：传输数据的差分对&lt;/li&gt;
&lt;li&gt;SDA（4）、SCL（5）：模块的 I2C&lt;/li&gt;
&lt;li&gt;Tx_Fault（2）、Tx_Disable（3）、Rx_LOS（8）：一些状态信号&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，收和发各有一个差分对共 4 条数据线。相对应的，QSFP 收和发各有四对差分对共 16 条数据线，一共 38 根线。并且有一些信号是复用了同样的 pin，这样的设计可以节省一些 pin，是很常见的。&lt;/p&gt;
&lt;h2 id=&#34;mii&#34;&gt;MII&lt;/h2&gt;
&lt;p&gt;有时候，还会遇到各种 &lt;a href=&#34;https://en.wikipedia.org/wiki/Media-independent_interface&#34;&gt;MII&lt;/a&gt; 接口，也就是 MAC 和 PHY 之间的接口。有时候，还会伴随着 MDIO 接口，来进行控制信息的传输。它又分不同的类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Standard MII：速率是 100Mbps（25MHz*4）或者 10Mbps（2.5Mhz*4），TX 7 根线（4 DATA+CLK+EN+ER），RX 7+2 根线（4 DATA+CLK+DV+ER+CRS+COL），加上 MDIO 2 根线共 18 根线&lt;/li&gt;
&lt;li&gt;RMII：速率是 100Mbps 或者 10Mbps，频率都是 50MHz，一共 10 根线（4 DATA+CLK+TX_EN+CRS_DV+RX_ER+MDIO+MDC），数据线是 TX 和 RX 各 2 根&lt;/li&gt;
&lt;li&gt;GMII：速率是 1000Mbps（125MHz*8），数据线是 TX 和 RX 各 8 根；也支持速率 100Mbps（25MHz）和 10Mbps（2.5MHz）&lt;/li&gt;
&lt;li&gt;RGMII：速率是 1000Mbps（125MHz*4*2，DDR），数据线是 TX 和 RX 各 4 根；也支持速率 100Mbps（25MHz*4）和 10Mbps（2.5MHz*4），一共是 5+5+2 根线&lt;/li&gt;
&lt;li&gt;SGMII：速率是 1000Mbps（625MHz*2*8/10），采用 625MHz DDR 差分对 SerDes，采用 8b/10b 的编码&lt;/li&gt;
&lt;li&gt;XGMII：支持 2500Mbps/5000Mbps/10000Mbps（156.25 MHz*32*2，DDR）速率，数据线是 TX 和 RX 各 32 根&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有的时候，MAC 和 PHY 是独立的，比如很多常见的 FPGA 开发板，在使用千兆网的时候，在板子上是 PHY 芯片，从 FPGA 到 PHY 通过 RGMII 连接，然后 PHY 再连接到 8P8C（RJ45）的连接器上。一般还会把 MDIO 也接到 FPGA 上面。如果有多个 PHY，就会吧 MDIO 通过总线的方式合并起来，给每个 PHY 配置不同的地址（一般是在指定的 PIN 上设置上拉/下拉电阻实现），就可以保证不冲突的访问。&lt;/p&gt;
&lt;p&gt;扩展阅读：&lt;a href=&#34;https://ww1.microchip.com/downloads/en/DeviceDoc/00002117F.pdf&#34;&gt;KXZ9031RNX Datasheet&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;sgmii&#34;&gt;SGMII&lt;/h2&gt;
&lt;p&gt;上面比较常见的是 GMII/RGMII/SGMII。其中比较特殊的是 &lt;a href=&#34;https://archive.org/details/sgmii/mode/2up&#34;&gt;SGMII&lt;/a&gt;，首先可以发现它信号很少，只有两对差分线 TX_P TX_N RX_P RX_N，其中时钟是可选的，因为可以从数据中恢复。你可能感到很奇怪，那么其他的信号，比如 DV/ER/CRS 等都去哪里了呢？其实是因为，SGMII 采用了 &lt;a href=&#34;https://zh.wikipedia.org/wiki/8b/10b&#34;&gt;8b/10b&lt;/a&gt; 的编码的同时，把这些控制信号通过一定的方式顺便编码进去了。具体来说，就是从 8 位的数据信号编码为 10 位的时候，有一些特殊的 10 位符号是没有对应 8 位的数据的，因此可以用这些特殊符号来表示一些信号，比如用 SPD（Start_of_Packet Delimiter，对应 /S/）和 EPD（End_of_Packet Delimiter，对应 /T/R/ 等）表示传输数据的开始和结尾，对应 TX_EN/RX_DV 信号；用 Error_Propagation（/V/）表示错误，对应 RX_ER 信号等等。所以，SGMII 其实还是一个 GMII 的变种，只不过采用 SerDes 的方式减少了引脚，MAC 内部或者 PHY 内部也是经过一个 GMII-SGMII 的转换，而其余部分是一样的。&lt;/p&gt;
&lt;p&gt;关于 8b/10b 的编码方式，可以阅读 IEEE 802.3 标准中的 &lt;code&gt;Table 36–1a—Valid data code-groups&lt;/code&gt;，里面提到了两类的 Code Group：D 打头的，表示数据，有 256 种，从 8b 映射到 10b 的表达方式，并且为了保持直流平衡，有一种到两种表示方法。此外还有 12 个特殊的 Code Group：K 打头，它们的 10b 表达方式不会和数据冲突。表 &lt;code&gt;Table 36–3—Defined ordered sets&lt;/code&gt; 中定义了 K 打头的 Code Group 含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/C/ Configuration:
&lt;ul&gt;
&lt;li&gt;/C1/ Configuration 1: /K28.5/D21.5/Config_Reg&lt;/li&gt;
&lt;li&gt;/C2/ Configuration 2: /K28.5/D2.2/Config_Reg&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;/I/ IDLE:
&lt;ul&gt;
&lt;li&gt;/I1/ IDLE 1: /K28.5/D5.6/&lt;/li&gt;
&lt;li&gt;/I2/ IDLE 2: /K28.5/D16.2/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Encapsulation:
&lt;ul&gt;
&lt;li&gt;/R/ Carrier_Extend: /K23.7/&lt;/li&gt;
&lt;li&gt;/S/ Start_of_Packet: /K27.7/&lt;/li&gt;
&lt;li&gt;/T/ End_of_Packet: /K29.7/&lt;/li&gt;
&lt;li&gt;/V/ Error_Propagation: /K30.7/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;/LI/ LPI (Low Power Idle):
&lt;ul&gt;
&lt;li&gt;/LI1/ LPI 1: /K28.5/D6.5/&lt;/li&gt;
&lt;li&gt;/LI2/ LPI 2: /K28.5/D26.4/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IEEE 802.3 Figure 36-4 中给了一个例子，就是在发送一段数据的时候，首先是 /I/，然后 /S/，接着一系列的 /D/，最后结束的时候 /T/R/I/。&lt;/p&gt;
&lt;p&gt;扩展阅读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/programmable/solutions/technology/transceiver/protocols/pro-sgmii.html&#34;&gt;Serial Gigabit Media Independent Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xilinx.com/support/documentation/ip_documentation/gig_ethernet_pcs_pma/v16_0/pg047-gig-eth-pcs-pma.pdf&#34;&gt;1G/2.5G Ethernet PCS/PMA or SGMII v16.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Physical_coding_sublayer&#34;&gt;https://en.wikipedia.org/wiki/Physical_coding_sublayer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1000base-x-与-sfp-的关系&#34;&gt;1000BASE-X 与 SFP 的关系&lt;/h2&gt;
&lt;p&gt;1000BASE-X 在 802.3 Clause 36 中定义，它的层级是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/1000basex.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;它支持三种不同的介质，对应了三个 PMD 层，也就是 LX、SX 和 CX。这些体现在设备上，其实就是不同的 SFP 模块。SFP 模块实际上就是图中的 PMD 层，SFP 接口上连接的是 1000BASE-X 的 PCS/PMA，这也就是为什么说在带有 SFP 的 FPGA 上，Xilinx 的 IP 叫做 1G/2.5G Ethernet PCS/PMA。在这里，PCS 和 PMA 层在 FPGA 内部通过 IP 实现，通过 PCB 连接到 SFP 上，光模块就是 PMD 层。见下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/xilinx_pcs_pma.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;左边通过 GMII 连接到内部的 MAC，右边连接到 SFP 上，通过光模块，连接到光纤。这里光模块只需要负责光电转换。另一种比较常见的形式，就是 MAC 在 FPGA 内部，PHY（包括 PCS/PMA/PMD）都在 FPGA 外部，此时 FPGA IO 上就是各种 MII。&lt;/p&gt;
&lt;p&gt;那么 SFP 电口模块是怎么工作的呢？我们知道，电口采用的是 1000BASE-T 标准。实际上，它里面有一个 PHY 芯片，发送的时候，首先解码 1000BASE-X 变回原始数据，再按照 1000BASE-T 的方式编码再发出去；接收的时候，按照 1000BASE-T 进行解码，再重新编码为 1000BASE-X 发送给 PMA 层。&lt;/p&gt;
&lt;p&gt;还有一类电口模块，与上面不同的地方在于，SFP 上走的是 SGMII，而不是 1000BASE-X。这两种模式没有太大的区别，都是两对差分线，一收一发，所以很多时候二者是同时支持，可以切换的。例如 &lt;a href=&#34;https://www.fs.com/products/177936.html?attribute=44906&amp;amp;id=1109184&#34;&gt;Cisco Compatible 10/100/1000BASE-T SFP SGMII Copper RJ-45 100m Industrial Transceiver Module (LOS)&lt;/a&gt; 就是在 SFP 上走 SGMII 协议。&lt;/p&gt;
&lt;p&gt;推荐阅读 &lt;a href=&#34;https://ww1.microchip.com/downloads/en/Appnotes/VPPD-01080.pdf&#34;&gt;Designing a Copper SFP using the VSC8221 10/100/1000BASE-T PHY&lt;/a&gt;，它里面讲了如何将 VSC8221 芯片用于电口模块：VSC8221 芯片一头是 1000BASEX（又称 802.3z SerDes，802.3z 就是 1000BASE-X）或者 SGMII，另一头是 1000BASE-T MDI。&lt;/p&gt;
&lt;h2 id=&#34;物理层&#34;&gt;物理层&lt;/h2&gt;
&lt;h3 id=&#34;100base-tx&#34;&gt;100BASE-TX&lt;/h3&gt;
&lt;p&gt;在 IEEE 802.3 的 Clause 24 和 25 中定义。&lt;/p&gt;
&lt;p&gt;100BASE-TX 的物理层分为 PCS，PMA，PMD。与 MAC 的连接是 MII 接口，MII 频率是 25MHz，每周期传输 4 bit 的数据。然后 PCS 负责把 4 bit 的数据通过 4B/5B 转换为 5 bit 的 code group；PMA 使用 NRZI 进行编码；PMD 层借用了 FDDI 协议的 PMD 层，只使用 MDI 的 1-3 和 6 四根线传输，两对差分对，一收一发。&lt;/p&gt;
&lt;h3 id=&#34;1000base-t&#34;&gt;1000BASE-T&lt;/h3&gt;
&lt;p&gt;在 IEEE 802.3ab-1999 中定义，具体位置是 Clause 40。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/1000baset.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;物理层往上通过 GMII 连接 MAC，往下通过 MDI 连接其他网络设备。物理层又包括 PCS 和 PMA。&lt;/p&gt;
&lt;p&gt;1000BASE-T 使用四对差分线，每对差分线上都是全双工传输，波特率 125Mbaud，symbol 的范围是 &lt;code&gt;{2, 1, 0, -1, -2}&lt;/code&gt;，通过 PAM5 传输。&lt;/p&gt;
&lt;p&gt;具体来讲，PCS 从 MAC 的 GMII 接口接收要发送的数据，GMII 是 125MHz，每个周期 8 位数据。这些数据与 scrambler 一起，生成 9 位的 &lt;code&gt;Sd_n[8:0]&lt;/code&gt;，然后再编码为 &lt;code&gt;(TA_n, TB_n, TC_n, TD_n)&lt;/code&gt;，也就是在四对差分线上传输的 symbol，取值范围是 &lt;code&gt;[-2, 2]&lt;/code&gt;。简单总结一下，就是每个周期 8 位数据，先变成 9 位数据，再变成 4 个 symbol，每个 symbol 取值范围是 -2 到 2，这就叫做 8B1Q4，&lt;code&gt;converting GMII data (8B-8 bits) to four quinary symbols (Q4) that are transmitted during one clock (1Q4)&lt;/code&gt;，把 8 位的数据转换为四个 symbol，每个 symbol 有五种取值（Quinary 表示 5）。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rust 在 M1 上的 Code Signing 问题和临时解决方法</title>
      <link>https://jia.je/programming/2020/12/04/workaround-rust-on-m1/</link>
      <pubDate>Fri, 04 Dec 2020 09:27:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2020/12/04/workaround-rust-on-m1/</guid>
      <description>&lt;p&gt;不久前，rust 添加了 Tier2 的 aarch64-apple-darwin 的支持，试了一下，确实可以运行，不过当我编译的时候，出现：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;error: failed to run custom build command for `xxxx v1.0 (/path/to/xxxx)`

Caused by:
  process didn&amp;#39;t exit successfully: `/path/to/xxx/target/debug/build/xxx-xxxx/build-script-build` (signal: 9, SIGKILL: kill)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看了一下 Console.app 里面的 crash 日志，发现是 codesigning 问题。解决方法是，用 codesign 命令来签名：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# for build.rs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;codesign -s - target/debug/build/*/build-script-build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# for dylib of some crates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;codesign -s - target/debug/deps/*.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# for final executable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;codesign -s - target/debug/xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多次编译并签名后，就可以正常运行最后的二进制了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target/debug/xxxx: Mach-O 64-bit executable arm64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以了。等待上游添加 code signing 支持吧。&lt;/p&gt;
&lt;p&gt;2020-12-07 更新：找了找 cargo 的 issues，找到了&lt;a href=&#34;https://github.com/rust-lang/cargo/issues/8913&#34;&gt;同样的问题&lt;/a&gt;，看来并不是 code signing 支持的问题，而是在 Intel 的 Alacritty 下面，运行 Apple 的 rustc 工具链的时候，才会出现的 BUG。我也自己试了一下，在 Apple 的 Terminal 下跑编译就没有问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ARM M1 MacBook Air 开箱</title>
      <link>https://jia.je/hardware/2020/11/19/arm-m1-macbookair/</link>
      <pubDate>Thu, 19 Nov 2020 18:35:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/11/19/arm-m1-macbookair/</guid>
      <description>&lt;h2 id=&#34;购买&#34;&gt;购买&lt;/h2&gt;
&lt;p&gt;我是 11.12 的时候在 Apple Store 上下单的，选的是 MacBookAir，带 M1 芯片，8 核 CPU + 8 核 GPU，加了一些内存和硬盘。今天（11.19）的时候顺丰到货，比 Apple Store 上显示的预计到达时间 21-28 号要更早。另外，我也听朋友说现在一些线下的店也有货，也有朋友直接在京东上买到了 Mac mini，总之第一波 M1 的用户最近应该都可以拿到设备了。&lt;/p&gt;
&lt;p&gt;现在这篇博客，就是在 ARM MBA 上编写的，使用的是 Intel 的 VSCode，毕竟 VSCode 的 ARM64 版不久后才正式发布。&lt;/p&gt;
&lt;h2 id=&#34;开箱&#34;&gt;开箱&lt;/h2&gt;
&lt;p&gt;从外观来看，一切都和 Intel MBA 一样，包装上也看不出区别，模具也是一样的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/arm_mac_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;进了系统才能看得出区别。预装的系统是 macOS Big Sur 11.0，之后手动更新到了目前最新的 11.0.1。&lt;/p&gt;
&lt;p&gt;顺带 &lt;a href=&#34;https://github.com/FactorialN&#34;&gt;@FactorialN&lt;/a&gt; 同学提醒我在这里提一句：包装里有电源适配器，不太环保。&lt;/p&gt;
&lt;h2 id=&#34;体验&#34;&gt;体验&lt;/h2&gt;
&lt;h3 id=&#34;arm64&#34;&gt;ARM64&lt;/h3&gt;
&lt;p&gt;首先自然是传统艺能，证明一下确实是 Apple Silicon：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ uname -a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Darwin macbookair.lan 20.1.0 Darwin Kernel Version 20.1.0: Sat Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 00:07:10 PDT 2020; root:xnu-7195.50.7~2/RELEASE_ARM64_T8101 x86_64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;啊对不起我用错了，上面是在 Rosetta 里面跑的 shell 看到的结果。实际是这样子的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ uname -a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Darwin macbookair.lan 20.1.0 Darwin Kernel Version 20.1.0: Sat Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 00:07:10 PDT 2020; root:xnu-7195.50.7~2/RELEASE_ARM64_T8101 arm64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;货真价实的 ARM64 内核，系统的很多 binary 也都是 Universal 的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ file /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/bash: Mach-O universal binary with &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; architectures: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;x86_64:Mach-O 64-bit executable x86_64&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;arm64e:Mach-O 64-bit executable arm64e&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/bash &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; architecture x86_64&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:	Mach-O 64-bit executable x86_64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/bash &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; architecture arm64e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:	Mach-O 64-bit executable arm64e
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;rosetta&#34;&gt;Rosetta&lt;/h3&gt;
&lt;p&gt;接着，就是重头戏 Rosetta 了。第一次打开 Intel 的程序的时候，会弹出窗口安装 Rosetta，确定以后立马就装好了。接着常用的各种软件啥的，都没有什么问题。&lt;/p&gt;
&lt;p&gt;唯一能看出区别的，就是在 Activity Monitor 可以看到架构的区别：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/arm_mac_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;实际体验的时候，其实没有什么感觉。默认情况下，在 Terminal 下打开的是 ARM64 架构的，如果要切换的话，只需要：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ uname -m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arm64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ arch -arch x86_64 uname -m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x86_64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以了。如果开了一个 x86_64 的 shell，在 shell 里面执行的命令就都是 x86_64 架构的了。&lt;/p&gt;
&lt;h3 id=&#34;homebrew&#34;&gt;Homebrew&lt;/h3&gt;
&lt;p&gt;目前，Homebrew 的支持是这样子的，Intel 的 Homebrew 工作很正常，没有遇到任何问题。。ARM 的 Homebrew 目前还在进行移植，由于官方的 build farm 还没有支持 ARM，所以各种包都需要自己编译，试了几个常用的软件都没问题。&lt;/p&gt;
&lt;p&gt;目前 Homebrew 推荐的方法是，在老地方 &lt;code&gt;/usr/local/Homebrew&lt;/code&gt; 下面放 Intel 的 Homebrew，在 &lt;code&gt;/opt/homebrew&lt;/code&gt; 下面放 ARM 的 Homebrew。虽然还是有很多警告，但目前来看基本使用都没有什么问题。Homebrew cask 也正常，毕竟基本就是一个下载器。&lt;/p&gt;
&lt;p&gt;另外，试了一下用 ARM Homebrew 从源码编译 GCC，编译中途失败了。&lt;/p&gt;
&lt;h3 id=&#34;其他软件&#34;&gt;其他软件&lt;/h3&gt;
&lt;p&gt;换到 ARM 上自然会想到，之前的那些软件还能不能跑。答案是，大多都可以，只是很多还是 Intel 版走翻译而已。&lt;/p&gt;
&lt;p&gt;目前已经测试过正常使用的：VSCode、Google Chrome、Alacrity、iStat Menus、Alfred、Rectangle、Typora、Microsoft Office、Karabiner Elements、Jetbrains Toolbox、WeChat、CineBench、Dozer、Squirrel、Zoom、Tencent Meeting、Seafile、Skim、Mendeley、1 Password、Wireshark、Slack、iMazing、Office for Mac。&lt;/p&gt;
&lt;p&gt;这些里面已经移植到 ARM64 的有 Alfred、iStat Menus、Karabiner Elements、Rectangle、Google Chrome、Slack、Typora、iMazing、Office for Mac、Zoom、VSCode Insiders。&lt;/p&gt;
&lt;p&gt;这里有一部分是已经移植到 ARM64 的，有一些也很快就会移植过来。其中 iStat Menus 的电池健康显示有点 BUG，其他没发现问题（更新：已修复）。&lt;/p&gt;
&lt;p&gt;另外，大家也知道 ARM Mac 很重要的一点是可以跑 iOS Apps，我们也确实跑了一些，不过都有一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Doodle Jump：跑起来很正常，就是卡关了，别问为什么，没有加速度计，再怎么晃电脑也不会动&lt;/li&gt;
&lt;li&gt;Bilibili：部分内容可以加载出来，部分不可以，估计是什么组件没有配置好&lt;/li&gt;
&lt;li&gt;QQ Music：可以跑起来，但是在启动之后的引导页面，期望用户点一下屏幕，但怎么用鼠标点都没反应&lt;/li&gt;
&lt;li&gt;Weibo：毕竟正常，可以正常浏览啥都，就是 UI 有点错位，估计是因为显示窗口和实际都不大一样，小问题。&lt;/li&gt;
&lt;li&gt;Network Tools：很正常，各种网络信息都可以正常取出来。&lt;/li&gt;
&lt;li&gt;NFSee：没有 NFC 读卡功能，自然没法用。&lt;/li&gt;
&lt;li&gt;彩云天气（ColorfulClouds Weather）：正常使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他还有很多 App 还没有测试。&lt;/p&gt;
&lt;h3 id=&#34;发热&#34;&gt;发热&lt;/h3&gt;
&lt;p&gt;大家也知道，这款 MBA 是没有风扇的。但我实际测试的过程中发现，确实不大需要。拿 stress 跑了一段时间 CPU 满载运行，也没感觉到电脑发热，只是在更新 macOS Big Sur 11.0.1 的时候稍微热了一点点，也只是一点点，距离烫手还有很长的距离。&lt;/p&gt;
&lt;p&gt;续航方面目前来看也挺好的，捣鼓了一个下午，也没耗多少电。&lt;/p&gt;
&lt;h3 id=&#34;性能测试&#34;&gt;性能测试&lt;/h3&gt;
&lt;p&gt;在不同平台上进行 OpenSSL 测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openssl speed -evp aes-128-cbc aes-256-cbc des-ede3 rsa2048 sha256
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# M1 MacBookAir&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OpenSSL 1.1.1j  &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;built on: Wed Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 12:34:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt; UTC
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;options:bn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;64,64&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; rc4&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; des&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; aes&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;partial&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; idea&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; blowfish&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ptr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compiler: clang -fPIC -arch arm64 -O3 -Wall -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_BN_ASM_MONT -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DVPAES_ASM -DECP_NISTZ256_ASM -DPOLY1305_ASM -D_REENTRANT -DNDEBUG
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;numbers&amp;#39;&lt;/span&gt; are in 1000s of bytes per second processed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type             &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; bytes     &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; bytes    &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; bytes   &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; bytes   &lt;span style=&#34;color:#ae81ff&#34;&gt;8192&lt;/span&gt; bytes  &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; bytes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;des ede3         30466.76k    30644.63k    30592.26k    30106.97k    29961.69k    29951.49k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aes-256 cbc     229863.42k   238671.82k   232654.34k   237194.70k   238092.29k   237791.91k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aes-128-cbc    1020384.58k  1427866.73k  1521123.84k  1558199.30k  1569978.99k  1566288.55k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sha256          378646.12k  1140355.52k  1894169.69k  2287211.18k  2445602.42k  2453209.09k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  sign    verify    sign/s verify/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsa &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; bits 0.000561s 0.000014s   1782.0  69645.9
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# AMD EPYC 7742&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OpenSSL 1.1.1d  &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;built on: Mon Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; 20:44:45 &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt; UTC
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;options:bn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;64,64&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; rc4&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;8x,int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; des&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; aes&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;partial&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; blowfish&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ptr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compiler: gcc -fPIC -pthread -m64 -Wa,--noexecstack -Wall -Wa,--noexecstack -g -O2 -fdebug-prefix-map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/build/openssl-CKx7Fo/openssl-1.1.1d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;. -fstack-protector-strong -Wformat -Werror&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;format-security -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DNDEBUG -Wdate-time -D_FORTIFY_SOURCE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;numbers&amp;#39;&lt;/span&gt; are in 1000s of bytes per second processed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type             &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; bytes     &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; bytes    &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; bytes   &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; bytes   &lt;span style=&#34;color:#ae81ff&#34;&gt;8192&lt;/span&gt; bytes  &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; bytes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;des ede3         28734.07k    28942.08k    28982.78k    29217.91k    29136.21k    29103.45k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aes-256 cbc     176843.84k   183040.83k   183156.82k   184132.61k   184464.73k   184642.22k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aes-128-cbc     602680.15k  1178207.32k  1239931.82k  1251810.30k  1258359.47k  1261316.78k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sha256          201482.20k   513504.00k  1075572.14k  1474850.82k  1648746.50k  1663030.61k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  sign    verify    sign/s verify/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsa &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; bits 0.000620s 0.000018s   1613.7  54756.4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# AMD EPYC 7282&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OpenSSL 1.1.1d  &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;built on: Mon Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; 20:23:01 &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt; UTC
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;options:bn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;64,64&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; rc4&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;8x,int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; des&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; aes&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;partial&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; blowfish&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ptr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compiler: gcc -fPIC -pthread -m64 -Wa,--noexecstack -Wall -Wa,--noexecstack -g -O2 -fdebug-prefix-map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/build/openssl-8Ocme2/openssl-1.1.1d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;. -fstack-protector-strong -Wformat -Werror&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;format-security -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DNDEBUG -Wdate-time -D_FORTIFY_SOURCE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;numbers&amp;#39;&lt;/span&gt; are in 1000s of bytes per second processed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type             &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; bytes     &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; bytes    &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; bytes   &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; bytes   &lt;span style=&#34;color:#ae81ff&#34;&gt;8192&lt;/span&gt; bytes  &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; bytes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;des ede3         27052.31k    27392.85k    27455.57k    27569.49k    27503.27k    27514.20k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aes-256 cbc     158578.10k   168502.21k   172365.91k   173904.90k   174391.30k   174429.53k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aes-128-cbc     594506.35k  1111762.07k  1169014.02k  1184384.00k  1192793.56k  1189167.10k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sha256          194382.61k   487875.93k  1017121.56k  1390122.33k  1558735.53k  1572274.18k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  sign    verify    sign/s verify/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsa &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; bits 0.000655s 0.000019s   1526.8  52089.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# AMD EPYC 7551&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OpenSSL 1.1.1d  &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;built on: Tue Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 22:08:43 &lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt; UTC
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;options:bn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;64,64&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; rc4&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;8x,int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; des&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; aes&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;partial&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; blowfish&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ptr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compiler: gcc -fPIC -pthread -m64 -Wa,--noexecstack -Wall -Wa,--noexecstack -g -O2 -fdebug-prefix-map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/build/openssl-m9Qnvk/openssl-1.1.1d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;. -fstack-protector-strong -Wformat -Werror&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;format-security -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DNDEBUG -Wdate-time -D_FORTIFY_SOURCE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;numbers&amp;#39;&lt;/span&gt; are in 1000s of bytes per second processed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type             &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; bytes     &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; bytes    &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; bytes   &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; bytes   &lt;span style=&#34;color:#ae81ff&#34;&gt;8192&lt;/span&gt; bytes  &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; bytes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;des ede3         20850.88k    21260.78k    21315.84k    21368.49k    21321.05k    21392.04k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aes-256 cbc     122059.94k   125701.42k   126591.06k   126770.52k   127049.73k   126937.77k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aes-128-cbc     441625.34k   883733.48k   928208.21k   941480.96k   944889.86k   945307.65k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sha256          151161.13k   388304.60k   809272.15k  1106645.33k  1238966.27k  1249219.93k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  sign    verify    sign/s verify/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsa &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; bits 0.001096s 0.000033s    912.8  30284.7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Intel Xeon E5-2699 v4 (Broadwell)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OpenSSL 1.0.2u  &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;built on: reproducible build, date unspecified
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;options:bn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;64,64&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; rc4&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;16x,int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; des&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;idx,cisc,16,int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; aes&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;partial&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; idea&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; blowfish&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;idx&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compiler: gcc -I. -I.. -I../include  -fPIC -DOPENSSL_PIC -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -Wa,--noexecstack -m64 -DL_ENDIAN -O3 -Wall -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DRC4_ASM -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DWHIRLPOOL_ASM -DGHASH_ASM -DECP_NISTZ256_ASM
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;numbers&amp;#39;&lt;/span&gt; are in 1000s of bytes per second processed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type             &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; bytes     &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; bytes    &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; bytes   &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; bytes   &lt;span style=&#34;color:#ae81ff&#34;&gt;8192&lt;/span&gt; bytes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;des ede3         29863.80k    30156.69k    30243.07k    30237.70k    30302.21k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aes-256 cbc     103491.45k   110240.94k   112029.95k   112400.38k   112833.88k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aes-128-cbc     734225.68k   788483.88k   802857.39k   805860.69k   807848.62k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sha256           82720.89k   184528.45k   342888.28k   425826.30k   457149.10k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  sign    verify    sign/s verify/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsa &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; bits 0.000573s 0.000017s   1745.5  60236.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Intel Xeon E5-2680 v4 (Broadwell) TODO&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Intel Xeon Gold 5218 (Cascade Lake) TODO&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# IBM POWER8NVL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OpenSSL 1.1.1  &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;built on: Wed Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 12:35:54 &lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt; UTC
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;options:bn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;64,64&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; rc4&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;char&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; des&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; aes&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;partial&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; blowfish&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ptr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compiler: gcc -fPIC -pthread -m64 -Wa,--noexecstack -Wall -Wa,--noexecstack -g -O3 -fdebug-prefix-map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/build/openssl-avwOZX/openssl-1.1.1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;. -fstack-protector-strong -Wformat -Werror&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;format-security -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_BN_ASM_MONT -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DAES_ASM -DVPAES_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DNDEBUG -Wdate-time -D_FORTIFY_SOURCE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;numbers&amp;#39;&lt;/span&gt; are in 1000s of bytes per second processed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type             &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; bytes     &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; bytes    &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; bytes   &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; bytes   &lt;span style=&#34;color:#ae81ff&#34;&gt;8192&lt;/span&gt; bytes  &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; bytes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;des ede3         25120.65k    25479.70k    25570.13k    25604.10k    25616.38k    25613.65k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aes-256 cbc      79140.44k    82350.23k    83815.94k    84183.72k    84290.22k    84306.60k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aes-128-cbc     310027.28k   647168.64k   890896.81k   984001.19k  1014827.69k  1017096.87k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sha256           58347.98k   151006.68k   286465.28k   373490.69k   411044.52k   414012.76k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  sign    verify    sign/s verify/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsa &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; bits 0.001442s 0.000040s    693.5  25212.7
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;总的来说，还是挺香的。不错的性能，没有风扇的喧闹，没有烫手的键盘。可能有少部分软件还不能正常运行，然后很多程序还需要 Rosetta 翻译，但目前来看兼容性还是挺不错的，并且这些应该明年就都适配地差不多了吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 Spack 中用 external 的 Slurm 依赖编译 OpenMPI</title>
      <link>https://jia.je/software/2020/11/08/spack-openmpi-slurm-external/</link>
      <pubDate>Sun, 08 Nov 2020 00:51:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2020/11/08/spack-openmpi-slurm-external/</guid>
      <description>&lt;p&gt;最近在一个集群上，需要用一个自己编译的 openmpi，但并没有 root 权限，所以需要自己搞一个 spack，在 spack 里面装 openmpi。但默认的安装选项下，它没有打开 slurm 支持，所以 srun 的话会出问题，只能 sbatch 然后指定 host 去做。于是我研究了一下怎么在 spack 里引入 external 的 slurm，然后用它来编译 openmpi&lt;/p&gt;
&lt;p&gt;首先，编译 &lt;code&gt;~/.spack/packages.yaml&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;packages&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;slurm&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;buildable&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;slurm@15-08-7-1%gcc@8.3.0 arch=linux-ubuntu16.04-haswell&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;/usr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里 slurm 版本是 &lt;code&gt;15.08.7&lt;/code&gt;，我就按照 spack 里面 slurm 的版本号来写了。可以用 &lt;code&gt;spack spec openmpi schedulers=slurm +pmi&lt;/code&gt; 来确认一下外部的 slurm 确实出现在了依赖之中。&lt;/p&gt;
&lt;p&gt;这一步配好的话，安装的时候就会直接跳过 spack 里面 slurm 的安装。但又出现了 configure 错误，找不到 pmi 的库。于是，先用 external 的 mpirun 看一下配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ module load openmpi-3.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ompi_info
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--with-pmi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--with-pmi-libdir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/lib/x86_64-linux-gnu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，需要两个 config 参数。然后，在 spack 的 openmpi package.py 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; spec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;satisfies(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;schedulers=slurm&amp;#39;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  config_args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--with-pmi=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{0}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(spec[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;slurm&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;prefix))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; spec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;satisfies(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@3.1.3:&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; spec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;satisfies(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@3.0.3&amp;#39;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+static&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; spec:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      config_args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--enable-static&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以，需要加一个小 patch：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; spec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;satisfies(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;schedulers=slurm&amp;#39;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  config_args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--with-pmi=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{0}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(spec[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;slurm&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;prefix))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# patched here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  config_args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--with-pmi-libdir=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{0}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/x86_64-linux-gnu&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(spec[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;slurm&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;prefix))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; spec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;satisfies(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@3.1.3:&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; spec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;satisfies(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@3.0.3&amp;#39;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+static&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; spec:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      config_args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--enable-static&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，就可以编译通过了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在裸机上部署 ESXi 和 vCSA 7</title>
      <link>https://jia.je/devops/2020/10/18/deploy-esxi-vcsa-7/</link>
      <pubDate>Sun, 18 Oct 2020 00:08:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/10/18/deploy-esxi-vcsa-7/</guid>
      <description>&lt;p&gt;之前在另一篇文章里提到过 vCSA 的安装，这次又在另一台机器上重新做了一遍，特此记录一下。&lt;/p&gt;
&lt;p&gt;首先在官网上下载 &lt;a href=&#34;https://my.vmware.com/group/vmware/evalcenter?p=vsphere-eval-7&#34;&gt;ESXi+VCSA 7.0&lt;/a&gt; ，应该得到两个文件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;7.9G VMware-VCSA-all-7.0.1-16860138.iso
358M VMware-VMvisor-Installer-7.0U1-16850804.x86_64.iso
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先安装 ESXi，用 UNetBootin 制作 ESXi 的安装光盘。注意不能用 dd，因为它是 CDFS 格式的，不能直接 boot。启动以后，按照界面要求，一路安装即可。&lt;/p&gt;
&lt;p&gt;接着，就可以用网页访问 ESXi 进行配置。比如安装一些 Linux 发行版，然后在 Linux 虚拟机里面 mount 上面的 VCSA 的 iso：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mount /dev/sr0 /mnt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着，复制并修改 &lt;code&gt;/mnt/vcsa-cli-installer/templates/install/embedded_vCSA_on_ESi.json&lt;/code&gt;，按照代码注释进行修改。需要注意几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;密码都可以设为空，然后运行 cli 的时候输入&lt;/li&gt;
&lt;li&gt;ESXi 的密码和 vCSA 的密码是不一样的&lt;/li&gt;
&lt;li&gt;可以把 ceip 关掉，设置 ceip_enabled: false&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接着，进行安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/mnt/vcsa-cli-installer/lin64/vcsa-deploy install --accept-eula /path/to/customized.json -v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;慢慢等待它安装成功即可。&lt;/p&gt;
&lt;p&gt;安装完成后，进入 vCSA，新建一个 Datacenter，然后选择新建的 Datacenter，选择 Add host，输入 ESXi 的地址和用户密码信息即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IBM Power S822LC(8335-GTB) BMC 升级</title>
      <link>https://jia.je/system/2020/10/09/upgrade-power8-bmc/</link>
      <pubDate>Fri, 09 Oct 2020 08:16:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2020/10/09/upgrade-power8-bmc/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近拿到一台 IBM Power S822LC（8335-GTB）机器的访问权限，这也是我第一次碰 ppc64le 指令集的服务器。然后发现，它的 BMC 版本比较老，我想连接 Remote Control 失败了，原因是 JViewer 不支持 macOS，我就想着能不能升级一下。&lt;/p&gt;
&lt;h2 id=&#34;升级过程&#34;&gt;升级过程&lt;/h2&gt;
&lt;p&gt;首先，在网上找了一下文档，首先用 ipmitool 找一下机器型号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo ipmitool fru print &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Chassis Type          : Unknown
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Chassis Part Number   : 8335-GTB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Chassis Serial        : REDACTED
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，这台机器是 8335-GTB 型号，按照这个型号在 &lt;a href=&#34;https://www.ibm.com/support/fixcentral&#34;&gt;Fix Central&lt;/a&gt; 上搜索，可以找到若干个版本的 firmware，其中最老的版本是 &lt;code&gt;OP8_v1.11_2.1&lt;/code&gt;，对比了一下，和原来的版本一致：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo ipmitool fru print &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Name          : OpenPOWER Firmware
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Version       : IBM-garrison-ibm-OP8_v1.11_2.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        op-build-da02863
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        buildroot-81b8d98
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        skiboot-5.3.6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        hostboot-1f6784d-3408af7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        linux-4.4.16-openpower1-bc83f92
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        petitboot-v1.2.4-de6cda2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        garrison-xml-3db7b6e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        occ-69fb587
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        hostboot-binar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是，我下载了比较新的版本，一个 hpm 文件，然后在 BMC 网页上进行升级。第一次升级比较保守，选择了 2017 年的版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo ipmitool fru print &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Product Name          : OpenPOWER Firmware
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Version       : IBM-garrison-ibm-OP8_v1.12_2.72
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        op-build-14a75d0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        buildroot-211bd05
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        skiboot-5.4.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        hostboot-2eb7706-69b1432
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        linux-4.4.30-openpower1-084eb48
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        petitboot-v1.3.2-d709207
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        garrison-xml-19a5164
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        occ-d7efe30-47b58cb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        hostb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这次升级比较顺利，没有遇到什么障碍。但是我发现，BMC 里面显示的 BIOS 版本和 hpm 对不上，它总是认为 BIOS 版本是落后的，需要更新，而 Firmware 部分（BOOT 和 APP）是更新后的版本。但 BIOS 版本和原来的版本也不一样。于是我重新升级了几次，都没有效果，怀疑是升级出了问题。后来仔细读文档才发现，确实是 BMC 软件的问题（&lt;a href=&#34;https://ak-delivery04-mul.dhe.ibm.com/sar/CMA/SFA/08cu1/0/8335GTB_820.1923.20190613n.xhtml&#34;&gt;文档&lt;/a&gt;）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Note: BMC Dashboard shows an incorrect level for the BIOS caused by improper translation of the level subfields. The Bios number should reflect the PNOR level for the system of &amp;#34;IBM-garrison-ibm-OP8_v1.11_2.19&amp;#34;. In this case, the BIOS version should be 1.11_2.19 but shows as 1.17.19 instead with the &amp;#34;11_2&amp;#34; converted into the &amp;#34;17&amp;#34;.

The Firmware Revision for the BMC firmware shows correctly as &amp;#34;2.13.58&amp;#34;.

Here is an example output of the Dashboard with an errant BIOS Version:

Dashboard gives the overall information about the status of the device and remote server.

Device Information

Firmware Revision: 2.13.58

Firmware Build Time: Oct 26 2016 11:40:55 CDT

BIOS Version: 1.17.19
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一番捣鼓之后，不知道怎么了，BMC 就挂了，怎么访问都不通。只好物理断电，重新来过。按照同样的方法，升级到了 2019 年的版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Name          : OpenPOWER Firmware
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Version       : IBM-garrison-OP8_v1.12_2.96
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        op-build-v2.3-7-g99a6bc8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        buildroot-2019.02.1-16-ge01dcd0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        skiboot-v6.3.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        hostboot-p8-c893515-pd6f049d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        occ-p8-a2856b7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        linux-5.0.7-openpower1-p8e31f00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        petitboot-v1.10.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Product Extra         :        machine-xml-c5c3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;中途也遇到了几次奇怪的问题，多次通过 IPMI reset 之后就好了。&lt;/p&gt;
&lt;h2 id=&#34;远程访问&#34;&gt;远程访问&lt;/h2&gt;
&lt;p&gt;但是，最新版的 BMC 固件中，JViewer 依然没有 macOS 支持。我也 SSH 进去确认了一下，确实没有对应的支持文件。只好在 Linux 机器上访问，安装 icedtea 以后，就可以打开 jnlp 文件，之后一切都很正常。&lt;/p&gt;
&lt;p&gt;一个可能的替代方案：https://github.com/sciapp/nojava-ipmi-kvm&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 arm64 上使用 rust-analyzer</title>
      <link>https://jia.je/programming/2020/09/13/aarch64-rust-analyzer/</link>
      <pubDate>Sun, 13 Sep 2020 16:34:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2020/09/13/aarch64-rust-analyzer/</guid>
      <description>&lt;p&gt;远程到 arm64 的机器上进行开发，发现没有 rust-analyzer 的支持。研究了一下，发现在 rustup 里面可以找到，不过要配置一下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; rustup toolchain add nightly
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; rustup component add --toolchain nightly rust-analyzer-preview
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个时候，应该可以找到 &lt;code&gt;~/.rustup/toolchains/nightly-aarch64-unknown-linux-gnu/bin/rust-analyzer&lt;/code&gt; 文件，接下来，配置 VSCode 插件即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;rust-analyzer.serverPath&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/.rustup/toolchains/nightly-aarch64-unknown-linux-gnu/bin/rust-analyzer&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;路径在 &lt;code&gt;~/.vscode-server/data/Machine/settings.json&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;参考：https://github.com/rust-analyzer/rust-analyzer/issues/5256&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 Rpi4 上运行 buildroot</title>
      <link>https://jia.je/devops/2020/09/12/buildroot-rpi-pxe/</link>
      <pubDate>Sat, 12 Sep 2020 08:21:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/09/12/buildroot-rpi-pxe/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;需要给 rpi 配置一个 pxe 的最小环境，在上一篇博文了提到可以用 alpine，但发现有一些不好用的地方，所以试了试 buildroot。&lt;/p&gt;
&lt;h2 id=&#34;pxe-设置和路由器设置&#34;&gt;PXE 设置和路由器设置&lt;/h2&gt;
&lt;p&gt;见“在 Rpi4 上运行 Alpine Linux”文章。&lt;/p&gt;
&lt;h2 id=&#34;buildroot-配置&#34;&gt;Buildroot 配置&lt;/h2&gt;
&lt;p&gt;下载 buildroot：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; wget https://buildroot.org/downloads/buildroot-2020.08.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; unar buildroot-2020.08.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; cd buildroot-2020.08
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; make raspberrypi4_64_defconfig
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后运行 &lt;code&gt;make menuconfig&lt;/code&gt; ，在 &lt;code&gt;Filesystem images&lt;/code&gt; 中打开 initramfs，并设置 cpio 压缩为 gz。然后直接编译：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; make -j4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls -al target/images
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bcm2711-rpi-4-b.dtb*  boot.vfat  Image  rootfs.cpio  rootfs.cpio.gz  rootfs.ext2  rootfs.ext4@  rpi-firmware/  sdcard.img
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着，在一个单独的目录里，把这些文件整理一下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; cd ~/rpi-buildroot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; cp -r ~/buildroot-2020.08/output/images/rpi-firmware/* .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; cp ~/buildroot-2020.08/output/images/bcm2711-rpi-4-b.dtb .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; cp ~/buildroot-2020.08/output/images/Image .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; cp ~/buildroot-2020.08/output/images/rootfs.cpio.gz .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;# edit cmdline.txt: remove root= and rootwait&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;# edit config.txt: uncomment initramfs rootfs.cpio.gz line&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ls&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bcm2711-rpi-4-b.dtb*  cmdline.txt  config.txt  fixup.dat  Image  overlays/  rootfs.cpio.gz  start.elf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后开启 TFTP 服务器即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; sudo python3 -m py3tftp -p &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;树莓派启动&#34;&gt;树莓派启动&lt;/h2&gt;
&lt;p&gt;连接树莓派的串口，用 115200 Baudrate 打开，可以看到启动信息：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PM_RSTS: 0x00001000
RPi: BOOTLOADER release VERSION:a5e1b95f DATE: Apr 16 2020 TIME: 18:11:29 BOOTMODE: 0x00000006 part: 0 BUILD_TIMESTAMP=1587057086 0xa049cc2f 0x00c03111
uSD voltage 3.3V
... 
Welcome to Buildroot
buildroot login: root
#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认用户是 root，没有密码。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 rpi4 上用 PXE 运行 Alpine Linux</title>
      <link>https://jia.je/devops/2020/09/11/alpine-rpi-pxe/</link>
      <pubDate>Fri, 11 Sep 2020 23:42:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/09/11/alpine-rpi-pxe/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;需要给 rpi 配置一个 pxe 的最小环境，然后看到 alpine 有 rpi 的支持，所以尝试给 rpi4 配置 alpine。&lt;/p&gt;
&lt;h2 id=&#34;pxe-设置&#34;&gt;PXE 设置&lt;/h2&gt;
&lt;p&gt;第一步是设置 rpi4 的启动模式，打开 BOOT UART 并且打开 网络启动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; cd /lib/firmware/raspberrypi/bootloader/critical
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; rpi-eeprom-config pieeprom-2021-04-29.bin &amp;gt; config.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat config.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;all&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BOOT_UART&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WAKE_ON_GPIO&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;POWER_OFF_ON_HALT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DHCP_TIMEOUT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DHCP_REQ_TIMEOUT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TFTP_FILE_TIMEOUT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TFTP_IP&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TFTP_PREFIX&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BOOT_ORDER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SD_BOOT_MAX_RETRIES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NET_BOOT_MAX_RETRIES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FREEZE_VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/BOOT_UART=0/BOOT_UART=1/;s/BOOT_ORDER=0x1/BOOR_ORDER=0x12/&amp;#39;&lt;/span&gt; config.txt &amp;gt; config-pxe.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; rpi-eeprom-config --out pieeprom-2021-04-29-pxe.bin --config config-pxe.txt pieeprom-2021-04-29.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; rpi-eeprom-update -d -f pieeprom-2021-04-29-pxe.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; reboot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重启以后，可以用 &lt;code&gt;vcgencmd bootloader_config&lt;/code&gt; 查看当前的启动配置，看是否正确地更新了启动配置。比较重要的是 BOOT_ORDER，&lt;code&gt;0x12&lt;/code&gt; 表示先尝试网络启动，再尝试 SD 卡启动。&lt;/p&gt;
&lt;h2 id=&#34;路由器配置&#34;&gt;路由器配置&lt;/h2&gt;
&lt;p&gt;第二步，需要配置路由器，以 OpenWrt 为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; uci add_list dhcp.lan.dhcp_option&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;66,ip_address_of_tftp_server&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; uci commit dhcp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; /etc/init.d/dnsmasq restart
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat /etc/config/dhcp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config dhcp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lan&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    list dhcp_option &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;66,ip_address_of_tftp_server&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就配置完毕了。如果是 isc-dhcp-server，修改 &lt;code&gt;/etc/dhcp/dhcpd.conf&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;subnet 10.0.1.0 netmask 255.255.255.0 {
    range 10.0.1.100 10.0.1.199;
    option routers 10.0.1.1;
    option tftp-server-name &amp;#34;10.0.1.1&amp;#34;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;tftp-服务器配置&#34;&gt;TFTP 服务器配置&lt;/h2&gt;
&lt;p&gt;下载 alpine linux 的 rpi boot，解压到指定目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; wget http://mirrors.tuna.tsinghua.edu.cn/alpine/v3.12/releases/aarch64/alpine-rpi-3.12.0-aarch64.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; unar alpine-rpi-3.12.0-aarch64.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; cd alpine-rpi-3.12.0-aarch64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改 &lt;code&gt;cmdline.txt&lt;/code&gt; ，把 &lt;code&gt;console=tty1&lt;/code&gt; 改成 &lt;code&gt;console=ttyAMA0,115200&lt;/code&gt;，并且去掉 &lt;code&gt;quiet&lt;/code&gt;；修改 &lt;code&gt;usercfg.txt&lt;/code&gt; 为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dtoverlay=disable-bt
enable_uart=1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接着，启动 TFTP 服务器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; sudo python3 -m py3tftp -p &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;树莓派启动&#34;&gt;树莓派启动&lt;/h2&gt;
&lt;p&gt;连接树莓派的串口，用 115200 Baudrate 打开，可以看到启动信息：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PM_RSTS: 0x00001000
RPi: BOOTLOADER release VERSION:a5e1b95f DATE: Apr 16 2020 TIME: 18:11:29 BOOTMODE: 0x00000006 part: 0 BUILD_TIMESTAMP=1587057086 0xa049cc2f 0x00c03111
uSD voltage 3.3V
... 
initramfs emergency recovery shell launched. Type &amp;#39;exit&amp;#39; to continue boot
sh: can&amp;#39;t access tty; job control turned off
/ #
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，按照需要自定义 initramfs 即可。解压后，修改文件，然后运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; find . -print0 | cpio --null -ov --format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;newc | gzip &amp;gt; ../initramfs-rpi4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把自带的 initramfs 替换掉。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用 certbot 申请 route53 上的域名的 LetsEncrypt 证书并上传到 IAM</title>
      <link>https://jia.je/devops/2020/08/12/certbot-route53-letsencrypt-iam/</link>
      <pubDate>Wed, 12 Aug 2020 09:46:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/08/12/certbot-route53-letsencrypt-iam/</guid>
      <description>&lt;p&gt;最近遇到了 AWS Certificate Manager 的一些限制，所以只能用 IAM 证书。于是上网找到了通过 certbot 申请 LE 证书，通过 route53 API 验证的方法。&lt;/p&gt;
&lt;p&gt;首先配置 aws 的 credential。然后，按照 certbot：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip3 install -U certbot certbot_dns_route53
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，就可以申请证书了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;certbot certonly --dns-route53 --config-dir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./letsencrypt&amp;#34;&lt;/span&gt; --work-dir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./letsencrypt&amp;#34;&lt;/span&gt; --logs-dir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./letsencrypt&amp;#34;&lt;/span&gt;  -d example.com --email a@b.com --agree-tos
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果申请成功，在当前目录下可以找到证书。然后上传到 IAM：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aws iam upload-server-certificate --server-certificate-name NameHere &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --certificate-body file://letsencrypt/live/example.com/cert.pem &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --private-key file://letsencrypt/live/example.com/privkey.pem &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --certificate-chain file://letsencrypt/live/example.com/chain.pem &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --path /cloudfront/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果要用于 cloudfront，才需要最后的路径参数；否则可以去掉。这样就完成了 IAM 证书的上传。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 k8s 中部署 Prometheus</title>
      <link>https://jia.je/devops/2020/07/10/k8s-prometheus/</link>
      <pubDate>Fri, 10 Jul 2020 09:24:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/07/10/k8s-prometheus/</guid>
      <description>&lt;p&gt;实验了一下在 k8s 中部署 Prometheus，因为它和 k8s 有比较好的集成，很多 App 能在 k8s 里通过 service discovery 被 Prometheus 找到并且抓取数据。实践了一下，其实很简单。&lt;/p&gt;
&lt;p&gt;用 helm 进行配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm upgrade --install prometheus stable/prometheus
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以了，如果已经有 StorageClass（比如腾讯云的话，CBS 和 CFS），它就能自己起来了，然后在 Lens 里面也可以看到各种 metrics 的可视化。&lt;/p&gt;
&lt;p&gt;如果是自建的单结点的 k8s 集群，那么还需要自己创造 PV，并且把 PVC 绑定上去。我采用的是 local 类型的 PV：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PersistentVolume&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;pv-volume-1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;local&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;storageClassName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;manual&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;capacity&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;storage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10Gi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;accessModes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;ReadWriteOnce&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;hostPath&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/srv/k8s-data-1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PersistentVolume&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;pv-volume-2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;local&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;storageClassName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;manual&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;capacity&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;storage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10Gi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;accessModes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;ReadWriteOnce&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;hostPath&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/srv/k8s-data-2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样，结点上的两个路径分别对应两个 PV，然后只要让 PVC 也用 manual 的 StorageClass 就可以了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;persistentVolume&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;storageClass&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;manual&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;alertmanager&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;persistentVolume&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;storageClass&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;manual&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把这个文件保存为 values.yaml 然后：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm upgrade --install prometheus stable/prometheus -f values.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以了。不过 PVC 不能在线改，可能需要删掉重来。&lt;/p&gt;
&lt;p&gt;然后，由于权限问题，还需要在结点上修改一下两个目录的权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chown -R 65534:65534 /srv/k8s-data-1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chown -R 65534:65534 /srv/k8s-data-2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样容器内就可以正常访问了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>各种 ecc 曲线</title>
      <link>https://jia.je/crypto/2020/05/21/ecc-curves/</link>
      <pubDate>Thu, 21 May 2020 20:33:00 +0800</pubDate>
      
      <guid>https://jia.je/crypto/2020/05/21/ecc-curves/</guid>
      <description>&lt;h2 id=&#34;背景知识&#34;&gt;背景知识&lt;/h2&gt;
&lt;p&gt;椭圆曲线有如下的形式：&lt;/p&gt;
&lt;p&gt;第一种：&lt;/p&gt;
&lt;p&gt;$$E: y^2 \equiv x^3 + ax + b \mod{p}$$&lt;/p&gt;
&lt;p&gt;曲线的参数共有 \((p, a, b, G, n, h)\)。\(G\) 是一个点 \((G_x, G_y)\)，\(n\) 是 \(G\) 的阶。&lt;/p&gt;
&lt;p&gt;第二种：&lt;/p&gt;
&lt;p&gt;$$E: y^2+xy=x^3+ax^2+1$$&lt;/p&gt;
&lt;p&gt;称为 Kbolitz curve。不同的曲线有不同的参数 \((m,f(x),a,b,G,n,h)\)，对应不同的 \(GF(2^m)\) 域。&lt;/p&gt;
&lt;h2 id=&#34;openssl&#34;&gt;OpenSSL&lt;/h2&gt;
&lt;p&gt;看一下 openssl 支持的曲线参数（&lt;code&gt;openssl ecparam -list_curves&lt;/code&gt;）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  secp112r1 : SECG/WTLS curve over a 112 bit prime field
  secp112r2 : SECG curve over a 112 bit prime field
  secp128r1 : SECG curve over a 128 bit prime field
  secp128r2 : SECG curve over a 128 bit prime field
  secp160k1 : SECG curve over a 160 bit prime field
  secp160r1 : SECG curve over a 160 bit prime field
  secp160r2 : SECG/WTLS curve over a 160 bit prime field
  secp192k1 : SECG curve over a 192 bit prime field
  secp224k1 : SECG curve over a 224 bit prime field
  secp224r1 : NIST/SECG curve over a 224 bit prime field
  secp256k1 : SECG curve over a 256 bit prime field
  secp384r1 : NIST/SECG curve over a 384 bit prime field
  secp521r1 : NIST/SECG curve over a 521 bit prime field
  prime192v1: NIST/X9.62/SECG curve over a 192 bit prime field
  prime192v2: X9.62 curve over a 192 bit prime field
  prime192v3: X9.62 curve over a 192 bit prime field
  prime239v1: X9.62 curve over a 239 bit prime field
  prime239v2: X9.62 curve over a 239 bit prime field
  prime239v3: X9.62 curve over a 239 bit prime field
  prime256v1: X9.62/SECG curve over a 256 bit prime field
  sect113r1 : SECG curve over a 113 bit binary field
  sect113r2 : SECG curve over a 113 bit binary field
  sect131r1 : SECG/WTLS curve over a 131 bit binary field
  sect131r2 : SECG curve over a 131 bit binary field
  sect163k1 : NIST/SECG/WTLS curve over a 163 bit binary field
  sect163r1 : SECG curve over a 163 bit binary field
  sect163r2 : NIST/SECG curve over a 163 bit binary field
  sect193r1 : SECG curve over a 193 bit binary field
  sect193r2 : SECG curve over a 193 bit binary field
  sect233k1 : NIST/SECG/WTLS curve over a 233 bit binary field
  sect233r1 : NIST/SECG/WTLS curve over a 233 bit binary field
  sect239k1 : SECG curve over a 239 bit binary field
  sect283k1 : NIST/SECG curve over a 283 bit binary field
  sect283r1 : NIST/SECG curve over a 283 bit binary field
  sect409k1 : NIST/SECG curve over a 409 bit binary field
  sect409r1 : NIST/SECG curve over a 409 bit binary field
  sect571k1 : NIST/SECG curve over a 571 bit binary field
  sect571r1 : NIST/SECG curve over a 571 bit binary field
  c2pnb163v1: X9.62 curve over a 163 bit binary field
  c2pnb163v2: X9.62 curve over a 163 bit binary field
  c2pnb163v3: X9.62 curve over a 163 bit binary field
  c2pnb176v1: X9.62 curve over a 176 bit binary field
  c2tnb191v1: X9.62 curve over a 191 bit binary field
  c2tnb191v2: X9.62 curve over a 191 bit binary field
  c2tnb191v3: X9.62 curve over a 191 bit binary field
  c2pnb208w1: X9.62 curve over a 208 bit binary field
  c2tnb239v1: X9.62 curve over a 239 bit binary field
  c2tnb239v2: X9.62 curve over a 239 bit binary field
  c2tnb239v3: X9.62 curve over a 239 bit binary field
  c2pnb272w1: X9.62 curve over a 272 bit binary field
  c2pnb304w1: X9.62 curve over a 304 bit binary field
  c2tnb359v1: X9.62 curve over a 359 bit binary field
  c2pnb368w1: X9.62 curve over a 368 bit binary field
  c2tnb431r1: X9.62 curve over a 431 bit binary field
  wap-wsg-idm-ecid-wtls1: WTLS curve over a 113 bit binary field
  wap-wsg-idm-ecid-wtls3: NIST/SECG/WTLS curve over a 163 bit binary field
  wap-wsg-idm-ecid-wtls4: SECG curve over a 113 bit binary field
  wap-wsg-idm-ecid-wtls5: X9.62 curve over a 163 bit binary field
  wap-wsg-idm-ecid-wtls6: SECG/WTLS curve over a 112 bit prime field
  wap-wsg-idm-ecid-wtls7: SECG/WTLS curve over a 160 bit prime field
  wap-wsg-idm-ecid-wtls8: WTLS curve over a 112 bit prime field
  wap-wsg-idm-ecid-wtls9: WTLS curve over a 160 bit prime field
  wap-wsg-idm-ecid-wtls10: NIST/SECG/WTLS curve over a 233 bit binary field
  wap-wsg-idm-ecid-wtls11: NIST/SECG/WTLS curve over a 233 bit binary field
  wap-wsg-idm-ecid-wtls12: WTLS curve over a 224 bit prime field
  Oakley-EC2N-3:
        IPSec/IKE/Oakley curve #3 over a 155 bit binary field.
        Not suitable for ECDSA.
        Questionable extension field!
  Oakley-EC2N-4:
        IPSec/IKE/Oakley curve #4 over a 185 bit binary field.
        Not suitable for ECDSA.
        Questionable extension field!
  brainpoolP160r1: RFC 5639 curve over a 160 bit prime field
  brainpoolP160t1: RFC 5639 curve over a 160 bit prime field
  brainpoolP192r1: RFC 5639 curve over a 192 bit prime field
  brainpoolP192t1: RFC 5639 curve over a 192 bit prime field
  brainpoolP224r1: RFC 5639 curve over a 224 bit prime field
  brainpoolP224t1: RFC 5639 curve over a 224 bit prime field
  brainpoolP256r1: RFC 5639 curve over a 256 bit prime field
  brainpoolP256t1: RFC 5639 curve over a 256 bit prime field
  brainpoolP320r1: RFC 5639 curve over a 320 bit prime field
  brainpoolP320t1: RFC 5639 curve over a 320 bit prime field
  brainpoolP384r1: RFC 5639 curve over a 384 bit prime field
  brainpoolP384t1: RFC 5639 curve over a 384 bit prime field
  brainpoolP512r1: RFC 5639 curve over a 512 bit prime field
  brainpoolP512t1: RFC 5639 curve over a 512 bit prime field
  SM2       : SM2 curve over a 256 bit prime field
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个列表很长，主要有几个参数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么域：素数域还是 $GF(2^m)$ 域&lt;/li&gt;
&lt;li&gt;位数：域有多少位&lt;/li&gt;
&lt;li&gt;标准：NIST/SECG/WTLS/X9.62/RFC 5639/SM2/Oakley 表示的是不同的标准&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;nist&#34;&gt;NIST&lt;/h2&gt;
&lt;p&gt;NIST 在 &lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf&#34;&gt;FIPS 186-4&lt;/a&gt; 中定义了基于素数域的 Curve P-192, Curve P-224, Curve P-256, Curve P-384 和 Curve P-521。在 &lt;a href=&#34;https://tools.ietf.org/html/rfc5656&#34;&gt;RFC5656&lt;/a&gt; 中，这几条曲线又名 nistp192 nistp224 nistp256 nistp384 和 nistp521。&lt;/p&gt;
&lt;p&gt;Curve P-192:&lt;/p&gt;
&lt;p&gt;$$p = 2^{192}-2^{64}-1$$&lt;/p&gt;
&lt;p&gt;Curve P-224:&lt;/p&gt;
&lt;p&gt;$$p=2^{224}-2^{96}-1$$&lt;/p&gt;
&lt;p&gt;Curve P-256:&lt;/p&gt;
&lt;p&gt;$$p=2^{256}-2^{224}+2^{192}+2^{96}-1$$&lt;/p&gt;
&lt;p&gt;Curve P-384:&lt;/p&gt;
&lt;p&gt;$$p=2^{384}-2^{128}-2^{96}+2^{32}-1$$&lt;/p&gt;
&lt;p&gt;Curve P-521:&lt;/p&gt;
&lt;p&gt;$$p=2^{521}-1$$&lt;/p&gt;
&lt;p&gt;另一类是基于 Binary Field（\(GF(2^m)\)）的曲线，有 Curve K-163，Curve B-163，Curve K-233，Curve B-233，Curve K-283，Curve B-283，Curve K-409，Curve B-409，Curve K-571，Curve B-571。相应地，RFC 5656 里又名 nistk163，nistk233，nistb233，nistk283，nistk409，nistb409，nistt571（我觉得是 nistb571/nistk571，不知道是不是写错了）&lt;/p&gt;
&lt;p&gt;Degree 163 (K-163/B-163) :&lt;/p&gt;
&lt;p&gt;$$p(t)=t^{163}+t^7+t^6+t^3+1$$&lt;/p&gt;
&lt;p&gt;Degree 233 (K-233/B-233) :&lt;/p&gt;
&lt;p&gt;$$p(t)=t^{233}+t^{74}+1$$&lt;/p&gt;
&lt;p&gt;Degree 283 (K-283/B-283) :&lt;/p&gt;
&lt;p&gt;$$p(t)=t^{283}+t^{12}+t^7+t^5+1$$&lt;/p&gt;
&lt;p&gt;Degree 409 (K-409/B-409) :&lt;/p&gt;
&lt;p&gt;$$p(t)=t^{409}+t^{87}+1$$&lt;/p&gt;
&lt;p&gt;Degree 571 (K-571/B-571) :&lt;/p&gt;
&lt;p&gt;$$p(t)=t^{571}+t^{10}+t^5+t^2+1$$&lt;/p&gt;
&lt;h2 id=&#34;secg&#34;&gt;SECG&lt;/h2&gt;
&lt;p&gt;SECG 在 &lt;a href=&#34;https://www.secg.org/sec2-v2.pdf&#34;&gt;SEC2&lt;/a&gt; 中定义了若干的曲线，其中一部分和上面的 NIST 是同一个曲线。首先是基于素数域的：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;NIST&lt;/th&gt;
&lt;th&gt;SEC&lt;/th&gt;
&lt;th&gt;OID&lt;/th&gt;
&lt;th&gt;ANSI&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;nistp192&lt;/td&gt;
&lt;td&gt;secp192r1&lt;/td&gt;
&lt;td&gt;1.2.840.10045.3.1.1&lt;/td&gt;
&lt;td&gt;prime192v1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;secp192k1&lt;/td&gt;
&lt;td&gt;1.3.132.0.31&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nistp224&lt;/td&gt;
&lt;td&gt;secp224r1&lt;/td&gt;
&lt;td&gt;1.3.132.0.33&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;secp224k1&lt;/td&gt;
&lt;td&gt;1.3.132.0.32&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nistp256&lt;/td&gt;
&lt;td&gt;secp256r1&lt;/td&gt;
&lt;td&gt;1.2.840.10045.3.1.7&lt;/td&gt;
&lt;td&gt;prime192v7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;secp256k1&lt;/td&gt;
&lt;td&gt;1.3.132.0.10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nistp384&lt;/td&gt;
&lt;td&gt;secp384r1&lt;/td&gt;
&lt;td&gt;1.3.132.0.34&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;secp384k1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nistp521&lt;/td&gt;
&lt;td&gt;secp521r1&lt;/td&gt;
&lt;td&gt;1.3.132.0.35&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;secp521k1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;然后是基于 $GF(2^m)$ 域的：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;NIST&lt;/th&gt;
&lt;th&gt;SEC&lt;/th&gt;
&lt;th&gt;OID&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;nistk163&lt;/td&gt;
&lt;td&gt;sect163k1&lt;/td&gt;
&lt;td&gt;1.3.132.0.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;sect163r1&lt;/td&gt;
&lt;td&gt;1.3.132.0.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nistb163&lt;/td&gt;
&lt;td&gt;sect163r2&lt;/td&gt;
&lt;td&gt;1.3.132.0.15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nistk233&lt;/td&gt;
&lt;td&gt;sect233k1&lt;/td&gt;
&lt;td&gt;1.3.132.0.26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nistb233&lt;/td&gt;
&lt;td&gt;sect233r1&lt;/td&gt;
&lt;td&gt;1.3.132.0.27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;sect239k1&lt;/td&gt;
&lt;td&gt;1.3.132.0.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nistk283&lt;/td&gt;
&lt;td&gt;sect283k1&lt;/td&gt;
&lt;td&gt;1.3.132.0.16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nistb283&lt;/td&gt;
&lt;td&gt;sect283r1&lt;/td&gt;
&lt;td&gt;1.3.132.0.17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nistk409&lt;/td&gt;
&lt;td&gt;sect409k1&lt;/td&gt;
&lt;td&gt;1.3.132.0.36&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nistb409&lt;/td&gt;
&lt;td&gt;sect409r1&lt;/td&gt;
&lt;td&gt;1.3.132.0.37&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nistk571 (RFC 5656 写的是 nistt571)&lt;/td&gt;
&lt;td&gt;sect571k1&lt;/td&gt;
&lt;td&gt;1.3.132.0.38&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nistb571&lt;/td&gt;
&lt;td&gt;sect571r1&lt;/td&gt;
&lt;td&gt;1.3.132.0.39&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;sec 命名里，第四个字符里 \(p\) 表示是素数域，\(t\) 表示是 \(GF(2^m)\) 域。后面的字母表示的 \(k\) 表示 Koblitz，\(r\) 表示 random，是参数的选取方式。&lt;/p&gt;
&lt;p&gt;OID 有两种前缀：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1.3.132.0.x:
iso(1) identified-organization(3) certicom(132) curve(0)
1.2.840.10045.3.1.x:
iso(1) member-body(2) us(840) 10045 curves(3) prime(1)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ansi&#34;&gt;ANSI&lt;/h2&gt;
&lt;p&gt;ANSI 也有 &lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.202.2977&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;X9.62 标准&lt;/a&gt;，在附录里面也定义了若干个曲线。附录 &lt;code&gt;J.5.1&lt;/code&gt; 里面有三个例子，就是 prime192v1 prime192v2 和 prime192v3，之后则是 prime239v1 prime239v2 prime239v3 和 prime256v1。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ANSI&lt;/th&gt;
&lt;th&gt;别名&lt;/th&gt;
&lt;th&gt;OID&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;prime192v1&lt;/td&gt;
&lt;td&gt;nistp192/secp192r1&lt;/td&gt;
&lt;td&gt;1.2.840.10045.3.1.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prime192v2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1.2.840.10045.3.1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prime192v3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1.2.840.10045.3.1.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prime239v1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1.2.840.10045.3.1.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prime239v2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1.2.840.10045.3.1.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prime239v3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1.2.840.10045.3.1.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prime256v1&lt;/td&gt;
&lt;td&gt;nistp256/secp256r1&lt;/td&gt;
&lt;td&gt;1.2.840.10045.3.1.7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;对于同一个曲线，不同的组织给出了不同的名字，见下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;OpenSSL&lt;/th&gt;
&lt;th&gt;NIST&lt;/th&gt;
&lt;th&gt;SECG&lt;/th&gt;
&lt;th&gt;ANSI&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;prime192v1&lt;/td&gt;
&lt;td&gt;nistp192&lt;/td&gt;
&lt;td&gt;secp192r1&lt;/td&gt;
&lt;td&gt;prime192v1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;secp224r1&lt;/td&gt;
&lt;td&gt;nistp224&lt;/td&gt;
&lt;td&gt;secp224r1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prime256v1&lt;/td&gt;
&lt;td&gt;nistp256&lt;/td&gt;
&lt;td&gt;secp256r1&lt;/td&gt;
&lt;td&gt;prime256v1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;secp384r1&lt;/td&gt;
&lt;td&gt;nistp384&lt;/td&gt;
&lt;td&gt;secp384r1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;secp521r1&lt;/td&gt;
&lt;td&gt;nistp521&lt;/td&gt;
&lt;td&gt;secp521r1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sect163k1&lt;/td&gt;
&lt;td&gt;nistk163&lt;/td&gt;
&lt;td&gt;sect163k1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sect163r2&lt;/td&gt;
&lt;td&gt;nistb163&lt;/td&gt;
&lt;td&gt;sect163r2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sect233k1&lt;/td&gt;
&lt;td&gt;nistk233&lt;/td&gt;
&lt;td&gt;sect233k1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sect233r1&lt;/td&gt;
&lt;td&gt;nistb233&lt;/td&gt;
&lt;td&gt;sect233r1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sect283k1&lt;/td&gt;
&lt;td&gt;nistk233&lt;/td&gt;
&lt;td&gt;sect283k1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sect283r1&lt;/td&gt;
&lt;td&gt;nistb283&lt;/td&gt;
&lt;td&gt;sect283r1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sect409k1&lt;/td&gt;
&lt;td&gt;nistk409&lt;/td&gt;
&lt;td&gt;sect409k1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sect409r1&lt;/td&gt;
&lt;td&gt;nistb409&lt;/td&gt;
&lt;td&gt;sect409r1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sect571k1&lt;/td&gt;
&lt;td&gt;nistk571&lt;/td&gt;
&lt;td&gt;sect571k1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sect571r1&lt;/td&gt;
&lt;td&gt;nistb571&lt;/td&gt;
&lt;td&gt;sect571r1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在 RFC4492 里也可以看到一个类似的表。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FIDO U2F、FIDO2 和 CTAP 的关系</title>
      <link>https://jia.je/hardware/2020/05/18/fido-u2f-fido2-ctap/</link>
      <pubDate>Mon, 18 May 2020 10:30:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/05/18/fido-u2f-fido2-ctap/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;2012 年，Yubico 和 Google 设计了 U2F 协议，第二年 U2F 成为 FIDO 组织的标准，之后加入了 NFC 的支持。之后，FIDO2 作为替代 U2F 的新标准产生，原来的 U2F 以兼容的方式成为了 CTAP1，而采用 CBOR 封装格式的 CTAP(CTAP2) 则是 FIDO2 的主要协议。&lt;/p&gt;
&lt;h2 id=&#34;u2f&#34;&gt;U2F&lt;/h2&gt;
&lt;h3 id=&#34;命令格式&#34;&gt;命令格式&lt;/h3&gt;
&lt;p&gt;U2F 定义了它的&lt;a href=&#34;https://fidoalliance.org/specs/fido-u2f-v1.2-ps-20170411/fido-u2f-raw-message-formats-v1.2-ps-20170411.pdf&#34;&gt;命令格式&lt;/a&gt;，基于 ISO7816-4 APDU（short APDU） ：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CLA&lt;/th&gt;
&lt;th&gt;INS&lt;/th&gt;
&lt;th&gt;P1&lt;/th&gt;
&lt;th&gt;P2&lt;/th&gt;
&lt;th&gt;Lc&lt;/th&gt;
&lt;th&gt;data&lt;/th&gt;
&lt;th&gt;Le&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;td&gt;0-1 bytes&lt;/td&gt;
&lt;td&gt;variable length&lt;/td&gt;
&lt;td&gt;0-1 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;比如 U2F_VERSION 就是：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CLA&lt;/th&gt;
&lt;th&gt;INS&lt;/th&gt;
&lt;th&gt;P1&lt;/th&gt;
&lt;th&gt;P2&lt;/th&gt;
&lt;th&gt;Lc&lt;/th&gt;
&lt;th&gt;data&lt;/th&gt;
&lt;th&gt;Le&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;td&gt;03&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;empty&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;返回的数据就是 &lt;code&gt;U2F_V2&lt;/code&gt; 的 ASCII 加上 &lt;code&gt;9000&lt;/code&gt; 的状态。&lt;/p&gt;
&lt;p&gt;除此之外，它还有一种 extended length 格式的 APDU，和上面的是等价的不同表示。&lt;/p&gt;
&lt;h3 id=&#34;传输方式&#34;&gt;传输方式&lt;/h3&gt;
&lt;p&gt;实际使用 U2F 的时候，又有三种情况，分别是 USB、Bluetooth 和 NFC。&lt;/p&gt;
&lt;h4 id=&#34;usb&#34;&gt;USB&lt;/h4&gt;
&lt;p&gt;在 &lt;a href=&#34;https://fidoalliance.org/specs/fido-u2f-v1.2-ps-20170411/fido-u2f-hid-protocol-v1.2-ps-20170411.pdf&#34;&gt;U2FHID&lt;/a&gt; 里面，为了让 U2F 的命令通过 HID 接口传输，它规定了两个 endpoint，分别是 Interrupt IN 和 Interrupt OUT，还有一个固定的 HID Report Descriptor。为了发 U2F 命令，首先会进行一次封装：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CMD&lt;/th&gt;
&lt;th&gt;BCNT&lt;/th&gt;
&lt;th&gt;DATA&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;U2FHID_MSG&lt;/td&gt;
&lt;td&gt;4..n&lt;/td&gt;
&lt;td&gt;n bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;添加了一个头，表示载荷是一个 U2F 的 command（自然也是 APDU）。&lt;/p&gt;
&lt;p&gt;在 cmd 之上，还会封装一层，为了解决 USB 的 packet size 限制等问题，定义了 init packet：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CID&lt;/th&gt;
&lt;th&gt;CMD&lt;/th&gt;
&lt;th&gt;BCNTH&lt;/th&gt;
&lt;th&gt;BCNTL&lt;/th&gt;
&lt;th&gt;DATA&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;td&gt;variable length&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果数据太长，就会拆分成一个 init 和 多个 continuation packet：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CID&lt;/th&gt;
&lt;th&gt;SEQ&lt;/th&gt;
&lt;th&gt;DATA&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;td&gt;variable length&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;把 init 和 continuation 里面的 data 组合起来，就是 U2F 的 message，message 里面可能又有 U2F raw command，也就是 APDU。&lt;/p&gt;
&lt;p&gt;发送的时候，先 Interrupt OUT 发送请求，再 Interrupt IN 读取回应。&lt;/p&gt;
&lt;h4 id=&#34;bluetooth&#34;&gt;Bluetooth&lt;/h4&gt;
&lt;p&gt;在 &lt;a href=&#34;https://fidoalliance.org/specs/fido-u2f-v1.2-ps-20170411/fido-u2f-bt-protocol-v1.2-ps-20170411.pdf&#34;&gt;U2F/Bluetooth&lt;/a&gt; 里面，也用了一个类似的封装格式，请求：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CMD&lt;/th&gt;
&lt;th&gt;HLEN&lt;/th&gt;
&lt;th&gt;LLEN&lt;/th&gt;
&lt;th&gt;DATA&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;td&gt;variable length&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这里的 DATA payload 就是 extended length 格式的 APDU&lt;/p&gt;
&lt;h4 id=&#34;nfc&#34;&gt;NFC&lt;/h4&gt;
&lt;p&gt;在 &lt;a href=&#34;https://fidoalliance.org/specs/fido-u2f-v1.2-ps-20170411/fido-u2f-nfc-protocol-v1.2-ps-20170411.pdf&#34;&gt;U2F/NFC&lt;/a&gt; 里面，既然 ISO 7816-4 本来就是 NFC-native 的格式，就不要额外的封装了。只需要规定一个 Applet 的 AID 即可：&lt;code&gt;A0000006472F0001&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;总而言之，U2F raw commands 就是在 APDU 格式上定义了几个命令。在 USB 和 Bluetooth 上都加了几个小的 Header，而 NFC 上则是规定了一个 AID。这对应用程序来说很方便，核心的命令只有一套，需要的时候封装一下即可。&lt;/p&gt;
&lt;h2 id=&#34;fido2&#34;&gt;FIDO2&lt;/h2&gt;
&lt;p&gt;在之后，&lt;a href=&#34;https://fidoalliance.org/specs/fido-v2.0-rd-20170927/fido-client-to-authenticator-protocol-v2.0-rd-20170927.html#message-encoding&#34;&gt;FIDO2&lt;/a&gt; 出现了，在保持 U2F 兼容的基础上添加了新的功能，并且出现了 WebAuthN 作为浏览器使用 FIDO2 的协议。U2F 就变成了第一代的 CTAP，称为 CTAP1，然后 CTAP 默认指的就是 CTAP2。&lt;/p&gt;
&lt;h3 id=&#34;命令格式-1&#34;&gt;命令格式&lt;/h3&gt;
&lt;p&gt;FIDO2 里面，定义了一些 CTAP 命令，比如 authenticatorMakeCredential，对应 U2F 的 U2F_REGISTER 命令。然后，规定了一个 &lt;a href=&#34;https://tools.ietf.org/html/rfc7049&#34;&gt;CBOR&lt;/a&gt; 的格式，来表示命令附带的数据。CBOR 是 RFC 7049，所以也是借用过来的格式。&lt;/p&gt;
&lt;h3 id=&#34;传输方式-1&#34;&gt;传输方式&lt;/h3&gt;
&lt;p&gt;FIDO2 定义了在 USB 和 NFC 上的传输格式。&lt;/p&gt;
&lt;h4 id=&#34;usb-1&#34;&gt;USB&lt;/h4&gt;
&lt;p&gt;在 USB 上传输的时候，定义了 CTAPHID 的协议，与 U2FHID 基本是一样的，规定了 init packet 和 continuation packet，packet 里面也是 CTAPHID 的消息，这部分是兼容 U2F 的。并且，额外添加了 CTAPHID_CBOR 消息：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CMD&lt;/th&gt;
&lt;th&gt;BCNT&lt;/th&gt;
&lt;th&gt;DATA&lt;/th&gt;
&lt;th&gt;DATA + 1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CTAPHID_CBOR&lt;/td&gt;
&lt;td&gt;1..(n+1)&lt;/td&gt;
&lt;td&gt;CTAP command&lt;/td&gt;
&lt;td&gt;n bytes of CBOR data&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;它的载荷就是 CBOR 格式的请求。&lt;/p&gt;
&lt;p&gt;类似地，它也是通过 Interrupt OUT 发送请求，从 Interrupt IN 读取回应。&lt;/p&gt;
&lt;h4 id=&#34;nfc-1&#34;&gt;NFC&lt;/h4&gt;
&lt;p&gt;在 NFC 上传输的时候，因为内部的格式是 CBOR，不再是 APDU 了，所以需要一些封装。&lt;/p&gt;
&lt;p&gt;首先，它也定义了一个 Applet ID：&lt;code&gt;A0000006472F0001&lt;/code&gt;，和 U2F 一样。为了保持兼容，它都支持 U2F 定义的 APDU 命令。&lt;/p&gt;
&lt;p&gt;那怎么区分设备是否支持 CTAP1/U2F 和 CTAP2 呢？使用前面提到的 U2F_VERSION 命令即可。如果得到 U2F_V2，说明是支持 CTAP1/U2F 的；如果得到是其他的，说明只支持 CTAP2，不支持 CTAP1/U2F。&lt;/p&gt;
&lt;p&gt;如果要发 CTAP2 的命令，就要把 CTAP command 和 CBOR 格式的数据封装到 APDU 里面：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CLA&lt;/th&gt;
&lt;th&gt;INS&lt;/th&gt;
&lt;th&gt;P1&lt;/th&gt;
&lt;th&gt;P2&lt;/th&gt;
&lt;th&gt;Data&lt;/th&gt;
&lt;th&gt;Le&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;td&gt;CTAP Command || CBOR Data&lt;/td&gt;
&lt;td&gt;variable&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;它规定，如果请求采用的是 extended length 的 APDU，那么响应也要是 extended length 的 APDU；如果请求是 short APDU，那么响应也要支持 short APDU 的 chaining。&lt;/p&gt;
&lt;h3 id=&#34;兼容性&#34;&gt;兼容性&lt;/h3&gt;
&lt;p&gt;可以看到，CTAP2 设计的基本都考虑了兼容 U2F，允许用 U2F 的 API 操作 U2F 和 CTAP2 的设备；也允许用 CTAP2 的 API 操作 U2F（只支持部分命令）和  CTAP2 的设备。&lt;/p&gt;
&lt;h2 id=&#34;总结-1&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;可以看到，这里有一堆套娃的过程：&lt;/p&gt;
&lt;p&gt;U2F：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;USB HID&lt;/th&gt;
&lt;th&gt;Bluetooth&lt;/th&gt;
&lt;th&gt;NFC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;APDU&lt;/td&gt;
&lt;td&gt;APDU&lt;/td&gt;
&lt;td&gt;APDU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;U2F message&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;USB HID packet&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;USB&lt;/td&gt;
&lt;td&gt;Bluetooth&lt;/td&gt;
&lt;td&gt;ISO 14443-4/ISO 18092&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;FIDO2:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;USB HID&lt;/th&gt;
&lt;th&gt;NFC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;CTAP command + CBOR data&lt;/td&gt;
&lt;td&gt;CTAP command + CBOR data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;CTAP message&lt;/td&gt;
&lt;td&gt;APDU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;USB HID packet&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;USB&lt;/td&gt;
&lt;td&gt;ISO 14443-4/ISO 18092&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>USB/IP 模拟 USB 设备</title>
      <link>https://jia.je/software/2020/05/15/usb-ip-simulation/</link>
      <pubDate>Fri, 15 May 2020 20:20:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2020/05/15/usb-ip-simulation/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;2018 年的时候发过一篇博客，讲如何用 USB/IP 协议在两台 Linux 电脑之间共享 USB 设备。最近刚好有一个需求，就是针对一个现成的 USB device 的代码，通过 USB/IP 模拟出一个 USB 设备，然后进行调试。&lt;/p&gt;
&lt;h2 id=&#34;usbip-协议&#34;&gt;USB/IP 协议&lt;/h2&gt;
&lt;p&gt;USB/IP 只有一个简略的&lt;a href=&#34;https://github.com/realthunder/usbip/blob/master/usbip_protocol.txt&#34;&gt;文档&lt;/a&gt;，为数不多的使用 USB/IP 的代码，所以有一些细节没有说的很清楚，只能一点点去尝试。&lt;/p&gt;
&lt;p&gt;首先，USB/IP 基于 TCP，端口号 3240。客户端向服务端发送请求，服务端向客户端进行回应。&lt;/p&gt;
&lt;p&gt;请求的类型：OP_REQ_DEVLIST OP_REQ_IMPORT USBIP_CMD_SUBMIT 和 USBIP_CMD_UNLINK&lt;/p&gt;
&lt;p&gt;回应的类型：OP_REP_DEVLIST OP_REP_IMPORT USBIP_RET_SUBMIT USBIP_RET_UNLINK&lt;/p&gt;
&lt;p&gt;工作的过程大概如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;OP_REQ_DEVLIST 请求获取设备列表&lt;/li&gt;
&lt;li&gt;OP_REP_DEVLIST 返回设备列表&lt;/li&gt;
&lt;li&gt;OP_REQ_IMPORT 请求 USB 设备&lt;/li&gt;
&lt;li&gt;OP_REP_IMPORT 返回 USB 设备&lt;/li&gt;
&lt;li&gt;USBIP_CMD_SUBMIT 发送 URB&lt;/li&gt;
&lt;li&gt;USBIP_RET_SUBMIT 返回 URB&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（先不考虑 CMD_UNLINK 和 RET_UNLINK）&lt;/p&gt;
&lt;p&gt;其中前面四个比较简单清晰，所需要的字段也都是 Descriptor 中对应的字段。后面两个就相对复杂一些：URB data 的长度需要根据 endpoint 类型和 direction 共同决定。URB 实际上是 Linux 内核里的一个数据结构。&lt;/p&gt;
&lt;h2 id=&#34;usb-协议&#34;&gt;USB 协议&lt;/h2&gt;
&lt;p&gt;那么，USB 协议的几种 transfer 怎么对应到 URB 的数据呢？首先看最常见的三种（[ref](&lt;a href=&#34;https://www.beyondlogic.org/usbnutshell/usb4.shtml&#34;&gt;https://www.beyondlogic.org/usbnutshell/usb4.shtml&lt;/a&gt;）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Control Transfer
&lt;ol&gt;
&lt;li&gt;第一种是 Control IN，一共有三个阶段，第一个阶段是 Setup，Host 发送给 Device 一个八字节的 Setup Packet；第二个阶段是 Data，Device 发送给 Host 一段数据；第三个阶段是 Status，Host 发送给 Device 一个 Zero Length Packet。此时 Setup Packet 对应 urb 中的 setup，Data 就对应 RET_SUBMIT 里面的 URB data 了，自然 CMD_SUBMIT 中是没有 URB data 的&lt;/li&gt;
&lt;li&gt;第二种是 Control OUT，一共有三个阶段，第一个阶段是 Setup，Host 发送给 Device 一个吧字节的 Setup Packet；第二个阶段是 Data，Host 给 Device 发送一段数据；第三个阶段是 Status，Device 给 Host 发送一个 Zero Length Packet。此时 Setup Packet 对应 urb 中的 setup，Data 对应 CMD_SUBMIT 末尾的 URB data，长度由 transfer_buffer_length 指定。返回的 RET_SUBMIT 不带 URB data，但依然需要有 RET_SUBMIT。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Interrupt/Bulk Transfer
&lt;ol&gt;
&lt;li&gt;第一种是 Interrupt/Bulk IN，由 Device 给 Host 发送一段数据，附在 RET_SUBMIT 中。&lt;/li&gt;
&lt;li&gt;第二种是 Interrupt/Bulk OUT，由 Host 给 Device 发送一段数据，中 CMD_SUBMIT 的 URB data 中。返回的 RET_SUBMIT 不带 URB data，但不能不发 RET_SUBMIT。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可见，Interrupt 和 Bulk 是比较简单的，而 Control 和 Isochronous（没有提到）则比较复杂。&lt;/p&gt;
&lt;h2 id=&#34;回到-usbip-协议&#34;&gt;回到 USB/IP 协议&lt;/h2&gt;
&lt;p&gt;其实补充了这些信息以后，就可以实现一个 USB/IP 协议的服务器了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MIFARE Classic 上配置 NDEF</title>
      <link>https://jia.je/hardware/2020/05/10/mifare-classic-ndef/</link>
      <pubDate>Sun, 10 May 2020 09:19:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/05/10/mifare-classic-ndef/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近买了一堆 NFC 的智能卡拿来测试，其中一张 MIFARE Classic 的总是在 iOS 上读不出来，无论是以 Tag 模式还是 NDEF 模式。于是通过一系列的研究，终于知道上怎么一回事，然后成功地把一个 MIFARE Classic 卡配置成了 NDEF。&lt;/p&gt;
&lt;h2 id=&#34;背景知识&#34;&gt;背景知识&lt;/h2&gt;
&lt;p&gt;NFC 有很多协议，其中 MIFARE Classic 基于 ISO 14443-3 Type A 标准，里面有一些 MIFARE 的命令。通过这些命令，就可以控制 MIFARE Classic 卡的内容。具体来说，以我使用的 &lt;a href=&#34;https://www.nxp.com/docs/en/data-sheet/MF1S70YYX_V1.pdf&#34;&gt;MIFARE Classic EV1 4K S70&lt;/a&gt; 为例，这篇文章会涉及到如下的背景知识：&lt;/p&gt;
&lt;h3 id=&#34;mifare-classic-内存布局&#34;&gt;MIFARE Classic 内存布局&lt;/h3&gt;
&lt;p&gt;在 MIFARE Classic 中，有 Sector 和 Block 的概念，每个 Sector 有若干个 Block，其中最后一个 Block 是特殊的（称为 Sector Trailer），保存了这个 Sector 的一些信息：Key A、Access Bits、GPB 和 Key B。对于 Classic 4K，首先是 32 个有 4 blocks 的 sector，然后是 8 个 有 16 blocks 的 sector，整体的内存布局大概是：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Sector 0:
	Block 0
	Block 1
	Block 2
	Block 3(Sector Trailer)
Sector 1:
	Block 4
	Block 5
	Block 6
	Block 7(Sector Trailer)
...
Sector 32:
	Block 128
	Block 129
	...
	Block 143(Sector Trailer)
...
Sector 39:
	...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;每个 Block 有 16 字节，一共 256 个 block，所以是 4K 大小的存储空间。Block 0 比较特殊，保存的是生产商写入的信息，不可更改。&lt;/p&gt;
&lt;p&gt;Sector Trailer 的布局如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key A&lt;/th&gt;
&lt;th&gt;Access Bits&lt;/th&gt;
&lt;th&gt;GPB&lt;/th&gt;
&lt;th&gt;Key B&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;6 字节&lt;/td&gt;
&lt;td&gt;3 字节&lt;/td&gt;
&lt;td&gt;1 字节&lt;/td&gt;
&lt;td&gt;6 字节&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其中 Key A 和 Key B 上用于当前 Sector 认证的两个 Key，用相应的 Key 认证以后就可以修改 Sector 里面 Block 的内容。既然有 Key，就会有细粒度的权限控制，就是 Access Bits。它的计算方式比较复杂，首先举个文档&lt;a href=&#34;https://www.nxp.com/docs/en/application-note/AN1305.pdf&#34;&gt;AN1305&lt;/a&gt;出现过的例子 &lt;code&gt;0x7F 0x07 0x88&lt;/code&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按字节翻转：0x88 0x07 0x7F&lt;/li&gt;
&lt;li&gt;改写成二进制：1000 1000 0000 0111 0111 1111&lt;/li&gt;
&lt;li&gt;拆成前半部分：1000 1000 0000 和后半部分：0111 0111 1111&lt;/li&gt;
&lt;li&gt;如果前后部分互补，说明这是个合法的 Access Bits（这种取反拼接做校验的方法挺常见的）&lt;/li&gt;
&lt;li&gt;取出前半部分：1000 1000 0000&lt;/li&gt;
&lt;li&gt;从后往前取三个字节的最高位：011&lt;/li&gt;
&lt;li&gt;从后往前取第三个字节的次高位，依此类推：000 000 000&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里的 011 表示的是 Sector Trailer 的访问权限，特别地，它表示，不能读出 Key A，只能用 Key B 认证后修改 Key A；用 Key A 或者 Key B 认证后都可以读 Access Bits，但只能在 Key B 认证后修改 Access Bits；不能读出 Key B，只能用 Key B 认证后修改 Key B。也就是说，Key A 认证只能读 Access Bits，而 Key B 认证有权限写入 Key A、Access Bits 和 Key B 字段。完整表格见&lt;a href=&#34;https://www.nxp.com/docs/en/application-note/AN1305.pdf&#34;&gt;AN1305 Table 7&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;之后的三个 000 分别对应前三个 Blocks（又称 Data Blocks，先只考虑带 4 Blocks 的 Sector）的访问权限。000 表示的是，用 Key A 和 Key B 都有完整的读写权限。完整的表格见 &lt;a href=&#34;https://www.nxp.com/docs/en/application-note/AN1305.pdf&#34;&gt;AN 1305 Table 8&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;这里可以给读者留一个练习：0x78 0x77 0x88 对应的权限上什么？&lt;/p&gt;
&lt;p&gt;答案：对 Sector Trailer：011；对 Data Blocks：100；此时 Data Blocks 可以用 Key A 或者 Key B 认证读取，但只能用 Key B 认证写入。&lt;/p&gt;
&lt;p&gt;如果查看完整的表格就可以发现，Key B 的权限一般是比 Key A 大的，所以 Key B 一般是保密的，而 Key A 可以是公开的。&lt;/p&gt;
&lt;h3 id=&#34;mifare-命令&#34;&gt;MIFARE 命令&lt;/h3&gt;
&lt;p&gt;为了向 MIFARE Classic 卡发送命令，首先需要一个 ISO 14443-3 Type A 的接口，Android 的 NfcA 或者 libnfc 都提供了接口。这里发送的命令实际上会再经过一层解析、用 CRYPTO1 算法加密（猜测是读卡器做的？不是很确定），不过对应用程序来说是透明的。可以参考 &lt;a href=&#34;https://www.nxp.com/docs/en/data-sheet/MF1S50YYX_V1.pdf&#34;&gt;MIFARE Classic EV1 1K&lt;/a&gt; 和 &lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-3-540-85893-5_20&#34;&gt;A Practical Attack on the MIFARE Classic&lt;/a&gt; 中的描述。&lt;/p&gt;
&lt;h4 id=&#34;mifare-read&#34;&gt;MIFARE Read&lt;/h4&gt;
&lt;p&gt;读出一个 Block 的内容，每个 Block 有 16 字节。命令格式如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;30 XX
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果要读第一个 Block，就是 &lt;code&gt;30 00&lt;/code&gt;，如果要读第二个 Block，就是 &lt;code&gt;30 01&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;返回的数据里刚好是 16 个字节。&lt;/p&gt;
&lt;h4 id=&#34;mifare-write&#34;&gt;MIFARE Write&lt;/h4&gt;
&lt;p&gt;向一个 Block 写入数据，命令格式如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;A0 XX YY YY YY YY YY YY YY YY YY YY YY YY YY YY YY YY
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的 XX 和上面一样，也是 Block 地址；之后是十六字节的数据。&lt;/p&gt;
&lt;h4 id=&#34;mifare-authentiate-with-ab&#34;&gt;MIFARE Authentiate with A/B&lt;/h4&gt;
&lt;p&gt;注：这里和 S70 datasheet 里写的不完全一样。&lt;/p&gt;
&lt;p&gt;这个命令会进行 Key A 或者 Key B 的认证，如果是对 Key A 认证：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;60 XX YY YY YY YY ZZ ZZ ZZ ZZ ZZ ZZ
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的 XX 也是 Block 地址，但实际上认证的粒度上 Sector，所以只要认证了 Sector 里面的一个 Block，其他 Block 也是同时认证，也是用同一个 Sector Trailer 中的信息进行认证。YY 则是 ISO 14443-3 Type A 中的 UID，如果用 Android 的 API 读取，就可以在 NfcA 中找到这个四字节的信息。ZZ 就是要认证的密钥，六个字节。&lt;/p&gt;
&lt;p&gt;如果是对 Key B 认证，把第一个字节的 0x60 改成 0x61 即可。&lt;/p&gt;
&lt;p&gt;认证成功后，返回一个 0x00；如果认证失败，则会断开 NFC。&lt;/p&gt;
&lt;h3 id=&#34;ndef-是什么&#34;&gt;NDEF 是什么&lt;/h3&gt;
&lt;p&gt;NDEF 实际上是比较高层次的数据，就像 HTML，表示了一个格式化的数组数据，数组的元素可能是文本、URI 等等。它是由若干个 Record 组成的。一个 Record 如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;03 0B 01 07 54 02 65 6E 61 62 63 64
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先是一个 03 表示类型，然后是长度 0x0B（11，从下一个字节开始数），接着是 0x01 0x07 表示这似乎一个 Well Known 类型的 Record，内容的长度为 7，0x54（ASCII T）表示这是文本格式，0x02 表示编码是 UTF-8，0x65 0x6E (ASCII &amp;ldquo;en&amp;rdquo;) 表示语言是英语，之后的 0x61 0x62 0x63 0x64（ASCII &amp;ldquo;abcd&amp;rdquo;）就是文本内容。&lt;/p&gt;
&lt;p&gt;很多个 record 连起来，最终一个 0xFE 表示结束，这就是完整的 NDEF 信息了。&lt;/p&gt;
&lt;h3 id=&#34;在-mifare-classic-上使用-ndef&#34;&gt;在 MIFARE Classic 上使用 NDEF&lt;/h3&gt;
&lt;p&gt;NDEF 只定义了数据格式，但为了实际使用，还得看具体情况。就好像文件内容保存在硬盘上的时候，并不是直接保存，而是通过文件系统，人为定义一个路径，这样大家才知道要从 /etc/shadow 文件去读 Linux 的用户密码信息，NDEF 也需要人为定义一些规则，再作为数据存放在智能卡里的某个地方，这样大家去读取 metadata，发现上 NDEF Tag，然后才会去解析 NDEF 信息。&lt;/p&gt;
&lt;p&gt;有些时候，这个定义很简单，比如直接把 NDEF 数据放在某个 block 里面；有的时候又很复杂，因为可能同时存在很多应用，NDEF 只是其中的一种，所以要有一种类似目录的东西去索引 NDEF“文件”。&lt;/p&gt;
&lt;p&gt;MIFARE Classic 上采用的方法上，在特定的 Sector（比如 Sector 0）放一些元数据，元数据里注明了其他的 Sector（从 1 开始的其它 sector）分别用于什么用途，然后 NDEF 是其中一种用途。这个结构叫做 &lt;a href=&#34;https://www.nxp.com/docs/en/application-note/AN10787.pdf&#34;&gt;MIFARE Application Directory&lt;/a&gt;。具体来说，在 MIFARE Classic 里面，它规定 Block 1 和 Block 2 的内容如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;0-1&lt;/th&gt;
&lt;th&gt;2-3&lt;/th&gt;
&lt;th&gt;4-5&lt;/th&gt;
&lt;th&gt;6-7&lt;/th&gt;
&lt;th&gt;8-9&lt;/th&gt;
&lt;th&gt;10-11&lt;/th&gt;
&lt;th&gt;12-13&lt;/th&gt;
&lt;th&gt;14-15&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Info &amp;amp; CRC&lt;/td&gt;
&lt;td&gt;AID&lt;/td&gt;
&lt;td&gt;AID&lt;/td&gt;
&lt;td&gt;AID&lt;/td&gt;
&lt;td&gt;AID&lt;/td&gt;
&lt;td&gt;AID&lt;/td&gt;
&lt;td&gt;AID&lt;/td&gt;
&lt;td&gt;AID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AID&lt;/td&gt;
&lt;td&gt;AID&lt;/td&gt;
&lt;td&gt;AID&lt;/td&gt;
&lt;td&gt;AID&lt;/td&gt;
&lt;td&gt;AID&lt;/td&gt;
&lt;td&gt;AID&lt;/td&gt;
&lt;td&gt;AID&lt;/td&gt;
&lt;td&gt;AID&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;第一个字节是 CRC 8，它的定义可以在&lt;a href=&#34;http://reveng.sourceforge.net/crc-catalogue/1-15.htm&#34;&gt;这里的 CRC-8/MIFARE-MAD&lt;/a&gt; 里找到：初始值 0xC7，多项式上 0x1D。参与 CRC 计算的是按顺序从第二个字节开始的 31 个字节。&lt;/p&gt;
&lt;p&gt;第二个字节是 Info Byte，用处不大，见 MAD 的文档。&lt;/p&gt;
&lt;p&gt;之后每两个字节对应一个 Sector 的 AID（Application ID），比如 Block 1 的 2-3 字节对应 Sector 1 的 AID，Block 1 的 4-5 字节对应 Sector 2 的 AID，最后 Block 2 的 14-15 字节对应 Sector 15 的 AID。NDEF 的 AID 就是 0x03 0xE1。当软件发现这里的 AID 是 0x03E1 的时候，它就会去相应的 Sector 去读取 NDEF 信息。&lt;/p&gt;
&lt;p&gt;一个用 TagInfo 读出来的例子如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Sector 0 (0x00)
[skipped]
[01]  F3 01 03 E1 03 E1 00 00
 rW-  00 00 00 00 00 00 00 00
[02]  00 00 00 00 00 00 00 00
 rW-  00 00 00 00 00 00 00 00
[03]  A0:A1:A2:A3:A4:A5  MAD access key
 WXW  78:77:88 C1
      XX:XX:XX:XX:XX:XX  (key unavailable)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，这里表示的是 Sector 1 和 Sector 2 是 03E1 NDEF。下面 [03] 行表示的是 Key A，下一行是 Access bits、GPD，最后一行是 Key B。TagInfo 会尝试从 well known 里的 Key A 和 Key B 一个个试，直到认证成功为止。常见的如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A0 A1 A2 A3 A4 A5：MAD 的 Key A&lt;/li&gt;
&lt;li&gt;D3 F7 D3 F7 D3 F7：NDEF 的 Key A&lt;/li&gt;
&lt;li&gt;FF FF FF FF FF FF：出场默认的 Key A 和 Key B&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;如何在-mifare-classic-上配置-ndef&#34;&gt;如何在 MIFARE Classic 上配置 NDEF&lt;/h2&gt;
&lt;p&gt;如果看了这么多背景知识，你还有心情看到这里，那要给个掌声。&lt;/p&gt;
&lt;p&gt;为什么要在 MIFARE Classic 上配置 NDEF 呢？因为直接买到的 MIFARE Classic（比如我用的 EV1 4K S70）里面都是出厂状态，Key A 和 Key B 都是 FF FF FF FF FF FF，除了 Block 0 以外数据都是 0，所以它并不能用作 NDEF，Android 也只是认为它 NdefFormattable。所以我们要做的就是，Format as NDEF。为啥要自己搞呢，也是因为试了几个现成的工具 format 都失败了。&lt;/p&gt;
&lt;p&gt;其实整个流程在 &lt;a href=&#34;https://www.nxp.com/docs/en/application-note/AN1305.pdf&#34;&gt;AN1305&lt;/a&gt; 的 8.1 章节都写了，但看起来简单，实现起来还是有很多细节，在搞的时候也是来来回回做了很多尝试，同时也利用 TagInfo 强大的 Memory dump 配合调试。&lt;/p&gt;
&lt;p&gt;首先复习一下我们可以用哪些命令：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MIFARE Authenticate：对一个 sector 认证，认证成功了才能写操作&lt;/li&gt;
&lt;li&gt;MIFARE Read：读取一个 Block&lt;/li&gt;
&lt;li&gt;MIFARE Write：写入一个 Block&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;仔细观察 &lt;a href=&#34;https://www.nxp.com/docs/en/application-note/AN1305.pdf&#34;&gt;AN1305&lt;/a&gt; 的 Fig.10 和下面的文本描述，大概需要做这些事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改 Block 1 和 Block 2 中的信息，符合 MAD 的格式&lt;/li&gt;
&lt;li&gt;修改 Sector 0 的 Sector Trailer&lt;/li&gt;
&lt;li&gt;修改 Block 4，填入一个空白的 NDEF，或者直接前面背景知识里的例子。&lt;/li&gt;
&lt;li&gt;修改 Sector 1 和 Sector 2 的 Sector Trailer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但有一些细节：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改 Sector Trailer 的时候要谨慎，因为会修改 Key，如果改完又忘了，这卡就废了&lt;/li&gt;
&lt;li&gt;注意用 Key A 还是 Key B 进行认证。上面这些流程结束后，Sector 0 被保护了，需要用 Key B 才能修改数据；而 Sector 1 和 Sector 2 是开放的；如果执行完第一步和第二步以后，发现第一步写错了，就要注意权限的问题，必要时还可以先修改 Access bits 再修改数据&lt;/li&gt;
&lt;li&gt;在这里为了简单，Key B 都用 FF FF FF FF FF FF 了，实际情况下可以用别的自己的密钥，只要记住就行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么，按照前面的这些知识，就可以构造出每一步的 MIFARE 命令了：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：下面的命令不一定能工作，在执行前请仔细理解每条命令的结果，本文作者对卡的损失概不负责&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一步：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;60 00 YY YY YY YY FF FF FF FF FF FF
A0 01 F3 01 03 E1 03 E1 00 00 00 00 00 00 00 00 00 00
A0 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意 YY 要填入 ID。这一步首先用 FF FF FF FF FF FF 认证了 Sector 0 的 Key A，然后写入了 Block 1 和 Block 2。Info Byte 用的是 0x01，然后用在线工具计算了一下 CRC=F3。&lt;/p&gt;
&lt;p&gt;第二步：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;A0 03 A0 A1 A2 A3 A4 A5 78 77 88 C1 FF FF FF FF FF FF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这一步设置了 Key A 为 MAD access key，权限是 78 77 88，GPB 是 C1，Key B 为 FF FF FF FF FF FF&lt;/p&gt;
&lt;p&gt;第三步：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;60 04 YY YY YY YY FF FF FF FF FF FF
A0 04 00 00 03 0B D1 01 07 54 02 65 6E 61 62 63 64 FE
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这一步认证了 Sector 1，然后往 Block 4 写入了一个 abcd 的 NDEF 记录。&lt;/p&gt;
&lt;p&gt;第四步：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;A0 07 D3 F7 D3 F7 D3 F7 7F 07 88 40 FF FF FF FF FF FF
60 08 YY YY YY YY FF FF FF FF FF FF
A0 0B D3 F7 D3 F7 D3 F7 7F 07 88 40 FF FF FF FF FF FF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;写入了 Sector 1 的 Sector Trailer，然后认证 Sector 2，再写入 Sector 2 的 Sector Trailer&lt;/p&gt;
&lt;p&gt;这样就完成了，再用 TagInfo 等软件，就可以读取出来 NDEF 信息了。此时 iOS 也可以读出来。&lt;/p&gt;
&lt;p&gt;上面这些过程，在实际情况下在不同 sector 的时候需要打断，每次重新认证一下。这里默认了一些卡的初始密钥，如果初始情况并不一致，可能并不会工作。&lt;/p&gt;
&lt;h2 id=&#34;踩的坑&#34;&gt;踩的坑&lt;/h2&gt;
&lt;p&gt;在这个过程中踩过很多的坑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在空 NDEF 的时候，NFC Tools 能读出来是 Ndef，并且内容是空，但写入的时候表示 Write error，也读不出来；去 TagInfo 读内存，发现确实写进去了，但内容不对，有一个位置的长度写成了 0，可能是 BUG&lt;/li&gt;
&lt;li&gt;上面也提到过的，就是在修改为只读以后，发现数据写错了，只好重新改成可写，把数据改好了以后再设为只读。&lt;/li&gt;
&lt;li&gt;iOS 上用 NFCNDEFReaderSession 可以读出来这个 NDEF 的内容，但 NFCTagReaderSession 并不能 poll 出来。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>解释 BB84 协议</title>
      <link>https://jia.je/others/2020/05/01/bb84-explained/</link>
      <pubDate>Fri, 01 May 2020 11:12:30 +0800</pubDate>
      
      <guid>https://jia.je/others/2020/05/01/bb84-explained/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;这周密码学课程，来自 BUPT 的高飞老师讲了一下 qkd 里的 BB84 协议，老师讲得很好，我也想记录一下这个协议的流程和方法。我不是这方面的专业人士，如果有什么问题请指出。&lt;/p&gt;
&lt;h2 id=&#34;背景知识&#34;&gt;背景知识&lt;/h2&gt;
&lt;p&gt;QKD（Quantum Key Distribution）目的是让通信双方获得同一个密钥，它需要同时需要量子信道和经典信道。其中经典信道被认为是可信的，它可以被监听，但不能被中间人攻击。&lt;/p&gt;
&lt;p&gt;在 BB84（Charles H. Bennett and Gilles Brassard (1984)）协议中，传输的是一个光子，它具有如下的特性：&lt;/p&gt;
&lt;p&gt;可以用两个基去测量光子：➕️和✖️️，然后光子有四个偏振角度，分别是 ⬆️️ ⬇️️ ↘️️ ↗️️。定义一个二进制位和偏振角度的对应关系如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;位&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;基&lt;/td&gt;
&lt;td&gt;➕️&lt;/td&gt;
&lt;td&gt;➕️&lt;/td&gt;
&lt;td&gt;✖️️&lt;/td&gt;
&lt;td&gt;✖️️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;偏振角度&lt;/td&gt;
&lt;td&gt;⬆️️&lt;/td&gt;
&lt;td&gt;⬇️️&lt;/td&gt;
&lt;td&gt;↗️️&lt;/td&gt;
&lt;td&gt;↘️️&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;对于一个未知光子，可以用两种基进行测量，测量的结果：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;偏振角度&lt;/th&gt;
&lt;th&gt;⬆️️&lt;/th&gt;
&lt;th&gt;⬇️️&lt;/th&gt;
&lt;th&gt;↗️️&lt;/th&gt;
&lt;th&gt;↘️️&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;用➕️测量&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0/1&lt;/td&gt;
&lt;td&gt;0/1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用✖️️测量&lt;/td&gt;
&lt;td&gt;0/1&lt;/td&gt;
&lt;td&gt;0/1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这里的 &lt;code&gt;0/1&lt;/code&gt; 表示有 50% 概率测得 0，有 50% 概率测得 1。&lt;/p&gt;
&lt;h2 id=&#34;协议流程&#34;&gt;协议流程&lt;/h2&gt;
&lt;p&gt;假如 Alice 要和 Bob 进行 BB84 协议。那么，Alice 首先随机生成一段二进制序列，并随机生成一个基的序列，以 Wikipedia 上的例子为例：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Alice&amp;rsquo;s random bit&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Alice&amp;rsquo;s random sending basis&lt;/td&gt;
&lt;td&gt;➕️&lt;/td&gt;
&lt;td&gt;➕️&lt;/td&gt;
&lt;td&gt;✖️️&lt;/td&gt;
&lt;td&gt;➕️&lt;/td&gt;
&lt;td&gt;✖️️&lt;/td&gt;
&lt;td&gt;✖️️&lt;/td&gt;
&lt;td&gt;✖️️&lt;/td&gt;
&lt;td&gt;➕️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Photon polarization Alice sends&lt;/td&gt;
&lt;td&gt;⬆️️&lt;/td&gt;
&lt;td&gt;➡️️&lt;/td&gt;
&lt;td&gt;↘️️&lt;/td&gt;
&lt;td&gt;⬆️️&lt;/td&gt;
&lt;td&gt;↘️️&lt;/td&gt;
&lt;td&gt;↗️️&lt;/td&gt;
&lt;td&gt;↗️️&lt;/td&gt;
&lt;td&gt;➡️️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Bob 生成随机的基&lt;/td&gt;
&lt;td&gt;➕️&lt;/td&gt;
&lt;td&gt;✖️️&lt;/td&gt;
&lt;td&gt;✖️️&lt;/td&gt;
&lt;td&gt;✖️️&lt;/td&gt;
&lt;td&gt;➕️&lt;/td&gt;
&lt;td&gt;✖️️&lt;/td&gt;
&lt;td&gt;➕️&lt;/td&gt;
&lt;td&gt;➕️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Photon polarization Bob measures&lt;/td&gt;
&lt;td&gt;⬆️️&lt;/td&gt;
&lt;td&gt;↗️️&lt;/td&gt;
&lt;td&gt;↘️️&lt;/td&gt;
&lt;td&gt;↗️️&lt;/td&gt;
&lt;td&gt;➡️️&lt;/td&gt;
&lt;td&gt;↗️️&lt;/td&gt;
&lt;td&gt;➡️️&lt;/td&gt;
&lt;td&gt;➡️️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Bob 认为的二进制信息&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通过经典信道交换信息&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Shared secret key&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;丢弃&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;丢弃&lt;/td&gt;
&lt;td&gt;丢弃&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;丢弃&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;第一步，Alice 生成随机的二进制和随机的基，按照前面谈到过的对应关系，生成带有偏振角度的光子发给 Bob。&lt;/p&gt;
&lt;p&gt;第二步，由于 Bob 只收到光子，不知道 Alice 选取的基底信息，而且只能用一个基测量一次，所以 Bob 随机从两种基选择一个来测量，得到了一串二进制。这些二进制里，如果 Alice 和 Bob 选取了同一个基，那么这一位的数据一定是对的；如果选取了不同的基，那么这一位有一半的可能是对的。总的来说，期望有四分之一的位是不正确的。&lt;/p&gt;
&lt;p&gt;第三步，Alice 和 Bob 在 &lt;strong&gt;可信&lt;/strong&gt; 的经典信道中把双方的基底进行对比，把基底相等的部分对应的二进制位提取出来，作为最终使用的密钥。&lt;/p&gt;
&lt;p&gt;第四步，Alice 和 Bob 在最终使用的密钥中抽取若干位，然后对比，如果这些位都一致，则这个密码是有效的。如果错误率太高，那么很大概率是被攻击了。&lt;/p&gt;
&lt;h2 id=&#34;安全性&#34;&gt;安全性&lt;/h2&gt;
&lt;p&gt;协议的安全性，主要是靠量子的特性：未知量子态不可克隆、对未知量子态的测量可能会改变量子态。&lt;/p&gt;
&lt;p&gt;假如在量子信道中间有一个 Eve 想要做坏事，它如果在中间观测了一下光子，它就会影响光子的量子态，导致 Bob 的密钥和 Alice 密钥会不一致，从而在协议的第四步被发现。并且，因为 Eve 并不知道 Alice 所使用的基底（假设 Eve 只能控制量子信道、不能控制经典信道），所以得到的二进制数据也有四分之一是不正确的。即使 Eve 尝试截获并且重发光子给 Bob，Bob 得到的密钥仍然有很高的错误率。通过这个错误率，就可以判断是否被攻击了。&lt;/p&gt;
&lt;p&gt;另外，它的安全性还依赖以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Eve 不能控制 Alice 和 Bob 的量子密码设备&lt;/li&gt;
&lt;li&gt;Alice 和 Bob 的随机数生成器需要足够安全&lt;/li&gt;
&lt;li&gt;经典信道是可信的&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;引用&#34;&gt;引用&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Quantum_key_distribution#BB84_protocol:_Charles_H._Bennett_and_Gilles_Brassard_(1984)&#34;&gt;Quantum key distribution - Wikipedia&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 k8s 中部署 code-server</title>
      <link>https://jia.je/devops/2020/04/22/k8s-code-server/</link>
      <pubDate>Wed, 22 Apr 2020 19:02:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/04/22/k8s-code-server/</guid>
      <description>&lt;p&gt;实验了一下在 k8s 中部署 &lt;a href=&#34;https://github.com/cdr/code-server&#34;&gt;code-server&lt;/a&gt;，并不复杂，和之前几篇博客的配置是类似的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;extensions/v1beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;code-volume&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;persistentVolumeClaim&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;claimName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;code-pvc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;initContainers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;home-init&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;busybox&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;command&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sh&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chown -R 1000:1000 /home/coder&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/coder&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;code-volume&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;codercom/code-server:latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;imagePullPolicy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Always&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          - &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/coder&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;code-volume&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;limits&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;cpu&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.5&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;memory&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;500Mi&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PASSWORD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;REDACTED&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;networking.k8s.io/v1beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Ingress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ingress-code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;kubernetes.io/ingress.class&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;cert-manager.io/cluster-issuer&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;letsencrypt-prod&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;nginx.org/websocket-services&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;code&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;tls&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;hosts&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;code-tls&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;rules&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;http&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;backend&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;serviceName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;servicePort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PersistentVolumeClaim&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;code-pvc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;accessModes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;ReadWriteOnce&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;volumeMode&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Filesystem&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;storage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1Gi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的几个点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用了一个 pvc 用于 /home/coder 的持久化，所以你的集群里得有相应的 pv/storage class&lt;/li&gt;
&lt;li&gt;我用的是 Nginx Inc. 的 ingress controller，它的 websocket 支持需要一句 nginx.org/websocket-services 设置&lt;/li&gt;
&lt;li&gt;额外添加了一个 init container，为了处理 home 目录的权限&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>在 k8s 中部署 Drone 用于 CI</title>
      <link>https://jia.je/devops/2020/04/21/k8s-drone-ci/</link>
      <pubDate>Tue, 21 Apr 2020 18:10:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/04/21/k8s-drone-ci/</guid>
      <description>&lt;p&gt;实验了一下在 k8s 中部署 CI，在 drone gitlab-ci 和 jenkins 三者中选择了 drone，因为它比较轻量，并且基于 docker，可以用 GitHub 上的仓库，比较方便。&lt;/p&gt;
&lt;p&gt;首先，配置 helm：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm repo add drone https://charts.drone.io
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create ns drone
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考 drone 的文档，编写 drone-values.yml:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;ingress&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;kubernetes.io/ingress.class&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;cert-manager.io/cluster-issuer&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;letsencrypt-prod&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;hosts&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;drone.example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;tls&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;hosts&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;drone.example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;drone-tls&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;DRONE_SERVER_HOST&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;drone.example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;DRONE_SERVER_PROTO&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;https&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;DRONE_USER_CREATE&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;username:YOUR_GITHUB_USERNAME,admin:true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;DRONE_USER_FILTER&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;YOUR_GITHUB_USERNAME&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;DRONE_RPC_SECRET&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;REDACTED&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;DRONE_GITHUB_CLIENT_ID&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;REDACTED&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;DRONE_GITHUB_CLIENT_SECRET&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;REDACTED&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要首先去 GitHub 上配置 OAuth application，具体参考 drone 的文档。然后，生成一个 secret，设置 admin 用户并只允许 admin 用户使用 drone，防止其他人使用。然后应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm install --namespace drone drone drone/drone -f drone-values.yml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# or, to upgrade&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm upgrade --namespace drone drone drone/drone --values drone-values.yml 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以访问上面配好的域名了。遇到了 cert manager 最近的一个 bug，来回折腾几次就好了。&lt;/p&gt;
&lt;p&gt;接着配 drone 的 k8s runnner，也是参考 drone 的文档，编写 drone-runner-kube-values.yml：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;rbac&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;buildNamespaces&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;drone&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;DRONE_RPC_SECRET&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;REDACTED&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;DRONE_NAMESPACE_DEFAULT&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;drone&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm install --namespace drone drone-runner-kube drone/drone-runner-kube -f drone-runner-kube-values.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以去 drone 界面上操作了。&lt;/p&gt;
&lt;p&gt;需要注意的是，drone 需要 pv，所以我先在腾讯云里面配置了 CFS 的 storage class，然后它就会自动 provision 一个新的 pv 和 pvc 出来。&lt;/p&gt;
&lt;p&gt;接着尝试了一下在 drone 里面构建 docker 镜像并且 push 到 registry 上。以腾讯云为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kubernetes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;default&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;build&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;alpine&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;commands&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;make&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;publish&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;plugins/docker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;settings&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;registry&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ccr.ccs.tencentyun.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;repo&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ccr.ccs.tencentyun.com/abc/def&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;tags&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${DRONE_COMMIT_SHA:0:7}&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latest&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;username&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;from_secret&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;docker_username&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;password&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;from_secret&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;docker_password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在网页里配置好 docker username 和 password，它就会自动构建 docker 镜像并且 push 到 registry 上，然后再 rollout 一下 deployment 就能部署最新的 image 了。实际上可以在 drone 里面把部署这一步也完成，但目前还没有去实践。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;provider&#34;&gt;Drone provider: GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/drone/charts/blob/master/charts/drone/docs/install.md&#34;&gt;Drone helm chart&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/drone/charts/blob/master/charts/drone-runner-kube/docs/install.md&#34;&gt;Drone runner kube helm chat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.magalix.com/blog/building-a-cd-pipeline-with-drone-ci-and-kubernetes&#34;&gt;Building a CD pipeline with drone CI and kubernetes&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 k8s 内用 Cert Manager 配合 Nginx Ingress Controller 配置 Let&#39;s Encrypt HTTPS 证书</title>
      <link>https://jia.je/devops/2020/04/17/k8s-nginx-cert-manager-le/</link>
      <pubDate>Fri, 17 Apr 2020 18:13:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/04/17/k8s-nginx-cert-manager-le/</guid>
      <description>&lt;p&gt;上一篇博客讲了 nginx ingress 的配置，那自然第一步要配上 https。首先配置 cert-manager：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl create namespace cert-manager
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl apply --validate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false -f https://github.com/jetstack/cert-manager/releases/download/v0.14.1/cert-manager.crds.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ helm repo add jetstack https://charts.jetstack.io
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ helm repo update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ helm install &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  cert-manager jetstack/cert-manager &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --namespace cert-manager &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --version v0.14.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，配置 Cluster Issuer，应用以下的 yaml：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cert-manager.io/v1alpha2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ClusterIssuer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;letsencrypt-prod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cert-manager&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;acme&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;example@example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;https://acme-v02.api.letsencrypt.org/directory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;privateKeySecretRef&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;letsencrypt-prod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;solvers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;http01&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;ingress&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;class&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nginx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在 ingress 里面进行配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;networking.k8s.io/v1beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Ingress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ingress-example&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;kubernetes.io/ingress.class&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;cert-manager.io/cluster-issuer&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;letsencrypt-prod&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;tls&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;hosts&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;example-tls&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;rules&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;http&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;backend&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;serviceName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;example-service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;servicePort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用以后，用 &lt;code&gt;kubectl describe certificate&lt;/code&gt; 查看证书获取进度。成功后，访问改域名的 HTTP，就会自动跳转到 HTTPS，并且提供了正确的证书。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 TKE 上配置不使用 LB 的 Nginx Ingress Controller</title>
      <link>https://jia.je/devops/2020/04/17/tke-nginx-ingress-without-lb/</link>
      <pubDate>Fri, 17 Apr 2020 17:30:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/04/17/tke-nginx-ingress-without-lb/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;想要在 k8s 里面 host 一个网站，但又不想额外花钱用 LB，想直接用节点的 IP。&lt;/p&gt;
&lt;h2 id=&#34;方法&#34;&gt;方法&lt;/h2&gt;
&lt;p&gt;首先安装 nginx-ingress：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ helm repo add nginx-stable https://helm.nginx.com/stable
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ helm repo update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ helm install ingress-controller nginx-stable/nginx-ingress --set controller.service.type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;NodePort --set controller.hostNetwork&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里给 ingress controller chart 传了两个参数：第一个指定 service 类型是 NodePort，替代默认的 LoadBalancer；第二个指定 ingress controller 直接在节点上监听，这样就可以用节点的公网 IP 访问了。&lt;/p&gt;
&lt;p&gt;然后配一个 ingress：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;networking.k8s.io/v1beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Ingress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ingress-example&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;kubernetes.io/ingress.class&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;rules&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;http&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;backend&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;serviceName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;example-service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;servicePort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以发现请求被正确路由到 example-service 的 80 端口了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 sbt 中 fork 并且并行运行测试</title>
      <link>https://jia.je/software/2020/04/13/sbt-fork-parallel-test/</link>
      <pubDate>Mon, 13 Apr 2020 21:00:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2020/04/13/sbt-fork-parallel-test/</guid>
      <description>&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;最近在 sbt 使用遇到一个问题，有两个测试，分别用 testOnly 测试的时候没有问题，如果同时测试就会出问题，应该是全局的状态上出现了冲突。一个自然的解决思路是 fork，但是 sbt 默认 fork 之后 test 是顺序执行的，这会很慢。所以搜索了一下，找到了 fork 并且并行测试的方法。&lt;/p&gt;
&lt;h2 id=&#34;解决方法&#34;&gt;解决方法&lt;/h2&gt;
&lt;p&gt;解决方法在 sbt 文档中其实就有（&lt;a href=&#34;https://www.scala-sbt.org/release/docs/Testing.html#Forking+testsl&#34;&gt;原文&lt;/a&gt;）。简单来说就是：把每个 test 放到单独的 TestGroup 中，每个 TestGroup 分别用一个 forked JVM 去运行；然后让 sbt 的并行限制设高一些：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// move each test into a group and fork them to avoid race condition
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Tests._
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; singleTests&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tests&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TestDefinition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tests map &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; test &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Group&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      name &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tests &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;test&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;SubProcess&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ForkOptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; testGrouping &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; singleTests&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; definedTests&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// allow multiple concurrent tests
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;concurrentRestrictions in &lt;span style=&#34;color:#a6e22e&#34;&gt;Global&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Tags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;limitAll&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在命令行中进行 Vivado 仿真</title>
      <link>https://jia.je/hardware/2020/04/04/vivado-simulation-command/</link>
      <pubDate>Sat, 04 Apr 2020 18:50:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/04/04/vivado-simulation-command/</guid>
      <description>&lt;h2 id=&#34;已有-vivado-项目&#34;&gt;已有 Vivado 项目&lt;/h2&gt;
&lt;p&gt;想要在命令行里进行 Vivado 仿真，所以查了下 Xilinx 的 UG900 文档，找到了命令行仿真的方法。首先是生成仿真所需的文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# assuming batch mode
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;open_project xxx.xpr
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_property top YOUR_SIM_TOP &lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;current_fileset &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;simset&lt;span style=&#34;color:#66d9ef&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export_ip_user_files &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;no_script &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;force
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export_simulation &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;simulator xsim &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;force
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以把这些语句放到 tcl 文件里然后用 batch mode 执行。执行成功以后，会在 &lt;code&gt;export_sim/xsim&lt;/code&gt; 目录下生成一些文件。里面会有生成的脚本以供仿真：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd export_sim/xsim &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./YOUR_SIM_TOP.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认情况下它会执行 export_sim/xsim/cmd.tcl 里面的命令。如果想要记录 vcd 文件，修改内容为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;open_vcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;log_vcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;run &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;close_vcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;quit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以把仿真的波形输出到 dump.vcd 文件，拖到本地然后用 GTKWave 看。更多支持的命令可以到 UG900 里找。&lt;/p&gt;
&lt;h2 id=&#34;无项目模式&#34;&gt;无项目模式&lt;/h2&gt;
&lt;p&gt;如果没有创建 Vivado 项目，也可以单独进行仿真，具体分为三个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一步，对每个源 Verilog 文件，运行 &lt;code&gt;xvlog module.v&lt;/code&gt; 命令&lt;/li&gt;
&lt;li&gt;第二步，生成 snapshot，运行 &lt;code&gt;xelab -debug all --snapshot snapshot_name top_module_name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第三步，仿真，运行 &lt;code&gt;xsim snapshot_name&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果想要生成波形文件，编辑 &lt;code&gt;xsim.tcl&lt;/code&gt; 为以下内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;open_vcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;log_vcd &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;run &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;close_vcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;quit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把第三步运行的命令改为：&lt;code&gt;xsim snapshot_name -tclbatch xsim.tcl&lt;/code&gt; 即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 Rocket Chip 上挂接 TLRAM</title>
      <link>https://jia.je/hardware/2020/03/17/rocket-chip-tlram-load/</link>
      <pubDate>Tue, 17 Mar 2020 23:20:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/03/17/rocket-chip-tlram-load/</guid>
      <description>&lt;p&gt;最近遇到一个需求，需要在 Rocket Chip 里面开辟一块空间，通过 verilog 的 $readmemh 来进行初始化而不是用 BootROM，这样每次修改内容不需要重新跑一次 Chisel -&amp;gt; Verilog 的流程。然后到处研究了一下，找到了解决的方案：&lt;/p&gt;
&lt;p&gt;首先是新建一个 TLRAM 然后挂接到 cbus 上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; freechips.rocketchip.tilelink.TLRAM
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; freechips.rocketchip.tilelink.TLFragmenter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; freechips.rocketchip.diplomacy.LazyModule
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; freechips.rocketchip.diplomacy.AddressSet
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;trait&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HasTestRAM&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BaseSubsystem&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; testRAM &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LazyModule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TLRAM&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AddressSet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x40000000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1FFF&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; beatBytes &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; cbus&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;beatBytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  testRAM&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cbus&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;coupleTo&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bootrom&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TLFragmenter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cbus&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的地址和大小都可以自由定义。然后添加到自己的 Top Module 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestTop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;implicit&lt;/span&gt; p&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Parameters&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RocketSystem&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HasTestRAM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lazy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际上这时候 TLRAM 就已经加入到了 TileLink 总线中。接着，为了让 firrtl 生成 $readmemh 的代码，需要两个步骤：&lt;/p&gt;
&lt;p&gt;首先是用 &lt;code&gt;chisel3.util.experimental.loadMemoryFromFile&lt;/code&gt; 函数（文档在 &lt;a href=&#34;https://github.com/freechipsproject/chisel3/wiki/Chisel-Memories&#34;&gt;https://github.com/freechipsproject/chisel3/wiki/Chisel-Memories&lt;/a&gt;）：&lt;/p&gt;
&lt;p&gt;UPDATE：现在的文档在 &lt;a href=&#34;https://www.chisel-lang.org/chisel3/docs/appendix/experimental-features#loading-memories-for-simulation-or-fpga-initialization-&#34;&gt;Loading Memories for simulation or FPGA initialization&lt;/a&gt; 处，并且可以用 loadMemoryFromFileInline。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestTopImp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;outer&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TestTop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RocketSubsystemModuleImp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;outer&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	loadMemoryFromFile&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;outer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;testRAM&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;module&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test.hex&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个函数会生成一个 FIRRTL Annotation，记录了在这里需要对这个 mem 生成对应的 readmemh 调用。然后在 firrtl 的调用里传入 .anno.json 和 transform：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ runMain firrtl.stage.Main -i xxx -o xxx -X verilog -faf /path/to/xxx.anno.json -fct chisel3.util.experimental.LoadMemoryTransform
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;UPDATE: 现在不需要 &lt;code&gt;-fct chisel3.util.experimental.LoadMemoryTransform&lt;/code&gt; 参数。目前这个功能和生成 blackbox memory 有冲突，不能同时使用，需要等 chisel3 后续修复。&lt;/p&gt;
&lt;p&gt;这里的 chisel3.util.experimental.LoadMemoryTransform 会找到 anno.json 里面对应的 Annotation，然后生成类似下面这样的 verilog 代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; xxx(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	$readmemh(path, mem_xxx);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bind TLRAM xxx xxx(.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里采用了 Verilog 的 bind 功能，可以在不修改模块代码的时候注入，比如上面，就是注入了一个语句 $readmemh，从而达到目的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>体验 Tencent Kubernetes Engine</title>
      <link>https://jia.je/devops/2020/03/17/setup-k8s-tencentcloud/</link>
      <pubDate>Tue, 17 Mar 2020 21:56:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/03/17/setup-k8s-tencentcloud/</guid>
      <description>&lt;p&gt;之前在机器上试验了一下 kubernetes，感觉挺不错的，所以就想把腾讯云上面的机器也交给 kubernetes 管理。找到容器服务，新建集群，选择模板里的标准托管集群就可以了。然后开启下面的公网访问，设置一个比较小的 IP 地址段，按照页面下面的要求合并一下 kube config（因为还有别的 k8s cluster）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ KUBECONFIG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~/.kube/config:/path/to/new/config kubectl config view --merge --flatten &amp;gt; new_config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cp new_config ~/.kube/config
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;覆盖之前先确认原来的配置还在，然后就可以用 kubectl 切换到新的 context：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl config get-contexts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl config use-context new-context-here
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl get node
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME          STATUS   ROLES    AGE   VERSION
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;172.21.0.17   Ready    &amp;lt;none&amp;gt;   75m   v1.16.3-tke.3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到我们的 k8s node 已经上线了。我一般习惯先配好 kubernetes-dashboard：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl create -f https://raw.githubusercontent.com/cilium/cilium/v1.6/install/kubernetes/quick-install.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl proxy &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl -n kubernetes-dashboard describe secret &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;kubectl -n kubernetes-dashboard get secret | grep admin-user | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print \$1}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; | tail -n1 | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print \$2}&amp;#39;&lt;/span&gt; | pbcopy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在浏览器里访问 http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/overview?namespace=default 然后把剪贴板里的 token 粘贴进去即可。&lt;/p&gt;
&lt;p&gt;默认情况下 kubernetes-dashboard 的权限比较少，可以让它获得更多权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl edit clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# use &amp;#39;*&amp;#39; for ultimate &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# use `kubectl get clusterrole.rbac.authorization.k8s.io/cluster-admin -o yaml` to see full permissions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来配置 metrics-server。下载 metrics-server 仓库，然后修改镜像地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://github.com/kubernetes-sigs/metrics-server/archive/v0.3.6.zip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ unar v0.3.6.zip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd metrics-server-0.3.6/deploy/1.8+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ vim metrics-server-deployment
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# change: k8s.gcr.io/metrics-server-amd64:v0.3.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# to: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server-amd64:v0.3.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# add line below image: args: [&amp;#34;--kubelet-insecure-tls&amp;#34;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl apply -f .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等一段时间，就可以看到 metrics server 正常运行了。&lt;/p&gt;
&lt;p&gt;参考：https://tencentcloudcontainerteam.github.io/tke-handbook/&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 Kubernetes 集群上部署 gitlab—runner</title>
      <link>https://jia.je/devops/2020/03/14/k8s-gitlab-runner/</link>
      <pubDate>Sat, 14 Mar 2020 23:05:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/03/14/k8s-gitlab-runner/</guid>
      <description>&lt;p&gt;按照 GitLab 上的教程试着把 gitlab-runner 部署到 k8s 集群上，发现异常地简单，所以简单做个笔记：&lt;/p&gt;
&lt;p&gt;编辑 &lt;code&gt;values.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;gitlabUrl&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;GITLAB_URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;runnerRegistrationToken&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;REDACTED&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;rbac&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;create&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此处的信息按照 &amp;ldquo;Set up a specific Runner manually&amp;rdquo; 下面的提示填写。然后用 Helm 进行安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ helm repo add gitlab https://charts.gitlab.io
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl create namespace gitlab-runner
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ helm install --namespace gitlab-runner gitlab-runner -f values.yaml gitlab/gitlab-runner
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后去 Kubernetes Dashboard 就可以看到部署的情况，回到 GitLab 也可以看到出现了“Runners activated for this project” ，表示配置成功。&lt;/p&gt;
&lt;p&gt;参考配置：https://docs.gitlab.com/runner/install/kubernetes.html&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用 Kubernetes 部署无状态服务</title>
      <link>https://jia.je/devops/2020/03/10/k8s-deploy-with-hpa/</link>
      <pubDate>Tue, 10 Mar 2020 13:57:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/03/10/k8s-deploy-with-hpa/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近需要部署一个用来跑编译的服务，服务从 MQ 取任务，编译完以后提交任务。最初的做法是包装成 docker，然后用 docker-compose 来 scale up。但既然有 k8s 这么好的工具，就试着学习了一下，踩了很多坑，总结了一些需要用到的命令。&lt;/p&gt;
&lt;h2 id=&#34;搭建-docker-registry&#34;&gt;搭建 Docker Registry&lt;/h2&gt;
&lt;p&gt;首先搭建一个本地的 Docker Repository，首先设置密码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ htpasswd user pass &amp;gt; auth/passwd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后运行 registry：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker run -d -p 5000:5000 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        --restart&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;always &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        --name registry &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        -v &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/registry&amp;#34;&lt;/span&gt;:/var/lib/registry &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        -v &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/auth&amp;#34;&lt;/span&gt;:/auth &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;REGISTRY_AUTH=htpasswd&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        -e REGISTRY_AUTH_HTPASSWD_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/auth/htpasswd &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        registry:2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;简单起见没有配 tls。然后吧本地的 image push 上去：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker tag $image localhost:5000/$image
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker push localhost:5000/$image
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以了。&lt;/p&gt;
&lt;h2 id=&#34;搭建-k8s-环境&#34;&gt;搭建 k8s 环境&lt;/h2&gt;
&lt;p&gt;考虑到只用了单个物理机，所以采用的是 minikube。首先下载 minikube，下载方法略去。&lt;/p&gt;
&lt;p&gt;接着新建 minikube 虚拟机：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ minikube start --registry-mirror&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;https://registry.docker-cn.com --image-mirror-country&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cn --image-repository&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;registry.cn-hangzhou.aliyuncs.com/google_containers --vm-driver&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kvm2 --insecure-registry&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0.0.0/0&amp;#34;&lt;/span&gt; --disk-size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;50GB --cpus &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt; --memory &lt;span style=&#34;color:#ae81ff&#34;&gt;131072&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 0.0.0.0/0 可以缩小，磁盘、CPU 和内存需要在这里就设好，之后不能改，要改只能重新开个虚拟机，不过这个过程也挺快的。&lt;/p&gt;
&lt;p&gt;然后初始化一些组件（metrics server 和 kubernetes dashboard）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ minikube addons enable metrics-server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ minikube dashboard
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果要访问 dashboard 的话，可以用上面命令输出的链接，或者用 &lt;code&gt;kubectl proxy&lt;/code&gt; 然后打开  http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/ （注意 http 还是 https）。&lt;/p&gt;
&lt;p&gt;如果问到 Access Token，可以用以下 alias 获得（fish/macOS）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ alias kubedashboard&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kubectl -n kubernetes-dashboard describe secret (kubectl -n kubernetes-dashboard get secret | grep admin-user | awk &amp;#39;{print \$1}&amp;#39;) | tail -n1 | awk &amp;#39;{print \$2}&amp;#39; | pbcopy&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着，配置一下 docker registry 的密钥：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl create secret generic regcred --from-file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;.dockerconfigjson&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/path/to/config.json  --type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kubernetes.io/dockerconfigjson
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，在 Pod/Deployment 里面设定镜像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;IP:5000/image&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;imagePullSecrets&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;regcred&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后部署即可。&lt;/p&gt;
&lt;h2 id=&#34;部署水平自动伸缩hpa&#34;&gt;部署水平自动伸缩（HPA）&lt;/h2&gt;
&lt;p&gt;这一步配置的是自带的 HPA 功能，需要上述的 metrics-server 打开，并且在 Pod/Deployment 里面写明 resources.requests.cpu:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;cpu&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后创建 HPA 即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl autoscale deployment $deployment --cpu-percent&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; --min&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --max&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过压测，可以看到自动伸缩的记录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl describe hpa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Normal  SuccessfulRescale  22s   horizontal-pod-autoscaler  New size: 4; reason: cpu resource utilization &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;percentage of request&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; above target
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Normal  SuccessfulRescale  6s     horizontal-pod-autoscaler  New size: 1; reason: All metrics below target
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考：Kubernetes 官方文档&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用 jailkit 限制用户仅 scp</title>
      <link>https://jia.je/devops/2020/03/09/use-jailkit-for-scp-only-user/</link>
      <pubDate>Mon, 09 Mar 2020 13:48:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/03/09/use-jailkit-for-scp-only-user/</guid>
      <description>&lt;p&gt;最近需要用 scp 部署到生产机器，但又不想出现安全问题，所以用了 jailkit 的方法。首先是创建单独的用户，然后生成 ssh key 来认证，不再赘述。此时是可以 scp 了，但用户依然可以获得 shell，不够安全。&lt;/p&gt;
&lt;p&gt;然后找到了下面参考链接，大概摘录一下所需要的命令和配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir /path/to/jail
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chown root:root /path/to/jail
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;701&lt;/span&gt; /path/to/jail
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jk_init -j /path/to/jail scp sftp jk_lsh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jk_jailuser -m -j /path/to/jail jailed_user
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim /path/to/jail/etc/jailkit/jk_lsh.ini
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add following lines&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;jailed_user&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;paths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; /usr/bin, /usr/lib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;exectuables &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; /usr/bin/scp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后可以发现该用户的 shell 已经更改 jk_chrootsh，并且只能用 scp。&lt;/p&gt;
&lt;p&gt;参考：https://blog.tinned-software.net/restrict-linux-user-to-scp-to-his-home-directory/&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 56 期</title>
      <link>https://jia.je/misc/2020/02/28/weekly-sharing-56/</link>
      <pubDate>Fri, 28 Feb 2020 15:56:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2020/02/28/weekly-sharing-56/</guid>
      <description>&lt;p&gt;咕咕咕&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SystemVerilog linter &lt;a href=&#34;https://github.com/dalance/svlint&#34;&gt;https://github.com/dalance/svlint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;东北方言编程语言 &lt;a href=&#34;https://github.com/zhanyong-wan/dongbei&#34;&gt;https://github.com/zhanyong-wan/dongbei&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JS LaTeX 渲染到 HTML &lt;a href=&#34;https://github.com/michael-brade/LaTeX.js&#34;&gt;https://github.com/michael-brade/LaTeX.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一种对语音助手的攻击 &lt;a href=&#34;https://surfingattack.github.io/&#34;&gt;https://surfingattack.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线打铃网站 &lt;a href=&#34;http://thulpwan.net/timer/&#34;&gt;http://thulpwan.net/timer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;网络学堂 PC 端 App &lt;a href=&#34;https://github.com/jiegec/learn_tsinghua_app/releases&#34;&gt;https://github.com/jiegec/learn_tsinghua_app/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 2020 roadmap &lt;a href=&#34;https://github.com/rust-lang/rfcs/pull/2857/files&#34;&gt;https://github.com/rust-lang/rfcs/pull/2857/files&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>在 Vivado 中对 chisel3 产生的 verilog 代码仿真</title>
      <link>https://jia.je/hardware/2020/02/10/simulate-chisel3-on-vivado/</link>
      <pubDate>Mon, 10 Feb 2020 23:09:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/02/10/simulate-chisel3-on-vivado/</guid>
      <description>&lt;p&gt;默认情况下，chisel3 生成的 verilog 代码在 Vivado 中仿真会出现很多信号大面积变成 X。解决方法在一个不起眼的 Wiki 页面：&lt;a href=&#34;https://github.com/freechipsproject/chisel3/wiki/Randomization-flags&#34;&gt;Randomization flags&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;`define RANDOMIZE_REG_INIT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;`define RANDOMIZE_MEM_INIT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;`define RANDOMIZE_GARBAGE_ASSIGN
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;`define RANDOMIZE_INVALID_ASSIGN
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在生成的 verilog 前面加上这四句，就可以正常仿真了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>通过 BSCAN JTAG 对 Rocket Chip 进行调试</title>
      <link>https://jia.je/hardware/2020/02/10/rocket-chip-bscan-debug/</link>
      <pubDate>Mon, 10 Feb 2020 15:08:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/02/10/rocket-chip-bscan-debug/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在上一个 &lt;a href=&#34;https://jia.je/hardware/2020/02/09/rocket-chip-bscan-analysis/&#34;&gt;post&lt;/a&gt; 里研究了原理，今天也是成功在 Artix 7 上实现了调试。效果如下：&lt;/p&gt;
&lt;p&gt;OpenOCD 输出：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Info : JTAG tap: riscv.cpu tap/device found: 0x0362d093 (mfg: 0x049 (Xilinx), part: 0x362d, ver: 0x0)
Info : datacount=1 progbufsize=16
Info : Disabling abstract command reads from CSRs.
Info : Examined RISC-V core; found 1 harts
Info :  hart 0: XLEN=32, misa=0x40801105
Info : Listening on port 3333 for gdb connections
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;GDB 输出：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Remote debugging using localhost:3333
0x0001018c in getc () at bootloader.c:36
36        while (!(*UART_LSR &amp;amp; 0x1))
(gdb) 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里用的 OpenOCD 和 GDB 都是 riscv 版本，上游的支持尚不完善。对于 Homebrew 用户，我在 &lt;a href=&#34;https://github.com/jiegec/homebrew-formulas&#34;&gt;jiegec/homebrew-formulas&lt;/a&gt; 维护了需要的 Formula。&lt;/p&gt;
&lt;h2 id=&#34;过程&#34;&gt;过程&lt;/h2&gt;
&lt;p&gt;代码基本借鉴了 &lt;a href=&#34;https://github.com/sequencer/rocket-playground/tree/7fa3c51113be607add2034f3abe0ae973caac04a&#34;&gt;sequencer/rocket-playground&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/KireinaHoro/rocket-zcu102/tree/ab9112c951eeeb64482716394d926777862d9e86&#34;&gt;KireinaHoro/rocket-zcu102&lt;/a&gt; 而来，代码方面主要是添加了 &lt;a href=&#34;https://github.com/jiegec/rocket2thinpad/blob/ad1e86620c54bc0be29d08394d04f70031718b6d/src/main/scala/BscanJTAG.scala#L1&#34;&gt;BscanJTAG.scala&lt;/a&gt;，然后在 Top 模块下把它连接到内部的 JTAG 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; boardJTAG &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Module&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BscanJTAG&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; jtagBundle &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;systemjtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// set JTAG parameters
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;jtagBundle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jtagBundle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mfr_id &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x233&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;U&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jtagBundle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;part_number &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;U&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jtagBundle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;version &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;U&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// connect to BSCAN
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;jtagBundle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TCK&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boardJTAG&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tck
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jtagBundle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TMS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boardJTAG&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tms
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jtagBundle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TDI&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boardJTAG&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tdi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boardJTAG&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tdo &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; jtagBundle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TDO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boardJTAG&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tdoEnable &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; jtagBundle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jtag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TDO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;driven
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码方面就足够了。然后，需要一个 riscv-openocd 和 riscv-gdb，分别从上游 repo 编译得来。然后采用以下的 openocd.cfg：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;adapter_khz 20000
interface ftdi
ftdi_vid_pid 0x0403 0x6014
ftdi_layout_init 0x00e8 0x60eb
ftdi_tdo_sample_edge falling
reset_config none

set _CHIPNAME riscv
jtag newtap $_CHIPNAME cpu -irlen 6

set _TARGETNAME $_CHIPNAME.cpu

target create $_TARGETNAME.0 riscv -chain-position $_TARGETNAME
$_TARGETNAME.0 configure -work-area-phys 0x80000000 -work-area-size 10000 -work-area-backup 1
riscv use_bscan_tunnel 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后就可以用 GDB 调试了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>研究 Rocket Chip 的 BSCAN 调试原理</title>
      <link>https://jia.je/hardware/2020/02/09/rocket-chip-bscan-analysis/</link>
      <pubDate>Sun, 09 Feb 2020 15:11:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/02/09/rocket-chip-bscan-analysis/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近 &lt;a href=&#34;https://github.com/KireinaHoro&#34;&gt;@jsteward&lt;/a&gt; 在研究如何通过 JTAG 对 FPGA 里的 Rocket Chip 进行调试。之前 &lt;a href=&#34;https://github.com/sequencer&#34;&gt;@sequencer&lt;/a&gt; 已经做了一些实践，我们在重复他的工作，同时也研究了一下这是怎么工作的。&lt;/p&gt;
&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;
&lt;p&gt;我们从 @sequencer 得到了一份可用的 &lt;a href=&#34;https://github.com/sequencer/rocket-playground/blob/7fa3c51113be607add2034f3abe0ae973caac04a/playground/src/FPGA.scala#L83&#34;&gt;Scala 代码&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/sequencer/rocket-playground/blob/7fa3c51113be607add2034f3abe0ae973caac04a/playground/debugger/openocd.cfg#L16&#34;&gt;OpenOCD 配置&lt;/a&gt;，并且了解到：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以通过 openocd 找到并调试 Rocket Chip&lt;/li&gt;
&lt;li&gt;openocd 是通过 JTAG 向 FPGA 的 TAP 的 IR 写入 USER4，然后往 DR 写入特定格式的数据，然后控制 Rocket Chip 的 JTAG。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里涉及到一个“封装”的过程，在一个仅可以控制 DR 的 JTAG 中控制另一个 JTAG。首先可以找到 OpenOCD 端的&lt;a href=&#34;https://github.com/riscv/riscv-openocd/blob/7cb8843794a258380b7c37509e5c693977675b2a/src/target/riscv/riscv.c#L361&#34;&gt;操作代码&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tunneled_ir[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;].num_bits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tunneled_ir[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;].out_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bscan_zero;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tunneled_ir[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;].in_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tunneled_ir[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;].num_bits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bscan_tunnel_ir_width;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tunneled_ir[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;].out_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ir_dtmcontrol;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tunneled_ir[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].in_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tunneled_ir[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].num_bits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tunneled_ir[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].out_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tunneled_ir_width;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tunneled_ir[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;].in_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tunneled_ir[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].num_bits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tunneled_ir[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].out_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bscan_zero;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tunneled_ir[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].in_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果画成图，大概是这个样子（IR）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;3 bits&lt;/th&gt;
&lt;th&gt;IR Width bits&lt;/th&gt;
&lt;th&gt;7 bits&lt;/th&gt;
&lt;th&gt;1 bit&lt;/th&gt;
&lt;th&gt;TDI&lt;/th&gt;
&lt;th&gt;Data Register&lt;/th&gt;
&lt;th&gt;TDO&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Payload&lt;/td&gt;
&lt;td&gt;Tunneled IR Width&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;td&gt;Rocket Chip TAP&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;DR：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;3 bits&lt;/th&gt;
&lt;th&gt;DR Width bits&lt;/th&gt;
&lt;th&gt;7 bits&lt;/th&gt;
&lt;th&gt;1 bit&lt;/th&gt;
&lt;th&gt;TDI&lt;/th&gt;
&lt;th&gt;Data Register&lt;/th&gt;
&lt;th&gt;TDO&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Payload&lt;/td&gt;
&lt;td&gt;Tunneled DR Width&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;td&gt;Rocket Chip TAP&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这里 TDI 和 TDO 是直接接到 Rocket Chip 的 JTAG 中的，所以我们期望，当 Rocket Chip TAP 在 Shift-IR/Shift-DR 阶段的时候，刚好通过的是 Payload 部分。而控制 TAP 状态机，需要控制 TMS，这个则是通过一段 &lt;a href=&#34;https://github.com/sifive/fpga-shells/blob/c099bd9b4f916bc0ba88030939a9614d0b0daf2d/src/main/scala/ip/xilinx/Xilinx.scala#L13&#34;&gt;HDL&lt;/a&gt; 来完成的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt;@(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (counter_neg &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&amp;#39;h04&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                jtag_tms &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TDI_REG; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (counter_neg &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&amp;#39;h05&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                jtag_tms &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;#39;b1&lt;/span&gt;; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((counter_neg &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;8&amp;#39;h08&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; shiftreg_cnt)) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (counter_neg &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;8&amp;#39;h08&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; shiftreg_cnt &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&amp;#39;h01&lt;/span&gt;))) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                jtag_tms &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;#39;b1&lt;/span&gt;; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                jtag_tms &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;#39;b0&lt;/span&gt;; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里 &lt;code&gt;TDI_REG&lt;/code&gt; 取的是第一个 bit 的反（也就是上面 IR 对应 0，DR 对应 1 的那一位），&lt;code&gt;shiftreg_cnf&lt;/code&gt; 则是之后 7 个 bit，对应上面的 Tunneled IR/DR Width。那么，在选择 IR 时 TMS 的序列为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;4 cycles&lt;/th&gt;
&lt;th&gt;1 cycle&lt;/th&gt;
&lt;th&gt;1 cycle&lt;/th&gt;
&lt;th&gt;2 cycles&lt;/th&gt;
&lt;th&gt;shiftreg_cnt-1 cycles&lt;/th&gt;
&lt;th&gt;2 cycles&lt;/th&gt;
&lt;th&gt;rest cycles&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Run-Test/Idle&lt;/td&gt;
&lt;td&gt;Select-DR-Scan&lt;/td&gt;
&lt;td&gt;Select-IR-Scan&lt;/td&gt;
&lt;td&gt;Capture-IR, Shift-IR&lt;/td&gt;
&lt;td&gt;Shift-IR&lt;/td&gt;
&lt;td&gt;Exit1-IR, Update-IR&lt;/td&gt;
&lt;td&gt;Run-Test/Idle&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;类似地，如果是选择 DR：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;4 cycles&lt;/th&gt;
&lt;th&gt;1 cycle&lt;/th&gt;
&lt;th&gt;1 cycle&lt;/th&gt;
&lt;th&gt;2 cycles&lt;/th&gt;
&lt;th&gt;shiftreg_cnt-1 cycles&lt;/th&gt;
&lt;th&gt;2 cycles&lt;/th&gt;
&lt;th&gt;rest cycles&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Run-Test/Idle&lt;/td&gt;
&lt;td&gt;Run-Test/Idle&lt;/td&gt;
&lt;td&gt;Select-DR-Scan&lt;/td&gt;
&lt;td&gt;Capture-DR, Shift-DR&lt;/td&gt;
&lt;td&gt;Shift-DR&lt;/td&gt;
&lt;td&gt;Exit1-DR, Update-DR&lt;/td&gt;
&lt;td&gt;Run-Test/Idle&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这样，刚好在 Shift-IR/DR 状态下，Payload 会被写入 IR/DR，从而完成了期望的操作。通过规定一个特定格式的 Data Register，可以实现嵌套的 TAP 的 IR 和 DR 的操作。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;JTAG Standard&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sequencer/rocket-playground&#34;&gt;sequencer/rocket-playground&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SiFive&amp;rsquo;s JTAG Tunnel: &lt;a href=&#34;https://github.com/sifive/fpga-shells/blob/c099bd9b4f916bc0ba88030939a9614d0b0daf2d/src/main/scala/ip/xilinx/Xilinx.scala#L13&#34;&gt;https://github.com/sifive/fpga-shells/blob/c099bd9b4f916bc0ba88030939a9614d0b0daf2d/src/main/scala/ip/xilinx/Xilinx.scala#L13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/watz0n/arty_xjtag&#34;&gt;https://github.com/watz0n/arty_xjtag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/riscv/riscv-openocd/blob/7cb8843794a258380b7c37509e5c693977675b2a/src/target/riscv/riscv.c#L361&#34;&gt;https://github.com/riscv/riscv-openocd/blob/7cb8843794a258380b7c37509e5c693977675b2a/src/target/riscv/riscv.c#L361&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;UG740: 7 Series FPGAs Configuration&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>在 macOS 烧写 Artix7 FPGA</title>
      <link>https://jia.je/hardware/2020/02/09/program-artix7-on-macos/</link>
      <pubDate>Sun, 09 Feb 2020 00:35:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/02/09/program-artix7-on-macos/</guid>
      <description>&lt;p&gt;首先安装好 openocd：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;brew install openocd --HEAD&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;测试所用版本为 &lt;code&gt;0.10.0+dev-01052-g09580964 (2020-02-08-15:09)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然后编写如下的 openocd.cfg：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;adapter driver ftdi
adapter speed 10000
ftdi_vid_pid 0x0403 0x6014
ftdi_layout_init 0x0008 0x004b

source [find cpld/xilinx-xc7.cfg]
init
xc7_program xc7.tap
pld load 0 /path/to/bitstream.bit
shutdown
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的 ftdi 开头的两行按照实际的 JTAG Adapter 修改。可以参考 openocd 自带的一些 cfg。&lt;/p&gt;
&lt;p&gt;然后在 openocd.cfg 的目录运行 &lt;code&gt;openocd&lt;/code&gt; 即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openocd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Open On-Chip Debugger 0.10.0+dev-01052-g09580964 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2020-02-08-15:09&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Licensed under GNU GPL v2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For bug reports, read
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        http://openocd.org/doc/doxygen/bugs.html
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : auto-selecting first available session transport &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jtag&amp;#34;&lt;/span&gt;. To override use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transport select &amp;lt;transport&amp;gt;&amp;#39;&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : ftdi: &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you experience problems at higher adapter clocks, try the command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ftdi_tdo_sample_edge falling&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : clock speed &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; kHz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : JTAG tap: xc7.tap tap/device found: 0x0362d093 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mfg: 0x049 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Xilinx&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, part: 0x362d, ver: 0x0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Warn : gdb services need one or more targets defined
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;shutdown command invoked
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Listening on port &lt;span style=&#34;color:#ae81ff&#34;&gt;6666&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; tcl connections
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Listening on port &lt;span style=&#34;color:#ae81ff&#34;&gt;4444&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; telnet connections
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时 FPGA 已经烧写成功。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://pansila.github.io/posts/7db4884d&#34;&gt;https://pansila.github.io/posts/7db4884d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://numato.com/kb/programming-mimas-a7-using-openocd-and-xc3sprog/&#34;&gt;https://numato.com/kb/programming-mimas-a7-using-openocd-and-xc3sprog/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更新：OpenOCD 已经更新到 0.11.0，对于 Arty A7，采用下面的脚本进行烧写：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# OpenOCD 0.11.0
# Adapted from: interface/ftdi/digilent-hs1.cfg
# See also: board/arty_s7.cfg
adapter driver ftdi
adapter speed 25000
ftdi_vid_pid 0x0403 0x6010
ftdi_channel 0
ftdi_layout_init 0x0088 0x008b
reset_config none

source [find cpld/xilinx-xc7.cfg]
init
pld load 0 ./bitstream.bit
shutdown
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;成功输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openocd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Open On-Chip Debugger 0.11.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Licensed under GNU GPL v2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For bug reports, read
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        http://openocd.org/doc/doxygen/bugs.html
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : auto-selecting first available session transport &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jtag&amp;#34;&lt;/span&gt;. To override use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transport select &amp;lt;transport&amp;gt;&amp;#39;&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : ftdi: &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you experience problems at higher adapter clocks, try the command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ftdi_tdo_sample_edge falling&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : clock speed &lt;span style=&#34;color:#ae81ff&#34;&gt;25000&lt;/span&gt; kHz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : JTAG tap: xc7.tap tap/device found: 0x0362d093 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mfg: 0x049 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Xilinx&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, part: 0x362d, ver: 0x0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Warn : gdb services need one or more targets defined
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;shutdown command invoked
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Listening on port &lt;span style=&#34;color:#ae81ff&#34;&gt;6666&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; tcl connections
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info : Listening on port &lt;span style=&#34;color:#ae81ff&#34;&gt;4444&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; telnet connections
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>在 macOS 上带执行权限 mmap 一个已删除文件遇到的问题和解决方案</title>
      <link>https://jia.je/software/2020/02/07/macos-mmap-exec/</link>
      <pubDate>Fri, 07 Feb 2020 18:11:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2020/02/07/macos-mmap-exec/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;实验环境：macOS Catalina 10.15.2&lt;/p&gt;
&lt;p&gt;最近在 &lt;a href=&#34;https://github.com/rcore-os/zircon-rs&#34;&gt;rcore-rs/zircon-rs&lt;/a&gt; 项目中遇到一个比较玄学的问题，首先需求是在 macOS 的用户进程里开辟一段地址空间，然后把这个地址空间多次映射（权限可能不同、同一块内存可能被映射到多个地址），通过 mmap 模拟虚拟地址的映射。采用的是如下的方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在临时目录创建一个文件，把文件大小设为 16M（暂不考虑扩容）&lt;/li&gt;
&lt;li&gt;需要映射一个虚拟地址到物理地址的时候，就对这个文件的物理地址偏移进行 FIXED 映射，虚拟地址就是期望的虚拟地址。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样的方案在 Linux 下运行地很好，但在 macOS 下总是以一定概率在第二部出现 EPERM。网上搜了很多，但也没搜到相关的信息，于是自己断断续续地研究了一下，现在有一个比较初步的结果。&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL；DR&lt;/h2&gt;
&lt;p&gt;先说结论：调用一个带 PROT_EXEC 并且映射文件的 mmap 时，macOS 会进行安全检测，如果此时发现文件在文件系统上消失了，它会认为这可能是一个恶意软件行为，进行拦截，返回 EPERM。&lt;/p&gt;
&lt;p&gt;而代码实际上在第一步和第二步之间，把临时目录删了：由于进程持有 fd，所以文件并不会真的删掉，当软件退出的时候文件自然会删除，这是临时文件的常见做法（见 tmpfile(3)）。&lt;/p&gt;
&lt;h2 id=&#34;研究过程&#34;&gt;研究过程&lt;/h2&gt;
&lt;h3 id=&#34;查看-console&#34;&gt;查看 Console&lt;/h3&gt;
&lt;p&gt;在网上一番搜索未果后，就尝试在 Console 里面寻找信息。照着程序名字搜索，可以找到一些信息：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;temporarySigning type=1 matchFlags=0x0 path=/path/to/executable
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是编译这个 executable 的时候出现的，好像也没啥问题。然后解除过滤，在这个信息前后按照 syspolicyd 寻找：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;initiating malware scan (... info_path: /path/to/temp/file proc_path: /path/to/executable)
Unable (errno: 2) to read file at &amp;lt;private&amp;gt; for process path: &amp;lt;private&amp;gt; library path: &amp;lt;private&amp;gt;
Disallowing load of &amp;lt;private&amp;gt; in 50001, &amp;lt;private&amp;gt;
Library load (/path/to/temp/file) rejected: library load denied by system policy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这几条记录比较可疑，每次运行程序，如果跑挂了，就会出现这几条，如果没跑挂，就不会出现这一条。所以很大概率是被 macOS 拦截了。错误信息的用词是 library，所以大概率是被当成加载动态库了，但既然内容是空的，所以我想的是文件名触碰到了什么奇怪的规则，然后文件名又是随机的，随机导致 EPERM 是概率性出现的，这好像很有道理。于是我把 tmpfile 换成了固定的路径，忽然就好了。但固定的路径只能保证同时只有一个程序在跑，如果路径拼接上 pid，怎么删，谁来删又是一个问题。虽然可以放到 /tmp 下面然后随便搞，但 /tmp 的回收并不是那么积极，在临时目录下丢太多文件也会出现问题。&lt;/p&gt;
&lt;h3 id=&#34;一丝曙光&#34;&gt;一丝曙光&lt;/h3&gt;
&lt;p&gt;这时候，@wangrunji0408 提供了一个方案：在 System Preferences -&amp;gt; Security &amp;amp; Privacy -&amp;gt; Privacy -&amp;gt; Developer Tools 中添加编译该 executable 的程序（如 iTerm、CLion）可以解决这个问题。那么问题应该比较明确了，就是 malware scan 的问题，如果信任了这个 App 为 Developer Tools，它产生的 executable 也是可信的，应该不是恶意软件。但在 tmux 环境下，它哪个 App 也不属于，没法继承，况且把这个权限开放出去也有潜在的安全问题。并且让每个开发者都要这么操作一遍很不方便。&lt;/p&gt;
&lt;h3 id=&#34;回到-console&#34;&gt;回到 Console&lt;/h3&gt;
&lt;p&gt;今天刚好看到一个 &lt;a href=&#34;https://georgegarside.com/blog/macos/sierra-console-private/&#34;&gt;post&lt;/a&gt;，内容是如何在 macOS Catalina 中查看 log 中标记为 private 的内容。如果你注意到的话，上面的 log 中出现了几处 private，这并不是我改的，而是 macOS 自带的隐私机制（当然这种机制似乎并没有采用的很完全，一些消息源没有打上 private 的标签）。&lt;/p&gt;
&lt;p&gt;然后按照上面的 post 的方法（&lt;a href=&#34;https://saagarjha.com/blog/2019/09/29/making-os-log-public-on-macos-catalina/&#34;&gt;另一个 post&lt;/a&gt;）开启了一下标记为 private 的内容，正好我的系统没有升级到 10.15.3 所以还能用。此时上面的第二条和第三条就出现了具体内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Unable (errno: 2) to read file at /path/to/temp/file for process path: /path/to/executable library path: /path/to/temp/file
Disallowing load of /path/to/temp/file in 61254, /path/to/executable
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个时候问题就很明显了：读取不到文件。这时候回想起 tmpfile 的工作原理，它会删除生成的文件，在删除文件之后，macOS 进行扫描，发现找不到文件，于是 disallow 了，mmap 就会返回 EPERM。&lt;/p&gt;
&lt;p&gt;解决方案也很显然了：把删除目录延后，或者放在 /tmp 下等待清理等待。&lt;/p&gt;
&lt;p&gt;我也写了一段 C 代码来验证这个现象：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/mman.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mmap&amp;#34;&lt;/span&gt;, O_RDWR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; O_CREAT, &lt;span style=&#34;color:#ae81ff&#34;&gt;0777&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x200000000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ftruncate(fd, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// might not work if unlink is put here (race condition)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// you can use sleep to reproduce
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    unlink(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mmap&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mmap((&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)addr, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;, PROT_READ &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PROT_WRITE &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PROT_EXEC, MAP_SHARED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; MAP_FIXED, fd, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// always works if unlink is put here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// unlink(&amp;#34;mmap&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (res &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MAP_FAILED) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        perror(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mmap&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;good&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>每周分享第 55 期</title>
      <link>https://jia.je/misc/2020/01/31/weekly-sharing-55/</link>
      <pubDate>Fri, 31 Jan 2020 17:58:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2020/01/31/weekly-sharing-55/</guid>
      <description>&lt;p&gt;一个月后终于复更&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;退出 vim 教程 &lt;a href=&#34;https://github.com/hakluke/how-to-exit-vim&#34;&gt;https://github.com/hakluke/how-to-exit-vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SHA-1 攻击新进展 &lt;a href=&#34;https://sha-mbles.github.io/&#34;&gt;https://sha-mbles.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;gmane 近况 &lt;a href=&#34;https://lars.ingebrigtsen.no/2020/01/06/whatever-happened-to-news-gmane-org/&#34;&gt;https://lars.ingebrigtsen.no/2020/01/06/whatever-happened-to-news-gmane-org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;浏览器能做的事情 &lt;a href=&#34;https://github.com/luruke/browser-2020&#34;&gt;https://github.com/luruke/browser-2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个 ext2 和 FAT 为一体的 fs &lt;a href=&#34;https://github.com/NieDzejkob/cursedfs&#34;&gt;https://github.com/NieDzejkob/cursedfs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iptables 规则调试工具 &lt;a href=&#34;https://github.com/x-way/iptables-tracer&#34;&gt;https://github.com/x-way/iptables-tracer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Qt 2020 的变化 &lt;a href=&#34;https://www.qt.io/blog/qt-offering-changes-2020&#34;&gt;https://www.qt.io/blog/qt-offering-changes-2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;后缀自动机可视化 &lt;a href=&#34;https://yeah.moe/p/a8e74947/&#34;&gt;https://yeah.moe/p/a8e74947/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>TP-Link Archer T4U V3 Linux 驱动安装</title>
      <link>https://jia.je/system/2020/01/05/archer-t4u-v3-driver/</link>
      <pubDate>Sun, 05 Jan 2020 01:21:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2020/01/05/archer-t4u-v3-driver/</guid>
      <description>&lt;p&gt;之前因为 MacBookPro 内置的 Wi-Fi 总是有问题，就找了个 USB 的无线网卡：TP-Link Archer T4U V3（VID：2357，PID：0115），这个网卡也没有主线的驱动，在网上找到了现成的驱动：&lt;a href=&#34;https://github.com/cilynx/rtl88x2bu&#34;&gt;cilynx/rtl88x2bu&lt;/a&gt;，按照 README 用 DKMS 安装即可，实测可用。&lt;/p&gt;
&lt;p&gt;Update: Linux 6.2+ 已经支持，见 &lt;a href=&#34;https://linux-hardware.org/?id=usb:2357-0115&#34;&gt;https://linux-hardware.org/?id=usb:2357-0115&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MacBookPro 14,3 Wi-Fi 驱动问题解决方案</title>
      <link>https://jia.je/system/2020/01/05/macbookpro-linux-wifi/</link>
      <pubDate>Sun, 05 Jan 2020 00:53:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2020/01/05/macbookpro-linux-wifi/</guid>
      <description>&lt;p&gt;之前在 MacBookPro 14,3 安装 Linux 后，很多东西的驱动都有了解决方法，&lt;a href=&#34;https://gist.github.com/TRPB/437f663b545d23cc8a2073253c774be3&#34;&gt;参考 1&lt;/a&gt;，&lt;a href=&#34;https://github.com/roadrunner2/macbook12-spi-driver&#34;&gt;参考 2&lt;/a&gt;，触摸板和键盘等等都可以正常使用，触摸板的使用效果比我意料要好一些，虽然还是没有 macOS 原生那么好。但 Wi-Fi 一直有能扫到信号但连不上的问题，最近终于有了比较完善的解决方案，&lt;a href=&#34;https://bugzilla.kernel.org/show_bug.cgi?id=193121#c52&#34;&gt;地址&lt;/a&gt;，也是两个月前才出来的方案，我测试了一下，确实可以很好的解决网络问题，网卡型号是 BCM43602，驱动用的是 brcmfmac。&lt;/p&gt;
&lt;p&gt;另一方面，带 T2 的 MacBook 似乎也有了支持，见 &lt;a href=&#34;https://github.com/aunali1/linux-mbp-arch&#34;&gt;aunali1/linux-mbp-arch&lt;/a&gt;，有一些尚未 upstream 的 patch，但我没有设备，就没有测试了。需要吐槽的是 ArchWiki 不怎么更新新 Model 的 MacBook 的教程，都是到处找散落的 github repo 和 gist 找别人的方案。&lt;/p&gt;
&lt;p&gt;P.S. 可以正常工作的有：Wi-Fi，键盘，触摸板，Touchbar，内置摄像头，键盘背光，蓝牙
P.P.S MacBookPro11,2 的网卡是 BCM4360，直接用 broadcom-wl 驱动就可以。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JieLabs 是如何工作的</title>
      <link>https://jia.je/jielabs/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jia.je/jielabs/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;JieLabs 是陈嘉杰、高一川、刘晓义（按姓氏拼音首字母排序）于 2020 年新型冠状病毒疫情期间开发的在线数字逻辑电路实验系统，用于清华大学 2020 年春季学期数字逻辑电路实验课程。其包括前端、后端和固件三部分，分别主要由刘晓义、陈嘉杰和高一川负责开发。核心功能实现用时一周，后续界面和稳定性优化用时两周。本文会详细地介绍 JieLabs 的工作原理和一些技术细节，希望对各位同学有所帮助。&lt;/p&gt;
&lt;h3 id=&#34;太长不看&#34;&gt;太长；不看。&lt;/h3&gt;
&lt;p&gt;采用了如下的技术方案：&lt;/p&gt;
&lt;p&gt;前端：React 框架 + Redux 状态管理 + Monaco 编辑器 + WebAssembly 运行 Rust 代码 + WebSocket 实时通信 + SASS 样式&lt;/p&gt;
&lt;p&gt;后端：Actix-Web 框架 + Diesel/PostgreSQL 数据库 + Redis 消息队列 + Quartus 构建 + Kubernetes 构建容器编排&lt;/p&gt;
&lt;p&gt;固件：Xilinx FPGA 控制 + Buildroot 系统 + Linux 内核&lt;/p&gt;
&lt;h2 id=&#34;前端&#34;&gt;前端&lt;/h2&gt;
&lt;p&gt;前端大部分都是刘晓义同学编写的，也是这个项目工作量最大的一部分。除了本文，还可以阅读&lt;a href=&#34;https://meow.c-3.moe/sth-about-jielabs&#34;&gt;刘晓义同学自己写的总结&lt;/a&gt;。主要分以下几部分来谈前端的技术实现：&lt;/p&gt;
&lt;h3 id=&#34;第三方库&#34;&gt;第三方库&lt;/h3&gt;
&lt;p&gt;整体上采用了时下比较流行的 React 框架，配合 Redux 进行状态管理，用 React Hooks 编写组件的逻辑。为了实现 VHDL/Verilog 代码的编辑，采用了来自 VSCode 的独立编辑器空间 Monaco，并自行编写了 VHDL 和 Verilog 语言的支持，一部分在 JS 实现，另一部分在 Rust 中实现，通过 wasm-pack 打包到 JS 中执行。另外为了实现 gzip 格式的解压缩也引入了 pako 库。&lt;/p&gt;
&lt;p&gt;在这些第三方库里，Monaco 的体积最大，后面我们针对 JS 体积做了许多优化，在下面会再提。&lt;/p&gt;
&lt;h3 id=&#34;rust-在前端的应用&#34;&gt;Rust 在前端的应用&lt;/h3&gt;
&lt;p&gt;由于开发者里刘晓义和陈嘉杰都是 Rust 语言的爱好者，考虑到目前 Rust to WASM 的技术比较成熟，WebAssembly 的可用程度也很高，我们把一些功能挪到了 Rust 中执行：&lt;/p&gt;
&lt;p&gt;一是布线的计算。这是一个比较纯粹的算法问题，一方面对性能有一定的要求，一方面开发者比较喜欢 Rust，所以就用 Rust 实现了。这里要特别感谢刘光哲同学对布线算法的指点。在此基础上，我们用 Rust &lt;a href=&#34;https://github.com/jiegec/maze-routing&#34;&gt;实现&lt;/a&gt;了几个论文中的布线算法（Maze Router），并且通过和 JS 代码的配合得到了一个比较优秀的效果。&lt;/p&gt;
&lt;p&gt;二是 VHDL/Verilog 的语言支持。学过编译原理的同学应该知道，如果要实现一个能够解析代码里的信号的程序，一般是不能通过正则表达式来解决的，况且我们还实现了一些错误信息的显示。VHDL 语言支持采用了已有的比较完善的库，Verilog 由于现有的库都比较庞大，不适合放于前端，于是我们编写了一个最小的 Verilog（实际上算是 SystemVerilog）的解析，仅仅足够满足我们的需求。如果同学们遇到了一些语法上功能的缺少，欢迎提出。&lt;/p&gt;
&lt;h3 id=&#34;canvas-的应用&#34;&gt;Canvas 的应用&lt;/h3&gt;
&lt;p&gt;连线部分因为是动态生成的，所以也是动态绘制的，Canvas 就可以派上用场了。我们也利用了 Canvas 的特性，针对每一个网络都画在一个 Canvas 上，那么在检测鼠标位置的时候，只要检查 Canvas 在鼠标所在的点上是否颜色，就知道鼠标是否在它上面了。&lt;/p&gt;
&lt;h3 id=&#34;前端加载速度的优化&#34;&gt;前端加载速度的优化&lt;/h3&gt;
&lt;p&gt;优化前前端 JS 和 WASM 总大小大约是 4MB，对于网络不好的用户来说，它的加载时间是不能容忍的。于是我们采用了以下的措施：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 gzip：有很显著的效果，但因为一些未知的原因，在实际部署的时候未能打开&lt;/li&gt;
&lt;li&gt;缩小 JS 体积：通过 Webpack Analyzer 分析程序各个部分的大小，删掉了 Monaco 中一些没有用到的功能&lt;/li&gt;
&lt;li&gt;缩小 WASM 体积：打开 LTO 和 -Os 选项&lt;/li&gt;
&lt;li&gt;代码分割：把不同功能的代码分割开，先让一部分代码加载进来，可以绘制一个部分功能的界面，然后再继续加载剩下的组件&lt;/li&gt;
&lt;li&gt;CDN：把一部分外部的依赖放到国内，后续如果有需求的话也可以把内部的依赖也放到国内的 CDN 上&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;后端&#34;&gt;后端&lt;/h2&gt;
&lt;p&gt;后端用 Rust 语言编写，采用了目前比较成熟的 actix-web 框架，大量使用了 async/await。除此之外，用 Redis 作为消息队列，在 Docker 容器中运行 Quartus，用 Kubernetes 进行容器的动态调度。&lt;/p&gt;
&lt;h3 id=&#34;任务调度&#34;&gt;任务调度&lt;/h3&gt;
&lt;p&gt;对于用户提交的代码和约束，后端需要进行任务的调度，生成一个新的任务，放入到 Redis 消息队列中。另一方面，Docker 中运行的 python 脚本会从 Redis 中取任务，任务完成后把结果上传并回传给后端表示确认。如果一个任务一直没有完成，后端会进行回收并重新分配一个任务到队列中。为了防止这个过程中出现重复任务的提交，为每个提交设置了一个足够长的随机 ID。Docker 容器一开始是通过 docker-compose 进行配置，后来考虑到这个场景比较适合 kubernetes，于是使用了一下，还挺好用的。一开始用的是 minikube，搭好 docker registry，然后往里面部署几个 pod 并设置 hpa，具体可以看我的另一篇博客，后来迁移到了 kubeadm 直接配置。现在迁移到了一个 k3s 搭建的 k8s 集群上。&lt;/p&gt;
&lt;h3 id=&#34;板子通信&#34;&gt;板子通信&lt;/h3&gt;
&lt;p&gt;第二个主要功能是进行板子的分配和通信。每个用户会创建一个 WebSocket 连接到后端，每个板子也是一个 WebSocket。当一个用户分配到一个板子的时候，它可以通过后端发送命令给对应的板子，板子的回复也会原路返回，相当于一个 WebSocket Proxy。另外为了保证资源的利用率，添加了一些限制、心跳包和认证。&lt;/p&gt;
&lt;h3 id=&#34;状态监控&#34;&gt;状态监控&lt;/h3&gt;
&lt;p&gt;为了可以直观地看到各个数据，实现了一个简单的监控接口，接入 Telegraf+InfluxDB+Grafana 的监控系统，可以实时看到各个资源的情况，如用户、板子和任务等等，也方便我们在在线用户比较少的时候进行更新。&lt;/p&gt;
&lt;h2 id=&#34;板子&#34;&gt;板子&lt;/h2&gt;
&lt;p&gt;这个平台虽然是用于数字逻辑实验课程，但实际用的板子来自数字逻辑设计课程。我们把其上一个 Altera FPGA 作为实验 FPGA，在控制的 Xilinx FPGA 上运行我们的固件，负责读取和写入 GPIO、下载 bitstream 等等功能。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 54 期</title>
      <link>https://jia.je/misc/2019/12/27/weekly-sharing-54/</link>
      <pubDate>Fri, 27 Dec 2019 15:12:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/12/27/weekly-sharing-54/</guid>
      <description>&lt;p&gt;咕了两周&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ES2019 &lt;a href=&#34;https://javascript.christmas/2019/7&#34;&gt;https://javascript.christmas/2019/7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CSS 技巧 &lt;a href=&#34;https://github.com/chokcoco/iCSS&#34;&gt;https://github.com/chokcoco/iCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 编译器加速 &lt;a href=&#34;https://blog.mozilla.org/nnethercote/2019/12/11/how-to-speed-up-the-rust-compiler-one-last-time-in-2019/&#34;&gt;https://blog.mozilla.org/nnethercote/2019/12/11/how-to-speed-up-the-rust-compiler-one-last-time-in-2019/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OSXFuse 不开源 &lt;a href=&#34;https://colatkinson.site/macos/fuse/2019/09/29/osxfuse/&#34;&gt;https://colatkinson.site/macos/fuse/2019/09/29/osxfuse/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;嵌入式 Rust 的 fmt 优化 &lt;a href=&#34;https://jamesmunns.com/blog/fmt-unreasonably-expensive/&#34;&gt;https://jamesmunns.com/blog/fmt-unreasonably-expensive/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker base image 更新工具 &lt;a href=&#34;https://github.com/containrrr/watchtower&#34;&gt;https://github.com/containrrr/watchtower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;运行 Linux 的名片 &lt;a href=&#34;https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/&#34;&gt;https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 53 期</title>
      <link>https://jia.je/misc/2019/12/08/weekly-sharing-53/</link>
      <pubDate>Sun, 08 Dec 2019 00:06:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/12/08/weekly-sharing-53/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;GDB Enhanced Features &lt;a href=&#34;https://github.com/hugsy/gef&#34;&gt;https://github.com/hugsy/gef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lisp on Lua &lt;a href=&#34;https://fennel-lang.org/&#34;&gt;https://fennel-lang.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Django 3.0 &lt;a href=&#34;https://docs.djangoproject.com/en/3.0/releases/3.0/&#34;&gt;https://docs.djangoproject.com/en/3.0/releases/3.0/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust Constant Propagation &lt;a href=&#34;https://blog.rust-lang.org/inside-rust/2019/12/02/const-prop-on-by-default.html&#34;&gt;https://blog.rust-lang.org/inside-rust/2019/12/02/const-prop-on-by-default.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ES2019 features &lt;a href=&#34;https://javascript.christmas/2019/7&#34;&gt;https://javascript.christmas/2019/7&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 52 期</title>
      <link>https://jia.je/misc/2019/12/01/weekly-sharing-52/</link>
      <pubDate>Sun, 01 Dec 2019 13:41:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/12/01/weekly-sharing-52/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;传递 Rust 闭包到 C &lt;a href=&#34;https://readhacker.news/s/4dbWL&#34;&gt;https://readhacker.news/s/4dbWL&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SystemVerilog Online &lt;a href=&#34;http://sv-lang.com/&#34;&gt;http://sv-lang.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 14 新特性 &lt;a href=&#34;https://www.javaworld.com/article/3437797/work-begins-on-java-14.html&#34;&gt;https://www.javaworld.com/article/3437797/work-begins-on-java-14.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在线 or1k 的模拟器 &lt;a href=&#34;https://readhacker.news/s/4dfqc&#34;&gt;https://readhacker.news/s/4dfqc&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 macOS 上运行 virt-manager &lt;a href=&#34;https://github.com/jeffreywildman/homebrew-virt-manager&#34;&gt;https://github.com/jeffreywildman/homebrew-virt-manager&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关于 SystemVerilog 的博客 &lt;a href=&#34;http://systemverilog.io/&#34;&gt;http://systemverilog.io/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结合 VSCode 和 Docker 的开发环境 &lt;a href=&#34;https://github.com/cdr/sail&#34;&gt;https://github.com/cdr/sail&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 51 期</title>
      <link>https://jia.je/misc/2019/11/24/weekly-sharing-51/</link>
      <pubDate>Sun, 24 Nov 2019 20:56:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/11/24/weekly-sharing-51/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;一个 LaTeX 的 LSP &lt;a href=&#34;https://github.com/latex-lsp/texlab&#34;&gt;https://github.com/latex-lsp/texlab&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rope 数据结构 &lt;a href=&#34;https://github.com/cessen/ropey&#34;&gt;https://github.com/cessen/ropey&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个把 Vivado 工程放 git 中管理的方法 &lt;a href=&#34;https://github.com/jhallen/vivado_setup&#34;&gt;https://github.com/jhallen/vivado_setup&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/athre0z/color-backtrace&#34;&gt;https://github.com/athre0z/color-backtrace&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拿 Arch 当路由器 &lt;a href=&#34;https://github.com/archwrt&#34;&gt;https://github.com/archwrt&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sourcetrail 开源了 &lt;a href=&#34;https://www.sourcetrail.com/blog/open_source/&#34;&gt;https://www.sourcetrail.com/blog/open_source/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NodeJS 正式支持 ES Module &lt;a href=&#34;https://medium.com/@nodejs/announcing-core-node-js-support-for-ecmascript-modules-c5d6dc29b663&#34;&gt;https://medium.com/@nodejs/announcing-core-node-js-support-for-ecmascript-modules-c5d6dc29b663&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rust 的错误处理 &lt;a href=&#34;https://blog.yoshuawuyts.com/error-handling-survey/&#34;&gt;https://blog.yoshuawuyts.com/error-handling-survey/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>实现一个简单的 Decaf LSP</title>
      <link>https://jia.je/programming/2019/11/17/rust-decaf-lsp/</link>
      <pubDate>Sun, 17 Nov 2019 14:40:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2019/11/17/rust-decaf-lsp/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;编译原理课程在做 Decaf 的 PA，之前做了一些比较简单的尝试，包括在线 Decaf、在线 TAC VM 等等，都是套一个前端，然后整个编译到 wasm 跑前端就可以了。如果要做 LSP 的话，工作量会稍微大一些，不过也更加实用。&lt;/p&gt;
&lt;p&gt;然后有一天，助教 @equation314 写了 &lt;a href=&#34;https://github.com/equation314/decaf-vscode&#34;&gt;decaf-vscode&lt;/a&gt; 一个 VSCode 对 Decaf 的语法高亮插件，我就 Fork 了一份到 &lt;a href=&#34;https://github.com/jiegec/decaf-vscode&#34;&gt;jiegec/decaf-vscode&lt;/a&gt;，然后添加了 LSP 的支持，让它有了一些更高级的功能。&lt;/p&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;p&gt;LSP 服务端一般是一个命令行程序，通过 JSONRPC 进行消息通讯，然后就上午找有没有现成的框架。比较重要的是 &lt;a href=&#34;https://crates.io/crates/lsp-types&#34;&gt;lsp-types&lt;/a&gt; 和 &lt;a href=&#34;https://crates.io/crates/tower-lsp&#34;&gt;tower-lsp&lt;/a&gt; ，前者封装了 LSP 协议的各个结构体，后者提供了服务端的大概实现。不过由于后者做的不大全，所以我自己 fork 了一份添加了一些。&lt;/p&gt;
&lt;p&gt;实际实现的时候，需要实现几个函数，分别相应客户端的请求，比如在 initialize 的时候告诉客户端我都实现了哪些东西，然后相应地提供各种信息，如 symbol，hover，folding，definition 等等。为了实现简单，我要求客户端每次修改的时候都把完整的文件传过来，虽然不是很高效，但是很简单，目前也没有啥很长的 Decaf 程序嘛。&lt;/p&gt;
&lt;p&gt;每次拿到 Decaf 程序之后，就按照 decaf-rs 的方法，Lex 然后 Parse，然后遍历 AST，分别把需要的各个信息都存下来，当客户端在请求的时候，直接返回即可。然后就会在 VSCode 中出现，比如实现了 document symbol，在左边的 Outline 中就会出现相应的结构；实现了 hover，当移动到一些地方的时候，客户端发出请求，服务端就把相应的 hover 信息返回给客户端。整个协议并不复杂，后面实际实现其实才是比较复杂的地方。&lt;/p&gt;
&lt;p&gt;实现的功能中，symbols hovers ranges definition 都是在得到 AST 后一次遍历都计算好，然后返回，同时在遇到错误的时候，也通过 diagnostic 的形式把检查出来的错误汇报给用户。由于 VSCode 的良好支持，基本不需要写 TypeScript 代码。&lt;/p&gt;
&lt;p&gt;至于代码补全，现在做的比较粗糙，仅仅补全了一些内置函数：Print ReadInteger 和 ReadLine。还在考虑支持函数调用的补全，但是在补全的时候会出现语法错误，意味着需要保证在补全的时候我还能拿到之前正确的类型信息，需要一些工作量，现在还没有去做。&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;p&gt;我自己测试的方法就是两个窗口，一个是 &lt;a href=&#34;https://github.com/jiegec/decaf-lsp&#34;&gt;decaf-lsp&lt;/a&gt; ，首先克隆下来，然后 &lt;code&gt;cargo install --path . --force&lt;/code&gt; 来安装到全局；另一个就是我 Fork 的 &lt;a href=&#34;https://github.com/jiegec/decaf-vscode&#34;&gt;decaf-vscode&lt;/a&gt; ，克隆下来，然后按 &lt;code&gt;F5&lt;/code&gt; 进入 VSCode 的调试模式，它会打开一个新窗口，里面启用了 Decaf for VSCode 插件。这个时候看 Decaf 代码就可以看到上面提到的那些东西了。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;感觉 LSP 是一个比较好实现的 Protocol，但 Protocol 承载的 Data 才是比较困难的东西。要实现一个完整的 completion 还需要很多东西，现在只能说是个 naive implementation 吧。&lt;/p&gt;
&lt;p&gt;刚写完就发现 Neovim 发布了 &lt;a href=&#34;https://github.com/neovim/nvim-lsp&#34;&gt;官方的 LSP client&lt;/a&gt; 。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 50 期</title>
      <link>https://jia.je/misc/2019/11/17/weekly-sharing-50/</link>
      <pubDate>Sun, 17 Nov 2019 14:04:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/11/17/weekly-sharing-50/</guid>
      <description>&lt;p&gt;时间过得真快，忽然就 50 期了。。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CLion 的 C++20 Concept 支持 &lt;a href=&#34;https://blog.jetbrains.com/clion/2019/11/cpp20-concepts-in-clion/&#34;&gt;https://blog.jetbrains.com/clion/2019/11/cpp20-concepts-in-clion/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TypeScript 一些工具 &lt;a href=&#34;https://github.com/pirix-gh/ts-toolbelt&#34;&gt;https://github.com/pirix-gh/ts-toolbelt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 编写的 SystemVerilog Parser &lt;a href=&#34;https://github.com/dalance/sv-parser&#34;&gt;https://github.com/dalance/sv-parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MacBookPro 16 英寸 发布&lt;/li&gt;
&lt;li&gt;用 Rust 写 eBPF 程序 &lt;a href=&#34;https://blog.redsift.com/labs/putting-rust-in-the-kernel-with-ebpf/&#34;&gt;https://blog.redsift.com/labs/putting-rust-in-the-kernel-with-ebpf/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;终端里玩蜘蛛纸牌 &lt;a href=&#34;https://github.com/chrisbouchard/klondike-rs&#34;&gt;https://github.com/chrisbouchard/klondike-rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 的 coverage 工具 &lt;a href=&#34;https://github.com/mozilla/grcov&#34;&gt;https://github.com/mozilla/grcov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在 Menu Bar 或者 Touch Bar 控制 AirPods Pro 模式 &lt;a href=&#34;https://github.com/insidegui/NoiseBuddy&#34;&gt;https://github.com/insidegui/NoiseBuddy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Demangle Rust 符号的工具 &lt;a href=&#34;https://github.com/luser/rustfilt&#34;&gt;https://github.com/luser/rustfilt&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>用 Rust Procedure Macro 实现 GLL Parser</title>
      <link>https://jia.je/programming/2019/11/15/rust-proc-macro-gll/</link>
      <pubDate>Fri, 15 Nov 2019 11:13:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2019/11/15/rust-proc-macro-gll/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;在编译原理课上，PA 框架采用的是 &lt;a href=&#34;https://github.com/MashPlant/lalr1&#34;&gt;MashPlant/lalr1&lt;/a&gt; ，是一个比较好用的 Lexer + Parser 的工具，它的大概语法见 &lt;a href=&#34;https://mashplant.gitbook.io/decaf-doc/pa1a/lalr1-shi-yong-zhi-dao/yi-ge-wan-zheng-de-li-zi&#34;&gt;一个完整的例子&lt;/a&gt; 。然后之前看到了 GLL Parser，想着可不可以照着类似的语法也写一个 GLL 的 Parser Generator，也是用 Rust Procedure Macro 的方法，就开始了研究。&lt;/p&gt;
&lt;h2 id=&#34;尝试&#34;&gt;尝试&lt;/h2&gt;
&lt;p&gt;首先是阅读 GLL 的论文，它并不长，大概的意思就是，LL(1) 文法需要考虑 PS 冲突的情况，而 GLL 的解决方法就是“都试一下”，然后为了效率，用了 GSS 表示解析过程和 SPPF 表示解析结果。然后就开始照着论文手写了不同版本的实现，见 &lt;a href=&#34;https://github.com/jiegec/gll-test&#34;&gt;jiegec/gll-test&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;第一种就是按照论文里第一段实现直接抄过来，每个可能性作为一个 Continuation 存下来，它有自己的栈和执行位置（Label）。这样 Work 以后呢，我又想到了 async/await，用类似的方法又写了一遍，相对要简洁一些，也是很平常的递归下降的写法，而不是 Loop + Label 的形式。但这些都不能做到合并栈的目的，所以遇到十分有歧义的文法的时候会很糟糕。&lt;/p&gt;
&lt;p&gt;然后开始按照论文中的 GSS 进行编写，基本还是按照论文进行翻译，然后一步一步做，做好以后把 GSS 画出来，和论文的图可以对的上；然后照着 GLL parse-tree generation 的论文把 SPPF 实现了，这时候就可以从 recongizer 变成一个 parser 了。&lt;/p&gt;
&lt;h2 id=&#34;宏&#34;&gt;宏&lt;/h2&gt;
&lt;p&gt;得到一份可行的代码以后，就要扩展到通用的情况上。学习了一下 MashPlant/lalr1 的实现，实现了一个 proc macro，它读取了用户的程序，从一个模板文件开始，往里面插入一些生成的代码，丢给编译器去编译。这时候就涉及到编译期和运行时的不同了，我把运行时一些通用的结构放到了 &lt;code&gt;gll-pg-core&lt;/code&gt; 中，把编译期的代码放到了 &lt;code&gt;gll-pg-macros&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;代码生成的时候，基本按照之前自己写的样子抄，只不过这个时候要按照用户编写的产生式进行生成了，各种名字都要规范化，变得可以复用，然后尽量减少命名空间的污染等等这些常见的写宏需要注意的操作。&lt;/p&gt;
&lt;p&gt;不过，考虑到现在还没有实现 Lexer，所以先用了 Logos 库作为 Lexer。但我其实不大喜欢它，因为它太简单，也没有行号的信息，不过暂且先这样吧，以后可能会自己实现。&lt;/p&gt;
&lt;p&gt;然后 0.1.0 版本就诞生了，它的样例长这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;//! This example is taken from MashPlant/lalr1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; gll_pg_core::LogosToken;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; gll_pg_macros::gll;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; logos::Logos;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Logos, Debug, Eq, PartialEq, Clone)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Token&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[end]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    End,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[error]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Error,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[token = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _Eps,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[token = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Add,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[token = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Sub,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[token = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Mul,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[token = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Div,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[token = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Mod,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[token = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    LPar,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[token = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RPar,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[regex = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[0-9]+&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IntLit,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[gll(Expr, Token)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; Parser {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[rule(Expr -&amp;gt; Expr Add Expr)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr_add&lt;/span&gt;(l: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, _op: &lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, r: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[rule(Expr -&amp;gt; Expr Sub Expr)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr_sub&lt;/span&gt;(l: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, _op: &lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, r: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[rule(Expr -&amp;gt; Expr Mul Expr)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr_mul&lt;/span&gt;(l: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, _op: &lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, r: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[rule(Expr -&amp;gt; Expr Div Expr)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr_div&lt;/span&gt;(l: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, _op: &lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, r: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[rule(Expr -&amp;gt; Expr Mod Expr)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr_mod&lt;/span&gt;(l: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, _op: &lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, r: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[rule(Expr -&amp;gt; Sub Expr)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr_neg&lt;/span&gt;(_op: &lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, r: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[rule(Expr -&amp;gt; LPar Expr RPar)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr_paren&lt;/span&gt;(_l: &lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, i: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, _r: &lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[rule(Expr -&amp;gt; IntLit)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr_int&lt;/span&gt;(i: &lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i.slice.parse().unwrap()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[test]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gll&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; lexer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Token::lexer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 + 2 * 3&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Parser::parse(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; lexer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// two ways to parse
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    assert_eq!(res, [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它解析的结果是一个数组，对应所有可能出现的情况。这样比较简单，但是要求中间各种类型都是 Clone，因为同一个结点可能会被用多次。它的计算方法就是在最终的 SPPF 上递归找到所有可能性，然后调用用户代码，最后放到一个 Vec 中。&lt;/p&gt;
&lt;h2 id=&#34;记忆化&#34;&gt;记忆化&lt;/h2&gt;
&lt;p&gt;但是，上面的做法有一个很大的问题，就是，虽然 SPPF 的空间复杂度是有限的，但所有可能的解析树可以有很多，如果把每一个情况都完整的存在一个 Vec 中，空间要求是很高的，中间也有很多重复计算的情况。所以需要做记忆化，然后每次给出一个。因为依赖自己内部的状态，所以不能是 Iterator 只能是 StreamingIterator。&lt;/p&gt;
&lt;p&gt;记忆化也花了我一番功夫，现在用了一个比较土的办法，在每个结点上记录了当前遇到过的所有可能，这个是逐渐构造的，意味着如果只需要第一种解析树，不需要额外的空间。然后逐渐扩张，如果有可以重用的结构就重用，把涉及的所有的结构都放在一个 Vec 中，用完之后一起 drop 掉。&lt;/p&gt;
&lt;p&gt;当然了，这个时候，各种东西都变成了引用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;//! This example is taken from MashPlant/lalr1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; gll_pg_core::&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; gll_pg_macros::gll;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; logos::Logos;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Logos, Debug, Eq, PartialEq, Clone)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Token&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[end]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    End,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[error]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Error,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[token = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _Eps,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[token = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Add,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[token = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Sub,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[token = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Mul,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[token = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Div,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[token = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Mod,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[token = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    LPar,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[token = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RPar,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[regex = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[0-9]+&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IntLit,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Default)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Parser&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    literals: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[gll(Expr, Token)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; Parser {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// you can omit self
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[rule(Expr -&amp;gt; Expr Add Expr)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr_add&lt;/span&gt;(l: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, _op: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, r: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// you can use &amp;amp;self
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[rule(Expr -&amp;gt; Expr Sub Expr)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr_sub&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self, l: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, _op: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, r: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// you can use &amp;amp;mut self as well
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// but all of these have &amp;amp;mut self in fact
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[rule(Expr -&amp;gt; Expr Mul Expr)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr_mul&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; self, l: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, _op: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, r: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[rule(Expr -&amp;gt; Expr Div Expr)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr_div&lt;/span&gt;(l: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, _op: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, r: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[rule(Expr -&amp;gt; Expr Mod Expr)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr_mod&lt;/span&gt;(l: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, _op: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, r: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[rule(Expr -&amp;gt; Sub Expr)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr_neg&lt;/span&gt;(_op: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, r: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;-*&lt;/span&gt;r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[rule(Expr -&amp;gt; LPar Expr RPar)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr_paren&lt;/span&gt;(_l: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, i: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, _r: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// so you can make your IDE happy with &amp;amp;mut self here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[rule(Expr -&amp;gt; IntLit)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr_int&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; self, i: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LogosToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Token&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; lit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i.slice.parse().unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self.literals.push(lit);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[test]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ambiguous&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; lexer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Token::lexer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 + 2 + 3&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; parser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Parser { literals: &lt;span style=&#34;color:#a6e22e&#34;&gt;vec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;[] };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parser.parse(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; lexer).unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// two ways to parse
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res.cloned().collect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    assert_eq!(res, vec![&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时候就是 0.3.0 版本，基本达到了我一开始想要的程度。&lt;/p&gt;
&lt;h2 id=&#34;错误处理&#34;&gt;错误处理&lt;/h2&gt;
&lt;p&gt;在之前写编译原理 PA1 的时候，遇到的一个问题就是，如果自己的代码有错，因为宏展开以后丢失了位置信息，所以报错都会在错误的位置。一番查找以后，找到了解决方案：原样记录下原来的代码（syn::Block），然后通过 quote 宏直接拼接到最终的 TokenStream 中，这样在结果里，虽然代码还是那些代码，但部分的 Token 就有了正确的位置，这样就很方便用户代码的修改了。不过还是不方便找模板部分的代码错误，毕竟那部分确实在原来的代码中没有出现过。&lt;/p&gt;
&lt;p&gt;对于模板中的代码错误，我最终的解决方案是 &lt;code&gt;cargo-expand&lt;/code&gt; ，把我的测试代码和展开后的代码拼接起来，然后在茫茫的无关报错下去找我的错误的地方。虽然不是很好用，但毕竟还是 work 的。另外，宏还需要对用户代码的一些类型进行检查，比如上面的 Expr 对应 i32，这个就需要在各处都保持一致，但这个就需要自己进行检查了。使用了一下 proc_macro_diagnostic 的 API，还不是很好用，等它 stable 吧。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;终于自己手写了一个 Procedure Macro，感觉现有的工具已经比较成熟了，有 syn quote 以后很多操作都很方便。但代码还有很多地方可以优化，慢慢搞吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 49 期</title>
      <link>https://jia.je/misc/2019/11/11/weekly-sharing-49/</link>
      <pubDate>Mon, 11 Nov 2019 17:13:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/11/11/weekly-sharing-49/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;libuv wrapper in C++ &lt;a href=&#34;https://github.com/skypjack/uvw&#34;&gt;https://github.com/skypjack/uvw&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Visual Studio Online &lt;a href=&#34;https://visualstudio.microsoft.com/zh-hans/services/visual-studio-online/&#34;&gt;https://visualstudio.microsoft.com/zh-hans/services/visual-studio-online/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenSSH 的 U2F 支持 &lt;a href=&#34;https://readhacker.news/s/4carE&#34;&gt;https://readhacker.news/s/4carE&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rust 1.39 &lt;a href=&#34;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Rust-1.39-Released&#34;&gt;Rust 1.39 Released With Async-Await Support, Attributes On Function Parameters&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows 也在用 Rust &lt;a href=&#34;https://msrc-blog.microsoft.com/2019/11/07/using-rust-in-windows/&#34;&gt;https://msrc-blog.microsoft.com/2019/11/07/using-rust-in-windows/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 Chrome Dev Tools 调试 Rust &lt;a href=&#34;https://twitter.com/ChromeDevTools/status/1192803818024710145&#34;&gt;https://twitter.com/ChromeDevTools/status/1192803818024710145&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++20 的新 Thread 类型 &lt;a href=&#34;https://medium.com/@vgasparyan1995/a-new-thread-in-c-20-jthread-ebd121ae8906&#34;&gt;https://medium.com/@vgasparyan1995/a-new-thread-in-c-20-jthread-ebd121ae8906&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 48 期</title>
      <link>https://jia.je/misc/2019/11/03/weekly-sharing-48/</link>
      <pubDate>Sun, 03 Nov 2019 13:08:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/11/03/weekly-sharing-48/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;一个特殊的用于显示数字的字体 &lt;a href=&#34;https://blog.janestreet.com/commas-in-big-numbers-everywhere/&#34;&gt;https://blog.janestreet.com/commas-in-big-numbers-everywhere/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Intel 的 SPMD 编译器 &lt;a href=&#34;https://ispc.github.io/&#34;&gt;https://ispc.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基于 Scala 的 notebook &lt;a href=&#34;https://polynote.org/&#34;&gt;https://polynote.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;解析登机牌信息 &lt;a href=&#34;https://github.com/georgesmith46/bcbp&#34;&gt;https://github.com/georgesmith46/bcbp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;常用的 React Hooks 库 &lt;a href=&#34;https://github.com/streamich/react-use&#34;&gt;https://github.com/streamich/react-use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;jwt 工具 &lt;a href=&#34;https://github.com/mike-engel/jwt-cli&#34;&gt;https://github.com/mike-engel/jwt-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用过程宏实现的 delegation in Rust &lt;a href=&#34;https://github.com/chancancode/rust-delegate&#34;&gt;https://github.com/chancancode/rust-delegate&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 47 期</title>
      <link>https://jia.je/misc/2019/10/26/weekly-sharing-47/</link>
      <pubDate>Sat, 26 Oct 2019 20:02:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/10/26/weekly-sharing-47/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;CLion 完善了 Rust 调试支持 &lt;a href=&#34;https://blog.jetbrains.com/clion/2019/10/debugging-rust-code-in-clion/&#34;&gt;https://blog.jetbrains.com/clion/2019/10/debugging-rust-code-in-clion/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nginx HTTP3 的 docker 镜像 &lt;a href=&#34;https://github.com/RanadeepPolavarapu/docker-nginx-http3&#34;&gt;https://github.com/RanadeepPolavarapu/docker-nginx-http3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;手算 Ed25519 &lt;a href=&#34;https://dang.fan/zh-Hans/posts/25519&#34;&gt;https://dang.fan/zh-Hans/posts/25519&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 的 QuickCheck &lt;a href=&#34;https://github.com/BurntSushi/quickcheck&#34;&gt;https://github.com/BurntSushi/quickcheck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 另一个类似 QuickCheck 的测试框架 &lt;a href=&#34;https://github.com/AltSysrq/proptest&#34;&gt;https://github.com/AltSysrq/proptest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cookie 策略要改了 &lt;a href=&#34;https://readhacker.news/s/4bvGG&#34;&gt;https://readhacker.news/s/4bvGG&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 46 期</title>
      <link>https://jia.je/misc/2019/10/19/weekly-sharing-46/</link>
      <pubDate>Sat, 19 Oct 2019 10:21:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/10/19/weekly-sharing-46/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;LibC++ 正式支持 WASI &lt;a href=&#34;https://releases.llvm.org/9.0.0/projects/libcxx/docs/ReleaseNotes.html&#34;&gt;https://releases.llvm.org/9.0.0/projects/libcxx/docs/ReleaseNotes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;从文本反推 regex &lt;a href=&#34;https://github.com/pemistahl/grex&#34;&gt;https://github.com/pemistahl/grex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;KDE 5.17 发布 &lt;a href=&#34;https://www.omgubuntu.co.uk/2019/10/kde-plasma-5-17-features&#34;&gt;https://www.omgubuntu.co.uk/2019/10/kde-plasma-5-17-features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IDA 7.4 发布 支持 Py3 &lt;a href=&#34;https://www.hex-rays.com/products/ida/7.4/index.shtml&#34;&gt;https://www.hex-rays.com/products/ida/7.4/index.shtml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新的 CPU Bug &lt;a href=&#34;https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Chrome-Geminilake-Bug&#34;&gt;https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Chrome-Geminilake-Bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WAST -&amp;gt; WASM in Rust &lt;a href=&#34;https://docs.rs/wast/&#34;&gt;https://docs.rs/wast/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>为 Cisco WLC 配置 Telegraf</title>
      <link>https://jia.je/devops/2019/10/19/configure-telegraf-for-cisco-wlc/</link>
      <pubDate>Sat, 19 Oct 2019 10:14:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2019/10/19/configure-telegraf-for-cisco-wlc/</guid>
      <description>&lt;p&gt;最近想到可以给 Cisco WLC 也配置一下监控，查了一下，果然有一些方法。大概研究了一下，找到了方法：&lt;/p&gt;
&lt;p&gt;把 &lt;a href=&#34;https://github.com/haad/net-snmp/tree/master/mibs&#34;&gt;https://github.com/haad/net-snmp/tree/master/mibs&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/zampat/neteye4/tree/master/monitoring/monitoring-plugins/wireless/cisco/mibs&#34;&gt;https://github.com/zampat/neteye4/tree/master/monitoring/monitoring-plugins/wireless/cisco/mibs&lt;/a&gt; 目录下的所有 .txt 文件放到 /usr/share/snmp/mibs 目录下。&lt;/p&gt;
&lt;p&gt;然后把 &lt;a href=&#34;https://github.com/zampat/neteye4/blob/master/monitoring/monitoring-plugins/wireless/cisco/telegraf.conf&#34;&gt;https://github.com/zampat/neteye4/blob/master/monitoring/monitoring-plugins/wireless/cisco/telegraf.conf&lt;/a&gt; 下面 snmp 的配置复制到 telegraf 配置中，然后修改一下 IP 地址。&lt;/p&gt;
&lt;p&gt;确保 Cisco WLC 的 SNMP 的 Public Community 已经配置好，然后就可以拿到数据了。&lt;/p&gt;
&lt;p&gt;目前可以拿到 WLC 自身的一些运行˙状态信息、AP 的信息、SSID 的信息和 Client 的信息，基本满足了我们的需求。&lt;/p&gt;
&lt;p&gt;参考：https://www.neteye-blog.com/2019/08/monitoring-a-cisco-wireless-controller/&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 45 期</title>
      <link>https://jia.je/misc/2019/10/11/weekly-sharing-45/</link>
      <pubDate>Fri, 11 Oct 2019 14:27:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/10/11/weekly-sharing-45/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Android ARM32/64 环境模拟 &lt;a href=&#34;https://github.com/zhkl0228/unidbg&#34;&gt;https://github.com/zhkl0228/unidbg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Calibre 4.0 &lt;a href=&#34;https://readhacker.news/s/4aukk&#34;&gt;https://readhacker.news/s/4aukk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 的 gRPC 实现 &lt;a href=&#34;https://github.com/hyperium/tonic&#34;&gt;https://github.com/hyperium/tonic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JAVA API 历史 &lt;a href=&#34;https://github.com/marchof/java-almanac&#34;&gt;https://github.com/marchof/java-almanac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elm 开发 dev server &lt;a href=&#34;https://github.com/wking-io/elm-live&#34;&gt;https://github.com/wking-io/elm-live&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;另一个静态网站生成器 &lt;a href=&#34;https://github.com/getzola/zola&#34;&gt;https://github.com/getzola/zola&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Catalina 发布&lt;/li&gt;
&lt;li&gt;Notarization 的相关情况 &lt;a href=&#34;https://eclecticlight.co/2019/06/07/notarization-in-mojave-and-catalina/&#34;&gt;https://eclecticlight.co/2019/06/07/notarization-in-mojave-and-catalina/&lt;/a&gt; &lt;a href=&#34;https://eclecticlight.co/2019/05/31/can-you-tell-whether-code-has-been-notarized/&#34;&gt;https://eclecticlight.co/2019/05/31/can-you-tell-whether-code-has-been-notarized/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;椭圆曲线加密算法 &lt;a href=&#34;https://fangpenlin.com/posts/2019/10/07/elliptic-curve-cryptography-explained/&#34;&gt;https://fangpenlin.com/posts/2019/10/07/elliptic-curve-cryptography-explained/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Travis CI 添加 ARM 支持 &lt;a href=&#34;https://blog.travis-ci.com/2019-10-07-multi-cpu-architecture-support&#34;&gt;https://blog.travis-ci.com/2019-10-07-multi-cpu-architecture-support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CD 上的结构 &lt;a href=&#34;https://readhacker.news/s/4aDHB&#34;&gt;https://readhacker.news/s/4aDHB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线 TAC 的虚拟机 &lt;a href=&#34;https://jia.je/online_tac_vm/&#34;&gt;https://jia.je/online_tac_vm/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线 Decaf 编译和运行 &lt;a href=&#34;https://jia.je/online_decaf/&#34;&gt;https://jia.je/online_decaf/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 44 期</title>
      <link>https://jia.je/misc/2019/10/04/weekly-sharing-44/</link>
      <pubDate>Fri, 04 Oct 2019 15:47:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/10/04/weekly-sharing-44/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Modern Script Loading &lt;a href=&#34;https://jasonformat.com/modern-script-loading/&#34;&gt;https://jasonformat.com/modern-script-loading/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何实现 closure &lt;a href=&#34;http://craftinginterpreters.com/closures.html&#34;&gt;http://craftinginterpreters.com/closures.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加速 uniform_int_distribution 实现 &lt;a href=&#34;https://lemire.me/blog/2019/09/28/doubling-the-speed-of-stduniform_int_distribution-in-the-gnu-c-library/&#34;&gt;https://lemire.me/blog/2019/09/28/doubling-the-speed-of-stduniform_int_distribution-in-the-gnu-c-library/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 FPGA 上运行 Rocket Chip 教程 &lt;a href=&#34;https://github.com/cnrv/fpga-rocket-chip&#34;&gt;https://github.com/cnrv/fpga-rocket-chip&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Xilinx Bitstream 逆向 &lt;a href=&#34;https://prjxray.readthedocs.io/en/latest/&#34;&gt;https://prjxray.readthedocs.io/en/latest/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JVM 利用 SIGSEGV 进行 null 检测 &lt;a href=&#34;https://jcdav.is/2015/10/06/SIGSEGV-as-control-flow/&#34;&gt;https://jcdav.is/2015/10/06/SIGSEGV-as-control-flow/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Async/Await 进入 Rust Beta &lt;a href=&#34;https://blog.rust-lang.org/2019/09/30/Async-await-hits-beta.html&#34;&gt;https://blog.rust-lang.org/2019/09/30/Async-await-hits-beta.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Rust 里实现 Plugin &lt;a href=&#34;http://adventures.michaelfbryan.com/posts/plugins-in-rust/&#34;&gt;http://adventures.michaelfbryan.com/posts/plugins-in-rust/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>用 Nginx 作为 RTMP 服务器并提供直播服务</title>
      <link>https://jia.je/software/2019/09/28/use-nginx-as-rtmp-server/</link>
      <pubDate>Sat, 28 Sep 2019 10:15:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2019/09/28/use-nginx-as-rtmp-server/</guid>
      <description>&lt;p&gt;Nginx 除了可以做 HTTP 服务器以外，还可以做 RTMP 服务器，同时转成 HLS 再提供给用户，这样可以实现一个直播的服务器，用 OBS 推上来即可。&lt;/p&gt;
&lt;p&gt;首先要安装 nginx-rtmp-server 模块，很多的发行版都已经包含了，它的主页是 &lt;a href=&#34;https://github.com/arut/nginx-rtmp-module&#34;&gt;https://github.com/arut/nginx-rtmp-module&lt;/a&gt;，下面很多内容也是来自于它的教程中。&lt;/p&gt;
&lt;p&gt;接着，配置 Nginx，在 nginx.conf 的顶层中添加如下的配置：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rtmp {
    server {
            listen 1935;
            chunk_size 4096;

            application live {
                    live on;
                    record off;

                    hls on;
                    hls_path /path/to/save/hls;
                    hls_fragment 1s;
                    hls_playlist_length 10s;
            }

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里表示 Nginx 要在 1935 监听一个 RTMP 服务器，然后把 live 下的视频切成片然后存在目录下，提供一个 m3u8 文件以供播放器使用。这里的参数都可以按照实际需求进行调整。这时候应该可以看到 nginx 正确监听 1935 端口，这是 rtmp 的默认端口。&lt;/p&gt;
&lt;p&gt;接着，需要在一个 HTTP server 路径下把 HLS serve 出去：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;        location /hls {
            # Serve HLS fragments
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /path/to/save/hls;
            add_header Cache-Control no-cache;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时候，如果你用 rtmp 推一个流（比如用 OBS）到 rtmp://SERVER_IP/live/SOMETHING，那么在对应的目录下会看到 SOMETHING 开头的一系列文件；用播放器打开 http://SERVER_IP/hls/SOMETHING.m3u8 就可以看到直播的视频流了。&lt;/p&gt;
&lt;p&gt;如果要直接在浏览器里播放 HLS，需要用 Flowplayer，直接参考官方的例子即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;player&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flowplayer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#player&amp;#34;&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;clip&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;sources&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/x-mpegurl&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://SERVER_IP/hls/SOMETHING.m3u8&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;autoplay&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;live&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/script&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的各个路径可以按照实际需求改动。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 43 期</title>
      <link>https://jia.je/misc/2019/09/28/weekly-sharing-43/</link>
      <pubDate>Sat, 28 Sep 2019 10:04:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/09/28/weekly-sharing-43/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Async in C &lt;a href=&#34;https://github.com/naasking/async.h&#34;&gt;https://github.com/naasking/async.h&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mozilla 的 QUIC 实现 &lt;a href=&#34;https://github.com/mozilla/neqo/&#34;&gt;https://github.com/mozilla/neqo/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在 PCI 上做的攻击 &lt;a href=&#34;https://github.com/ufrisk/pcileech&#34;&gt;https://github.com/ufrisk/pcileech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;对 X 的原理介绍 &lt;a href=&#34;https://magcius.github.io/xplain/article/index.html&#34;&gt;https://magcius.github.io/xplain/article/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ethernet 物理层的介绍 &lt;a href=&#34;https://www.analog.com/media/en/technical-documentation/application-notes/EE-269.pdf&#34;&gt;https://www.analog.com/media/en/technical-documentation/application-notes/EE-269.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Overleaf 更新了 TeX Live 版本 &lt;a href=&#34;https://www.overleaf.com/blog/tex-live-upgrade-september-2019&#34;&gt;https://www.overleaf.com/blog/tex-live-upgrade-september-2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下一代 proc macro？https://github.com/alexcrichton/proc-macro2&lt;/li&gt;
&lt;li&gt;iOS 13 API 变化 &lt;a href=&#34;https://nshipster.com/ios-13/&#34;&gt;https://nshipster.com/ios-13/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOS 13.1.1 发布&lt;/li&gt;
&lt;li&gt;Rust 编译期 HashMap &lt;a href=&#34;https://github.com/sfackler/rust-phf&#34;&gt;https://github.com/sfackler/rust-phf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;V8 加入顶层 Await 支持 &lt;a href=&#34;https://chromium.googlesource.com/v8/v8.git/+/0ceee9ad28c21bc4971fb237cf87eb742fc787b8%5E%21/&#34;&gt;https://chromium.googlesource.com/v8/v8.git/+/0ceee9ad28c21bc4971fb237cf87eb742fc787b8%5E%21/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ASCII 码表的一种理解 &lt;a href=&#34;https://garbagecollected.org/2017/01/31/four-column-ascii/&#34;&gt;https://garbagecollected.org/2017/01/31/four-column-ascii/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cloudflare 启用 HTTP/3 &lt;a href=&#34;https://blog.cloudflare.com/http3-the-past-present-and-future/&#34;&gt;https://blog.cloudflare.com/http3-the-past-present-and-future/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ZFS 发布 0.8.2 &lt;a href=&#34;https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.8.2&#34;&gt;https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.8.2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 42 期</title>
      <link>https://jia.je/misc/2019/09/21/weekly-sharing-42/</link>
      <pubDate>Sat, 21 Sep 2019 09:50:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/09/21/weekly-sharing-42/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Dart 2.5 发布&lt;/li&gt;
&lt;li&gt;Rust USB device 库 &lt;a href=&#34;https://github.com/mvirkkunen/usb-device&#34;&gt;https://github.com/mvirkkunen/usb-device&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;同步视频的 timecode &lt;a href=&#34;https://github.com/cnbeining/autotimecode&#34;&gt;https://github.com/cnbeining/autotimecode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;xv6 今年换到了 riscv &lt;a href=&#34;https://github.com/mit-pdos/xv6-riscv-fall19&#34;&gt;https://github.com/mit-pdos/xv6-riscv-fall19&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pdf 文本搜索 &lt;a href=&#34;https://pdfgrep.org/&#34;&gt;https://pdfgrep.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOS 13 正式版发布&lt;/li&gt;
&lt;li&gt;exFAT 驱动进入 Linux 5.4 &lt;a href=&#34;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Linux-5.3-Staging-Changes&#34;&gt;Microsoft exFAT File-System Mailed In For Linux 5.4 Along With Promoted EROFS &amp;amp; Greybus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bash 详细教程 &lt;a href=&#34;https://github.com/dylanaraps/pure-bash-bible&#34;&gt;https://github.com/dylanaraps/pure-bash-bible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 编译到 iOS bitcode &lt;a href=&#34;https://github.com/getditto/rust-bitcode&#34;&gt;https://github.com/getditto/rust-bitcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JS 运行时间 in V8 &lt;a href=&#34;https://v8.dev/blog/cost-of-javascript-2019#json&#34;&gt;https://v8.dev/blog/cost-of-javascript-2019#json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;USB3.0 PIPE 接口实现 &lt;a href=&#34;https://github.com/enjoy-digital/usb3_pipe&#34;&gt;https://github.com/enjoy-digital/usb3_pipe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LLVM 9.0 发布 &lt;a href=&#34;https://lists.llvm.org/pipermail/llvm-dev/2019-September/135304.html&#34;&gt;https://lists.llvm.org/pipermail/llvm-dev/2019-September/135304.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Safari 13.0 发布&lt;/li&gt;
&lt;li&gt;Rust 模板引擎 &lt;a href=&#34;https://github.com/botika/yarte&#34;&gt;https://github.com/botika/yarte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;systemd 开始掌握 home 目录 &lt;a href=&#34;https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=systemd-homed&#34;&gt;https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=systemd-homed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;命令行的 cheatsheet 工具 &lt;a href=&#34;https://github.com/denisidoro/navi&#34;&gt;https://github.com/denisidoro/navi&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>在 macOS 上创建 ESP 镜像文件</title>
      <link>https://jia.je/software/2019/09/14/create-esp-partition-macos/</link>
      <pubDate>Sat, 14 Sep 2019 16:07:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2019/09/14/create-esp-partition-macos/</guid>
      <description>&lt;p&gt;最近 rCore 添加了 UEFI 支持，在 QEMU 里跑自然是没有问题，然后尝试放到 VMWare 虚拟机里跑，这时候问题就来了：需要一个带有 ESP 盘的 vmdk 虚拟盘。搜索了一下网络，找到了解决方案：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hdiutil create -fs fat32 -ov -size 60m -volname ESP -format UDTO -srcfolder esp uefi.cdr
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;60m &lt;/code&gt; &lt;code&gt;esp&lt;/code&gt; 和 &lt;code&gt;uefi.cdr&lt;/code&gt; 都可以按照实际情况修改。它会把 esp 目录下的文件放到 ESP 分区中，然后得到一个镜像文件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;uefi.cdr: DOS/MBR boot sector; partition 1 : ID=0xb, start-CHS (0x3ff,254,63), end-CHS (0x3ff,254,63), startsector 1, 122879 sectors, extended partition table (last)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接着转换为 vmdk：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-img convert -O vmdk uefi.cdr uefi.vmdk
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 41 期</title>
      <link>https://jia.je/misc/2019/09/14/weekly-sharing-41/</link>
      <pubDate>Sat, 14 Sep 2019 07:50:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/09/14/weekly-sharing-41/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Wget2 1.99.2 beta 发布 &lt;a href=&#34;https://lists.gnu.org/archive/html/info-gnu/2019-09/msg00001.html&#34;&gt;https://lists.gnu.org/archive/html/info-gnu/2019-09/msg00001.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;独立的 printf 实现 &lt;a href=&#34;https://github.com/mpaland/printf&#34;&gt;https://github.com/mpaland/printf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unicode 字符串长度统计 &lt;a href=&#34;https://hsivonen.fi/string-length/&#34;&gt;https://hsivonen.fi/string-length/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C 类型推断 &lt;a href=&#34;https://github.com/ltcmelo/psychec#generic-programming&#34;&gt;https://github.com/ltcmelo/psychec#generic-programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang 9.0 支持 Linux 内核编译 &lt;a href=&#34;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=LLVM-9.0-Clang-9.0-Features&#34;&gt;The New Features Of LLVM 9.0 &amp;amp; Clang 9.0 - Includes Building The Linux x86_64 Kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;可控制的 USB 设备 &lt;a href=&#34;https://github.com/usb-tools/Facedancer&#34;&gt;https://github.com/usb-tools/Facedancer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;USB 监听器 &lt;a href=&#34;https://github.com/openvizsla/ov_ftdi&#34;&gt;https://github.com/openvizsla/ov_ftdi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复一个截断的视频 &lt;a href=&#34;https://github.com/ponchio/untrunc&#34;&gt;https://github.com/ponchio/untrunc&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 40 期</title>
      <link>https://jia.je/misc/2019/09/06/weekly-sharing-40/</link>
      <pubDate>Fri, 06 Sep 2019 20:41:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/09/06/weekly-sharing-40/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;TeX Typesetting Game &lt;a href=&#34;https://texnique.xyz/&#34;&gt;https://texnique.xyz/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Writing Linux Kernel Module in Rust &lt;a href=&#34;https://github.com/fishinabarrel/linux-kernel-module-rust&#34;&gt;https://github.com/fishinabarrel/linux-kernel-module-rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sipeed Longan Nano RISC-V 开发板 &lt;a href=&#34;https://readhacker.news/s/48EBG&#34;&gt;https://readhacker.news/s/48EBG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Systemd 加载 BPF 防火墙 &lt;a href=&#34;https://kailueke.gitlab.io/systemd-bpf-firewall-loader/&#34;&gt;https://kailueke.gitlab.io/systemd-bpf-firewall-loader/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;方舟编译器 &lt;a href=&#34;https://code.opensource.huaweicloud.com/HarmonyOS/OpenArkCompiler.git&#34;&gt;https://code.opensource.huaweicloud.com/HarmonyOS/OpenArkCompiler.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;XLOOKUP 函数 &lt;a href=&#34;https://techcommunity.microsoft.com/t5/Excel-Blog/Announcing-XLOOKUP/ba-p/811376&#34;&gt;https://techcommunity.microsoft.com/t5/Excel-Blog/Announcing-XLOOKUP/ba-p/811376&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SystemVerilog to Verilog 转译 &lt;a href=&#34;https://github.com/zachjs/sv2v&#34;&gt;https://github.com/zachjs/sv2v&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;USB 4.0 发布 &lt;a href=&#34;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=USB-4.0-Specification-Published&#34;&gt;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=USB-4.0-Specification-Published&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Android 10 发布 &lt;a href=&#34;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Android-10-Released&#34;&gt;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Android-10-Released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOS 13.1 beta 2 发布&lt;/li&gt;
&lt;li&gt;对 iOS 设备抓包 &lt;a href=&#34;http://blog.imaou.com/opensource/2014/12/14/pcapd_diagnostic_packet_capture.html&#34;&gt;http://blog.imaou.com/opensource/2014/12/14/pcapd_diagnostic_packet_capture.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google 的差分隐私库 &lt;a href=&#34;https://developers.googleblog.com/2019/09/enabling-developers-and-organizations.html&#34;&gt;https://developers.googleblog.com/2019/09/enabling-developers-and-organizations.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Apple Music 第三方 App &lt;a href=&#34;https://github.com/Musish/Musish&#34;&gt;https://github.com/Musish/Musish&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 39 期</title>
      <link>https://jia.je/misc/2019/08/30/weekly-sharing-39/</link>
      <pubDate>Fri, 30 Aug 2019 10:08:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/08/30/weekly-sharing-39/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;另一个 Pattern Matching in C++ 库 &lt;a href=&#34;https://github.com/mpark/patterns&#34;&gt;https://github.com/mpark/patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 编写的一个 shell &lt;a href=&#34;http://www.jonathanturner.org/2019/08/introducing-nushell.html&#34;&gt;http://www.jonathanturner.org/2019/08/introducing-nushell.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vim 的游戏教程 &lt;a href=&#34;https://readhacker.news/s/48nbJ&#34;&gt;https://readhacker.news/s/48nbJ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在 throw 的时候同时抓取 SO 信息 &lt;a href=&#34;https://github.com/shobrook/rebound/&#34;&gt;https://github.com/shobrook/rebound/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;颜色生成工具 &lt;a href=&#34;https://github.com/sharkdp/pastel&#34;&gt;https://github.com/sharkdp/pastel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;转换 Escape Code 到 HTML &lt;a href=&#34;https://github.com/theZiz/aha&#34;&gt;https://github.com/theZiz/aha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOS 13.1 beta 发布&lt;/li&gt;
&lt;li&gt;苹果特别活动定于 9.11 日&lt;/li&gt;
&lt;li&gt;exFAT 规范发布 &lt;a href=&#34;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Microsoft-exFAT-Specification&#34;&gt;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Microsoft-exFAT-Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;可视化的 5 阶段流水线 RISC-V 模拟器 &lt;a href=&#34;https://github.com/mortbopet/Ripes&#34;&gt;https://github.com/mortbopet/Ripes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 38 期</title>
      <link>https://jia.je/misc/2019/08/23/weekly-sharing-38/</link>
      <pubDate>Fri, 23 Aug 2019 19:51:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/08/23/weekly-sharing-38/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;针对部分 HTTP/2 实现的新漏洞 &lt;a href=&#34;https://github.com/Netflix/security-bulletins/blob/master/advisories/third-party/2019-002.md&#34;&gt;https://github.com/Netflix/security-bulletins/blob/master/advisories/third-party/2019-002.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;只读 tmux 加魔改 &lt;a href=&#34;https://brianmckenna.org/blog/guest_tmux&#34;&gt;https://brianmckenna.org/blog/guest_tmux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 编译期断言 &lt;a href=&#34;https://github.com/nvzqz/static-assertions-rs&#34;&gt;https://github.com/nvzqz/static-assertions-rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 运行时解压版的 include_bytes &lt;a href=&#34;https://github.com/SOF3/include-flate&#34;&gt;https://github.com/SOF3/include-flate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;把 Rust 标准库进行 async 化的尝试 &lt;a href=&#34;https://async.rs/blog/announcing-async-std/#&#34;&gt;https://async.rs/blog/announcing-async-std/#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;git 添加 switch/restore 命令 &lt;a href=&#34;https://github.blog/2019-08-16-highlights-from-git-2-23/&#34;&gt;https://github.blog/2019-08-16-highlights-from-git-2-23/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Flash Player in Rust &lt;a href=&#34;https://github.com/ruffle-rs/ruffle&#34;&gt;https://github.com/ruffle-rs/ruffle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matplotlib Cheatsheet &lt;a href=&#34;https://github.com/rougier/matplotlib-cheatsheet&#34;&gt;https://github.com/rougier/matplotlib-cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;macOS Catalina 10.15 beta 6 发布&lt;/li&gt;
&lt;li&gt;Flash Decompiler &lt;a href=&#34;https://github.com/jindrapetrik/jpexs-decompiler&#34;&gt;https://github.com/jindrapetrik/jpexs-decompiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Yubikey 发布 5Ci &lt;a href=&#34;https://readhacker.news/s/489yu&#34;&gt;https://readhacker.news/s/489yu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IBM 开放 Power 指令集 &lt;a href=&#34;https://readhacker.news/s/48aiH&#34;&gt;https://readhacker.news/s/48aiH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOS 13 beta 8 发布&lt;/li&gt;
&lt;li&gt;GitHub 支持 WebAuthn &lt;a href=&#34;https://readhacker.news/s/48dXM&#34;&gt;https://readhacker.news/s/48dXM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;编译器优化带来的安全漏洞 &lt;a href=&#34;https://readhacker.news/s/48dke&#34;&gt;https://readhacker.news/s/48dke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;obscure C features &lt;a href=&#34;https://multun.net/obscure-c-features.html&#34;&gt;https://multun.net/obscure-c-features.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 37 期</title>
      <link>https://jia.je/misc/2019/08/16/weekly-sharing-37/</link>
      <pubDate>Fri, 16 Aug 2019 11:29:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/08/16/weekly-sharing-37/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Rust netlink 库 &lt;a href=&#34;https://github.com/jbaublitz/neli&#34;&gt;https://github.com/jbaublitz/neli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 处理 signal 进行配置的 reload &lt;a href=&#34;https://vorner.github.io/2019/08/11/runtime-configuration-reloading.html&#34;&gt;https://vorner.github.io/2019/08/11/runtime-configuration-reloading.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;macOS 添加了 VirtIO 驱动支持 &lt;a href=&#34;https://passthroughpo.st/mac-os-adds-early-support-for-virtio-qemu/&#34;&gt;https://passthroughpo.st/mac-os-adds-early-support-for-virtio-qemu/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个 GNU readline 替代品 &lt;a href=&#34;https://github.com/AmokHuginnsson/replxx&#34;&gt;https://github.com/AmokHuginnsson/replxx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 1.37.0 发布 &lt;a href=&#34;https://blog.rust-lang.org/2019/08/15/Rust-1.37.0.html&#34;&gt;https://blog.rust-lang.org/2019/08/15/Rust-1.37.0.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOS 13 DB7 (17A5565b) 发布&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>macOS 下读取并解析 EDID</title>
      <link>https://jia.je/software/2019/08/14/read-edid-decode-macos/</link>
      <pubDate>Wed, 14 Aug 2019 20:39:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2019/08/14/read-edid-decode-macos/</guid>
      <description>&lt;p&gt;之前听说了 EDID 的存在，但是一直没有细究里面的格式和内容。今天了解了一下，发现其实非常简单，下面是方法：&lt;/p&gt;
&lt;p&gt;首先获取所有显示器输出的 EDID：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ioreg -lw0 | grep IODisplayEDID
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出里会出现 &amp;ldquo;IODisplayEDID&amp;rdquo; = &amp;lt;00ffxxxxxxxxxxxxx&amp;gt; 的内容，尖括号内的就是 EDID 的内容。接着，我们采用 &lt;a href=&#34;https://git.linuxtv.org/edid-decode.git/&#34;&gt;edid-decode&lt;/a&gt; 进行解析：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone git://linuxtv.org/edid-decode.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd edid-decode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./edid-decode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;Paste EDID here&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就可以看到很详细的 EDID 数据解析了。&lt;/p&gt;
&lt;p&gt;ref: &lt;a href=&#34;https://gist.github.com/OneSadCookie/641549&#34;&gt;https://gist.github.com/OneSadCookie/641549&lt;/a&gt; &lt;a href=&#34;https://www.avsforum.com/forum/115-htpc-mac-chat/1466910-ability-dump-display-s-edid-mac.html&#34;&gt;https://www.avsforum.com/forum/115-htpc-mac-chat/1466910-ability-dump-display-s-edid-mac.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 Linux 下捕获 Framebuffer</title>
      <link>https://jia.je/software/2019/08/12/framebuffer-capture/</link>
      <pubDate>Mon, 12 Aug 2019 20:18:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2019/08/12/framebuffer-capture/</guid>
      <description>&lt;p&gt;最近需要在 linux 下抓取 Framebuffer 的内容，在网上找到了两种方法，在我这里只有第二、第三种可以成功，没有细究具体原因，可能与我的 Framebuffer 配置有关。方法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;fbgrab&lt;/code&gt; ：命令就是 fbgrab image.png，直接得到 png 文件，格式是对的，但是用软件打开就是一片空白。用 ImageMagick 转换为 jpg 可以看到一些内容，但是和实际有些不一样。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fbdump&lt;/code&gt; ：命令就是 fbdump &amp;gt; image.ppm，得到裸的 ppm 文件，图像是正确的，也可以转换为别的格式正常打开。&lt;/li&gt;
&lt;li&gt;cat+脚本处理：直接 cat /dev/fb0 &amp;gt; image.rgb，然后用下面的脚本转换为 png。由于 Framebuffer 格式为 RGB，本来 A 所在的 channel 都为 0，所以用一些软件直接打开都是空白，只好写了脚本直接跳过 Alpha Channel。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Framebuffer 配置（ &lt;code&gt;fbset&lt;/code&gt; 输出）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mode &amp;#34;640x480-0&amp;#34;
        # D: 0.000 MHz, H: 0.000 kHz, V: 0.000 Hz
        geometry 640 480 1024 480 32
        timings 0 0 0 0 0 0 0
        accel false
        rgba 8/16,8/8,8/0,0/0
endmode
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;转换脚本（参考 &lt;a href=&#34;https://owen-hsu.blogspot.com/2016/06/tips-framebuffer.html&#34;&gt;[Tips] 擷取 framebuffer 畫面&lt;/a&gt;）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl -w&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;320&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$pixels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $w &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; $h;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;open OUT, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|pnmtopng&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t pipe pnmtopng: $!\n&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;printf OUT &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P6%d %d\n255\n&amp;#34;&lt;/span&gt;, $w, $h;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((read STDIN, $raw, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; $pixels&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   $short &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;, $raw);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; OUT pack(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C3&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ($short &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff0000&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ($short &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff00&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ($short &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;close OUT;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用法： &lt;code&gt;cat image.rgb | perl script.pl 1024 480 &amp;gt; console.png&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 36 期</title>
      <link>https://jia.je/misc/2019/08/10/weekly-sharing-36/</link>
      <pubDate>Sat, 10 Aug 2019 09:15:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/08/10/weekly-sharing-36/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;QuickJS + libuv &lt;a href=&#34;https://github.com/saghul/qjsuv&#34;&gt;https://github.com/saghul/qjsuv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 实现的 Ruby &lt;a href=&#34;https://github.com/artichoke/artichoke&#34;&gt;https://github.com/artichoke/artichoke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;类似 JSON 的数据格式 &lt;a href=&#34;https://cbor.io/&#34;&gt;https://cbor.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rls 二代目 &lt;a href=&#34;https://github.com/rust-analyzer/rust-analyzer&#34;&gt;https://github.com/rust-analyzer/rust-analyzer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;给 MacBook 添加触屏支持 &lt;a href=&#34;https://github.com/bijection/sistine&#34;&gt;https://github.com/bijection/sistine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用于 MBP with T2 的 Linux patch &lt;a href=&#34;https://github.com/aunali1/linux-mbp-arch&#34;&gt;https://github.com/aunali1/linux-mbp-arch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在 tmux 中使用 Touch ID 认证 sudo &lt;a href=&#34;https://blog.birkhoff.me/make-sudo-authenticate-with-touch-id-in-a-tmux/&#34;&gt;https://blog.birkhoff.me/make-sudo-authenticate-with-touch-id-in-a-tmux/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOS 13 beta 6 发布&lt;/li&gt;
&lt;li&gt;Linux Journal 结束了它的使命&lt;/li&gt;
&lt;li&gt;ssh 8.0 Add support for ECDSA keys in PKCS#11 tokens&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>用 PulseView 配合 DSLogic 调试 SPI Flash</title>
      <link>https://jia.je/hardware/2019/08/02/pulseview-dslogic/</link>
      <pubDate>Fri, 02 Aug 2019 23:15:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2019/08/02/pulseview-dslogic/</guid>
      <description>&lt;p&gt;最近需要用到逻辑分析仪来调试 SPI Flash，设备是 DreamSourceLab 的 DSLogic，最开始用的是官方的 DSView，确实能够抓到 SPI 的信号，也可以解析出一些 SPI Flash 的数据，但是很多是不完整的。&lt;/p&gt;
&lt;p&gt;后来把源码下载下来，发现是基于 sigrok 和 PulseView 做的一个魔改版，然后 sigrok 官网上最新的版本已经支持了 DSLogic，于是就用 PulseView 替代 DSView。一开始遇到的问题是没有 firmware，一番搜索找到了&lt;a href=&#34;https://sigrok.org/wiki/DreamSourceLab_DSLogic&#34;&gt;解决方案&lt;/a&gt;，按照脚本下载好文件即可。&lt;/p&gt;
&lt;p&gt;进到 PulseView 以后，把 SPI 的四路信号接上，然后抓了一段信号，解析：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/pulseview.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到它正确地解析出来了 Fast Read 命令。由于 DSView 它 fork 自一个比较老的版本，所以它并不能正确解析出来。&lt;/p&gt;
&lt;p&gt;P.S. Linux 下它界面显示比 macOS 下好看一些，估计是没有适配好。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 35 期</title>
      <link>https://jia.je/misc/2019/08/02/weekly-sharing-35/</link>
      <pubDate>Fri, 02 Aug 2019 14:26:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/08/02/weekly-sharing-35/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Apple Touch Bar 的 Windows 第三方支持 &lt;a href=&#34;https://github.com/imbushuo/DFRDisplayKm&#34;&gt;https://github.com/imbushuo/DFRDisplayKm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WSL2 新的进展 &lt;a href=&#34;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Windows-WSL2-Localhost-Plus&#34;&gt;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Windows-WSL2-Localhost-Plus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lightning 转接头里面居然跑 iBoot 和 Darwin &lt;a href=&#34;https://readhacker.news/s/46Zde&#34;&gt;https://readhacker.news/s/46Zde&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOS 13 beta 5 发布&lt;/li&gt;
&lt;li&gt;ES2019 前瞻 &lt;a href=&#34;https://blog.tildeloop.com/posts/javascript-what%E2%80%99s-new-in-es2019&#34;&gt;https://blog.tildeloop.com/posts/javascript-what%E2%80%99s-new-in-es2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 可持久化数据结构 &lt;a href=&#34;https://github.com/orium/rpds&#34;&gt;https://github.com/orium/rpds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 不可变数据结构 &lt;a href=&#34;https://github.com/bodil/im-rs&#34;&gt;https://github.com/bodil/im-rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;macOS Catalina 10.15 beta 5 发布&lt;/li&gt;
&lt;li&gt;Algebraic Effect &lt;a href=&#34;https://overreacted.io/algebraic-effects-for-the-rest-of-us/&#34;&gt;https://overreacted.io/algebraic-effects-for-the-rest-of-us/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Donald Knuth 对于 Sensitivity Proof 证明的简化 &lt;a href=&#34;https://readhacker.news/s/47fsA&#34;&gt;https://readhacker.news/s/47fsA&lt;/a&gt; 真是老当益壮&lt;/li&gt;
&lt;li&gt;TLS1.3 标准的简化版 &lt;a href=&#34;https://readhacker.news/s/47eG9&#34;&gt;https://readhacker.news/s/47eG9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iTerm 3.3 发布 &lt;a href=&#34;https://iterm2.com/downloads/stable/iTerm2-3_3_0.changelog&#34;&gt;https://iterm2.com/downloads/stable/iTerm2-3_3_0.changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 34 期</title>
      <link>https://jia.je/misc/2019/07/27/weekly-sharing-34/</link>
      <pubDate>Sat, 27 Jul 2019 13:31:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/07/27/weekly-sharing-34/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;macOS Mojave 10.14.6 iOS 12.4 正式版更新发布，还有老版本的更新 &lt;a href=&#34;https://www.macrumors.com/2019/07/22/apple-releases-gps-bug-fix-older-iphones-ipads/&#34;&gt;https://www.macrumors.com/2019/07/22/apple-releases-gps-bug-fix-older-iphones-ipads/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CLion 2019.2 添加了 GDB Server 的调试支持，可以用 OpenOCD。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 33 期</title>
      <link>https://jia.je/misc/2019/07/19/weekly-sharing-33/</link>
      <pubDate>Fri, 19 Jul 2019 21:28:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/07/19/weekly-sharing-33/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;一个讲 Rust 比较硬核的博客 &lt;a href=&#34;http://system.joekain.com/&#34;&gt;http://system.joekain.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;利用 fzf 实现 shell 的 REPL &lt;a href=&#34;https://github.com/pawelduda/fzf-live-repl&#34;&gt;https://github.com/pawelduda/fzf-live-repl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;类似 Vue 的前端 Go 框架 &lt;a href=&#34;https://www.vugu.org/doc/start&#34;&gt;https://www.vugu.org/doc/start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOS 13 beta 4 发布 14A5534f&lt;/li&gt;
&lt;li&gt;针对 T2 NVMe 的 patch &lt;a href=&#34;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=NVMe-Patches-LKML-Apple-Mac&#34;&gt;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=NVMe-Patches-LKML-Apple-Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个前端非对称加密的问卷网站 &lt;a href=&#34;https://blog.fugoes.xyz/crypto-q/&#34;&gt;https://blog.fugoes.xyz/crypto-q/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>前端解析上传的 CSV</title>
      <link>https://jia.je/programming/2019/07/17/parse-upload-csv-frontend/</link>
      <pubDate>Wed, 17 Jul 2019 13:05:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2019/07/17/parse-upload-csv-frontend/</guid>
      <description>&lt;p&gt;之前做过一个在前端解析上传的 CSV 的功能，但是只能支持部分的 encoding，遇到 gbk 就傻眼了。一番研究以后，找到了比较科学的方案：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Chardet&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chardet&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Iconv&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;iconv-lite&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reader&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FileReader&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;reader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;onload&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// detect encoding and convert
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encoding&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Chardet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;detect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;view&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Iconv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;decode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;view&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;encoding&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;csvData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Papa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// do anything with it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;reader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readAsArrayBuffer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;blob_here&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;依赖了两个库：&lt;code&gt;chardet&lt;/code&gt; 和 &lt;code&gt;iconv-lite&lt;/code&gt; ，测试了一下，解析 UTF-8 GBK UTF-16BE 都没问题。&lt;/p&gt;
&lt;p&gt;P.S. 在生成 csv 的时候，也会出现 Excel 打开后乱码的问题，一开始我以为需要转 UTF-16 然后再添加 BOM Mark，后来发现只要在最前面加上 0xEF 0xBB 0xFB（UTF-8 编码下的 BOM Mark）即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 32 期</title>
      <link>https://jia.je/misc/2019/07/12/weekly-sharing-32/</link>
      <pubDate>Fri, 12 Jul 2019 23:42:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/07/12/weekly-sharing-32/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Rpi4 的 Type-C 设计有问题  &lt;a href=&#34;https://readhacker.news/s/45WYc&#34;&gt;https://readhacker.news/s/45WYc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Debian buster released&lt;/li&gt;
&lt;li&gt;USB Type-C Serial adapter with WCH/FTDI &lt;a href=&#34;https://github.com/z4yx/USB-C-Serial&#34;&gt;https://github.com/z4yx/USB-C-Serial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux 5.2 Kernel released &lt;a href=&#34;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Linux-5.2-Released&#34;&gt;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Linux-5.2-Released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOS/iPadOS PB2 发布，与 DB3 差了一个小版本号&lt;/li&gt;
&lt;li&gt;Pacman in 512 bytes of x86 boot sector machine code &lt;a href=&#34;https://readhacker.news/s/466Zm&#34;&gt;https://readhacker.news/s/466Zm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;clang 的 use after move checker 使用 &lt;a href=&#34;https://awesomekling.github.io/Catching-use-after-move-bugs-with-Clang-consumed-annotations/&#34;&gt;https://awesomekling.github.io/Catching-use-after-move-bugs-with-Clang-consumed-annotations/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 31 期</title>
      <link>https://jia.je/misc/2019/07/05/weekly-sharing-31/</link>
      <pubDate>Fri, 05 Jul 2019 16:06:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/07/05/weekly-sharing-31/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;一个 Docker 的 TUI &lt;a href=&#34;https://github.com/jesseduffield/lazydocker&#34;&gt;https://github.com/jesseduffield/lazydocker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线 Git cheatsheet &lt;a href=&#34;http://ndpsoftware.com/git-cheatsheet.html&#34;&gt;http://ndpsoftware.com/git-cheatsheet.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;带历史合并两个 Git 仓库 &lt;a href=&#34;https://stackoverflow.com/a/10548919&#34;&gt;https://stackoverflow.com/a/10548919&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOS 13 Dev Beta 3 &lt;a href=&#34;https://mp.weixin.qq.com/s/6cxLXOYgeP6QkDpa9kdoug&#34;&gt;https://mp.weixin.qq.com/s/6cxLXOYgeP6QkDpa9kdoug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOS 13 FaceTime Attention Correction &lt;a href=&#34;https://readhacker.news/s/45QX2&#34;&gt;https://readhacker.news/s/45QX2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 30 期</title>
      <link>https://jia.je/misc/2019/06/28/weekly-sharing-30/</link>
      <pubDate>Fri, 28 Jun 2019 19:19:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/06/28/weekly-sharing-30/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;一个可参考的防止 side channel attack 的方法 &lt;a href=&#34;https://www.undeadly.org/cgi?action=article;sid=20190621081455&#34;&gt;https://www.undeadly.org/cgi?action=article;sid=20190621081455&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物理上镜像百兆的方法 实测可用 &lt;a href=&#34;https://greatscottgadgets.com/throwingstar/&#34;&gt;https://greatscottgadgets.com/throwingstar/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微软员工写的 malloc &lt;a href=&#34;https://github.com/microsoft/mimalloc&#34;&gt;https://github.com/microsoft/mimalloc&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超标量乱序执行的 x86 软核 &lt;a href=&#34;https://tspace.library.utoronto.ca/bitstream/1807/80713/1/Wong_Henry_T_201711_PhD_thesis.pdf&#34;&gt;https://tspace.library.utoronto.ca/bitstream/1807/80713/1/Wong_Henry_T_201711_PhD_thesis.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rust 的 wireshark 替代 &lt;a href=&#34;https://github.com/kpcyrd/sniffglue&#34;&gt;https://github.com/kpcyrd/sniffglue&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rpi 4 发布 &lt;a href=&#34;https://readhacker.news/s/45nK9&#34;&gt;https://readhacker.news/s/45nK9&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;iOS/macOS Catalina PB1 发布（= DB2）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dbg! 移植到了 C++ &lt;a href=&#34;https://github.com/sharkdp/dbg-macro&#34;&gt;https://github.com/sharkdp/dbg-macro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类似于 Elm 的 Rust 前端框架 &lt;a href=&#34;https://github.com/David-OConnor/seed&#34;&gt;https://github.com/David-OConnor/seed&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问 VMware 虚拟机串口的方法 &lt;a href=&#34;https://thewayeye.net/2009/december/4/connecting-virtual-machines-serial-console-os-x-and-vmware-fusion/&#34;&gt;https://thewayeye.net/2009/december/4/connecting-virtual-machines-serial-console-os-x-and-vmware-fusion/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>IP 前缀转换上意外遇到的 Undefined Behavior</title>
      <link>https://jia.je/programming/2019/06/21/ip-prefix-unexpected-undefined-behavior/</link>
      <pubDate>Fri, 21 Jun 2019 21:23:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2019/06/21/ip-prefix-unexpected-undefined-behavior/</guid>
      <description>&lt;p&gt;最近发现了两个很神奇的 Undefined Behavior，出现在 Prefix Len 和 Netmask 的转换的问题下。一个简单思路可能是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PREFIX_BIN2DEC(bin) (32 - __builtin_ctz((bin)))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PREFIX_DEC2BIN(hex) (((~0) &amp;gt;&amp;gt; (32 - (hex))) &amp;lt;&amp;lt; (32 - (hex))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;乍一看，似乎没有什么问题。但是，在一些平台下，可能会出现这样的结果：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PREFIX_BIN2DEC(0x00000000) = 33
PREFIX_DEC2BIN(0) = 0xFFFFFFFF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而且只能在一些平台上不确定地复现，最后发现其实是 Undefined Behavior，在 C 的标准中：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;In any case, the behavior is undefined if rhs is negative or is greater or equal the number of bits in the promoted lhs.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;意味着， &lt;code&gt;0xFFFFFFFF &amp;gt;&amp;gt; 32&lt;/code&gt; 是一个 UB，所以出现了上面的问题。&lt;/p&gt;
&lt;p&gt;另外，&lt;code&gt;__builtin_ctz&lt;/code&gt; 有这样的说明：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Returns the number of trailing 0-bits in x, starting at the least significant bit position. If x is 0, the result is undefined.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;意味着，&lt;code&gt;__builtin_ctz(0)&lt;/code&gt; 也是一个 UB，所以得到了错误的结果。&lt;/p&gt;
&lt;p&gt;解决方案也很简单，下面提供一个参考的解决方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PREFIX_BIN2DEC(bin) ((bin) ? (32 - __builtin_ctz((bin))) : 0)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PREFIX_DEC2BIN(hex) (((uint64_t)0xFFFFFFFF &amp;lt;&amp;lt; (32 - (hex))) &amp;amp; 0xFFFFFFFF)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Quagga 的实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Convert masklen into IP address&amp;#39;s netmask (network byte order). */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;masklen2ip&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; masklen, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; in_addr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;netmask)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;assert&lt;/span&gt; (masklen &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; masklen &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; IPV4_MAX_BITLEN);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/* left shift is only defined for less than the size of the type.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * we unconditionally use long long in case the target platform
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * has defined behaviour for &amp;lt;&amp;lt; 32 (or has a 64-bit left shift) */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    netmask&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htonl&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffULL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; masklen));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    netmask&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htonl&lt;/span&gt;(masklen &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffU&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; masklen) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Convert IP address&amp;#39;s netmask into integer. We assume netmask is
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   sequential one. Argument netmask should be network byte order. */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;u_char
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ip_masklen&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; in_addr netmask)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ntohl&lt;/span&gt;(netmask.s_addr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tmp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* clz: count leading zeroes. sadly, the behaviour of this builtin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * is undefined for a 0 argument, even though most CPUs give 32 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__builtin_clz&lt;/span&gt;(tmp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;BIRD 的解决方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * u32_mkmask - create a bit mask
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @n: number of bits
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * u32_mkmask() returns an unsigned 32-bit integer which binary
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * representation consists of @n ones followed by zeroes.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;u32
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u32_mkmask&lt;/span&gt;(uint n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; n)) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * u32_masklen - calculate length of a bit mask
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @x: bit mask
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * This function checks whether the given integer @x represents
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * a valid bit mask (binary representation contains first ones, then
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * zeroes) and returns the number of ones or 255 if the mask is invalid.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uint
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u32_masklen&lt;/span&gt;(u32 x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  u32 n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000ffff&lt;/span&gt;) { x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000ffff&lt;/span&gt;; l &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00ff00ff&lt;/span&gt;) { x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00ff00ff&lt;/span&gt;; l &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0f0f0f0f&lt;/span&gt;) { x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0f0f0f0f&lt;/span&gt;; l &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x33333333&lt;/span&gt;) { x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x33333333&lt;/span&gt;; l &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x55555555&lt;/span&gt;) l&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xaaaaaaaa&lt;/span&gt;) l&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; l;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>每周分享第 29 期</title>
      <link>https://jia.je/misc/2019/06/21/weekly-sharing-29/</link>
      <pubDate>Fri, 21 Jun 2019 21:18:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/06/21/weekly-sharing-29/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;ZFS on Linux 发布 0.8.1 &lt;a href=&#34;https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.8.1&#34;&gt;https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.8.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;slim: Dockerfile to VM image &lt;a href=&#34;https://github.com/ottomatica/slim&#34;&gt;https://github.com/ottomatica/slim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 重写的 du 替代物 确实很快 &lt;a href=&#34;https://github.com/Byron/dua-cli&#34;&gt;https://github.com/Byron/dua-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOS 13/macOS Catalina beta 2 出了 并且可以 OTA 相关信息 &lt;a href=&#34;https://9to5mac.com/2019/06/17/ios-13-beta-2-features/&#34;&gt;https://9to5mac.com/2019/06/17/ios-13-beta-2-features/&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/documentation/macos_release_notes/macos_catalina_10_15_beta_2_release_notes&#34;&gt;https://developer.apple.com/documentation/macos_release_notes/macos_catalina_10_15_beta_2_release_notes&lt;/a&gt; &lt;a href=&#34;https://mp.weixin.qq.com/s/Ae1SIcK9ho4Mh0g_UsbAyA&#34;&gt;https://mp.weixin.qq.com/s/Ae1SIcK9ho4Mh0g_UsbAyA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Steam 已经解决了 Catalina 上 32 位程序不能运行的问题 &lt;a href=&#34;https://www.reddit.com/r/MacOS/comments/c17lh8/steam_and_macos_catalina&#34;&gt;https://www.reddit.com/r/MacOS/comments/c17lh8/steam_and_macos_catalina&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在一些老的 Mac 上 Sidecar 是默认关闭的，但是可以开启 &lt;a href=&#34;https://github.com/pookjw/SidecarPatcher/blob/master/README.md&#34;&gt;https://github.com/pookjw/SidecarPatcher/blob/master/README.md&lt;/a&gt; 虽然效果不会很好&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 28 期</title>
      <link>https://jia.je/misc/2019/06/15/weekly-sharing-28/</link>
      <pubDate>Sat, 15 Jun 2019 08:13:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/06/15/weekly-sharing-28/</guid>
      <description>&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;Rust Sec &lt;a href=&#34;https://github.com/RustSec/advisory-db&#34;&gt;https://github.com/RustSec/advisory-db&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;opendrop 开源的 AirDrop 实现 &lt;a href=&#34;https://github.com/seemoo-lab/opendrop&#34;&gt;https://github.com/seemoo-lab/opendrop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;代码内嵌图片 &lt;a href=&#34;https://javl.github.io/image2cpp/&#34;&gt;https://javl.github.io/image2cpp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RAMBleed 攻击 &lt;a href=&#34;https://readhacker.news/s/44MHD&#34;&gt;https://readhacker.news/s/44MHD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WSL2 可以体验了 &lt;a href=&#34;https://devblogs.microsoft.com/commandline/wsl-2-is-now-available-in-windows-insiders/&#34;&gt;https://devblogs.microsoft.com/commandline/wsl-2-is-now-available-in-windows-insiders/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 2019 生态报告 &lt;a href=&#34;https://www.jetbrains.com/lp/devecosystem-2019/rust/&#34;&gt;https://www.jetbrains.com/lp/devecosystem-2019/rust/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 27 期</title>
      <link>https://jia.je/misc/2019/06/07/weekly-sharing-27/</link>
      <pubDate>Fri, 07 Jun 2019 14:05:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/06/07/weekly-sharing-27/</guid>
      <description>&lt;p&gt;高考加油！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fallout 漏洞 &lt;a href=&#34;https://arxiv.org/abs/1905.12701&#34;&gt;https://arxiv.org/abs/1905.12701&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PageRank 专利到期 &lt;a href=&#34;https://patents.google.com/patent/US6285999B1/en&#34;&gt;https://patents.google.com/patent/US6285999B1/en&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;终端电量可视化 &lt;a href=&#34;https://github.com/svartalf/rust-battop&#34;&gt;https://github.com/svartalf/rust-battop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;查找 DB 的 DB &lt;a href=&#34;https://dbdb.io&#34;&gt;https://dbdb.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在 Rust 里写 GPU 程序 &lt;a href=&#34;https://github.com/calebwin/emu&#34;&gt;https://github.com/calebwin/emu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WWDC 2019 挺不错的&lt;/li&gt;
&lt;li&gt;Alfred 4 发布 &lt;a href=&#34;https://www.alfredapp.com/blog/announcements/alfred-4-is-here/&#34;&gt;https://www.alfredapp.com/blog/announcements/alfred-4-is-here/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mac Pro AR &lt;a href=&#34;https://www.apple.com/105/media/us/mac-pro/2019/36178e80-30fd-441c-9a5b-349c6365bb36/quick-look/case-on.usdz&#34;&gt;https://www.apple.com/105/media/us/mac-pro/2019/36178e80-30fd-441c-9a5b-349c6365bb36/quick-look/case-on.usdz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VSCode 稳定版也可以 Remote 了 &lt;a href=&#34;https://code.visualstudio.com/docs/remote/ssh&#34;&gt;https://code.visualstudio.com/docs/remote/ssh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2019 高考语文作文 &lt;a href=&#34;https://mp.weixin.qq.com/s/2NwkbbMlAUJpOKKuln1T4g&#34;&gt;https://mp.weixin.qq.com/s/2NwkbbMlAUJpOKKuln1T4g&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>在 FPGA 上实现路由器（3）</title>
      <link>https://jia.je/hardware/2019/06/02/router-on-fpga-3/</link>
      <pubDate>Sun, 02 Jun 2019 09:24:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2019/06/02/router-on-fpga-3/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;又半个月过去了，在写了上篇系列&lt;a href=&#34;https://jia.je/hardware/2019/05/15/router-on-fpga-2/&#34;&gt;博文&lt;/a&gt;之后也是做了很多新的更改。上次做的主要是关于性能方面的提升，怎么提高频率，从而达到比较大的流量，而这段时间做的则是功能，做实现 RIP 协议和转发表的动态更新。&lt;/p&gt;
&lt;h2 id=&#34;软件部分&#34;&gt;软件部分&lt;/h2&gt;
&lt;p&gt;软件部分目前是用 C 代码写的，用 Xilinx SDK 提供的各个 AXI 外设的驱动和 PS 自己的驱动，实现了所需要的，RIP 协议的处理，转发表的更新和统计信息的读取。&lt;/p&gt;
&lt;p&gt;实际上做的时候比较粗暴，主要是通过三种 AXI 外设与硬件部分进行交互：AXI Stream FIFO，AXI GPIO 和 AXI BRAM Controller。其中 AXI Stream FIFO 是用来接收和发送需要 CPU 处理的以太网帧的，AXI GPIO 则是用来读取统计的信息，AXI BRAM Controller 是用来读写转发表的。最后在顶层设计中把这些外设连接起来。&lt;/p&gt;
&lt;h2 id=&#34;硬件部分&#34;&gt;硬件部分&lt;/h2&gt;
&lt;p&gt;硬件部分还是继续之前的部分往下写，添加了统计信息，直接暴露出去，让 CPU 走 AXI GPIO 读，因为不需要很高的精确度；转发表本身，一开始想的是自己写一些接口转换，后来发现，直接用 True Dual Port RAM 然后把一个 port 暴露给 AXI BRAM Controller 即可，免去了各种麻烦，PS 可以直接进行修改，不需要额外的工作。&lt;/p&gt;
&lt;h2 id=&#34;最终效果&#34;&gt;最终效果&lt;/h2&gt;
&lt;p&gt;为了测试这套东西是否正常工作，就开了两个 Arch Linux 的虚拟机，分别 Bridge 到两个千兆的 USB 网卡上，都连到 FPGA 上。然后在两边都配上了 BIRD，配置 RIP 和一些路由，确实能更新硬件的转发表，并两边的 RIP 可以学习到对方的路由。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 26 期</title>
      <link>https://jia.je/misc/2019/05/31/weekly-sharing-26/</link>
      <pubDate>Fri, 31 May 2019 18:38:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/05/31/weekly-sharing-26/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Grafana 6.2 发布 &lt;a href=&#34;https://grafana.com/blog/2019/05/22/grafana-v6.2-released/&#34;&gt;https://grafana.com/blog/2019/05/22/grafana-v6.2-released/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Program Synthesis Talk by Paul Zhu &lt;a href=&#34;https://paulz.me/talk/program-synthesis/&#34;&gt;https://paulz.me/talk/program-synthesis/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VSCode 摸鱼插件 &lt;a href=&#34;https://github.com/cteams/Thief-Book&#34;&gt;https://github.com/cteams/Thief-Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;编译期 C++ 计算器 &lt;a href=&#34;https://www.zhihu.com/question/28582706/answer/691444859&#34;&gt;https://www.zhihu.com/question/28582706/answer/691444859&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个在线的 tomasulo 算法实现 &lt;a href=&#34;https://tomasulo.harrychen.xyz/&#34;&gt;https://tomasulo.harrychen.xyz/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Safari Technology Preview 83 发布，含 WebAuthN 支持 &lt;a href=&#34;https://webkit.org/blog/8967/release-notes-for-safari-technology-preview-83/&#34;&gt;https://webkit.org/blog/8967/release-notes-for-safari-technology-preview-83/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Markdown -&amp;gt; 微信 &lt;a href=&#34;https://github.com/lyricat/wechat-format&#34;&gt;https://github.com/lyricat/wechat-format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 的 Code Coverage 库 &lt;a href=&#34;https://github.com/xd009642/tarpaulin&#34;&gt;https://github.com/xd009642/tarpaulin&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>IP 和 UDP Checksum 的增量更新问题</title>
      <link>https://jia.je/networking/2019/05/30/ip-and-udp-checksum-incremental-update/</link>
      <pubDate>Thu, 30 May 2019 16:06:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2019/05/30/ip-and-udp-checksum-incremental-update/</guid>
      <description>&lt;p&gt;之前在写 IP Checksum 的增量更新，就是当 TTL -= 1 的时候，Checksum 应该增加 0x0100，但是这样会有问题，在于，如果按照原来的 IP Checksum 计算方法，是不会出现 0xFFFF 的（求和，进位，然后取反写入），这种加法就有可能出现 0xFFFF。于是翻阅了相关的 RFC：&lt;/p&gt;
&lt;p&gt;首先是 RFC 1141 相关部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; sum;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ipptr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ttl&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;                  &lt;span style=&#34;color:#75715e&#34;&gt;/* decrement ttl */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ipptr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Checksum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/* increment checksum high byte*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ipptr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Checksum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (sum&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;/* add carry */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这也是比较直接能想到的一种方法，但是会出现刚才提到的问题。于是 RFC 1624 纠正了这个问题：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  Although this equation appears to work, there are boundary conditions
   under which it produces a result which differs from the one obtained
   by checksum computation from scratch.  This is due to the way zero is
   handled in one&amp;#39;s complement arithmetic.

   In one&amp;#39;s complement, there are two representations of zero: the all
   zero and the all one bit values, often referred to as +0 and -0.
   One&amp;#39;s complement addition of non-zero inputs can produce -0 as a
   result, but never +0.  Since there is guaranteed to be at least one



Rijsinghani                                                     [Page 2]
 
RFC 1624             Incremental Internet Checksum              May 1994


   non-zero field in the IP header, and the checksum field in the
   protocol header is the complement of the sum, the checksum field can
   never contain ~(+0), which is -0 (0xFFFF).  It can, however, contain
   ~(-0), which is +0 (0x0000).

   RFC 1141 yields an updated header checksum of -0 when it should be
   +0.  This is because it assumed that one&amp;#39;s complement has a
   distributive property, which does not hold when the result is 0 (see
   derivation of [Eqn. 2]).

   The problem is avoided by not assuming this property.  The correct
   equation is given below:

          HC&amp;#39; = ~(C + (-m) + m&amp;#39;)    --    [Eqn. 3]
              = ~(~HC + ~m + m&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;只要把代码简单修改一下就可以了，或者遇到 0xFFFF 时设为 0，这时候就解决了这个问题。&lt;/p&gt;
&lt;p&gt;但是，仔细研究了一下发现，UDP Checksum 又是这么定义的（RFC 768）:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;If the computed  checksum  is zero,  it is transmitted  as all ones (the
equivalent  in one&amp;#39;s complement  arithmetic).   An all zero  transmitted
checksum  value means that the transmitter  generated  no checksum  (for
debugging or for higher level protocols that don&amp;#39;t care).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;刚好和 IP Checksum 相反，这就很有意思了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用 htpdate 替代 ntpdate 实现时间同步</title>
      <link>https://jia.je/devops/2019/05/25/htpdate-for-time-sync/</link>
      <pubDate>Sat, 25 May 2019 07:54:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2019/05/25/htpdate-for-time-sync/</guid>
      <description>&lt;p&gt;最近用 ntpdate 的时候遇到了一些麻烦，时间同步总是遇到各种问题。后来搜了搜，发现了一个解决方案：htpdate，它通过 HTTP 头里的 Date 字段获取时间，虽然没有 ntp 那么精确，但是大多时候都够用。&lt;/p&gt;
&lt;p&gt;用法见 &lt;a href=&#34;https://linux.die.net/man/8/htpdate&#34;&gt;htpdate(8)&lt;/a&gt; 。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 25 期</title>
      <link>https://jia.je/misc/2019/05/24/weekly-sharing-25/</link>
      <pubDate>Fri, 24 May 2019 20:32:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/05/24/weekly-sharing-25/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;关掉各种 Intel BUG 的 mitigation &lt;a href=&#34;https://t.me/one_real_world/1517&#34;&gt;https://t.me/one_real_world/1517&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCC 10 支持用 MMX 模拟 SSE &lt;a href=&#34;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=GCC-10-Emulating-MMX-With-SSE&#34;&gt;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=GCC-10-Emulating-MMX-With-SSE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Minecraft Earth 发布 &lt;a href=&#34;https://www.minecraft.net/en-us/article/new-game--minecraft-earth#&#34;&gt;https://www.minecraft.net/en-us/article/new-game--minecraft-earth#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python 官方 format 工具 &lt;a href=&#34;https://github.com/python/black&#34;&gt;https://github.com/python/black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JS Binary AST Proposal &lt;a href=&#34;https://github.com/tc39/proposal-binary-ast&#34;&gt;https://github.com/tc39/proposal-binary-ast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用 Rust 实现的 ld &lt;a href=&#34;https://github.com/aep/elfkit&#34;&gt;https://github.com/aep/elfkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Verilog -&amp;gt; Minecraft &lt;a href=&#34;https://github.com/itsFrank/MinecraftHDL&#34;&gt;https://github.com/itsFrank/MinecraftHDL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 实现的 光栅化输出 &lt;a href=&#34;https://github.com/ecumene/rust-sloth/&#34;&gt;https://github.com/ecumene/rust-sloth/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nokia 的 Rust 内存 profiler &lt;a href=&#34;https://github.com/nokia/memory-profiler&#34;&gt;https://github.com/nokia/memory-profiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux 5.2 更新的 Logitech Wireless Device 驱动 正好能用上 &lt;a href=&#34;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Better-Logitech-Linux-5.2&#34;&gt;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Better-Logitech-Linux-5.2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Nginx 反代到 HTTPS 上游</title>
      <link>https://jia.je/devops/2019/05/22/nginx-ssl-upstream/</link>
      <pubDate>Wed, 22 May 2019 16:01:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2019/05/22/nginx-ssl-upstream/</guid>
      <description>&lt;p&gt;这次遇到一个需求，要反代到不在内网的地址，为了保证安全，还是得上 HTTPS，所以尝试了一下怎么给 upstream 配置自签名 HTTPS 证书的验证。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;upstream subpath {
    server 4.3.2.1:4321;
}

server {
    listen 443 ssl;
    server_name test.example.com;

    location /abc {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_ssl_trusted_certificate /path/to/self_signed_cert.crt;
        proxy_ssl_name 1.2.3.4; // to override server name checking
        proxy_ssl_verify on;
        proxy_ssl_depth 2;
        proxy_ssl_reuse on;
        proxy_pass https://subpath;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以用 &lt;code&gt;openssl&lt;/code&gt; 获得自签名的 cert :&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo | openssl s_client -showcerts -connect 4.3.2.1:4321 2&amp;gt;/dev/null | \
                              openssl x509 -text &amp;gt; /path/to/self_signed_cert.crt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ref: &lt;a href=&#34;https://stackoverflow.com/questions/7885785/using-openssl-to-get-the-certificate-from-a-server&#34;&gt;https://stackoverflow.com/questions/7885785/using-openssl-to-get-the-certificate-from-a-server&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 24 期</title>
      <link>https://jia.je/misc/2019/05/17/weekly-sharing-24/</link>
      <pubDate>Fri, 17 May 2019 20:04:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/05/17/weekly-sharing-24/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;在线波形绘制 &lt;a href=&#34;https://wavedrom.com/editor.html&#34;&gt;https://wavedrom.com/editor.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python 波形绘制 &lt;a href=&#34;https://github.com/wallento/wavedrompy&#34;&gt;https://github.com/wallento/wavedrompy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GDB 8.3 发布 &lt;a href=&#34;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=GDB-8.3-Debugger-Released&#34;&gt;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=GDB-8.3-Debugger-Released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;命令行自动搜索 StackOverflow &lt;a href=&#34;https://github.com/WindSoilder/hors&#34;&gt;https://github.com/WindSoilder/hors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;从 C 到 Rust 的翻译 &lt;a href=&#34;https://github.com/immunant/c2rust&#34;&gt;https://github.com/immunant/c2rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SHA-1 碰撞攻击新进展 &lt;a href=&#34;https://www.zdnet.com/article/sha-1-collision-attacks-are-now-actually-practical-and-a-looming-danger/&#34;&gt;https://www.zdnet.com/article/sha-1-collision-attacks-are-now-actually-practical-and-a-looming-danger/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;macOS 配置 AD 管理员组 &lt;a href=&#34;https://derflounder.wordpress.com/2011/02/17/adding-groups-from-your-directory-service-to-your-macs-admin-group/&#34;&gt;https://derflounder.wordpress.com/2011/02/17/adding-groups-from-your-directory-service-to-your-macs-admin-group/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ssh 后自动安装并打开 code-server 同步配置 &lt;a href=&#34;https://github.com/cdr/sshcode&#34;&gt;https://github.com/cdr/sshcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTTP Sunset 头 &lt;a href=&#34;https://tools.ietf.org/html/rfc8594&#34;&gt;https://tools.ietf.org/html/rfc8594&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>在 FPGA 上实现路由器（2）</title>
      <link>https://jia.je/hardware/2019/05/15/router-on-fpga-2/</link>
      <pubDate>Wed, 15 May 2019 20:39:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2019/05/15/router-on-fpga-2/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;月初的时候，有了一个完整可用的路由器（上一篇系列&lt;a href=&#34;https://jia.je/hardware/2019/04/24/router-on-fpga/&#34;&gt;博文&lt;/a&gt;），但当时测了一下速度，只有几十 Mb/s，只要往上提就会失效，得 reset 才能继续。当时也先没管性能的事情，先把和 OS 交互的部分做了。现在又回头来做性能调优。&lt;/p&gt;
&lt;p&gt;之前，逻辑部分的主频只有 10 MHz，这自然不行，不提高肯定做不到千兆。于是试着把主频拉高，FIFO 加大，然后遇到了很多问题，慢慢修复了，学到了很多新知识，目前也接近千兆的水平了吧，贴图：&lt;/p&gt;
&lt;p&gt;TCP 测速：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/router_tcp.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;UDP 测速：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/router_udp.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;测试环境是 macOS 虚拟机外打虚拟机内，走网桥把虚拟机和一个 USB 网卡接起来，然后从另一个 USB 网卡打到路由器。&lt;/p&gt;
&lt;h2 id=&#34;尝试-700mbs&#34;&gt;尝试 700Mb/s&lt;/h2&gt;
&lt;p&gt;接下来讲讲，在这个过程中遇到了什么问题，怎么解决的。第一个是速度过快就会挂，这肯定是丢包逻辑没写对，后来在仿真里开够了时间，于是就找到了一个 BUG，其实就是一行的修复。接着就是提高主频，但大家也知道，CPU 不能随便超频，由于各种延迟的原因，比如 Setup 时间，如果超了一个时钟周期的时间，本来应该下个周期就得到新数据的，结果到了下下周期才有，那有的状态可能就乱了，我目前遇到的也主要就是这个问题。&lt;/p&gt;
&lt;p&gt;于是就对着 Timing 里汇报的各种问题修啊修，发现了很多以前没有注意到的问题，它们不影响功能，但是会让逻辑变慢。第一个问题是 High Fanout，以上就是说一个输出接到了很多输入，这看起来没啥问题，但数设课上也讲过，每个门的输入输出电流是有限制的，例如按书上的数据，一个门输出只能带十个门，更多只能级联一层。级联的话，延迟自然就高了。后来发现，这里的原因是，开了一个大的数组，但是没有变成 RAM，综合出了几千个逻辑单元，自然是出问题。解决方法很简单，用 xpm_memory_tpdram 即可。这样一搞，主频就能上 200MHz 了。&lt;/p&gt;
&lt;p&gt;这个时候测了一下，发现 UDP 能打到 700Mb/s 了，TCP 由于丢包率比较高，只有 400Mb/s，距离预期还有一段距离。于是继续进行优化。&lt;/p&gt;
&lt;h2 id=&#34;向-900mbs-进发&#34;&gt;向 900Mb/s 进发&lt;/h2&gt;
&lt;p&gt;要继续提速，自然要提高主频。下一个主频目标就是 250MHz。随着提高主频，时序的要求也会更高，自然也出现了新的问题。&lt;/p&gt;
&lt;p&gt;这次的问题主要在于，一个路径上逻辑门数过多，多的有 7 到 10 个，每一步零点几到一点几纳秒，叠起来 4 纳秒哪里够用。于是把一些不需要依赖条件的逻辑挪到条件外面，这样就减少了一些路径的依赖。&lt;/p&gt;
&lt;p&gt;解决了这个以后，现在的 WNS（Worst Negative Slack）只剩下 0.6 ns 了。这时候的问题一部分还是来自于逻辑门过多，但这个时候就没这么简单了，只能继续细化流水线，打一拍，这样才能把延迟降下来。&lt;/p&gt;
&lt;p&gt;虽然 Timing 没有完全解决，但还是写进了 FPGA 中。幸好工作一切正常，就得到了上面那个图片的结果，接近千兆的速度了。&lt;/p&gt;
&lt;h2 id=&#34;后续优化途径&#34;&gt;后续优化途径&lt;/h2&gt;
&lt;p&gt;后续优化途径的话，一方面是继续对逻辑进行细化和拆分，另一方面是对架构进行优化。当初设计的时候，可能没有考虑地那么周全，例如现在发现，其实 ARP Cache 可以放到每个网口一份，这样会降低花在仲裁上的时间。另外，路由表其实也可以分多份存，只要改的时候同一改就可以了。这样应该会更快。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 23 期</title>
      <link>https://jia.je/misc/2019/05/11/weekly-sharing-23/</link>
      <pubDate>Sat, 11 May 2019 09:00:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/05/11/weekly-sharing-23/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;VS Code Remote &lt;a href=&#34;https://code.visualstudio.com/blogs/2019/05/02/remote-development&#34;&gt;https://code.visualstudio.com/blogs/2019/05/02/remote-development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 命令行看图片 &lt;a href=&#34;https://github.com/atanunq/viu&#34;&gt;https://github.com/atanunq/viu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCC 9.1 发布 &lt;a href=&#34;https://readhacker.news/s/42Ruk&#34;&gt;https://readhacker.news/s/42Ruk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 的 Unikernel &lt;a href=&#34;https://github.com/hermitcore/libhermit-rs&#34;&gt;https://github.com/hermitcore/libhermit-rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 的 QRCode 库 &lt;a href=&#34;https://www.reddit.com/r/rust/comments/bk7z2x/announcing_bardecoder_a_qr_detector_and_decoder/&#34;&gt;https://www.reddit.com/r/rust/comments/bk7z2x/announcing_bardecoder_a_qr_detector_and_decoder/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;鲁迅说过搜索引擎 &lt;a href=&#34;http://cx.luxunmuseum.com.cn/&#34;&gt;http://cx.luxunmuseum.com.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JIT 的 golang REPL &lt;a href=&#34;https://github.com/gijit/gi&#34;&gt;https://github.com/gijit/gi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github 私有 Package Repo &lt;a href=&#34;https://github.com/features/package-registry&#34;&gt;https://github.com/features/package-registry&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>给 Rocket Chip 挂接串口外设</title>
      <link>https://jia.je/os/2019/05/08/axi-uart-interrupt/</link>
      <pubDate>Wed, 08 May 2019 11:04:00 +0800</pubDate>
      
      <guid>https://jia.je/os/2019/05/08/axi-uart-interrupt/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近在给 rCore 添加 Rocket Chip 支持。下面讲讲最近做了哪些工作，遇到了哪些坑，都是怎么解决的。&lt;/p&gt;
&lt;h2 id=&#34;踩坑过程&#34;&gt;踩坑过程&lt;/h2&gt;
&lt;h3 id=&#34;rocket-chip-运行代码&#34;&gt;Rocket Chip 运行代码&lt;/h3&gt;
&lt;p&gt;首先分析了一下已有的代码和工作方式，这个 Rocket Chip（ucb-bar/fpga-zynq）的设计大概是这样的：在 PS 上通过 fesvr 向 Rocket Chip 写入程序。Rocket Chip 本身暴露出一个 TSI，一个串口的调试接口，通过 Zynq Adapter 挂到了 PS 下的 AXI 总线，暴露出若干个寄存器，大概如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * Address Map
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 0x00 - serial out FIFO data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 0x04 - serial out FIFO data available (words)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 0x08 - serial in  FIFO data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 0x0C - serial in  FIFO space available (words)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 0x10 - system reset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 0x20 - req FIFO data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 0x24 - req FIFO data available (words)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 0x28 - data FIFO data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 0x2C - data FIFO data available (words)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 0x30 - resp FIFO data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 0x34 - resp FIFO space available (words)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 0x38 - nsectors
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 0x3C - max request length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;前面的是调试接口，后面的是 block device 和 network，我们暂时还没有用到这些 UCB BAR 做的私货。在 Vivado 中，地址 Offset 是 0x43C00000，所以代码中就这样访问对应的物理地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ZYNQ_BASE_PADDR 0x43C00000L
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/dev/mem&amp;#34;&lt;/span&gt;, O_RDWR&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;O_SYNC);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;assert(fd &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint8_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) mmap(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, sysconf(_SC_PAGESIZE),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PROT_READ&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;PROT_WRITE, MAP_SHARED, fd, ZYNQ_BASE_PADDR);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;assert(dev &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; MAP_FAILED);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这块地址在 Device Tree 里也有对应的项，于是 PS 在访问的时候就会找到总线上的 Rocket Chip 的 Slave，也就对应到了上面的那个寄存器的 Map。接着就是由 fesvr 向 Rocket Chip 里写程序，然后跑起来了。&lt;/p&gt;
&lt;h3 id=&#34;opensbi-输出&#34;&gt;OpenSBI 输出&lt;/h3&gt;
&lt;p&gt;接着就需要先把输入输出做起来，需要移植一个 bootloader。相比之下，OpenSBI 明显比 bbl 更适合于这个用途，于是拿着 OpenSBI 就拿来改了。考虑到 fesvr 采用的是 htif 进行输入输出，于是从 bbl 里抄了相关代码过来，得到了正确的输出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/opensbi_uart.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;rcore启动&#34;&gt;rCore，启动！&lt;/h3&gt;
&lt;p&gt;接下来，就想着怎么把 rCore 丢进去跑。把 payload 替换掉，丢进去，gg 了。一直出现一个玄学的问题，只要我修改页表，就出现 instruction access fault。也一直没有找到真实的原因，最后把 PMP 保护关了就好了。。怀疑是 Rocket Chip 实现有误。&lt;/p&gt;
&lt;p&gt;又做了一些小的修改和适配，用户态也可以正常跑起来了。但是，现在串口只能轮询读取，而 htif 是通过读写内存进行的，也没有类似 MSI 的机制（现在想了想，其实可以，给 PS 挂一个 AXI Interrupt Controller，采用软件产生中断模式，然后接到 Rocket Chip 上，其实也是可以的），另外 Rocket Chip 原来的 Config 还没有向外暴露中断，我想挂一个串口也得让 Rocket Chip 访问得到。于是就开始了阅读 Chisel 代码然后魔改的过程了。&lt;/p&gt;
&lt;h3 id=&#34;魔改-rocket-chip&#34;&gt;魔改 Rocket Chip&lt;/h3&gt;
&lt;p&gt;其实算不上魔改，克服了对 Rocket Chip 的恐惧，仔细阅读代码以后，发现还是比较容易理解的。譬如，我要添加一个外部总线，只需要添加一句：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExtBus&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; up&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ExtBus&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; site&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;copy&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;idBits &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么对应地，就多了一片地址映射：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;60000000 - 80000000  RWX  mmio-port-axi4@60000000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;意味着，只要我在 Rocket Chip 里访问这片地址，那么就会访问这个 AXI 总线上的外设了。但是事情没有这么简单，在踩了很久的坑以后才最终解决。。&lt;/p&gt;
&lt;h4 id=&#34;axi-总线地址的计算方式&#34;&gt;AXI 总线地址的计算方式&lt;/h4&gt;
&lt;p&gt;首先谈谈 AXI 总线上地址是怎么计算的。AXI 总线是一个星形结构，一个 Master 多个 Slave，在这里出现的例子是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PS 是 Master，Rocket Chip 是 Slave — 刚才谈到过的那片 register space&lt;/li&gt;
&lt;li&gt;Rocket Chip 是 Master，PS 是 Slave — 让 Rocket Chip 访问 DDR 控制器&lt;/li&gt;
&lt;li&gt;Rocket Chip 是 Master，外设 是 Slave — 这就是现在要做的事情&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之前省略没说的是上面的第二点，就是让 Rocket Chip 也可以拿到内存用。那问题来了，怎么让 Rocket Chip 和 ARM 上的 Linux 不要打架？把地址空间分成两块就好了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] mem_araddr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] mem_awaddr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Memory given to Rocket is the upper 256 MB of the 512 MB DRAM
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assign&lt;/span&gt; S_AXI_araddr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;#39;d1&lt;/span&gt;, mem_araddr[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assign&lt;/span&gt; S_AXI_awaddr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;#39;d1&lt;/span&gt;, mem_awaddr[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样做，就透明地把 Rocket Chip 看到的内存空间都映射到了实际内存的 [256MB, 512MB) 这片空间上了。&lt;/p&gt;
&lt;p&gt;注：我实验用的板子实际上有 1GB 的 DRAM，但实际上已经足够用了，所以就没有改原来 zedboard 的配置。&lt;/p&gt;
&lt;p&gt;我在前面也提到，在 PS 上访问 0x43C00000 就是对应了 Zynq Adapter 的 0x0 地址。这里也是，在 Rocket Chip 上访问 0x0 的地址，我强行改成了 0x10000000，然后 Offset 是 0，所以最后到内存就是 0x10000000 的地址了。&lt;/p&gt;
&lt;p&gt;所以 AXI 总线上 Slave Register 的地址 = Master 地址 - 匹配到的 Slave 的 Offset 地址。但是，**如果只有单个 Slave 的时候，AXI Interconnect 可能不检查地址范围，而是直接截断，但在有多个 Slave 的时候，会先检查地址范围，如果找不到就返回错误。**这个问题让我困惑了许久，直到我挂上了 &lt;code&gt;System ILA&lt;/code&gt; 看。。&lt;/p&gt;
&lt;h4 id=&#34;axi-uartlite&#34;&gt;AXI Uartlite&lt;/h4&gt;
&lt;p&gt;既然有了外设总线，第一个想到的外设就是 UART 咯，于是加了一个 AXI Uartlite，用 AXI Interconnect 连到外设总线上。写了程序简单测试了一下，确实读取到了数据，然后也很快就可以成功地从串口读数据，写数据。于是我又加了一个串口，拉到 AXI Interconnect 第二个接口上，结果就不工作了。&lt;/p&gt;
&lt;p&gt;细心的读者可能已经从我上面讲到的一些内容上猜到了问题所在。。但这一点直到后面我才明白发生了什么，后面会再讲到这里的问题。&lt;/p&gt;
&lt;h4 id=&#34;axi-interrupt-controller&#34;&gt;AXI Interrupt Controller&lt;/h4&gt;
&lt;p&gt;接着，回到我们最初的目标，既然可以输入输出了，还要真的串口干啥？添加中断或者拉一路 JTAG 出来，脱离 PS 来进行调试。所以接下来需要从 Rocket Chip 中暴露外部中断。在原来的代码中，是直接关掉了的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tieOffInterrupts&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它的功能很简单，直接把中断置 0。但我要的是拉到外面，经过了一番挣扎：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; io &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bundle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; ps_axi_slave &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Flipped&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;adapter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axi&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cloneType&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mem_axi &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mem_axi4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cloneType
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mmio_axi &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mmio_axi4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cloneType
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; interrupts &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mem_axi &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mem_axi4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mmio_axi &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mmio_axi4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interrupts &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interrupts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;终于找到了正确的方法，拉出来两路中断信号。于是很开心地直接接到了 Uartlite 上，但是事情肯定不会这么简单：&lt;/p&gt;
&lt;p&gt;Uartlite 是正边沿触发的中断，但是 Rocket Chip 期望的是高电平触发的中断。所以我们需要一个中断控制器来实现这个，加了一个 AXI Interrupt  Controller。但是问题来了，我们还没解决那个只要加俩 Slave 就都访问不到的问题呢！于是到处挂 System ILA 调试，发现了问题所在：&lt;/p&gt;
&lt;p&gt;我们之前提到，0x60000000 - 0x80000000 地址段是对应到了外部 AXI 总线的，这没错，但是，如果在 Rocket Chip 上读 0x60000000 的地址，到总线上还是 0x60000000 的地址而不是 0x0，而之前只有一个 Slave 的时候，没有真的去检查这个地址范围，所以找到了正确的寄存器，现在不行了，于是出错了。&lt;/p&gt;
&lt;p&gt;解决方法也很简单，乖乖地把 Offset 调成 0x60000000 和 0x61200000，然后再映射到 rCore 的内核态里。一番挣扎，又参照了 Linux 的 Uartlite 驱动（发现了遗忘设置的 MER 寄存器，不认真阅读文档的后果），终于在 ILA 上看到 uartlite 的输出上有一个脉冲，紧接着看到中断控制器输出了一个 irq，然后 Rocket Chip 收到了 external interrupt。Cheers！&lt;/p&gt;
&lt;h3 id=&#34;中断处理&#34;&gt;中断处理&lt;/h3&gt;
&lt;p&gt;事情虽然差不多解决了，但是还没有结束。收到了一个 interrupt 以后，打印了一下寄存器状态，马上又来下一个 interrupt 了。现在不仅要在 Rocket Chip 的 PLIC 上把中断给确认了（吐槽一下，Rocket 的 PLIC 文档也比较欠缺，我是照着 U54 核的地址找到，但是 U54 呢是一个 4+1 的组合，hart0 没有 M 态，所以我为了打开 hart0 的 S 态中断，要找 hart1 的 M 态地址，详见 SiFive 文档），在 AXI Interrupt Controller 上也得把中断给确认了。但还是不行，每次 interrupt controller 输出的 irq 拉低不久，uartlite 又出现了新的一次中断。&lt;/p&gt;
&lt;p&gt;这次的问题很有戏剧性：处理中断的时候输出调试信息，调试信息把 tx fifo 写满了，uartlite 也会产生一个中断。。于是没完了。解决方法很简单，牺牲一些性能，每次输出的时候都等到 tx fifo 空了才写，然后在处理串口中断的时候不要输出调试信息。&lt;/p&gt;
&lt;p&gt;这下没有新的问题了，串口中断终于是工作了。&lt;/p&gt;
&lt;h2 id=&#34;总结和致谢&#34;&gt;总结和致谢&lt;/h2&gt;
&lt;p&gt;这么一番搞下来，对 Vivado 和 AXI 的相关知识都比较熟悉了吧，也踩了很多的坑。需要特别感谢 @cq_z4yx 提供的技术支持。&lt;/p&gt;
&lt;p&gt;相关文档和链接：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PG099 AXI Interrupt Controller&lt;/li&gt;
&lt;li&gt;PG142 AXI Uartlite&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rcore-os/opensbi/compare/c1d01b0c2efea86348235a1c7f83382e53f87e0e...7fe82c135e394bc6e6dca610f3771344449568ed&#34;&gt;OpenSBI 适配&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rcore-os/rCore/commit/2e599b0bab2ee522bd11d0c665207841939d2711&#34;&gt;rCore 适配&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 22 期</title>
      <link>https://jia.je/misc/2019/05/03/weekly-sharing-22/</link>
      <pubDate>Fri, 03 May 2019 07:38:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/05/03/weekly-sharing-22/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;AXI-Stream Components &lt;a href=&#34;https://github.com/alexforencich/verilog-axis&#34;&gt;https://github.com/alexforencich/verilog-axis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;go self update 库 &lt;a href=&#34;https://github.com/rhysd/go-github-selfupdate&#34;&gt;https://github.com/rhysd/go-github-selfupdate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Atomic Pi &lt;a href=&#34;https://www.cnx-software.com/2019/04/26/buy-atomic-pi-cherry-trail-sbc/&#34;&gt;https://www.cnx-software.com/2019/04/26/buy-atomic-pi-cherry-trail-sbc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;静态网站生成器 Hugo &lt;a href=&#34;https://github.com/gohugoio/hugo&#34;&gt;https://github.com/gohugoio/hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++ enum 的反射 &lt;a href=&#34;https://github.com/Neargye/magic_enum&#34;&gt;https://github.com/Neargye/magic_enum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;又一个开源的反编译器 &lt;a href=&#34;https://github.com/BoomerangDecompiler/boomerang&#34;&gt;https://github.com/BoomerangDecompiler/boomerang&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>把博客生成器从 Jekyll 迁移到 Hugo</title>
      <link>https://jia.je/meta/2019/05/02/migrate-from-jekyll-to-hugo/</link>
      <pubDate>Thu, 02 May 2019 12:15:00 +0800</pubDate>
      
      <guid>https://jia.je/meta/2019/05/02/migrate-from-jekyll-to-hugo/</guid>
      <description>&lt;p&gt;Jekyll 生成一次实在太慢，忍受不了，于是换成了 Hugo。为了保持链接不变，花了不少的时间在重命名上，不过目前似乎都完成了，希望没有导致 404 的问题。&lt;/p&gt;
&lt;p&gt;新的主题还是好看很多的。Enjoy！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 Linux 中用 C 代码获取 DNS 服务器列表</title>
      <link>https://jia.je/software/2019/04/30/get-resolvers-in-c/</link>
      <pubDate>Tue, 30 Apr 2019 17:39:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2019/04/30/get-resolvers-in-c/</guid>
      <description>&lt;p&gt;最近在做一个作业的时候，发现里面有个步骤是获取 Linux 系统中的 DNS 服务器列表，它的方法很粗暴，直接 cat grep cut 再处理。我就在想有没有完全代码的实现，然后搜了一下，果然有：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;resolv.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;res_init();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// _res.nsaddr_list is an array of resolvers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用到了全局变量 &lt;code&gt;_res&lt;/code&gt; ，虽然很 hacky，但是至少是工作的，不清楚兼容性几何。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 21 期</title>
      <link>https://jia.je/misc/2019/04/27/weekly-sharing-21/</link>
      <pubDate>Sat, 27 Apr 2019 08:34:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/04/27/weekly-sharing-21/</guid>
      <description>&lt;p&gt;来了来了&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rust stackful generator 库 &lt;a href=&#34;https://github.com/Xudong-Huang/generator-rs&#34;&gt;https://github.com/Xudong-Huang/generator-rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;wireshark tui &lt;a href=&#34;https://termshark.io/&#34;&gt;https://termshark.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pythonm 加 annotation 的调试 &lt;a href=&#34;https://github.com/cool-RR/PySnooper&#34;&gt;https://github.com/cool-RR/PySnooper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Haskell 又一个教程 &lt;a href=&#34;https://github.com/alpacaaa/zero-bullshit-haskell&#34;&gt;https://github.com/alpacaaa/zero-bullshit-haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;直接在 Rust 中写 Python &lt;a href=&#34;https://docs.rs/inline-python/0.2.0/inline_python/&#34;&gt;https://docs.rs/inline-python/0.2.0/inline_python/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;直接把 regex 捕捉到的 group 丢到 struct 里 &lt;a href=&#34;https://crates.io/crates/recap&#34;&gt;https://crates.io/crates/recap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;XDP 层的抓包 &lt;a href=&#34;https://github.com/cloudflare/xdpcap&#34;&gt;https://github.com/cloudflare/xdpcap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AWS 开始提供香港的云服务 &lt;a href=&#34;https://www.allthingsdistributed.com/2019/04/aws-region-asia-pacific-hong-kong.html&#34;&gt;https://www.allthingsdistributed.com/2019/04/aws-region-asia-pacific-hong-kong.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>在 FPGA 上实现路由器</title>
      <link>https://jia.je/hardware/2019/04/24/router-on-fpga/</link>
      <pubDate>Wed, 24 Apr 2019 19:41:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2019/04/24/router-on-fpga/</guid>
      <description>&lt;p&gt;最近在做 FPGA 上硬件的路由器，感觉接近一个基本可用的阶段了吧，大概谈一谈做这个的思路、过程和踩过的坑。&lt;/p&gt;
&lt;p&gt;首先，做实验用的板子是 Alinx AX7021，FPGA 是 Xilinx xc7z020clg484-2，扩展板上有 4PL+1PS 个网口和千兆 KSZ9031RNX PHY，采用的接口是 RGMII。一开始做的自然是做 RGMII，但是遇到了困难，RGMII 在千兆模式下传输的是 DDR 信号，而时序和延迟就是个比较麻烦的事情。一开始先直接拿 Xilinx 的 AXI Ethernet IP 来用，然后上 ILA 看到了 IDDR 后的信号，第一次看到了完整的以太网帧，从 Preamble 和 SFD 到最后的 FCS。于是就特别振奋，想着手写 RGMII，先做收，再做发。确实，收很容易，很快就做出来了，但是写总是出问题，当时也不懂跨时钟域的一些问题，总之各种没调出来。于是就退而求其次，选择了 Xilinx 的 Tri Mode Ethernet IP 了。&lt;/p&gt;
&lt;p&gt;Tri Mode Ethernet IP 有很多选项，为了简单，直接采用了 AXI-Stream 的接口，不要 AXI4-Lite 什么的，都不要，因为我需要直接写剩余的逻辑。其他东西能省也都省掉了。这个 IP 确实很给力，很快就可以完成收和发的操作了，这次终于知道了怎么处理跨时钟域的问题 — XPM FIFO ASYNC，一下推进了很大的进度。&lt;/p&gt;
&lt;p&gt;既然可以收，也可以发了，就扩展到多个网口。这个 IP 中可以选择 Shared Logic 在内部，也可以在外部，研究了一下发现，应该是一个放内部，其余选外部，然后接起来就可以了。不过目前为了简单，还是只用了俩端口。在这个基础上，就开始解析收进来的以太网帧了。&lt;/p&gt;
&lt;p&gt;第一步自然是填 ARP 表，自然问题来了，如果多个网口同时进来数据，怎么保证 ARP 表读写的正确性？自然就想到总线上需要做仲裁，于是写了一个简单的总线仲裁，顺带学习到了 &lt;code&gt;unique case(z)&lt;/code&gt; 和 &lt;code&gt;priority case(z)&lt;/code&gt; 的语法。然后 ARP 表怎么实现呢，大概就是一个哈希表，然后表里维护了（IP，MAC，PORT）三元组，然后实现了一些冲突和覆盖的处理逻辑，做这些的同时也对各个模块编写相应的测试。有了 ARP 表，就可以在解析以太网帧的时候，拆解出里面的信息，然后请求 ARP 表总线，然后写入。&lt;/p&gt;
&lt;p&gt;第二步则是相应 ARP 请求，这就需要发出以太网帧。由于 4 个端口都可能向 4 个端口发出以太网帧，这就需要一个 4x4 matrix + 仲裁。不过目前为了简单，就还没有上 FIFO，直接仲裁进到目的端口的 TX FIFO 中了。这一步并不难，不过在最后 AXI-Stream 的一步遇到了一些困难。由于 Tri Mode Ethernet IP 对 tready 和 tvalid 有特定的要求，所以这里只能用 FWFT FIFO 进行，然后进行了一波神奇的操作，最后搞定了这个事情。成果就是可以从电脑上 &lt;code&gt;arping&lt;/code&gt; 通指定的地址了。&lt;/p&gt;
&lt;p&gt;第三步，也是正在做的一步，就是真正实现 IP 包的转发，这需要三个步骤：解析目的地址，查询路由表，查询 ARP 表。于是需要照着 ARP 表的方案同样做了路由表的仲裁，目前为了简单也还是把路由表设置为静态的。这里就需要做一些特殊的考虑，例如上面三步是串行的，但是我需要同时把 IP 包存一份，最后转发的时候修改一点就发出去了，所以需要等两步都做完，才能继续下一个包的处理。目前做到了第二小步，正在向最后一步查询 ARP 表进发。&lt;/p&gt;
&lt;p&gt;UPDATE：现在最后一步也做好了，但是遇到了小问题，还是不能偷懒，需要写一个 XPM_MEMORY_SPRAM，直接写一个大的数组太浪费 LUT 了。&lt;/p&gt;
&lt;p&gt;UPDATE-2019-04-27：It WORKS now. 不过也发现了之前写的 ARP 表有点问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jiegec.xyz 域名即将停用</title>
      <link>https://jia.je/misc/2019/04/22/jiegec-xyz-down/</link>
      <pubDate>Mon, 22 Apr 2019 11:42:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/04/22/jiegec-xyz-down/</guid>
      <description>&lt;p&gt;最早买域名的时候，买的是 jiegec.xyz，后来发现了更好的域名，于是这个老域名一直就是一个简单的网页转址。很快，它就要过期了，我也不打算续费了，大家继续用我的新域名吧。&lt;/p&gt;
&lt;p&gt;P.S. 忽然发现我之前配的 acme.sh 没有配自动 &lt;code&gt;nginx -s reload&lt;/code&gt; ，所以之前 ssl 证书时间凉了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 20 期</title>
      <link>https://jia.je/misc/2019/04/20/weekly-sharing-20/</link>
      <pubDate>Sat, 20 Apr 2019 22:42:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/04/20/weekly-sharing-20/</guid>
      <description>&lt;p&gt;写到了第 20 期了！最近几期总是在咕咕。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rust 的科学计算库 &lt;a href=&#34;https://github.com/rust-ndarray/ndarray&#34;&gt;https://github.com/rust-ndarray/ndarray&lt;/a&gt; &lt;a href=&#34;https://github.com/jturner314/ndarray-stats&#34;&gt;https://github.com/jturner314/ndarray-stats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust Crate 生态可视化 &lt;a href=&#34;https://rfdonnelly.github.io/crate-galaxy/&#34;&gt;https://rfdonnelly.github.io/crate-galaxy/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在地址栏里做动画 &lt;a href=&#34;http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/#%F0%9F%8C%92&#34;&gt;http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/#%F0%9F%8C%92&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ruby 3 也要加类型了 &lt;a href=&#34;https://twitter.com/darkdimius/status/1119115657776209920&#34;&gt;https://twitter.com/darkdimius/status/1119115657776209920&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;verilog 的 MAC + 简易网络栈 &lt;a href=&#34;https://github.com/alexforencich/verilog-ethernet&#34;&gt;https://github.com/alexforencich/verilog-ethernet&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 19 期</title>
      <link>https://jia.je/misc/2019/04/15/weekly-sharing-19/</link>
      <pubDate>Mon, 15 Apr 2019 01:03:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/04/15/weekly-sharing-19/</guid>
      <description>&lt;p&gt;忽然想起来忘了这件事情两天。。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pock 在 Touchbar 中显示并控制 Dock &lt;a href=&#34;https://pock.pigigaldi.com/&#34;&gt;https://pock.pigigaldi.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MacBook touchbar+keyboard+touchpad Linux 驱动 &lt;a href=&#34;https://github.com/roadrunner2/macbook12-spi-driver&#34;&gt;https://github.com/roadrunner2/macbook12-spi-driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kendryte K210 上的 GBA 模拟器 &lt;a href=&#34;https://github.com/44670/mgba-k210&#34;&gt;https://github.com/44670/mgba-k210&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 生成 PDF 文件的库 &lt;a href=&#34;https://github.com/J-F-Liu/lopdf&#34;&gt;https://github.com/J-F-Liu/lopdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中科大用 Rust 编写 FreeRTOS 的实验 &lt;a href=&#34;https://github.com/OSH-2019/x-rust-freertos&#34;&gt;https://github.com/OSH-2019/x-rust-freertos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google 发布 Cloud Code 插件，直接在 k8s 上调试运行 &lt;a href=&#34;https://cloud.google.com/blog/products/devops-sre/announcing-cloud-code-accelerating-cloud-native-application-development&#34;&gt;https://cloud.google.com/blog/products/devops-sre/announcing-cloud-code-accelerating-cloud-native-application-development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;通过 libusb 跨平台的 usbip server &lt;a href=&#34;https://github.com/jwise/pyusbip&#34;&gt;https://github.com/jwise/pyusbip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux 下 BCM43602 Firmware 问题的不完美解决方法 &lt;a href=&#34;https://bugzilla.kernel.org/show_bug.cgi?id=193121&#34;&gt;https://bugzilla.kernel.org/show_bug.cgi?id=193121&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;给树莓派上电的新方法 &lt;a href=&#34;https://youtu.be/X2vF9KAEJx8&#34;&gt;https://youtu.be/X2vF9KAEJx8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker 里跑 Deepin Wechat 的镜像 &lt;a href=&#34;https://github.com/bestwu/docker-wechat.git&#34;&gt;https://github.com/bestwu/docker-wechat.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NS Switch 的包管理器 &lt;a href=&#34;https://switchbrew.org/wiki/Main_Page&#34;&gt;https://switchbrew.org/wiki/Main_Page&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>rCore 软路由实现</title>
      <link>https://jia.je/software/2019/04/07/rcore-soft-router/</link>
      <pubDate>Sun, 07 Apr 2019 12:13:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2019/04/07/rcore-soft-router/</guid>
      <description>&lt;p&gt;最近在研究软路由在 rCore 上的实现，但限于硬件限制，目前先在虚拟机里测试。软路由大概要做这些东西：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 抓包，解析包里的内容
2. 查路由表，找到下一跳在哪
3. 查 ARP，知道下一跳的 MAC 地址
4. 减少 TTL，更新 IP Checksum
5. 把包发出去
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一步直接拿 smoltcp 的 Raw Socket 即可，但是目前只能抓指定 IP Protocol 的包，我用的是 ICMP，但其他的就还抓不了，需要继续改 Smoltcp 源代码。&lt;/p&gt;
&lt;p&gt;第二步用的是之前刚修好的 treebitmap 库，它提供了路由表的查询功能，目前路由表还是写死的，之后会用已经部分实现好的 Netlink 接口读取出来。&lt;/p&gt;
&lt;p&gt;第三步则是 ioctl 发请求，然后从 smoltcp 内部的 ARP cache 里读取。&lt;/p&gt;
&lt;p&gt;第四步很简单，不用多说。&lt;/p&gt;
&lt;p&gt;第五步则需要指定出端口，用了一个 index，放在一个特定的 sockaddr 中。&lt;/p&gt;
&lt;p&gt;最后的效果就是，能双向转发 ping 通。&lt;/p&gt;
&lt;p&gt;网络拓扑：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/router_topo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以，这很玄学。&lt;/p&gt;
&lt;p&gt;后续在想在真机上实验，但是还缺一个网卡驱动，不然就可以用神奇的办法来做这个实验了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 18 期</title>
      <link>https://jia.je/misc/2019/04/05/weekly-sharing-18/</link>
      <pubDate>Fri, 05 Apr 2019 23:35:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/04/05/weekly-sharing-18/</guid>
      <description>&lt;p&gt;不咕不咕&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Alfred pwgen workflow &lt;a href=&#34;https://github.com/deanishe/alfred-pwgen&#34;&gt;https://github.com/deanishe/alfred-pwgen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;魔改主板，在老主板上放 16GB 内存 &lt;a href=&#34;https://readhacker.news/s/3Zty4&#34;&gt;https://readhacker.news/s/3Zty4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mesalink TLS 库的 Rust 实现 &lt;a href=&#34;https://github.com/mesalock-linux/mesalink&#34;&gt;https://github.com/mesalock-linux/mesalink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;实测可用 Rust 写的 STM32 应用 &lt;a href=&#34;https://github.com/lupyuen/stm32-blue-pill-rust&#34;&gt;https://github.com/lupyuen/stm32-blue-pill-rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开源 PCIe 核 &lt;a href=&#34;https://github.com/enjoy-digital/litepcie&#34;&gt;https://github.com/enjoy-digital/litepcie&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;欢迎投稿。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>高云 FPGA 踩坑</title>
      <link>https://jia.je/programming/2019/04/01/gowin-fpga/</link>
      <pubDate>Mon, 01 Apr 2019 09:00:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2019/04/01/gowin-fpga/</guid>
      <description>&lt;p&gt;最近拿到了高云 FPGA GW2A-18 开发版，想在这上面做一些小工程。不过首先要配置好环境什么的。官方提供了 Linux 和 Windows 的两套工具，自然是拥抱 Linux 咯，但是由于官方适配的是 Redhat 系的操作系统，所以用 Debian 系的时候出现了若干问题，后面会谈到怎么解决的。&lt;/p&gt;
&lt;p&gt;首先是官网下载了它的软件，大概有 IDE，综合器，布线器和 Programmer 四个工具，然后开始跑，发现缺少了 libcrypt.so.1.0.0。上网搜了一下解决方案，需要重新编译 openssl-1.0.0，于是下载并且编译了 openssl-1.0.0t 并且把 .so 的路径调好了，这时候就可以打开 IDE 了。然后发现需要 License，这个很简单，去官网申请一下，一天邮件就下来了。&lt;/p&gt;
&lt;p&gt;接下来配置 License，IDE 很容易，直接选择邮件里发下来的 node-locked License 即可。不过 Synplify Pro 的 Linux 版本不支持直接单文件 node-locked 的 License，只允许跑 SCL … 不过高云也提供了 SCL 的下载，和 IDE 的 License Server 放在一起，安装完以后，在得到的 License 里加上两行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SERVER &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;hostname&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;hostid&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;port&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;VENDER snpslmd /path/to/scl/2018.06/linux64/bin/snpslmd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后把 $LM_LICENSE_FILE 指向这个文件路径，就可以了。这一部分感谢 @Jackey-Huo。&lt;/p&gt;
&lt;p&gt;随手写了一个简化版的点亮数字人生（没有数码管），得到了 bistream，准备往板子里刷，然后问题出现了：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ImportError: /path/to/Gowin_YunYuan_V1.9.0Beta_linux/Programmer/bin/librt.so.1: symbol __vdso_clock_gettime version GLIBC_PRIVATE not defined in file libc.so.6 with link time reference
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;目测是 glibc 版本问题 … 这就很难处理了。另外又从官网下载了独立的 Programmer，仍然不行，检测不到设备。&lt;/p&gt;
&lt;p&gt;最后想了想，找到了终极办法，在 Docker 里运行 CentOS 的 Privileged Container，再跑 programmer：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker pull centos
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker run -it --privileged -v /home:/home centos /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CentOS 镜像出乎意料地小。进去以后，找到 Programmer 路径，然后 scan：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ./programmer_cli --scan&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Scanning!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Current download-cable channel:0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Device Info:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Family: GW2A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Name: GW2A-18
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ID: 0xREDACTED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; device&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; found!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Cost 0.54 second&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着烧到 SRAM 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ./programmer_cli -d GW2A-18 --fsFile /path/to/bitstream.fs --run 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SRAM Program&amp;#34;&lt;/span&gt; starting on device-1...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Programming...: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#########################] 100%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; User Code: 0xREDACTED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Status Code: 0xREDACTED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Cost 4.54 second&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;烧录成功，功能测试也没有问题。可以继续进行下一步工作了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 17 期</title>
      <link>https://jia.je/misc/2019/03/31/weekly-sharing-17/</link>
      <pubDate>Sun, 31 Mar 2019 12:32:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/03/31/weekly-sharing-17/</guid>
      <description>&lt;p&gt;对不起咕咕了两天。。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关于 rel=&amp;ldquo;noopener&amp;rdquo; 的一些细节 &lt;a href=&#34;https://mathiasbynens.github.io/rel-noopener&#34;&gt;https://mathiasbynens.github.io/rel-noopener&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Microsft Defender 推出 macOS 版 &lt;a href=&#34;https://arstechnica.com/gadgets/2019/03/microsoft-ships-anti-virus-for-macos-as-windows-defender-becomes-microsoft-defender/&#34;&gt;https://arstechnica.com/gadgets/2019/03/microsoft-ships-anti-virus-for-macos-as-windows-defender-becomes-microsoft-defender/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基于 Docker 的快速启动在线 Linux box &lt;a href=&#34;https://github.com/instantbox/instantbox&#34;&gt;https://github.com/instantbox/instantbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rust 在窗口中显示 fb 的库 &lt;a href=&#34;https://github.com/emoon/rust_minifb&#34;&gt;https://github.com/emoon/rust_minifb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vue 列表空间，为大量数据设计 &lt;a href=&#34;https://github.com/tangbc/vue-virtual-scroll-list&#34;&gt;https://github.com/tangbc/vue-virtual-scroll-list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;musl 各平台的交叉编译工具链 &lt;a href=&#34;https://musl.cc/&#34;&gt;https://musl.cc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线的 markdown 转 pdf &lt;a href=&#34;https://md2pdf.netlify.com/&#34;&gt;https://md2pdf.netlify.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一本关于 C64 的书 &lt;a href=&#34;http://10print.org/&#34;&gt;http://10print.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;转自 dram &amp;ldquo;haskutil tql，自动更新 import，自动 {-# LANGUAGE #-} ，自动填 hole&amp;rdquo; &lt;a href=&#34;https://github.com/EduardSergeev/vscode-haskutil&#34;&gt;https://github.com/EduardSergeev/vscode-haskutil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ZFS on Linux 加入 TRIM 支持 &lt;a href=&#34;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=ZFS-On-Linux-TRIM-Lands&#34;&gt;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=ZFS-On-Linux-TRIM-Lands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;又一个体现 JS 玄学之处的网站 &lt;a href=&#34;https://getify.github.io/coercions-grid/&#34;&gt;https://getify.github.io/coercions-grid/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>静态编译 sqlite3</title>
      <link>https://jia.je/software/2019/03/24/static-building-sqlite/</link>
      <pubDate>Sun, 24 Mar 2019 19:13:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2019/03/24/static-building-sqlite/</guid>
      <description>&lt;p&gt;最近 rCore 支持了动态链接库，于是想着在测试 sqlite 的时候直接用动态的，不过出现了玄学的问题，它会访问一个不存在的地址，看代码也没看出个所以然来。所以研究了一下 sqlite 的静态编译。首先在 &lt;code&gt;configure&lt;/code&gt; 的时候尝试了一下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./configure CC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x86_64-linux-musl-gcc --disable-shared --enabled-static
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现 &lt;code&gt;libsqlite&lt;/code&gt; 确实是静态了，但是 &lt;code&gt;sqlite3&lt;/code&gt; 并不是。一番研究以后，发现是 &lt;code&gt;libtool&lt;/code&gt; 的原因，只要这样编译：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make LTLINK_EXTRAS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;-all-static
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就可以编译出静态的 &lt;code&gt;sqlite3&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sqlite3: ELF 64-bit LSB executable, x86-64, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SYSV&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, statically linked, with debug_info, not stripped
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>每周分享第 16 期</title>
      <link>https://jia.je/misc/2019/03/22/weekly-sharing-16/</link>
      <pubDate>Fri, 22 Mar 2019 23:27:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/03/22/weekly-sharing-16/</guid>
      <description>&lt;p&gt;继续沉迷写 OS +1&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;C++ 的一个比较 fancy 的 format 库 &lt;a href=&#34;https://github.com/fmtlib/fmt&#34;&gt;https://github.com/fmtlib/fmt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 的 rsync 替代品 &lt;a href=&#34;https://github.com/wchang22/lumins&#34;&gt;https://github.com/wchang22/lumins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VirtIO 1.1 要发布了 &lt;a href=&#34;https://github.com/oasis-tcs/virtio-docs/commit/3b4130f3a8910dad89b8166e06e58806b9c60943&#34;&gt;https://github.com/oasis-tcs/virtio-docs/commit/3b4130f3a8910dad89b8166e06e58806b9c60943&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;向二维码嵌入图片的工具 &lt;a href=&#34;http://cgv.cs.nthu.edu.tw/Projects/Recreational_Graphics/Halftone_QRCodes/&#34;&gt;http://cgv.cs.nthu.edu.tw/Projects/Recreational_Graphics/Halftone_QRCodes/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google Chrome 发出奇怪的 DNS 请求的原因 &lt;a href=&#34;https://unix.stackexchange.com/questions/363512/chrome-dns-requests-with-random-dns-names-malware&#34;&gt;https://unix.stackexchange.com/questions/363512/chrome-dns-requests-with-random-dns-names-malware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;转换 .HEIC 到 .jpg 的批量方案：&lt;code&gt;alias heic=&amp;quot;magick mogrify -monitor -format jpg *.HEIC&amp;quot;&lt;/code&gt; ref: &lt;a href=&#34;https://apple.stackexchange.com/questions/297134/how-to-convert-a-heif-heic-image-to-jpeg-in-el-capitan&#34;&gt;Apple SE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;以打代码来练打字的网站  &lt;a href=&#34;https://typing.io/&#34;&gt;https://typing.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VSCode 网页 server &lt;a href=&#34;https://github.com/codercom/code-server&#34;&gt;https://github.com/codercom/code-server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;奇特的 Rust 网页栈实现 &lt;a href=&#34;https://japaric.github.io/jnet/jnet/index.html&#34;&gt;https://japaric.github.io/jnet/jnet/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;H265 解析 gui &lt;a href=&#34;https://github.com/virinext/hevcesbrowser&#34;&gt;https://github.com/virinext/hevcesbrowser&lt;/a&gt; 之前介绍过 H264 的&lt;/li&gt;
&lt;li&gt;Awesome Rust Embedded &lt;a href=&#34;https://github.com/rust-embedded/awesome-embedded-rust&#34;&gt;https://github.com/rust-embedded/awesome-embedded-rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新的 SiFive 产品 &lt;a href=&#34;https://www.crowdsupply.com/sifive/hifive1-rev-b&#34;&gt;https://www.crowdsupply.com/sifive/hifive1-rev-b&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wireshark 3.0.0 发布  &lt;a href=&#34;https://www.wireshark.org/docs/relnotes/wireshark-3.0.0.html&#34;&gt;https://www.wireshark.org/docs/relnotes/wireshark-3.0.0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>交叉编译 Nginx 1.14.2 到 RISC-V</title>
      <link>https://jia.je/software/2019/03/22/cross-compiling-nginx-to-riscv/</link>
      <pubDate>Fri, 22 Mar 2019 23:18:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2019/03/22/cross-compiling-nginx-to-riscv/</guid>
      <description>&lt;p&gt;最近又把一定的精力放到了 RISC-V 64 上的 rCore 用户态程序的支持上，同时也借到了 HiFive Unleashed 板子，所以有真实硬件可以拿来跑了。在这之前先在 QEMU 上把能跑的都跑起来。&lt;/p&gt;
&lt;p&gt;由于 rCore 对 glibc 的支持一直有问题，RISC-V 也不例外，所以还是选择用 musl 来做这件事情。一般搜索，终于找到了 Linux 下能用的 &lt;a href=&#34;https://github.com/rv8-io/musl-riscv-toolchain&#34;&gt;musl-riscv-toolchain&lt;/a&gt; 。编译好工具链以后，很多需要 libc 的用户态都能跑了，于是想着试一下 nginx 的编译。试着编译了一下，遇到了各种问题，最后搜到了&lt;a href=&#34;https://www.jianshu.com/p/5d9b60f7b262&#34;&gt;交叉编译 Hi3536 上面使用的 nginx&lt;/a&gt;，里面的方法解决了这个问题。最后总结出了这样的 patch :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git a/nginx-1.14.2/auto/cc/name b/nginx-1.14.2/auto/cc/name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index ded93f5..d6ab27a 100644
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- a/nginx-1.14.2/auto/cc/name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ b/nginx-1.14.2/auto/cc/name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -7,7 +7,7 @@ if [ &amp;#34;$NGX_PLATFORM&amp;#34; != win32 ]; then
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ngx_feature=&amp;#34;C compiler&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ngx_feature_name=
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-    ngx_feature_run=yes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    ngx_feature_run=no
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;     ngx_feature_incs=
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ngx_feature_path=
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ngx_feature_libs=
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git a/nginx-1.14.2/auto/lib/openssl/make b/nginx-1.14.2/auto/lib/openssl/make
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index 126a238..7a0e768 100644
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- a/nginx-1.14.2/auto/lib/openssl/make
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ b/nginx-1.14.2/auto/lib/openssl/make
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -51,7 +51,7 @@ END
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; $OPENSSL/.openssl/include/openssl/ssl.h:	$NGX_MAKEFILE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 	cd $OPENSSL \\
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 	&amp;amp;&amp;amp; if [ -f Makefile ]; then \$(MAKE) clean; fi \\
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-	&amp;amp;&amp;amp; ./config --prefix=$ngx_prefix no-shared no-threads $OPENSSL_OPT \\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+	&amp;amp;&amp;amp; ./config --prefix=$ngx_prefix no-shared no-threads --cross-compile-prefix=riscv64-linux-musl- $OPENSSL_OPT \\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; 	&amp;amp;&amp;amp; \$(MAKE) \\
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 	&amp;amp;&amp;amp; \$(MAKE) install_sw LIBDIR=lib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git a/nginx-1.14.2/auto/types/sizeof b/nginx-1.14.2/auto/types/sizeof
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index 480d8cf..52c7287 100644
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- a/nginx-1.14.2/auto/types/sizeof
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ b/nginx-1.14.2/auto/types/sizeof
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -33,7 +33,7 @@ int main(void) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; END
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-ngx_test=&amp;#34;$CC $CC_TEST_FLAGS $CC_AUX_FLAGS \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+ngx_test=&amp;#34;gcc $CC_TEST_FLAGS $CC_AUX_FLAGS \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;           -o $NGX_AUTOTEST $NGX_AUTOTEST.c $NGX_LD_OPT $ngx_feature_libs&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; eval &amp;#34;$ngx_test &amp;gt;&amp;gt; $NGX_AUTOCONF_ERR 2&amp;gt;&amp;amp;1&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着，在 &lt;code&gt;./configure --with-cc=riscv64-linux-musl-gcc --with-cc-opt=-static --with-ld-opt=-static --without-pcre --without-http_rewrite_module --without-http_gzip_module --with-poll_module --without-http_upstream_zone_module&lt;/code&gt; 之后，修改 &lt;code&gt;objs/ngx_auto_config.h&lt;/code&gt;，加入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef NGX_SYS_NERR
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define NGX_SYS_NERR  132
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef NGX_HAVE_SYSVSHM
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define NGX_HAVE_SYSVSHM 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着就可以正常编译了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ file objs/nginx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objs/nginx: ELF 64-bit LSB executable, UCB RISC-V, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SYSV&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, statically linked, with debug_info, not stripped
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>在古老的 OS 上运行一个干净的新的环境</title>
      <link>https://jia.je/devops/2019/03/21/new-clean-env-on-old-os/</link>
      <pubDate>Thu, 21 Mar 2019 22:46:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2019/03/21/new-clean-env-on-old-os/</guid>
      <description>&lt;p&gt;由于某些课程的原因，需要在一个 CentOS 7 上跑一些编译和运行代码。看到这么古老的软件，我心想不行，肯定要找新一些的软件来用。首先想到的是 tmux，于是按照&lt;a href=&#34;https://gist.github.com/ryin/3106801&#34;&gt;网上的脚本&lt;/a&gt; 很快装了一个 tmux 2.8 版本，果然好了很多。但是常用的很多软件依然是个问题。试了一下最近比较新的 code-server，因为 ABI 问题跑不起来。&lt;/p&gt;
&lt;p&gt;于是开始想玩骚操作。首先想到的是 Gentoo Prefix，不过既然是别人的机器，还是算了。又找了 fakeroot 配合 alpine rootfs 的方案，但编译不过，估计是内核版本问题。又试了一下 fakechroot，但它需要配合 fakeroot 使用，这就凉了。&lt;/p&gt;
&lt;p&gt;然后又找了一些替代方案。一是 uchroot，但由于 CMake 版本太老也编译不过。最后发现了 &lt;a href=&#34;https://proot-me.github.io/&#34;&gt;PRoot&lt;/a&gt; ，直接提供 prebuilt 然后很容易就可以跑起来：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./proot -b /proc -b /dev -r $CHROOT /bin/busybox sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是就进到了 alpine 的 rootfs 中，&lt;a href=&#34;http://dl-cdn.alpinelinux.org/alpine/v3.9/releases/x86_64/alpine-minirootfs-3.9.2-x86_64.tar.gz&#34;&gt;下载地址&lt;/a&gt;。进去以后发现没有编辑器，于是出来把 apk 的源改了，加了 resolv.conf，就成功地安装了很多很新的软件了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 15 期</title>
      <link>https://jia.je/misc/2019/03/16/weekly-sharing-15/</link>
      <pubDate>Sat, 16 Mar 2019 01:04:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/03/16/weekly-sharing-15/</guid>
      <description>&lt;p&gt;继续沉迷写 OS&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;嵌入 graphics for rust 可以绘制 bmp 了 &lt;a href=&#34;https://wapl.es/rust/2019/03/04/embedded-graphics-0.4.7-bmp-support.html&#34;&gt;https://wapl.es/rust/2019/03/04/embedded-graphics-0.4.7-bmp-support.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rustup component history 方便 nightly 日期选择 &lt;a href=&#34;https://rust-lang.github.io/rustup-components-history/index.html&#34;&gt;https://rust-lang.github.io/rustup-components-history/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;grpcurl 用于 grpc 调试 &lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;https://github.com/fullstorydev/grpcurl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;grafana 6.0 is out &lt;a href=&#34;http://docs.grafana.org/guides/whats-new-in-v6-0/&#34;&gt;http://docs.grafana.org/guides/whats-new-in-v6-0/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;康哥推荐的写论文工具：https://github.com/stsewd/ieee-pandoc-template&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 14 期</title>
      <link>https://jia.je/misc/2019/03/08/weekly-sharing-14/</link>
      <pubDate>Fri, 08 Mar 2019 18:25:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/03/08/weekly-sharing-14/</guid>
      <description>&lt;p&gt;最近沉迷写 OS，没怎么搜罗新的东西（&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用 Docker 做交叉编译 &lt;a href=&#34;https://github.com/dockcross/dockcross#dockcross&#34;&gt;https://github.com/dockcross/dockcross#dockcross&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;tar inplace extraction 有意思的思路 &lt;a href=&#34;https://gitlab.com/antonok/taro&#34;&gt;https://gitlab.com/antonok/taro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;los 16.0 发布 基于 Android Pie &lt;a href=&#34;https://lineageos.org/Changelog-22/&#34;&gt;https://lineageos.org/Changelog-22/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 1.33.0 Pin 进入 stable &lt;a href=&#34;https://blog.rust-lang.org/2019/02/28/Rust-1.33.0.html&#34;&gt;https://blog.rust-lang.org/2019/02/28/Rust-1.33.0.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 用于编写 cli 软件的工具库 &lt;a href=&#34;https://rust-lang-nursery.github.io/cli-wg/index.html&#34;&gt;https://rust-lang-nursery.github.io/cli-wg/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;自动使用 CI 发布二进制 prebuilt 的模板 &lt;a href=&#34;https://github.com/japaric/trust&#34;&gt;https://github.com/japaric/trust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;转换 gif 到 xlsx 很神奇 &lt;a href=&#34;https://github.com/pugwonk/gif2xlsx/blob/master/README.md&#34;&gt;https://github.com/pugwonk/gif2xlsx/blob/master/README.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go REPL &lt;a href=&#34;https://github.com/cosmos72/gomacro&#34;&gt;https://github.com/cosmos72/gomacro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基于区块链的论坛海星 其实是区块链数据库 &lt;a href=&#34;https://github.com/CovenantSQL/CovenantForum&#34;&gt;https://github.com/CovenantSQL/CovenantForum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rime emoji 嵌入输入法 &lt;a href=&#34;https://github.com/rime/rime-emoji&#34;&gt;https://github.com/rime/rime-emoji&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个神奇的数据库 &lt;a href=&#34;https://github.com/mit-pdos/noria&#34;&gt;https://github.com/mit-pdos/noria&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个讲内核的 gitbook &lt;a href=&#34;https://richardweiyang.gitbooks.io/kernel-exploring/&#34;&gt;https://richardweiyang.gitbooks.io/kernel-exploring/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用 React 写桌面控件 &lt;a href=&#34;http://tracesof.net/uebersicht/&#34;&gt;http://tracesof.net/uebersicht/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>在 rCore 上运行 nginx</title>
      <link>https://jia.je/programming/2019/03/08/running-nginx-on-rcore/</link>
      <pubDate>Fri, 08 Mar 2019 18:07:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2019/03/08/running-nginx-on-rcore/</guid>
      <description>&lt;p&gt;阿 西 吧 nginx 终于能在 rCore 上跑了 orrrrrrrz&lt;/p&gt;
&lt;p&gt;通过这半个多月来的大量开发，我和王润基 @wangrunji0408 学长算是终于完成了第一个 milestone：跑起来一个 nginx。遇到了很多困难，大概有这些：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;syscall 实现不全。各种方面都缺，然后 nginx 在编译的时候又检测到比较新的 OS 版本，所以很多 syscall 都用了新的来替代老的，例如 readv/writev pread/pwrite accept4 等等，所以这方面做了一些工作。另外，还有很多新的 syscall 进来，太多了我就不细说了，基本上一个 commit 做一点一个 commit 做一点这个样子。&lt;/li&gt;
&lt;li&gt;nginx 用到了 SSE 的寄存器 xmm，但是之前是没有开的。所以把 sse 打开，然后切换上下文的时候把 sse 通过 fxsave 保存和 fxrstor 恢复（有意思的是，as 居然不认这俩，只好手动写字节码），然后为了 16bit 的对齐又写了几行汇编代码。这块问题不大，今天一会就搞定了。但是如果要性能更高一些的话，可能需要在第一次使用 xmm 的时候再开始保存，大概就是加一个 bit 的事情。&lt;/li&gt;
&lt;li&gt;文件系统有点崩。实现还是有很多 BUG，表现就是需要经常重新 mksfs 一下，再重启加载完好的 fs，有时候强制关机一下就又崩了。&lt;/li&gt;
&lt;li&gt;内存管理做了一些改变。为了实现更加完整的 mmap mumap 和 mprotect，又发现了一些新的 BUG 在里面，然后慢慢修复了。就是实现的有点粗暴。&lt;/li&gt;
&lt;li&gt;死锁问题。这个其实现在还会出现，只是还没调出来，也不会百分百出现。我们计划在锁上面做一些死锁检测，例如记住是谁上锁的，等等。现在就遇到一个很玄学的死锁问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后代码也是一边在写一边在重构吧，很多地方现在都写得很粗暴，FIXME 和 TODO 留了很多，很多地方也写得不够优雅。以后再慢慢重构 + 优化吧。&lt;/p&gt;
&lt;p&gt;截图留念：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/nginx.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;再往前的话，还有很多小的问题，例如网卡的中断启用了但没有改 mask，所以啥也没收到，靠 QEMU Tracing 找到问题。还有一个很有意思的现象，就是如果 elf 的 program header 没有 phdr 这个项的时候，我们发现，可以通过第一个 load（如果加载了完整的 elf 头的话），我们可以从这里推断出 phdr 的地址（load 的虚拟地址加偏移），然后丢到 auxv 里去让 musl 配置 tls。总之这些都解决了。也不用去考虑兼容 litc 了，已经全部向 linux 靠拢了，稳。&lt;/p&gt;
&lt;p&gt;注：最简 nginx 编译参数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./configure --with-cc=/usr/bin/musl-gcc --with-cc-opt=-static --with-ld-opt=-satic --without-pcre --without-http_rewrite_module --without-http_gzip_module --with-poll_module
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样编译出来是一个静态文件，并且在 strip 之后只有不到 1M 的大小。&lt;/p&gt;
&lt;p&gt;最简 nginx 配置：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;daemon off;
master_process off;

events {
    use poll;
}

http {
    server {
        listen 80;
        server_name _;

        root /;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就免去了一些麻烦（多线程、多进程交互还是有很多问题），但确实可以跑起来了。&lt;/p&gt;
&lt;p&gt;另外，还需要写一份 /etc/passwd 和 /etc/group 用于 nobody 和 nogroup。不需要其他额外的东西了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>实现网络的 syscall</title>
      <link>https://jia.je/programming/2019/03/04/implement-network-syscalls/</link>
      <pubDate>Mon, 04 Mar 2019 16:40:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2019/03/04/implement-network-syscalls/</guid>
      <description>&lt;p&gt;有了网卡驱动，接下来要做的就做网络的 syscall 了。为了测试，首先在 busybox 里找可以用来测试的 applet，由于没有实现 poll，所以 nc telnet 啥的都用不了。最后选择到了 ping 和 pscan 上。&lt;/p&gt;
&lt;p&gt;ping 大家都很了解，pscan 就是一个扫端口的，对一个 ip 连续的若干个端口发起 tcp 请求。这就要求我提供 raw socket 和 tcp socket 状态的支持。由于网络栈本身是异步的，但 read connect 这些函数在不调 setsockopt 的前提下又是同步的，然而现在又没有 signal 可以用，要是 block 了就再也出不来了。于是就采用了 Condvar 的办法，拿一个全局的条件变量，当 poll 不到内容的时候，先把线程拿掉，等到网络栈更新了，再恢复。这样至少不会把 cpu 也 block 住。&lt;/p&gt;
&lt;p&gt;然后就是把 socket 部分改了又改吧，数据结构的设计改了几次，为了解决 ownership 问题上锁啊也有点多，但是也更细了，虽然实际上可能没有必要，因为上面还有大的锁。不过性能还不是现在考虑的重点，关键还要先把 send recv accept bind listen 啥的写得差不多了，然后还有把 poll/select 实现了，这个很关键。&lt;/p&gt;
&lt;p&gt;中间遇到的最大的坑就是，接收 pci interrupt 的时候总是啥也没有，然后靠万能的 qemu trace 发现，原来是 mask 掉了，所以啥也收不了，然后最后的解决方案就是用 MSI Interrupt #55 搞定了这个问题。至于为啥是 55 呢，因为 23 + 32 = 55 啊（误&lt;/p&gt;
&lt;p&gt;总之是修好了。终于可以继续写其它的 syscall 了。还没想好 poll 要怎么写，orz。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 13 期</title>
      <link>https://jia.je/misc/2019/03/01/weekly-sharing-13/</link>
      <pubDate>Fri, 01 Mar 2019 08:39:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/03/01/weekly-sharing-13/</guid>
      <description>&lt;p&gt;今天还是早点发吧&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rust concurrent work-stealing queue 可能可以放到调度器里用 &lt;a href=&#34;https://github.com/kinghajj/deque&#34;&gt;https://github.com/kinghajj/deque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持信用卡/时间等格式信息的输入控件 &lt;a href=&#34;https://github.com/nosir/cleave.js&#34;&gt;https://github.com/nosir/cleave.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 的简单 http server &lt;a href=&#34;https://github.com/svenstaro/miniserve&#34;&gt;https://github.com/svenstaro/miniserve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Coroutines &amp;amp; Modules Added For C++20 &lt;a href=&#34;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Coroutines-Modules-CPP20&#34;&gt;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Coroutines-Modules-CPP20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implementing TCP in Rust (part 1) &lt;a href=&#34;https://www.youtube.com/watch?v=bzja9fQWzdA&#34;&gt;https://www.youtube.com/watch?v=bzja9fQWzdA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个类似 Vuetify 的框架 &lt;a href=&#34;https://buefy.org/&#34;&gt;https://buefy.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;systemd tmpfiles.d 用于管理特定的临时文件夹 &lt;a href=&#34;https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html&#34;&gt;https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;获取 ASN 信息的 API &lt;a href=&#34;https://bgpview.docs.apiary.io/#reference/0/asn-prefixes/view-asn-prefixes&#34;&gt;https://bgpview.docs.apiary.io/#reference/0/asn-prefixes/view-asn-prefixes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust getter/setter generation &lt;a href=&#34;https://github.com/Hoverbear/getset&#34;&gt;https://github.com/Hoverbear/getset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Golang 1.12 发布：TLS 1.3 &lt;a href=&#34;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Golang-1.12-Released&#34;&gt;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Golang-1.12-Released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个笑话 &lt;a href=&#34;https://redd.it/aux77g&#34;&gt;https://redd.it/aux77g&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 的 STM &lt;a href=&#34;https://github.com/mtak-/swym&#34;&gt;https://github.com/mtak-/swym&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;自动同步视频和字幕 &lt;a href=&#34;https://github.com/smacke/subsync&#34;&gt;https://github.com/smacke/subsync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用于快速开发的 http server &lt;a href=&#34;https://zeroserver.io/&#34;&gt;https://zeroserver.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个自动加载的 http server &lt;a href=&#34;https://github.com/tapio/live-server&#34;&gt;https://github.com/tapio/live-server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用 markdown 写 presentation 在线版 &lt;a href=&#34;https://github.com/gnab/remark&#34;&gt;https://github.com/gnab/remark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;解决 excel 读取 nodejs 生成的 csv 的乱码问题 &lt;a href=&#34;https://github.com/f2e-journey/xueqianban/issues/34&#34;&gt;https://github.com/f2e-journey/xueqianban/issues/34&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;清华的 Rust OS &lt;a href=&#34;https://github.com/oscourse-tsinghua/rcore_plus&#34;&gt;https://github.com/oscourse-tsinghua/rcore_plus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GPU 加速的 JS &lt;a href=&#34;http://gpu.rocks/&#34;&gt;http://gpu.rocks/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;小型的 k8s 实现：k3s &lt;a href=&#34;https://k3s.io/&#34;&gt;https://k3s.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;粗暴的隧道，极低的带宽，有啥用 &lt;a href=&#34;https://0day.work/performance-of-iodine-over-dns-over-https/&#34;&gt;https://0day.work/performance-of-iodine-over-dns-over-https/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Caddy 乘着 Go 官方支持的车轻松加入 TLS1.3 家族 &lt;a href=&#34;https://github.com/mholt/caddy/pull/2399/files&#34;&gt;https://github.com/mholt/caddy/pull/2399/files&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>使用 Rust 实现 e1000 驱动</title>
      <link>https://jia.je/programming/2019/02/26/network-driver-again/</link>
      <pubDate>Tue, 26 Feb 2019 20:30:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2019/02/26/network-driver-again/</guid>
      <description>&lt;p&gt;是的。我又来了。上次做了&lt;a href=&#34;https://jia.je/programming/2019/01/29/virtio-drivers-implementation/&#34;&gt;使用 Rust 实现 VirtIO 驱动&lt;/a&gt;之后，继续往 rCore 加更多的驱动支持。由于现在工作重点是 x86_64 下的 syscall 实现，所以选了一个比较有代表性的驱动 e1000 来实现。其实如果只是为了在 qemu 下运行的话，其实只需要支持 virtio-pci 就可以了，原来的 virtio-net 直接拿来用就可以了。&lt;/p&gt;
&lt;p&gt;为什么挑 e1000 呢，一方面是支持的设备多，有真实硬件可以测试，虽然不一定要裸机上跑，但是可以通过 PCI passthrough 来测试驱动的正确性。另一方面是网上的资料比较多，有现成的简单的代码可以借鉴。这次主要借鉴了三个来源：一是 Biscuit OS，二是 Judge Duck OS，三是 Linux。&lt;/p&gt;
&lt;p&gt;首先是实现了简单的 PCI 总线的枚举，然后找到对应的设备，激活，并且找到映射的内存地址，然后把原来 C 语言的实现搬运到 Rust 中。这个过程中遇到很多坑，例如一开始我以为内核里 pa 和 va 是一个固定的偏移，不过多次尝试后才发现这个假设只对 riscv 平台里的实现成立。&lt;/p&gt;
&lt;p&gt;这个时候就可以收到外面给进来的以太网帧了。接着就是把它接入到 smoltcp 的 API 中。但是发包又不工作了，尝试了很多次，各种方法也不行。其中特别要提到的就是 qemu 的 tracing API，它在帮助我调试之前的 virtio 驱动和这次的 e1000(e) 驱动中起到了很大的帮助。不过，遗憾的是，发包相关的代码里的 trace 不足以让我找到问题的所在，我只好采用了最后一招：&lt;/p&gt;
&lt;p&gt;下载 QEMU，自己改，然后自己编译。&lt;/p&gt;
&lt;p&gt;这个方法果然很有效啊，经过简单的几个修改，很快就定位到问题所在了，原来就是一个简单的错误，把 4 写成了 8。这个过程中我也发现 QEMU 在 incremental build 的时候似乎会 segfault，我没管这么多，反正编译也不慢，次数也不多，每次 clean 再 build 问题也不大。&lt;/p&gt;
&lt;p&gt;接下来要摸索 82559 的网卡适用情况如何，因为有一个真实的 82559 网卡可供测试。另一方面就要开始考虑 socket 那一套 syscall 怎么做了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 12 期</title>
      <link>https://jia.je/misc/2019/02/23/weekly-sharing-12/</link>
      <pubDate>Sat, 23 Feb 2019 07:24:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/02/23/weekly-sharing-12/</guid>
      <description>&lt;p&gt;看脑王迟到了（&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rust Embedded Graphics 库 &lt;a href=&#34;https://github.com/jamwaffles/embedded-graphics&#34;&gt;https://github.com/jamwaffles/embedded-graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wireguard for macOS &lt;a href=&#34;https://lists.zx2c4.com/pipermail/wireguard/2019-February/003853.html&#34;&gt;https://lists.zx2c4.com/pipermail/wireguard/2019-February/003853.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wireguard-go UI &lt;a href=&#34;https://github.com/aequitas/macos-menubar-wireguard&#34;&gt;https://github.com/aequitas/macos-menubar-wireguard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;T2 逆向 &lt;a href=&#34;https://duo.com/labs/research/apple-t2-xpc&#34;&gt;https://duo.com/labs/research/apple-t2-xpc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;脑王剪辑 &lt;a href=&#34;https://www.bilibili.com/video/av43972717&#34;&gt;https://www.bilibili.com/video/av43972717&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dram 推荐的工具 notion.so&lt;/li&gt;
&lt;li&gt;带授权和审计的 sudo &lt;a href=&#34;https://github.com/square/sudo_pair&#34;&gt;https://github.com/square/sudo_pair&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rust 的 manpage 生成器 &lt;a href=&#34;https://github.com/rust-cli/man&#34;&gt;https://github.com/rust-cli/man&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;才发现 Github 有 Project 功能 &lt;a href=&#34;https://help.github.com/en/articles/about-project-boards&#34;&gt;https://help.github.com/en/articles/about-project-boards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rust 的 elf/macho 生成 &lt;a href=&#34;https://github.com/m4b/faerie&#34;&gt;https://github.com/m4b/faerie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rust 的 elf/macho/pe 读取 &lt;a href=&#34;https://github.com/m4b/goblin&#34;&gt;https://github.com/m4b/goblin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rust 的 glob 实现 &lt;a href=&#34;https://github.com/rust-lang-nursery/glob&#34;&gt;https://github.com/rust-lang-nursery/glob&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基于 BoringSSL 的 rust 加密库 &lt;a href=&#34;https://mundane.googlesource.com/mundane&#34;&gt;https://mundane.googlesource.com/mundane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;从 linux 交叉编译到 macOS 的方法 &lt;a href=&#34;https://github.com/tpoechtrager/osxcross&#34;&gt;https://github.com/tpoechtrager/osxcross&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cargo-deb 后又有了 cargo-rpm &lt;a href=&#34;https://github.com/RustRPM/cargo-rpm&#34;&gt;https://github.com/RustRPM/cargo-rpm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;自带 diff 的 assert_eq 宏 &lt;a href=&#34;https://github.com/colin-kiegel/rust-pretty-assertions&#34;&gt;https://github.com/colin-kiegel/rust-pretty-assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Learn Helper 4.0 哈利版发布 &lt;a href=&#34;https://chrome.google.com/webstore/detail/learn-helper/mdehapphdlihjjgkhmoiknmnhcjpjall&#34;&gt;https://chrome.google.com/webstore/detail/learn-helper/mdehapphdlihjjgkhmoiknmnhcjpjall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;检查依赖中存在的 unsafe &lt;a href=&#34;https://github.com/anderejd/cargo-geiger&#34;&gt;https://github.com/anderejd/cargo-geiger&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>预告 Learn-Project 4.0 版</title>
      <link>https://jia.je/misc/2019/02/17/learn-project-preview/</link>
      <pubDate>Sun, 17 Feb 2019 13:04:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/02/17/learn-project-preview/</guid>
      <description>&lt;p&gt;不知道大家听没听说过 Google Chrome 有个插件，叫做 Learn Project，是一个网络学堂的改良前端。不过，随着网络学堂的不断更（xia）新（gao），它已经不再适用于现在的版本。于是，哈利橙（&lt;a href=&#34;https://github.com/Harry-Chen&#34;&gt;@Harry-Chen&lt;/a&gt;）决定利用寒假时间，在今天（2.17）之前完成 Learn Project 4.0 的开发。为什么叫 4.0 呢，因为哈利橙课程的 GPA 众数是 4.0。这个版本采用先进的 React 框架编写（Vue 塞高），使用了 Material Ui 作为界面框架（这我觉得可以），目前的一个参考图（图源哈利橙）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/learn_project.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;看那满眼的高分数，希望 Learn Project 4.0 能在 flag 倒下之前完成。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 11 期</title>
      <link>https://jia.je/misc/2019/02/16/weekly-sharing-11/</link>
      <pubDate>Sat, 16 Feb 2019 00:42:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/02/16/weekly-sharing-11/</guid>
      <description>&lt;p&gt;对不起迟到了（&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Google 的 fuzzing 家族又来了个新成员 太喜欢造轮子了 &lt;a href=&#34;https://github.com/google/clusterfuzz&#34;&gt;https://github.com/google/clusterfuzz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;有趣的文本生成工具 &lt;a href=&#34;https://github.com/TheBerkin/rant&#34;&gt;https://github.com/TheBerkin/rant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;又一个 side channel attack &lt;a href=&#34;https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2019/february/downgrade-attack-on-tls-1.3-and-vulnerabilities-in-major-tls-libraries/&#34;&gt;https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2019/february/downgrade-attack-on-tls-1.3-and-vulnerabilities-in-major-tls-libraries/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来自 Prof Fan 的一个 cf dns 权限限制分发的工具 &lt;a href=&#34;https://github.com/ProfFan/cloudflare-proxy-rs&#34;&gt;https://github.com/ProfFan/cloudflare-proxy-rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;部署到了我的博客的小工具 大家体会到了吗 &lt;a href=&#34;https://instant.page/&#34;&gt;https://instant.page/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;教育性质的 C on web &lt;a href=&#34;https://vasyop.github.io/miniC-hosting/&#34;&gt;https://vasyop.github.io/miniC-hosting/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;激活清华教育版 win10? &amp;ndash;&amp;gt; dig +short TXT win10.harrychen.xyz&lt;/li&gt;
&lt;li&gt;windows95 v2.0 发布（误 &lt;a href=&#34;https://github.com/felixrieseberg/windows95/releases/tag/v2.0.0&#34;&gt;https://github.com/felixrieseberg/windows95/releases/tag/v2.0.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;已经部署到 tuna 的 rustup-mirror crate &lt;a href=&#34;https://github.com/jiegec/rustup-mirror&#34;&gt;https://github.com/jiegec/rustup-mirror&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Forth 也能有 http 服务端框架 &lt;a href=&#34;http://www.1-9-9-1.com/&#34;&gt;http://www.1-9-9-1.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bartender 的开源替代 实测可用 &lt;a href=&#34;https://github.com/Mortennn/Dozer&#34;&gt;https://github.com/Mortennn/Dozer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;给不支持 pac 的客户端在 http proxy 上套一层 &lt;a href=&#34;https://github.com/williambailey/pacproxy&#34;&gt;https://github.com/williambailey/pacproxy&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>近来做 Stanford CS140e 的一些进展和思考（9）</title>
      <link>https://jia.je/programming/2019/02/12/thoughts-on-stanford-cs140e-9/</link>
      <pubDate>Tue, 12 Feb 2019 11:35:00 +0400</pubDate>
      
      <guid>https://jia.je/programming/2019/02/12/thoughts-on-stanford-cs140e-9/</guid>
      <description>&lt;p&gt;距离&lt;a href=&#34;https://jia.je/programming/2018/04/10/thoughts-on-stanford-cs140e-8/&#34;&gt;上一篇 CS140e 系列文章&lt;/a&gt;已经过去了很久，距离第一篇文章过了一年零几天。在后来这一段时间内，CS140e 结束了课程，又开始了新一年的 winter 2019 课程，迎来的却是 C 版本的 CS140e，不禁让人感到失望。还好，Sergio Benitez 放出了原来的 CS140e 的&lt;a href=&#34;https://cs140e.sergio.bz&#34;&gt;镜像&lt;/a&gt;，如果大家仍然想回去查看原版优质的 CS140e，可以点进去参考。&lt;/p&gt;
&lt;p&gt;后来因为机缘巧合参与到了清华的 Rust OS 课程，又想到回来把原来的 CS140e 进行更新，于是顺带把跑在 QEMU 下的一些需要的工作给做了，另外把 Rust nightly 版本更新了（一年前的 nightly 还能叫 nightly？），才发现标准库变化还是蛮大的，由于 nightly 版本变了，而且原来是内嵌了一个阉割过的 std，所以主要是从新的 std 里抄代码到内嵌的 std 中。另外，原来的 xargo 也不再维护了，转而使用 rust-xbuild 进行交叉编译。&lt;/p&gt;
&lt;p&gt;然后又顺手实现了 backtrace 和从 backtrace 中配合 dward symbols 找函数名的功能，不过实践证明，这些东西还是 addr2line 做得更好，所以也就没有做下去，在 relocation 上也是遇到了各种问题。这个经验也是应用到了 rCore 那边。&lt;/p&gt;
&lt;p&gt;再之后也就是寒假写驱动了，见之前的一个博文，我就没有在 CS140e 上去实现它了。有时间有兴趣的时候再考虑做一下 Raspberry Pi 的网卡驱动吧。&lt;/p&gt;
&lt;p&gt;写于迪拜雨天。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 10 期</title>
      <link>https://jia.je/misc/2019/02/08/weekly-sharing-10/</link>
      <pubDate>Fri, 08 Feb 2019 15:52:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/02/08/weekly-sharing-10/</guid>
      <description>&lt;p&gt;新年快乐！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Haskell to WASM compiler &lt;a href=&#34;https://github.com/tweag/asterius&#34;&gt;https://github.com/tweag/asterius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A ssh tarpit that sends endless banner &lt;a href=&#34;https://github.com/skeeto/endlessh&#34;&gt;https://github.com/skeeto/endlessh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use rust to write UEFI app &lt;a href=&#34;https://github.com/rust-osdev/uefi-rs&#34;&gt;https://github.com/rust-osdev/uefi-rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;神奇的小游戏 &lt;a href=&#34;https://yeahpython.github.io/game/game.html&#34;&gt;https://yeahpython.github.io/game/game.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;又一个后端 rust web 框架 &lt;a href=&#34;https://github.com/seanmonstar/warp&#34;&gt;https://github.com/seanmonstar/warp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;挺酷的一个网站 &lt;a href=&#34;https://github.com/pomber/github-history&#34;&gt;https://github.com/pomber/github-history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ws 调试工具 &lt;a href=&#34;https://github.com/vi/websocat&#34;&gt;https://github.com/vi/websocat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;React Hooks 进入正式版 &lt;a href=&#34;https://reactjs.org/blog/2019/02/06/react-v16.8.0.html&#34;&gt;https://reactjs.org/blog/2019/02/06/react-v16.8.0.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;又一个关于硬件的 wiki &lt;a href=&#34;https://wikidevi.com/wiki/Main_Page&#34;&gt;https://wikidevi.com/wiki/Main_Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;virtio-fs 项目 旨在替代 virtio-9p &lt;a href=&#34;https://virtio-fs.gitlab.io/&#34;&gt;https://virtio-fs.gitlab.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SergioBenitez 镜像了一份去年的 CS140e &lt;a href=&#34;https://cs140e.sergio.bz/&#34;&gt;https://cs140e.sergio.bz/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 9 期</title>
      <link>https://jia.je/misc/2019/02/01/weekly-sharing-9/</link>
      <pubDate>Fri, 01 Feb 2019 19:16:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/02/01/weekly-sharing-9/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;IDA Loader plugin for some Nintendo rom &lt;a href=&#34;https://github.com/w4kfu/IDA_loader&#34;&gt;https://github.com/w4kfu/IDA_loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;websocket daemon &lt;a href=&#34;http://websocketd.com/&#34;&gt;http://websocketd.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;实时的游戏开发器 &lt;a href=&#34;https://script-8.github.io/&#34;&gt;https://script-8.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;硬核逆向 Leica 相机的固件 &lt;a href=&#34;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html&#34;&gt;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;做 CTF 时遇到的整数溢出的 CVE &lt;a href=&#34;https://www.anquanke.com/post/id/104182&#34;&gt;https://www.anquanke.com/post/id/104182&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发现一个 speedtest 的轮子 &lt;a href=&#34;https://github.com/adolfintel/speedtest&#34;&gt;https://github.com/adolfintel/speedtest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;西数的 RISCV 核实现 &lt;a href=&#34;https://github.com/westerndigitalcorporation/swerv_eh1&#34;&gt;https://github.com/westerndigitalcorporation/swerv_eh1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOS 12.2 会有更多的 PWA 兹瓷 &lt;a href=&#34;https://twitter.com/mhartington/status/1089292031548145666&#34;&gt;https://twitter.com/mhartington/status/1089292031548145666&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;代替死去的 git-up: git config &amp;ndash;global alias.up &amp;lsquo;pull &amp;ndash;rebase &amp;ndash;autostash&amp;rsquo;&lt;/li&gt;
&lt;li&gt;利用已知明文破解旧版加密 zip 的工具 &lt;a href=&#34;https://github.com/kimci86/bkcrack&#34;&gt;https://github.com/kimci86/bkcrack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线看 jwt 内容 &lt;a href=&#34;https://jwt.io/&#34;&gt;https://jwt.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JS 的 Lua VM  &lt;a href=&#34;https://github.com/fengari-lua/fengari&#34;&gt;https://github.com/fengari-lua/fengari&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;鲁棒但不优雅的前端 KV &lt;a href=&#34;https://github.com/gruns/ImmortalDB&#34;&gt;https://github.com/gruns/ImmortalDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Emacs Modules doc &lt;a href=&#34;https://phst.eu/emacs-modules&#34;&gt;https://phst.eu/emacs-modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用 IPv6 的 Flow Label 实现类似 MPLS 的效果 &lt;a href=&#34;https://github.com/wenxin-wang/flowlabel-switching&#34;&gt;https://github.com/wenxin-wang/flowlabel-switching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;又一个 JS 实现的表格 &lt;a href=&#34;https://github.com/myliang/x-spreadsheet&#34;&gt;https://github.com/myliang/x-spreadsheet&lt;/a&gt; 类似以前用过的 handsontable&lt;/li&gt;
&lt;li&gt;@shankerwangmiao 推荐的光纤教程 &lt;a href=&#34;http://www.kepu.net.cn/gb/technology/telecom/fiber/fbr215.html&#34;&gt;http://www.kepu.net.cn/gb/technology/telecom/fiber/fbr215.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用 Rust 写 iOS App &lt;a href=&#34;https://medium.com/visly/rust-on-ios-39f799b3c1dd&#34;&gt;https://medium.com/visly/rust-on-ios-39f799b3c1dd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build Once, Run Anywhere 还行 &lt;a href=&#34;https://wasmer.io/&#34;&gt;https://wasmer.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;挺科学的 DNS proxy &lt;a href=&#34;https://github.com/AdguardTeam/dnsproxy&#34;&gt;https://github.com/AdguardTeam/dnsproxy&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>使用 Rust 实现 VirtIO 驱动</title>
      <link>https://jia.je/programming/2019/01/29/virtio-drivers-implementation/</link>
      <pubDate>Tue, 29 Jan 2019 17:23:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2019/01/29/virtio-drivers-implementation/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近在给 rCore 添加驱动层的支持。一开始是想做网卡驱动，后来发现， &lt;code&gt;qemu-system-riscv32&lt;/code&gt; 只支持如下的驱动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# qemu-system-riscv32 -device help&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Storage devices:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scsi-cd&amp;#34;&lt;/span&gt;, bus SCSI, desc &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtual SCSI CD-ROM&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scsi-disk&amp;#34;&lt;/span&gt;, bus SCSI, desc &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtual SCSI disk or CD-ROM (legacy)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scsi-hd&amp;#34;&lt;/span&gt;, bus SCSI, desc &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtual SCSI disk&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtio-blk-device&amp;#34;&lt;/span&gt;, bus virtio-bus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtio-scsi-device&amp;#34;&lt;/span&gt;, bus virtio-bus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Network devices:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtio-net-device&amp;#34;&lt;/span&gt;, bus virtio-bus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Input devices:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtconsole&amp;#34;&lt;/span&gt;, bus virtio-serial-bus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtio-keyboard-device&amp;#34;&lt;/span&gt;, bus virtio-bus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtio-mouse-device&amp;#34;&lt;/span&gt;, bus virtio-bus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtio-serial-device&amp;#34;&lt;/span&gt;, bus virtio-bus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtio-tablet-device&amp;#34;&lt;/span&gt;, bus virtio-bus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtserialport&amp;#34;&lt;/span&gt;, bus virtio-serial-bus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Display devices:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtio-gpu-device&amp;#34;&lt;/span&gt;, bus virtio-bus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Misc devices:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loader&amp;#34;&lt;/span&gt;, desc &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Generic Loader&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtio-balloon-device&amp;#34;&lt;/span&gt;, bus virtio-bus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtio-crypto-device&amp;#34;&lt;/span&gt;, bus virtio-bus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtio-rng-device&amp;#34;&lt;/span&gt;, bus virtio-bus
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以要实现网卡的话，只能实现这里的 &lt;code&gt;virtio-net-device&lt;/code&gt; ，而 VirtIO 驱动之间有很多共通的地方，于是顺带把 &lt;code&gt;gpu&lt;/code&gt; &lt;code&gt;mouse&lt;/code&gt; 和 &lt;code&gt;blk&lt;/code&gt; 实现了。&lt;/p&gt;
&lt;h2 id=&#34;第一个驱动-virtio-net-的实现&#34;&gt;第一个驱动 &lt;code&gt;virtio-net&lt;/code&gt; 的实现&lt;/h2&gt;
&lt;p&gt;首先想到并且实现了的是网卡驱动， &lt;code&gt;virtio-net&lt;/code&gt; 。最开始的时候，为了简单，只开了一块缓冲区，每次同时只收/发一个包。首先拿了 &lt;a href=&#34;https://github.com/jiegec/device_tree-rs&#34;&gt;device_tree-rs&lt;/a&gt; 读取 bbl 传过来的 dtb 地址，找到各个 &lt;code&gt;virtio_mmio&lt;/code&gt; 总线以后按照设备类型找到对应的设备。然后就是对着 virtio 的标准死磕，同时看 Linux 和 QEMU 的源代码辅助理解，最后终于是成功地把收/发的两个 virtqueue 配置好，并且在中断的时候处理收到的包。这个时候，可以成功地输出收到的包的内容，并且发出指定内容的包了。效果就是看到了这样的图片（图中网站是 &lt;a href=&#34;https://hpd.gasmi.net/&#34;&gt;Hex Packet Decoder&lt;/a&gt;）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/arp_packet.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;基于此，写了一个简单的以太网帧的解析，ARP 的回复和 ping 的回复（直接修改 &lt;code&gt;ECHO_REQUEST&lt;/code&gt; 为 &lt;code&gt;ECHO_REPLY&lt;/code&gt; 然后更新 CHECKSUM），实现了最基本的 ping：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/arping.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/ping.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;显卡驱动&#34;&gt;显卡驱动&lt;/h2&gt;
&lt;p&gt;网卡可以用了，很自然地会想到做一些其他的 virtio 驱动，第一个下手的是显卡。显卡和网卡的主要区别是，网卡是两个 queue 异步作，而在显卡驱动上则是在一个 queue 上每次放一输入一输出的缓冲区来进行交互，具体步骤在 virtio 标准中也写得很清楚。在这个过程中，QEMU 的 Tracing 功能帮了很大的忙，在调试 desc 的结构上提供了很多帮助。&lt;/p&gt;
&lt;p&gt;然后就在 framebuffer 上画了一个 mandelbrot：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/mandelbrot.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 @shankerwangmiao 的建议下，调了一下颜色：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/mandelbrot2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样就好看多了。&lt;/p&gt;
&lt;h2 id=&#34;http-服务器&#34;&gt;HTTP 服务器&lt;/h2&gt;
&lt;p&gt;在 @wangrunji0408 的提醒和建议下，我开始把一个 Rust 实现的网络栈 &lt;a href=&#34;https://github.com/m-labs/smoltcp&#34;&gt;smoltcp&lt;/a&gt; 集成到代码中来。这个库中，对底层 Interface 的要求如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当可以发包并且可以收包的时候，返回一收一发两个 Token，并在使用的时候调用指定的函数。&lt;/li&gt;
&lt;li&gt;当可以发包的时候，返回一个发的 Token，含义同上。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是我第一次看到这种抽象，而且也没有特别明确的文档表示，这个 Token 代表什么，我应该提供什么。我直接按照一些已有的例子，照着实现了一把。过程中遇到了 ownership 的问题，通过 Arc 和 Mutex 解决了，然后又出现了死锁的问题，调了半天才调出来。&lt;/p&gt;
&lt;p&gt;接着按照 somltcp 的样例写一个简单的 udp echo server 和（假的）tcp 服务器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// simple http server
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sockets.get::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TcpSocket&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(tcp_handle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;socket.is_open() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    socket.listen(&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;).unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; socket.can_send() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    write!(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTP/1.1 200 OK&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Server: rCore&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Content-Length: 13&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Content-Type: text/html&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Connection: Closed&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Hello, world!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    socket.close();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;虽然很粗暴，但是 work 了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/http.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;鼠标驱动和块设备驱动&#34;&gt;鼠标驱动和块设备驱动&lt;/h2&gt;
&lt;p&gt;接着自然是往 QEMU 支持的剩下的 virtio 设备里下手。首先下手的是鼠标驱动。这次遇到了新的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由于缓冲的存在，每次只有在 EV_SYN 的时候才会一次性把若干个事件放入队列中。&lt;/li&gt;
&lt;li&gt;一个事件就要一个 desc chain，意味着直接串足够大小的 buffer 到同一个 desc chain 中并不能工作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;于是只好痛定思痛照着 Linux 内核的实现把完整的 Virtqueue 的操作实现了，并且顺带把前面的网卡和显卡的驱动也更新了。果然，每次都是三个左右的事件（X，Y，SYN）插入，然后根据这些事件就可以计算出当前的鼠标位置了。&lt;/p&gt;
&lt;p&gt;至于块设备，遇到的则是别的坑。看标准的时候，本以为就一个结构体 virtio_blk_req 就搞完了，但仔细读了读，标准似乎没讲清楚，读的时候是怎么传，写的时候又是怎么传。于是在这里卡了很久，从 Tracing 信息可以看出，QEMU 一直认为我提供的 buffer 大小不正确，多次实验之后发现，给 device 写入的 buffer 大小为 block size 的整数倍加一，这个一存放的是状态，其他则是数据，真的太坑了。&lt;/p&gt;
&lt;p&gt;有了块设备以后，就可以替换掉原来的内嵌 SFS 的方案，转为直接从块设备读 SFS 文件。这里我没想明白 lazy_static 和 ownership 的一些问题，最后也则是@wangrunji0408 的帮助我解决了。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;用 Rust 写出一个可以工作的驱动并不难，只要知道 unsafe 怎么用，但是一旦需要深入思考这里应该用什么安全的方法封装的时候，才发现是个很困难的事情。现在虽然工作了，但是很多地方线程并不安全，代码也不够简洁高效，以后还有很多需要改进的地方。&lt;/p&gt;
&lt;h2 id=&#34;see-also&#34;&gt;See also&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oasis-tcs/virtio-spec&#34;&gt;Virtio Spec&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>THUWC 2019 小记</title>
      <link>https://jia.je/misc/2019/01/25/thuwc-2019/</link>
      <pubDate>Fri, 25 Jan 2019 11:00:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/01/25/thuwc-2019/</guid>
      <description>&lt;p&gt;前段时间，以工作人员的身份参加了在广州二中举办的 THUWC 2019。作为一只菜鸡 OI 选手，我没想到过我会以另一种身份参与一个我本来没能参与的活动，就好像以暑校辅导员的身份参与清华暑校一样。&lt;/p&gt;
&lt;p&gt;提早来到了赛场，布置场地，然后把机考的各个流程都过一遍，记住各个细节，各方面都有条不紊地进行，看着第一场前同学们特别激动地冲入考场，到最后一场同学们考完后的释放，在同学们身上看到了很多不成熟的样子，看到了兴奋想要和同伴分享的喜悦，也看到了不甘的眼泪。&lt;/p&gt;
&lt;p&gt;希望各位强大的选手们可以来到九字班、零字班乃至一字班，享受课改的乐趣吧嘿嘿嘿&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 8 期</title>
      <link>https://jia.je/misc/2019/01/25/weekly-sharing-8/</link>
      <pubDate>Fri, 25 Jan 2019 10:58:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/01/25/weekly-sharing-8/</guid>
      <description>&lt;p&gt;这周更加忙了，所以内容不多。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rust 1.32.0 is out 其中 dbg macro 挺有意思 &lt;a href=&#34;https://blog.rust-lang.org/2019/01/17/Rust-1.32.0.html&#34;&gt;https://blog.rust-lang.org/2019/01/17/Rust-1.32.0.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线的 hex packet decoder &lt;a href=&#34;https://hpd.gasmi.net/&#34;&gt;https://hpd.gasmi.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust Cheatsheet &lt;a href=&#34;https://www.breakdown-notes.com/make/load/rust_cs_canvas/true&#34;&gt;https://www.breakdown-notes.com/make/load/rust_cs_canvas/true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust tcp/ip stack &lt;a href=&#34;https://github.com/m-labs/smoltcp&#34;&gt;https://github.com/m-labs/smoltcp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;逆向 CAJ 的转换器 &lt;a href=&#34;https://github.com/JeziL/caj2pdf&#34;&gt;https://github.com/JeziL/caj2pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 7 期</title>
      <link>https://jia.je/misc/2019/01/18/weekly-sharing-7/</link>
      <pubDate>Fri, 18 Jan 2019 21:10:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/01/18/weekly-sharing-7/</guid>
      <description>&lt;p&gt;这周比较忙，所以内容不多。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在嵌入式系统里跑 Lisp 可以在串口开个 repl 在线调试 &lt;a href=&#34;http://www.ulisp.com/show?3J&#34;&gt;http://www.ulisp.com/show?3J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pattern matching for C++ &lt;a href=&#34;https://github.com/solodon4/Mach7&#34;&gt;https://github.com/solodon4/Mach7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个商业版的类似 ASan 的产品 不知道效果如何 &lt;a href=&#34;https://stensal.com/&#34;&gt;https://stensal.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用 Python 写 Cocoa 界面还行 &lt;a href=&#34;https://dawes.wordpress.com/2017/08/17/python-with-a-cocoa-gui-on-macos/&#34;&gt;https://dawes.wordpress.com/2017/08/17/python-with-a-cocoa-gui-on-macos/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 实现的权威搜索引擎 &lt;a href=&#34;https://github.com/toshi-search/Toshi&#34;&gt;https://github.com/toshi-search/Toshi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust Embedonomicon 讲述 Rust 在 bare metal 下的一些神奇操作 &lt;a href=&#34;https://docs.rust-embedded.org/embedonomicon/preface.html&#34;&gt;https://docs.rust-embedded.org/embedonomicon/preface.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发现另一个基于 Github 的 Disqus 替代品 &lt;a href=&#34;https://utteranc.es/&#34;&gt;https://utteranc.es/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;挺好的一部讲 Rust 生命周期的小书 &lt;a href=&#34;http://cglab.ca/~abeinges/blah/too-many-lists/book/README.html&#34;&gt;http://cglab.ca/~abeinges/blah/too-many-lists/book/README.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;跨平台的 Ctrl-C 处理 for Rust &lt;a href=&#34;https://github.com/Detegr/rust-ctrlc&#34;&gt;https://github.com/Detegr/rust-ctrlc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用 Rust 写 stm32 上程序所需要的库 &lt;a href=&#34;https://github.com/stm32-rs/stm32-rs&#34;&gt;https://github.com/stm32-rs/stm32-rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;go 语言编写的基于 fuse 的加密文件系统 &lt;a href=&#34;https://github.com/rfjakob/gocryptfs&#34;&gt;https://github.com/rfjakob/gocryptfs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 的图片解析库 &lt;a href=&#34;https://github.com/PistonDevelopers/image&#34;&gt;https://github.com/PistonDevelopers/image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用 BPF 做 API 解析和过滤 &lt;a href=&#34;https://github.com/cilium/cilium&#34;&gt;https://github.com/cilium/cilium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;学到了 x86 又一个指令集 bmi2 &lt;a href=&#34;https://github.com/jordanbray/chess&#34;&gt;https://github.com/jordanbray/chess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FoundationDB 推出 Record Layer 名字十分贴切 &lt;a href=&#34;https://github.com/foundationdb/fdb-record-layer/&#34;&gt;https://github.com/foundationdb/fdb-record-layer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个开源的教室电脑监控系统 &lt;a href=&#34;https://github.com/veyon/veyon&#34;&gt;https://github.com/veyon/veyon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DNS flag day &lt;a href=&#34;https://dnsflagday.net/&#34;&gt;https://dnsflagday.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust stable 1.32.0 发布 &lt;a href=&#34;https://blog.rust-lang.org/2019/01/17/Rust-1.32.0.html&#34;&gt;https://blog.rust-lang.org/2019/01/17/Rust-1.32.0.html&lt;/a&gt; dbg 宏好评&lt;/li&gt;
&lt;li&gt;各 MacBook 的 Linux 支持情况一览 &lt;a href=&#34;https://github.com/Dunedan/mbp-2016-linux&#34;&gt;https://github.com/Dunedan/mbp-2016-linux&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>实现 VSCodeVim 中支持中文分词的单词移动</title>
      <link>https://jia.je/software/2019/01/16/vscode-vim-chinese-word-motion/</link>
      <pubDate>Wed, 16 Jan 2019 00:15:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2019/01/16/vscode-vim-chinese-word-motion/</guid>
      <description>&lt;p&gt;最近用 VS Code 写中文 LaTeX 比较多，但是编辑起来总是比较麻烦，不能用各种带 w 的 motion，不然整行都没了。于是 @xalanq 提出能不能拿一个 JS 的分词库，魔改一下 VSCode Vim 来得到同样效果？答案是可以的。&lt;/p&gt;
&lt;p&gt;最后代码在 &lt;a href=&#34;https://github.com/jiegec/VSCodeVimChinese&#34;&gt;jiegec/VSCodeVimChinese&lt;/a&gt; 里，还没有合并到上游的打算。不定期根据上游发版本同步更新，在 Github Release 里发布 vsix 文件，目前版本为 v1.0.1。在 VS Code 里 &lt;code&gt;Extensions: Install from VSIX...&lt;/code&gt; 即可安装。&lt;/p&gt;
&lt;p&gt;经过对代码的研究，发现对 motion w 的处理都是通过 &lt;code&gt;getWordLeft&lt;/code&gt; &lt;code&gt;getWordRight&lt;/code&gt; 和 &lt;code&gt;getCurrentWordEnd&lt;/code&gt; 完成的。于是我修改了这三个函数，根据原来的返回值把字符串喂给分词器，再返回的新的位置。一开始用的是 &lt;code&gt;nodejieba&lt;/code&gt; ，但是因为需要用到 &lt;code&gt;node-gyp&lt;/code&gt; 遇到了 Node 版本不兼容的问题，于是换了一个纯 Node 的实现 &lt;code&gt;node-segment&lt;/code&gt; ，就完成了这个功能。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Grafana 中可视化 Ping 时把 Timeout 显示为指定值</title>
      <link>https://jia.je/software/2019/01/13/grafana-influxdb-visualize-ping/</link>
      <pubDate>Sun, 13 Jan 2019 18:36:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2019/01/13/grafana-influxdb-visualize-ping/</guid>
      <description>&lt;p&gt;刚遇到一个需求，就是用 Telegraf 收集 ping 信息，然后在 Grafana 里可视化当前的延迟，如果超时了，就显示一个指定值，如 999，这样就可以放到一个 Gauge 里面可视化了。但是，问题在于，Telegraf 的 ping input 在超时的时候只会在 result_code 里写一个 &lt;a href=&#34;https://github.com/influxdata/telegraf/tree/master/plugins/inputs/ping&#34;&gt;2&lt;/a&gt; ，其他项都是空的，因而如果直接用 GROUP BY time(interval) fill(999) 会导致最新的一个数据经常得到 999。这意味着需要根据 &amp;ldquo;result_code&amp;rdquo; 来进行区分 Timeout 的情况。最后捣腾了很久，得到了这个方案：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; select &amp;#34;average_response_ms&amp;#34; * (2 - &amp;#34;result_code&amp;#34;) / 2 + &amp;#34;result_code&amp;#34; / 2 * 999 from (select &amp;#34;average_response_ms&amp;#34;, &amp;#34;result_code&amp;#34; from ping where $timeFilter fill(0))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后的方法很粗糙：当 &amp;ldquo;result_code&amp;rdquo; 是 0 也就是成功的时候，得到延迟，而当 &amp;ldquo;result_code&amp;rdquo; 是 2 也就是超时的时候，直接得到 999。这样就解决了这个问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 6 期</title>
      <link>https://jia.je/misc/2019/01/11/weekly-sharing-6/</link>
      <pubDate>Fri, 11 Jan 2019 17:41:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/01/11/weekly-sharing-6/</guid>
      <description>&lt;p&gt;今天刚迁移了域名到 jiege.ch，原来的 jiegec.me 会自动跳转过来，链接什么的都不用变。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rust 的 cfg! 宏只是返回 bool 而不会影响内部是否被编译 如果需要 if constexpr 的效果需要用 &lt;a href=&#34;https://github.com/alexcrichton/cfg-if&#34;&gt;cfg-if&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基于 HTML5 canvas 的图表库 &lt;a href=&#34;https://github.com/chartjs/Chart.js&#34;&gt;Chart.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Endianness MATTERS! &amp;ndash; Harry Chen&lt;/li&gt;
&lt;li&gt;各数据库的带补全的 CLI &lt;a href=&#34;https://www.dbcli.com/&#34;&gt;https://www.dbcli.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;边开发边测试 k8s 部署 &lt;a href=&#34;https://github.com/windmilleng/tilt&#34;&gt;tilt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github unlimited free private repos 于是称为了 PRO 用户 &lt;a href=&#34;https://blog.github.com/2019-01-07-new-year-new-github/&#34;&gt;https://blog.github.com/2019-01-07-new-year-new-github/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github 美食博主还行 &lt;a href=&#34;https://github.com/hendricius/pizza-dough&#34;&gt;https://github.com/hendricius/pizza-dough&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个用于本地化的库 &lt;a href=&#34;https://github.com/dustin/go-humanize&#34;&gt;https://github.com/dustin/go-humanize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vim Verilog 补全 &lt;a href=&#34;https://github.com/vhda/verilog_systemverilog.vim&#34;&gt;https://github.com/vhda/verilog_systemverilog.vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;homebridge 网页前端 &lt;a href=&#34;https://github.com/oznu/homebridge-config-ui-x&#34;&gt;https://github.com/oznu/homebridge-config-ui-x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Zigbee 2 MQTT Bridge 需要额外的设备 &lt;a href=&#34;https://github.com/Koenkk/zigbee2mqtt&#34;&gt;https://github.com/Koenkk/zigbee2mqtt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;gdb 的网页 gui &lt;a href=&#34;https://github.com/cs01/gdbgui&#34;&gt;https://github.com/cs01/gdbgui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust 一键 par iter &lt;a href=&#34;https://github.com/rayon-rs/rayon&#34;&gt;https://github.com/rayon-rs/rayon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;挺好看的 hex viewer &lt;a href=&#34;https://github.com/sharkdp/hexyl&#34;&gt;https://github.com/sharkdp/hexyl&lt;/a&gt; 可以配合 bat 滚屏&lt;/li&gt;
&lt;li&gt;gitalk 基于 Github issues 的评论系统 类似 Disqus &lt;a href=&#34;https://github.com/gitalk/gitalk&#34;&gt;https://github.com/gitalk/gitalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;根据蓝牙连接键盘与否改变键盘布局 &lt;a href=&#34;https://github.com/jwilm/alacritty/wiki/Automatic-MacOS-Keyboard-layout-change-for-Bluetooth&#34;&gt;https://github.com/jwilm/alacritty/wiki/Automatic-MacOS-Keyboard-layout-change-for-Bluetooth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;8.8.8.8 加入 DoT 家庭 &lt;a href=&#34;https://security.googleblog.com/2019/01/google-public-dns-now-supports-dns-over.html&#34;&gt;https://security.googleblog.com/2019/01/google-public-dns-now-supports-dns-over.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;恢复损坏的 QRCode 工具箱 &lt;a href=&#34;https://merricx.github.io/qrazybox/&#34;&gt;https://merricx.github.io/qrazybox/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;通过同时修改两个芯片的 PLL 达成了非标准的 Wi-Fi 通信还行 &lt;a href=&#34;https://hackaday.com/2019/01/04/underclocking-the-esp8266-leads-to-wifi-weirdness/&#34;&gt;https://hackaday.com/2019/01/04/underclocking-the-esp8266-leads-to-wifi-weirdness/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;inline x86 asm in go &lt;a href=&#34;https://github.com/mmcloughlin/avo#readme&#34;&gt;https://github.com/mmcloughlin/avo#readme&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>域名已经迁移到 jiege.ch</title>
      <link>https://jia.je/meta/2019/01/11/blog-host-migration/</link>
      <pubDate>Fri, 11 Jan 2019 11:20:00 +0800</pubDate>
      
      <guid>https://jia.je/meta/2019/01/11/blog-host-migration/</guid>
      <description>&lt;p&gt;从买新域名到迁移大概用了一个多小时，现在已经恢复访问。原有的地址也会直接 301 到新的域名上来。&lt;/p&gt;
&lt;p&gt;仍然 Host 在 Github Pages 上。还会继续更新，不会跑路的（逃&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>调整 Alacritty 的 Powerline 字体显示偏移</title>
      <link>https://jia.je/software/2019/01/10/alacritty-powerline-font-offset/</link>
      <pubDate>Thu, 10 Jan 2019 20:19:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2019/01/10/alacritty-powerline-font-offset/</guid>
      <description>&lt;p&gt;今天体验了一下 Alacritty，以前一直在用 iTerm2，但是它的高级功能我都没用到。于是现在用了下 Alacritty，把 Solarized Dark 配置了，发现 Inconsolata for Powerline 字体显示有点偏差，于是调整了一下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Font configuration (changes require restart)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;font&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Normal (roman) font face&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;normal&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;family&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Inconsolata for Powerline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# The `style` can be specified to pick a specific face.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#style: Regular&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Bold font face&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;bold&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;family&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Inconsolata for Powerline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# The `style` can be specified to pick a specific face.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#style: Bold&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Italic font face&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;italic&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;family&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Inconsolata for Powerline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# The `style` can be specified to pick a specific face.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#style: Italic&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Point size&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;size&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;18.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Offset is the extra space around each character. `offset.y` can be thought of&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# as modifying the line spacing, and `offset.x` as modifying the letter spacing.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;offset&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;x&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;y&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Glyph offset determines the locations of the glyphs within their cells with&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# the default being at the bottom. Increasing `x` moves the glyph to the right,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# increasing `y` moves the glyph upwards.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;glyph_offset&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;x&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;y&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;主要是这里的 glyph_offset 设置为 3（2 也可以，我更喜欢 3） ，这样箭头就基本对齐了不会突出来。&lt;/p&gt;
&lt;p&gt;然后按照官方 Wiki，配置了 Solarized Dark 配色：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Colors (Solarized Dark)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;colors&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Default colors&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;primary&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;background&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x002b36&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# base03&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;foreground&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x839496&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# base0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Normal colors&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;normal&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;black&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x073642&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# base02&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;red&lt;/span&gt;:     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0xdc322f&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# red&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;green&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x859900&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# green&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;yellow&lt;/span&gt;:  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0xb58900&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# yellow&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;blue&lt;/span&gt;:    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x268bd2&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# blue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;magenta&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0xd33682&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# magenta&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;cyan&lt;/span&gt;:    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x2aa198&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# cyan&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;white&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0xeee8d5&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# base2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Bright colors&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;bright&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;black&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x002b36&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# base03&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;red&lt;/span&gt;:     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0xcb4b16&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# orange&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;green&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x586e75&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# base01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;yellow&lt;/span&gt;:  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x657b83&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# base00&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;blue&lt;/span&gt;:    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x839496&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# base0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;magenta&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x6c71c4&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# violet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;cyan&lt;/span&gt;:    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x93a1a1&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# base1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;white&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0xfdf6e3&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# base3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;真香&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Grafana Variable 的 regex 过滤方式</title>
      <link>https://jia.je/software/2019/01/10/grafana-variable-regex-exclusion/</link>
      <pubDate>Thu, 10 Jan 2019 12:47:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2019/01/10/grafana-variable-regex-exclusion/</guid>
      <description>&lt;p&gt;用 InfluxDB 收集到 Mountpoint 数据的时候，经常会掺杂一些不关心的，如 TimeMachine，KSInstallAction 和 AppTranslocation 等等。所以，为了在 Variables 里过滤掉他们，需要用 Regex 进行处理。&lt;a href=&#34;https://community.grafana.com/t/templating-regex-exclude-not-working/1077/4&#34;&gt;网上&lt;/a&gt;有人提供了方案，就是通过 Negative Lookahead 实现：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-regexp&#34; data-lang=&#34;regexp&#34;&gt;/^(?!.*TimeMachine)(?!.*KSInstallAction)(?!.*\/private)/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就可以把不想看到的这些 mountpoint 隐藏，节省页面空间了。当然了，这里其实也可以用白名单的方法进行处理，直接写 regex 就可以了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rust 获取 Linker Script 中的地址</title>
      <link>https://jia.je/programming/2019/01/07/rust-access-linker-script-address/</link>
      <pubDate>Mon, 07 Jan 2019 11:57:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2019/01/07/rust-access-linker-script-address/</guid>
      <description>&lt;p&gt;在 Linker Script 中可以记录下一个地址到一个变量中，大概这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	PROVIDE(__text_start = .);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *(.text .text.* .gnu.linkonce.t*)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PROVIDE(__text_end = .);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;PROVIDE()&lt;/code&gt; 是可选的。这样，代码里就可以获取到 .text 段的地址了。在 C 中，直接 extern 一个同名的变量就可以了，但在 Rust 中，需要这样获取：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__text_start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__text_end&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// __text_start as usize
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// __text_end as usize
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以拿到地址了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 5 期</title>
      <link>https://jia.je/misc/2019/01/04/weekly-sharing-5/</link>
      <pubDate>Fri, 04 Jan 2019 21:12:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2019/01/04/weekly-sharing-5/</guid>
      <description>&lt;p&gt;2019 年第一篇博文，祝大家新年快乐。最近忙于期末，没怎么搞事情，所以暂时没有关于别的内容的博文。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发现一个很好看的 http web server index 就是不再更新了 &lt;a href=&#34;https://larsjung.de/h5ai/&#34;&gt;h5ai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;录制 DOM 变化并且重放 &lt;a href=&#34;https://github.com/rrweb-io/rrweb&#34;&gt;rrweb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++ 中的 Lazy Sequence 实现 &lt;a href=&#34;https://github.com/SaadAttieh/lazyCode&#34;&gt;lazyCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来自 Berrysoft 的 Windows UWP 校园网认证解决方案 &lt;a href=&#34;https://github.com/Berrysoft/TsinghuaNetUWP&#34;&gt;TsinghuaNetUWP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中科大老运维的笔记 &lt;a href=&#34;https://github.com/bg6cq/ITTS&#34;&gt;ITTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go 源码研究电子书 目测还在编写，不过读来挺有收获的 &lt;a href=&#34;https://github.com/changkun/go-under-the-hood&#34;&gt;go-under-the-hood&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;第一次了解到 ELF Aux Vectors &lt;a href=&#34;http://articles.manugarg.com/aboutelfauxiliaryvectors.html&#34;&gt;auxv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发现了 C99 的参数列表里 static 数组大小语法 &lt;a href=&#34;https://hamberg.no/erlend/posts/2013-02-18-static-array-indices.html&#34;&gt;static array indicies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发现一个有趣的包装了 socket 的消息库 支持一些消息分发方法 &lt;a href=&#34;https://nanomsg.org/index.html&#34;&gt;nanomsg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;找到一个可视化 YUV 和视频解码的一些内部信息的工具 &lt;a href=&#34;https://github.com/IENT/YUView&#34;&gt;YUVView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;通过动态 QRCode 传输数据 &lt;a href=&#34;https://github.com/divan/txqr&#34;&gt;txqr&lt;/a&gt; &lt;a href=&#34;https://github.com/dangfan/qr-transfer&#34;&gt;qr-transfer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发现一些很好看的 CSS 动画 &lt;a href=&#34;https://redstapler.co/10-stunning-css-3d-effect-must-see/&#34;&gt;10-stunning-css-3d-effect-must-see&lt;/a&gt; 其中最神奇也最复杂的是 &lt;a href=&#34;https://codepen.io/zadvorsky/pen/PNXbGo&#34;&gt;这个&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Android runtime 中动态获取权限的库 &lt;a href=&#34;https://github.com/Karumi/Dexter&#34;&gt;Dexter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来自 Berrysoft 的 Stream operators in C++ &lt;a href=&#34;https://github.com/Berrysoft/CppLinq&#34;&gt;CppLinq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Squirrel (Rime for macOS) 在两年以后终于出了 0.10.0 新版本 有了好看的新皮肤&lt;/li&gt;
&lt;li&gt;神奇的 v8 漏洞利用 实在是太复杂了 &lt;a href=&#34;https://abiondo.me/2019/01/02/exploiting-math-expm1-v8/&#34;&gt;exploting math expm1 in v8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JWT How-to 发现 Koa 和 Flask 的 session 默认实现也是同样的原理 &lt;a href=&#34;https://github.com/dwyl/learn-json-web-tokens&#34;&gt;learn-json-web-tokens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;配置 DNS CAA 的在线工具 限制 CA 签证书的方案 &lt;a href=&#34;https://sslmate.com/caa/&#34;&gt;sslmate caa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;又一个 Python 的 Parser 库 配合有趣的 decorator 语法 &lt;a href=&#34;https://github.com/dabeaz/sly&#34;&gt;sly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;自动配置 webpack 的库 Jetpack &lt;a href=&#34;https://github.com/KidkArolis/jetpack&#34;&gt;jetpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;eBPF tutorial &lt;a href=&#34;http://www.brendangregg.com/blog/2019-01-01/learn-ebpf-tracing.html&#34;&gt;learn ebpf tracing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;图片 xkcd-ify 太有趣了 &lt;a href=&#34;https://mathematica.stackexchange.com/questions/11350/xkcd-style-plots&#34;&gt;xkcd-style plots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;又一个 Vue 的 rich text 控件 &lt;a href=&#34;https://github.com/scrumpy/tiptap&#34;&gt;tiptap&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 4 期</title>
      <link>https://jia.je/misc/2018/12/29/weekly-sharing-4/</link>
      <pubDate>Sat, 29 Dec 2018 10:23:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2018/12/29/weekly-sharing-4/</guid>
      <description>&lt;p&gt;咕了更长的时间。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Header only JIT assembler &lt;a href=&#34;https://github.com/herumi/xbyak&#34;&gt;https://github.com/herumi/xbyak&lt;/a&gt; 想找个时间玩玩 JIT&lt;/li&gt;
&lt;li&gt;Rust 实现的 Babel 转译 &lt;a href=&#34;https://github.com/swc-project/swc&#34;&gt;https://github.com/swc-project/swc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;又一个瀑布流实现 &lt;a href=&#34;https://github.com/e-oj/Magic-Grid&#34;&gt;https://github.com/e-oj/Magic-Grid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;马上可以体验 HTTP/3 的库 &lt;a href=&#34;https://github.com/djc/quinn&#34;&gt;https://github.com/djc/quinn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Logitech Spotlight Presentation 挺好用的 配套软件的安装过程和使用都挺好的&lt;/li&gt;
&lt;li&gt;Server side canvas &lt;a href=&#34;https://github.com/Automattic/node-canvas&#34;&gt;https://github.com/Automattic/node-canvas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;边看 youtube tutorial 边写代码 &lt;a href=&#34;https://yourepl.tumblr.com/post/180936303347/announcing-yourepl&#34;&gt;https://yourepl.tumblr.com/post/180936303347/announcing-yourepl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;又一个 PostgreSQL 网页版客户端 &lt;a href=&#34;https://github.com/sosedoff/pgweb&#34;&gt;https://github.com/sosedoff/pgweb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;有趣的 CSS Layout 学习方法 &lt;a href=&#34;http://cssgridgarden.com/#en&#34;&gt;http://cssgridgarden.com/#en&lt;/a&gt; &lt;a href=&#34;http://flexboxfroggy.com/&#34;&gt;http://flexboxfroggy.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pipenv 也有过 easter egg &lt;a href=&#34;https://github.com/pypa/pipenv/issues/786&#34;&gt;https://github.com/pypa/pipenv/issues/786&lt;/a&gt; 不过影比 antd 这个事情好多了&lt;/li&gt;
&lt;li&gt;Web 太强了 啥都能做 &lt;a href=&#34;https://whatwebcando.today/&#34;&gt;https://whatwebcando.today/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来自娄晨耀的清真 DNS 解决方案 &lt;a href=&#34;https://github.com/Chenyao2333/freedns-go&#34;&gt;https://github.com/Chenyao2333/freedns-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;快速的 tldr 实现 &lt;a href=&#34;https://github.com/dbrgn/tealdeer&#34;&gt;https://github.com/dbrgn/tealdeer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MongoDB Data Source for Grafana 可以用 就是 aggregation 不大容易写对 &lt;a href=&#34;https://github.com/JamesOsgood/mongodb-grafana&#34;&gt;https://github.com/JamesOsgood/mongodb-grafana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fish 3.0 发布“fish now supports &amp;amp;&amp;amp; (like and), || (like or), and ! (like not), for better migration from POSIX-compliant shells (#4620).”&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>《加速奔向 2019》小程序编写和运营回顾</title>
      <link>https://jia.je/software/2018/12/27/wxapp-recap/</link>
      <pubDate>Thu, 27 Dec 2018 19:56:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/12/27/wxapp-recap/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;关注清华的同学可能知道，昨天，“清华大学”公众号发了一篇名为&lt;a href=&#34;https://mp.weixin.qq.com/s/Kk7FuTefipW4HpQkoF72WA&#34;&gt;《2018，我们共芳华丨@THUers 致相伴一年的你，请查收这份心意》&lt;/a&gt;的推送，内容大概就是，有那么 100 个新年台历礼品要送出去，大家如果想要的话，就扫描小程序。小程序模仿了火车抢票的病毒式营销的模式，要求大家分享到群聊或者朋友圈，让别人给自己加速，加速到 2019 的前 100 名即可填写信息领取奖品。&lt;/p&gt;
&lt;p&gt;然后大家就在推送里看到了我。就酱。&lt;/p&gt;
&lt;h2 id=&#34;开始&#34;&gt;开始&lt;/h2&gt;
&lt;p&gt;这件事情据说策划了有一段时间了，只是因为各种原因一直没有做，最后这个锅就路由到了我的头上。一开始说就是个加速小程序，逻辑很简单，但后来逐渐发现需求越来越多，主要是界面上的，动画上的，还有一些非技术因素的功能，嗯。这其实算是一个不大好的软件工程案例。&lt;/p&gt;
&lt;h2 id=&#34;过程&#34;&gt;过程&lt;/h2&gt;
&lt;h3 id=&#34;线上的问题与解决方案&#34;&gt;线上的问题与解决方案&lt;/h3&gt;
&lt;p&gt;然后就是上线了。大概是昨天（2018-12-27）中午的时候推送发出去，很快流量就开始来了。很快，在朋友圈看到有同学在转发了，也有人反映说，网络有点卡，加载资源有点多。我去机器上用 iftop 看了下，流量大概是 250Mb/s，没打到千兆。我一开始看了下，CPU 和内存占用都良好，以为是网络出口限制的问题，就想着没办法了，就这样吧，扛过去再说。不过，忽然有了转机。&lt;/p&gt;
&lt;p&gt;TUNA 技术群里，忽然有人在讨论 SOMAXCONN 的问题，我想到，会不会是有些参数没开够大，导致了性能瓶颈，又受到啊荣的点拨，立马调整了这些变量：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;net.core.somaxconn
fs.file-max
net.core.netdev_max_backlog
net.ipv4.tcp_max_syn_backlog
nginx: worker_rlimit_nofile
nginx: event.worker_connections
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;很快带宽从 200Mb/s 左右打到了 400Mb/s 多，在 iftop 中看到的峰值接近 600Mb/s，见下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/2018-12-27-20-35-21.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;事后回来看，发现配置一套科学的监控系统真的很有用，如 TCP 连接的状态图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/2018-12-27-20-33-10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里最高的黄线代表的是 TIME_WAIT，意味着很多的 TCP 连接都卡在了等待资源上，而一当我修改参数以后，立刻就降了下来，ESTBALISHED 的连接有了显著的提升。这个问题从另一个图也可以明地看出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/2018-12-27-20-38-07.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个图是 TCP Handshake Issues，可以看到无论是 activeopen 还是 passiveopen，都很高，意味着这里无论是发还是收都遇到了问题。而修改参数以后，这些问题立马得到了很好的改善。&lt;/p&gt;
&lt;p&gt;其实这些本应该在上线前做好的，但我低估了清华大学的影响力，没有做好相应的准备，还是在优秀的运维人员的指点下得到了较好的效果。&lt;/p&gt;
&lt;h3 id=&#34;用户数据分析&#34;&gt;用户数据分析&lt;/h3&gt;
&lt;p&gt;当然了，除了 Grafana+InfluxDB+Telegraf 这一套监控系统，我们也部署了 ElasticSearch+Logstash+Kibana，只不过我们还是用 Grafana 做了 ElasticSearch 的前端了。通过对 Nginx 日志的分析，我们得到了这些关键的数据（从 12-26 12:00 到 12-27 12:00 一天时间）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/2018-12-27-20-48-48.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/2018-12-27-20-49-00.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;除了这些，还有很多有趣的数据，例如用户里北京的最多，也可以大致地看出各个地方网络和手机的普及程度；用户使用的手机的机型里前几名都是苹果的，从单项占领了排名的前很多位，之后则是华为小米 OPPO 等，但总体上反而是安卓用户更多。&lt;/p&gt;
&lt;p&gt;微信小程序官方也提供了一些数据统计可供参考。例如页面的访问次数信息，一共大约有二十多万次，打开小程序有十三万多次，访问人数是五万多，还有女性用户比男性用户多等等。这个时代，有数据确实能够得到许多有价值的判断。&lt;/p&gt;
&lt;h2 id=&#34;反思&#34;&gt;反思&lt;/h2&gt;
&lt;p&gt;这次学到了很多东西，验证了监控系统的必要性，它能够实时看到服务的运行状态并进行调优，事后也可以回过头来进行进一步的分析和总结。不足的是，遇到大客户量的时候，静态资源就应该用 CDN 服务而不应该自己搭建，成本不高而且用户体验会很好。这次后端在数据库操作都用了原子操作，没有出现大的问题，但如果以后遇到更复杂的需求的时候就没有这么容易了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 3 期</title>
      <link>https://jia.je/misc/2018/12/22/weekly-sharing-3/</link>
      <pubDate>Sat, 22 Dec 2018 00:19:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2018/12/22/weekly-sharing-3/</guid>
      <description>&lt;p&gt;因为 DDL，咕了一小会。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;被 Windows 保存为 Unicode 文件坑了 BOM 配上 UTF-16 太难受了&lt;/li&gt;
&lt;li&gt;Github 最近添加了很多 Issue 方面的更新，如 Pin 和 Delete&lt;/li&gt;
&lt;li&gt;Grafana 真的很好看很好用 推荐大家自己配一套监控系统&lt;/li&gt;
&lt;li&gt;Microsoft Remote Desktop Beta 新增了 AVC Codec 有意思 不知道啥时候上 HEVC&lt;/li&gt;
&lt;li&gt;发现一个很好玩的用 Rust 写的网页游戏 &lt;a href=&#34;https://sandspiel.club/#&#34;&gt;https://sandspiel.club/#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python Pattern Matching &lt;a href=&#34;https://github.com/santinic/pampy&#34;&gt;https://github.com/santinic/pampy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;大新闻：MIPS Open Source 了 &lt;a href=&#34;https://www.eetimes.com/document.asp?doc_id=1334087&#34;&gt;https://www.eetimes.com/document.asp?doc_id=1334087&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GRPC 调试的 GUI &lt;a href=&#34;https://github.com/uw-labs/bloomrpc&#34;&gt;https://github.com/uw-labs/bloomrpc&lt;/a&gt; 对标 Postman&lt;/li&gt;
&lt;li&gt;酷炫的屏幕保护 for Mac &lt;a href=&#34;https://github.com/JohnCoates/Aerial&#34;&gt;https://github.com/JohnCoates/Aerial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WPF 开源了 不知道啥时候支持 *nix &lt;a href=&#34;https://github.com/dotnet/wpf&#34;&gt;https://github.com/dotnet/wpf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;分享欢乐 &lt;a href=&#34;https://github.com/dotnet/wpf&#34;&gt;https://github.com/dotnet/wpf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;分享欢乐 x2 &lt;a href=&#34;https://lore.kernel.org/patchwork/patch/628142/&#34;&gt;https://lore.kernel.org/patchwork/patch/628142/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;谷歌近日到处上线了 Material Design 2.0 感觉风格不大习惯&lt;/li&gt;
&lt;li&gt;veonim/veonim 的 Tag 里有 #meme-driven-development 太好笑了&lt;/li&gt;
&lt;li&gt;巨硬开源了自己的 UEFI 和 TianoCore EDK 竞争 &lt;a href=&#34;https://blogs.windows.com/buildingapps/2018/12/19/%e2%80%afintroducing-project-mu/&#34;&gt;https://blogs.windows.com/buildingapps/2018/12/19/%e2%80%afintroducing-project-mu/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github 的 GDPR 完全体上线 &lt;a href=&#34;https://blog.github.com/2018-12-19-download-your-data/&#34;&gt;https://blog.github.com/2018-12-19-download-your-data/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ZFSonLinux 要统治 ZFS 世界的节奏 &lt;a href=&#34;https://lists.freebsd.org/pipermail/freebsd-current/2018-December/072422.html&#34;&gt;https://lists.freebsd.org/pipermail/freebsd-current/2018-December/072422.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VBScript 真的是太多漏洞了 满目疮痍 &lt;a href=&#34;https://googleprojectzero.blogspot.com/2018/12/on-vbscript.html&#34;&gt;https://googleprojectzero.blogspot.com/2018/12/on-vbscript.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原来取名真的这么草率的吗 我也想买一个了 &lt;a href=&#34;https://www.solidot.org/story?sid=59028&#34;&gt;https://www.solidot.org/story?sid=59028&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 2 期</title>
      <link>https://jia.je/misc/2018/12/14/weekly-sharing-2/</link>
      <pubDate>Fri, 14 Dec 2018 15:55:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2018/12/14/weekly-sharing-2/</guid>
      <description>&lt;p&gt;继续，继续。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用代码呈现硬件实现对性能的影响，值得一读 &lt;a href=&#34;https://github.com/Kobzol/hardware-effects&#34;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发现了一个蛮少见的编码标准 AVS2，才发现是中国主导的 &lt;a href=&#34;https://github.com/pkuvcl/xavs2&#34;&gt;编码器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;linux.org 的 DNS 被篡改了，认准 kernel.org 即可&lt;/li&gt;
&lt;li&gt;一个处理器的电路的在线可视化 &lt;a href=&#34;https://www.theregister.co.uk/2015/11/28/arm1_visualized/&#34;&gt;ARM1 visualized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WASM 家庭现已加入 Nginx &lt;a href=&#34;https://www.wasmjit.org/blog/nginx-on-wasmjit.html&#34;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用 .bat 编写汇编语言 &lt;a href=&#34;https://github.com/mniip/BOOTSTRA/tree/master/BATAS#batas&#34;&gt;mnnip/BOOTSTRA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gitlab 挺香的，兹瓷 git-lfs，还可以自己给自己的项目配一个 ci runner&lt;/li&gt;
&lt;li&gt;LaTeX 的 subfigure 之间如果有空行，就真的换了一行，所以同一行的 subfigure 不要换行&lt;/li&gt;
&lt;li&gt;Rocket 4.0 出了，看起来不错，要是作者更新一下 CS140e 就好了 &lt;a href=&#34;https://github.com/SergioBenitez/Rocket/blob/v0.4.0/CHANGELOG.md#version-040-dec-06-2018&#34;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;装机必备，查询 Arch Wiki &lt;a href=&#34;https://www.npmjs.com/package/arch-wiki-man&#34;&gt;arch-wiki-man&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LaTeX 里 \newcommand 时，如果文件名有多个 &amp;lsquo;.&amp;rsquo; ，要特殊处理 &lt;a href=&#34;https://tex.stackexchange.com/questions/10574/includegraphics-dots-in-filename&#34;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RunAsDate for *nix &lt;a href=&#34;https://github.com/wolfcw/libfaketime&#34;&gt;wolfcw/libfaketime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用数据库做数据分析似乎是个不错的选择&lt;/li&gt;
&lt;li&gt;Canvas 配合 globalCompositionOperation 能做到不少东西&lt;/li&gt;
&lt;li&gt;才知道有 Time Machine over SMB 这种操作 &lt;a href=&#34;https://support.apple.com/zh-cn/guide/mac-help/mchl31533145/mac&#34;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;mDNS repeater 把两个子网的 mDNS 打通 &lt;a href=&#34;https://github.com/kennylevinsen/mdns-repeater&#34;&gt;kennylevinsen/mdns-repeater&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Office 2019 for Mac 的 December 2018 release 添加了 Dark Mode，并且也支持了 Continuity Camera，直接从手机拍照导入&lt;/li&gt;
&lt;li&gt;Gitlab serverless 发布，期待 &lt;a href=&#34;https://about.gitlab.com/2018/12/11/introducing-gitlab-serverless/&#34;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用 NAS 作为 Time Machine 备份盘的方法 &lt;a href=&#34;https://kirb.me/2018/03/24/using-samba-as-a-time-machine-network-server.html&#34;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;研究了一下，Time Machine over SMB 在 macOS 里的表现形式是 apfs 里写了一个 sparse bundle，bundle 里面是 HFS+ 。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>配置 homebridge-mi-aqara 并添加为 telegraf 的数据源</title>
      <link>https://jia.je/software/2018/12/13/homebridge-mi-aqara-telegraf/</link>
      <pubDate>Thu, 13 Dec 2018 20:07:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/12/13/homebridge-mi-aqara-telegraf/</guid>
      <description>&lt;p&gt;最近有了设备，想把设备拿到的数据都导一份存到 influxdb 里，但是目前找到的只有 &lt;a href=&#34;https://github.com/YinHangCode/homebridge-mi-aqara&#34;&gt;homebridge-mi-aqara&lt;/a&gt; 可以访问并拿到数据，然后它又提供了 mqtt 的数据获取方案，于是自己写了个脚本去读取这些数据。&lt;/p&gt;
&lt;p&gt;首先当然是配置一下 homebridge-mi-aqara，按照网上的教程来，这个不难。然后本地开一个 MQTT Broker（如 mosquitto），配置为本地监听，然后我编写了&lt;a href=&#34;https://github.com/jiegec/tools/blob/master/telegraf-mi-aqara.py&#34;&gt;脚本 telegraf-mi-aqara.py&lt;/a&gt; ，使用前需要 &lt;code&gt;pip install paho-mqtt&lt;/code&gt;，并且按照实际路径修改一下内容。验证能够跑起来后，写一个 telegraf 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[[&lt;span style=&#34;color:#a6e22e&#34;&gt;inputs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt;]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;commands&lt;/span&gt; = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/bin/python3 /path/to/telegraf-mi-aqara.py&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;timeout&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5s&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;data_format&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;influx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在就可以读取到各项信息，如温度，湿度，是否开门，开关用电情况等等。&lt;/p&gt;
&lt;p&gt;2018-12-16 更新：&lt;/p&gt;
&lt;p&gt;研究了一下&lt;a href=&#34;https://github.com/aqara/aiot-gateway-local-api&#34;&gt;绿米网关局域网通信协议&lt;/a&gt;，得到了&lt;a href=&#34;https://github.com/jiegec/tools/blob/master/telegraf-mi-aqara-v2.py&#34;&gt;第二个版本 telegraf-mi-aqara-v2.py&lt;/a&gt;，它与第一版的区别是，第一版是主动向网关读取信息，而这一版则是监听组播包，等待网关发消息。这个脚本负责把读取到的组播信息发送到 MQTT，再让 telegraf 从 MQTT 里解析 JSON 消息，写入数据库。Telegraf 配置如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[[&lt;span style=&#34;color:#a6e22e&#34;&gt;inputs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mqtt_consumer&lt;/span&gt;]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;servers&lt;/span&gt; = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp://127.0.0.1:1883&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;qos&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;connection_timeout&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;30s&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;topics&lt;/span&gt; = [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/telegraf-mi-aqara&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;persistent_session&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;client_id&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Telegraf&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;data_format&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;json_string_fields&lt;/span&gt; = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sid&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;tag_keys&lt;/span&gt; = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sid&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;short_id&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于设备不全，有些字段可能不完整。如果大家自己要用的话，可能需要自行修改一下。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Grafana 可视化实践：清华大学 2018 年度人物评选</title>
      <link>https://jia.je/software/2018/12/07/grafana-visualize-vote18/</link>
      <pubDate>Fri, 07 Dec 2018 23:03:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/12/07/grafana-visualize-vote18/</guid>
      <description>&lt;p&gt;最近这段时间，清华内部正在投票选出今年的年度人物，想到最近刚好在学习使用 Grafana+InfluxDB+Telegraf 全家桶，于是想着能不能写个爬虫把数据都拿下来，然后用 Grafana 画出来，就可以得到一个投票随时间变化的趋势。爬虫很简单，就是登录，获取页面信息，然后按照 InfluxDB 的输入格式进行输出即可。代码放在了 &lt;a href=&#34;https://github.com/jiegec/student-tsinghua-vote18&#34;&gt;jiegec/student-tsinghua-vote18&lt;/a&gt; 下。&lt;/p&gt;
&lt;p&gt;接着就是用 Grafana 进行可视化，大概得到了这样一个曲线：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/vote18.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;为保护隐私，把名字隐去了。实际上的投票时间是从 12-3 号开始到 12-7 号结束，但由于宿舍停电的原因所以采样的点在半夜的时候都没有，所以看起来有点奇怪，但还是能够反应总体的趋势的。比如可以看到前两名很早就一马当先，而后一直遥遥领先，下面的选手则排名变动很大，特别是截止前最后一段时间，大家都在拼命拉票，可见大家都是 DDL 选手啊。如果对上面这个图求个导，看看变化率的话：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/vote18-speed.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这显现出了很有意思的一个趋势，就是每天十二点左右都有一个高峰期，然后在零点前大概熄灯附近的时间也是一个高峰期，另外就是截止前最后的抢票阶段，大家都在疯狂拉票，从中午拉到最后时刻。由于停电的原因，在零点附近的数据都比较的鬼畜，不过影响不大，趋势一目了然。&lt;/p&gt;
&lt;p&gt;Grafana 真香！期望可以学到更多高端的查询语法和可视化的骚操作，现在有很多东西不知道该怎么可视化，比较苦恼，不知道大家有没有什么经验可以分享。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>每周分享第 1 期</title>
      <link>https://jia.je/misc/2018/12/07/weekly-sharing/</link>
      <pubDate>Fri, 07 Dec 2018 15:57:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2018/12/07/weekly-sharing/</guid>
      <description>&lt;p&gt;向阮一峰学习，把自己在一周里看到的有趣的事情分享一下。不过形式就比较随意了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最近写 MongoDB + NodeJS 学到的新操作：$addToSet $nin $ne Mongoose 的 setDefaultsOnInsert&lt;/li&gt;
&lt;li&gt;Promise 真香，真好用&lt;/li&gt;
&lt;li&gt;几天前惠老师还在说 &amp;ldquo;IE, The best Chrome Downloader Downloader, ever&amp;rdquo; 今天 EdgeHTML 就宣告死亡了&lt;/li&gt;
&lt;li&gt;WPF, Windows Forms 和 WinUI 开源了，mono 这是要凉？ &lt;a href=&#34;https://blogs.windows.com/buildingapps/2018/12/04/announcing-open-source-of-wpf-windows-forms-and-winui-at-microsoft-connect-2018/&#34;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;有人逆向了 FPGA 的 bitstream 格式，希望 FPGA 有朝一日可以进入 开源时代？ &lt;a href=&#34;https://github.com/mmicko/prjtang&#34;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;造机的 baseline 就决定是 &lt;a href=&#34;https://github.com/Icenowy/ice-risc&#34;&gt;它&lt;/a&gt; 了&lt;/li&gt;
&lt;li&gt;根据 AST 炼丹判相似度还行，好奇它跨语言的预测水准 &lt;a href=&#34;https://code2vec.org/&#34;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;可视化 h264 nalu 的软件 &lt;a href=&#34;https://github.com/shi-yan/H264Naked&#34;&gt;H264Naked&lt;/a&gt; （做的好糙啊，想交 pr）&lt;/li&gt;
&lt;li&gt;ffprobe -show_packets 和 ffprobe -show_frame 真好用&lt;/li&gt;
&lt;li&gt;发现一个解决 ArchLinux 滚内核后无法 modprobe 的&lt;a href=&#34;https://github.com/saber-nyan/kernel-modules-hook&#34;&gt;方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;010 Editor 和 Hex Fiend 是二进制分析的神器啊&amp;hellip; Kaitai 还有待加油&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/roman01la/cljss&#34;&gt;CSS-in-JS for ClojureScript&lt;/a&gt; 真香 有空可以试试用 ClojureScript 写前端&lt;/li&gt;
&lt;li&gt;Safari Technology Preview 71 加入了 Web Authentication 这是要支持 U2F 的节奏？&lt;/li&gt;
&lt;li&gt;Grafana+InfluxDB+Telegraf 真科学，随手写了一些简单的 Telegraf 的 input plugin&lt;/li&gt;
&lt;li&gt;给 010 Editor 写了俩 .bt 文件，见我上一篇博客&lt;/li&gt;
&lt;li&gt;海思 cc 居然支持 ASan : /opt/hisi-linux/x86-arm/arm-hisiv600-linux/arm-hisiv600-linux-gnueabi/lib/a7/libasan.so&lt;/li&gt;
&lt;li&gt;遇到了 &lt;a href=&#34;https://github.com/influxdata/telegraf/issues/4881&#34;&gt;设备名有空格导致 telegraf 读取 S.M.A.R.T. 信息失败&lt;/a&gt; 的锅，不过似乎没人修&lt;/li&gt;
&lt;li&gt;看到了一个很有意思的 Interview Pass Rate 关于使用的编辑器的调查，很有意思 &lt;a href=&#34;https://triplebyte.com/blog/editor-report-the-rise-of-visual-studio-code&#34;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发现一个 JSX 的替代品，用了 Template literal syntax，挺好的 &lt;a href=&#34;https://github.com/developit/htm&#34;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;也不知道能不能坚持下来，就这样了，发布（逃&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>编写 010 Editor 的 FLV Template</title>
      <link>https://jia.je/software/2018/12/06/010-editor-flv-parsing/</link>
      <pubDate>Thu, 06 Dec 2018 20:33:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/12/06/010-editor-flv-parsing/</guid>
      <description>&lt;p&gt;最近在做 FLV 和 H264 方面的研究，研究了很多标准和文档，然后用 010 Editor 对着文件进行分析。这个软件真的很好用，对研究二进制结构用处特别大。不过它自带的 FLV.bt 功能不是很好，我对它加上了 H264(AVC) 的部分支持，放在了 &lt;a href=&#34;https://github.com/jiegec/tools/blob/master/myFLV.bt&#34;&gt;myFLV.bt&lt;/a&gt; 里。我也写了 H264 的解析，不过效率不高，大文件要卡好一会。&lt;/p&gt;
&lt;p&gt;除此之外，很多格式，010 editor 都有支持，特别好用，它的解析器语法也很好写。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>配置 Grafana&#43;InfluxDB&#43;Telegraf 并添加 MIIO 数据来源</title>
      <link>https://jia.je/software/2018/11/27/grafana-influxdb-telegraf-miio/</link>
      <pubDate>Tue, 27 Nov 2018 20:33:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/11/27/grafana-influxdb-telegraf-miio/</guid>
      <description>&lt;p&gt;之前一直想配一个监控系统，现在有机会了，就简单配了一下。发现真的特别简单，用 Homebrew 安装这三个软件并且都跑起来，然后稍微动一下配置，就可以得到可观的效果了。&lt;/p&gt;
&lt;p&gt;然后想利用 miio 配置一下，把宿舍的空气净化器各项参数拿到，以 Telegraf 的插件形式定时上报，然后通过 Grafana 进行可视化。插件放在了 &lt;a href=&#34;https://github.com/jiegec/tools/blob/master/telegraf/miio.py&#34;&gt;jiegec/tools&lt;/a&gt; 下，就是一个简单的 Python 脚本。配置方法如下：&lt;/p&gt;
&lt;p&gt;编辑 &lt;code&gt;/usr/local/etc/telegraf.d/miio.conf&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[[inputs.exec]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;commands&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;[&amp;#34;/usr/local/bin/python3 /Volumes/Data/tools/telegraf/miio.py MIID_HERE&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	timeout = &amp;#34;5s&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	data_format = &amp;#34;influx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认了 miio 路径为 &lt;code&gt;/usr/local/bin/miio&lt;/code&gt; 。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>强制启用 Google Chrome 原生的 Dark Mode</title>
      <link>https://jia.je/software/2018/11/27/enable-dark-mode-google-chrome/</link>
      <pubDate>Tue, 27 Nov 2018 00:17:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/11/27/enable-dark-mode-google-chrome/</guid>
      <description>&lt;p&gt;Mojave 的 Dark Mode 真香，但是 Google Chrome 并不会随着系统的 Dark Mode 设置变化，所以 NightOwl 只能让部分软件按照时间变更 Dark/Light Mode。一番搜索，发现其实 Google Chrome 其实已经&lt;a href=&#34;https://chromium-review.googlesource.com/c/chromium/src/+/1238796&#34;&gt;支持了 Dark Mode&lt;/a&gt;，但只能设置，不能按照系统的状态自动切换，命令如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ open -a Google\ Chrome --args --force-dark-mode
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后就可以看到 Google Chrome 已经是 Dark Mode 了。但可惜并不能自动切换。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mac 上安装 Arch Linux，ZFS 真香</title>
      <link>https://jia.je/software/2018/11/26/zfs-on-macos-and-linux/</link>
      <pubDate>Mon, 26 Nov 2018 20:51:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/11/26/zfs-on-macos-and-linux/</guid>
      <description>&lt;p&gt;最近在 Mac 上装了 Arch Linux，按照 &lt;a href=&#34;https://wiki.archlinux.org/index.php/Mac&#34;&gt;Mac - Arch Linux Wiki&lt;/a&gt; 一路一路走，创建单独的一个 EFI 分区给 Arch Linux 放 GRUB 和内核，一个 ext4 作为根分区。由于 Arch ISO 不支持 Broadcom 的无线网卡，于是先拿 Apple Ethernet Adapter 连到路由器上装机。然后把一些需要的驱动装上了，桌面用的 KDE Plasma，Trackpad 用的 xf86-input-mtrack-git，HiDPI 设置为 2x Scale，各种体验都还可以，就是 Wi-Fi 的 802.1X 没配置好，然后 kwalletd5 老是崩没找到原因。常见的应用除了微信基本都有，也终于可以体验 Steam Play，利用 Proton 在 Linux 上跑一些只支持 Windows 的游戏，不过我已经很少玩游戏了。&lt;/p&gt;
&lt;p&gt;然后我就想，怎么做 macOS 和 Linux 之间的文件共享。典型的操作可能是 exFAT，但是作为数据盘的话，这还是不大适合。或者就直接用 ext4，配合 extFS For Mac by Paragon 使用，也可以，最后我选择了 ZFS。&lt;/p&gt;
&lt;p&gt;在 macOS 上安装 &lt;a href=&#34;https://openzfsonosx.org/&#34;&gt;OpenZFS on OSX&lt;/a&gt; ，在 Linux 上安装 &lt;a href=&#34;https://zfsonlinux.org/&#34;&gt;ZFS on Linux&lt;/a&gt; 。具体命令就是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew cask install openzfs &lt;span style=&#34;color:#75715e&#34;&gt;# macOS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ yay zfs-dkms-git &lt;span style=&#34;color:#75715e&#34;&gt;# Arch Linux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于硬盘空间所限，我只用了一个分区作为 vdev，没有采用 mirror、raidz 等方案。我首先在 macOS 上创建了一个 zpool，参考 &lt;a href=&#34;https://openzfsonosx.org/wiki/Zpool#Creating_a_pool&#34;&gt;Creating a pool - OpenZFS on OSX&lt;/a&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo zpool create -f -o ashift&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; Data diskxsy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时应该能够看到 /Volumes/Data 上已经挂载了一个 ZFS Dataset。我采用 &lt;a href=&#34;https://github.com/cbreak-black/ZetaWatch&#34;&gt;cbreak-black/ZetaWatch&lt;/a&gt; 在菜单栏里查看 ZFS 信息。此时回到 Arch Linux 上，通过 &lt;code&gt;zfs import&lt;/code&gt; 可以找到并且挂载这个 ZFS Dataset 到 &lt;code&gt;/Data&lt;/code&gt; 处。&lt;/p&gt;
&lt;p&gt;我还尝试创建了一个加密的 ZFS Dataset，对加密的部分的粒度控制可以很细。另外，我参考 &lt;a href=&#34;https://openzfsonosx.org/wiki/Time_Machine_Backups&#34;&gt;Time Machine Backups - OpenZFS on OSX&lt;/a&gt; 也在移动硬盘上划出一个新的分区作为 ZFS，在上面创建了一个加密的 Sparse Bundle，把它作为 Time Machine 的目标。之后还会尝试一下 &lt;code&gt;zfs send&lt;/code&gt; 作为替代的备份方案。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>USB/IP 实践</title>
      <link>https://jia.je/software/2018/11/20/usb-ip/</link>
      <pubDate>Tue, 20 Nov 2018 18:50:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/11/20/usb-ip/</guid>
      <description>&lt;p&gt;之前一直想玩 USB/IP，但是一直没有找俩 Linux 设备然后共享，今天终于尝试了一下，没有什么大问题。这次采用的设备是 Raspberri Pi 3 和 SaltedFish Pi。一开始尝试从后者向前者共享，但总是出现这个错误：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;libusbip: error: udev_device_get_sysattr_value failed
usbip: error: open vhci_driver
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我反过来做就好了，比较神奇。&lt;/p&gt;
&lt;p&gt;主要过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pacman -S usbip&lt;/code&gt; 安装用户态软件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;systemctl enable --now usbipd&lt;/code&gt; 启动 USB/IP 的端口监听 daemon&lt;/li&gt;
&lt;li&gt;&lt;code&gt;usbip list -l&lt;/code&gt; 查看本地有哪些 USB 设备可以共享&lt;/li&gt;
&lt;li&gt;&lt;code&gt;usbip bind -b [BUS_ID]&lt;/code&gt; 把指定的 USB 设备共享出去，其中 BUS_ID 从上个命令中查看&lt;/li&gt;
&lt;li&gt;&lt;code&gt;usbip list -r [IP]&lt;/code&gt; 在另一个设备上查看这个设备共享的 USB 设备，可以看到许多信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;usbip attach -r [IP] -b [BUS_ID]&lt;/code&gt; 把对方共享的 USB 设备 attach 到本地&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;效果：把一个 U 盘成功映射到了本地：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ lsusb -t
/:  Bus 04.Port 1: Dev 1, Class=root_hub, Driver=vhci_hcd/8p, 480M
    |__ Port 1: Dev 2, If 0, Class=Mass Storage, Driver=usb-storage, 480M
$ lsblk
NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda           8:0    1 14.9G  0 disk
`-sda1        8:1    1 14.9G  0 part /tmp/mnt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;尝试 mount 什么的，也都没有问题。以后可以考虑把本地的 LicheeTang 通过这种方式穿透到远端，然后在远端用它的 IDE 进行编程。&lt;/p&gt;
&lt;p&gt;UPDATE: LicheeTang 烧写有一些问题，直接 JTAG 写上去没有作用，但是 SPI Flash 是可以成功写入并且有作用的，虽然需要强制打断。感觉还是网络延迟导致了一些问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>超过 100 篇博文了！</title>
      <link>https://jia.je/meta/2018/11/17/more-than-100-posts/</link>
      <pubDate>Sat, 17 Nov 2018 07:35:00 +0800</pubDate>
      
      <guid>https://jia.je/meta/2018/11/17/more-than-100-posts/</guid>
      <description>&lt;p&gt;今天看了下，发现算上这一篇，这个博客已经有 103 篇文章了，这个数量还是蛮多的，特此庆祝一下。我也顺带做了一下简单的数据处理，得到这么一张图：&lt;/p&gt;
&lt;p&gt;![graph](/images/2018-11-17 07.52.06.jpg)&lt;/p&gt;
&lt;p&gt;目测数量与干活的频率相关性很高啊。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>向咸鱼派写入 ArchlinuxARM</title>
      <link>https://jia.je/hardware/2018/11/06/archlinuxarm-on-sfpi/</link>
      <pubDate>Tue, 06 Nov 2018 19:18:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2018/11/06/archlinuxarm-on-sfpi/</guid>
      <description>&lt;p&gt;之前由于我的 macOS 上不知道为啥不能把我的 TF 卡设备放到我的虚拟机里，所以之前就没能刷 ArchLinuxARM 上去。今天我想到了一个方法，完成了这件时期：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ wget https://mirrors.tuna.tsinghua.edu.cn/archlinuxarm/os/ArchLinuxARM-armv7-latest.tar.gz
$ dd if=/dev/zero of=archlinuxarm.img bs=1M count=1024
$ mkfs.ext4 archlinuxarm.img
$ sudo mkdir -p /mnt/archlinuxarm
$ sudo mount -o loop archlinuxarm.img /mnt/archlinuxarm
$ sudo bsdtar -xpf ArchLinuxARM-armv7-latest.tar.gz -C /mnt/archlinuxarm
$ sudo umount /mnt/archlinuxarm
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就获得了一个 ext4 的 ArchlinuxARM 镜像。刚好解压出来不到 1G，所以开了 1G 的镜像刚好放得下。然后把 archlinuxarm.img 拷回 macOS，然后用 dd 写进去：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo dd if=archlinuxarm.img of=/dev/rdisk4s2 bs=1048576
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时候可以确认，我们确实是得到了一个正确的 ext4fs：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo /usr/local/opt/e2fsprogs/sbin/tune2fs -l /dev/disk4s2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不过，我们实际的分区大小可能不止 1G，所以可以修改一下大小：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo /usr/local/opt/e2fsprogs/sbin/resize2fs -p /dev/disk4s2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就成功地把 ArchlinuxARM 写进去了。默认的用户名和密码都是 root，可以成功通过串口登录。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>咸鱼派的启动配置</title>
      <link>https://jia.je/hardware/2018/11/05/salted-fish-pi/</link>
      <pubDate>Mon, 05 Nov 2018 22:17:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2018/11/05/salted-fish-pi/</guid>
      <description>&lt;p&gt;最近刚拿到了一个&lt;a href=&#34;https://github.com/sbc-fish/sfpi&#34;&gt;咸鱼派&lt;/a&gt;的测试板子，准备自己把 U-Boot 和 Linux 内核这一套东西跑通，都用主线的东西，尽量减少魔改的部分。首先是编译 u-boot，我用的是现在的 master 分支的最新版 99431c1c：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ # Archlinux
$ sudo pacman -Sy arm-none-eabi-gcc
$ make LicheePi_Zero_defconfig
$ make ARCH=arm CROSS_COMPILE=arm-none-eabi- -j24
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时候会得到一个 u-boot-sunxi-with-spl.bin 的文件。我们只要把它写到 SD 卡的 8192 偏移处，就可以把 U-Boot 跑起来了：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ diskutil unmountDisk /dev/disk4
$ sudo dd if=u-boot-sunxi-with-spl.bin of=/dev/disk4 bs=1024 seek=8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接着我们做一下分区。我采用的是 MBR 分区，这样保证不会和 U-Boot 冲突。使用 fdisk 进行分区，我从 1M 处开始分了一个 10M 的 FAT-32 分区作为启动分区，然后之后都是 EXT4 的系统盘分区。接着就是编译内核。&lt;/p&gt;
&lt;p&gt;我用的是八月份时候的 4.18.2 内核，虽然不是很新但也足够新了。一番调整内核参数后，得到了一个可用的内核，然后把 zImage 和 sun8i-v3s-licheepi-zero.dtb 都复制到刚才创建的 FAT-32 启动分区，然后进入 U-Boot 进行启动：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ setenv bootcmd &amp;#39;fatload mmc 0 0x41000000 zImage; fatload mmc 0 0x41800000 sun8i-v3s-licheepi-zero.dtb; setenv bootargs console=ttyS0,115200 root=/dev/mmcblk0p2 rw rootwait; bootz 0x41000000 - 0x41800000&amp;#39;
$ saveenv # optional
$ boot
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里一开始遇到了很多坑，比如一直看不到 console，这个是找了 &lt;a href=&#34;https://github.com/gaoyichuan&#34;&gt;@gaoyichuan&lt;/a&gt; 拿到的一份 Kernel Config 进行修改修好的。另一个是进去以后找不到 root，我先是搞了一个有 busybox 的 initrd，进去看发现是能找到 mmc 的，但是有延迟，那么添加上 rootwait 就好了。进去以后就差 rootfs。由于我缺少一个写 ext4 的工具，又发现手上有一个 Raspbian 的镜像，它里面也正好是两个分区，而且架构也同样是 armv7l，我就直接把它烧到 SD 卡中，把 U-Boot 写进去，然后往 boot 分区里写内核和 dtb，然后就成功进去，并且跑起来了。最喜感的就是，进去以后是个 pi@raspberrypi，实际上确是另一个东西。不过，只有当我 &lt;code&gt;apt update&lt;/code&gt; 发现用了半小时的时候，我才想起来这其实是是一个嵌入式系统。。&lt;/p&gt;
&lt;p&gt;进去以后发现，没有识别到网卡驱动。网上找了 LicheePi Zero 的一个解决方案，但是并不能用，还出现了神奇的 Kernel Oops，怀疑是内核版本太新的问题。我又找到 &lt;a href=&#34;https://github.com/icenowy&#34;&gt;@icenowy&lt;/a&gt; 的一个 &lt;a href=&#34;https://lore.kernel.org/patchwork/patch/884656/&#34;&gt;Patch&lt;/a&gt; ，它终于是解决了这个问题，成功地找到了网卡，并且愉快地 &lt;code&gt;ssh pi@raspberrypi.local&lt;/code&gt; 。之后会在咸鱼派那边公布一下我们做的修改。&lt;/p&gt;
&lt;p&gt;现在的想法是，把 HomeBridge 搭建到它上面，不过目前来看硬件资源有点紧张，放着会有点慢。可能还是用树莓派做这个事情比较合适。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 HomeBridge 把小米空气净化器加入到 HomeKit 中</title>
      <link>https://jia.je/software/2018/11/04/mi-air-purifier-homekit/</link>
      <pubDate>Sun, 04 Nov 2018 10:47:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/11/04/mi-air-purifier-homekit/</guid>
      <description>&lt;p&gt;受 @NSBlink 安利，自己部署了一下 &lt;a href=&#34;https://github.com/nfarina/homebridge&#34;&gt;HomeBridge&lt;/a&gt; ，然后在 iOS 的家庭上就可以看到它。然后，通过 &lt;a href=&#34;https://www.npmjs.com/package/homebridge-mi-airpurifier&#34;&gt;homebrdige-mi-airpurifier&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/aholstenson/miio&#34;&gt;miio&lt;/a&gt; 按照教程进行配置。然后就可以在家庭里看到小米空气净化器，包括空气质量，湿度，睡眠模式，温度，打开状态。然后我就可以做一些配置，如离开宿舍的时候自动关闭空气净化器，回来的时候自动打开。不过由于自己没有一个一直放在宿舍的 iPad、Apple TV 或者 HomePod，失去了中枢，这个功能可能会打折扣。&lt;/p&gt;
&lt;p&gt;后续想买一些智能的灯啊，然后就可以用 Siri 进行打开 / 关闭了。&lt;/p&gt;
&lt;p&gt;此外，我又试了下，可以用 &lt;a href=&#34;https://github.com/KhaosT/homebridge-camera-ffmpeg&#34;&gt;homebridge-camera-ffmpeg&lt;/a&gt; 把摄像头配置到 HomeKit 中。这样，就可以远程查看视频流了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>部署 adminMongo 的 Docker 镜像</title>
      <link>https://jia.je/software/2018/10/23/admin-mongo-docker/</link>
      <pubDate>Tue, 23 Oct 2018 20:08:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/10/23/admin-mongo-docker/</guid>
      <description>&lt;p&gt;之前在软工的平台上部署了一个 MongoDB，但是自然是仅内网访问，想要浏览内容只能通过网页上的 Console 进去看，体验特别不好。所以想着能不能找一个在线的 MongoDB 浏览器。由于软工平台只能部署 Docker 镜像，所以我找到了&lt;a href=&#34;https://hub.docker.com/_/mongo-express/&#34;&gt;mongo-express&lt;/a&gt;和&lt;a href=&#34;https://hub.docker.com/r/adicom/admin-mongo/&#34;&gt;adicom/admin-mongo&lt;/a&gt;。但软工平台现在还没实现环境变量的配置，所以我选了后者。&lt;/p&gt;
&lt;p&gt;首先本地创建一个 app.json，让它监听 0.0.0.0:80，通过 deployer 传到平台上的配置，然后再把配置 mount 到 /app/config 路径上。现在就可以成功地在网页上浏览 MongoDB 了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenWRT 上配置 Gandi DDNS</title>
      <link>https://jia.je/networking/2018/10/22/ddns-openwrt-router/</link>
      <pubDate>Mon, 22 Oct 2018 09:53:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/10/22/ddns-openwrt-router/</guid>
      <description>&lt;p&gt;一直想给自己的 OpenWRT 路由器添加 DDNS 功能，但 Gandi 不在官方的 ddns-scripts 列表中，自己在网上找了一些脚本，发现是 Python 写的，尝试把 Python 安装到路由器上又发现空间不够，虽然可以安装到 USB 上，但总归是麻烦。&lt;/p&gt;
&lt;p&gt;最后找到了官方的一个&lt;a href=&#34;https://github.com/Gandi/api-examples/blob/master/bash/livedns/mywanip.sh&#34;&gt;脚本&lt;/a&gt;，非常适合我的需求。简单修改一下，然后安装一下支持 HTTPS 的 cURL：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ opkg update
$ opkg install ca-bundle
$ opkg install curl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后把脚本添加到 crontab 即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ETC 比赛无线网络搭建小记</title>
      <link>https://jia.je/networking/2018/10/20/etc-wireless-network/</link>
      <pubDate>Sat, 20 Oct 2018 23:44:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/10/20/etc-wireless-network/</guid>
      <description>&lt;p&gt;正好上着李贺武老师的《无线移动网络技术》课，然后今天又给 ETC 比赛搭建无线网络，于是周二的时候找老师咨询了一下意见。我们大概给老师讲了一下场地的样子和尺寸（当时估计的大了），然后老师给我们提供了一个可以供参考的部署方案，包括几个 AP 分别放在哪，这些 AP 的 2.4GHz 都用哪个 channel，然后都用多少功率。并且很友善地在周五的时候让助教来场地帮我们 survey 一下无线网络的状况。我们用 Fluke Networks 的 AirCheck Wi-Fi Tester 看了一下场地的各个频道的 AP 数量和信号强度，发现虽然 AP 挺多的，但是它们的信号都比我们的小不少，而且我们也都开到了 50mW，所以干扰不大。&lt;/p&gt;
&lt;p&gt;然后昨天下午一点半钟来到场地，用板车把设备都运到计算机开放实验室，然后开始部署无线网络。我们提前来踩过几次点，这边的网络是没有 DHCP 服务器的，通过一个指定的网关出去。我们发现可以利用已有的这些交换机从地下连到各个电脑上的网线，来连接我们的 AP 和交换机，这样我们就免去了走线的麻烦。于是我们先定下放 AP 的位置，然后用寻线器找到网线插到了交换机的哪一个端口上，标记好后换成连接到我们自己的交换机的网线上，从而可以通过 PoE 把我们的 AP 给启动起来。然后用我自己的路由器，把 LAN 口插到交换机上，给 AP 分发 DHCP 地址，然后把下发的默认网关配置为真实的网关（DHCP Option 3） ，没做但是也可以顺带做的是把 WLC 的地址分发下去（DHCP Option 43 Type 241）。&lt;/p&gt;
&lt;p&gt;当然，这个过程也遇到了一点小坑，就是交换机还保留了之前的配置，所以这次把新的几个端口划到了一个 VLAN 下，命令自然是记不住的要现查。然后起来以后还挺稳定的，也没出现什么问题，网络带宽也足够用，离千兆还有蛮多距离，一天也才跑了接近俩 TB 的流量。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unicode En Dash 小坑</title>
      <link>https://jia.je/misc/2018/10/13/unicode-en-dash-mistake/</link>
      <pubDate>Sat, 13 Oct 2018 22:51:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2018/10/13/unicode-en-dash-mistake/</guid>
      <description>&lt;p&gt;今天有同学问到我这个问题：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gcc -o ph ph.c –lpthread
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为啥不工作。我怎么看都觉得没啥问题，一开始以为是找不到 pthread，但马上又排除了。想了下会不会是有隐藏的字符，于是让同学 &lt;code&gt;pbpaste | xxd&lt;/code&gt; 一下，果然发现这里的 &lt;code&gt;–&lt;/code&gt; 是 &lt;code&gt;\xe2\x80\x93&lt;/code&gt; ，查了下是 Unicode 里的 En Dash。由于这是从 PDF 里直接拷贝出来的，所以凉了。改成正常的短横杠即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>软工平台踩坑记</title>
      <link>https://jia.je/software/2018/10/12/secoder-platform-sucks/</link>
      <pubDate>Fri, 12 Oct 2018 00:09:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/10/12/secoder-platform-sucks/</guid>
      <description>&lt;p&gt;老师要求我们搞 CI/CD，CI 自然是很快就搞好了，不过 CD 还得配一下。今天研究了一下它的 Deployer 架构，发现了若干易用性问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;缺乏文档&lt;/li&gt;
&lt;li&gt;只有&lt;a href=&#34;https://gitlab.secoder.net/SECoder-Examples/python-example/blob/master/.gitlab-ci.yml&#34;&gt;样例配置&lt;/a&gt;没有讲解&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.secoder.net/service/deployer/&#34;&gt;已有的文档&lt;/a&gt; 语焉不详&lt;/li&gt;
&lt;li&gt;官方对此回复：功能太多，还没忙过来写文档&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;于是只好经常戳助教然后尝试理解这个东西。。然后遇到了很多的 BUG：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;容器没有重启功能。。。&lt;/li&gt;
&lt;li&gt;容器死了还是活着看一个图的颜色。。。毫无说明&lt;/li&gt;
&lt;li&gt;容器虽然有 Console，但是输入过长后直接回到行首没有换行。。。&lt;/li&gt;
&lt;li&gt;容器对外的域名里有下划线。。。Django 上来就一句 &lt;code&gt;Invalid HTTP_HOST header: &#39;xxxx_xxx.app.secoder.net&#39;. The domain name provided is not valid according to RFC 1034/1035.&lt;/code&gt; Express 直接就 &lt;code&gt;Invalid Host header&lt;/code&gt; 放弃治疗。。。&lt;/li&gt;
&lt;li&gt;助教对上一条的回复是，等我忙完 DDL 有空再做吧。。。也就是说现在要做只能自己再开一个 Nginx 容器然后自己在 &lt;code&gt;proxy_set_header&lt;/code&gt; 上做手脚。。。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>在荔枝糖（Lichee Tang）上初次体验 FPGA</title>
      <link>https://jia.je/hardware/2018/10/07/my-first-fpga-experience-on-lichee-tang/</link>
      <pubDate>Sun, 07 Oct 2018 22:34:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2018/10/07/my-first-fpga-experience-on-lichee-tang/</guid>
      <description>&lt;p&gt;今天从张宇翔学长那拿到了 &lt;a href=&#34;http://tang.lichee.pro/&#34;&gt;荔枝糖（Lichee Tang）&lt;/a&gt; 的 FPGA 板子，于是立即开始把前段时间学到的 Verilog 应用上来。不过想到现在我手上没有多少外设，然后又必须远程到 Windows 电脑上去操作，于是先实现了一下 UART 通信。&lt;/p&gt;
&lt;p&gt;在网上找到了 &lt;a href=&#34;https://github.com/ben-marshall/uart&#34;&gt;ben-marshall/uart&lt;/a&gt; 一个简易的实现，很快做到了一直在串口上打印 &lt;code&gt;A&lt;/code&gt; 字符。接着我开始尝试实现一个简单的串口回显。一开始，我直接把 UART 读到的数据直接输出，果然可以了，但是一旦传输速率跟不上了，就会丢失数据。于是我添加了 FIFO IP 核，然后把读入的数据存入 FIFO，又从 FIFO 中读取数据写入到 UART 中去。不过发现了一个小 BUG：每次打印的是倒数第二次输入的字符，即丢失了第一个字符。在张宇翔学长的帮助下找到了问题：当 FIFO 的读使能信号为高时，其数据在下一个时钟周期才来，于是解决方案就是等到数据来的时候再向 UART 中写数据：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @ (&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; clk_in) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	uart_tx_en &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; uart_fifo_re;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就解决了这个问题。完整代码在 &lt;a href=&#34;https://github.com/jiegec/learn_licheetang&#34;&gt;jiegec/learn_licheetang&lt;/a&gt; 中。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 veth 实现 IPv6-only 的 Brouter 功能</title>
      <link>https://jia.je/networking/2018/10/07/use-veth-for-ipv6-brouter/</link>
      <pubDate>Sun, 07 Oct 2018 11:05:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/10/07/use-veth-for-ipv6-brouter/</guid>
      <description>&lt;p&gt;最近从 @shankerwangmiao 学到了一个方法：通过 veth 把两个 bridge 的 IPv6 桥接起来。方法如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ip link add veth-v6-in type veth peer name veth-v6-out
$ brctl addif br-in veth-v6-in
$ brctl addif br-out veth-v6-out
$ ebtables -t filter -A FORWARD -p ! IPv6 -o veth-v6-in -j DROP
$ ebtables -t filter -A FORWARD -p ! IPv6 -o veth-v6-out -j DROP
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就可以看到 veth 上仅有 IPv6 的流量了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 Android 上打开 LTE 的 IPv6</title>
      <link>https://jia.je/networking/2018/10/04/enable-lte-ipv6-on-android/</link>
      <pubDate>Thu, 04 Oct 2018 22:47:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/10/04/enable-lte-ipv6-on-android/</guid>
      <description>&lt;p&gt;听闻北京移动给 LTE 配置了 SLAAC，但现在需要手动打开，方法如下：&lt;/p&gt;
&lt;p&gt;Settings -&amp;gt; Network &amp;amp; Internet -&amp;gt; Mobile Network -&amp;gt; Advanced -&amp;gt; Access Point Names -&amp;gt; 中国移动 GPRS (China Mobile) -&amp;gt; 把 APN procotol 和 APN roaming protocol 两项都改成 IPv4/IPv6&lt;/p&gt;
&lt;p&gt;然后在 &lt;a href=&#34;https://test-ipv6.com&#34;&gt;test-ipv6.com&lt;/a&gt; 上可以看到确实分配了 IPv6 地址，不过目前评分只有 1/10。也就是说可用性还不佳。&lt;/p&gt;
&lt;p&gt;而在 iOS 上，通过 HE 的 Network Tools 能看到，确实拿到了 IPv6 的地址，但是出不去，怀疑是运营商没有下发相关配置，所以还不能使用，只能继续等。&lt;/p&gt;
&lt;p&gt;2018-11-06 更新：现在 iOS 用户也有 LTE 的 v6 了。评分是 9/10。目前可用性已经可以了，就是国内互联还不大好。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>THUCTF 2018 和 Teaser Dragon CTF 2018 小记</title>
      <link>https://jia.je/ctf/2018/10/04/2018-10-04-thuctf-2018-and-teaser-dragon-ctf-2018/</link>
      <pubDate>Thu, 04 Oct 2018 14:52:00 +0800</pubDate>
      
      <guid>https://jia.je/ctf/2018/10/04/2018-10-04-thuctf-2018-and-teaser-dragon-ctf-2018/</guid>
      <description>&lt;p&gt;终于可以公开 &lt;a href=&#34;https://github.com/jiegec/ctf-writeups/tree/master/2018-09-28-thuctf2018&#34;&gt;writeup&lt;/a&gt; 了，大家也可以去看 twd2 写的 &lt;a href=&#34;https://twd2.me/archives/11097&#34;&gt;writeup&lt;/a&gt; 。这次是我第一次打 CTF，发现题目还挺有意思的，虽然也有一些题目做不出来，有拿钱还是美滋滋。&lt;/p&gt;
&lt;p&gt;这次也认识了好些会打 CTF 的人吧，如 0x00, user1, igoodvegetable 等队伍的同学。一开始被蛤力橙叫来打比赛，我觉得心里挺没底的，然后花了很多时间做题目，一点一点还是做出了不少题目来。最精彩的还是结束以后，当知晓没做出来的题目的做法时候，会不自觉感叹题目的巧妙。也学到了一些梗：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define 1000000007 twd2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着就参与了一下 Teaser Dragon CTF 2018，是个在线赛，许多人一起做题，只有 24 小时。看了下题目，除了签到题，其它题都比 THUCTF 2018 难多了，我只能围观他们做题。最后看到别人写的 writeup，真是太巧妙了，一环接一环，真的想不到。不过也有很麻烦的题目，特别是有的逆向的题目，太考验人的耐心了。&lt;/p&gt;
&lt;p&gt;接下来就等待官方的 writeup 和别人的 writeup，学习一下别人的做法吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>绕过 GPGMail 的激活检测</title>
      <link>https://jia.je/software/2018/10/04/bypass-gpgmail-activation/</link>
      <pubDate>Thu, 04 Oct 2018 11:47:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/10/04/bypass-gpgmail-activation/</guid>
      <description>&lt;p&gt;前段时间 GPGMail &lt;a href=&#34;https://gpgtools.org/support-plan&#34;&gt;宣布不再免费&lt;/a&gt;，在三十天的试用期后就不给用了。唉，可能是官方实在没钱维护了，也可能是官方想赚钱了。不过，既然 GPGMail 采用的是&lt;a href=&#34;https://github.com/GPGTools/GPGMail/blob/high-sierra/LICENSE.txt&#34;&gt;自由的许可证&lt;/a&gt;，意味着我们可以自己对代码进行更改。和许可证验证相关的&lt;a href=&#34;https://github.com/GPGTools/GPGMail/blob/c08ce21eee08a1089c82c04af1fab5b85d72de68/Source/GPGMailBundle.m#L846&#34;&gt;代码&lt;/a&gt;如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- (BOOL)hasActiveContract {
    NSDictionary *contractInformation = [self contractInformation];
    return [contractInformation[@&amp;#34;Active&amp;#34;] boolValue];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们只要改成 &lt;code&gt;return TRUE&lt;/code&gt; ，在自己的电脑上手动编译、并复制到 &lt;code&gt;/Library/Application Support/GPGTools/GPGMail&lt;/code&gt; 下即可。&lt;/p&gt;
&lt;p&gt;另：还有一个直接对二进制打 patch 的方法（仍然符合许可证），利用了最近打 CTF 学到的一些知识。找到以上这个函数，然后把返回值修改成非零即可。这里就不提供方法了。最后的更改：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ radiff2 -D
--- 0x0000282f  410fbec7
- movsx eax, r15b
+++ 0x0000282f  4c89e090
+ mov rax, r12
+ nop
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然了，还需要额外 &lt;code&gt;codesign --remove-signature&lt;/code&gt; 一下。&lt;/p&gt;
&lt;p&gt;谨慎对非自由软件采用这个方法。可能有法律风险。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 macOS 的 VirtualBox 上从 USB 启动</title>
      <link>https://jia.je/os/2018/09/14/virtualbox-booting-from-usb-on-mac/</link>
      <pubDate>Fri, 14 Sep 2018 23:57:00 +0800</pubDate>
      
      <guid>https://jia.je/os/2018/09/14/virtualbox-booting-from-usb-on-mac/</guid>
      <description>&lt;p&gt;做了一个 Windows 10 安装 U 盘，想测试一下能不能启动，于是想用 VirtualBox 起一个虚拟机。但是发现，一般情况下要从 ISO 或者把 U 盘克隆成一个 vdi/vmdk etc 再启动。不过找到了 Cem Arslan 的 &lt;a href=&#34;https://www.linkedin.com/pulse/virtualbox-booting-from-usb-mac-cem-arslan&#34;&gt;VirtualBox - Booting From USB (MAC)&lt;/a&gt; 实验了一下，确实可以用，以 &lt;code&gt;/dev/disk2&lt;/code&gt; 为例方法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ diskutil unmountDisk /dev/disk2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo chown &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;whoami&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; /dev/disk2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ VBoxManage internalcommands createrawvmdk -filename PATH_TO_VMDK -rawdisk /dev/disk2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# Now boot from VirtualBox&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于其它平台，可以参考 Tu Nguyen 的 &lt;a href=&#34;https://www.aioboot.com/en/boot-from-usb-in-virtualbox/&#34;&gt;How to boot from USB in VirtualBox&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;研究了一下生成的 vmdk 文件，大概是这样的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Disk DescriptorFile
version=1
CID=12345678
parentCID=ffffffff
createType=&amp;#34;fullDevice&amp;#34;

# Extent description
RW 12345678 FLAT &amp;#34;/dev/disk2&amp;#34; 0

# The disk Data Base 
#DDB

ddb.virtualHWVersion = &amp;#34;4&amp;#34;
ddb.adapterType=&amp;#34;ide&amp;#34;
ddb.geometry.cylinders=&amp;#34;1234&amp;#34;
ddb.geometry.heads=&amp;#34;1234&amp;#34;
ddb.geometry.sectors=&amp;#34;1234&amp;#34;
ddb.uuid.image=&amp;#34;12341234-1234-1234-1234-123412341234&amp;#34;
ddb.uuid.parent=&amp;#34;00000000-0000-0000-0000-000000000000&amp;#34;
ddb.uuid.modification=&amp;#34;00000000-0000-0000-0000-000000000000&amp;#34;
ddb.uuid.parentmodification=&amp;#34;00000000-0000-0000-0000-000000000000&amp;#34;
ddb.geometry.biosCylinders=&amp;#34;1234&amp;#34;
ddb.geometry.biosHeads=&amp;#34;1234&amp;#34;
ddb.geometry.biosSectors=&amp;#34;1234&amp;#34;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>在 Ubuntu 上跨版本迁移 MongoDB</title>
      <link>https://jia.je/software/2018/09/13/migrate-mongodb-on-ubuntu/</link>
      <pubDate>Thu, 13 Sep 2018 14:27:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/09/13/migrate-mongodb-on-ubuntu/</guid>
      <description>&lt;p&gt;由于 MongoDB 只支持当前版本和上一个版本的数据库格式，然后刚刚滚系统升级的时候升级到了 3.6.x，而数据库格式仍然是 3.2.x 的，于是需要先安装回 3.4.x 版本的 MongoDB，输入命令把数据库升级到 3.4.x 版本后，再用 3.6.x 的数据库进行升级。&lt;/p&gt;
&lt;p&gt;以 从 Ubuntu 14.04 LTS 升级到 Ubuntu 18.04.1 LTS 为例，方法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.4.17.tgz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tar xvf mongodb-linux-x86_64-ubuntu1604-3.4.17.tgz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd mongodb-linux-x86_64-ubuntu1604-3.4.17/bin/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo ./mongod --config /etc/mongodb.conf &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mongo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; db.adminCommand&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; setFeatureCompatibilityVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3.4&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ok&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ fg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;^C
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo chown -R mongodb:mongodb /var/lib/mongodb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo systemctl start mongodb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mongo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; db.adminCommand&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; getParameter: 1, featureCompatibilityVersion: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;featureCompatibilityVersion&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3.4&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ok&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; db.adminCommand&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; setFeatureCompatibilityVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3.6&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ok&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; db.adminCommand&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; getParameter: 1, featureCompatibilityVersion: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;featureCompatibilityVersion&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3.6&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ok&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# Okay now&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>通过 SSH 隧道连接 ADB 和 Android 设备</title>
      <link>https://jia.je/programming/2018/09/13/adb-over-ssh-tunnel/</link>
      <pubDate>Thu, 13 Sep 2018 13:20:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/09/13/adb-over-ssh-tunnel/</guid>
      <description>&lt;p&gt;由于本机算力不足，想要在远程&lt;a href=&#34;https://jia.je/programming/2018/06/18/building-lineageos-in-archlinux/&#34;&gt;编译 LineageOS&lt;/a&gt; ，其中有一步需要连接到已有的设备，于是突发奇想：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;adb 可以通过 网络连接&lt;/li&gt;
&lt;li&gt;ssh 可以进行端口转发，这里是把 remote 的端口转发到 Android 设备上的端口。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ adb shell ip -f inet addr show wlan0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# remember the ip address here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ adb tcpip PORT1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ssh -R PORT2:ANDROID_IP:PORT1 REMOTE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;remote&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;$ adb connect localhost:PORT2 &lt;span style=&#34;color:#75715e&#34;&gt;# trust this device on Android&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考文档：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/3623727&#34;&gt;How can I connect to Android with ADB over TCP?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ssh.com/ssh/tunneling/example&#34;&gt;SSH PORT FORWARDING EXAMPLE&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>在 LEDE（OpenWrt）上启用 wpad</title>
      <link>https://jia.je/networking/2018/09/11/enable-wpad-on-lede/</link>
      <pubDate>Tue, 11 Sep 2018 23:23:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/09/11/enable-wpad-on-lede/</guid>
      <description>&lt;p&gt;WPAD（Web Proxy Auto-Discovery Protocol）是一个可以利用 dhcp 分发 pac 配置的协议。方法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# ssh to router first&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ vim /etc/dnsmasq.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dhcp-option&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;252,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://router_ip/wpad.dat&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ vim /www/wpad.dat &lt;span style=&#34;color:#75715e&#34;&gt;# put pac here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ service dnsmasq restart
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# ensure proxy is available to lan&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# enable wpad on devices&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考文档：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Web_Proxy_Auto-Discovery_Protocol&#34;&gt;Web Proxy Auto-Discovery Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.davidpashley.com/articles/automatic-proxy-configuration-with-wpad/&#34;&gt;Automatic Proxy Configuration with WPAD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://findproxyforurl.com/deploying-wpad/&#34;&gt;Deploying WPAD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://findproxyforurl.com/example-pac-file/&#34;&gt;Example PAC File&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>在 Xcode 9 上启用 Vim 模拟（XVim 2）</title>
      <link>https://jia.je/software/2018/09/08/enable-vim-mode-in-xcode-9/</link>
      <pubDate>Sat, 08 Sep 2018 02:01:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/09/08/enable-vim-mode-in-xcode-9/</guid>
      <description>&lt;p&gt;作为一个不用 vim 编辑会死星人，用 Xcode 总是止不住自己想 Escape 的心。于是找到了 &lt;a href=&#34;https://github.com/XVimProject/XVim&#34;&gt;XVimProject/XVim2&lt;/a&gt; 进行配置。&lt;/p&gt;
&lt;p&gt;大致方法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按照 &lt;a href=&#34;https://github.com/XVimProject/XVim2/blob/master/SIGNING_Xcode.md&#34;&gt;Signing Xcode&lt;/a&gt; 对 Xcode 进行重签名。套路和对 GDB 进行签名一样。不过这次，签名完成的时间可长多了，毕竟 Xcode 这么大。&lt;/li&gt;
&lt;li&gt;接着按照项目的 README，首先 &lt;code&gt;git clone&lt;/code&gt; 然后 &lt;code&gt;make&lt;/code&gt; ，第一次打开 Xcode 的时候选择 &lt;code&gt;Load Bundle&lt;/code&gt; 即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;终于可以满足我 Escape Xcode 的欲望了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 macOS 上读取移动硬盘的 S.M.A.R.T. 信息</title>
      <link>https://jia.je/hardware/2018/09/07/reading-smart-info-of-external-drives-under-macos/</link>
      <pubDate>Fri, 07 Sep 2018 10:20:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2018/09/07/reading-smart-info-of-external-drives-under-macos/</guid>
      <description>&lt;p&gt;之前想看看自己各个盘的情况，但是发现只能看电脑内置的 SSD 的 S.M.A.R.T 信息，而移动硬盘的都显示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ smartctl -a /dev/disk2
smartctl 6.6 2017-11-05 r4594 [Darwin 17.7.0 x86_64] (local build)
Copyright (C) 2002-17, Bruce Allen, Christian Franke, www.smartmontools.org

/dev/disk2: Unable to detect device type
Please specify device type with the -d option.

Use smartctl -h to get a usage summary
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一开始我怀疑是个别盘不支持，但换了几个盘都不能工作，问题应该出现在了 USB 上。查了下资料，果然如此。根据 &lt;a href=&#34;https://www.smartmontools.org/wiki/USB&#34;&gt;USB devices and smartmontools&lt;/a&gt; ，获取 S.M.A.R.T 信息需要直接发送 ATA 命令，但是由于经过了 USB，于是需要进行一个转换，导致无法直接发送 ATA 命令。这个问题自然是有解决方案，大概就是直接把 ATA 命令发送过去（pass-through）。上面这个地址里写到，如果需要在 macOS 上使用，需要安装一个内核驱动。可以找到，源码在 &lt;a href=&#34;https://github.com/kasbert/OS-X-SAT-SMART-Driver&#34;&gt;kasbert/OS-X-SAT-SMART-Driver&lt;/a&gt; 并且有一个带签名的安装包在 &lt;a href=&#34;https://binaryfruit.com/drivedx/usb-drive-support&#34;&gt;External USB / FireWire drive diagnostics support&lt;/a&gt; 中可以下载。丢到 VirusTotal 上没查出问题，用 v0.8 版本安装好后就成功地读取到了移动硬盘的 S.M.A.R.T 信息了。&lt;/p&gt;
&lt;p&gt;然后我又简单研究了一下各个 S.M.A.R.T 各个值的含义是什么。 &lt;code&gt;VALUE&lt;/code&gt; 代表当前的值， &lt;code&gt;WORST&lt;/code&gt; 代表目前检测到的最差的值， &lt;code&gt;THRESH&lt;/code&gt; 代表损坏阈值。这些值都是从 &lt;code&gt;RAW_VALUE&lt;/code&gt; 进行计算后归一化而来。然后 &lt;code&gt;TYPE&lt;/code&gt; 分为两种，一是 &lt;code&gt;Pre-fail&lt;/code&gt; ，代表如果这一项的值小于阈值，代表这个机器很危险了，赶紧拷数据丢掉吧。二是 &lt;code&gt;Old_age&lt;/code&gt; ，代表如果这一项小于阈值，代表这个机器比较老了，但还没坏。真正要看是否坏了，可以看 &lt;code&gt;When_Failed&lt;/code&gt; 一栏。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>通过 Ipfilter Extension 实现 RFC8367</title>
      <link>https://jia.je/networking/2018/08/31/implementing-rfc8367-as-iptables-extension/</link>
      <pubDate>Fri, 31 Aug 2018 15:47:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/08/31/implementing-rfc8367-as-iptables-extension/</guid>
      <description>&lt;p&gt;前几天无聊闲逛看到了一个很有趣的 &lt;a href=&#34;https://tools.ietf.org/html/rfc8367&#34;&gt;RFC8367 - Wrongful Termination of Internet Protocol (IP) Packets&lt;/a&gt; ，看到日期大家应该都懂了，这是个粥客，不过里面还是反映了一些事情，咳。&lt;/p&gt;
&lt;p&gt;之前看到闪客实现了 &lt;a href=&#34;https://github.com/shankerwangmiao/xt_PROTO&#34;&gt;shankerwangmiao/xt_PROTO&lt;/a&gt; ，想到自己也可以做一个 iptables 扩展，于是就写了 &lt;a href=&#34;https://github.com/jiegec/xt_EQUALIZE&#34;&gt;jiegec/xt_EQUALIZE&lt;/a&gt; 。它是这样使用的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone git@github.com:jiegec/xt_EQUALIZE.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo make install
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo iptables -t filter -A INPUT -j EQUALIZE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo dmesg -w &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# Make some random network requests to see the effect!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ping 1.1.1.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ping 8.8.8.8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ping ::1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目前还没有把参数都变成可以配置的。如果真的有人需要这个模块的话，我再改吧（逃&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 macOS 上 TAP Interface 上启用 IPv6 自动配置</title>
      <link>https://jia.je/networking/2018/08/25/enable-ipv6-autoconfiguration-on-tap-interfaces-in-macos/</link>
      <pubDate>Sat, 25 Aug 2018 19:07:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/08/25/enable-ipv6-autoconfiguration-on-tap-interfaces-in-macos/</guid>
      <description>&lt;p&gt;由于 macOS 对 TAP Interface 不会自动出现一个设置中对应的服务，所以需要手动进行配置。一番测试后，发现可以通过：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo ipconfig set [tap_if] automatic-v6
$ sudo ipconfig set [tap_if] dhcp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;启用系统自带的 dhcp 和 ra 功能。也许有方法可以把这些 tap 搬到系统的设置中去。&lt;/p&gt;
&lt;p&gt;UPDATE:&lt;/p&gt;
&lt;p&gt;可以把 TAP Interface 加到系统的设置中去。方法参考&lt;a href=&#34;https://stackoverflow.com/a/6375307&#34;&gt;Virtual network interface in Mac OS X&lt;/a&gt;。完成以后可以直接通过系统设置界面进行配置。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 macOS 下实现 GRETAP</title>
      <link>https://jia.je/networking/2018/08/21/implementing-gretap-in-macos/</link>
      <pubDate>Tue, 21 Aug 2018 09:42:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/08/21/implementing-gretap-in-macos/</guid>
      <description>&lt;p&gt;由于没有找到 macOS 下现成的 GRETAP 实现，我就想到自己实现一个。由于&lt;a href=&#34;http://tuntaposx.sourceforge.net/&#34;&gt;tuntaposx&lt;/a&gt;提供了一个和 Linux 下基本一样的 TAP Interface，于是自己利用 raw socket 和 TAP Interface 实现了一下，主要方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 raw socket，读取收到的 proto 47 的包，判断是否为 GRETAP 包，是，则写入内层包到打开的 TAP Interface 中。&lt;/li&gt;
&lt;li&gt;从 TAP Interface 中读入包，自己加上 GRE 头和 IP 头，然后发送。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;主要的难度是在 raw socket 部分，macOS 继承了 BSD，与 Linux 不大一样。于是参考了&lt;a href=&#34;https://sock-raw.org/papers/sock_raw&#34;&gt;SOCK_RAW Demystified&lt;/a&gt;，成功地实现了这个功能。&lt;/p&gt;
&lt;p&gt;代码放在&lt;a href=&#34;https://github.com/jiegec/gretapmac&#34;&gt;jiegec/gretapmac&lt;/a&gt;。写得并不高效，仅仅可用，用了一百多行。&lt;/p&gt;
&lt;p&gt;UPDATE: 之后又随手实现了一个类似的协议，L2TPv3 over UDP。代码在&lt;a href=&#34;https://github.com/jiegec/l2tpv3udptap&#34;&gt;jiegc/l2tpv3udptap&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 WireGuard 构建的 Overlay Network 上跑 babel 路由协议</title>
      <link>https://jia.je/networking/2018/08/10/use-babel-in-overlay-network-with-wireguard/</link>
      <pubDate>Fri, 10 Aug 2018 09:17:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/08/10/use-babel-in-overlay-network-with-wireguard/</guid>
      <description>&lt;p&gt;受 &lt;a href=&#34;https://blog.fugoes.xyz/2018/02/03/Run-Babeld-over-Wireguard.html&#34;&gt;Run Babeld over Wireguard - Fugoes&amp;rsquo;s Blog&lt;/a&gt; 和 &lt;a href=&#34;https://vincent.bernat.im/en/blog/2018-route-based-vpn-wireguard&#34;&gt;Route-based VPN on Linux with WireGuard&lt;/a&gt; 启发，自己也想尝试一下，在一个有多个结点的网络中，如何通过 WireGuard 构建一个 overlay network，并通过 babel 自动进行结点发现和路径选择。&lt;/p&gt;
&lt;p&gt;首先建立点对点的 WireGuard Tunnel。由于我们用 babel 进行路由，所以我们不能采用 Wiregurad 本身基于目的地址的端口复用，所以每一个 WireGuard interface 都只有一个 Peer。&lt;/p&gt;
&lt;p&gt;配置一个点对点的 WireGuard Tunnel：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ # for wg-quick
$ cat wg0.conf
[Interface]
Address = IPV4/32, fe80::ID/64
PrivateKey = REDACTED
ListenPort = PORT1
Table = off # ask wg-quick not to insert peer address into routing table

[Peer]
PublicKey = REDACTED
AllowedIPs = 0.0.0.0/0, ::/0
Endpoint = REDACTED:PORT2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的 IPV4 和 ID 在同一设备上的不同 WireGuard Tunnel 上相同。只是通过 wg interface 编号来区分。&lt;/p&gt;
&lt;p&gt;接着配置 babeld：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat babeld.conf

router-id ID
local-port 33123 # for babelweb2

# one line for each wg interface
interface wg0 type tunnel rtt-max 512

redistribute ip PREFIX/LEN ge LEN le 32 local allow # tunnel neighbors
redistribute proto 42 # routes installed by babeld
redistribute local deny
# consult babeld man page for more
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后通过 BabelWeb2（很难用）进行可视化，然后通过手动触发一些网络波动即可达到效果。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>更改 macOS 屏幕亮度的按键</title>
      <link>https://jia.je/os/2018/08/05/changing-screen-brightness-key/</link>
      <pubDate>Sun, 05 Aug 2018 09:59:00 +0800</pubDate>
      
      <guid>https://jia.je/os/2018/08/05/changing-screen-brightness-key/</guid>
      <description>&lt;p&gt;由于我打开了「Invert Fn」功能，所以需要调亮度的时候，是采用 Fn+F1/F2 的方法。但是，我的机械键盘则是，不按 Fn 时为 1-9，按着 Fn 时为对应的 F1-F9，但是就无法调整亮度和声音了。&lt;/p&gt;
&lt;p&gt;然后捣腾了一下，发现可以用 ScLk 和 Pa/Br（名称在各个键盘上不大一样）调整亮度。不过，还没发现如何更改音量。。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>向 Lenovo y1s 刷入 OpenWRT 17.01.5 固件，并把 IPv6 bridge 到内网中和配置认证脚本</title>
      <link>https://jia.je/networking/2018/07/26/flashing-lenovo-y1s-and-bridge-ipv6/</link>
      <pubDate>Thu, 26 Jul 2018 20:48:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/07/26/flashing-lenovo-y1s-and-bridge-ipv6/</guid>
      <description>&lt;p&gt;首先参照&lt;a href=&#34;https://wiki.openwrt.org/toh/lenovo/lenovo_y1_v1&#34;&gt;OpenWRT Wiki - Lenovo Y1 v1&lt;/a&gt;找到刷固件教程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载&lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/lede/releases/17.01.5/targets/ramips/mt7620/lede-17.01.5-ramips-mt7620-y1s-squashfs-sysupgrade.bin&#34;&gt;Lenovo y1s 的固件&lt;/a&gt;备用&lt;/li&gt;
&lt;li&gt;断开电源，等待一段时间，插入电源同时快速按下重置按钮，如果面板双闪，则说明进入了恢复模式&lt;/li&gt;
&lt;li&gt;电脑连接到四个 LAN 口中任意一个，配置静态地址在 192.168.1.0/24 网段&lt;/li&gt;
&lt;li&gt;打开 192.168.1.1 可以看到刷固件的页面&lt;/li&gt;
&lt;li&gt;上传固件，等待路由器重启&lt;/li&gt;
&lt;li&gt;配置 IP 地址为 DHCP 模式，打开 192.168.1.1 进行配置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后就是常规的密码设置，opkg 源设置为 tuna 的源，配置 ssh 和 公钥。&lt;/p&gt;
&lt;p&gt;接下来，我们为了使用学校的 SLAAC，采用 ebtables 直接把学校的 IPv6 bridge 进来，而 IPv4 由于准入系统，需要 NAT。&lt;/p&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://tmikey.tech/tech_daily/lede/2017/08/25/bridge_ipv6_lede.html&#34;&gt;Bridge IPv6 connections to WAN&lt;/a&gt;，下载 &lt;a href=&#34;https://github.com/cvmiller/v6brouter/blob/master/v6brouter_openwrt.sh&#34;&gt;v6brouter_openwrt.sh&lt;/a&gt; 到某个地方，然后修改一下里面的一些参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# For Lenovo y1s&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WAN_DEV&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;eth0.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BRIDGE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;br-lan
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# the rest remain unchanged&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后跑起来之后，自己的电脑可以成功拿到原生的 IPv6 地址了，不需要用难用的 NAT66 技术。&lt;/p&gt;
&lt;p&gt;下一步是采用&lt;a href=&#34;https://github.com/z4yx/GoAuthing&#34;&gt;z4yx/GoAuthing&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go get -u -v github.com/z4yx/GoAuthing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd $GOPATH/src/github.com/z4yx/GoAuthing/cli
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ env GOOS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;linux GOARCH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mipsle GOMIPS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;softfloat go build main.go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mipsel-linux-gnu-strip main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ scp main root@192.168.1.1:~/GoAuthing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ssh root@192.168.1.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ opkg install ca-certificates
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./GoAuthing
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里参考了&lt;a href=&#34;https://blog.csdn.net/QQ531456898/article/details/80095707&#34;&gt;解决 GO 语言编译程序在 openwrt(mipsle 架构) 上运行提示 Illegal instruction 问题&lt;/a&gt;，配置了 GOMIPS 环境变量。为了访问 HTTPS 网站，参考了&lt;a href=&#34;https://wiki.openwrt.org/doc/howto/wget-ssl-certs&#34;&gt;OpenWRT Wiki - SSL and Certificates in wget&lt;/a&gt;。有毒的是，这个环境变量，在 macOS 上不能正常工作，而在 Linux 机子上是没有问题的。&lt;/p&gt;
&lt;p&gt;然后就可以成功地跑起来 GoAuthing，解决了上校园网认证的问题。&lt;/p&gt;
&lt;p&gt;感谢&lt;a href=&#34;https://github.com/z4yx&#34;&gt;宇翔&lt;/a&gt;编写的 GoAuthing 小工具。&lt;/p&gt;
&lt;p&gt;更新：简化了一下 v6brouter 脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;BRIDGE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;br-lan
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WAN_DEV&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;/sbin/uci get network.wan.ifname&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WHITELIST1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;00:11:22:33:44:55&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WHITELIST2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;55:44:33:22:11:00&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brctl addbr $BRIDGE 2&amp;gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brctl addif $BRIDGE $WAN_DEV
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip link set $BRIDGE down
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip link set $BRIDGE up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brctl show
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ebtables -F
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ebtables -P FORWARD ACCEPT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ebtables -L
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uci set dhcp.lan.ra&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;disabled&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uci set dhcp.lan.dhcpv6&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;disabled&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uci commit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/etc/init.d/odhcpd restart
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &amp;gt; /proc/sys/net/ipv6/conf/$BRIDGE/accept_ra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ebtables -t broute -F
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ebtables -t broute -A BROUTING -i $WAN_DEV -p ! ipv6 -j DROP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ebtables -t broute -A BROUTING -s $WHITELIST1 -p ipv6 -j ACCEPT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ebtables -t broute -A BROUTING -d $WHITELIST1 -p ipv6 -j ACCEPT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ebtables -t broute -A BROUTING -s $WHITELIST2 -p ipv6 -j ACCEPT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ebtables -t broute -A BROUTING -d $WHITELIST2 -p ipv6 -j ACCEPT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ebtables -t broute -A BROUTING -p ipv6 -j DROP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ebtables -t broute -L
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意，这里添加了两个 WHITELIST 的 MAC 地址，表示只让这两个 MAC 地址的设备访问 v6。一般来说，外面网关的 MAC 地址也要放进来，不然可能接收不到 RA。如果不需要白名单的话，可以去掉 ebtables 的后几行规则。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>构建简易的 initramfs</title>
      <link>https://jia.je/os/2018/07/16/build-custom-initramfs/</link>
      <pubDate>Mon, 16 Jul 2018 03:43:00 +0800</pubDate>
      
      <guid>https://jia.je/os/2018/07/16/build-custom-initramfs/</guid>
      <description>&lt;p&gt;一直对 Linux 的启动很感兴趣，但对 initrd 和 initramfs 等概念不大了解，于是上网找了资料，自己成功地看到了现象。&lt;/p&gt;
&lt;p&gt;参考资料：
&lt;a href=&#34;http://www.kaizou.org/2016/09/boot-minimal-linux-qemu/&#34;&gt;Build and boot a minimal Linux system with qemu&lt;/a&gt;
&lt;a href=&#34;https://wiki.gentoo.org/wiki/Custom_Initramfs&#34;&gt;Custom Initramfs&lt;/a&gt;
&lt;a href=&#34;https://dazdaztech.wordpress.com/2013/04/04/initrd-vs-initramfs/&#34;&gt;initramfs vs initrd&lt;/a&gt;
&lt;a href=&#34;https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt&#34;&gt;ramfs, rootfs and initramfs&lt;/a&gt;
&lt;a href=&#34;https://www.linux.com/learn/kernel-newbie-corner-initrd-and-initramfs-whats&#34;&gt;The Kernel Newbie Corner: &amp;ldquo;initrd&amp;rdquo; and &amp;ldquo;initramfs&amp;rdquo;&amp;ndash; What&amp;rsquo;s Up With That?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;具体步骤：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat hello.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;int main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;;;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        printf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, world!\n&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc -static hello.c -o init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo init | cpio -o -H newc | gzip &amp;gt; initrd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ qemu-system-x86_64 -kernel /boot/vmlinuz-linux -initrd initrd -nographic -append &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;console=ttyS0&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Use C-a c q u i t &amp;lt;Enter&amp;gt; to exit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到过一会（三四秒？），可以看到满屏的 Hello world 在输出。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用 multicast 地址找到同一网段的主机</title>
      <link>https://jia.je/networking/2018/07/15/use-multicast-address-to-find-neighbours/</link>
      <pubDate>Sun, 15 Jul 2018 17:19:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/07/15/use-multicast-address-to-find-neighbours/</guid>
      <description>&lt;p&gt;IPv4 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ping -t1 224.0.0.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;IPv6:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ping -t1 ff02::1%iface
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>用 MuSSH 快速对多台机器进行软件包升级</title>
      <link>https://jia.je/devops/2018/07/15/use-mussh-to-upgrade-multiple-machines/</link>
      <pubDate>Sun, 15 Jul 2018 01:10:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2018/07/15/use-mussh-to-upgrade-multiple-machines/</guid>
      <description>&lt;p&gt;Debian Stretch 9.5 刚刚更新，自己手上有不少 stretch 的机器，于是顺手把他们都升级了。不过，这个过程比较繁琐，于是我采用了 MuSSH 的方法，让这个效率可以提高，即自动同时 SSH 到多台机器上进行更新。&lt;/p&gt;
&lt;p&gt;首先编写 hostlist 文件，一行一个地址，分别对应每台机器。&lt;/p&gt;
&lt;p&gt;然后采用 MuSSH 对每台机器执行同样的命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mussh -H hostlist -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apt update &amp;amp;&amp;amp; apt upgrade -y&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时要求，ssh 上去以后有相应的权限。这个有许多方法，不再赘述。然后就可以看到一台台机器升级，打上安全补丁，爽啊。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>配置 fcitx-fbterm 实现在终端下显示和输入中文</title>
      <link>https://jia.je/misc/2018/07/12/using-fcitx-fbterm/</link>
      <pubDate>Thu, 12 Jul 2018 23:06:00 +0800</pubDate>
      
      <guid>https://jia.je/misc/2018/07/12/using-fcitx-fbterm/</guid>
      <description>&lt;p&gt;参考网站：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxidc.com/Linux/2015-01/111976.htm&#34;&gt;Ubuntu 使用 fbterm 无法打开 fb 设备的解决及 fcitx-fbterm 安装&lt;/a&gt;
&lt;a href=&#34;https://wiki.archlinux.org/index.php/fcitx&#34;&gt;Fcitx - ArchWiki&lt;/a&gt;
&lt;a href=&#34;https://blog.csdn.net/guozhiyingguo/article/details/52852394&#34;&gt;完美中文 tty, fbterm+yong(小小输入法)&lt;/a&gt;
&lt;a href=&#34;http://www.voidcn.com/article/p-wrcgydjy-er.html&#34;&gt;让 linux console 支持中文显示和 fcitx 输入法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;考虑到 lemote yeeloong 机器的 cpu 运算性能，跑一个图形界面会非常卡，于是选择直接用 framebuffer。但是，显示中文又成了问题。于是，采用了 fbterm 和 fcitx 配合，加上 gdm 的方法，完成了终端下的中文输入。&lt;/p&gt;
&lt;p&gt;首先，安装相关的包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt install gpm fcitx-fronend-fbterm dbus-x11 fbterm fonts-wqy-zenhei
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着，基于以上参考网站第一个，编写 zhterm 文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo zhterm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eval &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;dbus-launch --auto-syntax&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fcitx &amp;gt;/dev/null 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fbterm -i fcitx-fbterm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kill $DBUS_SESSION_BUS_PID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fcitx-remote -e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ chmod +x zhterm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ zhterm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Use C-SPC to switch input source&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另：找到一个&lt;a href=&#34;https://unix.stackexchange.com/a/7682/144358&#34;&gt;映射 Caps Lock 到 Escape 的方案&lt;/a&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo bash -c &amp;#34;dumpkeys | sed &amp;#39;s/CtrlL_Lock/Escape/&amp;#39; | loadkeys&amp;#34;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>在 Lemote Yeeloong 上安装 Debian jessie</title>
      <link>https://jia.je/devops/2018/07/11/installing-debian-in-lemote-yeeloong/</link>
      <pubDate>Wed, 11 Jul 2018 23:12:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2018/07/11/installing-debian-in-lemote-yeeloong/</guid>
      <description>&lt;p&gt;参考网站：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://wiki.gnewsense.org/Projects/GNewSenseToMIPS&#34;&gt;gNewSense To MIPS&lt;/a&gt;
&lt;a href=&#34;https://rick.cogley.info/post/run-a-tftp-server-on-mac-osx/&#34;&gt;Run a TFTP server on macOS&lt;/a&gt;
&lt;a href=&#34;https://wiki.debian.org/DebianYeeloong&#34;&gt;Debian on Yeeloong&lt;/a&gt;
&lt;a href=&#34;https://wiki.debian.org/MIPSPort&#34;&gt;Debian MIPS port wiki&lt;/a&gt;
&lt;a href=&#34;https://www.debian.org/ports/mips/&#34;&gt;Debian MIPS port&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先，进入设备的 PMON：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Press Del to enter PMON
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，下载 Debian Jessie 的 netboot 文件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ wget https://mirrors.tuna.tsinghua.edu.cn/debian/dists/jessie/main/installer-mipsel/current/images/loongson-2f/netboot/vmlinux-3.16.0-6-loongson-2f
$ wget https://mirrors.tuna.tsinghua.edu.cn/debian/dists/jessie/main/installer-mipsel/current/images/loongson-2f/netboot/initrd.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以 macOS 为例，起一个 tftp 服务器以供远程下载：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ln -s these files to /private/tftpboot:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# initrd.gz&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# vmlinux-4.16.0-6-loongson-2f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo launchctl load -F /System/Library/LaunchDaemons/tftp.plist
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# set addr manually to 192.168.2.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;回到 PMON，配置远程启动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; ifaddr rtl0 192.168.2.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; load tftp://192.168.2.1/vmlinux-3.16.0-6-loongson-2f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; initrd tftp://192.168.2.1/initrd.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; g
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后就是熟悉的 Debian Installer 界面。起来之后，就可以顺手把 tftp 服务器关了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo launchctl unload -F /System/Library/LaunchDaemons/tftp.plist
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实测滚到 stretch 会挂。因为 stretch 虽然也有 mipsel 架构，但是它的 revision 与 Loongson-2f 不大一样，会到处出现 SIGILL 的问题，不可用。靠 jessie 和 jessie-backports 已经有不少的软件可以使用了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>通过 systemd-run 直接在容器中执行命令</title>
      <link>https://jia.je/devops/2018/07/06/run-command-in-container-directly/</link>
      <pubDate>Fri, 06 Jul 2018 15:56:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2018/07/06/run-command-in-container-directly/</guid>
      <description>&lt;p&gt;之前使用 &lt;code&gt;systemd-nspawn&lt;/code&gt; 开了容器，然后通过 &lt;code&gt;machinectl shell&lt;/code&gt; 进去，想要起一个服务然后丢到后台继续执行，但是发现离开这个 session 后这个进程总是会被杀掉，于是找了 &lt;code&gt;systemd-run&lt;/code&gt; 的方案，即：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemd-run --machine machine_name_here absolute_path_to_executable args_here
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样可以直接在容器中跑服务，而且用这个命令输出的临时 server 名称，还可以看到日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;journalctl --machine machine_name_here -u unit_name_above
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>通过 iptables 在同一个端口根据源地址解复用（demux）</title>
      <link>https://jia.je/networking/2018/07/06/use-iptables-to-serve-different-services-on-one-port/</link>
      <pubDate>Fri, 06 Jul 2018 09:36:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/07/06/use-iptables-to-serve-different-services-on-one-port/</guid>
      <description>&lt;p&gt;现在遇到一个场景，原来的一个服务只给一个客户端用，但现在增加了一个客户端，由于客户端配置相同，但是服务端需要区别对待两个客户端的服务端配置，所以利用 iptables 根据源地址做了一个端口转发，实现了 demux。&lt;/p&gt;
&lt;p&gt;假设：服务器在 192.168.0.1，客户端分别在 192.168.0.2 和 192.168.0.3。客户端配置的服务端地址是 192.168.0.1:8000。之前，在服务器上只跑了一个服务，监听着 8000 端口。&lt;/p&gt;
&lt;p&gt;现在，在服务器上再跑一个服务，监听 8001 端口，同时根据需求进行相应的配置。然后，加上如下 iptables 规则：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo iptables -t nat -A PREROUTING -s 192.168.0.3 -d 192.168.0.1 -p tcp -m tcp --dport &lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt; -j REDIRECT --to-ports &lt;span style=&#34;color:#ae81ff&#34;&gt;8001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样，在不需要更改客户端的情况下，完成了需要的效果。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>升级 MongoDB 到 4.0</title>
      <link>https://jia.je/programming/2018/07/04/upgrade-mongodb-to-4.0/</link>
      <pubDate>Wed, 04 Jul 2018 07:22:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/07/04/upgrade-mongodb-to-4.0/</guid>
      <description>&lt;p&gt;MongoDB 4.0 刚刚发布，加入了我很想要的 Transaction 功能。不过，我一更新就发现 MongoDB 起不来了。研究了一下日志，发现由于我创建数据库时，MongoDB 版本是 3.4，虽然后来升级到了 3.6，但还是用着 3.4 的兼容模式。这个可以这样来检测：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mongo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; db.adminCommand&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; getParameter: 1, featureCompatibilityVersion: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果不是 3.6，升级到 4.0 之前，需要先执行如下操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# MongoDB version 3.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mongo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; db.adminCommand&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; setFeatureCompatibilityVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3.6&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后再升级到 MongoDB 4.0，才能正常地启动 MongoDB 4.0。之后可以考虑尝试使用 MongoDB 4.0 的 Transaction 了。不知道什么时候进入 Debian 的 stretch-backports 源中。&lt;/p&gt;
&lt;p&gt;为了使用 MongoDB 4.0 的新特性，输入以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mongo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; db.adminCommand&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; setFeatureCompatibilityVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后会尝试一下 MongoDB 4.0 的 Transaction 功能。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wireguard 隧道搭建</title>
      <link>https://jia.je/networking/2018/06/29/wireguard-tunnel/</link>
      <pubDate>Fri, 29 Jun 2018 10:59:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/06/29/wireguard-tunnel/</guid>
      <description>&lt;p&gt;随着 Wireguard Go 版本的开发，在 macOS 上起 WireGuard Tunnel 成为现实。于是，搭建了一个 macOS 和 Linux 之间的 WireGuard Tunnel。假设 Linux 端为服务端，macOS 端为客户端。&lt;/p&gt;
&lt;p&gt;macOS 端：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install wireguard-tools
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd /usr/local/etc/wireguard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wg genkey &amp;gt; privatekey
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wg pubkey &amp;lt; privatekey &amp;gt; publickey
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ vim tunnel.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Interface&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PrivateKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MACOS_PRIVATE_KEY
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Peer&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PublicKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LINUX_PUBLIC_KEY &lt;span style=&#34;color:#75715e&#34;&gt;# Generated below&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AllowedIPs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 192.168.0.0/24
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Endpoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LINUX_PUBLIC_IP:12345
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ vim up.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# change interface name when necessary&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo wireguard-go utun0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo wg setconf utun0 tunnel.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ifconfig utun0 192.168.0.2 192.168.0.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ chmod +x up.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./up.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置 Linux 端：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone https://git.zx2c4.com/WireGuard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo make install
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo fish
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd /etc/wireguard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wg genkey &amp;gt; privatekey
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wg pubkey &amp;lt; privatekey &amp;gt; publickey
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ vim wg0.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Interface&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 192.168.0.1/24
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PrivateKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LINUX_PRIVATE_KEY
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ListenPort &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12345&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Peer&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PublicKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MACOS_PUBLIC_KEY
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AllowedIPs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 192.168.0.2/24
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wg-quick up wg0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;经过测试，两边可以互相 ping 通。&lt;/p&gt;
&lt;p&gt;后续尝试在 Android 上跑通 WireGuard。&lt;/p&gt;
&lt;p&gt;UPDATE 2018-07-11:&lt;/p&gt;
&lt;p&gt;成功在 Android 上跑通 WireGuard。在 Google Play 上下载官方的 App 即可。麻烦在于，将 Android 上生成的 Public Key 和服务器的 Public Key 进行交换。&lt;/p&gt;
&lt;p&gt;然后又看到&lt;a href=&#34;https://wiki.debian.org/Wireguard#Step_2_-_Alternative_C_-_systemd&#34;&gt;WireGuard 在 systemd-networkd&lt;/a&gt;上的配置方案，自己也实践了一下。首先，如果用的是 stretch，请首先打开 stretch-backports 源并把 systemd 升级到 237 版本。&lt;/p&gt;
&lt;p&gt;然后，根据上面这个连接进行配置，由于都是 ini 格式，基本就是复制粘贴就可以配置了。有一点要注意，就是，要保护 PrivateKey 的安全，注意配置 .netdev 文件的权限。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Verilog 初体验</title>
      <link>https://jia.je/programming/2018/06/21/verilog-first-try/</link>
      <pubDate>Thu, 21 Jun 2018 21:36:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/06/21/verilog-first-try/</guid>
      <description>&lt;p&gt;自己以前一直对硬件方面没有接触，但是大二大三很快就要接触相关知识，所以自己就先预习一下 Verilog HDL，以便以后造计算机。听学长们推荐了一本书叫《自己动手写 CPU》，由于自己手中只有很老的 Spartan-3 板子，手上没有可以用来试验的 FPGA，所以选择用 Verilog + Verilator 进行模拟。既然是模拟，自然是会有一定的问题，不过这个以后再说。&lt;/p&gt;
&lt;p&gt;然后就是模仿着这本书的例子，写了指令的获取和指令的解码两部分很少很少的代码，只能解码 ori (or with immidiate) 这一个指令。然后，通过 verilator 跑模拟，输出 vcd 文件，再用 gtkwave 显示波形，终于能够看到我想要的结果了。能够看到，前一个时钟周期获取指令，下一个时钟周期进行解码，出现了流水线的结果。这让我十分开心。&lt;/p&gt;
&lt;p&gt;接下来就是实现一些基本的算术指令，然后讲计算的结果写入到相应的寄存器中。这样做完之后，就可以做一个基于 verilator 的简易 A+B 程序了。&lt;/p&gt;
&lt;p&gt;我的代码发布在&lt;a href=&#34;https://github.com/jiegec/learn_verilog&#34;&gt;jiegec/learn_verilog&lt;/a&gt;中。最近马上到考试周，可能到暑假会更频繁地更新吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 ArchLinux 上编译 LineageOS for Huawei Angler</title>
      <link>https://jia.je/programming/2018/06/18/building-lineageos-in-archlinux/</link>
      <pubDate>Mon, 18 Jun 2018 05:47:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/06/18/building-lineageos-in-archlinux/</guid>
      <description>&lt;p&gt;实践了一下如何在 ArchLinux 上编译自己的 LineageOS。本文主要根据&lt;a href=&#34;https://wiki.lineageos.org/devices/angler/build&#34;&gt;官方文档&lt;/a&gt; 进行编写。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# for py2 virtualenv and running x86 prebuilt binaries(e.g. bison)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo pacman -Sy python2-virtualenv lib32-gcc-libs 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir -p ~/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir -p ~/virtualenv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# build script is written in python 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd ~/virtualenv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ virtualenv2 -p /usr/bin/python2 py2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir -p ~/android/lineage
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ curl https://storage.googleapis.com/git-repo-downloads/repo &amp;gt; ~/bin/repo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ chmod a+x ~/bin/repo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ vim ~/.config/fish/config.fish
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set -x PATH ~/bin $PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set -x USE_CCACHE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ exec fish -l
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd ~/android/lineage
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ repo init -u https://github.com/LineageOS/android.git -b lineage-15.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# alternatively, follow https://mirrors.tuna.tsinghua.edu.cn/help/lineageOS/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ repo sync
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ source ~/virtualenv/py2/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ source build/envsetup.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ breakfast angler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ vim ~/.config/fish/config.fish
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ccache -M 50G
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd ~/android/lineage/device/huawei/angler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./extract-files.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Plug in Nexus 6P, maybe over ssh, see my another post&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd ~/android/lineage
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ croot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brunch angler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# Endless waiting... (for me, more than 2 hrs)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>编写 eBPF 程序和利用 HyperLogLog 统计包的信息</title>
      <link>https://jia.je/programming/2018/06/15/ebpf-with-hyperloglog/</link>
      <pubDate>Fri, 15 Jun 2018 22:03:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/06/15/ebpf-with-hyperloglog/</guid>
      <description>&lt;p&gt;前段时间在写概率论与数理统计的期末论文，讨论的主题是如何对一个十分巨大的多重集合（或者是流）中相异元素个数进行估计，写的是 HyperLogLog 等算法。联想到前段时间 LWN 上多次提到的 eBPF 和 BCC 的文章，我准备自己用 eBPF 实现一个高效的估计 inbound packet 中来相异源地址的个数和 outbound packet 中相异目的地址的个数。经过了许多的尝试和努力，最终是写成了 &lt;a href=&#34;https://github.com/jiegec/hll_ebpf&#34;&gt;jiegec/hll_ebpf&lt;/a&gt; ，大致原理如下：&lt;/p&gt;
&lt;p&gt;由于 eBPF 是一个采用专用的 bytecode 并且跑在内核中的语言，虽然我们可以用 clang 写 C 语言然后交给 LLVM 生成相应地 eBPF bytecode，但仍然收到许多的限制。而且，我很少接触 Linux 内核开发，于是在找内核头文件时费了一番功夫。首先是核心代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; bpf_map_def &lt;span style=&#34;color:#a6e22e&#34;&gt;SEC&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;maps&amp;#34;&lt;/span&gt;) hll_ebpf_out_daddr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BPF_MAP_TYPE_PERCPU_ARRAY,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .key_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(u32),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .value_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(u32),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .max_entries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .pinning &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// PIN_GLOBAL_NS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SEC&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;out_daddr&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bpf_out_daddr&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; __sk_buff &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;skb) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  u32 daddr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_daddr&lt;/span&gt;(skb);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  u32 hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Murmur3&lt;/span&gt;(daddr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;update_hll&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;hll_ebpf_out_daddr, hash);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先是声名一个类型为 PERCPU_ARRAY 的 eBPF MAP 类型。这里的 MAP 不是字典，Array 才是真是的数据结构，只不过提供的 API 是类似于字典的。SEC 宏则是指定这个东西要放在哪一个段，这个在后面会提到。这个函数的作用就是，获取 IP 包的目的地址（其实应该判断一下是否是 IPv4 的），然后根据 HyperLogLog 的要求，进行哈希（这里采用的是 Murmur3），然后对得到的哈希值分段，前一部分用于索引，后一部分的 nlz（clz, whatever）用于估计。具体算法详情可以参考 HyperLogLog 的论文。&lt;/p&gt;
&lt;p&gt;接着，我们可以把这个 eBPF 函数进行编译，并且应用起来：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ export KERN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;4.16.0-2 &lt;span style=&#34;color:#75715e&#34;&gt;# or use uname -r with awk, see Makefile&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ clang -O2 -I /usr/src/linux-headers-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KERN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-common/include -I /usr/src/linux-headers-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KERN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-common/arch/x86/include -emit-llvm -c bpf.c -o - | llc -march&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bpf -filetype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;obj -o bpf.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ export IFACE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;en0 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo tc qdisc add dev &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;IFACE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; clsact &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo tc filter del dev &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;IFACE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; egress
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo tc filter add dev &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;IFACE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; egress bpf obj bpf.o sec out_daddr
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo tc filter del dev &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;IFACE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; ingress
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo tc filter add dev &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;IFACE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; ingress bpf obj bpf.o sec in_saddr
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们需要在用户态读出上面这个 MAP 中的内容。由于它是全局的，我们可以在 &lt;code&gt;/sys/fs/bpf/tc/globals&lt;/code&gt; 中找到他们。然后，把统计得到的数据进行综合，得到结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_file&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;file) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bpf_obj_get&lt;/span&gt;(file);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; M[m] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; V &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;m; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; value[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;bpf_map_lookup_elem&lt;/span&gt;(fd, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;i, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    M[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; value[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; value[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; value[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// assuming 2 CPUs, will change later
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (M[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      V&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pow&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; E &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.709&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; sum;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (E &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (V &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      E &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; V);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pow&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    E &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pow&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; E &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pow&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%ld&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;lround&lt;/span&gt;(E));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以手动通过 &lt;code&gt;nmap&lt;/code&gt; 测试，例如扫描一个段，可以看到数据会增长许多。如果扫描相同的段，则数字不会变化，但如果扫描新的段，数字会有变化。这是一个 利用了 eBPF 的 HyperLogLog 的实现。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>调整 Nginx 和 PHP 的上传文件大小限制</title>
      <link>https://jia.je/programming/2018/06/10/nginx-php-upload-size-limit/</link>
      <pubDate>Sun, 10 Jun 2018 16:04:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/06/10/nginx-php-upload-size-limit/</guid>
      <description>&lt;p&gt;之前迁移的 MediaWiki，有人提出说无法上传一个 1.4M 的文件。我去看了一下网站，上面写的是限制在 2M，但是一上传就说 Entity Too Large，无法上传。后来经过研究，是 Nginx 对 POST 的大小进行了限制，同时 PHP 也有限制。&lt;/p&gt;
&lt;p&gt;Nginx 的话，可以在 nginx.conf 的 http 中添加，也可以在 server 或者 location 中加入这么一行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;client_max_body_size 100m;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我的建议是，尽量缩小范围到需要的地方，即 location &amp;gt; server &amp;gt; http。&lt;/p&gt;
&lt;p&gt;在 PHP 中，则修改 /etc/php/7.0/fpm/php.ini：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;post_max_size = 100M
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;回到 MediaWiki 的上传页面，可以看到显示的大小限制自动变成了 100M，这个是从 PHP 的配置中直接获得的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>最近写 Node.js 遇到的若干坑</title>
      <link>https://jia.je/programming/2018/06/08/nodejs-experiences/</link>
      <pubDate>Fri, 08 Jun 2018 10:33:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/06/08/nodejs-experiences/</guid>
      <description>&lt;p&gt;最近在做前后端分离，前端在用 Vue.js 逐步重写，后端则变为 api 的形式。同时，我尝试了用 autocannon 和 clinic 工具测试自己的 api endpoint 的性能，一开始发现有几个延迟会特别高，即使是一个很简单的 api 也有不正常的高延迟。&lt;/p&gt;
&lt;p&gt;于是，我用 clinic 生成了 flamegraph，发现了一些问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我在 session 里保存了一些缓存的信息，这部分内容比较大，express-session 在保存到数据库前会先 JSON.stringify 再 crc 判断是否有改变，如果有改变则保存下来。但是由于我的这个对象嵌套层数多，所以时间花得很多。我调整了这个对象的结构，缩小了很多以后，果然这部分快了很多&lt;/li&gt;
&lt;li&gt;有一个 API 需要大量的数据库查询，原本是 O（结点总数）次查询，我考虑到我们数据的结构，改成了 O（深度），果然快了许多&lt;/li&gt;
&lt;li&gt;之前遇到一个小问题，就是即使我没有登录，服务器也会记录 session 并且返回一个 cookie。检查以后发现，是 connect-flash 即使在没有使用的时候，也会往 cookie 中写入一个空的对象，这就导致 express-session 认为需要保存，所以出现了问题。解决方案就是，换成了它的一个 fork：connect-flash-plus，它解决了这个问题&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>在 Nginx 将某个子路径反代</title>
      <link>https://jia.je/devops/2018/06/01/nginx-proxy-subpath/</link>
      <pubDate>Fri, 01 Jun 2018 07:57:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2018/06/01/nginx-proxy-subpath/</guid>
      <description>&lt;p&gt;现在遇到这么一个需求，访问根下面是提供一个服务，访问某个子路径（/abc），则需要提供另一个服务。这两个服务处于不同的机器上，我们现在通过反代把他们合在一起。在配置这个的时候，遇到了一些问题，最后得以解决。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;upstream root {
    server 1.2.3.4:1234;
}
upstream subpath {
    server 4.3.2.1:4321;
}

server {
    listen 443 ssl;
    server_name test.example.com;

    # the last slash is useful, see below
    location /abc/ {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # the last slash is useful too, see below
        proxy_pass http://subpath/;
    }

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://root;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于并不想 subpath 他看到路径中 /abc/ 这一层，导致路径和原来在根下不同，通过这样配置以后，特别是两个末尾的斜杠，可以让 nginx 把 GET /abc/index.html 改写为 GET /index.html，这样我们就可以减少许多配置。当然，我们还是需要修改一下配置，现在是 host 在一个新的域名的一个新的子路径下，这主要是为了在返回的页面中，连接写的是正确的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>向 Nexus 6P 中刷入 LineageOS 实践</title>
      <link>https://jia.je/os/2018/05/29/flashing-lineageos-in-nexus6p/</link>
      <pubDate>Tue, 29 May 2018 07:18:00 +0800</pubDate>
      
      <guid>https://jia.je/os/2018/05/29/flashing-lineageos-in-nexus6p/</guid>
      <description>&lt;p&gt;Nexus 6P 自带的系统没有允许 Root，所以需要自己解锁 bootloader 并且刷上别的系统。我选择了 LineageOS。Nexus 6P 的代号为 angler，首先可以找到官方的&lt;a href=&#34;https://wiki.lineageos.org/devices/angler/install&#34;&gt;安装教程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我们需要下载的东西：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://mirrorbits.lineageos.org/full/angler/20180521/lineage-15.1-20180521-nightly-angler-signed.zip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://mirrorbits.lineageos.org/full/angler/20180521/lineage-15.1-20180521-nightly-angler-signed.zip?sha256 -O lineage-15.1-20180521-nightly-angler-signed.zip.sha256
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://mirrorbits.lineageos.org/su/addonsu-15.1-arm64-signed.zip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://mirrorbits.lineageos.org/su/addonsu-15.1-arm64-signed.zip?sha256 -O addonsu-15.1-arm64-signed.zip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://github.com/opengapps/arm64/releases/download/20180527/open_gapps-arm64-8.1-full-20180527.zip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://github.com/opengapps/arm64/releases/download/20180527/open_gapps-arm64-8.1-full-20180527.zip.md5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://dl.twrp.me/angler/twrp-3.2.1-0-angler.img
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://dl.twrp.me/angler/twrp-3.2.1-0-angler.img.asc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://dl.twrp.me/angler/twrp-3.2.1-0-angler.img.md5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gpg --verify *.asc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ md5sum -c *.md5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sha256sum -c *.sha256
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 Open GApps 可以自己考虑选择 full 还是其它的选择。&lt;/p&gt;
&lt;p&gt;接下来，按照教程，先解锁 bootloader。连接手机，进入 USB Debugging Mode，重启进入 bootloader 并且解锁：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ adb reboot bootloader
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ fastboot flashing unlock
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Confirm unlocking, and then the data should be wiped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来刷入 TWRP。还是进入 bootloader，然后刷入。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ fastboot flash recovery twrp-3.2.1-0-angler.img
# Select recovery, and enter it
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;进入 TWRP 后，把我们刚刚下载的 zip 文件都 push 到手机上，并用 TWRP 安装：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Select Wipe -&amp;gt; Advanced Wipe, Select Cache, System and Data and wipe then
# Install lineageos, opengapps, addonsu and follow on-screen instructions
# Reboot into system
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;经过一段时间的等待，LineageOS 就安装成功了。但是遇到了一些问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开机时提示 vendor image 版本与打包 LineagesOS 时采用的版本不同。
于是我下载了官方的 &lt;a href=&#34;https://dl.google.com/dl/android/aosp/angler-opm2.171019.029.a1-factory-bf17e552.zip&#34;&gt;factory image&lt;/a&gt;，找到其中的 vendor.img，用 TWRP 刷到了 vendor 分区中。并且执行了 flash-bash.sh 更新 bootloader 和 radio。重启的时候这个错误就解决了。2018-06-12 更新 注意：不要下载 Driver Binaries 里面的 vendor, 刷上去系统还是提示版本 mismatch，建议还是下载完整的 factory 镜像。&lt;/li&gt;
&lt;li&gt;检测不到 SIM 卡。
回到 bootloader 看 Barcode, 是有 IMEI 等信息的，说明分区没有被写坏。在网上搜索一段时间以后，发现禁用登录密码重启一次后即可使用，之后把密码加回来即可。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>在 WSL 上开启一个 getty 到串口的方法</title>
      <link>https://jia.je/os/2018/05/25/opening-tty-terminal-in-wsl/</link>
      <pubDate>Fri, 25 May 2018 21:56:00 +0800</pubDate>
      
      <guid>https://jia.je/os/2018/05/25/opening-tty-terminal-in-wsl/</guid>
      <description>&lt;p&gt;为了测试一个硬件的 terminal，想在 Windows 上向串口开一个 tty，跑各种软件来测试。这件事情在 Linux 上和 macOS 上都有实践，但一直不知道 Windows 上怎么搞。经过了一番搜索，找到了 &lt;a href=&#34;https://blogs.msdn.microsoft.com/wsl/2017/04/14/serial-support-on-the-windows-subsystem-for-linux/&#34;&gt;https://blogs.msdn.microsoft.com/wsl/2017/04/14/serial-support-on-the-windows-subsystem-for-linux/&lt;/a&gt; 和 &lt;a href=&#34;https://unix.stackexchange.com/a/123559&#34;&gt;https://unix.stackexchange.com/a/123559&lt;/a&gt; 的方案。&lt;/p&gt;
&lt;p&gt;以 COM5 为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;666&lt;/span&gt; /dev/ttyS5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo agetty -s &lt;span style=&#34;color:#ae81ff&#34;&gt;115200&lt;/span&gt; ttyS5 linux
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以看到一个登录的界面了。&lt;/p&gt;
&lt;p&gt;在 macOS 上 (&lt;a href=&#34;https://superuser.com/questions/1059744/serial-console-login-on-osx&#34;&gt;https://superuser.com/questions/1059744/serial-console-login-on-osx&lt;/a&gt;)：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ screen /dev/tty.SLAB_USBtoUART &lt;span style=&#34;color:#ae81ff&#34;&gt;115200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# type C-b : exec ::: /usr/libexec/getty std.115200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>体验 Fedora on RISCV</title>
      <link>https://jia.je/os/2018/05/24/trying-fedora-on-riscv/</link>
      <pubDate>Thu, 24 May 2018 23:40:00 +0800</pubDate>
      
      <guid>https://jia.je/os/2018/05/24/trying-fedora-on-riscv/</guid>
      <description>&lt;p&gt;看到 RISCV 很久了，但一直没能体验。最近工具链不断更新，QEMU 在 2.12.0 也正式加入了 riscv 的模拟。但是自己编译一个内核又太麻烦，就找到了 Fedora 做的 RISCV port，下载下来试用了一下。之前试过一次，但是遇到了一些问题，刚才总算是成功地搞出来了。&lt;/p&gt;
&lt;p&gt;官方文档地址：https://fedorapeople.org/groups/risc-v/disk-images/readme.txt
首先下载 &lt;a href=&#34;https://fedorapeople.org/groups/risc-v/disk-images/&#34;&gt;https://fedorapeople.org/groups/risc-v/disk-images/&lt;/a&gt; 下的 bbl vmlinux 和 stage4-disk.img.xz 三个文件，然后解压 stage4-disk.img.xz，大约有 5G 的样子。之前作者在脚本里作死开得特别大，导致我以前光是解压这一步就成功不了。现在终于解决了。&lt;/p&gt;
&lt;p&gt;然后启动 qemu 命令打开虚拟机：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-system-riscv64 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -nographic &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -machine virt &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -m 2G &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -kernel bbl &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -object rng-random,filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/dev/urandom,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rng0 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -device virtio-rng-device,rng&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rng0 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -append &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;console=ttyS0 ro root=/dev/vda&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -device virtio-blk-device,drive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hd0 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;stage4-disk.img,format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;raw,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hd0 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -device virtio-net-device,netdev&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;usernet &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -netdev user,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;usernet,hostfwd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tcp::10000-:22
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段命令摘自 readme.txt，区别只在于把 -smp 4 去掉了。不知道为什么不能正常工作，可能和作者提到的 FPU patch 有关。然后系统就可以正常起来了（firewalld 和 systemd-logind 不止为啥起不来，但是不用管）。&lt;/p&gt;
&lt;p&gt;可以验证一下我们的系统：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ uname -a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Linux stage4.fedoraproject.org 4.15.0-00046-g48fb45691946 &lt;span style=&#34;color:#75715e&#34;&gt;#27 SMP Mon May 14 08:25:14 UTC 2018 riscv64 riscv64 riscv64 GNU/Linux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>在 VMware ESXi 上部署 vCSA 实践</title>
      <link>https://jia.je/devops/2018/05/20/deploy-vcsa-under-esxi/</link>
      <pubDate>Sun, 20 May 2018 16:44:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2018/05/20/deploy-vcsa-under-esxi/</guid>
      <description>&lt;p&gt;首先获取 vCSA 的 ISO 镜像，挂载到 Linux 下（如 /mnt），然后找到 /mnt/vcsa-cli-installer/templates/install 下的 embedded_vCSA_on_ESXi.json，复制到其它目录并且修改必要的字段，第一个 &lt;code&gt;password&lt;/code&gt; 为 ESXi 的登录密码，一会在安装的过程中再输入。下面有个 deployment_option，根据你的集群大小来选择，我则是用的 small。下面配置这台机器的 IP 地址，用内网地址即可。下面的 system_name 如果要写 fqdn，记得要让这个域名可以解析到正确的地址，不然会安装失败，我因此重装了一次。下面的密码都可以留空，在命令行中输入即可。SSO 为 vSphere Client 登录时用的密码和域名，默认用户名为 Administrator@domain_name (默认的话，则是 &lt;a href=&#34;mailto:Administrator@vsphere.local&#34;&gt;Administrator@vsphere.local&lt;/a&gt;) 这个用户名在安装结束的时候也会提示。下面的 CEIP 我选择关闭，设置为 false。&lt;/p&gt;
&lt;p&gt;接下来进行安装。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ /mnt/vcsa-cli-installer/lin64/vcsa-deploy install /path/to/embedded_vCSA_on_ESXi.json --accept-eula
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一路输入密码，等待安装完毕即可。然后通过 443 端口进入 vSphere Client, 通过 5480 端口访问 vCSA 的管理页面。两个的密码可以不一样。&lt;/p&gt;
&lt;p&gt;2018-05-21 Update: 想要设置 VMKernel 的 IPv6 网关的话，ESXi 中没找到配置的地方，但是在 vSphere Client 中可以进行相关配置。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在脚本中寻找 X11 的 DISPLAY 和 XAUTHORITY</title>
      <link>https://jia.je/programming/2018/05/11/finding-x11-display-and-xauthority/</link>
      <pubDate>Fri, 11 May 2018 14:21:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/05/11/finding-x11-display-and-xauthority/</guid>
      <description>&lt;p&gt;之前在搞一个小工具，在里面需要访问 X11 server，但是访问 X11 server 我们需要两个东西：DISPLAY 和 XAUTHORITY 两个环境变量。但是，由于它们在不同的发型版和 Display Manager 下都有些不同，所以花了不少功夫才写了一些。&lt;/p&gt;
&lt;p&gt;为了验证我们是否可以连上 X11 server，我们使用这一句：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DIMENSIONS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;xdpyinfo | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dimensions:&amp;#39;&lt;/span&gt; | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $2;exit}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它尝试打开当前的 DISPLAY，并且输出它的分辨率。接下来，我对不同的一些发型版，综合网上的方法，尝试去找到正确的环境变量。&lt;/p&gt;
&lt;p&gt;对于 Debian:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DISPLAY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;w -hs | awk -v tty&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;cat /sys/class/tty/tty0/active&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$2 == tty &amp;amp;&amp;amp; $3 != &amp;#34;-&amp;#34; {print $3; exit}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;USER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;w -hs | awk -v tty&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;cat /sys/class/tty/tty0/active&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$2 == tty &amp;amp;&amp;amp; $3 != &amp;#34;-&amp;#34; {print $1; exit}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eval XAUTHORITY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~$USER/.Xauthority
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export DISPLAY
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export XAUTHORITY
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DIMENSIONS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;xdpyinfo | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dimensions:&amp;#39;&lt;/span&gt; | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $2;exit}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于 Archlinux：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DISPLAY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;w -hs | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;match($2, /:[0-9]+/) {print $2; exit}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;USER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;w -hs | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;match($2, /:[0-9]+/) {print $1; exit}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eval XAUTHORITY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/run/user/&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;id -u $USER&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/gdm/Xauthority
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export DISPLAY
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export XAUTHORITY
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DIMENSIONS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;xdpyinfo | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dimensions:&amp;#39;&lt;/span&gt; | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $2;exit}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后一种情况很粗暴的，直接找进程拿：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;XAUTHORITY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ps a | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;match($0, /Xorg/) {print $0; exit}&amp;#39;&lt;/span&gt; | perl -n -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/Xorg.*\s-auth\s([^\s]+)\s/ &amp;amp;&amp;amp; print $1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ps a | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;match($0, /Xorg/) {print $1; exit}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DISPLAY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;lsof -p $PID | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;match($9, /^\/tmp\/\.X11-unix\/X[0-9]+$/) {sub(&amp;#34;/tmp/.X11-unix/X&amp;#34;,&amp;#34;:&amp;#34;,$9); print $9; exit}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export DISPLAY
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export XAUTHORITY
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DIMENSIONS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;xdpyinfo | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dimensions:&amp;#39;&lt;/span&gt; | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $2;exit}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;中间混用了大量的 awk perl 代码，就差 sed 了。牺牲了一点可读性，但是开发起来比较轻松。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 macOS 和 Linux 之间搭建 tinc 网络</title>
      <link>https://jia.je/networking/2018/05/09/tinc-between-macos-and-linux/</link>
      <pubDate>Wed, 09 May 2018 10:02:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/05/09/tinc-between-macos-and-linux/</guid>
      <description>&lt;p&gt;一直听说 tinc 比较科学，所以尝试自己用 tinc 搭建一个网络。这里，macOS 这段没有固定 IP 地址，Linux 机器有固定 IP 地址 linux_ip。假设网络名称为 example , macOS 端名为 macos 地址为 192.168.0.2, linux 端名为 linux 地址为 192.168.0.1。&lt;/p&gt;
&lt;p&gt;2018-11-11 注：本文用的 tinc 版本为 1.0.x，而不是 1.1-pre，两个分支命令不同，但协议可以兼容。&lt;/p&gt;
&lt;p&gt;在 macOS 上配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install tinc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p /usr/local/etc/tinc/example
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新建 /usr/local/etc/tinc/example/tinc.conf:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Name = macos
Device = utun0 # use an unused number
ConnectTo = linux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编辑 /usr/local/etc/tinc/example/tinc-up:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh
ifconfig $INTERFACE 192.168.0.2 192.168.0.1 mtu 1500 netmask 255.255.255.255
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;和 /usr/local/etc/tinc/example/tinc-down:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh
ifconfig $INTERFACE down
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还有 /usr/local/etc/tinc/example/subnet-up:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh
[ &amp;#34;$NAME&amp;#34; = &amp;#34;$NODE&amp;#34; ] &amp;amp;&amp;amp; exit 0
/usr/local/opt/iproute2mac/bin/ip route add $SUBNET dev $INTERFACE
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以及 /usr/local/etc/tinc/example/subnet-down:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh
[ &amp;#34;$NAME&amp;#34; = &amp;#34;$NODE&amp;#34; ] &amp;amp;&amp;amp; exit 0
/usr/local/opt/iproute2mac/bin/ip route del $SUBNET dev $INTERFACE
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后将它们都设为可执行的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chmod +x tinc-up
chmod +x tinc-down
chmod +x subnet-down
chmod +x subnet-down
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编辑 /usr/local/etc/tinc/example/macos:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Port = 655
Subnet = 192.168.0.1/24
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行 &lt;code&gt;tincd -n example -K&lt;/code&gt; 生成密钥。&lt;/p&gt;
&lt;p&gt;到 Linux 机器上：
编辑以下文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir -p /etc/tinc/example/hosts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat /etc/tinc/example/tinc.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; linux
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat /etc/tinc/example/tinc-up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip link set $INTERFACE up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip addr add 192.168.0.1/24 dev $INTERFACE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat /etc/tinc/example/tinc-down
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip addr del 192.168.0.1/24 dev $INTERFACE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip link set $INTERFACE down
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat /etc/tinc/example/hosts/linux
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; linux_ip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;655&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Subnet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 192.168.0.1/24
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tincd -n example -K
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着，把 linux 上 /etc/tinc/example/hosts/linux 拷贝到 macos 的 /usr/local/etc/tinc/example/hosts/linux，然后把 macos 上 /usr/local/etc/tinc/example/hosts/macos 拷贝到 /etc/tinc/example/hosts/macos。在两台机器上都 &lt;code&gt;tinc -n example -D -d3&lt;/code&gt; 即可看到连接的建立，通过 ping 即可验证网络建立成功。&lt;/p&gt;
&lt;p&gt;2018-05-29 Update: Android 上，利用 Tinc GUI 也可以把 Tinc 运行起来，只是配置不大一样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat tinc.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; example
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Device &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; /dev/tun
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Mode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; switch
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ConnectTo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ScriptsInterpreter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; /system/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat tinc-up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip link set $INTERFACE up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip addr add local_ip/24 dev $INTERFACE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat tinc-down
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip addr del local_ip/24 dev $INTERFACE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip link set $INTERFACE down
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat subnet-up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$NAME&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$NODE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; exit &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip route add $SUBNET dev $INTERFACE metric $WEIGHT table local
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat subnet-down
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$NAME&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$NODE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; exit &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip route del $SUBNET dev $INTERFACE table local
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意 table local 的使用。需要 Root。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Nginx 转发 VMware ESXi</title>
      <link>https://jia.je/networking/2018/05/08/nginx-proxy-vmware-esxi/</link>
      <pubDate>Tue, 08 May 2018 19:26:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/05/08/nginx-proxy-vmware-esxi/</guid>
      <description>&lt;p&gt;我们的 VMware ESXi 在一台 NAT Router 之后，但是我们希望通过域名可以直接访问 VMware ESXi。我们首先的尝试是，把 8443 转发到它的 443 端口，比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;socat TCP-LISTEN:8443,reuseaddr,fork TCP:esxi_addr:443
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它能工作地很好（假的，如果你把 8443 换成 9443 它就不工作了），但是，我们想要的是，直接通过 esxi.example.org 就可以访问它。于是，我们需要 Nginx 在其中做一个转发的功能。在这个过程中遇到了很多的坑，最后终于是做好了（VMware Remote Console 等功能还不行，需要继续研究）。&lt;/p&gt;
&lt;p&gt;首先讲讲为啥把 8443 换成 9443 不能工作吧 &amp;ndash; 很简单，ESXi 的网页界面会请求 8443 端口。只是恰好我用 8443 转发到 443，所以可以正常工作。这个很迷，但是测试的结果确实如此。VMware Remote Console 还用到了别的端口，我还在研究之中。&lt;/p&gt;
&lt;p&gt;来谈谈怎么配置这个 Nginx 转发吧。首先是 80 跳转 443:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;server {
        listen 80;
        listen 8080;
        server_name esxi.example.org;

        return 301 https://$host$request_uri;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个很简单，接下来是转发 443 端口：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
server {
        listen 443 ssl;
        server_name esxi.example.org;
        ssl_certificate /path/to/ssl/cert.pem;
        ssl_certificate_key /path/to/ssl/key.pem;

        location / {
                proxy_pass https://esxi_addr;
                proxy_ssl_verify off;
                proxy_ssl_session_reuse on;
                proxy_set_header Host $http_host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时，打开 &lt;a href=&#34;https://esxi.example.org&#34;&gt;https://esxi.example.org&lt;/a&gt; 就能看到登录界面了。但是仍然无法登录。从 DevTools 看错误，发现它请求了 8443 端口。于是进行转发：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;server {
        listen 8443 ssl;
        server_name esxi.example.org;
        ssl_certificate /path/to/ssl/cert.pem;
        ssl_certificate_key /path/to/ssl/key.pem;


        location / {
                if ($request_method = &amp;#39;OPTIONS&amp;#39;) {
                        add_header &amp;#39;Access-Control-Allow-Origin&amp;#39; &amp;#39;https://esxi.example.org&amp;#39;;
                        add_header &amp;#39;Access-Control-Allow-Credentials&amp;#39; &amp;#39;true&amp;#39;;
                        add_header &amp;#39;Access-Control-Allow-Methods&amp;#39; &amp;#39;GET, POST, OPTIONS&amp;#39;;
                        add_header &amp;#39;Access-Control-Max-Age&amp;#39; 1728000;
                        add_header &amp;#39;Access-Control-Allow-Headers&amp;#39; &amp;#39;VMware-CSRF-Token,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Cookie,SOAPAction&amp;#39;;
                        add_header &amp;#39;Content-Type&amp;#39; &amp;#39;text/plain; charset=utf-8&amp;#39;;
                        add_header &amp;#39;Content-Length&amp;#39; 0;
                        return 204;
                }

                add_header &amp;#39;Access-Control-Allow-Origin&amp;#39; &amp;#39;https://esxi.example.org&amp;#39;;
                add_header &amp;#39;Access-Control-Allow-Credentials&amp;#39; &amp;#39;true&amp;#39;;
                proxy_pass https://esxi_addr:443;
                proxy_ssl_verify off;
                proxy_ssl_session_reuse on;
                proxy_set_header Host $http_host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主要麻烦的是配置 CORS 的相关策略。我也是看了 DevTools 的错误提示半天才慢慢写出来的。这样配置以后，就可以成功登录 VMware ESXi 了。&lt;/p&gt;
&lt;p&gt;20:02 更新：现在做了 WebSocket 转发，目前可以在浏览器中打开 Web Console 了。但是，在访问 &lt;a href=&#34;https://esxi.example.org/&#34;&gt;https://esxi.example.org/&lt;/a&gt; 的时候还是会出现一些问题，然而 &lt;a href=&#34;https://esxi.example.org:8443/&#34;&gt;https://esxi.example.org:8443/&lt;/a&gt; 是好的。&lt;/p&gt;
&lt;p&gt;转发 WebSocket：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;map $http_upgrade $connection_upgrade {
        default upgrade;
        &amp;#39;&amp;#39;      close;
}

server {
        listen 8443 ssl;
        server_name esxi.example.org;
        ssl_certificate /path/to/ssl/cert.pem;
        ssl_certificate_key /path/to/ssl/key.pem;


        location / {

                if ($request_method = &amp;#39;OPTIONS&amp;#39;) {
                        add_header &amp;#39;Access-Control-Allow-Origin&amp;#39; &amp;#39;https://esxi.example.org&amp;#39;;
                        add_header &amp;#39;Access-Control-Allow-Credentials&amp;#39; &amp;#39;true&amp;#39;;
                        add_header &amp;#39;Access-Control-Allow-Methods&amp;#39; &amp;#39;GET, POST, OPTIONS&amp;#39;;
                        add_header &amp;#39;Access-Control-Max-Age&amp;#39; 1728000;
                        add_header &amp;#39;Access-Control-Allow-Headers&amp;#39; &amp;#39;VMware-CSRF-Token,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Cookie,SOAPAction&amp;#39;;
                        add_header &amp;#39;Content-Type&amp;#39; &amp;#39;text/plain; charset=utf-8&amp;#39;;
                        add_header &amp;#39;Content-Length&amp;#39; 0;
                        return 204;
                }

                add_header &amp;#39;Access-Control-Allow-Origin&amp;#39; &amp;#39;https://esxi.example.org&amp;#39; always;
                add_header &amp;#39;Access-Control-Allow-Credentials&amp;#39; &amp;#39;true&amp;#39; always;

                proxy_pass https://esxi_addr:443;
                proxy_ssl_verify off;
                proxy_ssl_session_reuse on;
                proxy_set_header Host $http_host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;20:29 更新：找到了 VMware Remote Console 的端口：902，用 iptables 进行 DNAT 即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -A PREROUTING -i wan_interface -p tcp -m tcp --dport &lt;span style=&#34;color:#ae81ff&#34;&gt;902&lt;/span&gt; -j DNAT --to-destination esxi_addr:902
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2018-05-09 08:07 更新：最后发现，还是直接隧道到内网访问 ESXi 最科学。或者，让 443 重定向到 8443：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;server {
        listen 443 ssl;
        server_name esxi.example.org;
        ssl_certificate /path/to/ssl/cert.pem;
        ssl_certificate_key /path/to/ssl/key.pem;

        return 301 https://$host:8443$request_uri;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样，前面也不用写那么多 CORS 的东西了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>搭建 FTP server behind NAT</title>
      <link>https://jia.je/networking/2018/05/08/ftp-behind-nat/</link>
      <pubDate>Tue, 08 May 2018 13:34:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/05/08/ftp-behind-nat/</guid>
      <description>&lt;p&gt;我们出现新的需求，要把以前的 FTP 服务器迁移到 NAT 之后的一台机器上。但是，FTP 不仅用到 20 21 端口，PASV 还会用到高端口，这给端口转发带来了一些麻烦。我们一开始测试，直接在 Router 上转发 20 和 21 端口到 Server 上。但是很快发现，Filezilla 通过 PASV 获取到地址为（内网地址，端口高 8 位，端口低 8 位），然后，Filezilla 检测出这个地址是内网地址，于是转而向 router_ip:port 发包，这自然是不会得到结果的。&lt;/p&gt;
&lt;p&gt;此时我们去网上找了找资料，找到了一个很粗暴的方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -A PREROUTING -i external_interface -p tcp -m tcp --dport &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; -j DNAT --to-destination internal_ip:20
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -A PREROUTING -i external_interface -p tcp -m tcp --dport &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; -j DNAT --to-destination internal_ip:21
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -A PREROUTING -i external_interface -p tcp -m tcp --dport 1024:65535 -j DNAT --to-destination internal_ip:1024-65535
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有趣地是，macOS 自带的 ftp 命令（High Sierra 似乎已经删去）可以正常使用。研究发现，它用 EPSV（Extended Passive Mode）代替 PASV，这里并没有写内网地址，因而可以正常使用。&lt;/p&gt;
&lt;p&gt;这么做，Filezilla 可以成功访问了。但是，用其它客户端的时候，它会直连那个内网地址而不是 Router 的地址，于是还是连不上。而且，使用了 1024-65535 的所有端口，这个太浪费而且会影响我们其它的服务。&lt;/p&gt;
&lt;p&gt;我们开始研究我们 FTP 服务器 (pyftpdlib) 的配置。果然，找到了适用于 FTP behind NAT 的相关配置：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;     - (str) masquerade_address:
        the &amp;#34;masqueraded&amp;#34; IP address to provide along PASV reply when
        pyftpdlib is running behind a NAT or other types of gateways.
        When configured pyftpdlib will hide its local address and
        instead use the public address of your NAT (default None).
     - (dict) masquerade_address_map:
        in case the server has multiple IP addresses which are all
        behind a NAT router, you may wish to specify individual
        masquerade_addresses for each of them. The map expects a
        dictionary containing private IP addresses as keys, and their
        corresponding public (masquerade) addresses as values.
     - (list) passive_ports:
        what ports the ftpd will use for its passive data transfers.
        Value expected is a list of integers (e.g. range(60000, 65535)).
        When configured pyftpdlib will no longer use kernel-assigned
        random ports (default None).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;于是，我们配置了 &lt;code&gt;masquerade_address&lt;/code&gt; 使得 FTP 服务器会在 PASV 中返回 Router 的地址，并且在 &lt;code&gt;passive_ports&lt;/code&gt; 中缩小了 &lt;code&gt;pyftpdlib&lt;/code&gt; 使用的端口范围。&lt;/p&gt;
&lt;p&gt;进行配置以后，我们在前述的 iptables 命令中相应修改了端口范围，现在工作一切正常。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 iptables 和策略路由进行带源地址的 forwarding</title>
      <link>https://jia.je/networking/2018/05/06/nat-forwarding-with-src-address/</link>
      <pubDate>Sun, 06 May 2018 14:07:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/05/06/nat-forwarding-with-src-address/</guid>
      <description>&lt;p&gt;陈老师打开他的服务器，突然发现 CPU 莫名高负载，然后发现是有一个用户被远程登录拿来挖矿了。但是这台机器在 NAT 后，所以登录的源地址全是 NAT 路由，所以不知道对方的地址是什么。我们为了能使用 fail2ban 来禁用多次尝试失败的 IP，但又不想因为别人把 NAT 路由的地址给禁了，这样我们自己也用不了了。所以必须要让这台机器能够知道 ssh 的源地址，我们现在简单的 socat 方案不能满足这个需求。&lt;/p&gt;
&lt;p&gt;需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以在外网连 NAT 路由的高端口（如 2222）来访问这台机器。&lt;/li&gt;
&lt;li&gt;在内网中，既可以直接连它的内网地址，也可以连 NAT 路由的高端口来访问这台服务器。此时，由于连 ssh 的机器就在同一个子网中，如果保留了源地址，服务器发的包会直接回来不经过 NAT。所以我们还是保留了 socat 的方案。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实现方法：&lt;/p&gt;
&lt;p&gt;在 NAT Router 上配置 DNAT，这样发到 NAT Router 上的包就可以转发到服务器上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -t nat -A PREROUTING -i external_interface -p tcp -m tcp --dport &lt;span style=&#34;color:#ae81ff&#34;&gt;2222&lt;/span&gt; -j DNAT --to-destination internal_server_ip:22
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是，从服务器回来的包到了 NAT Router 上后，由于路由表的配置问题，默认的路由并不能把包送达对方。&lt;/p&gt;
&lt;p&gt;方法 1:
我们首先给包打上 mark：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -t mangle -A PREROUTING -i internal_interface -p tcp -m tcp --sport &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; -j MARK --set-mark 0x2222
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后配置策略路由：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip rule add fwmark 0x2222 table &lt;span style=&#34;color:#ae81ff&#34;&gt;2222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip route add table &lt;span style=&#34;color:#ae81ff&#34;&gt;2222&lt;/span&gt; default via gateway_address
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;方法 2: (UPD 2018-07-07)
利用 &lt;code&gt;ip rule&lt;/code&gt; 直接达成同样的效果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip rule add from internal_ip/prefix table &lt;span style=&#34;color:#ae81ff&#34;&gt;2222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip rule add iif internal_interface table &lt;span style=&#34;color:#ae81ff&#34;&gt;2222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip route add table &lt;span style=&#34;color:#ae81ff&#34;&gt;2222&lt;/span&gt; default via gateway_address
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以保证 ssh 的回包可以原路返回了。&lt;/p&gt;
&lt;p&gt;由于前面提到的原因，上面我们配置的 DNAT 规则只对外网过来的包有效。为了内网的访问，我们仍然采用了 socat 的方式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;socat TCP-LISTEN:2222,reuseaddr,fork TCP:internal_server_ip:22
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从不同的机器测试，都可以在 &lt;code&gt;who&lt;/code&gt; 看到，地址确实是我们想看到的源地址。接下来配置 &lt;code&gt;fail2ban &lt;/code&gt;即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>利用 UPnP 协议进行 mosh NAT 穿透的研究</title>
      <link>https://jia.je/networking/2018/05/05/mosh-behind-nat-with-upnp/</link>
      <pubDate>Sat, 05 May 2018 20:25:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/05/05/mosh-behind-nat-with-upnp/</guid>
      <description>&lt;p&gt;由于经常要从宿舍、教室等不同的 Wi-Fi 之间切换，但是 ssh 连接又总是断，所以想用 mosh 代替 ssh。但是 mosh 也有它的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不能滚动。这个可以在 mosh 中嵌套一层 tmux 解决。我目前写了一些自动 mosh 后打开 tmux 并且开启鼠标支持的脚本，但还是有缺陷。&lt;/li&gt;
&lt;li&gt;在高端口 60000+ 监听 UDP，这使得 NAT 后的服务器难以直接通过端口转发。如果直接转发到 NAT 后的机器，那么 NAT 后面如果有多台机器，这又失效了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;于是找了找网上的 NAT 穿透的一些文章，看到了 UPnP 的方法。大致就是，用户可以向路由器注册一个临时的转发规则，路由会自动在 iptables 上配置转发。但是，这样也会遇到一个问题：路由上的 mosh-server 不知道这个转发的存在，所以它可能会尝试监听同样的端口。解决方案下面会提到。&lt;/p&gt;
&lt;p&gt;需求：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Server &amp;lt;---&amp;gt; NAT Router &amp;lt;---&amp;gt; My Laptop
On NAT Router, port 8022 is forwarded to Server:22
1. mosh router # works
2. mosh --ssh=&amp;#34;ssh -p 8022&amp;#34; router # works
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先在 NAT Router 上配置 miniupnpd（以 Debian 为例）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install miniupnpd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# you will get a dialog upon installation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# input your wan interface and listening ip accordingly&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo vim /etc/default/miniupnpd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# edit START_DAEMON=0 to START_DAEMON=1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo vim /etc/miniupnpd/miniupnpd.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# edit ext_ifname, listening_ip accordingly&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# set secure_mode=yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# add &amp;#39;allow 60000-60023 internal_ip/prefix 60000-60023&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# before the last line &amp;#39;deny 0-65535 0.0.0.0/0 0-65535&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl enable --now miniupnpd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，复制 &lt;a href=&#34;https://github.com/jiegec/mosh-upnp-hole-puncher/blob/master/mosh-wrapper.js&#34;&gt;我修改的 mosh-wrapper.js&lt;/a&gt; 到用户的 home 目录下，在 Server 安装 &lt;code&gt;miniupnpc&lt;/code&gt; 然后通过：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mosh --ssh&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ssh -p 8022&amp;#34;&lt;/span&gt; --server&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~/mosh-wrapper.js user@router
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样，mosh 首先会通过 ssh 和 Server 协商一个 AES 的密钥和 UDP 端口（如 60001），之后的通信都通过 UDP 端口走加密后的流量。我的 &lt;code&gt;mosh-wrapper.js&lt;/code&gt; 通过 &lt;code&gt;miniupnpc&lt;/code&gt; 向路由器请求把该 UDP 端口转发到 Server 上，这样， &lt;code&gt;mosh-server&lt;/code&gt; 就能通过 NAT 路由穿透到后面的 Server 上。&lt;/p&gt;
&lt;p&gt;等会！问题来了：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mosh&lt;/code&gt; 默认的 IP 范围是 &lt;code&gt;60000-61000&lt;/code&gt; ，根据我的观察，它会从 60001 开始尝试监听本机地址，如果已经被占用，则 60002, 60003, &amp;hellip; 但是！Router 和 Server 实际上占用了相同的端口空间，并且 &lt;code&gt;mosh&lt;/code&gt; 只知道本机哪些端口被占用了，而不知道 Router 和 Server 共同占用了多少端口。&lt;/p&gt;
&lt;p&gt;我想到了一些可能的解决方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 Router 上让 miniupnpd 监听对应的端口，占住这个坑。这样，Router 上的 &lt;code&gt;mosh-server&lt;/code&gt; 就不会用和 Server 相同的端口&lt;/li&gt;
&lt;li&gt;如果有多个 Server，则会出现抢夺相同端口的情况。我目前的想法是，让 &lt;code&gt;upnpc&lt;/code&gt; 去询问 Router 找空闲的端口，然后再传给 &lt;code&gt;mosh-server&lt;/code&gt; 使用。另一种方法则是，给不同的 Server 划分不同的端口范围，比如 Router 用 60001-60005, 然后 Server1 用 60006-60010, Server2 用 60011-60015 如此下去。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后，新的问题又发现了：&lt;/p&gt;
&lt;p&gt;当我在和 Server 同一个子网的时候，由于 &lt;code&gt;miniupnpd&lt;/code&gt; 配置的 &lt;code&gt;iptables&lt;/code&gt; 规则中来源只有 WAN interface，所以我在内网发的包是不会被转发的。当然，既然在内网了，为啥不直接用内网 IP 呢，不知道 &lt;code&gt;mosh&lt;/code&gt; 有没有提供设置备用 IP 的功能。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 Archlinux 上用 winbind 配合 pam 配置 Windows AD 认证登录</title>
      <link>https://jia.je/system/2018/05/05/windows-ad-linux-pam/</link>
      <pubDate>Sat, 05 May 2018 15:39:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2018/05/05/windows-ad-linux-pam/</guid>
      <description>&lt;p&gt;作为不清真的网络管理员，为了配置一套完整的统一认证系统，陈老师采用了 Windows AD 的方法给这里配置统一认证。重装了系统，自然要把之前的统一认证再配到新装的 Archlinux 上。&lt;/p&gt;
&lt;p&gt;参考资料： &lt;a href=&#34;https://wiki.archlinux.org/index.php/Active_Directory_Integration&#34;&gt;Active Directory Integration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先安装相应的包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pacman -S samba
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们还没有配好 Kerberos，所以跳过。&lt;/p&gt;
&lt;p&gt;然后配置 /etc/samba/smb.conf，以下是一个例子。可以根据文档微调。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[global]
        security = ads
        realm = YOUR-AD-HERE
        workgroup = YOUR-GROUP-HERE
        idmap uid = 10000-20000
        idmap gid = 10000-20000
        winbind enum users = yes
        winbind enum groups = yes
        template homedir = /home/%D/%U
        template shell = /bin/bash
        client use spnego = yes
        client ntlmv2 auth = yes
        encrypt passwords = yes
        winbind use default domain = yes
        restrict anonymous = 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样，域上的用户 user 会拿到 home 目录为 /home/YOUR-DOMAIN-HERE/user，uid 在 10000-2000 范围内的用户。在一会经过配置之后，可以通过 &lt;code&gt;getent passwd&lt;/code&gt; 验证。&lt;/p&gt;
&lt;p&gt;接下来，需要把本机的 samba 登入到域的管理员，并且启动服务。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;net ads join -U your-user-name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl enable --now smb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl enable --now nmb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl enable --now winbind
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更改 /etc/nsswitch.conf，在 passwd, shadow 和 group 都增添 winbind：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;passwd: files mymachines systemd winbind
group: files mymachines systemd winbind
shadow: files winbind
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来，可以进一步验证配置是否正确：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wbinfo -u
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wbinfo -g
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getent passwd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getent group
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;net ads info
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;net ads lookup
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来可以配置 PAM 了。这一部分踩到了一些坑，现在终于做得差不多了。&lt;/p&gt;
&lt;p&gt;需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果一个用户名既有本地用户也有域上的用户，选择前者&lt;/li&gt;
&lt;li&gt;用户要修改密码的话，如果是域用户，则要求走 Windows AD 那套方法改密码；否则仅修改本地用户密码。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实现：&lt;/p&gt;
&lt;p&gt;修改 /etc/pam.d/system-auth:&lt;/p&gt;
&lt;p&gt;第一部分：auth&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;auth [success=1 default=ignore]         pam_localuser.so
auth [success=2 default=die]            pam_winbind.so krb5_auth krb5_ccache_type=FILE cached_login try_first_pass
auth [success=1 default=die]            pam_unix.so nullok_secure
auth requisite                          pam_deny.so
auth optional                           pam_permit.so
auth required                           pam_env.so
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先利用 pam_localuser.so 匹配用户名和 &lt;code&gt;/etc/passwd&lt;/code&gt; ，如果有， &lt;code&gt;success=1&lt;/code&gt; 代表跳过下面一条规则，故会跳到 pam_unix.so 这一行。如果失败，&lt;code&gt;default=ignore&lt;/code&gt; 表示忽略它的结果。如果是本地用户，匹配 pam_localuser.so 成功后跳到 pam_unix.so，如果成功了则跳到第五行，pam_permit.so 代表通过，最后由 pam_env.so 配置环境变量。如果是域用户，则由 pam_winbind.so 处理，如果成功，同样跳到第 5 条。如果本地用户和域用户都失败，就 pam_deny.so 认证失败。&lt;/p&gt;
&lt;p&gt;第二部分：account&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;account required                        pam_unix.so
account [success=1 default=ignore]      pam_localuser.so
account required                        pam_winbind.so
account optional                        pam_permit.so
account required                        pam_time.so
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这一部分仍有疑问。留待以后来补充。&lt;/p&gt;
&lt;p&gt;第三部分：password&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;password [success=1 default=ignore]     pam_localuser.so
password [default=die]                  pam_echo.so file=/etc/pam.d/messages/ad_reject_change_passwd.txt
password optional                       pam_echo.so file=/etc/pam.d/messages/local_user_passwd.txt
password [success=1 default=die]        pam_unix.so sha512 shadow
password requisite                      pam_deny.so
password optional                       pam_permit.so
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里实现了我们的需求：如果是本地用户，提醒用户当前要修改的是本地用户的密码；如果是域用户，则输出信息后直接拒绝。&lt;/p&gt;
&lt;p&gt;这里的 /etc/pam.d/messages/ad_reject_change_passwd.txt 内容如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Hi %u, please go to xxxxxxx to change your Active Directory password!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第四部分：session&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-int&#34; data-lang=&#34;int&#34;&gt;session   required                      pam_limits.so
session   required                      pam_mkhomedir.so skel=/etc/skel/ umask=0022
session   required                      pam_unix.so
session   [success=1 default=ignore]    pam_localuser.so
session   required                      pam_winbind.so
session   optional                      pam_permit.so
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里与 Wiki 上内容无异。&lt;/p&gt;
&lt;p&gt;然后修改 /etc/pam.d/passwd :&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;password        required        pam_cracklib.so difok=2 minlen=8 dcredit=2 ocredit=2 retry=3
password        include         system-auth
#password       requisite       pam_deny.so
#password       required        pam_unix.so sha512 shadow nullok
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先判断密码强度。通过后则直接用刚才更改的 system-auth 中的 password 部分规则。&lt;/p&gt;
&lt;p&gt;这样就配好了认证。自己对这套东西的理解还不够深，以后遇到了要继续钻研。&lt;/p&gt;
&lt;p&gt;扩展阅读： &lt;a href=&#34;https://innull.com/pam-configuration-how-to/&#34;&gt;PAM 配置简介 - 王邈&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在服务器上安装 Archlinux 记录</title>
      <link>https://jia.je/system/2018/05/01/installing-arch-experience/</link>
      <pubDate>Tue, 01 May 2018 16:46:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2018/05/01/installing-arch-experience/</guid>
      <description>&lt;p&gt;有一台服务器的 Ubuntu 挂了，我们想在上面重装一个 Archlinux。我们首先下载了 archlinux-2018.04.01 的 ISO, 直接 dd 到 U 盘上，但是遇到了问题。&lt;/p&gt;
&lt;p&gt;首先遇到的问题是，一启动之后就会花屏。我们一开始怀疑是 NVIDIA 驱动的问题，于是想改 kernel param 但是发现，这个 ISO 是 hybrid 的，我们在 macOS 和 Windows 上都不能 mount 上这种类型的盘。于是我们选择自己搞分区表。我们把 U 盘插到电脑上，然后在 Linux 虚拟机内重新分区为 GPT，然后 mount 到 /mnt/usb，再重新下载 archlinux iso，不过此时刚好上游更新了 archlinux-2018.05.01 的影响。我们把 ISO 中根分区 mount 到 /mnt/iso 上来，然后 &lt;code&gt;cp -a /mnt/iso/* /mnt/usb&lt;/code&gt; 。调整了 grub 中的内核参数，仍然无果。我们认为问题可能在显卡上，就把那张显卡拔下来了，果然显示就正常了，但是新的问题就来了。&lt;/p&gt;
&lt;p&gt;一启动，fstab 尝试把 LABEL=ARCHISO_201805 挂在上来，但是失败。于是我们把 U 盘插到 mac 上，用 Disk Utility 给分区命了名，再插回去，然后这个 Live CD 的 Systemd 就成功起来了。接下来就是根据官方的 Installation Guide 进行安装各种东西。安装完后，在 /boot/EFI 的操作上也出现了一些问题，一开始忘记调用 &lt;code&gt;grub-mkconfig&lt;/code&gt; ，导致重启以后进入 grub-rescue，所以又回到 Live CD 重新 &lt;code&gt;grub-mkconfig&lt;/code&gt;  。同时对 systemd-networkd 也进行了相应的调整，这样开机以后可以配好网络。主要就是在网卡上配上两个 VLAN 和相应的 DHCP 和静态地址。&lt;/p&gt;
&lt;p&gt;接下来对以前的东西进行迁移。主要就是按照十分详细的 Arch Wiki 进行相应的配置。由于空间所限，我们把原来的 home 目录直接 mount &amp;ndash;bind 到 /home，但是不可避免地，会出现用户 id 不对应的问题。于是我们把需要用到的用户的 /etc/{passwd,group,shadow} 统统拷贝到新的系统的相应地方。然后是配置 winbind，就是按部就班地按照 Arch Wiki 和以前的配置进行更新，然后成功地把 AD 上的用户获取到。此时再次出现了 uid 不对应的问题，此时我们使用 &lt;code&gt;chown -R user:user /home/user&lt;/code&gt; 的方法。&lt;/p&gt;
&lt;p&gt;剩下的工作就是琐碎的安装各种常用软件。不必多说。&lt;/p&gt;
&lt;p&gt;P.S. 我研究出了一个很好用的 mosh + tmux 的 fish function: (但是有时工作有时不工作，不明白什么回事)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function tmosh
    mosh $argv -- tmux new-session bash -c &amp;#39;tmux set -g mouse on; tmux setw -g mode-keys vi; fish&amp;#39;
end
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>使用 Cisco AC &#43; AP 组合搭建网络实践</title>
      <link>https://jia.je/networking/2018/04/28/wifi-with-cisco-ac-and-ap/</link>
      <pubDate>Sat, 28 Apr 2018 21:58:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/04/28/wifi-with-cisco-ac-and-ap/</guid>
      <description>&lt;p&gt;有一台已配置好直接可用的 AC 在地址 ac-address。我们需要搭建交换机 + AP 的网络，并且用一台 Linux 服务器进行 DHCP 从而给 AP 分发 AC 的地址。这里以 systemd-networkd 为例。&lt;/p&gt;
&lt;p&gt;我们约定，vlan 2 上联外网，vlan 3 为 Linux 服务器和 AP 的内部网络。&lt;/p&gt;
&lt;p&gt;接下来，配置交换机给 Linux 服务器的端口为 trunk 口，然后将下联 Cisco AP 的端口都设为 access vlan 3 模式。接下来在 Linux 服务器上配置 DHCP 服务器和 NAT。&lt;/p&gt;
&lt;p&gt;如果 Linux 服务器的 interface 名称为 eno1 :&lt;/p&gt;
&lt;p&gt;配置两个 VLAN interface:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat /etc/systemd/network/eno1.network
[Match]
Name=eno1

[Network]
VLAN=eno1.2
VLAN=eno1.3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;相应添加 VLAN 配置：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat /etc/systemd/network/eno1.2.network
[NetDev]
Name=eno1.2

[VLAN]
Id=2
$ cat /etc/systemd/network/eno1.3.network
[NetDev]
Name=eno1.3

[VLAN]
Id=3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置上行的 eno1.2 interface 的静态地址：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat /etc/systemd/network/eno1.2.network
[Match]
Name=eno1.2

[Network]
Address=123.123.123.123/24
Gateway=123.123.123.1
DNS=1.2.4.8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置内部网络 eno1.3 interface:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat /etc/systemd/network/eno1.3.network
[Match]
Name=eno1.3

[Network]
Address=192.168.1.1/24
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置 dhcpd (isc-dhcp-server):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat /etc/default/isc-dhcp-server
INTERFACESv4=&amp;#34;eno1.3&amp;#34;
$ cat /etc/dhcpd.conf
option space Cisco_LWAPP_AP;
option Cisco_LWAPP_AP.server-address code 241 = array of ip-address;

subnet 192.168.1.0 netmask 255.255.255.0 {
  range 192.168.1.100 192.168.1.200;
  option routers 192.168.1.1;
  vendor-option-space Cisco_LWAPP_AP;
  option Cisco_LWAPP_AP.server-address $ac-address;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置 iptables 做 NAT:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;iptables -t nat -A POSTROUTING -o eno1.2 -j MASQUERADE
iptables-save &amp;gt; /etc/iptables/iptables.rules
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;打开 ipv4 forwarding:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward
echo &amp;#39;net.ipv4.conf.all.forwarding=1&amp;#39; &amp;gt;&amp;gt; /etc/sysctl.d/99-ipv4-forwarding.conf
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>把 GDB 降级到 8.0.1</title>
      <link>https://jia.je/programming/2018/04/17/downgrade-gdb/</link>
      <pubDate>Tue, 17 Apr 2018 13:08:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/04/17/downgrade-gdb/</guid>
      <description>&lt;p&gt;在 macOS 上使用 GDB 需要 codesigning。但是在 GDB 升级到 8.1 后这种方法不知道为何失效了。所以我安装回了 GDB 8.0.1 并且重新 codesigning，现在又可以正常升级了。&lt;/p&gt;
&lt;p&gt;对 Formula 进行 patch：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-patch&#34; data-lang=&#34;patch&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git a/Formula/gdb.rb b/Formula/gdb.rb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index 29a1c590..25360893 100644
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- a/Formula/gdb.rb
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ b/Formula/gdb.rb
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -1,14 +1,15 @@
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; class Gdb &amp;lt; Formula
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   desc &amp;#34;GNU debugger&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   homepage &amp;#34;https://www.gnu.org/software/gdb/&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-  url &amp;#34;https://ftp.gnu.org/gnu/gdb/gdb-8.1.tar.xz&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-  mirror &amp;#34;https://ftpmirror.gnu.org/gdb/gdb-8.1.tar.xz&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-  sha256 &amp;#34;af61a0263858e69c5dce51eab26662ff3d2ad9aa68da9583e8143b5426be4b34&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  url &amp;#34;https://ftp.gnu.org/gnu/gdb/gdb-8.0.1.tar.xz&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  mirror &amp;#34;https://ftpmirror.gnu.org/gdb/gdb-8.0.1.tar.xz&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  sha256 &amp;#34;3dbd5f93e36ba2815ad0efab030dcd0c7b211d7b353a40a53f4c02d7d56295e3&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   bottle do
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-    sha256 &amp;#34;43a6d6cca157ef70d13848f35c04e11d832dc0c96f5bcf53a43330f524b3ac40&amp;#34; =&amp;gt; :high_sierra
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-    sha256 &amp;#34;fe7c6261f9164e7a744c9c512ba7e5afff0e74e373ece9b5aa19d5da6443bfc2&amp;#34; =&amp;gt; :sierra
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-    sha256 &amp;#34;cd89001bcf8c93b5d6425ab91a400aeffe0cd5bbb0eccd8ab38c719ab5ca34ba&amp;#34; =&amp;gt; :el_capitan
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    sha256 &amp;#34;e98ad847402592bd48a9b1468fefb2fac32aff1fa19c2681c3cea7fb457baaa0&amp;#34; =&amp;gt; :high_sierra
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    sha256 &amp;#34;0fdd20562170c520cfb16e63d902c13a01ec468cb39a85851412e7515b6241e9&amp;#34; =&amp;gt; :sierra
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    sha256 &amp;#34;f51136c70cff44167dfb8c76b679292d911bd134c2de3fef40777da5f1f308a0&amp;#34; =&amp;gt; :el_capitan
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    sha256 &amp;#34;2b32a51703f6e254572c55575f08f1e0c7bc2f4e96778cb1fa6582eddfb1d113&amp;#34; =&amp;gt; :yosemite
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;   end
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   deprecated_option &amp;#34;with-brewed-python&amp;#34; =&amp;gt; &amp;#34;with-python@2&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>近来做 Stanford CS140e 的一些进展和思考（8）</title>
      <link>https://jia.je/programming/2018/04/10/thoughts-on-stanford-cs140e-8/</link>
      <pubDate>Tue, 10 Apr 2018 17:27:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/04/10/thoughts-on-stanford-cs140e-8/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;https://jia.je/programming/2018/04/07/thoughts-on-stanford-cs140e-7/&#34;&gt;上一篇文章&lt;/a&gt;之后，我其实还是很忙，但是一直心理惦记着这件事，毕竟只剩最后的一点点就可以做完了，不做完总是觉得心痒。&lt;/p&gt;
&lt;p&gt;今天做的部分是调度。我们目前只在 EL0 运行了一个 shell，每当触发 exception 时回到 kernel 进行处理，再回到原来的地方。但现在，我要实现一个 preemtive round-robin scheduler，就需要管理当前的所有进程，并且维护当前的进程状态，当时钟中断到来的时候，决定下一个 time slice 要执行的进程，再切换过去。这个过程当然会遇到不少的坑。&lt;/p&gt;
&lt;p&gt;首先，我们需要判断一个进程是否可以执行了。考虑到阻塞的 IO，作者提供了一个优雅的方法：如果这个进程阻塞在 IO 上，那么，提供一个函数，在 scheduler 中调用，判断所需要的数据是否到达。这样，我们就可以一个循环把下一个 time slice 要执行的线程找到。如果找不到，就等待 interrupt 再尝试。&lt;/p&gt;
&lt;p&gt;困难的地方在于，在启动的时候，切换到一个起始线程。并且在上下文切换的时候，在 process 1 -&amp;gt; kernel -&amp;gt; process 2 这两步过程中，有许多寄存器都需要仔细考虑如何实现。并且在这个过程中，我也发现了之前写的代码中的问题，最终修复了（目前来看是 working 了）。&lt;/p&gt;
&lt;p&gt;我的代码实现在 &lt;a href=&#34;https://github.com/jiegec/cs140e/commit/977f179a9b28e88e85f4ba9577a0682bf2b6c57b&#34;&gt;这里&lt;/a&gt; 。下一步就要写 syscall 了。希望能在期中前抽时间赶紧把这个做完。&lt;/p&gt;
&lt;p&gt;18:54 PM Update: 刚实现完了 sleep 的 syscall。比预想中要简单。果然找到了自己实现的调度器的 BUG。此系列大概是完结了。&lt;/p&gt;
&lt;p&gt;2019-02-12 Update: &lt;a href=&#34;https://jia.je/programming/2019/02/12/thoughts-on-stanford-cs140e-9/&#34;&gt;下一篇文章&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>近来做 Stanford CS140e 的一些进展和思考（7）</title>
      <link>https://jia.je/programming/2018/04/07/thoughts-on-stanford-cs140e-7/</link>
      <pubDate>Sat, 07 Apr 2018 14:05:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/04/07/thoughts-on-stanford-cs140e-7/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;https://jia.je/programming/2018/03/05/thoughts-on-stanford-cs140e-6/&#34;&gt;上一篇文章&lt;/a&gt;之后，我很长时间都没有在继续我这个项目，清明节刚好闲下来了我就回来继续啃它。Stanford 那边已经结课，最后的 &lt;code&gt;3-spawn&lt;/code&gt; 也只有一部分，剩下的部分不知道什么时候作者才会填上去了。&lt;/p&gt;
&lt;p&gt;这次主要要写的代码就是，对异常的处理。这里的异常并不是我们编程语言中的 catch/throw，而是硬件的异常。AArch64 和 x86 一样，也有不同的特权级别的区分，前者是 EL0~EL3，后者则是 RING0 和 RING3。特权级别高可以往特权级别低转换，但是反过来，只能通过异常的方式提高特权等级，并且切换特权等级后只有固定的一些代码可能会跳转，这就是 &lt;code&gt;exception handler/vectors&lt;/code&gt; 。这些函数可以知道是什么原因调用了他们，根据硬件规定好的文档，我们可以知道发生了什么事情，是对齐出错了呢，还是用户调用了 syscall 呢，等等。根据不同的情况，我们需要进行不同的处理。当处理完之后，我们需要考虑，跳转回用户代码的时候，回到哪里，提供什么值，不提供什么。&lt;/p&gt;
&lt;p&gt;实现的话，需要很多步骤。首先是构造好 &lt;code&gt;exception vector&lt;/code&gt; ，这里作者已经写好了一个宏（这里 @BenYip 遇到了一个 assembler 的 BUG），直接用宏就可以把它写出来。然后，我们需要把它加载到当前 EL 的 &lt;code&gt;VBAR_ELx&lt;/code&gt; 寄存器中，当 CPU 抛出异常的时候，就会找到这里相应的处理器进行处理。进到这里以后，我们首先先不考虑太多上下文保存的事情&amp;ndash;我们先保证能处理异常，恢复也是个有很多坑的步骤，作者也是在这里分成了两个 Subphase。首先还是从 &lt;code&gt;ESR_ELx&lt;/code&gt; 中解析到错误的来源的具体内容，如果是我们在 &lt;code&gt;shell&lt;/code&gt; 中自己调用的 &lt;code&gt;brk 2&lt;/code&gt; 指令，我们就自己新开一个 &lt;code&gt;shell&lt;/code&gt; ，修改了提示符以示区别。这样，我们就成功地捕捉到了这个异常。由于我们还无法恢复回去，所以我们直接死循环。&lt;/p&gt;
&lt;p&gt;接下来我们要做的是，从异常中恢复出来。由于用户代码可能在各种地方抛出异常，异常也分同步和异步两种情况，这里有许多需要考虑的问题。为了简化，我们目前只考虑同步的 &lt;code&gt;brk 2&lt;/code&gt; 导致的 Brk 异常。为了能恢复之后能够正常运行，我们需要把所有的寄存器都保存下来，即 &lt;code&gt;TrapFrame&lt;/code&gt; 。保存的时候需要讲究 AArch64 平台下 SP 寄存器的对齐问题。我们也要把一些特殊的寄存器保存下来。还有一点，就是，因为 &lt;code&gt;exception handler&lt;/code&gt; 中调用了 &lt;code&gt;context_save&lt;/code&gt; 函数，所以此时的 lr 本身也需要进行保存，这个地方也卡了我很久。最后，再把这些一个一个地恢复到原来的样子，调整 &lt;code&gt;ELR_EL1&lt;/code&gt; 使得退回到原来的状态时，会跳过当前的 &lt;code&gt;brk 2&lt;/code&gt; 指令，调用它的下一调指令。这样，我们就成功地在遇到异常时，弹出一个 &lt;code&gt;shell&lt;/code&gt; ，而且还可以回退回来。&lt;/p&gt;
&lt;p&gt;学到了很多很多。之后大三，我们可能需要做自己的 CPU，在自己的 CPU 上跑自己的操作系统，在自己的操作系统中跑自己的编译器，在自己的编译器中编译一个数据库。希望到时我还活着吧。#flag&lt;/p&gt;
&lt;p&gt;更新：&lt;a href=&#34;https://jia.je/programming/2018/04/10/thoughts-on-stanford-cs140e-8/&#34;&gt;下一篇在这里&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>最近比较忙</title>
      <link>https://jia.je/others/2018/03/26/busy-these-days/</link>
      <pubDate>Mon, 26 Mar 2018 15:05:00 +0800</pubDate>
      
      <guid>https://jia.je/others/2018/03/26/busy-these-days/</guid>
      <description>&lt;p&gt;最近一直没有更新我的 CS140e 系列文章，是因为最近一直忙于各种事情。等有空了再更新吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>偶遇清华吴文虎教授</title>
      <link>https://jia.je/others/2018/03/08/encountering-wu-wenhu/</link>
      <pubDate>Thu, 08 Mar 2018 17:47:50 +0800</pubDate>
      
      <guid>https://jia.je/others/2018/03/08/encountering-wu-wenhu/</guid>
      <description>&lt;p&gt;今天百团大战，正准备收摊的时候，天空工场那边来了一位长者，在和他们聊着什么。我很感兴趣，就上去听。老人大概已有八十高龄（后来查，是 1936 年生），但依然精神矍铄，首先和我们讲，作为工科的学生，一定在理解原理的基础上，多多去实践。他举了他自己的例子，他首先在电机系学习，后来，计算机系成立（当时还是自动控制系），他转到了计算机系，重新学起了计算机，说计算机编程学起来并没有什么难的。当年，苹果公司送过来了中国第一台 Apple-2，他们就把电脑拆了下来研究原理，又装上去继续工作。后来，他就在计算机系任教，教的正是《程序设计基础》这门课程。他十分重视实践，在第一年开课的时候就说，最关键的就是实践，安排了一些编程实验课，期中期末就是大作业。一开始有一些同学不重视实践，结果期末就挂科了。后来同学们就明白了实践的重要性，实践起来发现并没有那么难，最后就说，“吴老师，你说得对”。他又谈到了他的体育，他当年是北京长跑代表队的集训队选手，擅长一千五百米项目，他三千米只需要九分钟就能跑完。我们都感到自愧不如。我们说，现在的《程序设计基础》是徐明星老师在教，他说徐明星是他的博士生，邬晓钧也是他的博士生，他另外还有一个高徒我记不清楚了。他还是 IOI 中国队的前教练，听到我们有过一些 OI 基础，表示了赞许和鼓励。还有一些细节记不清楚了，记起来了再补充吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>〖新手向〗绕过 C&#43;&#43; 类的访问限制</title>
      <link>https://jia.je/programming/2018/03/07/breaking-c-weak-access-control/</link>
      <pubDate>Wed, 07 Mar 2018 07:59:20 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/03/07/breaking-c-weak-access-control/</guid>
      <description>&lt;p&gt;这是一篇很水的文章，面向萌新，已经知道了的可以自觉绕道。&lt;/p&gt;
&lt;p&gt;昨天上课，有同学问，如果用户偷偷把 &lt;code&gt;private&lt;/code&gt; 改成 &lt;code&gt;public&lt;/code&gt; 再和原有的库链接，是不是就可以在用户代码里更改了。这个答案是肯定的。下面我们就做个实验：&lt;/p&gt;
&lt;p&gt;首先，创建 good_class.h 和 good_class.cpp:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SomeClass&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; getData();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;good_class.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; SomeClass&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;getData() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，首先编译，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clang++ -c good_class.cpp -o good_class.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，修改 good_class.cpp 并写一个 evil_user.cpp&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SomeClass&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; getData();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;good_class.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SomeClass a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a.data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, a.getData());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clang++ good_class.o evil_user.cpp -o evil
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后 &lt;code&gt;evil&lt;/code&gt; 如愿地输出了 &lt;code&gt;37&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;一些提醒：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;C++&lt;/code&gt; 的访问控制十分的弱，仅仅是编译期。所以是很容易绕过的。&lt;/li&gt;
&lt;li&gt;对于不想泄露源代码的库，不要导出 &lt;code&gt;C++&lt;/code&gt; 的类和函数。选择导出 &lt;code&gt;C&lt;/code&gt; 函数，结构体用 incomplete type 或者干脆 &lt;code&gt;void *&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;扩展阅读： &lt;a href=&#34;https://liam0205.me/2018/01/23/crack-private-member-function-by-vtable/&#34;&gt;L 叔的通过虚函数表访问私有函数&lt;/a&gt; 。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>近来做 Stanford CS140e 的一些进展和思考（6）</title>
      <link>https://jia.je/programming/2018/03/05/thoughts-on-stanford-cs140e-6/</link>
      <pubDate>Mon, 05 Mar 2018 19:55:49 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/03/05/thoughts-on-stanford-cs140e-6/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;https://jia.je/programming/2018/03/03/thoughts-on-stanford-cs140e-5/&#34;&gt;上一篇文章&lt;/a&gt;之后，作者终于更新了测试的用例，我的程序终于可以成功跑过所有测试，也成功在树莓派跑起来。不过，我的代码中很多地方的错误处理比较偷懒，往往直接 &lt;code&gt;panic&lt;/code&gt; ，显然并不友好。同时，我想到了使用 &lt;a href=&#34;https://github.com/rust-fuzz/cargo-fuzz&#34;&gt;cargo-fuzz&lt;/a&gt; 来进行自动化测试，果然，使用这个很快就修复了不少我没想到的会出错的地方，比如乘法溢出，目录项没有正确结束等等。目前还发现一个 &lt;code&gt;timeout&lt;/code&gt; 的问题，研究发现大概是文件的 &lt;code&gt;cluster chain&lt;/code&gt; 中出现了环，导致一直读取文件而没有停止。要解决这个问题，我目前想到的是 &lt;code&gt;Floyd&lt;/code&gt; 的判圈算法，但还没上实现。等过几天，新的 &lt;code&gt;Assignment 3&lt;/code&gt; 出了以后，再继续更新。希望作者少点跳票，多点勤奋，哈哈哈哈哈&lt;/p&gt;
&lt;p&gt;更新：&lt;a href=&#34;https://jia.je/programming/2018/04/07/thoughts-on-stanford-cs140e-7/&#34;&gt;下一篇在这里&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>近来做 Stanford CS140e 的一些进展和思考（5）</title>
      <link>https://jia.je/programming/2018/03/03/thoughts-on-stanford-cs140e-5/</link>
      <pubDate>Sat, 03 Mar 2018 11:07:30 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/03/03/thoughts-on-stanford-cs140e-5/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;https://jia.je/programming/2018/02/27/thoughts-on-stanford-cs140e-4/&#34;&gt;上一篇文章&lt;/a&gt;之后，作者多次延期跳票之后（again），终于放出了 &lt;code&gt;Assignment 2 Phase 3: Saddle Up&lt;/code&gt; 。这次，我们要做的变成了把已经写好的（错漏百出）的 &lt;code&gt;fat32&lt;/code&gt; 的驱动搬到树莓派里面去，然后实现一些基本的 &lt;code&gt;shell&lt;/code&gt; 命令： &lt;code&gt;ls&lt;/code&gt; &lt;code&gt;cat&lt;/code&gt; &lt;code&gt;cd&lt;/code&gt; 等等。作者首先更新了老版本的新的测试样例，放了一些映像然后提供了预期的结果，结果发现，这里的 &lt;code&gt;fat32&lt;/code&gt; 有一些不同，主要的就是 &lt;code&gt;bytes_per_sector&lt;/code&gt; 不是 &lt;code&gt;512&lt;/code&gt; 了，意味着物理的扇区和逻辑扇区并不一致。同时， &lt;code&gt;sectors_per_cluster&lt;/code&gt; 也不是 &lt;code&gt;1&lt;/code&gt; 了，需要考虑多个扇区的情况。同时， &lt;code&gt;read_cluster&lt;/code&gt; 传入的 &lt;code&gt;offset&lt;/code&gt; 也可能不再是第一个 &lt;code&gt;sector&lt;/code&gt; 中的，所以需要做一个处理。对于物理和逻辑扇区的问题，作者推荐的方案是，把 &lt;code&gt;fat32&lt;/code&gt; 之外的扇区保持不变，把其内的扇区视为逻辑扇区。这样，其它代码都可以透明地工作，而不用到处更改，这就体现了封装的威力。接着，作者提供了一个写好了的 &lt;code&gt;libsd&lt;/code&gt; 和一些导出的函数，使用这些函数即可。不过，在错误处理和 &lt;code&gt;timeout&lt;/code&gt; 上也遇到了一些坑。后面，把东西搬到树莓派上运行，问题就出现了：读取了第一个扇区（即 &lt;code&gt;MBR&lt;/code&gt; 所在的扇区）之后，直接就死掉了。想了半天都没找到方案，突然想起可以利用 &lt;code&gt;panic!&lt;/code&gt; 对错误语句进行二分查找。查找了大概有七八个小时之后，终于发现，问题出现在读取一个 &lt;code&gt;u32&lt;/code&gt; 类型的变量上。我起初怀疑是栈出了问题，所以放到堆上分配，然而还是不行。忽然想起以前遇到的对齐问题，在 &lt;code&gt;AArch64&lt;/code&gt; 架构上，可能为了简化，读取的 &lt;code&gt;u32&lt;/code&gt; 必须对齐到四个字节上。于是找了找 &lt;code&gt;Rust&lt;/code&gt; 中的对齐方面的文档，找到了 &lt;code&gt;#[repr(align=4)]&lt;/code&gt; 这种表示方法，代替了原来的 &lt;code&gt;#[repr(packed)]&lt;/code&gt; ，并且把数据先拷贝到对齐后的栈上的对应数据结构，然后再读取对应的项。果然，这个问题就解决了。然后又发现我的盘中会出现 &lt;code&gt;lfn&lt;/code&gt; 项并不是从后往前的情况，于是我又修改了一下相关的代码。现在，终于可以成功地 &lt;code&gt;ls&lt;/code&gt; &lt;code&gt;cat&lt;/code&gt; &lt;code&gt;cd&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;不过还是要吐槽一下，作者的测试用的映像文件中，会出现 &lt;code&gt;0xE5&lt;/code&gt; 表示这个项已经被删除的情况，但是似乎作者的代码并没有处理这个，所以在预期的输出中出现了一些明显不正确的结果，导致我的代码跑测试并不能通过。而且，作者的代码在一些情况下会把文件的后缀漏掉。作者后来更新了几次测试的文件，不过这个问题只解决了一部分，并没有完全解决。坐等作者继续放出新的测试文件吧。&lt;/p&gt;
&lt;p&gt;更新：&lt;a href=&#34;https://jia.je/programming/2018/03/05/thoughts-on-stanford-cs140e-6/&#34;&gt;下一篇在这里&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>近来做 Stanford CS140e 的一些进展和思考（4）</title>
      <link>https://jia.je/programming/2018/02/27/thoughts-on-stanford-cs140e-4/</link>
      <pubDate>Tue, 27 Feb 2018 22:42:59 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/02/27/thoughts-on-stanford-cs140e-4/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;https://jia.je/programming/2018/02/16/thoughts-on-stanford-cs140e-3/&#34;&gt;上一篇文章&lt;/a&gt;之后，作者多次延期跳票之后，终于放出了 &lt;code&gt;Assignment 2 Phase 2:32-bit Lipids&lt;/code&gt; ，这两天就把只读 &lt;code&gt;FAT32&lt;/code&gt; 写完了（不过封装得并不好，许多地方利用了 &lt;code&gt;pub(super)&lt;/code&gt; 把变量可以访问的范围控制到 &lt;code&gt;vfat&lt;/code&gt; 中，然后直接读，只有少数需要特殊处理的进行了函数的封装）。首先当然是研究了半天 &lt;code&gt;MBR&lt;/code&gt; 和 &lt;code&gt;FAT32&lt;/code&gt; 的结构，拿了不同来源的 &lt;code&gt;FAT&lt;/code&gt; 结构说明进行对比和验证，最后终于把格式搞清楚了，先实现了 &lt;code&gt;MasterBootRecord&lt;/code&gt; ，这个其实很好实现，以前也有接触过 &lt;code&gt;MBR&lt;/code&gt; ，本身也很简单。然后就是根据 &lt;code&gt;MBR&lt;/code&gt; 找到第一个 &lt;code&gt;FAT32&lt;/code&gt; 的分区，根据偏移找到分区的开头，开头的第一个扇区就是 &lt;code&gt;EBPB&lt;/code&gt; 数据结构，里面保存了 &lt;code&gt;FAT32&lt;/code&gt; 分区的各种信息。根据里面的信息，可以找到 &lt;code&gt;FAT&lt;/code&gt; 表的位置和数量，还有数据部分的 &lt;code&gt;Cluster&lt;/code&gt; 的位置和数量。接着，解析一下 &lt;code&gt;FAT&lt;/code&gt; 表，实际上是一个与 &lt;code&gt;Cluster&lt;/code&gt; 一一对应的链表结构，用特殊的数据代表链表的尾和空、坏扇区。利用这些，和 &lt;code&gt;EBPB&lt;/code&gt; 中根目录所在的第一个 &lt;code&gt;Cluster&lt;/code&gt; ，先在 &lt;code&gt;VFat&lt;/code&gt; 里面实现了读取一个 &lt;code&gt;Cluster&lt;/code&gt; 链的内容的函数，利用这个函数读取一个一个的目录项，解析目录项，把长文件名的项合并到一个之中，然后对应地丢到 &lt;code&gt;Entry&lt;/code&gt; 对象中，目录则可以枚举子目录项，根据名字比较去找子目录或者子文件夹，文件则实现了 &lt;code&gt;io::Read&lt;/code&gt;和 &lt;code&gt;io::Seek&lt;/code&gt; 使得可以读取文件的内容。实现好了这些以后，就拿了 &lt;code&gt;raspbian-strech-lite.img&lt;/code&gt; 作为硬盘映像，从文件里读取文件信息，成功地把 &lt;code&gt;config.txt&lt;/code&gt; 读取出来。&lt;/p&gt;
&lt;p&gt;其中还是遇到许多困难，如各种偏移的计算，如何处理跨 &lt;code&gt;Cluster&lt;/code&gt; 和跨 &lt;code&gt;Sector&lt;/code&gt; 的读写，等等，有不少的坑在其中，花了两天的空余时间才差不多完善了这个功能。还有就是利用 &lt;code&gt;Rust&lt;/code&gt; 现有的功能完成 &lt;code&gt;C&lt;/code&gt; 里面很轻易就可以实现的指针操作，也花了不少时间。&lt;/p&gt;
&lt;p&gt;更新：&lt;a href=&#34;https://jia.je/programming/2018/03/03/thoughts-on-stanford-cs140e-5/&#34;&gt;下一篇在这里&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>近来做 Stanford CS140e 的一些进展和思考（3）</title>
      <link>https://jia.je/programming/2018/02/16/thoughts-on-stanford-cs140e-3/</link>
      <pubDate>Fri, 16 Feb 2018 20:09:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/02/16/thoughts-on-stanford-cs140e-3/</guid>
      <description>&lt;p&gt;由于 &lt;code&gt;Assignment 2: File System &lt;/code&gt; 延期发布，所以中间那段时间转向 &lt;code&gt;MIT 6.828&lt;/code&gt; 稍微研究了一下。前几天放出了新的任务，在&lt;a href=&#34;https://jia.je/programming/2018/02/06/thoughts-on-stanford-cs140e-2/&#34;&gt;上一篇文章&lt;/a&gt;之后，我又有了一些进展：实现了从内存中读取 &lt;code&gt;ATAGS(ARM Tags)&lt;/code&gt; 信息的代码，从而可以获得内存大小的信息，根据这个信息，实现了 &lt;code&gt;bump&lt;/code&gt; 和 &lt;code&gt;bin&lt;/code&gt; 两种内存分配器，并且把二者之一注册为全局内存分配器，利用上更新了的 &lt;code&gt;std&lt;/code&gt; 就可以使用需要动态分配内存的相关工具了。利用这个，我实现了 &lt;code&gt;shell&lt;/code&gt; 输入历史的回溯，把输入历史保存在一个动态增长的数组中，再特殊处理上下键，把当前的行替换为历史。&lt;/p&gt;
&lt;p&gt;这个过程也不是没有踩坑。一开始代码放出来了，但是题目说明还没出，我就自己按照代码做了 &lt;code&gt;ATAGS&lt;/code&gt; 和 &lt;code&gt;bump&lt;/code&gt; 分配器，后来做完了，看到说明出了以后，发现理解还是有偏差，把代码更改了并修复了分配器的 BUG。看到 &lt;code&gt;bin&lt;/code&gt; 分配器的时候，我按照网上的 &lt;code&gt;buddy memory allocation&lt;/code&gt; 实现了一个内存分配器，原理看起来简单实现起来还是有很多细节问题，后来按照新放出的单元测试，修修补补才写得差不多可用了。同时，原来的 &lt;code&gt;bootloader&lt;/code&gt; 因为用了新的 &lt;code&gt;std&lt;/code&gt; 而缺失了 &lt;code&gt;alloc&lt;/code&gt; 不能编译，我就把 &lt;code&gt;kernel&lt;/code&gt; 下的相关文件软连接过去，调了数次后把问题解决。此时， &lt;code&gt;kernel&lt;/code&gt; 文件大小已经有 40K，按照 115200 Baudrate 发送需要几秒才能传输过去，我就调到了 230400 Baudrate，果然现在的传输速度就有所提升，可以接受了。等之后写了 &lt;code&gt;EMMC(SD card)&lt;/code&gt; 的驱动和 &lt;code&gt;FAT32&lt;/code&gt; 的文件系统后，就可以实现更多的 &lt;code&gt;shell&lt;/code&gt; 的功能了。中间还遇到一个问题，就是如果给 &lt;code&gt;kernel&lt;/code&gt; 开启了 &lt;code&gt;bin&lt;/code&gt; 分配器，使用 &lt;code&gt;exit&lt;/code&gt; 回到 &lt;code&gt;bootloader&lt;/code&gt; 就无法传新的 &lt;code&gt;kernel&lt;/code&gt; 上去了，结果发现是因为 &lt;code&gt;bin&lt;/code&gt; 中用到的侵入式 &lt;code&gt;LinkedList&lt;/code&gt; 实现覆盖了部分 &lt;code&gt;bootloader&lt;/code&gt; 的代码，换回不能回收内存的 &lt;code&gt;bump&lt;/code&gt; 分配器即可，反正目前远远还用不了那么多内存。&lt;/p&gt;
&lt;p&gt;之后还要在 &lt;code&gt;aarch64&lt;/code&gt; 上用 &lt;code&gt;MMU&lt;/code&gt; 实现虚拟内存，之前在 &lt;code&gt;MIT 6.828&lt;/code&gt; 里被页表整得脑子眩晕，希望到时我还活着吧（逃&lt;/p&gt;
&lt;p&gt;更新：&lt;a href=&#34;https://jia.je/programming/2018/02/27/thoughts-on-stanford-cs140e-4/&#34;&gt;下一篇在这里&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>近来做 Stanford CS140e 的一些进展和思考（2）</title>
      <link>https://jia.je/programming/2018/02/06/thoughts-on-stanford-cs140e-2/</link>
      <pubDate>Tue, 06 Feb 2018 12:52:59 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/02/06/thoughts-on-stanford-cs140e-2/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;https://jia.je/programming/2018/02/04/thoughts-on-stanford-cs140e/&#34;&gt;上一篇文章&lt;/a&gt;之后，我又有了一些进展：&lt;code&gt;UART&lt;/code&gt; ，简易的&lt;code&gt;shell&lt;/code&gt; ，修复了之前写的 &lt;code&gt;xmodem&lt;/code&gt; 中的 BUG，一个可以从 &lt;code&gt;UART&lt;/code&gt; 接收一个 &lt;code&gt;kernel&lt;/code&gt; 写入到内存中再跳转过去的 &lt;code&gt;bootloader&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;首先是 &lt;code&gt;UART&lt;/code&gt; ，就是通过两个 &lt;code&gt;GPIO pin&lt;/code&gt; 进行数据传输，首先在 &lt;code&gt;memory mapped IO&lt;/code&gt; 上进行相应的初始化，然后包装了 &lt;code&gt;io::Read&lt;/code&gt; 和 &lt;code&gt;io::Write&lt;/code&gt; （这里实现一开始有 BUG，后来修复了），然后很快地完成了一个仅仅能 &lt;code&gt;echo&lt;/code&gt; 的 &lt;code&gt;kernel&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;然后实现了 &lt;code&gt;CONSOLE&lt;/code&gt; ，一个对 &lt;code&gt;MiniUart&lt;/code&gt; 和单例封装，就可以用 &lt;code&gt;kprint!/kprintln!&lt;/code&gt; 宏来输出到 &lt;code&gt;UART&lt;/code&gt; ，接着实现了一个 &lt;code&gt;echo&lt;/code&gt; 的 &lt;code&gt;shell&lt;/code&gt; ，读入一行输出一行。然后实现退格键和方向键，这里的难点在于要控制光标并且用读入的或者空格覆盖掉屏幕上已经显示而不应该显示的内容。接着，利用 &lt;code&gt;skeleton&lt;/code&gt; 中的 &lt;code&gt;Command&lt;/code&gt; 做了一个简单的 &lt;code&gt;echo&lt;/code&gt; 命令。&lt;/p&gt;
&lt;p&gt;接着，利用之前编写的 &lt;code&gt;tty&lt;/code&gt; ，配合上新编写的 &lt;code&gt;bootloader&lt;/code&gt; ，实现通过 &lt;code&gt;UART&lt;/code&gt; 把新的 &lt;code&gt;kernel&lt;/code&gt; 通过 &lt;code&gt;XMODEM&lt;/code&gt; 协议发送到设备，写入 &lt;code&gt;0x80000&lt;/code&gt; 启动地址并且调转到新加载的 &lt;code&gt;kernel&lt;/code&gt; 中执行。&lt;/p&gt;
&lt;p&gt;最后，又实现了 &lt;code&gt;uptime&lt;/code&gt; （输出设备启动到现在的时间）和 &lt;code&gt;exit&lt;/code&gt; （跳转回 &lt;code&gt;bootloader&lt;/code&gt; ，可以上传新的 &lt;code&gt;kernel&lt;/code&gt; ）。并添加了 &lt;code&gt;TUNA&lt;/code&gt; 作为 &lt;code&gt;shell&lt;/code&gt; 启动时输出的 &lt;code&gt;BANNER&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;整个过程挺虐的，踩了很多的坑，由于很多东西都没有，输入输出目前也只有 &lt;code&gt;UART&lt;/code&gt; ，写了 &lt;code&gt;UART&lt;/code&gt; 后又遇到 &lt;code&gt;XMODEM&lt;/code&gt; 难以调试的问题。十分感谢 &lt;code&gt;#tuna&lt;/code&gt; 上的 @BenYip 及时地指出了代码的几处问题，节省了我许多时间。&lt;/p&gt;
&lt;p&gt;更新：&lt;a href=&#34;https://jia.je/programming/2018/02/16/thoughts-on-stanford-cs140e-3/&#34;&gt;下一篇在这里&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>近来做 Stanford CS140e 的一些进展和思考</title>
      <link>https://jia.je/programming/2018/02/04/thoughts-on-stanford-cs140e/</link>
      <pubDate>Sun, 04 Feb 2018 22:28:23 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/02/04/thoughts-on-stanford-cs140e/</guid>
      <description>&lt;p&gt;最近，受各路安利，剁手买下了 &lt;a href=&#34;https://item.taobao.com/item.htm?id=537501616420&#34;&gt;这个淘宝商家的树莓派的套餐 C&lt;/a&gt; ，还买了许多 LED 灯泡、杜邦线和电阻，开始按照 &lt;a href=&#34;http://web.stanford.edu/class/cs140e/&#34;&gt;CS 140e&lt;/a&gt; 学习 Rust 并且用 Rust 编译写一个简易的操作系统。Assignment 0 的目标就是编写一个向 GPIO 16 连接的 LED 灯闪烁。首先当然就是愉快地按照教程下载 bootloader，下载交叉编译工具链，顺带装一个 Raspbian 到机器上，随时可以当成一个低性能的 ARM/ARM64（实际上，Raspbian 只用了 armv7l，没有用 64bit）机器来用，以后如果配上 &lt;a href=&#34;https://scateu.me&#34;&gt;@scateu&lt;/a&gt; 团购的 Motorola Laptop Dock 的话就是一个几百块的笔记本了。把课程上的文件丢上去，可以看到绿色的活动指示灯闪烁，后面又把 CP2102 模块连上去，又能看到 Blink on, Blink off 的输出。然后按照要求，自己先码一段 C 语言，实现 blinky:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define GPIO_BASE (0x3F000000 + 0x200000)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GPIO_FSEL1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(GPIO_BASE &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GPIO_SET0  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(GPIO_BASE &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1C&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GPIO_CLR0  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(GPIO_BASE &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spin_sleep_us&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; us) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; us &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;asm&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nop&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spin_sleep_ms&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ms) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  spin_sleep_us(ms &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// STEP 1: Set GPIO Pin 16 as output.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GPIO_FSEL1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b001&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// STEP 2: Continuously set and clear GPIO 16.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GPIO_SET0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    spin_sleep_ms(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GPIO_CLR0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    spin_sleep_ms(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中大部分代码都已经给出了，自己要实现也只是查询一下 BCM2837 SoC 的 GPIO 文档，按照文档把该做的内存操作和位运算都写一下即可。最后发现，闪烁的频率特别慢，几秒钟才闪烁一次。毕竟是按照 CPU 的 clock speed 进行粗略的计时，而生成的代码也不是很高效，没有 inline。接着则是用 Rust 再实现一下上面这部分的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#![feature(compiler_builtins_lib, lang_items, asm, pointer_methods)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#![no_builtins]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#![no_std]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;crate&lt;/span&gt; compiler_builtins;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mod&lt;/span&gt; lang_items;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;GPIO_BASE&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3F000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x200000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;GPIO_FSEL1&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;GPIO_BASE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;GPIO_SET0&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;GPIO_BASE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1C&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;GPIO_CLR0&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;GPIO_BASE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[inline(never)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spin_sleep_ms&lt;/span&gt;(ms: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;(ms &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { asm!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nop&amp;#34;&lt;/span&gt; :::: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;volatile&amp;#34;&lt;/span&gt;); }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[no_mangle]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kmain&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// STEP 1: Set GPIO Pin 16 as output.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;GPIO_FSEL1&lt;/span&gt;.write_volatile(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// STEP 2: Continuously set and clear GPIO 16.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;loop&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;GPIO_SET0&lt;/span&gt;.write_volatile(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        spin_sleep_ms(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;GPIO_CLR0&lt;/span&gt;.write_volatile(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        spin_sleep_ms(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这边和上面一样，很多东西都已经给出了，只是重新改写一下而已。不过，这边的实测结果则是，一秒钟会闪烁很多下，看了下汇编，生成的循环比较紧凑，所以也没有达到想要的效果，不过后面到我实现了 Timer 的读取之后，就很精准了。&lt;/p&gt;
&lt;p&gt;接下来就是痛苦的学习 Rust 的过程，Assignment 1 上来就是解答关于 Rust 语言的一些问题，在过程中被 Rust 十分严格的 Lifetime 和 Borrow checker 弄得想死，好歹最后还是让测试都通过了。接下来就是真正地提供一些封装硬件接口的 API，然后利用这些 API 去实现更多功能，首先是利用栈上分配的空间模拟一个变长数组的 API：&lt;code&gt;stack-vec&lt;/code&gt; ，然后是把底层的直接操作硬件的内存操作封装成类型安全的 &lt;code&gt;volatile&lt;/code&gt; ，然后实现一个简单的支持断点续传的传文件的协议 &lt;code&gt;xmodem&lt;/code&gt; ，又做了一个辅助电脑上使用 TTY+XMODEM 的小工具 &lt;code&gt;ttywrite&lt;/code&gt; ，然后就开始撸硬件了：时钟 &lt;code&gt;timer&lt;/code&gt; ，针对 GPIO pin 的类型安全的状态机 &lt;code&gt;GPIO&lt;/code&gt; 。目前只实现到这里，然后做出了一个准确一秒闪烁的 blinky（令人惊讶的是，因为这里的 kernel 直接从文件头开始就是代码，最后的 binary 异常地小，而之前的代码从文件的偏移 0x8000 开始。目前看来，是因为之前的代码是整个文件加载到 0x0000 上，而代码默认了从  0x8000 开始，所以除了最开头的一个跳转指令，中间留了许多空余的空间。而这里的代码是直接被 bootloader 加载到了 0x80000 处并且跳转到这里执行，所以省去了许多空间）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;blinky&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; pin16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Gpio::new(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; pin_out16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pin16.into_output();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;loop&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pin_out16.set();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        spin_sleep_ms(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pin_out16.clear();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        spin_sleep_ms(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[no_mangle]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kmain&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// FIXME: Start the shell.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    blinky();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目前只做到这里。后面还有大把的坑要踩，难写的 Rust 还得继续啃下去。我的代码都以 diff 的形式放在了 &lt;a href=&#34;https://github.com/jiegec/cs140e&#34;&gt;jiegec/cs140e&lt;/a&gt; ，写得并不美观。接下来就是实现 &lt;code&gt;UART&lt;/code&gt; 了，终于要实现串口通信了。&lt;/p&gt;
&lt;p&gt;2018-01-06 更新： &lt;a href=&#34;https://jia.je/programming/2018/02/06/thoughts-on-stanford-cs140e-2/&#34;&gt;下一篇文章已经更新&lt;/a&gt; 。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>再次吐槽 VS 关于 scanf 和 scanf_s 的问题</title>
      <link>https://jia.je/programming/2018/01/30/more-on-scanf-and-scanf_s/</link>
      <pubDate>Tue, 30 Jan 2018 16:05:33 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/01/30/more-on-scanf-and-scanf_s/</guid>
      <description>&lt;p&gt;继&lt;a href=&#34;https://jia.je/programming/2017/10/17/on-scanf-and-scanf_s/&#34;&gt;上次的吐槽&lt;/a&gt;后，今天再次遇到同学因为 &lt;code&gt;scanf&lt;/code&gt; 在 VS 下的 &lt;code&gt;deprecation error&lt;/code&gt; 感到十分迷茫，在知乎上求助又因为拍照的原因被说，我就在此再次吐槽一下 VS 这对初学者很不友善很不友善的两点。&lt;/p&gt;
&lt;p&gt;一点就是上面提到的这个，另一点就是程序结束后任意键以退出这一功能要做得更加醒目一点。前者由于大多数新手在学习 &lt;code&gt;C/C++&lt;/code&gt; 的时候都会跟着书上或者网上的代码敲一遍输入输出的代码，很容易就会撞到这个问题。后者则会让新手习惯性地以为程序闪退了，没有出结果，而不知道其实是程序执行结束后关闭而已。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>我正在使用的两个 Emacs 的 Patch</title>
      <link>https://jia.je/programming/2018/01/07/two-patches-of-emacs-i-am-using/</link>
      <pubDate>Sun, 07 Jan 2018 14:24:24 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/01/07/two-patches-of-emacs-i-am-using/</guid>
      <description>&lt;p&gt;我在本地对 &lt;code&gt;emacs.rb&lt;/code&gt; 进行了修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-patch&#34; data-lang=&#34;patch&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git a/Formula/emacs.rb b/Formula/emacs.rb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index d0138cd..de3c5ff 100644
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- a/Formula/emacs.rb
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ b/Formula/emacs.rb
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -4,6 +4,14 @@ class Emacs &amp;lt; Formula
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   url &amp;#34;https://ftp.gnu.org/gnu/emacs/emacs-25.3.tar.xz&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   sha256 &amp;#34;253ac5e7075e594549b83fd9ec116a9dc37294d415e2f21f8ee109829307c00b&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  patch do
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    url &amp;#34;https://gist.githubusercontent.com/aatxe/260261daf70865fbf1749095de9172c5/raw/214b50c62450be1cbee9f11cecba846dd66c7d06/patch-multicolor-font.diff&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  end
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  patch do
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    url &amp;#34;https://debbugs.gnu.org/cgi/bugreport.cgi?filename=0001-Fix-child-frame-placement-issues-bug-29953.patch;bug=29953;att=1;msg=8&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  end
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;   bottle do
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     sha256 &amp;#34;d5ce62eb55d64830264873a363a99f3de58c35c0bd1602cb7fd0bc37137b0c9d&amp;#34; =&amp;gt; :high_sierra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     sha256 &amp;#34;4d7ff7f96c9812a9f58cd45796aef789a1b5d26c58e3e68ecf520fab34af524d&amp;#34; =&amp;gt; :sierra
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;主要涉及到两个 Patch：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启用对 Multicolor font，比如 Emoji 的支持。由于一些 ethic problems 暂时在 Emacs 中被禁用了，所以自己启用回来。&lt;/li&gt;
&lt;li&gt;打上我前几天上报的 &lt;a href=&#34;https://debbugs.gnu.org/cgi/bugreport.cgi?bug=29953&#34;&gt;BUG #29953&lt;/a&gt; 的修复。已经在上游 Merge 到 &lt;code&gt;emacs-26&lt;/code&gt; 分支中，这个修复会在下一个版本中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有了第一个，就可以正常显示 Emoji（对不起，RMS）；有了第二个，就解决了 &lt;code&gt;pyim&lt;/code&gt; 和 &lt;code&gt;lsp-ui-peek&lt;/code&gt; 用 &lt;code&gt;child-frame&lt;/code&gt; 显示的一些问题了。&lt;/p&gt;
&lt;p&gt;另外还有一个我自己在用的 &lt;code&gt;recoll.rb&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Documentation: https://docs.brew.sh/Formula-Cookbook.html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                http://www.rubydoc.info/github/Homebrew/brew/master/Formula&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# PLEASE REMOVE ALL GENERATED COMMENTS BEFORE SUBMITTING YOUR PULL REQUEST!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Recoll&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Formula&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  desc &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Recoll is a desktop full-text search tool.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  homepage &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.lesbonscomptes.com/recoll/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  url &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.lesbonscomptes.com/recoll/recoll-1.23.5.tar.gz&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sha256 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;9b6b6941efc3e87c8325e95a69a5d0a37c022c3c45773c71dccd0fb3f364475f&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  depends_on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xapian&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  depends_on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  depends_on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aspell&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inreplace &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Makefile.in&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-Wl,--no-undefined -Wl,--warn-unresolved-symbols&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--no-undefined --warn-unresolved-symbols&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./configure&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--disable-dependency-tracking&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--disable-silent-rules&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--without-x&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--disable-x11mon&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--with-aspell&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--enable-recollq&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--disable-webkit&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# requires qtwebkit, which is not bundled with qt5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--prefix=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;prefix&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;make&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;install&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mkdir libexec
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mv bin&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;recoll.app&amp;#34;&lt;/span&gt;, libexec&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;recoll.app&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  test &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# `test do` will create, run in and delete a temporary directory.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# This test will fail and we won&amp;#39;t accept that! For Homebrew/homebrew-core&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# this will need to be a test that verifies the functionality of the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# software. Run the test with `brew test recoll`. Options passed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# to `brew install` such as `--HEAD` also need to be provided to `brew test`.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# The installed folder is not in the path, so use the entire path to any&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# executables being tested: `system &amp;#34;#{bin}/program&amp;#34;, &amp;#34;do&amp;#34;, &amp;#34;something&amp;#34;`.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>NAT64 初尝试</title>
      <link>https://jia.je/networking/2018/01/02/first-trail-of-nat64/</link>
      <pubDate>Tue, 02 Jan 2018 19:41:22 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/01/02/first-trail-of-nat64/</guid>
      <description>&lt;p&gt;最近宿舍里有线网络的 IPv4 总是拿不到地址，只能连无线网，不禁对计算机系学生的可怕的设备数量有了深刻的认识。不过，作为一个有道德（误）的良好青年，还是不要给已经枯竭的 IPv4 地址填堵了，还是赶紧玩玩 IPv6 的网络吧。然后在 TUNA 群里受青年千人续本达 (@heroxbd) 的安利，本地搭建一下 NAT64+DNS64 的环境。不过考虑到宿舍还是拿不到有线的 IPv4 地址，我就先利用苹果先前在强制 iOS 的应用支持 NAT64 网络的同时，在 macOS 上为了方便开发者调试，提供的便捷的建立 NAT64 网络的能力。&lt;/p&gt;
&lt;p&gt;首先在设置中按住 Option 键打开 Sharing，点击 Internet Sharing，勾上 Create NAT64 Network 然后把网络共享给设备。然后在手机上关掉 Wi-Fi 和 Cellular，发现还能正常上网。此时可以打开 Wireshark 验证我们的成果了：&lt;/p&gt;
&lt;p&gt;在手机上打开浏览器，浏览千度，得到如下的 Wireshark 截图：
&lt;img src=&#34;https://jia.je/images/baidu-nat64.jpg&#34; alt=&#34;baidu-nat64&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里，&lt;code&gt;2001:2:0:aab1::1&lt;/code&gt; 是本机在这个子网中的地址，&lt;code&gt;2001:2::aab1:cda2:5de:87f6:fd78&lt;/code&gt; 是我的 iOS 设备的地址，然后 iOS 向 macOS 发出了 DNS 请求，macOS 发送 DNS 请求后得到 &lt;code&gt;baidu.com&lt;/code&gt; 的 IPv4 地址之一为 &lt;code&gt;111.13.101.208&lt;/code&gt; ：
&lt;img src=&#34;https://jia.je/images/baidu-dns.jpg&#34; alt=&#34;baidu-dns&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中，我们可以看到， &lt;code&gt;baidu.com&lt;/code&gt; 的 &lt;code&gt;AAAA&lt;/code&gt; 记录是 &lt;code&gt;2001:2:0:1baa::6f0d:65d0&lt;/code&gt; ，这个就是 DNS64 转译的地址，前面为网关的 &lt;code&gt;prefix&lt;/code&gt; ，后面就是对应的 IPv4 地址： &lt;code&gt;0x6f=111, 0x0d=13, 0x65=101, 0xd0=208&lt;/code&gt; ，当客户端向这个地址发包的时候，网关发现前缀符合条件，把最后的这部分 IPv4 地址取出来，自己把包发送到真实的地址上去，再把返回来的包再转为 IPv6 的地址返还给客户端。可以验证，剩下的几个地址也符合这个转译规则。&lt;/p&gt;
&lt;p&gt;这就实现了：利用一台连接着 IPv6 和 IPv4 两种网络的网关，可以使得 IPv6 这个网络通过网关访问 IPv4。通过配置，也可以使得 IPv4 访问 IPv6 中的地址（即 Stateful 和 Stateless 的区分，需要手动配置映射）。&lt;/p&gt;
&lt;p&gt;好处：作为比较成熟的 IPv4 到 IPv6 过渡方案之一，可以让自己组建的 IPv6 网络访问一些仅 IPv4 的网站。
坏处：依赖于 DNS64，必须要经过一层翻译，一些应用或协议可能写死了 IPv4 的地址，该方法可能会失效。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>有趣的 Java 日期格式化问题</title>
      <link>https://jia.je/programming/2017/12/31/interesting-java-formatting-problem/</link>
      <pubDate>Sun, 31 Dec 2017 10:55:23 +0800</pubDate>
      
      <guid>https://jia.je/programming/2017/12/31/interesting-java-formatting-problem/</guid>
      <description>&lt;p&gt;今天在群里看到有人说，Java 的日期格式化有问题，如果用 &lt;code&gt;YYYY-MM-dd&lt;/code&gt; ，今天的日期就会显示 &lt;code&gt;2018-12-31&lt;/code&gt; 。我立马在本地用 Java REPL (aka Groovy) 跑了一下，果然如此：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;===&amp;gt;&lt;/span&gt; Sun Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; CST &lt;span style=&#34;color:#ae81ff&#34;&gt;2017&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.text.SimpleDateFormat
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;===&amp;gt;&lt;/span&gt; java&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SimpleDateFormat&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SimpleDateFormat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YYYY-MM-dd&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;date&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;===&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解决方案是，把格式换为 &lt;code&gt;yyyy-MM-dd&lt;/code&gt; ，确实就可以了。于是我就去研究了一下文档： &lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html&#34;&gt;Class SimpleDateFormat&lt;/a&gt; ，发现了问题：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt; 代表 &lt;code&gt;year&lt;/code&gt; ，而 &lt;code&gt;Y&lt;/code&gt; 代表 &lt;code&gt;week year&lt;/code&gt; 。根据 &lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/util/GregorianCalendar.html#week_year&#34;&gt;week year&lt;/a&gt; ，因为今年最后的一个星期在明年的部分更多，于是这个星期被归在了明年，所以这一周属于 2018，这就可以解释之前的那个输出问题了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 macOS 上试用 Gentoo/Prefix</title>
      <link>https://jia.je/devops/2017/12/27/try-gentoo-prefix-on-macos/</link>
      <pubDate>Wed, 27 Dec 2017 20:25:23 +0800</pubDate>
      
      <guid>https://jia.je/devops/2017/12/27/try-gentoo-prefix-on-macos/</guid>
      <description>&lt;p&gt;前几天参加了&lt;a href=&#34;https://keybase.io/jsteward&#34;&gt;许朋程&lt;/a&gt;主讲的 Tunight，对 Gentoo 有了一定的了解，不过看到如此复杂的安装过程和长久的编译时间，又看看我的 CPU，只能望而却步了。不过，有 Gentoo/Prefix 这个工具，使得我们可以在其它的操作系统（如 macOS,Solaris 等）上在一个 $EPREFIX 下跑 Portage，也就是把 Portage 运行在别的操作系统，当作一个包管理器，并且可以和别的操作系统并存。&lt;/p&gt;
&lt;p&gt;首先还是祭出官网：&lt;a href=&#34;https://wiki.gentoo.org/wiki/Project:Prefix&#34;&gt;Project:Prefix&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;首先设定好环境变量 &lt;code&gt;$EPREFIX&lt;/code&gt; ，之后所有的东西都会安装到这个目录下，把 &lt;code&gt;bootstrap-prefix.sh&lt;/code&gt; 下载到 &lt;code&gt;$EPREFIX&lt;/code&gt; ，然后 &lt;code&gt;./bootstrap-prefix.sh&lt;/code&gt; ，会进行一系列的问题，一一回答即可。建议在运行前设置好 &lt;code&gt;GENTOO_MIRRORS=http://mirrors.tuna.tsinghua.edu.cn/gentoo&lt;/code&gt; 由于 TUNA 没有对 gentoo_prefix 做镜像，只能把 distfiles 切换到 TUNA 的镜像上。&lt;/p&gt;
&lt;p&gt;然后。。。&lt;/p&gt;
&lt;p&gt;stage1&amp;hellip;&lt;/p&gt;
&lt;p&gt;stage2..&lt;/p&gt;
&lt;p&gt;stage3.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;emerge -e @world&lt;/code&gt; BOOM&lt;/p&gt;
&lt;p&gt;经过 n 次跑挂以后，终于搞完了 stage3，然后 &lt;code&gt;SHELL=bash ./bootstrap-prefix.sh $EPREFIX startscript&lt;/code&gt; 生成 &lt;code&gt;startprefix&lt;/code&gt; ，在外面的 SHELL 中向切进来的时候运行这个即可。&lt;/p&gt;
&lt;p&gt;然后就可以使用Gentoo/Prefix了。注意！此时的 &lt;code&gt;$PATH&lt;/code&gt; 仅限于 &lt;code&gt;$EPREFIX&lt;/code&gt; 下几个目录和 &lt;code&gt;/usr/bin&lt;/code&gt; &lt;code&gt;/bin&lt;/code&gt; 所以很多东西都会出问题（Emacs, Vim, Fish etc）。小心不要把自己的目录什么的搞挂了。&lt;/p&gt;
&lt;p&gt;然后就可以假装试用 Gentoo 了！&lt;/p&gt;
&lt;p&gt;哈哈哈哈哈哈哈&lt;/p&gt;
&lt;p&gt;死于编译 libgcrypt 和 llvm。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jia.je/programming/2017/12/12/lsp-and-cpp/</link>
      <pubDate>Tue, 12 Dec 2017 08:13:40 +0800</pubDate>
      
      <guid>https://jia.je/programming/2017/12/12/lsp-and-cpp/</guid>
      <description>&lt;p&gt;之前时间，巨硬发布了 LSP（Language Server Protocol），目的是解决目前 IDE 和各语言的 m+n 问题。想法很好，不过直到最近，终于有我觉得可以用的工具出来了，并且已经代替了我在使用的其它的插件。&lt;/p&gt;
&lt;p&gt;由于我最近主要就是做做程设作业，做做 OJ 这些，主要就是和 C++打交道。所以我当然就开始找一些比较成熟的 C++的 LSP server。有一个 Sourcegraph 维护的 &lt;a href=&#34;https://langserver.org/&#34;&gt;langserver.org&lt;/a&gt; ，上面有着目前的各个语言和编辑器/IDE 的支持情况，我刚才提到的 cquery 也会加入到这个列表里去。从这个列表里可以看到，我用的比较多的 Python 和 Haskell 都已经有不错的的 LSP server，我已经开始在本地体验 pyls 和 hie 了，感觉做得挺不错的。&lt;/p&gt;
&lt;p&gt;回到 C++，我的主力编辑器是 Emacs，其次是 CLion，而 Emacs 上的&lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;LSP 支持 lsp-mode&lt;/a&gt;也在快速发展，与之配合的&lt;a href=&#34;https://github.com/emacs-lsp/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt; 也出现了很多很棒的功能。&lt;/p&gt;
&lt;p&gt;下面开始编译并配置&lt;a href=&#34;https://github.com/jacobdufault/cquery&#34;&gt;cquery&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/jacobdufault/cquery --recursive
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd cquery
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./waf configure &lt;span style=&#34;color:#75715e&#34;&gt;# to use system clang, append --use-system-clang&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./waf build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后配置 Emacs：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package lsp-mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :diminish
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lsp-mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :commands
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (lsp-mode)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (lsp-define-stdio-client
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   lsp-pyls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;get-project-root
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/bin/pyls&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package lsp-ui
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :commands
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lsp-ui-mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lsp-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lsp-ui-mode&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package cquery
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :load-path
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path_to_cquery/emacs&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     cquery-executable &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path_to_cquery/build/app&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     cquery-resource-dir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path_to_cquery/clang_resource_dir&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，需要配置 基于 Clang 的 工具都需要的 Compilation Database。Sacrasm 对这个有一个非常完整的&lt;a href=&#34;https://sarcasm.github.io/notes/dev/compilation-database.html&#34;&gt;总结&lt;/a&gt; ，可以查看里面的方法。我这里推荐在 CMake 项目中用 CMake 自带的，加上&lt;a href=&#34;https://github.com/nickdiego/compiledb-generator&#34;&gt;nickdiego/compiledb-generator&lt;/a&gt; 应付基于Makefile/Autotools的项目。如果都不适用，就按照cquery的README写一个简单的.cquery文件即可，不需要Bear那种必须关闭SIP的方案。&lt;/p&gt;
&lt;p&gt;然后就可以享受很多功能了！还是挺好用的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jia.je/programming/2017/12/02/on-nginx-memory-pool/</link>
      <pubDate>Sat, 02 Dec 2017 22:16:07 +0800</pubDate>
      
      <guid>https://jia.je/programming/2017/12/02/on-nginx-memory-pool/</guid>
      <description>&lt;p&gt;今晚参加了 Tunight，会长给我们讲了 Nginx 的一些内部运作的机制和原理。中间的时候，会长展示的代码中用到了线程池方面的一些函数，但是大多地方只有调用 &lt;code&gt;ngx_pcalloc&lt;/code&gt; 而没有看到相应的对象释放的过程，于是在演示的最后，会长应大家要求对 Nginx 魔幻的线程池实现做了现场代码分析。&lt;/p&gt;
&lt;p&gt;在分析的中途遇到了很多坑，最后才终于理清了内存池的工作原理。这里直接解释结论吧。以下代码均摘自 Nginx 1.13.7，代码都可以在官方仓库找到。&lt;/p&gt;
&lt;p&gt;首先分析一下创建一个内存池的函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_create_pool&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_log_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;log)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_t&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_memalign&lt;/span&gt;(NGX_POOL_ALIGNMENT, size, log);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.last &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (u_char &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_t&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (u_char &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.failed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_t&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; NGX_MAX_ALLOC_FROM_POOL) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; size : NGX_MAX_ALLOC_FROM_POOL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;chain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;large &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cleanup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;log &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; log;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在开始分段分析这个函数：在这里，一个内存池用一个 &lt;code&gt;ngx_pool_t (aka struct ngx_pool_s)&lt;/code&gt; 类型的数据进行包装，所有的关于内存池的操作都基于相应的内存池对象。 &lt;code&gt;ngx_log_t&lt;/code&gt; 表示输出信息的对象，与内存池无关，后面也不会讨论它。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_memalign&lt;/span&gt;(NGX_POOL_ALIGNMENT, size, log);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.last &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (u_char &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_t&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (u_char &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.failed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里通过调用 &lt;code&gt;ngx_memalign&lt;/code&gt; 分配一段（能对齐就对齐，不能对齐就放弃的）以 size 为大小的内存，做为这个内存池第一个块的内存，这个块的头是完整的，其中 &lt;code&gt;p-&amp;gt;d.last&lt;/code&gt; 和 &lt;code&gt;p-&amp;gt;d.end&lt;/code&gt; 分别表示可用于分配对象的内存段的开始和结束，在用 &lt;code&gt;p-&amp;gt;d.next&lt;/code&gt; 连接起来的链表中，每个链表实际上只有 &lt;code&gt;d&lt;/code&gt; 是存储了数据，后面的各个域都不再使用。这里的 &lt;code&gt;p-&amp;gt;d.failed&lt;/code&gt; 涉及到链表的优化，在以后会接触到。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_t&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; NGX_MAX_ALLOC_FROM_POOL) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; size : NGX_MAX_ALLOC_FROM_POOL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;chain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;large &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cleanup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;log &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; log;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;size&lt;/code&gt; 计算出实际用于对象分配的内存大小， &lt;code&gt;p-&amp;gt;max&lt;/code&gt; 存储了当前这个块最大能容纳的对象的大小， &lt;code&gt;p-&amp;gt;current&lt;/code&gt; 会和上面的 &lt;code&gt;p-&amp;gt;d.failed&lt;/code&gt; 合在一起对链表进行优化。 &lt;code&gt;p-&amp;gt;chain&lt;/code&gt; 与其他功能关系较密切，不会在本文中展开，而 &lt;code&gt;p-&amp;gt;cleanup&lt;/code&gt; 允许外部注册一些清理函数，实现起来并不难。&lt;/p&gt;
&lt;p&gt;接下来，由于 &lt;code&gt;ngx_pnalloc&lt;/code&gt; 和 &lt;code&gt;ngx_pcalloc&lt;/code&gt; 都和 &lt;code&gt;ngx_palloc&lt;/code&gt; 相近，这里只对 &lt;code&gt;ngx_palloc&lt;/code&gt; 进行分析：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_palloc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pool, &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; size)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if !(NGX_DEBUG_PALLOC)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_palloc_small&lt;/span&gt;(pool, size, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_palloc_large&lt;/span&gt;(pool, size);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里分了两种情况，如果要分配的内存大于一个块的最大值，那么这段内存必须要单独分配单独维护，所以调用了 &lt;code&gt;ngx_palloc_large&lt;/code&gt; ，下面对其分析：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_palloc_large&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pool, &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; size)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_uint_t&lt;/span&gt;         n;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_large_t&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;large;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_alloc&lt;/span&gt;(size, pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;log);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (large &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;large; large; large &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; large&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (large&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;alloc &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            large&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;alloc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    large &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_palloc_small&lt;/span&gt;(pool, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_large_t&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (large &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_free&lt;/span&gt;(p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    large&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;alloc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    large&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;large;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;large &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; large;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;ngx_alloc&lt;/code&gt; 就是对 &lt;code&gt;malloc&lt;/code&gt; 的简单封装，直接分配一段内存，然后向 &lt;code&gt;pool-&amp;gt;large&lt;/code&gt; 中以 &lt;code&gt;ngx_pool_large_t&lt;/code&gt; 组成的链表中插入。这里有一个小优化：因为 &lt;code&gt;ngx_pool_large_t&lt;/code&gt; 本身也要占用内存，为了复用已经被释放的 &lt;code&gt;ngx_pool_large_t&lt;/code&gt; ，尝试链表的前几项，如果几项中都没有空的位置，因为 &lt;code&gt;ngx_pool_large_t&lt;/code&gt; 本身是一个很小的对象，自然可以复用自己在内存池中分配对象的方法 &lt;code&gt;ngx_palloc_small&lt;/code&gt; ，然后把它加入到 &lt;code&gt;pool-&amp;gt;large&lt;/code&gt; 的链表的第一向前。如果很大的内存都在分配后很快释放，这种方法可以复用很多的 &lt;code&gt;ngx_pool_large_t&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;接下来分析 &lt;code&gt;ngx_palloc_small&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; ngx_inline &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_palloc_small&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pool, &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_uint_t&lt;/span&gt; align)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u_char      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;m;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_t&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;current;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.last;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (align) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_align_ptr&lt;/span&gt;(m, NGX_ALIGNMENT);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt;) (p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.end &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; m) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; size) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.last &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; m;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.next;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_palloc_block&lt;/span&gt;(pool, size);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先，从 &lt;code&gt;pool-&amp;gt;current&lt;/code&gt; 遍历（这样做的原因下面会提到）已有的各个块，寻找有没有哪个块能容纳下现在需要的大小，如果能就可以调整 &lt;code&gt;p-&amp;gt;d.last&lt;/code&gt; 返回，否则就分配一个新的块到内存池中，再从新的块中分配需要的大小的内存。需要一提的是，在设计中，小的对象是随着整个内存池的销毁而被一起释放的，不会在中途被释放，而大的对象尽量要用完即释放。接下来分析 &lt;code&gt;ngx_palloc_block&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_palloc_block&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pool, &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; size)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u_char      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;m;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt;       psize;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_t&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;new;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    psize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt;) (pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.end &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (u_char &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) pool);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_memalign&lt;/span&gt;(NGX_POOL_ALIGNMENT, psize, pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;log);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) m;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; psize;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.failed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    m &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_data_t&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_align_ptr&lt;/span&gt;(m, NGX_ALIGNMENT);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.last &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;current; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.next; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.next) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.failed&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.next;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; m;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了节省内存，结构体中并没有记录实际分配的内存块的大小，于是根据第一个块的大小分配当前的块，虽然这里用的也是一个类型为 &lt;code&gt;ngx_pool_t&lt;/code&gt; 结构体，实际上只用到了 &lt;code&gt;new-&amp;gt;d&lt;/code&gt; 中的内容维护块组成的链表和块内的分配情况。然后从 &lt;code&gt;pool-&amp;gt;current&lt;/code&gt; 开始找块的链表的结尾，找到节尾后把当前的块加到结尾的后面，然后把刚才需要分配的小对象的地址返回。与此同时，由于调用这个函数的时候，一定是当前的对象在已有的从 &lt;code&gt;pool-&amp;gt;current&lt;/code&gt; 开始的块中都放不下了，我们给这些块的 &lt;code&gt;p-&amp;gt;d.failed&lt;/code&gt; 进行自增，意思是说这个块在分配新的对象的时候又一次放不下了，如果放不下的次数比较多，我们可以认为这个块已经装得比较满了，那么，我们把 &lt;code&gt;pool-&amp;gt;current&lt;/code&gt; 设为它的后继，以后在分配新的对象的时候就会自动跳过这些比较满的块，从而提高了效率。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_int_t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_pfree&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pool, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_large_t&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;l;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;large; l; l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;alloc) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_log_debug1&lt;/span&gt;(NGX_LOG_DEBUG_ALLOC, pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;log, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;free: %p&amp;#34;&lt;/span&gt;, l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;alloc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_free&lt;/span&gt;(l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;alloc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;alloc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NGX_OK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NGX_DECLINED;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从 &lt;code&gt;ngx_pfree&lt;/code&gt; 的实现可以看出，只有大的对象才会要求尽快释放，小的对象和没有被手动释放的大的对象都会随着内存池生命周期的结束而一起释放。如 &lt;code&gt;ngx_destroy_pool&lt;/code&gt; 中的实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_destroy_pool&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pool)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_t&lt;/span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;n;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_large_t&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;l;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ngx_pool_cleanup_t&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;cleanup; c; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;handler) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_log_debug1&lt;/span&gt;(NGX_LOG_DEBUG_ALLOC, pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;log, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;run cleanup: %p&amp;#34;&lt;/span&gt;, c);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;(c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if (NGX_DEBUG)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * we could allocate the pool-&amp;gt;log from this pool
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * so we cannot use this log while free()ing the pool
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;large; l; l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_log_debug1&lt;/span&gt;(NGX_LOG_DEBUG_ALLOC, pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;log, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;free: %p&amp;#34;&lt;/span&gt;, l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;alloc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pool, n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.next; &lt;span style=&#34;color:#75715e&#34;&gt;/* void */&lt;/span&gt;; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n, n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.next) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_log_debug2&lt;/span&gt;(NGX_LOG_DEBUG_ALLOC, pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;log, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;free: %p, unused: %uz&amp;#34;&lt;/span&gt;, p, p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.end &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.last);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;large; l; l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;alloc) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_free&lt;/span&gt;(l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;alloc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pool, n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pool&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.next; &lt;span style=&#34;color:#75715e&#34;&gt;/* void */&lt;/span&gt;; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n, n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;d.next) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ngx_free&lt;/span&gt;(p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个函数首先调用了一系列用户定义的 &lt;code&gt;pool-&amp;gt;cleanup&lt;/code&gt; 链表中的函数，允许自定义回收一些特定的资源。然后对每一个 &lt;code&gt;pool-&amp;gt;large&lt;/code&gt; 链表中的内容分别释放，最后再把各个块中所有的内存整块释放。注意 &lt;code&gt;ngx_large_block_t&lt;/code&gt; 也是存在块中的，所以顺序不能反了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jia.je/programming/2017/11/30/run-cpp-in-jupyter-notebook/</link>
      <pubDate>Thu, 30 Nov 2017 18:07:10 +0800</pubDate>
      
      <guid>https://jia.je/programming/2017/11/30/run-cpp-in-jupyter-notebook/</guid>
      <description>&lt;p&gt;刚刚在 HN 上看到了这么一个文章：&lt;a href=&#34;https://blog.jupyter.org/interactive-workflows-for-c-with-jupyter-fe9b54227d92&#34;&gt;Interactive Workflows for C++ with Jupyter&lt;/a&gt; &lt;a href=&#34;https://news.ycombinator.com/item?id=15808809&#34;&gt;HN&lt;/a&gt; ，终于可以在 Jupyter Notebook 里跑 C++代码了，很开心，于是开始自己研究了起来怎么本地跑。&lt;/p&gt;
&lt;p&gt;首先当然是更新一波 jupyter，安装一波 cling：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip3 install -U jupyter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install cling
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后根据&lt;a href=&#34;https://github.com/root-project/cling/tree/master/tools/Jupyter&#34;&gt;官方教程&lt;/a&gt;里的要求执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /usr/local/share/cling/Jupyter/kernel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip3 install -e .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jupyter kernelspec install cling-cpp11
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jupyter kernelspec install cling-cpp14
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jupyter kernelspec install cling-cpp17
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jupyter kernelspec install cling-cpp1z
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果发现找不到&lt;code&gt;jupyter-kernelspec&lt;/code&gt;，遂重装了一下&lt;code&gt;jupyter-client&lt;/code&gt;这个包，果然就可以了。打开一个 notebook 测试：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;jupyter notebook
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后创建一个 C++14 的 Notebook，结果发现一直 Kernel rebooting，错误信息是说找不到&lt;code&gt;../Cellar/cling/0.5/lib/libclingJupyter.dylib&lt;/code&gt;。这一看就是路径处理的问题，当前目录肯定不是&lt;code&gt;/usr/local&lt;/code&gt;，肯定出现了什么问题，然后研究发现&lt;code&gt;cling-kernel.py&lt;/code&gt;中对&lt;code&gt;cling&lt;/code&gt;判断是否是个连接，如果是连接则按照连接去找&lt;code&gt;cling&lt;/code&gt;的安装目录，但是！没有考虑到这个连接是个相对路径的问题（Homebrew 你背锅吗）。于是我愉快地改了代码并提交了&lt;a href=&#34;https://github.com/root-project/cling/pull/198&#34;&gt;PR&lt;/a&gt;。修复了以后就可以用了。&lt;/p&gt;
&lt;p&gt;以下是一个小小的例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt; jupyter console --kernel cling-cpp14
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Jupyter console 5.2.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cling-X
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Out&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: char *s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;input_line_4:2:12: warning: ISO C++11 does not allow conversion from string literal to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;char *&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-Wwritable-strings&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; char *s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           ^
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Out&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: printf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello, world!Out&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Okay，大功告成！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用 CPUID 获取评测机器的 CPU</title>
      <link>https://jia.je/others/2017/10/30/use-cpuid-to-get-machine-cpu/</link>
      <pubDate>Mon, 30 Oct 2017 21:07:23 +0800</pubDate>
      
      <guid>https://jia.je/others/2017/10/30/use-cpuid-to-get-machine-cpu/</guid>
      <description>&lt;p&gt;受&lt;a href=&#34;https://zhuanlan.zhihu.com/p/28322626&#34;&gt;用 CPUID 检测各大 OJ 测评机所用的 CPU（以及日常黑 BZOJ）&lt;/a&gt;的启发，我决定去测试一下徐老师自己写的 OJ（名为 Tyche）所跑的机器是什么 CPU。于是我改造一下代码，用以下代码测评：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cpuid.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/time.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cpuid&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; func, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; sub, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __cpuid_count(func, sub, data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], data[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], data[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], data[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; str[&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cpuid(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80000002&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, data);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt;(str)[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[j];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;timeval&lt;/span&gt; stop, start;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gettimeofday(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;start, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        gettimeofday(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stop, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(stop.tv_usec &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start.tv_usec &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; (str[&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;##&lt;/span&gt;EDITME&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;##&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;经过测试，&lt;code&gt;usleep()&lt;/code&gt;和&lt;code&gt;clock()&lt;/code&gt;都被封杀，但是&lt;code&gt;gettimeofday()&lt;/code&gt;存活了下来。然后我就不断地&lt;code&gt;C-a&lt;/code&gt;上面的&lt;code&gt;###EDITME###&lt;/code&gt;，根据评测出来的时间推算出字符串，然后得到以下结果：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;0 ~ 7 : PADDING
8 73 I
9 110 n
10 116 t
11 101 e
12 108 l
13 40 (
14 82 R
15 41 )
16 32 SPC
17 67 C
18 111 o
19 114 r
20 101 e
21 40 (
22 84 T
23 77 M
24 41 )
25 32 SPC
26 105 i
27 51 3
28 45 -
29 50 2
30 49 1
31 50 2
32 48 0
33 32 SPC
34 67 C
35 80 P
36 85 U
37 32 SPC
38 64 @
39 32 SPC
40 51 3
41 46 .
42 51 3
43 48 0
44 71 G
45 72 H
46 122 z
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;连起来就是&lt;a href=&#34;https://ark.intel.com/zh-cn/products/53426/Intel-Core-i3-2120-Processor-3M-Cache-3_30-GHz&#34;&gt;这个 CPU&lt;/a&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Intel(R) Core(TM) i3-2120 CPU @ 3.30GHz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;相比之下，还是比 BZOJ 好哈哈哈（又黑 BZOJ）。后来有大神在群里建议，可以用字符串比较的方式，对了就让题目 AC，不对就 WA。这个方法更加适合手里已经知道了一些常见 CPUID 的返回字符串，这里就是这样。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一个代替 Pulse Secure 客户端的工具</title>
      <link>https://jia.je/others/2017/10/26/alternative-to-pulse-secure/</link>
      <pubDate>Thu, 26 Oct 2017 07:50:34 +0800</pubDate>
      
      <guid>https://jia.je/others/2017/10/26/alternative-to-pulse-secure/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://sslvpn.tsinghua.edu.cn&#34;&gt;清华的校外 VPN 服务&lt;/a&gt;使用的是 Pulse Secure，所以在外网我们需要在客户端上安装 Pulse Secure 才能使用内网的 info 和网络学堂等网站。但是 Pulse Secure 一是非自由软件二界面难看，所以我找到了一个代替它的工具：&lt;a href=&#34;http://www.infradead.org/openconnect/&#34;&gt;OpenConnect&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;安装后，输入以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo openconnect --user 你的学号 sslvpn.tsinghua.edu.cn --juniper --reconnect-timeout &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; --servercert sha256:398c6bccf414f7d71b6dc8d59b8e3b16f6d410f305aed7e30ce911c3a4064b31
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后输入你的 info 密码即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>分析一个我第一次见的素数测试函数</title>
      <link>https://jia.je/programming/2017/10/17/analysis-on-a-primality-test/</link>
      <pubDate>Tue, 17 Oct 2017 21:05:28 +0800</pubDate>
      
      <guid>https://jia.je/programming/2017/10/17/analysis-on-a-primality-test/</guid>
      <description>&lt;p&gt;今天逛到这个&lt;a href=&#34;http://blog.csdn.net/l04205613/article/details/6025118&#34;&gt;连接&lt;/a&gt;，发现其中的第四种素数判定方法很有意思：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;math.h&amp;gt;
int p[8]={4,2,4,2,4,6,2,6};
int prime(int n)
{
    int i=7,j,q;
    if(n==1)return 0;
    if(n==2||n==5||n==3)return 1;
    if(n%2==0||n%3==0||n%5==0)return 0;
    q=(int)sqrt(n);
    for(;i&amp;lt;=q;){
        for(j=0;j&amp;lt;8;j++){
            if(n%i==0)return 0;
            i+=p[j];
        }
        if(n%i==0)return 0;
    }
    return 1;
}
void main()
{
    int n;
    scanf(&amp;#34;%d&amp;#34;,&amp;amp;n);
    if(prime(n))puts(&amp;#34;Yes&amp;#34;);
    else puts(&amp;#34;No&amp;#34;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;仔细研究发现，这里利用的是这样的原理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;判断是不是 1, 2, 3, 5 及其倍数&lt;/li&gt;
&lt;li&gt;从 7 开始，不断考虑其是否是素数，那么，这个 p 是什么回事呢？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先把 p 的各个元素加起来，和为 30，然后就可以发现一个规律：
7 为质数，7+2=9 不是质数，7+4=11 为质数，11+2=13 为质数，13+2=15 为合数，15+2=17 为质数，17+2=19 为质数，19+2=21 为合数，21+2=23 为质数，23+2=25 为合数，25+2=27 为合数，27+2=29 为质数，29+1=31 为质数，31+2=33 为合数，33+2=35 为合数，35+2=37 为质数。
观察以上所有的合数，都含有 2 或者 3 或者 5 的因子，而 30 又是 2,3,5 的公倍数，也就是说，后面的素数模 30 的余数不可能是上面这些合数，而剩下的素数才可能是真正的素数，于是跳过了很多素数的判断。&lt;/p&gt;
&lt;p&gt;至于这个函数的性能如何，还需要进一步测试来进行判断。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于 scanf 和 scanf_s 的问题</title>
      <link>https://jia.je/programming/2017/10/17/on-scanf-and-scanf_s/</link>
      <pubDate>Tue, 17 Oct 2017 16:46:40 +0800</pubDate>
      
      <guid>https://jia.je/programming/2017/10/17/on-scanf-and-scanf_s/</guid>
      <description>&lt;p&gt;最近作为程设基础的小教员，收到很多同学的求助，关于&lt;code&gt;scanf&lt;/code&gt;和&lt;code&gt;scanf_s&lt;/code&gt;的问题已经遇到了两次，特此写一篇博文来叙述一下这个问题。&lt;/p&gt;
&lt;p&gt;一开始，有同学问我，&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;char a;
scanf(&amp;#34;%c&amp;#34;,&amp;amp;a);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为什么会报错？我说，vs 默认强制要求使用 scanf_s 函数，于是我建议这位同学把这个错误信息关掉了。嗯。经过百度，这位同学的问题解决了。&lt;/p&gt;
&lt;p&gt;后来，又有一位同学问我，&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;char a;
scanf_s(&amp;#34;%c&amp;#34;,&amp;amp;a);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;程序为什么会崩溃？我想了想，如果 scanf_s 和 scanf 是一样的行为，这段代码是没问题的。但 scanf_s 既然安全，必然是在字符串方面做了处理。这里的 char*勉强也算一个？网上一查，果然，应该写成&lt;code&gt;scanf_s(&amp;quot;%c&amp;quot;,&amp;amp;a,1);&lt;/code&gt;，字符串则要写成&lt;code&gt;scanf_s(&amp;quot;%s&amp;quot;,str,sizeof(str))&lt;/code&gt;，来保证缓冲区不会溢出。&lt;/p&gt;
&lt;p&gt;但是，这样解决这个问题又面临着不同的选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;学习&lt;code&gt;scanf_s&lt;/code&gt;和&lt;code&gt;scanf&lt;/code&gt;的不同，把所有&lt;code&gt;scanf&lt;/code&gt;换成&lt;code&gt;scanf_s&lt;/code&gt;并做相应的修改。
这样当然符合了语言进化的潮流，也会让 vs 闭嘴。但是，scanf_s 只有在 C11 标准中有，而且，根据&lt;a href=&#34;http://en.cppreference.com/w/c/io/fscanf&#34;&gt;cpprefrence.com 上关于 scanf 的描述&lt;/a&gt;，只有在&lt;code&gt;__STDC_LIB_EXT1__&lt;/code&gt;被定义且在&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/code&gt;之前&lt;code&gt;#define __STDC_WANT_LIB_EXT1__&lt;/code&gt;才能确保使用&lt;code&gt;scanf_s&lt;/code&gt;能使用，当然在 vs 较新版本中是默认可以使用的。但是，程设基础的作业是要丢到 oj 上的，而 oj 上的编译器不一定支持这些，所以这个选项不行。&lt;/li&gt;
&lt;li&gt;坚持用&lt;code&gt;scanf&lt;/code&gt;，自己按照题目要求保证缓冲区不溢出，同时让 vs 闭嘴。
网上已有&lt;a href=&#34;https://www.cnblogs.com/wangduo/p/5554465.html&#34;&gt;教程&lt;/a&gt;，已经讲的很全面了，大家可以根据这个教程把 vs 教训一顿。为了能在 oj 里跑，建议用里面的方法五到八。（个人最推荐在文件头添加&lt;code&gt;#define _CRT_SECURE_NO_WARNINGS&lt;/code&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以后再遇到这个问题，我就丢这个连接上来就好了咯。yeah！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一个搞笑的伸展树的 Wiki</title>
      <link>https://jia.je/others/2017/10/16/a-funny-wiki-of-splay-tree/</link>
      <pubDate>Mon, 16 Oct 2017 19:59:30 +0800</pubDate>
      
      <guid>https://jia.je/others/2017/10/16/a-funny-wiki-of-splay-tree/</guid>
      <description>&lt;p&gt;光哲同学在群里发了这个链接，特别搞笑，特此分享：
&lt;a href=&#34;https://baike.baidu.com/history/%E4%BC%B8%E5%B1%95%E6%A0%91/105576656&#34;&gt;伸展树 - 百度百科&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;伸展树（Spaly Tree，事实上在国内 IO 界常常被称作 Tajarn 发明的 Spaly Tree，与此同理的还有 Terap），也叫分裂树，是一种二叉排序树，它能在 O(n log n) 内完成插入、查找和删除操作。它由 Daniel Sleator 和 Robert Tajarn 发现，后者对其进行了改造。它的优势可以不断伸展枝干（一个月 2~3 次），从而使树冠散开，提高光合作用效率。木材坚硬，是重要的经济类乔木。与其他植物不同的是，伸展树可以进行出芽生殖，繁殖速度极快。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>回顾昨天的酒井知识竞赛</title>
      <link>https://jia.je/others/2017/10/16/review-on-yesterdays-jiujing-adi-contest/</link>
      <pubDate>Mon, 16 Oct 2017 10:36:28 +0800</pubDate>
      
      <guid>https://jia.je/others/2017/10/16/review-on-yesterdays-jiujing-adi-contest/</guid>
      <description>&lt;p&gt;昨天晚上，我作为蒟蒻组的一员在三教 2102 参加了酒井知识竞赛，并因此鸽掉了 TUNA 和 Lab mU 的迎新会 hhh，不过运气好拿到了二等奖的好成绩，获得 Paperang 便携打印机一台。中间遇到了好一些网络方面的知识，这对于没有记忆 OSI 模型的我无疑有巨大的难度。下面是几道比较有印象的题目：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以下哪个不是编程语言？
A. J B. L C. R D. K
这题不难，R 肯定对，J 见过，K 略微有印象，选 B&lt;/li&gt;
&lt;li&gt;IPv6 链路层地址解析的协议是？
A. ARP B. Neighbour Solicitation C. Neighbour Advertisement D. Neighbour Discovery
对于一个没研究过 IPv6 的人来说这只好蒙了。。。ARP 是 IPv4 时代的，ND(Neighbour Discovery 则是 IPv6 时代的新产物，把 ARP 和 ICMP 等协议的功能都包含了进来，并且有新的功能。之前样题里还出现过问 IPv6 中去掉了 Unicast,Anycast,Multicast,Broadcast 中的哪种，答案是 Broadcast。&lt;/li&gt;
&lt;li&gt;第一个把程序错误称做 bug 的是？
选项太多忘了，答案是 Grace Hopper，因为当时一只飞蛾意外飞入了机器导致了故障，后来慢慢就流传下来了。&lt;/li&gt;
&lt;li&gt;以下不是网络操作系统的是？
A. Windows NT B. OS/2 warp C. DOS D. Netware
当时我没见过 D，于是就选了。。。然后就挂了，Netware 是 Novell 开发的系统，OS/2 warp 当然是历史悠久的系统啦，而 DOS=Disk Operating System 所以没有“网络”二字。。。晕倒&lt;/li&gt;
&lt;li&gt;以下是用作局域网的协议是？
A. TCP/IP B. IPX/SPX C. NetBEUI D. RS-232-C
TCP/IP 当然不仅限于局域网，RS-232-C 是接口，当时蒙了 B 结果就对了，白白拿了 50 分哈哈哈。IPX/SPX 是 Novell 设计用在 Netware 系统上的局域网协议，NetBEUI 则是 NetBIOS 的一个历史遗留的一个“别称”。&lt;/li&gt;
&lt;li&gt;姚期智的夫人给谁取了中文名？
当然是 Donald Ervin Knuth 啦！高德纳万岁！&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>华为随行 WiFi 2 mini 开箱</title>
      <link>https://jia.je/unboxing/2017/08/08/huawei-portable-wifi/</link>
      <pubDate>Tue, 08 Aug 2017 20:38:00 +0800</pubDate>
      
      <guid>https://jia.je/unboxing/2017/08/08/huawei-portable-wifi/</guid>
      <description>&lt;p&gt;前段时间，我办了 4G 升级，移动送了一张副卡，有不少免费的流量，由于我的手机是 iPhone 不支持双卡，老爸就借了我他的 GlocalMe 当成 MiFi 来用，不过呢 GlocalMe 放在这里当然是大材小用了，所以我就网购了华为随行 WiFi 2 mini，把我的副卡装上一个壳放进去就可以了！把这个 MiFi 插入电脑，会弹出一个目录，里面有 Win/Mac 的驱动安装文件，打开后在网络设置里就有 HUAWEI_MOBILE 的连接了，并自动打开网络配置界面。设置一下 SSID 和密码，就能正常使用了，手机连上也很正常，手机上可以下载 HUAWEI HiLink 来配置 MiFi，挺爽的。随赠的有联通的上网卡，不过我准备在北京买个上网卡放 MiFi 里面用。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Farewell, Flash</title>
      <link>https://jia.je/news/2017/07/26/farewell-flash/</link>
      <pubDate>Wed, 26 Jul 2017 22:02:20 +0800</pubDate>
      
      <guid>https://jia.je/news/2017/07/26/farewell-flash/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s time to say goodbye to Flash.
&lt;a href=&#34;https://news.ycombinator.com/item?id=14848786&#34;&gt;HN #1&lt;/a&gt;
&lt;a href=&#34;https://news.ycombinator.com/item?id=14854618&#34;&gt;HN #2&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>In macOS Sierra, Karabiner-Elements finally support complex modifications</title>
      <link>https://jia.je/system/2017/06/15/macos-sierra-karabiner-finally-support-complex-modifications/</link>
      <pubDate>Thu, 15 Jun 2017 17:22:20 +0800</pubDate>
      
      <guid>https://jia.je/system/2017/06/15/macos-sierra-karabiner-finally-support-complex-modifications/</guid>
      <description>&lt;p&gt;In favor of this &lt;a href=&#34;https://github.com/tekezo/Karabiner-Elements/commit/f37815dcf58fd1e91d3cd3d154c2ed3749a2510e&#34;&gt;commit&lt;/a&gt;, Karabiner-Elements now supports the much welcomed yet long-lost feature, namely complex modifications that enable users to trigger complex keypress.&lt;/p&gt;
&lt;p&gt;Now I can achieve this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;If I press &amp;lt;Enter&amp;gt;, then:
1. If &amp;lt;Enter&amp;gt; is pressed alone, then send &amp;lt;Enter&amp;gt;.
2. If &amp;lt;Enter&amp;gt; is pressed along with other keys, then send &amp;lt;Control&amp;gt; + Other.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By adding this code to ~/.config/karabiner/karabiner.json :&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;complex_modifications&amp;#34;: {
    &amp;#34;rules&amp;#34;: [
        {
            &amp;#34;manipulators&amp;#34;: [
                {
                    &amp;#34;description&amp;#34;: &amp;#34;Change return_or_enter to left_control. (Post return_or_enter if pressed alone)&amp;#34;,
                    &amp;#34;from&amp;#34;: {
                        &amp;#34;key_code&amp;#34;: &amp;#34;return_or_enter&amp;#34;,
                        &amp;#34;modifiers&amp;#34;: {
                            &amp;#34;optional&amp;#34;: [
                                &amp;#34;any&amp;#34;
                            ]
                        }
                    },
                    &amp;#34;to&amp;#34;: [
                        {
                            &amp;#34;key_code&amp;#34;: &amp;#34;left_control&amp;#34;
                        }
                    ],
                    &amp;#34;to_if_alone&amp;#34;: [
                        {
                            &amp;#34;key_code&amp;#34;: &amp;#34;return_or_enter&amp;#34;
                        }
                    ],
                    &amp;#34;type&amp;#34;: &amp;#34;basic&amp;#34;
                }
            ]
        }
    ]
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;in one of profiles.&lt;/p&gt;
&lt;p&gt;Note: the snippet above is adopted from &lt;a href=&#34;https://github.com/tekezo/Karabiner-Elements/blob/61df6ff04ce34adf1cbb00cfd7c5dd49c14c0889/examples/spacebar_to_shift.json&#34;&gt;this example&lt;/a&gt;. You can explore more examples since the GUI is not updated accordingly yet.&lt;/p&gt;
&lt;p&gt;Important: Until NOW (2017-06-15), this feature is only implemented in beta versions of Karabiner-Elements (at least 0.91.1).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>等时圆</title>
      <link>https://jia.je/others/2016/08/02/dengshiyuan/</link>
      <pubDate>Tue, 02 Aug 2016 16:03:41 +0800</pubDate>
      
      <guid>https://jia.je/others/2016/08/02/dengshiyuan/</guid>
      <description>&lt;p&gt;最近学校老师讲了一下等时圆。先从这个题讲起：&lt;/p&gt;
&lt;p&gt;在同一个地方向不同倾角光滑斜面用不同的初速度上滑，到达最高点所用时间相等，求最高点的轨迹是什么？&lt;/p&gt;
&lt;p&gt;A. 直线 B. 椭圆 C. 抛物线 D. 圆&lt;/p&gt;
&lt;p&gt;当时做这个题目的第一想法是把 x 和 y 座标表示出来：&lt;/p&gt;
&lt;p&gt;$$
\frac{1}{2}gsin\theta{}t^2=l,
y=lsin\theta,
x=ycot\theta
$$&lt;/p&gt;
&lt;p&gt;然后就傻眼了，并得不到 x 与 y 的关系式。当然了可以求出几个点，强行带入二次曲线通式求解。不过想了想还是用解析几何的方法去做吧：&lt;/p&gt;
&lt;p&gt;$$
\frac{1}{2}gsin\theta{}t^2=\sqrt{x^2+y^2},
sin\theta=\frac{y}{\sqrt{x^2+y^2}}
$$&lt;/p&gt;
&lt;p&gt;这么一代入，显然是圆。但既然这是物理题，可不可以用物理方法做呢？&lt;/p&gt;
&lt;p&gt;可以，这就是等时圆。&lt;/p&gt;
&lt;p&gt;啥叫等时圆？&lt;/p&gt;
&lt;p&gt;等时圆就是，在一个光滑圆环上选择任意一点，让一个小球从这个点沿着光滑直杆到圆的最低点，无论这个点在哪里（最低点不算哈），时间都是一样的。怎么证明？&lt;/p&gt;
&lt;p&gt;很简单：设小球与最低点连线与数值方向上夹角为$$\theta$$，那么&lt;/p&gt;
&lt;p&gt;$$
s=2Rcos\theta,
\frac{1}{2}gcos\theta{}t^2=s
$$&lt;/p&gt;
&lt;p&gt;你会发现 t 与$$\theta$$无关。证明完毕。&lt;/p&gt;
&lt;p&gt;其实也可以倒过来：从圆的最高点往各个方向下滑，到达圆周时间相等。&lt;/p&gt;
&lt;p&gt;好了，到此为止内容都没什么，但你会想问这和前面那道题目有什么关系呢？这怎么等时圆？重力往下诶。运动可是往右上方。&lt;/p&gt;
&lt;p&gt;Here comes the black magic :)&lt;/p&gt;
&lt;p&gt;我们考虑向下滑到最低点的那个等时圆，在这个圆周上滑倒最低点的时间都相等。好，我们把这个图沿着竖直方向旋转 180 度形成一个球，想想这个球上每一个点到最低点时间是不是也一样？那么考虑逆过程，让小球从斜面上滑下来，我对刚才的球体再竖着切一刀，得到的平面不就是题目中那个吗？得证。&lt;/p&gt;
&lt;p&gt;当然了最好能有动画说明，限于本人时间问题暂时不提供 ^_^&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jia.je/programming/2016/07/23/a-good-way-to-show-git-diff-for-compressed-files/</link>
      <pubDate>Sat, 23 Jul 2016 14:46:41 +0800</pubDate>
      
      <guid>https://jia.je/programming/2016/07/23/a-good-way-to-show-git-diff-for-compressed-files/</guid>
      <description>&lt;p&gt;I have found a good way to track changes in .gz files:
Add these to ~/.gitconfig:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;[core]
  attributesFile = ~/.gitattributes
[diff &amp;#34;zip&amp;#34;]
  textconv = unzip -p
  binary = true
[diff &amp;#34;gz&amp;#34;]
  textconv = gzcat
  binary = true
[diff &amp;#34;bz2&amp;#34;]
  textconv = bzcat
  binary = true
[diff &amp;#34;xz&amp;#34;]
  textconv = xzcat
  binary = true
[diff &amp;#34;tar&amp;#34;]
  textconv = tar -O -xf
  binary = true
[diff &amp;#34;tar-bz2&amp;#34;]
  textconv = tar -O -xjf
  binary = true
[diff &amp;#34;tar-gz&amp;#34;]
  textconv = tar -O -xzf
  binary = true
[diff &amp;#34;tar-xz&amp;#34;]
  textconv = tar -O -xJf
  binary = true

[diff &amp;#34;odf&amp;#34;]
  textconv = odt2txt
[diff &amp;#34;pdf&amp;#34;]
  textconv = pdfinfo
[diff &amp;#34;bin&amp;#34;]
  textconv = hexdump -v -C
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And these to ~/.gitattributes:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;*.tar diff=tar
*.tar.bz2 diff=tar-bz2
*.tar.gz diff=tar-gz
*.tar.xz diff=tar-xz
*.bz2 diff=bz2
*.gz diff=gz
*.zip diff=zip
*.xz diff=xz

*.odf diff=odf
*.odt diff=odf
*.odp diff=odf
*.pdf diff=pdf
*.exe diff=bin
*.png diff=bin
*.jpg diff=bin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And then you can &lt;code&gt;git diff&lt;/code&gt; for .gz files.&lt;/p&gt;
&lt;p&gt;Codes are adapted from &lt;a href=&#34;https://gist.github.com/RsrchBoy/11197048&#34;&gt;https://gist.github.com/RsrchBoy/11197048&lt;/a&gt;
and &lt;a href=&#34;https://git.wiki.kernel.org/index.php/GitTips#Getting_a_plain-text_diff&#34;&gt;https://git.wiki.kernel.org/index.php/GitTips#Getting_a_plain-text_diff&lt;/a&gt; and &lt;a href=&#34;https://gist.github.com/kbaird/2654115&#34;&gt;https://gist.github.com/kbaird/2654115&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jia.je/life/2016/07/07/the-end-of-senior-two/</link>
      <pubDate>Thu, 07 Jul 2016 18:44:22 +0800</pubDate>
      
      <guid>https://jia.je/life/2016/07/07/the-end-of-senior-two/</guid>
      <description>&lt;p&gt;Finally the end of Senior 2 arrives. I&amp;rsquo;m on the way to Senior 3.
The summer vacation is rather short which is really common
in China. These days I have been diving into Emacs by subscribing
both emacs and emacs-devel mailing list. It contributes to my
English as well. I can learn a lot of new words and expression
thanks to the nice and convenient feature of looking up a word
in iOS.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jia.je/programming/2016/05/22/exciting-new-software-updates/</link>
      <pubDate>Sun, 22 May 2016 07:47:16 +0800</pubDate>
      
      <guid>https://jia.je/programming/2016/05/22/exciting-new-software-updates/</guid>
      <description>&lt;p&gt;Just got a piece of great news: GHC 8.0.1 is out! See the announcement [here][http://article.gmane.org/gmane.comp.lang.haskell.ghc.devel/11928].&lt;/p&gt;
&lt;p&gt;So excited! And Emacs 25 release will be out soon. Using Emacs 25.0.94 now. Many new features available. See [this][http://puntoblogspot.blogspot.com/2016/05/emacs-251-news.html] for more information.&lt;/p&gt;
&lt;p&gt;Recently I have finally started to use mu4e and gnus. What makes it truly great is that they integrate org, bbdb and so on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jia.je/programming/2016/04/09/interesting-links/</link>
      <pubDate>Sat, 09 Apr 2016 06:17:34 +0800</pubDate>
      
      <guid>https://jia.je/programming/2016/04/09/interesting-links/</guid>
      <description>&lt;p&gt;Having a bad cold. Really annoying.&lt;/p&gt;
&lt;p&gt;Okay, here comes the interesting links:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://glyph.twistedmatrix.com/2015/11/editor-malware.html&#34;&gt;https://glyph.twistedmatrix.com/2015/11/editor-malware.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://kitchingroup.cheme.cmu.edu/blog/2016/04/07/Writing-hy-code-from-hy-code/&#34;&gt;http://kitchingroup.cheme.cmu.edu/blog/2016/04/07/Writing-hy-code-from-hy-code/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/holomorph/transmission&#34;&gt;https://github.com/holomorph/transmission&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bergey/org-babel-diagrams&#34;&gt;https://github.com/bergey/org-babel-diagrams&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ess.r-project.org/&#34;&gt;http://ess.r-project.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://projects.haskell.org/diagrams/&#34;&gt;http://projects.haskell.org/diagrams/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jia.je/programming/2016/04/03/tips-on-git-shallow-clone/</link>
      <pubDate>Sun, 03 Apr 2016 14:38:09 +0800</pubDate>
      
      <guid>https://jia.je/programming/2016/04/03/tips-on-git-shallow-clone/</guid>
      <description>&lt;p&gt;Just learned a new tip on git shallow clone. As you know, some repository are really really large, such as emacs and linux. Cloning is slow and unstable. And there is no way to pause and resume a git clone. So I use shallow clone to clone them. But what if I want to clone other branches?&lt;/p&gt;
&lt;p&gt;From here: &lt;a href=&#34;http://stackoverflow.com/a/27393574/2148614&#34;&gt;http://stackoverflow.com/a/27393574/2148614&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote set-branches origin &amp;#39;*&amp;#39;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jia.je/speech/2016/03/19/listen-and-write-subtitles-cameron/</link>
      <pubDate>Sat, 19 Mar 2016 20:23:46 +0800</pubDate>
      
      <guid>https://jia.je/speech/2016/03/19/listen-and-write-subtitles-cameron/</guid>
      <description>&lt;p&gt;Here is the subtitle:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;We meet in a week that could change the United Kingdom for ever. Indeed, it could end the United Kingdom as we know it. On Thursday, Scotland votes, of the future of our country is at stake. On Friday, people could be living in a different country with a different place in the world and the different future ahead of it. This is the decision that could break up our family of nations and rips Scotland from rest of the United Kingdom. And we must be very clear, there is no going back from this. No re-run. This is a once and for all decision. If Scots vote &amp;#39;yes&amp;#39;, the U.K. will split and we will go on separate ways forever. When people vote on Thursday, they are not just voting for themselves, but for their children and grandchildren and the generations beyond. So I want to speak very directly to the people this country today about what is at stake. I believe I speak for millions of people across England, Wales, and North Ireland and many in Scotland too who would be utterly heart-broken by the break-up of the United Kingdom, utterly heart-broken to wake up on Friday morning, to the end of the country we love, to know that Scots will no longer join with the English, welsh-man, Irish, in the army, navy, and air force. [???] U.K. white celebrations and commemorations [???] U.K.&amp;#39;s fourteen teams in the Olympics to the British lines. The United Kingdom, would be no more, no U.K. pension, no U.K. passports, no U.K. pound. The greatest example of the [???] in the world have ever known of openness of people of different nationalities and face coming together as one, would be no more. It would be the end of the country that lodged the enlightenment(?) and abolished the slavery and drove the industrial revolution and defeated fascism. The end of a country that people around the world respect and admire. The end of a country that all of us call home. And you know what, we built this home together. It&amp;#39;s only become Great Britain, because of the greatness of Scotland because of the thinkers the writers the artists the leaders the soldiers and inventors that make this country what it is. It&amp;#39;s Alexander Fleming and David Hume J.K. Rowling Andy Murray and all the millions of people who play the part in this extraordinarily success story. The Scots who let the charge on pensions and the [???] and social justice we did all this together. For the people of Scotland to walk away now, we will be like painstakingly building a home and then [???] the door and throwing away the keys. So I would say that everyone voting on Thursday, please remember this is just [???] country. This is the United Kingdom. This is our country. And you know what makes it a truly great country, it is not a [???]. It is our values. British values. Fan of freedom, justice. The values that say wherever you are whoever you are, your life has dignity and worth. The values that say we don&amp;#39;t work on by when the people are sick. We do not ask for your credit card in the hospital. We don&amp;#39;t turn our backs when you get old and frail. We don&amp;#39;t turn a blind eye or cold heart to people around the world from repair and cry and for help. This is what Britain means. This is what makes our country &amp;#39;Yes the greatest on Earth&amp;#39;! And it is why millions of us could not bear to see that country ending for good for ever on Friday. Now i know that many people across Scotland were planning to vote yes. I understand why this might sound appealing. It is the promise of something different. I also know that the people who running the &amp;#39;yes&amp;#39; campaign painting a picture of Scotland that is better than everywhere. And they can be good painting the picture. But when something looks too good to be true, that is usually because it is. And it&amp;#39;s my duty to be clear about the lightly consequences of a &amp;#39;yes&amp;#39; vote. Independence, would not be a trial separation but would be a painful divorce. As a Prime Minister, I have to tell you what that would mean. It would mean we no longer share the same currency. It would mean the arm forces we built up together over centuries being splitted up for ever. It would mean our pension funds being sliced up at some cost. It would mean the borders we have would become international and may no longer be so easily crossed. It would mean the automatic support that you currently get from British embassies when you are traveling around world the that would come to end. It would mean over half of Scottish [???] suddenly from one day to the next begin provided by banks in a foreign country. It would mean the interest rates in Scotland are no longer set by the bank with England&amp;#39;s robust ability and security that promises. And it would mean for many banks that remain in Scotland, if they ever gotten to travel, it will be Scotish taxpayers and Scottish taxpayers and loan, that will bare the costs. It would mean that we no longer pull exhausted across the whole of out United Kingdom to pay for institutions [???] national health service or our welfare system. This is what guess work, there are no question marks, no maybe this, or maybe that. The nationalists want to break up U.K. funding on pensions, the U.K. funding on health care, the U.K. funding and comprehensive protection on national security. These are the facts. This is what would happen and end to the things that we should share together. And people in Scotland must know these facts before they make this once and for all decision. And one of the consequences is not to scare [???]. It is like warning a friend about the decision that they might take that will affect the rest of their lives and the lives of their children. I [???] this because I don&amp;#39;t want the people of the Scotland to be sold a dream that disappears. Now I know that some people say we have heard about the risks and uncertainties, but we still want change. And look, the United Kingdom is not a perfect country. The country is, of course, constantly changing and improve people&amp;#39;s lives. No one is content when there are still children living in poverty. No one is content when there are people struggling and the young people not reaching their full potential. And yes, of course, every political party is different, but all of us, all of us, conservatives, labor, [???], nationalists, we are all on a constant mission to change our country for the better. The question is, how to you get that change. And for me, it is simple. You don&amp;#39;t get the change you want, by ripping your country apart. You don&amp;#39;t get change by underlying your economy and damaging your businesses and diminishing your place in the world. But you can&amp;#39;t get real concrete change on Thursday. If you vote &amp;#39;no&amp;#39;, businesses usual is not on the [???] paper. The status clown is gone. The campaign has swepted away. There is no going back to the way things were. A vote for &amp;#39;no&amp;#39;, means real change. If we [???] that change in practical terms, with a plan and a process. If we gotta know vote on Thursday that will trigger a major unpresidentive program of devolution with the [???] powers for the Scottish [???]. Major new powers will protest spending. Some welfare services will have agreed that time table for that stronger Scottish [???], a timetable for bringing that new powers that will go ahead in frozen [???]. White paper by November put into draft [???] by January, this is the timetable that is now agreed by all the main political parties in [???]. And I am prepared to work with all the main parties to deliver this during 2015. So a &amp;#39;no&amp;#39; vote actually means faster, fairly, safer and better change. And this is vital point. Scotland is not a observer in this fairs of this country. Scotland is shaping and changing the United Kingdom for the better. Also did they [???] at any point in the last three hundred years. And Scotland will continue to help shape the constitution of our country. And Scottish people who enjoys the [???]  without losing the U.K. pension, the U.K. pound and the U.K. passport. Real change is Scotland&amp;#39;s for the taking. The [???] and make [???] decisions but with this security and being in the United Kingdom and with idol risks of [???] alone. It is the both well or both worse. The Scotland&amp;#39;s identity is your [???] strong Scottish culture, strong Scottish art, and strong [???] Scotland. And in the last fifteen years, you built a strong British [???]. Not all [???] institutions but a permanent one. So the vote on Thursday, it is not about whether Scotland is a nation. Scotland is a proud strong successful nation. The vote on Thursday is about two competing nations for Scotland&amp;#39;s future. And that&amp;#39;s the nationalist&amp;#39;s vision. Narrowing down, going alone, breaking all ties with the United Kingdom. Or there is the patriotic vision, they strongs Scottish nation allied to the rest of the United Kingdom with its own strong Scottish Parliament. And it&amp;#39;s hard. And with the benefit of working together in the U.K on [???] on pensions on health care funding, currency and interest rates. It is really the best of both wills. And it&amp;#39;s the best way to get real change and secure a better future for your children and your grandchildren which all this vital debate is all about. [Clap Drink Water] And speaking of family, there is quite simply how I feel about all of this. We&amp;#39;re a family. The United Kingdom is not one nation. We are four nations in a single country. That could be difficult but it is wonderful. Scotland, England, Welsh, North Ireland, different nations with individual identities competing with each other, even in time in raging each other. But It still mean so much stronger together. We&amp;#39;re a family of nations. And why should the generations of that family be forced to choose whether to identiy only with their emperor or only with London. Why should they have to choose which embassy they want to go to when they are in trouble abroad. Or pack that passport when they go to see friends, loved ones and family. A family is not a compromise or second best. It is the magical identity that makes us more together than we can ever be apart. So please, do not break this family apart. In human relations, it is almost no good thing to turn away from each other to put up walls or score new lines on the map. Why should we take one Great Britain and turn it into separate smaller nations. What is that an answer to? How will that help ambitious young people who wanna make the mock on the world. Or [???] just want security. Or the family relying on jobs that will made in the U.K. Let no one fool you, that &amp;#39;yes&amp;#39; is a positive vision. It is about dividing people. It is about closing doors. It is about making forigners our friends and family. That is not a optimistic vision. [Clap] The optimistic vision is about our family of nations staying together. Therefore, each other in the hard times, coming through the better times, we&amp;#39;re just pulled through the great reception together. If we&amp;#39;re not moving forward together, the road had been longer but it is finally lead upwards. And that&amp;#39;s why I ask you to vote &amp;#39;no&amp;#39; to walking away. Vote &amp;#39;no&amp;#39; &amp;amp; you are voting for a bigger and broader and better future of Scotland. And you are investing in the future for your children and grandchildren. So this is our message to the people of Scotland: we want you to stay. Head hard and sow we want you to stay. Please don&amp;#39;t mix up the temporary and permanent. Please don&amp;#39;t think I am frustrated with politics right now and I just walk out of the door and never come back. If you don&amp;#39;t like me, I won&amp;#39;t be here for ever. If you don&amp;#39;t like this government, it won&amp;#39;t last for ever. But if you leave the United Kingdom, that will be for ever. Yes, the different parts of the U.K. do not always see eye to eye. Yes we need change, we&amp;#39;ll deliver it. But to get that change together bright future would don&amp;#39;t need to tear our country apart. [Yeah and Clap] In two days&amp;#39; time, this long campaign will be to an end. And you stand on the [???] of the billing board. I hope you ask yourself this: will my family and I truly be better off? By going alone? Will we really be more save and secure? Do I really want to turn my back on the rest of Britain? And why it is that so many people across the world asking why would Scotland want to do that? Why? And if you don&amp;#39;t know the answers of these questions, then please vote &amp;#39;no&amp;#39;. At the end of the day, all the eyes on this campaign can be rejuiced to a single fact. We are better together. As you reach your final decision, please, please, don&amp;#39;t let anyone tell you you can&amp;#39;t be a pride Scot and a pribe Brit. [Clap] Please, don&amp;#39;t lose faith in what this country is and what we can be. Don&amp;#39;t forget what a great United Kingdom you are a part of. Don&amp;#39;t turn you back to what is the best family in the nations in the world. And the best hope for your family in this world. So please from all of us, vote to stick together, vote to stay, vote to save our United Kingdom. Thank you. [Clap and The End].
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jia.je/logo/2016/03/13/logo-is-a-lisp-dialect/</link>
      <pubDate>Sun, 13 Mar 2016 09:24:28 +0800</pubDate>
      
      <guid>https://jia.je/logo/2016/03/13/logo-is-a-lisp-dialect/</guid>
      <description>&lt;p&gt;Most of us have learnt how to use PCLogo to draw some graphics. Logo is a dialect of Lisp in fact, so most of us used a Lisp dialect at a early time! For some people, it is earlier than C++. Cool.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jia.je/programming/2016/03/09/some-interesting-links/</link>
      <pubDate>Wed, 09 Mar 2016 22:10:31 +0800</pubDate>
      
      <guid>https://jia.je/programming/2016/03/09/some-interesting-links/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m here to share some interesting links. I do not have much time writing the blog now.&lt;/p&gt;
&lt;p&gt;Recently I have been working on CodeFalling/MacGesture on Github. If you are interested in it, go and have a look.&lt;/p&gt;
&lt;p&gt;Here are the links to share:
&lt;a href=&#34;https://twitter.com/PoolpOrg/status/694593152670437376&#34;&gt;https://twitter.com/PoolpOrg/status/694593152670437376&lt;/a&gt;
&lt;a href=&#34;https://github.com/wellle/targets.vim&#34;&gt;https://github.com/wellle/targets.vim&lt;/a&gt;
&lt;a href=&#34;http://thecodelesscode.com/case/225&#34;&gt;http://thecodelesscode.com/case/225&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/zhangyuze320602/status/706457155763712000&#34;&gt;https://twitter.com/zhangyuze320602/status/706457155763712000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have done reading the biography of Steve Jobs. Great book.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Studio 手工更新小记</title>
      <link>https://jia.je/csdn/android-studio-manual-update/</link>
      <pubDate>Sat, 06 Dec 2014 16:46:38 +0800</pubDate>
      
      <guid>https://jia.je/csdn/android-studio-manual-update/</guid>
      <description>&lt;p&gt;迁移自本人在 CSDN 上的博客：https://blog.csdn.net/build7601/article/details/41776599&lt;/p&gt;
&lt;p&gt;因为长时间不更新 Android Studio，回头一看，我的版本才 135.1339820，最新版本都 135.1626825 去了，我就萌生了更新的念头。。&lt;/p&gt;
&lt;p&gt;首先，我尝试调用 update_studio.sh。。。。。但是！！404 Not Found！！看来版本跨度太大无法打补丁了呢。。&lt;/p&gt;
&lt;p&gt;那只好看看 &lt;a href=&#34;https://dl.google.com/android/studio/patches/updates.xml&#34;&gt;https://dl.google.com/android/studio/patches/updates.xml&lt;/a&gt; 这个里面了，找到我的版本号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;channel&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AI-0-beta&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Android Studio updates&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;status=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;beta&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;url=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://tools.android.com/recent&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;feedback=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://code.google.com/p/android/issues/entry?template=Android+Studio+bug&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;majorVersion=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;build&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;number=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;135.1623071&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;version=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.9.9&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;message&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;![CDATA[
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;html&amp;gt; A new Android Studio 0.9.9 is available in the beta channel.&amp;lt;br&amp;gt; This patch will allow you to update from 0.x to 1.x.&amp;lt;br&amp;gt; After updating, please check for updates again to install 1.0 RC.&amp;lt;p/&amp;gt; &amp;lt;/html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/message&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;button&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Download&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;url=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://developer.android.com/sdk/installing/studio.html&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;download=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;button&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Release Notes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;url=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://tools.android.com/recent&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;patch&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;from=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;135.1339820&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;176&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 0.8.6 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;patch&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;from=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;135.1404660&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;176&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 0.8.9 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;patch&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;from=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;135.1446794&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;161&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 0.8.11 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;patch&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;from=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;135.1503853&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;90&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 0.8.12 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;patch&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;from=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;135.1525417&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;89&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 0.8.13 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;patch&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;from=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;135.1538390&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;89&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 0.8.14 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;patch&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;from=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;135.1551333&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;71&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 0.9.0 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;patch&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;from=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;135.1561280&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;71&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 0.9.1 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;patch&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;from=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;135.1569493&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;71&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 0.9.2 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;patch&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;from=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;135.1585741&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;71&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 0.9.3 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/channel&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还好还好，差点就升不上去了。。。&lt;/p&gt;
&lt;p&gt;立马下载 https://dl.google.com/android/studio/patches/AI-135.1339820-135.1623071-patch-mac.jar ..也是大，差不多和重新下载一样大了。。&lt;/p&gt;
&lt;p&gt;进入 Android Studio 目录，输入 java -cp AI-135.1339820-135.1623071-patch-mac.jar com.intellij.updater.Runner install . （记住后面的。表示安装目录）。&lt;/p&gt;
&lt;p&gt;弹出窗口，升级成功，yeah！&lt;/p&gt;
&lt;p&gt;以后要想用 patch 升级，一定要尽快啊～&lt;/p&gt;
&lt;p&gt;吐槽一下 update_studio.sh 的编写人，我要改进一下他的脚本。。升不上去太挫了。。&lt;/p&gt;
&lt;p&gt;题外话：&lt;/p&gt;
&lt;p&gt;打完补丁，出现 Java not found 错误，发现我的 java 版本是 Oracle1.8，而他要的是 Apple1.6.。。那我只好安装一下，然后呢？就好了！！！！！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>@微信 SDK 开发者，发现一个 BUG~</title>
      <link>https://jia.je/csdn/weixin-sdk-bug/</link>
      <pubDate>Mon, 06 Oct 2014 09:18:19 +0800</pubDate>
      
      <guid>https://jia.je/csdn/weixin-sdk-bug/</guid>
      <description>&lt;p&gt;迁移自本人在 CSDN 上的博客：https://blog.csdn.net/build7601/article/details/39826065&lt;/p&gt;
&lt;p&gt;经过测试，发现微信客户端登录 SDK 有一个 BUG。注：目前只在 iOS 上测试过，可以重现。&lt;/p&gt;
&lt;p&gt;BUG 重现&lt;/p&gt;
&lt;p&gt;1.做一个可以用微信登陆的软件，先安装到设备。
2.更改 project 的 Bundle Identifier，只更改大小写，重新安装到设备。P.S.实际情况是包名大小写修改过引发这个问题。
3.打开第二个安装的 APP，选择微信登陆，跳转到微信。
4.点击微信登陆，则会跳转到第一个 APP 中，而不会跳转到第二个 APP。&lt;/p&gt;
&lt;p&gt;我的 BUG 分析&lt;/p&gt;
&lt;p&gt;这可能是因为，微信 sdk 传到微信的是一个 bundle identifier+回调函数地址，回调时找到另一个 APP 再执行回调。
可能在某处进程的名称不分大小写，按照顺序找到了第一个去了。一旦两个 APP 版本不一致，可能执行到空的地址甚至发生不可预测的行为。
经过测试，发现同一样的版本的 APP 也发生了崩溃。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用数学方法 &#43; 数学软件去做一个物理题~</title>
      <link>https://jia.je/csdn/math/</link>
      <pubDate>Sat, 20 Sep 2014 17:03:17 +0800</pubDate>
      
      <guid>https://jia.je/csdn/math/</guid>
      <description>&lt;p&gt;迁移自本人在 CSDN 上的博客：https://blog.csdn.net/build7601/article/details/39433177&lt;/p&gt;
&lt;p&gt;经过测试，发现微信客户端登录 SDK 有一个 BUG。注：目前只在 iOS 上测试过，可以重现。&lt;/p&gt;
&lt;p&gt;原题：&lt;/p&gt;
&lt;p&gt;跳伞运动员在下落过程中，假定伞所受空气阻力大小跟下落速度的平方成正比，即 F= kv2，比例系数 k=20N·s2/m2，跳伞运动员与伞的总质量为 72 kg，起跳高度足够高，则：（g 取 10 m/s2）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;跳伞运动员在空中做什么运动？收尾速度多大？&lt;/li&gt;
&lt;li&gt;当速度达到 4 m/s时，下落加速度是多大？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;做法：&lt;/p&gt;
&lt;p&gt;我拿出我的数学大杀器，直接受力分析 + 牛顿第二定律得出 a=g-k/m&lt;em&gt;v&lt;/em&gt;v.
我一看，这转化成数学不就是 f&amp;rsquo;&amp;rsquo;(t)=10-5/18*f&amp;rsquo;(t)^2, f(0)=0, f&amp;rsquo;(0)=0，喜闻乐见的微分方程啊哈哈！&lt;/p&gt;
&lt;p&gt;直接丢到各种数学软件，我用了&lt;a href=&#34;http://www.wolframalpha.com/input/?i=f%27%27%28t%29%3D10-5%2F18*f%27%28t%29%5E2%2C+f%280%29%3D0%2C+f%27%280%29%3D0&#34;&gt;Wolfram|Alpha&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;瞬间得到答案：
f(t) = -6/5 (5 t-3 log(e^(10 t/3)+1)+log(8))
yeah~&lt;/p&gt;
&lt;p&gt;看看上面那个网址里面下面的函数图像，表示第一题可以秒杀~&lt;/p&gt;
&lt;p&gt;好的，至于第二题，因为速度为 4，则可以写出：f&amp;rsquo;(t)=4 的方程，输入 d(-6/5 (5 t-3 log(e^(10 t/3)+1)+log(8)))/dt=4
解出
t = (3 log(5))/10
带入 f&amp;rsquo;&amp;rsquo;(t)，输入 diff(diff(-6/5 (5 t-3 log(e^(10 t/3)+1)+log(8)),t),t),t=(3 log(5))/10，
得 a=5.5556.&lt;/p&gt;
&lt;p&gt;大功造成~&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>写了一个程序，分析各个源文件之间的 include 关系。</title>
      <link>https://jia.je/csdn/include-relationship/</link>
      <pubDate>Sun, 06 Jul 2014 16:34:44 +0800</pubDate>
      
      <guid>https://jia.je/csdn/include-relationship/</guid>
      <description>&lt;p&gt;迁移自本人在 CSDN 上的博客：https://blog.csdn.net/build7601/article/details/37343993&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/20140706162823328.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;最左边是 expat，上面 zlib，左下角 mxml，中间最恶心的是 lua，右边的是 jpeg。&lt;/p&gt;
&lt;p&gt;讲讲大概思路：&lt;/p&gt;
&lt;p&gt;1.扫描源文件，这里判断最简单的#include，然后建立关系。&lt;/p&gt;
&lt;p&gt;2.把这些作为一个个 body 加到 box2d 的世界里，让物理解决这一切！！&lt;/p&gt;
&lt;p&gt;3.然后把有 include 关系的用一个 distancejoint 连接起来~你会发现他们就能保持一定距离了。但是！没有被连接的全都聚在一起，怎么办！&lt;/p&gt;
&lt;p&gt;4.把距离近的，不和自己相连的（来个 dfs）给个反方向的力！&lt;/p&gt;
&lt;p&gt;5.好吧，这就是最终结果，有什么更好的方法？希望大家交流。&lt;/p&gt;
&lt;p&gt;6.我不想开源，毕竟这还只是个半成品。。。。。做好了自然会开源的&lt;/p&gt;
&lt;p&gt;7.像那个恶心的 lua 怎么解开？文件之间的依赖太多了，成环了。&lt;/p&gt;
&lt;p&gt;8.使用 java+libgdx+box2d 写成，也就是说 android 也支持。&lt;/p&gt;
&lt;p&gt;9.没啥了。。。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IntelliJ IDEA 手动更新方法</title>
      <link>https://jia.je/csdn/intellij-idea-manual-update/</link>
      <pubDate>Fri, 30 May 2014 19:19:47 +0800</pubDate>
      
      <guid>https://jia.je/csdn/intellij-idea-manual-update/</guid>
      <description>&lt;p&gt;迁移自本人在 CSDN 上的博客：https://blog.csdn.net/build7601/article/details/27704683&lt;/p&gt;
&lt;p&gt;经常，IntelliJ IDEA 更新时，会发现这个：&lt;/p&gt;
&lt;p&gt;download-cf.jetbrains.com/idea/IU-135.690-135.909-patch-win.jar 下载不了。不然只能去下载完全版重新安装一次&lt;/p&gt;
&lt;p&gt;解决方案如下：&lt;/p&gt;
&lt;p&gt;使用代理下载上面那个文件（视版本而定），&lt;/p&gt;
&lt;p&gt;拷贝到 IntelliJ IDEA 安装目录，&lt;/p&gt;
&lt;p&gt;敲击 java -classpath IU-135.690-135.909-patch-win.jar com.intellij.updater.Runner install .&lt;/p&gt;
&lt;p&gt;注意，最后那个点表示更新到当前目录。&lt;/p&gt;
&lt;p&gt;会输出这个：Exception in thread &amp;ldquo;main&amp;rdquo; java.lang.NoClassDefFoundError: org/apache/log4j/Layo
ut
at java.lang.Class.getDeclaredMethods0(Native Method)
at java.lang.Class.privateGetDeclaredMethods(Unknown Source)
at java.lang.Class.getMethod0(Unknown Source)
at java.lang.Class.getMethod(Unknown Source)
at sun.launcher.LauncherHelper.validateMainClass(Unknown Source)
at sun.launcher.LauncherHelper.checkAndLoadMain(Unknown Source)
Caused by: java.lang.ClassNotFoundException: org.apache.log4j.Layout
at java.net.URLClassLoader$1.run(Unknown Source)
at java.net.URLClassLoader$1.run(Unknown Source)
at java.security.AccessController.doPrivileged(Native Method)
at java.net.URLClassLoader.findClass(Unknown Source)
at java.lang.ClassLoader.loadClass(Unknown Source)
at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
at java.lang.ClassLoader.loadClass(Unknown Source)
&amp;hellip; 6 more&lt;/p&gt;
&lt;p&gt;发现少了 log4j，发现 lib 目录下就有，果断加到 classpath：&lt;/p&gt;
&lt;p&gt;java -classpath IU-135.690-135.909-patch-win.jar;.\lib\log4j.jar com.intellij.updater.Runner install .
弹出升级窗口，成功！&lt;/p&gt;
&lt;p&gt;IntelliJ IDEA 设置代理升级失败，设置系统代理也失败。。可能是 rp？但是浏览器就可以。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux on Android 简单教程</title>
      <link>https://jia.je/csdn/linux-on-android/</link>
      <pubDate>Sat, 26 Apr 2014 17:30:36 +0800</pubDate>
      
      <guid>https://jia.je/csdn/linux-on-android/</guid>
      <description>&lt;p&gt;迁移自本人在 CSDN 上的博客：https://blog.csdn.net/build7601/article/details/24544879&lt;/p&gt;
&lt;p&gt;介绍：
Linux on Android，顾名思义，就是让你能在 Android 上跑 linux。。。。&lt;/p&gt;
&lt;p&gt;步骤：
1.下载所需的文件：
项目主页为：tinyurl.com cn3lxgz
在这里举 Ubuntu 13.10 为例，下载 tinyurl.com lp7fqw4
Core 只有最基本的东西，没界面。。但是我的 sd 卡空间过小，只好用这个，
Small 就有界面了，Large 还有很多东东，具体看 tinyurl.com m5tdmkj 下面的 Readme&lt;/p&gt;
&lt;p&gt;然后下载 Complete Linux Installer，这是用来启动 linux 的：
tinyurl.com mzsbud8&lt;/p&gt;
&lt;p&gt;还要下载 VNCViewer（浏览 linux 桌面），终端模拟器&lt;/p&gt;
&lt;p&gt;2.做好准备工作：
解压下载好的 zip，把里面的.img 解压出来。
安装好 Complete Linux Installer VNCViewer 终端模拟器到 android 上，把解压的.img 文件传到 sd 卡上，比如：
adb push ubuntu-13.10.CORE.ext2.img 你的 sd 卡路径&lt;/p&gt;
&lt;p&gt;安装完是这个样子的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/20140426171926125.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;3.开始启动！
打开 Complete Linux Installer，
选择启动系统，点击右上角 Settings，选择添加：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/20140426172223984.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在名称输入你喜欢的名称，比如 ubuntu。
选择&amp;hellip;，然后选择 sd 卡上的 img 文件。保存更改&lt;/p&gt;
&lt;p&gt;选择你刚才创建的 ubuntu，点击启动 linux！&lt;/p&gt;
&lt;p&gt;你会发现出现了一个终端模拟器有没有！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/20140426172417015.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;完成！你可以用 VNCViewer 去查看他的界面：
连接 localhost：5900。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jia.je/images/20140426172607765.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;什么都没有，什么情况！？！？
因为我下载的是 Core 啊！什么都没有啊啊啊啊。。。。
如果下载的是别的，那估计已经有界面了。。&lt;/p&gt;
&lt;p&gt;如果没法连接到，请在终端模拟器输入 vncserver 并回车，然后 VNC 连接 5901 端口即可！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://jia.je/about/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
      
      <guid>https://jia.je/about/</guid>
      <description>&lt;p&gt;我是清华大学计算机系的一名在读博士生。&lt;/p&gt;
&lt;p&gt;我的邮件是 c at jia.je。我的 GitHub 用户名是 &lt;a href=&#34;https://github.com/jiegec&#34;&gt;@jiegec&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>工具</title>
      <link>https://jia.je/tools/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
      
      <guid>https://jia.je/tools/</guid>
      <description>&lt;h2 id=&#34;在线工具&#34;&gt;在线工具&lt;/h2&gt;
&lt;p&gt;下面是我常用的一些在线工具：&lt;/p&gt;
&lt;p&gt;别人编写的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef/&#34;&gt;https://gchq.github.io/CyberChef/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godbolt.org/&#34;&gt;https://godbolt.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hpd.gasmi.net/&#34;&gt;https://hpd.gasmi.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tcpdump101.com/&#34;&gt;https://tcpdump101.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://regexper.com/&#34;&gt;https://regexper.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://crontab.guru/&#34;&gt;https://crontab.guru/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://salmanarif.bitbucket.io/visual/index.html&#34;&gt;https://salmanarif.bitbucket.io/visual/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mathpix.com/&#34;&gt;https://mathpix.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.falstad.com/circuit/circuitjs.html&#34;&gt;https://www.falstad.com/circuit/circuitjs.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://merricx.github.io/qrazybox/&#34;&gt;https://merricx.github.io/qrazybox/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.epochconverter.com/&#34;&gt;https://www.epochconverter.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vultr.com/resources/mac-converter/&#34;&gt;https://www.vultr.com/resources/mac-converter/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sunshine2k.de/coding/javascript/crc/crc_js.html&#34;&gt;http://www.sunshine2k.de/coding/javascript/crc/crc_js.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.easyunitconverter.com/&#34;&gt;https://www.easyunitconverter.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gregstoll.com/~gregstoll/floattohex/&#34;&gt;https://gregstoll.com/~gregstoll/floattohex/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;自己编写的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;S-DES 可视化 &lt;a href=&#34;https://jia.je/sdes-visualization/&#34;&gt;https://jia.je/sdes-visualization/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Booth 乘法可视化 &lt;a href=&#34;https://jia.je/booth-visualization/&#34;&gt;https://jia.je/booth-visualization/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;整数除法可视化 &lt;a href=&#34;https://jia.je/integer-divide-visualization/&#34;&gt;https://jia.je/integer-divide-visualization/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线运行 TAC 代码 &lt;a href=&#34;https://jia.je/online_tac_vm/&#34;&gt;https://jia.je/online_tac_vm/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线编译 Decaf &lt;a href=&#34;https://jia.je/online_decaf/&#34;&gt;https://jia.je/online_decaf/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线解码登机牌信息 BCBP &lt;a href=&#34;https://jia.je/decode-bcbp/&#34;&gt;https://jia.je/decode-bcbp/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;调试工具&#34;&gt;调试工具&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;CPU 上的调试器：GDB LLDB&lt;/li&gt;
&lt;li&gt;编译器自带：AddressSanitizer, ThreadSanitizer, MemorySanitizer, UndefinedBehaviorSanitizer&lt;/li&gt;
&lt;li&gt;Valgrind 系列：valgrind, memcheck, cachegrind, callgrind, helgrind, drd, massif, dhat, lackey, nulgrind, bbv&lt;/li&gt;
&lt;li&gt;MPI Tracing: &lt;a href=&#34;https://github.com/pmodels/pilgrim&#34;&gt;Pilgrim: Logger for MPI communication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GPU Race Detection: &lt;a href=&#34;https://github.com/csl-iisc/iGUARD&#34;&gt;iGUARD: In-GPU Advanced Race Detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NUMA Profiling: &lt;a href=&#34;https://github.com/UTSASRG/NumaPerf&#34;&gt;NumaPerf: Predictive NUMA Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenMP Race Detection: &lt;a href=&#34;https://github.com/PRUNERS/archer&#34;&gt;archer: a data race detection tool for large OpenMP applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python Profiling: cProfile, &lt;a href=&#34;https://github.com/zhuyifei1999/guppy3/&#34;&gt;Guppy3: A Python Programming Environment &amp;amp; Heap analysis toolset&lt;/a&gt;, &lt;a href=&#34;https://github.com/joerick/pyinstrument&#34;&gt;PyInstrument: Call stack profiler for Python&lt;/a&gt;, &lt;a href=&#34;https://github.com/P403n1x87/austin&#34;&gt;Austin: Python frame stack sampler for CPython&lt;/a&gt;, &lt;a href=&#34;https://github.com/benfred/py-spy&#34;&gt;py-spy: Sampling profiler for Python programs&lt;/a&gt;, &lt;a href=&#34;https://github.com/plasma-umass/scalene&#34;&gt;Scalene: a high-performance, high-precision CPU, GPU, and memory profiler for Python&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>开源软件贡献</title>
      <link>https://jia.je/open-source-contributions/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
      
      <guid>https://jia.je/open-source-contributions/</guid>
      <description>&lt;p&gt;记录我对开源软件的一些微小的贡献，以勉励自己，督促自己不忘为社区做贡献。&lt;/p&gt;
&lt;h2 id=&#34;maintenance&#34;&gt;Maintenance&lt;/h2&gt;
&lt;p&gt;我主要参与如下开源项目的维护：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lsof-org/lsof&#34;&gt;lsof-org/lsof&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nixos/nixpkgs&#34;&gt;NixOS/nixpkgs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/canokeys&#34;&gt;canokeys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nfcim&#34;&gt;nfcim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;aosc-os-abbs&#34;&gt;aosc-os-abbs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AOSC-Dev/aosc-os-abbs/pull/4495&#34;&gt;etckeeper: new, 1.18.20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AOSC-Dev/aosc-os-abbs/pull/4494&#34;&gt;lsof: update to 4.98.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;aws-cdk&#34;&gt;aws-cdk&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aws/aws-cdk/pull/16389&#34;&gt;feat(cloudfront): support Behavior-specific viewer protocol policy for CloudFrontWebDistribution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bandersnatch&#34;&gt;bandersnatch&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pypa/bandersnatch/pull/822&#34;&gt;Skip downloading based on file size and upload time instead of sha256sum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cargo&#34;&gt;cargo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/cargo/pull/7965&#34;&gt;Don&amp;rsquo;t create hardlink for library test and integrations tests, fixing #7960&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chiseltest&#34;&gt;chiseltest&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ucb-bar/chiseltest/pull/430&#34;&gt;Fix VCS simulation binary path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ucb-bar/chiseltest/pull/429&#34;&gt;Fix issue #428: add blackbox sources to argument of icarus-verilog and vcs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ucb-bar/chiseltest/pull/426&#34;&gt;Fix VcsFlags not properly passed to vcs backend&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;emacs&#34;&gt;emacs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnu.org/archive/html/bug-gnu-emacs/2016-07/msg00307.html&#34;&gt;bug#23909: 25.1.50; `button-label&amp;rsquo; must be called in the buffer where &amp;hellip;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/emacs-mirror/emacs/commit/9eda79fc8c2b3e66ff6934ef0a8f2b747c27d245&#34;&gt;button-* function doc string clarifications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;flopoco&#34;&gt;FloPoCo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/flopoco/flopoco/-/commit/4672586b731b22562d2ce6994c5c78e41846a452&#34;&gt;two more bug fixes by Jiajie Chen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/flopoco/flopoco/-/commit/5ac83babf7d6a69cd3124a6127a98a0ac58c4508&#34;&gt;Remove the duplicate code lines: R &amp;lt;= (bug reported by Jiajie Chen)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/flopoco/flopoco/-/commits/master?author=Jiajie%20Chen&#34;&gt;Commits by me&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;force-riscv&#34;&gt;force-riscv&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openhwgroup/force-riscv/pull/54&#34;&gt;Fixed compilation error: std::string and int64_t undefined&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;freebsd&#34;&gt;FreeBSD&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://reviews.freebsd.org/D38169&#34;&gt;Add kf_file_nlink field to kf_file and populate it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;gpaw&#34;&gt;gpaw&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/gpaw/gpaw/-/merge_requests/863&#34;&gt;Fix issue #269 to add additional broadcast in some cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/gpaw/gpaw/-/merge_requests/858&#34;&gt;Capture and ignore AttributeError thrown in getpreferredencoding() in newer Python versions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;gtkwave&#34;&gt;gtkwave&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gtkwave/gtkwave/pull/136&#34;&gt;Fix compilation under macOS for Nix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;homebrew-cask&#34;&gt;homebrew-cask&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/homebrew-cask/pull/59122&#34;&gt;Update notion to 1.0.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/homebrew-cask/pull/57291&#34;&gt;Add MacGesture v2.2.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/homebrew-cask/pull/42698&#34;&gt;Update next to 0.07&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/homebrew-cask/pull/14330&#34;&gt;Update bilibili to 2.14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/homebrew-cask/pull/14316&#34;&gt;Update bilibili to 2.13&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iproute2mac&#34;&gt;iproute2mac&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/brona/iproute2mac/pull/31&#34;&gt;Fix ip route for macOS Catalina issue #30 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iwd&#34;&gt;iwd&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lore.kernel.org/iwd/20230226062526.3115588-1-c@jia.je/T/#u&#34;&gt;[PATCH 1/2] knownnetworks: fix potential out of bounds write&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/network/wireless/iwd.git/commit/?id=98b758f8934a95f961e3b5779bcc9b25b30ae97a&#34;&gt;knownnetworks: fix printing SSID in hex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/network/wireless/iwd.git/commit/?id=89309a862108c4caac41995b5fc76ade859d87a8&#34;&gt;knownnetworks: fix potential out of bounds write&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kicad&#34;&gt;KiCad&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/kicad/code/kicad/-/merge_requests/602&#34;&gt;libcontext: Initial support for Apple Silicon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;knem&#34;&gt;KNEM&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.inria.fr/knem/knem/-/commit/fa80cec4970514a6388fe165cc0c4167fd813228&#34;&gt;driver/linux: use the pin API added in Linux 5.6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;legacy-homebrew&#34;&gt;legacy-homebrew&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/legacy-homebrew/pull/46005&#34;&gt;emscripten 1.35.9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/legacy-homebrew/pull/45598&#34;&gt;gnuradio 3.7.8.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/legacy-homebrew/pull/45289&#34;&gt;emscripten 1.35.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/legacy-homebrew/pull/45186&#34;&gt;emscripten 1.35.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/legacy-homebrew/pull/44990&#34;&gt;emscripten 1.34.12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/legacy-homebrew/pull/44611&#34;&gt;emscripten 1.34.11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/legacy-homebrew/pull/44581&#34;&gt;airspy 1.0.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/legacy-homebrew/pull/44580&#34;&gt;libbladerf 2015.07&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/legacy-homebrew/pull/43469&#34;&gt;uhd 003.009.000&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/legacy-homebrew/pull/42796&#34;&gt;uhd 003.008.005&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/legacy-homebrew/pull/35235&#34;&gt;hbase v0.89.9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;miktex&#34;&gt;MiKTeX&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/MiKTeX/miktex/pull/710&#34;&gt;Initial support for native Apple Silicon target&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nixpkgs&#34;&gt;Nixpkgs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/224621&#34;&gt;circt: 1.34.0 -&amp;gt; 1.37.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/224304&#34;&gt;mucommander: 1.1.0-1 -&amp;gt; 1.2.0-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/224303&#34;&gt;copilot-cli: 1.26.0 -&amp;gt; 1.27.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/217061&#34;&gt;rain: 1.2.0 -&amp;gt; 1.3.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/207657&#34;&gt;spice-gtk: unbreak on darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/199946&#34;&gt;pcsclite: fix libsystemd switch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/198885&#34;&gt;python3Packages.brian2: init at 2.5.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/198872&#34;&gt;nest: init at 3.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/198587&#34;&gt;bpftools: fix build on ppc64le&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/198374&#34;&gt;ngspice: add darwin to platforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/197926&#34;&gt;spark2014: init at unstable-2022-05-25&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/197639&#34;&gt;Add support for gnuradio on darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/191867&#34;&gt;darwin.iproute2mac: 1.4.0 -&amp;gt; 1.4.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/191624&#34;&gt;jsonmerge: skip failed tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/187003&#34;&gt;krunvm: add support for darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/186368&#34;&gt;recoll: fix no/bad configuration error on darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/185502&#34;&gt;sioyek: unbreak on darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/185111&#34;&gt;circleci-cli: 0.1.17142 -&amp;gt; 0.1.20397&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/184825&#34;&gt;foremost: unbreak on Darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/182563&#34;&gt;prometheus-influxdb-exporter: 0.8.0 -&amp;gt; 0.10.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/182351&#34;&gt;rain: init at 1.2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/182062&#34;&gt;hal-hardware-analyzer: fix build with python 3.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/182057&#34;&gt;arpack: unbreak on aarch64-darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/182056&#34;&gt;cvc3: unbreak on darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/181914&#34;&gt;python310Packages.chalice: 1.26.6 -&amp;gt; 1.27.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/181912&#34;&gt;aws-sam-cli: 1.52.0 -&amp;gt; 1.53.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/181911&#34;&gt;python310Packages.aws-sam-translator: 1.46.0 -&amp;gt; 1.47.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/181686&#34;&gt;rustup: 1.24.3 -&amp;gt; 1.25.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/181597&#34;&gt;cbmc: init at 5.63.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/181553&#34;&gt;lsof: fix -fno-common builds on darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/181353&#34;&gt;libbsd: fix build on darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/181239&#34;&gt;libressl: fix build on aarch64-darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/181073&#34;&gt;glances: fix tests on darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/181051&#34;&gt;mono: 6.12.0.122 -&amp;gt; 6.12.0.182&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/180854&#34;&gt;aws-workspaces: 4.0.1.1302 -&amp;gt; 4.1.0.1523&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/180844&#34;&gt;copilot-cli: init at 1.19.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/180669&#34;&gt;wkhtmltopdf: unbreak on darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/180613&#34;&gt;Fix hdfview issue 179793 and bump hdfview to 3.1.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/180225&#34;&gt;Add darwin support for hdfview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/180085&#34;&gt;hdf5_1_10: 1.10.6 -&amp;gt; 1.10.9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/180083&#34;&gt;hdf5: 1.12.1 -&amp;gt; 1.12.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/179977&#34;&gt;musescore: 2.1 -&amp;gt; 3.6.2.548020600 on darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/179971&#34;&gt;darwin.network_cmds: fix build on aarch64-darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/179921&#34;&gt;darwin.xnu: fix build on aarch64-darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/179859&#34;&gt;openconnect: 8.20 -&amp;gt; 9.01&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/178918&#34;&gt;python310Packages.cocotb: unbreak on Darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/178822&#34;&gt;darwin.iproute2mac: 1.2.1 -&amp;gt; 1.4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/178725&#34;&gt;htmldoc: fix darwin build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/178662&#34;&gt;radare2: unbreak on Darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/178659&#34;&gt;radare2: 5.6.8 -&amp;gt; 5.7.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/178552&#34;&gt;gtkwave: support darwin build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/178551&#34;&gt;cairo: add patch to fix crashes on darwin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;openfpgaloader&#34;&gt;openFPGALoader&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/trabucayre/openFPGALoader/pull/316&#34;&gt;Add flash support for VCU128&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/trabucayre/openFPGALoader/pull/313&#34;&gt;Add initial support for VCU128&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pynn&#34;&gt;PyNN&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NeuralEnsemble/PyNN/pull/763&#34;&gt;Fix quantities error and x-y order in plotting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NeuralEnsemble/PyNN/pull/723&#34;&gt;Fix weight type in brain2 backend for issue 711&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NeuralEnsemble/PyNN/pull/727&#34;&gt;add missing &lt;strong&gt;new&lt;/strong&gt; for neuron 8.0.0, fixing issue #722&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rocket-chip&#34;&gt;rocket-chip&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/pull/2925&#34;&gt;Doc fixes and add comments to axi4 bundles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spinalcrypto&#34;&gt;SpinalCrypto&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SpinalHDL/SpinalCrypto/pull/13&#34;&gt;Add cross scala version support, upgrade scalatest and fix scala 2.13 incompat code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spinalhdl&#34;&gt;SpinalHDL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SpinalHDL/SpinalHDL/pull/539&#34;&gt;Use scalafmt to format code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SpinalHDL/SpinalHDL/pull/533&#34;&gt;Add support for write byte enable in BusSlaveFactory.writeMemWordAligned&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SpinalHDL/SpinalHDL/pull/524&#34;&gt;Fix typos and improve error messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SpinalHDL/SpinalHDL/pull/506&#34;&gt;Add option to enable logging of ghdl/iverlog backend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SpinalHDL/SpinalHDL/pull/456&#34;&gt;Cross scala versions build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SpinalHDL/SpinalHDL/pull/406&#34;&gt;Add support for Virtex UltraScale+ in xilinx eda bench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SpinalHDL/SpinalHDL/pull/404&#34;&gt;Add axi4 slave factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SpinalHDL/SpinalHDL/pull/402&#34;&gt;Add writeByteEnable to BusSlaveFactory and support unaligned access in read/writeMultiWord for AXI4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SpinalHDL/SpinalHDL/pull/383&#34;&gt;Pass simulator flags to iverilog and ghdl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SpinalHDL/SpinalHDL/pull/378&#34;&gt;Add support for multiple rtl file benchmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SpinalHDL/SpinalHDL/pull/367&#34;&gt;Add support for multi word memory access in BusSlaveFactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SpinalHDL/SpinalHDL/pull/365&#34;&gt;Fix iverilog simulation under macOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;u-boot&#34;&gt;U-Boot&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/u-boot/u-boot/commit/4fffbc1108f3f5e2932cdefea8b5f831b46040c7&#34;&gt;spi: xilinx_spi: Fix spi reset&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;尚未合并&#34;&gt;尚未合并&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>系列</title>
      <link>https://jia.je/series/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
      
      <guid>https://jia.je/series/</guid>
      <description>&lt;p&gt;下面列举了我的博客里的一些系列文章。&lt;/p&gt;
&lt;h2 id=&#34;教学系列&#34;&gt;教学系列&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jia.je/tags/teaching&#34;&gt;#teaching&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;近来做-stanford-cs140e-的一些进展和思考&#34;&gt;近来做 Stanford CS140e 的一些进展和思考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jia.je/tags/cs140e/&#34;&gt;#cs140e&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;每周分享&#34;&gt;每周分享&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jia.je/tags/weeklysharing/&#34;&gt;#weeklysharing&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;在-fpga-上实现路由器&#34;&gt;在 FPGA 上实现路由器&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jia.je/tags/router-on-fpga/&#34;&gt;#router-on-fpga&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;浅谈乱序执行-cpu&#34;&gt;浅谈乱序执行 CPU&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jia.je/tags/brief-into-ooo/&#34;&gt;#brief-into-ooo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;缓存一致性协议分析&#34;&gt;缓存一致性协议分析&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jia.je/tags/coherence/&#34;&gt;#coherence&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>项目</title>
      <link>https://jia.je/projects/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
      
      <guid>https://jia.je/projects/</guid>
      <description>&lt;h1 id=&#34;jiegec-的项目&#34;&gt;jiegec 的项目&lt;/h1&gt;
&lt;p&gt;受 &lt;a href=&#34;https://github.com/wangrunji0408/UndergraduateProjects&#34;&gt;wangrunji0408/UndergraduateProjects&lt;/a&gt; 启发，我也来总结一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q：时间都去哪儿了？&lt;/p&gt;
&lt;p&gt;A：刚刚睡醒 什么事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;h3 id=&#34;计算机系课程及相关作业&#34;&gt;计算机系课程及相关作业&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;课程&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2017.10&lt;/td&gt;
&lt;td&gt;离散数学&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#props&#34;&gt;Props&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017.11&lt;/td&gt;
&lt;td&gt;程序设计基础&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#simpleextfs&#34;&gt;SimpleExtFs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018.05&lt;/td&gt;
&lt;td&gt;面向对象程序设计基础&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#onepasssynthesisdmfb&#34;&gt;OnePassSynthesisDMFB&lt;/a&gt;，&lt;a href=&#34;#naiveledger&#34;&gt;NaiveLedger&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018.06&lt;/td&gt;
&lt;td&gt;概率论与数理统计&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#hllebpf&#34;&gt;HLLeBPF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018.07&lt;/td&gt;
&lt;td&gt;程序设计小学期&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#dmcd&#34;&gt;DMCD&lt;/a&gt;，&lt;a href=&#34;#chinesechess&#34;&gt;ChineseChess&lt;/a&gt;，&lt;a href=&#34;#searchengine&#34;&gt;SearchEngine&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018.11&lt;/td&gt;
&lt;td&gt;软件工程&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#info9&#34;&gt;Info9&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.02&lt;/td&gt;
&lt;td&gt;操作系统&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#rcore&#34;&gt;rCore&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.04&lt;/td&gt;
&lt;td&gt;人工智能导论&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#pinyin&#34;&gt;Pinyin&lt;/a&gt;，&lt;a href=&#34;#fourchess&#34;&gt;FourChess&lt;/a&gt;，&lt;a href=&#34;#emotionclassifier&#34;&gt;EmotionClassifier&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.04&lt;/td&gt;
&lt;td&gt;存储技术基础&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#kvengine&#34;&gt;KVEngine&lt;/a&gt;，&lt;a href=&#34;#hermes&#34;&gt;HERMES&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.05&lt;/td&gt;
&lt;td&gt;多媒体技术基础&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#rbsplit&#34;&gt;RBSplit&lt;/a&gt;，&lt;a href=&#34;#multimediacompression&#34;&gt;MultimediaCompression&lt;/a&gt;，&lt;a href=&#34;#multimediasound&#34;&gt;MultimediaSound&lt;/a&gt;，&lt;a href=&#34;#multimediaanalysis&#34;&gt;MultimediaAnalysis&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.06&lt;/td&gt;
&lt;td&gt;数字逻辑设计&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#naiverouter&#34;&gt;NaiveRouter&lt;/a&gt;，&lt;a href=&#34;#router&#34;&gt;router&lt;/a&gt;，&lt;a href=&#34;#router_mb&#34;&gt;router_mb&lt;/a&gt;，&lt;a href=&#34;#router_ksz8795&#34;&gt;router_ksz8795&lt;/a&gt;，&lt;a href=&#34;#rgmiimux&#34;&gt;rgmiimux&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.06&lt;/td&gt;
&lt;td&gt;计算机网络原理&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#Router-Lab&#34;&gt;Router-Lab&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.07&lt;/td&gt;
&lt;td&gt;专业实践&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#gugumips&#34;&gt;GuGuMIPS&lt;/a&gt;，&lt;a href=&#34;#gugumipssoc&#34;&gt;GuGuMIPSSoC&lt;/a&gt;，&lt;a href=&#34;#linux-gugumips&#34;&gt;linux-gugumips&lt;/a&gt;，&lt;a href=&#34;#u-boot-gugumips&#34;&gt;u-boot-gugumips&lt;/a&gt;，&lt;a href=&#34;#ucore-gugumips&#34;&gt;ucore-gugumips&lt;/a&gt;，&lt;a href=&#34;#usbh&#34;&gt;usbh&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.08&lt;/td&gt;
&lt;td&gt;Java 程序设计与训练&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#jabahomework&#34;&gt;JabaHomework&lt;/a&gt;，&lt;a href=&#34;#newsapp&#34;&gt;NewsApp&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.08&lt;/td&gt;
&lt;td&gt;汇编语言程序设计&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#asm-homework&#34;&gt;asm-homework&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.09&lt;/td&gt;
&lt;td&gt;计算机网络安全技术&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#sdes-visualization&#34;&gt;sdes-visualization&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.10&lt;/td&gt;
&lt;td&gt;计算机组成原理&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#booth-visualization&#34;&gt;booth-visualization&lt;/a&gt;，&lt;a href=&#34;#integer-divide-visualization&#34;&gt;integer-divide-visualization&lt;/a&gt;，&lt;a href=&#34;#rocket2thinpad&#34;&gt;rocket2thinpad&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.10&lt;/td&gt;
&lt;td&gt;编译原理&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#online_tac_vm&#34;&gt;online_tac_vm&lt;/a&gt;，&lt;a href=&#34;#online_decaf&#34;&gt;online_decaf&lt;/a&gt;，&lt;a href=&#34;#gll-pg&#34;&gt;gll-pg&lt;/a&gt;，&lt;a href=&#34;#decaf-lsp&#34;&gt;decaf-lsp&lt;/a&gt;，&lt;a href=&#34;#decaf-rs-pa&#34;&gt;decaf-rs-pa&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.01&lt;/td&gt;
&lt;td&gt;信号处理原理&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#SignalProcessing&#34;&gt;SignalProcessing&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.03&lt;/td&gt;
&lt;td&gt;软件分析与验证&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#dpll&#34;&gt;dpll&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.04&lt;/td&gt;
&lt;td&gt;计算机系统结构&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#cache&#34;&gt;cache&lt;/a&gt;，&lt;a href=&#34;#tomasulo&#34;&gt;tomasulo&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.04&lt;/td&gt;
&lt;td&gt;现代密码学&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#crypto&#34;&gt;crypto&lt;/a&gt;，&lt;a href=&#34;#miller-rabin&#34;&gt;miller-rabin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.05&lt;/td&gt;
&lt;td&gt;网络编程技术&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#file-server&#34;&gt;file-server&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.10&lt;/td&gt;
&lt;td&gt;高等计算机系统结构&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#cache-advanced&#34;&gt;cache-advanced&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.10&lt;/td&gt;
&lt;td&gt;高性能计算实验&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#sgemm-optimize&#34;&gt;sgemm-optimize&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;参加比赛的项目&#34;&gt;参加比赛的项目&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;比赛&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2018.09&lt;/td&gt;
&lt;td&gt;THUCTF2018&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#ctf-writeups&#34;&gt;ctf-writeups&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.07&lt;/td&gt;
&lt;td&gt;龙芯杯&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#gugumips&#34;&gt;GuGuMIPS&lt;/a&gt;，&lt;a href=&#34;#gugumipssoc&#34;&gt;GuGuMIPSSoC&lt;/a&gt;，&lt;a href=&#34;#linux-gugumips&#34;&gt;linux-gugumips&lt;/a&gt;，&lt;a href=&#34;#u-boot-gugumips&#34;&gt;u-boot-gugumips&lt;/a&gt;，&lt;a href=&#34;#ucore-gugumips&#34;&gt;ucore-gugumips&lt;/a&gt;，&lt;a href=&#34;#usbh&#34;&gt;usbh&lt;/a&gt;，&lt;a href=&#34;#nontrivial-mips&#34;&gt;nontrivial-mips&lt;/a&gt;，&lt;a href=&#34;#linux-nontrivial-mips&#34;&gt;linux-nontrivial-mips&lt;/a&gt;，&lt;a href=&#34;#u-boot-nontrivialmips&#34;&gt;u-boot-nontrivial-mips&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.08&lt;/td&gt;
&lt;td&gt;华为杯&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#trivialcompiler&#34;&gt;trivialcompiler&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.06&lt;/td&gt;
&lt;td&gt;ISC20 SCC&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#Elmerfem&#34;&gt;Elmerfem&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.11&lt;/td&gt;
&lt;td&gt;SC20 VSCC&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#MemXCT&#34;&gt;MemXCT&lt;/a&gt;，&lt;a href=&#34;#miniVite&#34;&gt;miniVite&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.05&lt;/td&gt;
&lt;td&gt;ASC20-21 SCC&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#PRESTO&#34;&gt;PRESTO&lt;/a&gt;，&lt;a href=&#34;#HPL&#34;&gt;HPL&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.07&lt;/td&gt;
&lt;td&gt;ISC21 SCC&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#CodingChallenge&#34;&gt;Coding Challenge&lt;/a&gt;，&lt;a href=&#34;#HPL&#34;&gt;HPL&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;个人参与或编写的项目&#34;&gt;个人参与或编写的项目&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2016.03&lt;/td&gt;
&lt;td&gt;MacGesture macOS 上的手势软件&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#macgesture&#34;&gt;MacGesture&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017.10&lt;/td&gt;
&lt;td&gt;clone-learn-tsinghua 清华网络学堂的备份工具&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#clone-learn-tsinghua&#34;&gt;clone-learn-tsinghua&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018.02&lt;/td&gt;
&lt;td&gt;cs140e Stanford CS140e 实验课程&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#cs140e&#34;&gt;CS140e&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.02&lt;/td&gt;
&lt;td&gt;rustup-mirror Rustup 镜像工具&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#rustup-mirror&#34;&gt;rustup-mirror&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.02&lt;/td&gt;
&lt;td&gt;thuip 从 BGP 信息中导出清华 IP 地址段&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#thuip&#34;&gt;thuip&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.02&lt;/td&gt;
&lt;td&gt;tantivy-jieba 把结巴分词用于 Tantivy&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#tantivy-jieba&#34;&gt;tantivy-jieba&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.07&lt;/td&gt;
&lt;td&gt;classroom-helper GitHub Classroom 辅助 TUI&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#classroom-helper&#34;&gt;classroom-helper&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.09&lt;/td&gt;
&lt;td&gt;verilog-format Verilog/SystemVerilog 格式化&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#verilog-format&#34;&gt;verilog-format&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.10&lt;/td&gt;
&lt;td&gt;decode-bcbp 在线解码机票 BCBP 信息&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#decode-bcbp&#34;&gt;decode-bcbp&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.02&lt;/td&gt;
&lt;td&gt;JieLabs 数字逻辑实验平台&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#JieLabs&#34;&gt;JieLabs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.02&lt;/td&gt;
&lt;td&gt;verilog-lang 递归下降的 Verilog Parser&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#verilog-lang&#34;&gt;verilog-lang&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.02&lt;/td&gt;
&lt;td&gt;maze-routing Rust 语言实现的 Grid Router 算法&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#maze-routing&#34;&gt;maze-routing&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.05&lt;/td&gt;
&lt;td&gt;webhookd 对 Gitlab/GitHub 的 webhook 进行响应&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#webhookd&#34;&gt;webhookd&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.05&lt;/td&gt;
&lt;td&gt;usbip 用 Rust 实现的 USB/IP 服务端&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#usbip&#34;&gt;usbip&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.06&lt;/td&gt;
&lt;td&gt;cluster-job-monitor 集群任务状态监测&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#cluster-job-monitor&#34;&gt;cluster-job-monitor&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.07&lt;/td&gt;
&lt;td&gt;netconf-rs RFC2641 NETCONF 客户端库&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#netconf-rs&#34;&gt;netconf-rs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.08&lt;/td&gt;
&lt;td&gt;TANLabs 网络原理实验平台&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#TANLabs&#34;&gt;TANLabs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.09&lt;/td&gt;
&lt;td&gt;aws-static-website-cdk AWS CDK 部署静态网站&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#aws-static-website-cdk&#34;&gt;aws-static-website-cdk&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.10&lt;/td&gt;
&lt;td&gt;ddns 跨平台 DDNS 客户端&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#ddns&#34;&gt;ddns&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.11&lt;/td&gt;
&lt;td&gt;machine-tester 集群机器测试工具&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#machine-tester&#34;&gt;machine-tester&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.12&lt;/td&gt;
&lt;td&gt;HT42B534 USB to UART 开源 PCB 设计&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#HT42B534USB2UART&#34;&gt;HT42B534USB2UART&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.01&lt;/td&gt;
&lt;td&gt;EspinalLib 使用 SpinalHDL 实现的 HDL 模块&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#espinnallib&#34;&gt;EspinalLib&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.02&lt;/td&gt;
&lt;td&gt;daccountd 分布式强一致 LDAP 服务器&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#daccountd&#34;&gt;daccountd&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.02&lt;/td&gt;
&lt;td&gt;minipxe 用于 PXE 的迷你 DHCP+TFTP 服务器&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#minpxe&#34;&gt;minipxe&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.02&lt;/td&gt;
&lt;td&gt;wechat-dump 从 iOS 备份中导出微信聊天记录&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#wechat-dump&#34;&gt;wechat-dump&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.03&lt;/td&gt;
&lt;td&gt;WM8731PMOD 音频 PMOD 扩展板&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#WM8731PMOD&#34;&gt;WM8731PMOD&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.03&lt;/td&gt;
&lt;td&gt;YXPortal 实验用户管理系统&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#YXPortal&#34;&gt;YXPortal&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.07&lt;/td&gt;
&lt;td&gt;cpu-micro-benchmarks 针对 CPU 架构的微性能测试&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#cpu-micro-benchmarks&#34;&gt;cpu-micro-benchmarks&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.09&lt;/td&gt;
&lt;td&gt;fpu-wrappers 浮点计算单元封装&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#fpu-wrappers&#34;&gt;fpu-wrappers&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.09&lt;/td&gt;
&lt;td&gt;feishu-backup 飞书文档备份导出工具&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#feishu-backup&#34;&gt;feishu-backup&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.09&lt;/td&gt;
&lt;td&gt;rocket-chip-vcu128 在 VCU128 开发板上运行 Rocket Chip&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#rocket-chip-vcu128&#34;&gt;rocket-chip-vcu128&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.09&lt;/td&gt;
&lt;td&gt;dcst-facts 记录清华大学计算机系客观数据&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#dcst-facts&#34;&gt;dcst-facts&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.10&lt;/td&gt;
&lt;td&gt;gitlab-cloner GitLab 项目批量克隆工具&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#gitlab-cloner&#34;&gt;gitlab-cloner&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.12&lt;/td&gt;
&lt;td&gt;jtag-remote-server 远程 JTAG 调试工具&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#jtag-remote-server&#34;&gt;jtag-remote-server&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022.01&lt;/td&gt;
&lt;td&gt;video2srt 使用云服务生成视频的字幕&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#video2srt&#34;&gt;video2srt&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022.01&lt;/td&gt;
&lt;td&gt;rvv-kernels 使用 RISC-V 向量扩展实现算法&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#rvv-kernels&#34;&gt;rvv-kernels&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022.07&lt;/td&gt;
&lt;td&gt;ifupdown-to-systemd-networkd 将 ifupdown 配置转换为 systemd-networkd 配置&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#ifupdown-to-systemd-networkd&#34;&gt;ifupdown-to-systemd-networkd&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022.09&lt;/td&gt;
&lt;td&gt;kicad-symbol-gen KiCad 符号生成器&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#kicad-symbol-gen&#34;&gt;kicad-symbol-gen&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2023.02&lt;/td&gt;
&lt;td&gt;china_bean_importers 将支付记录导入到 beancount&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#china_bean_importers&#34;&gt;china_bean_importers&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2023.04&lt;/td&gt;
&lt;td&gt;chisel-memory-lower 转换 chisel 内存为原语&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#chisel-memory-lower&#34;&gt;chisel-memory-lower&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;计算机系课程及相关作业-1&#34;&gt;计算机系课程及相关作业&lt;/h2&gt;
&lt;h3 id=&#34;props&#34;&gt;Props&lt;/h3&gt;
&lt;p&gt;一个简单的对于命题的计算器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/props&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C++，Flex，Bison&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;simpleextfs&#34;&gt;SimpleExtFs&lt;/h3&gt;
&lt;p&gt;一个简单的内存文件系统，支持可持久化和一些简单的 shell 指令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/extfs&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C，FS&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：3&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;onepasssynthesisdmfb&#34;&gt;OnePassSynthesisDMFB&lt;/h3&gt;
&lt;p&gt;DMFB 是 Digital MicroFluidic Biochips 的缩写。需要实现一篇文章里的算法，生成 SAT 规则后丢给 z3 求解，再把结果可视化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/OnePassSynthesisDMFB&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C++，Graphviz，Z3，SAT&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：0&lt;/li&gt;
&lt;li&gt;收获：2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;naiveledger&#34;&gt;NaiveLedger&lt;/h3&gt;
&lt;p&gt;一个简单的 AlgoRand 实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合作同学：wjd jl lxy lwb&lt;/li&gt;
&lt;li&gt;GitHub 未公开&lt;/li&gt;
&lt;li&gt;相关技术：C++，密码学&lt;/li&gt;
&lt;li&gt;投入时间：一般&lt;/li&gt;
&lt;li&gt;喜爱：1&lt;/li&gt;
&lt;li&gt;收获：2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hllebpf&#34;&gt;HLLeBPF&lt;/h3&gt;
&lt;p&gt;把 HyperLogLog 用 eBPF 实现了，可以估计一段时间内访问本机的 IP 数量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/hll_ebpf&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C，eBPF，HyperLogLog&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dmcd&#34;&gt;DMCD&lt;/h3&gt;
&lt;p&gt;DMCD 是 Digital Microfluidic Chip Designer 的缩写。同样实现一个算法，按照给定的网络解一堆方程，然后用 Qt 可视化。可以在 Qt 上进行参数的调整，也可以用一个简单的遗传算法去求解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/codingterm/tree/master/Week1&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Qt，遗传算法&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：0&lt;/li&gt;
&lt;li&gt;收获：0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;chinesechess&#34;&gt;ChineseChess&lt;/h3&gt;
&lt;p&gt;Qt 编写的中国象棋在线对战。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/codingterm/tree/master/Week2&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Qt，Socket&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：2&lt;/li&gt;
&lt;li&gt;收获：2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;searchengine&#34;&gt;SearchEngine&lt;/h3&gt;
&lt;p&gt;用 Python 编写爬虫，并实现简单的搜索引擎。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/codingterm/tree/master/Week3&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Python，Django，Web，Reverse Index，TF-IDF，ORM&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：2&lt;/li&gt;
&lt;li&gt;收获：2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;info9&#34;&gt;Info9&lt;/h3&gt;
&lt;p&gt;用 Vue.js 编写前端，Python Django 编写后端，实现一堆功能的网站。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合作同学：xlq wxp&lt;/li&gt;
&lt;li&gt;GitHub 未公开&lt;/li&gt;
&lt;li&gt;相关技术：Vue，Python，Django，Web，MongoDB&lt;/li&gt;
&lt;li&gt;投入时间：&amp;gt;100h&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rcore&#34;&gt;rCore&lt;/h3&gt;
&lt;p&gt;完善用 Rust 编写的操作系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合作同学：太多了&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rcore-os/rCore&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，操作系统，文件系统，网络&lt;/li&gt;
&lt;li&gt;投入时间：&amp;gt;200h&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：100&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pinyin&#34;&gt;Pinyin&lt;/h3&gt;
&lt;p&gt;用 Rust 实现的基于马尔可夫链的输入法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/pinyin&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，马尔可夫链&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：1&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fourchess&#34;&gt;FourChess&lt;/h3&gt;
&lt;p&gt;四字棋 AI，用 MCTS（UCT）实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/FourChess&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：MCTS，UCT&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：1&lt;/li&gt;
&lt;li&gt;收获：2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;emotionclassifier&#34;&gt;EmotionClassifier&lt;/h3&gt;
&lt;p&gt;用 CNN/RNN/MLP 实现一个分类任务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/EmotionClassifier&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：PyTorch&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：0&lt;/li&gt;
&lt;li&gt;收获：0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kvengine&#34;&gt;KVEngine&lt;/h3&gt;
&lt;p&gt;实现一个简单的 KV 引擎，保证 Write Consistency 和 Crash Consistency。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/kv-engine&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C++，WAL&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：3&lt;/li&gt;
&lt;li&gt;收获：4&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hermes&#34;&gt;HERMES&lt;/h3&gt;
&lt;p&gt;实现一个 FUSE 文件系统，背后采用 KV 来存储数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合作同学：csq gj lxy&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Harry-Chen/HERMES&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C++，FUSE&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rbsplit&#34;&gt;RbSplit&lt;/h3&gt;
&lt;p&gt;把图片的颜色拆开，然后错位后再拼在一起，变成一个新的图。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/rbsplit&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Python&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：3&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multimediacompression&#34;&gt;MultimediaCompression&lt;/h3&gt;
&lt;p&gt;第一部分是用不同的方法计算图片的 DCT，然后再逆回来对比图片质量。对比不同量化矩阵对于图片的质量的影响。第二部分是实现一个动作估计，从一系列图中捕捉一个物体的轨迹。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/MultimediaCompression&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Python&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multimediasound&#34;&gt;MultimediaSound&lt;/h3&gt;
&lt;p&gt;用 MATLAB 的 STRAIGHT 工具箱进行声音的调整，例如男声-&amp;gt;女生。然后用 Python 衡量声音之间的距离。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/MultimediaSound&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Python，MATLAB&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multimediaanalysis&#34;&gt;MultimediaAnalysis&lt;/h3&gt;
&lt;p&gt;计算每个图的颜色分布立方图，根据立方图来进行聚类计算。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/MultimediaAnalysis&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Python&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：4&lt;/li&gt;
&lt;li&gt;收获：4&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;naiverouter&#34;&gt;NaiveRouter&lt;/h3&gt;
&lt;p&gt;硬件转发的路由器 IP 实现，通过 AXI 与 CPU 交互。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/naiverouter&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：SystemVerilog，网络，AXI&lt;/li&gt;
&lt;li&gt;投入时间：较多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;router&#34;&gt;router&lt;/h3&gt;
&lt;p&gt;在黑金 AX7021 开发板上的 SoC，采用了 NaiveRouter 进行硬件转发，在 PS 上实现 RIP 协议和路由信息的更新。另外还实现了 HDMI 的路由状态可视化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/router&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Vivado&lt;/li&gt;
&lt;li&gt;投入时间：较多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;router_mb&#34;&gt;router_mb&lt;/h3&gt;
&lt;p&gt;同样在黑金 AX7021 开发板上的 SoC，也是采用 NaiveRouter 进行硬件转发，只不过把软件部分从 PS 移到了 MicroBlaze 中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/router_mb&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Vivado&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：8&lt;/li&gt;
&lt;li&gt;收获：5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;router_ksz8795&#34;&gt;router_ksz8795&lt;/h3&gt;
&lt;p&gt;在 Pynq 外接 KSZ8795 扩展板上开发的 SoC，采用 MicroBlaze 运行代码，对 KSZ8795 芯片的编程和操作进行了验证。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/router_ksz8795&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Vivado&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：8&lt;/li&gt;
&lt;li&gt;收获：5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rgmiimux&#34;&gt;rgmiimux&lt;/h3&gt;
&lt;p&gt;一个 RGMII“一分四”的 IP，通过 VLAN 进行区分，类似 KSZ8795 的部分功能，只不过是在 FPGA 内部实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/rgmiimux&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Vivado&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;router-lab&#34;&gt;Router-Lab&lt;/h3&gt;
&lt;p&gt;2019 计算机网络原理课程的实验。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/z4yx/Router-Lab&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Networking&lt;/li&gt;
&lt;li&gt;投入时间：较多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gugumips&#34;&gt;GuGuMIPS&lt;/h3&gt;
&lt;p&gt;自己编写的小端 MIPS32 实现，能够启动 Linux，自己编写的 Cache 处于未完成状态。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/GuGuMIPS&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：SystemVerilog&lt;/li&gt;
&lt;li&gt;投入时间：很多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gugumipssoc&#34;&gt;GuGuMIPSSoC&lt;/h3&gt;
&lt;p&gt;以 GuGuMIPS 为 CPU，在龙芯实验箱上运行的一个 SoC，支持网络，USB，LCD 等外设&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/GuGuMIPSSoC&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Vivado&lt;/li&gt;
&lt;li&gt;投入时间：很多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;linux-gugumips&#34;&gt;linux-gugumips&lt;/h3&gt;
&lt;p&gt;为 GuGuMIPS 适配的 Linux 代码，从主线内核上直接 patch，可以随时更新到最新内核。大部分代码参考了 &lt;a href=&#34;https://github.com/z4yx/linux-kernel&#34;&gt;z4yx/linux-kernel&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/linux-gugumips&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Linux Kernel&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;u-boot-gugumips&#34;&gt;u-boot-gugumips&lt;/h3&gt;
&lt;p&gt;为 GuGuMIPS 适配的 U-Boot 代码，从 U-Boot 主线上 fork 而来。大部分代码参考了 &lt;a href=&#34;https://github.com/z4yx/u-boot-naivemips&#34;&gt;z4yx/u-boot-naivemips&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/u-boot-gugumips&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：U-Boot&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ucore-gugumips&#34;&gt;ucore-gugumips&lt;/h3&gt;
&lt;p&gt;为 GuGuMIPS 适配的 uCore 代码，只在外设方面做了微小的改动。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/ucore-gugumips&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Kernel&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：3&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;usbh&#34;&gt;usbh&lt;/h3&gt;
&lt;p&gt;USB 2.0 FS 控制器，从 UltraEmbedded USB Host Controller 修改而来，并且打包为了 Vivado IP。对应的驱动在上面的 Linux 和 U-Boot 仓库中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/usbh&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Hardware&lt;/li&gt;
&lt;li&gt;投入时间：很多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jabahomework&#34;&gt;JabaHomework&lt;/h3&gt;
&lt;p&gt;Java OJ 上的作业外加考试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/jaba-homework&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Java&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：1&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;newsapp&#34;&gt;NewsApp&lt;/h3&gt;
&lt;p&gt;Java 大作业，一个简单的新闻 App。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/qyz-thu/NewsApp&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Java，Android&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：1&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;asm-homework&#34;&gt;asm-homework&lt;/h3&gt;
&lt;p&gt;汇编小学期的作业，包括小作业和两次实验的代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/asm-homework&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：汇编，x86，MIPS&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sdes-visualization&#34;&gt;sdes-visualization&lt;/h3&gt;
&lt;p&gt;对 S-DES 加密过程的可视化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/sdes-visualization&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Elm，CSS&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;booth-visualization&#34;&gt;booth-visualization&lt;/h3&gt;
&lt;p&gt;对 Booth 乘法过程的可视化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/booth-visualization&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Elm&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;integer-divide-visualization&#34;&gt;integer-divide-visualization&lt;/h3&gt;
&lt;p&gt;对整数除法过程的可视化，非课程要求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/integer-divide-visualization&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Elm&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rocket2thinpad&#34;&gt;rocket2thinpad&lt;/h3&gt;
&lt;p&gt;把 Rocket Chip 运行在 Thinpad 上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/rocket2thinpad&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Verilog，Vivado，Rocket Chip，Chisel，Scala&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：7&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;online_tac_vm&#34;&gt;online_tac_vm&lt;/h3&gt;
&lt;p&gt;在线的 TAC 虚拟机，可以在线执行编译原理 PA3 生成的 TAC。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/online_tac_vm&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，Yew&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;online_decaf&#34;&gt;online_decaf&lt;/h3&gt;
&lt;p&gt;在线的 Decaf 编译器，可以在线运行编译原理的 PA。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/online_decaf&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，Yew&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gll-pg&#34;&gt;gll-pg&lt;/h3&gt;
&lt;p&gt;一个 GLL 的 Parser Generator，参考了 MashPlant/lalr1 和 GLL 论文。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/gll-pg&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，Proc macro，Parsing&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;decaf-lsp&#34;&gt;decaf-lsp&lt;/h3&gt;
&lt;p&gt;Decaf 语言的 LSP Server 实现，支持 Hover、Symbol 等功能，配合 &lt;a href=&#34;https://github.com/jiegec/decaf-vscode&#34;&gt;decaf-vscode&lt;/a&gt; 使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/decaf-lsp&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，LSP，VSCode&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;decaf-rs-pa&#34;&gt;decaf-rs-pa&lt;/h3&gt;
&lt;p&gt;编译原理的 PA，基于 @MashPlant 的 Rust 框架。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/decaf-rs-pa&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;signalprocessing&#34;&gt;SignalProcessing&lt;/h3&gt;
&lt;p&gt;信号处理原理课程的实验。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/SignalProcessing&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：信号处理&lt;/li&gt;
&lt;li&gt;投入时间：较少&lt;/li&gt;
&lt;li&gt;喜爱：3&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dpll&#34;&gt;dpll&lt;/h3&gt;
&lt;p&gt;软件分析与验证课程的实验。要求实现 DPLL 算法来解决 SAT 问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/dpll&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C++&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cache&#34;&gt;cache&lt;/h3&gt;
&lt;p&gt;计算机系统结构课程的实验。模拟一个 Cache 的行为。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/cache&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C++&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：1&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tomasulo&#34;&gt;tomasulo&lt;/h3&gt;
&lt;p&gt;计算机系统结构课程的实验。实现 Tomasulo 算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/tomasulo&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C++&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：1&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;crypto&#34;&gt;crypto&lt;/h3&gt;
&lt;p&gt;现代密码学课程的实验。要求实现几个密码学算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/crypto&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：密码学&lt;/li&gt;
&lt;li&gt;投入时间：较少&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;miller-rabin&#34;&gt;miller-rabin&lt;/h3&gt;
&lt;p&gt;现代密码学课程的实验。要求实现 Miller-Rabin 算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/miller-rabin&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：密码学&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：3&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;file-server&#34;&gt;file-server&lt;/h3&gt;
&lt;p&gt;网络编程技术课程的实验。要求实现支持上传和下载的文件服务器和配套的客户端。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/file-server&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：网络编程&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：2&lt;/li&gt;
&lt;li&gt;收获：2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cache-advanced&#34;&gt;cache-advanced&lt;/h3&gt;
&lt;p&gt;高等计算机系统结构课程的实验。和本科生课实验类似。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/cache-advanced&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：0&lt;/li&gt;
&lt;li&gt;收获：0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sgemm-optimize&#34;&gt;sgemm-optimize&lt;/h3&gt;
&lt;p&gt;高性能计算实验课程的实验，在 Kunpeng 平台上优化 SGEMM。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/sgemm-optimize&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：OpenMP, MPI&lt;/li&gt;
&lt;li&gt;投入时间：较多&lt;/li&gt;
&lt;li&gt;喜爱：8&lt;/li&gt;
&lt;li&gt;收获：8&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;个人参与或编写的项目-1&#34;&gt;个人参与或编写的项目&lt;/h2&gt;
&lt;h3 id=&#34;macgesture&#34;&gt;MacGesture&lt;/h3&gt;
&lt;p&gt;高中时候接手的一个项目，在 macOS 上进行手势识别，然后执行相应的动作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/MacGesture/MacGesture&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Objective-C&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：3&lt;/li&gt;
&lt;li&gt;收获：2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;clone-learn-tsinghua&#34;&gt;clone-learn-tsinghua&lt;/h3&gt;
&lt;p&gt;清华网络学堂的备份工具。用于毕业生的资料归档。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/clone-learn-tsinghua&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：TypeScript&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：8&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cs140e&#34;&gt;CS140e&lt;/h3&gt;
&lt;p&gt;大一寒假的时候，Stanford CS140e 首次做出了用 Rust 写操作系统作为实验课程的尝试，我也跟着做了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/cs140e&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，操作系统&lt;/li&gt;
&lt;li&gt;投入时间：较多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rustup-mirror&#34;&gt;rustup-mirror&lt;/h3&gt;
&lt;p&gt;把 rustup 同步到本地的工具，用于 TUNA 等镜像站。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/rustup-mirror&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;classroom-helper&#34;&gt;classroom-helper&lt;/h3&gt;
&lt;p&gt;为“实验物理的大数据方法”课程编写的工具，配合 GitHub Classroom 使用的工具，自动批量 clone 作业仓库，并且执行脚本进行评分，显示代码更改历史。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/classroom-helper&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，TUI&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;verilog-format&#34;&gt;verilog-format&lt;/h3&gt;
&lt;p&gt;一个简单的 Verilog / SystemVerilog 格式化工具。未完成，勿用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/verilog-format&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，Nom，Parsing&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jielabs&#34;&gt;JieLabs&lt;/h3&gt;
&lt;p&gt;数字逻辑实验平台，远程操作 FPGA 和一些元件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/thu-cs-lab/JieLabs-Web&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：React、Rust、WebSocket、Buildroot&lt;/li&gt;
&lt;li&gt;投入时间：很多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;webhookd&#34;&gt;webhookd&lt;/h3&gt;
&lt;p&gt;一个用于处理 webhook 消息并执行操作的服务。支持 Gitlab 和 GitHub。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/webhookd&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;usbip&#34;&gt;usbip&lt;/h3&gt;
&lt;p&gt;运行一个 USB/IP 服务，可以模拟设备或者转发到 libusb。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.coggm/jiegec/usbip&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：8&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tanlabs&#34;&gt;TANLabs&lt;/h3&gt;
&lt;p&gt;网络原理实验平台，包含 CI 自动评测，树莓派评测等功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相关技术：React、Rust、S3、SQS&lt;/li&gt;
&lt;li&gt;投入时间：很多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ht42b534usb2uart&#34;&gt;HT42B534USB2UART&lt;/h3&gt;
&lt;p&gt;一个 USB 2 UART 板子，采用的芯片是 HT42B534。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/HT42B534USB2UART&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：KiCad、JLC&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;daccountd&#34;&gt;daccountd&lt;/h3&gt;
&lt;p&gt;基于 etcd 编写的 LDAP 服务器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/daccountd&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Go、Etcd&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;wm8731pmod&#34;&gt;WM8731PMOD&lt;/h3&gt;
&lt;p&gt;一个 PMOD 接口的扩展板，上有 WM8731 芯片用于音频处理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/WM8731PMOD&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：LCEDA、JLC&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;yxportal&#34;&gt;YXPortal&lt;/h3&gt;
&lt;p&gt;一个简单的 OAuth 客户端 + 服务端，用于实验系统的用户认证。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相关技术：Go、Elm&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：8&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;未完待续&#34;&gt;未完待续&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jia.je/projects/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jia.je/projects/readme/</guid>
      <description>&lt;h1 id=&#34;jiegec-的项目&#34;&gt;jiegec 的项目&lt;/h1&gt;
&lt;p&gt;受 &lt;a href=&#34;https://github.com/wangrunji0408/UndergraduateProjects&#34;&gt;wangrunji0408/UndergraduateProjects&lt;/a&gt; 启发，我也来总结一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q：时间都去哪儿了？&lt;/p&gt;
&lt;p&gt;A：刚刚睡醒 什么事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;h3 id=&#34;计算机系课程及相关作业&#34;&gt;计算机系课程及相关作业&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;课程&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2017.10&lt;/td&gt;
&lt;td&gt;离散数学&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#props&#34;&gt;Props&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017.11&lt;/td&gt;
&lt;td&gt;程序设计基础&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#simpleextfs&#34;&gt;SimpleExtFs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018.05&lt;/td&gt;
&lt;td&gt;面向对象程序设计基础&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#onepasssynthesisdmfb&#34;&gt;OnePassSynthesisDMFB&lt;/a&gt;，&lt;a href=&#34;#naiveledger&#34;&gt;NaiveLedger&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018.06&lt;/td&gt;
&lt;td&gt;概率论与数理统计&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#hllebpf&#34;&gt;HLLeBPF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018.07&lt;/td&gt;
&lt;td&gt;程序设计小学期&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#dmcd&#34;&gt;DMCD&lt;/a&gt;，&lt;a href=&#34;#chinesechess&#34;&gt;ChineseChess&lt;/a&gt;，&lt;a href=&#34;#searchengine&#34;&gt;SearchEngine&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018.11&lt;/td&gt;
&lt;td&gt;软件工程&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#info9&#34;&gt;Info9&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.02&lt;/td&gt;
&lt;td&gt;操作系统&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#rcore&#34;&gt;rCore&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.04&lt;/td&gt;
&lt;td&gt;人工智能导论&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#pinyin&#34;&gt;Pinyin&lt;/a&gt;，&lt;a href=&#34;#fourchess&#34;&gt;FourChess&lt;/a&gt;，&lt;a href=&#34;#emotionclassifier&#34;&gt;EmotionClassifier&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.04&lt;/td&gt;
&lt;td&gt;存储技术基础&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#kvengine&#34;&gt;KVEngine&lt;/a&gt;，&lt;a href=&#34;#hermes&#34;&gt;HERMES&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.05&lt;/td&gt;
&lt;td&gt;多媒体技术基础&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#rbsplit&#34;&gt;RBSplit&lt;/a&gt;，&lt;a href=&#34;#multimediacompression&#34;&gt;MultimediaCompression&lt;/a&gt;，&lt;a href=&#34;#multimediasound&#34;&gt;MultimediaSound&lt;/a&gt;，&lt;a href=&#34;#multimediaanalysis&#34;&gt;MultimediaAnalysis&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.06&lt;/td&gt;
&lt;td&gt;数字逻辑设计&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#naiverouter&#34;&gt;NaiveRouter&lt;/a&gt;，&lt;a href=&#34;#router&#34;&gt;router&lt;/a&gt;，&lt;a href=&#34;#router_mb&#34;&gt;router_mb&lt;/a&gt;，&lt;a href=&#34;#router_ksz8795&#34;&gt;router_ksz8795&lt;/a&gt;，&lt;a href=&#34;#rgmiimux&#34;&gt;rgmiimux&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.06&lt;/td&gt;
&lt;td&gt;计算机网络原理&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#Router-Lab&#34;&gt;Router-Lab&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.07&lt;/td&gt;
&lt;td&gt;专业实践&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#gugumips&#34;&gt;GuGuMIPS&lt;/a&gt;，&lt;a href=&#34;#gugumipssoc&#34;&gt;GuGuMIPSSoC&lt;/a&gt;，&lt;a href=&#34;#linux-gugumips&#34;&gt;linux-gugumips&lt;/a&gt;，&lt;a href=&#34;#u-boot-gugumips&#34;&gt;u-boot-gugumips&lt;/a&gt;，&lt;a href=&#34;#ucore-gugumips&#34;&gt;ucore-gugumips&lt;/a&gt;，&lt;a href=&#34;#usbh&#34;&gt;usbh&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.08&lt;/td&gt;
&lt;td&gt;Java 程序设计与训练&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#jabahomework&#34;&gt;JabaHomework&lt;/a&gt;，&lt;a href=&#34;#newsapp&#34;&gt;NewsApp&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.08&lt;/td&gt;
&lt;td&gt;汇编语言程序设计&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#asm-homework&#34;&gt;asm-homework&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.09&lt;/td&gt;
&lt;td&gt;计算机网络安全技术&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#sdes-visualization&#34;&gt;sdes-visualization&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.10&lt;/td&gt;
&lt;td&gt;计算机组成原理&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#booth-visualization&#34;&gt;booth-visualization&lt;/a&gt;，&lt;a href=&#34;#integer-divide-visualization&#34;&gt;integer-divide-visualization&lt;/a&gt;，&lt;a href=&#34;#rocket2thinpad&#34;&gt;rocket2thinpad&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.10&lt;/td&gt;
&lt;td&gt;编译原理&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#online_tac_vm&#34;&gt;online_tac_vm&lt;/a&gt;，&lt;a href=&#34;#online_decaf&#34;&gt;online_decaf&lt;/a&gt;，&lt;a href=&#34;#gll-pg&#34;&gt;gll-pg&lt;/a&gt;，&lt;a href=&#34;#decaf-lsp&#34;&gt;decaf-lsp&lt;/a&gt;，&lt;a href=&#34;#decaf-rs-pa&#34;&gt;decaf-rs-pa&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.01&lt;/td&gt;
&lt;td&gt;信号处理原理&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#SignalProcessing&#34;&gt;SignalProcessing&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.03&lt;/td&gt;
&lt;td&gt;软件分析与验证&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#dpll&#34;&gt;dpll&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.04&lt;/td&gt;
&lt;td&gt;计算机系统结构&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#cache&#34;&gt;cache&lt;/a&gt;，&lt;a href=&#34;#tomasulo&#34;&gt;tomasulo&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.04&lt;/td&gt;
&lt;td&gt;现代密码学&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#crypto&#34;&gt;crypto&lt;/a&gt;，&lt;a href=&#34;#miller-rabin&#34;&gt;miller-rabin&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.05&lt;/td&gt;
&lt;td&gt;网络编程技术&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#file-server&#34;&gt;file-server&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.10&lt;/td&gt;
&lt;td&gt;高等计算机系统结构&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#cache-advanced&#34;&gt;cache-advanced&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.10&lt;/td&gt;
&lt;td&gt;高性能计算实验&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#sgemm-optimize&#34;&gt;sgemm-optimize&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;参加比赛的项目&#34;&gt;参加比赛的项目&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;比赛&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2018.09&lt;/td&gt;
&lt;td&gt;THUCTF2018&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#ctf-writeups&#34;&gt;ctf-writeups&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.07&lt;/td&gt;
&lt;td&gt;龙芯杯&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#gugumips&#34;&gt;GuGuMIPS&lt;/a&gt;，&lt;a href=&#34;#gugumipssoc&#34;&gt;GuGuMIPSSoC&lt;/a&gt;，&lt;a href=&#34;#linux-gugumips&#34;&gt;linux-gugumips&lt;/a&gt;，&lt;a href=&#34;#u-boot-gugumips&#34;&gt;u-boot-gugumips&lt;/a&gt;，&lt;a href=&#34;#ucore-gugumips&#34;&gt;ucore-gugumips&lt;/a&gt;，&lt;a href=&#34;#usbh&#34;&gt;usbh&lt;/a&gt;，&lt;a href=&#34;#nontrivial-mips&#34;&gt;nontrivial-mips&lt;/a&gt;，&lt;a href=&#34;#linux-nontrivial-mips&#34;&gt;linux-nontrivial-mips&lt;/a&gt;，&lt;a href=&#34;#u-boot-nontrivialmips&#34;&gt;u-boot-nontrivial-mips&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.08&lt;/td&gt;
&lt;td&gt;华为杯&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#trivialcompiler&#34;&gt;trivialcompiler&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.06&lt;/td&gt;
&lt;td&gt;ISC20 SCC&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#Elmerfem&#34;&gt;Elmerfem&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.11&lt;/td&gt;
&lt;td&gt;SC20 VSCC&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#MemXCT&#34;&gt;MemXCT&lt;/a&gt;，&lt;a href=&#34;#miniVite&#34;&gt;miniVite&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.05&lt;/td&gt;
&lt;td&gt;ASC20-21 SCC&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#PRESTO&#34;&gt;PRESTO&lt;/a&gt;，&lt;a href=&#34;#HPL&#34;&gt;HPL&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.07&lt;/td&gt;
&lt;td&gt;ISC21 SCC&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#CodingChallenge&#34;&gt;Coding Challenge&lt;/a&gt;，&lt;a href=&#34;#HPL&#34;&gt;HPL&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;个人参与或编写的项目&#34;&gt;个人参与或编写的项目&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2016.03&lt;/td&gt;
&lt;td&gt;MacGesture macOS 上的手势软件&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#macgesture&#34;&gt;MacGesture&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017.10&lt;/td&gt;
&lt;td&gt;clone-learn-tsinghua 清华网络学堂的备份工具&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#clone-learn-tsinghua&#34;&gt;clone-learn-tsinghua&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018.02&lt;/td&gt;
&lt;td&gt;cs140e Stanford CS140e 实验课程&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#cs140e&#34;&gt;CS140e&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.02&lt;/td&gt;
&lt;td&gt;rustup-mirror Rustup 镜像工具&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#rustup-mirror&#34;&gt;rustup-mirror&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.02&lt;/td&gt;
&lt;td&gt;thuip 从 BGP 信息中导出清华 IP 地址段&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#thuip&#34;&gt;thuip&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.02&lt;/td&gt;
&lt;td&gt;tantivy-jieba 把结巴分词用于 Tantivy&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#tantivy-jieba&#34;&gt;tantivy-jieba&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.07&lt;/td&gt;
&lt;td&gt;classroom-helper GitHub Classroom 辅助 TUI&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#classroom-helper&#34;&gt;classroom-helper&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.09&lt;/td&gt;
&lt;td&gt;verilog-format Verilog/SystemVerilog 格式化&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#verilog-format&#34;&gt;verilog-format&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019.10&lt;/td&gt;
&lt;td&gt;decode-bcbp 在线解码机票 BCBP 信息&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#decode-bcbp&#34;&gt;decode-bcbp&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.02&lt;/td&gt;
&lt;td&gt;JieLabs 数字逻辑实验平台&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#JieLabs&#34;&gt;JieLabs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.02&lt;/td&gt;
&lt;td&gt;verilog-lang 递归下降的 Verilog Parser&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#verilog-lang&#34;&gt;verilog-lang&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.02&lt;/td&gt;
&lt;td&gt;maze-routing Rust 语言实现的 Grid Router 算法&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#maze-routing&#34;&gt;maze-routing&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.05&lt;/td&gt;
&lt;td&gt;webhookd 对 Gitlab/GitHub 的 webhook 进行响应&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#webhookd&#34;&gt;webhookd&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.05&lt;/td&gt;
&lt;td&gt;usbip 用 Rust 实现的 USB/IP 服务端&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#usbip&#34;&gt;usbip&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.06&lt;/td&gt;
&lt;td&gt;cluster-job-monitor 集群任务状态监测&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#cluster-job-monitor&#34;&gt;cluster-job-monitor&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.07&lt;/td&gt;
&lt;td&gt;netconf-rs RFC2641 NETCONF 客户端库&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#netconf-rs&#34;&gt;netconf-rs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.08&lt;/td&gt;
&lt;td&gt;TANLabs 网络原理实验平台&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#TANLabs&#34;&gt;TANLabs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.09&lt;/td&gt;
&lt;td&gt;aws-static-website-cdk AWS CDK 部署静态网站&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#aws-static-website-cdk&#34;&gt;aws-static-website-cdk&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.10&lt;/td&gt;
&lt;td&gt;ddns 跨平台 DDNS 客户端&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#ddns&#34;&gt;ddns&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.11&lt;/td&gt;
&lt;td&gt;machine-tester 集群机器测试工具&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#machine-tester&#34;&gt;machine-tester&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.12&lt;/td&gt;
&lt;td&gt;HT42B534 USB to UART 开源 PCB 设计&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#HT42B534USB2UART&#34;&gt;HT42B534USB2UART&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.01&lt;/td&gt;
&lt;td&gt;EspinalLib 使用 SpinalHDL 实现的 HDL 模块&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#espinnallib&#34;&gt;EspinalLib&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.02&lt;/td&gt;
&lt;td&gt;daccountd 分布式强一致 LDAP 服务器&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#daccountd&#34;&gt;daccountd&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.02&lt;/td&gt;
&lt;td&gt;minipxe 用于 PXE 的迷你 DHCP+TFTP 服务器&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#minpxe&#34;&gt;minipxe&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.02&lt;/td&gt;
&lt;td&gt;wechat-dump 从 iOS 备份中导出微信聊天记录&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#wechat-dump&#34;&gt;wechat-dump&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.03&lt;/td&gt;
&lt;td&gt;WM8731PMOD 音频 PMOD 扩展板&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#WM8731PMOD&#34;&gt;WM8731PMOD&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.03&lt;/td&gt;
&lt;td&gt;YXPortal 实验用户管理系统&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#YXPortal&#34;&gt;YXPortal&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.07&lt;/td&gt;
&lt;td&gt;cpu-micro-benchmarks 针对 CPU 架构的微性能测试&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#cpu-micro-benchmarks&#34;&gt;cpu-micro-benchmarks&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.09&lt;/td&gt;
&lt;td&gt;fpu-wrappers 浮点计算单元封装&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#fpu-wrappers&#34;&gt;fpu-wrappers&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.09&lt;/td&gt;
&lt;td&gt;feishu-backup 飞书文档备份导出工具&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#feishu-backup&#34;&gt;feishu-backup&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.09&lt;/td&gt;
&lt;td&gt;rocket-chip-vcu128 在 VCU128 开发板上运行 Rocket Chip&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#rocket-chip-vcu128&#34;&gt;rocket-chip-vcu128&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.09&lt;/td&gt;
&lt;td&gt;dcst-facts 记录清华大学计算机系客观数据&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#dcst-facts&#34;&gt;dcst-facts&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.10&lt;/td&gt;
&lt;td&gt;gitlab-cloner GitLab 项目批量克隆工具&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#gitlab-cloner&#34;&gt;gitlab-cloner&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021.12&lt;/td&gt;
&lt;td&gt;jtag-remote-server 远程 JTAG 调试工具&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#jtag-remote-server&#34;&gt;jtag-remote-server&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022.01&lt;/td&gt;
&lt;td&gt;video2srt 使用云服务生成视频的字幕&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#video2srt&#34;&gt;video2srt&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022.01&lt;/td&gt;
&lt;td&gt;rvv-kernels 使用 RISC-V 向量扩展实现算法&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#rvv-kernels&#34;&gt;rvv-kernels&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022.07&lt;/td&gt;
&lt;td&gt;ifupdown-to-systemd-networkd 将 ifupdown 配置转换为 systemd-networkd 配置&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#ifupdown-to-systemd-networkd&#34;&gt;ifupdown-to-systemd-networkd&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022.09&lt;/td&gt;
&lt;td&gt;kicad-symbol-gen KiCad 符号生成器&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#kicad-symbol-gen&#34;&gt;kicad-symbol-gen&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2023.02&lt;/td&gt;
&lt;td&gt;china_bean_importers 将支付记录导入到 beancount&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#china_bean_importers&#34;&gt;china_bean_importers&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2023.04&lt;/td&gt;
&lt;td&gt;chisel-memory-lower 转换 chisel 内存为原语&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#chisel-memory-lower&#34;&gt;chisel-memory-lower&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;计算机系课程及相关作业-1&#34;&gt;计算机系课程及相关作业&lt;/h2&gt;
&lt;h3 id=&#34;props&#34;&gt;Props&lt;/h3&gt;
&lt;p&gt;一个简单的对于命题的计算器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/props&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C++，Flex，Bison&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;simpleextfs&#34;&gt;SimpleExtFs&lt;/h3&gt;
&lt;p&gt;一个简单的内存文件系统，支持可持久化和一些简单的 shell 指令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/extfs&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C，FS&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：3&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;onepasssynthesisdmfb&#34;&gt;OnePassSynthesisDMFB&lt;/h3&gt;
&lt;p&gt;DMFB 是 Digital MicroFluidic Biochips 的缩写。需要实现一篇文章里的算法，生成 SAT 规则后丢给 z3 求解，再把结果可视化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/OnePassSynthesisDMFB&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C++，Graphviz，Z3，SAT&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：0&lt;/li&gt;
&lt;li&gt;收获：2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;naiveledger&#34;&gt;NaiveLedger&lt;/h3&gt;
&lt;p&gt;一个简单的 AlgoRand 实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合作同学：wjd jl lxy lwb&lt;/li&gt;
&lt;li&gt;GitHub 未公开&lt;/li&gt;
&lt;li&gt;相关技术：C++，密码学&lt;/li&gt;
&lt;li&gt;投入时间：一般&lt;/li&gt;
&lt;li&gt;喜爱：1&lt;/li&gt;
&lt;li&gt;收获：2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hllebpf&#34;&gt;HLLeBPF&lt;/h3&gt;
&lt;p&gt;把 HyperLogLog 用 eBPF 实现了，可以估计一段时间内访问本机的 IP 数量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/hll_ebpf&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C，eBPF，HyperLogLog&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dmcd&#34;&gt;DMCD&lt;/h3&gt;
&lt;p&gt;DMCD 是 Digital Microfluidic Chip Designer 的缩写。同样实现一个算法，按照给定的网络解一堆方程，然后用 Qt 可视化。可以在 Qt 上进行参数的调整，也可以用一个简单的遗传算法去求解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/codingterm/tree/master/Week1&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Qt，遗传算法&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：0&lt;/li&gt;
&lt;li&gt;收获：0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;chinesechess&#34;&gt;ChineseChess&lt;/h3&gt;
&lt;p&gt;Qt 编写的中国象棋在线对战。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/codingterm/tree/master/Week2&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Qt，Socket&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：2&lt;/li&gt;
&lt;li&gt;收获：2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;searchengine&#34;&gt;SearchEngine&lt;/h3&gt;
&lt;p&gt;用 Python 编写爬虫，并实现简单的搜索引擎。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/codingterm/tree/master/Week3&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Python，Django，Web，Reverse Index，TF-IDF，ORM&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：2&lt;/li&gt;
&lt;li&gt;收获：2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;info9&#34;&gt;Info9&lt;/h3&gt;
&lt;p&gt;用 Vue.js 编写前端，Python Django 编写后端，实现一堆功能的网站。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合作同学：xlq wxp&lt;/li&gt;
&lt;li&gt;GitHub 未公开&lt;/li&gt;
&lt;li&gt;相关技术：Vue，Python，Django，Web，MongoDB&lt;/li&gt;
&lt;li&gt;投入时间：&amp;gt;100h&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rcore&#34;&gt;rCore&lt;/h3&gt;
&lt;p&gt;完善用 Rust 编写的操作系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合作同学：太多了&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rcore-os/rCore&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，操作系统，文件系统，网络&lt;/li&gt;
&lt;li&gt;投入时间：&amp;gt;200h&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：100&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pinyin&#34;&gt;Pinyin&lt;/h3&gt;
&lt;p&gt;用 Rust 实现的基于马尔可夫链的输入法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/pinyin&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，马尔可夫链&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：1&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fourchess&#34;&gt;FourChess&lt;/h3&gt;
&lt;p&gt;四字棋 AI，用 MCTS（UCT）实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/FourChess&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：MCTS，UCT&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：1&lt;/li&gt;
&lt;li&gt;收获：2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;emotionclassifier&#34;&gt;EmotionClassifier&lt;/h3&gt;
&lt;p&gt;用 CNN/RNN/MLP 实现一个分类任务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/EmotionClassifier&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：PyTorch&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：0&lt;/li&gt;
&lt;li&gt;收获：0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kvengine&#34;&gt;KVEngine&lt;/h3&gt;
&lt;p&gt;实现一个简单的 KV 引擎，保证 Write Consistency 和 Crash Consistency。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/kv-engine&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C++，WAL&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：3&lt;/li&gt;
&lt;li&gt;收获：4&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hermes&#34;&gt;HERMES&lt;/h3&gt;
&lt;p&gt;实现一个 FUSE 文件系统，背后采用 KV 来存储数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合作同学：csq gj lxy&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Harry-Chen/HERMES&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C++，FUSE&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rbsplit&#34;&gt;RbSplit&lt;/h3&gt;
&lt;p&gt;把图片的颜色拆开，然后错位后再拼在一起，变成一个新的图。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/rbsplit&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Python&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：3&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multimediacompression&#34;&gt;MultimediaCompression&lt;/h3&gt;
&lt;p&gt;第一部分是用不同的方法计算图片的 DCT，然后再逆回来对比图片质量。对比不同量化矩阵对于图片的质量的影响。第二部分是实现一个动作估计，从一系列图中捕捉一个物体的轨迹。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/MultimediaCompression&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Python&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multimediasound&#34;&gt;MultimediaSound&lt;/h3&gt;
&lt;p&gt;用 MATLAB 的 STRAIGHT 工具箱进行声音的调整，例如男声-&amp;gt;女生。然后用 Python 衡量声音之间的距离。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/MultimediaSound&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Python，MATLAB&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multimediaanalysis&#34;&gt;MultimediaAnalysis&lt;/h3&gt;
&lt;p&gt;计算每个图的颜色分布立方图，根据立方图来进行聚类计算。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/MultimediaAnalysis&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Python&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：4&lt;/li&gt;
&lt;li&gt;收获：4&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;naiverouter&#34;&gt;NaiveRouter&lt;/h3&gt;
&lt;p&gt;硬件转发的路由器 IP 实现，通过 AXI 与 CPU 交互。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/naiverouter&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：SystemVerilog，网络，AXI&lt;/li&gt;
&lt;li&gt;投入时间：较多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;router&#34;&gt;router&lt;/h3&gt;
&lt;p&gt;在黑金 AX7021 开发板上的 SoC，采用了 NaiveRouter 进行硬件转发，在 PS 上实现 RIP 协议和路由信息的更新。另外还实现了 HDMI 的路由状态可视化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/router&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Vivado&lt;/li&gt;
&lt;li&gt;投入时间：较多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;router_mb&#34;&gt;router_mb&lt;/h3&gt;
&lt;p&gt;同样在黑金 AX7021 开发板上的 SoC，也是采用 NaiveRouter 进行硬件转发，只不过把软件部分从 PS 移到了 MicroBlaze 中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/router_mb&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Vivado&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：8&lt;/li&gt;
&lt;li&gt;收获：5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;router_ksz8795&#34;&gt;router_ksz8795&lt;/h3&gt;
&lt;p&gt;在 Pynq 外接 KSZ8795 扩展板上开发的 SoC，采用 MicroBlaze 运行代码，对 KSZ8795 芯片的编程和操作进行了验证。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/router_ksz8795&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Vivado&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：8&lt;/li&gt;
&lt;li&gt;收获：5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rgmiimux&#34;&gt;rgmiimux&lt;/h3&gt;
&lt;p&gt;一个 RGMII“一分四”的 IP，通过 VLAN 进行区分，类似 KSZ8795 的部分功能，只不过是在 FPGA 内部实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/rgmiimux&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Vivado&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;router-lab&#34;&gt;Router-Lab&lt;/h3&gt;
&lt;p&gt;2019 计算机网络原理课程的实验。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/z4yx/Router-Lab&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Networking&lt;/li&gt;
&lt;li&gt;投入时间：较多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gugumips&#34;&gt;GuGuMIPS&lt;/h3&gt;
&lt;p&gt;自己编写的小端 MIPS32 实现，能够启动 Linux，自己编写的 Cache 处于未完成状态。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/GuGuMIPS&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：SystemVerilog&lt;/li&gt;
&lt;li&gt;投入时间：很多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gugumipssoc&#34;&gt;GuGuMIPSSoC&lt;/h3&gt;
&lt;p&gt;以 GuGuMIPS 为 CPU，在龙芯实验箱上运行的一个 SoC，支持网络，USB，LCD 等外设&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/GuGuMIPSSoC&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Vivado&lt;/li&gt;
&lt;li&gt;投入时间：很多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;linux-gugumips&#34;&gt;linux-gugumips&lt;/h3&gt;
&lt;p&gt;为 GuGuMIPS 适配的 Linux 代码，从主线内核上直接 patch，可以随时更新到最新内核。大部分代码参考了 &lt;a href=&#34;https://github.com/z4yx/linux-kernel&#34;&gt;z4yx/linux-kernel&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/linux-gugumips&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Linux Kernel&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;u-boot-gugumips&#34;&gt;u-boot-gugumips&lt;/h3&gt;
&lt;p&gt;为 GuGuMIPS 适配的 U-Boot 代码，从 U-Boot 主线上 fork 而来。大部分代码参考了 &lt;a href=&#34;https://github.com/z4yx/u-boot-naivemips&#34;&gt;z4yx/u-boot-naivemips&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/u-boot-gugumips&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：U-Boot&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ucore-gugumips&#34;&gt;ucore-gugumips&lt;/h3&gt;
&lt;p&gt;为 GuGuMIPS 适配的 uCore 代码，只在外设方面做了微小的改动。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/ucore-gugumips&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Kernel&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：3&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;usbh&#34;&gt;usbh&lt;/h3&gt;
&lt;p&gt;USB 2.0 FS 控制器，从 UltraEmbedded USB Host Controller 修改而来，并且打包为了 Vivado IP。对应的驱动在上面的 Linux 和 U-Boot 仓库中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/usbh&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Hardware&lt;/li&gt;
&lt;li&gt;投入时间：很多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jabahomework&#34;&gt;JabaHomework&lt;/h3&gt;
&lt;p&gt;Java OJ 上的作业外加考试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/jaba-homework&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Java&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：1&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;newsapp&#34;&gt;NewsApp&lt;/h3&gt;
&lt;p&gt;Java 大作业，一个简单的新闻 App。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/qyz-thu/NewsApp&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Java，Android&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：1&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;asm-homework&#34;&gt;asm-homework&lt;/h3&gt;
&lt;p&gt;汇编小学期的作业，包括小作业和两次实验的代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/asm-homework&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：汇编，x86，MIPS&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sdes-visualization&#34;&gt;sdes-visualization&lt;/h3&gt;
&lt;p&gt;对 S-DES 加密过程的可视化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/sdes-visualization&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Elm，CSS&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;booth-visualization&#34;&gt;booth-visualization&lt;/h3&gt;
&lt;p&gt;对 Booth 乘法过程的可视化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/booth-visualization&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Elm&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;integer-divide-visualization&#34;&gt;integer-divide-visualization&lt;/h3&gt;
&lt;p&gt;对整数除法过程的可视化，非课程要求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/integer-divide-visualization&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Elm&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rocket2thinpad&#34;&gt;rocket2thinpad&lt;/h3&gt;
&lt;p&gt;把 Rocket Chip 运行在 Thinpad 上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/rocket2thinpad&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Verilog，Vivado，Rocket Chip，Chisel，Scala&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：7&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;online_tac_vm&#34;&gt;online_tac_vm&lt;/h3&gt;
&lt;p&gt;在线的 TAC 虚拟机，可以在线执行编译原理 PA3 生成的 TAC。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/online_tac_vm&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，Yew&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;online_decaf&#34;&gt;online_decaf&lt;/h3&gt;
&lt;p&gt;在线的 Decaf 编译器，可以在线运行编译原理的 PA。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/online_decaf&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，Yew&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gll-pg&#34;&gt;gll-pg&lt;/h3&gt;
&lt;p&gt;一个 GLL 的 Parser Generator，参考了 MashPlant/lalr1 和 GLL 论文。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/gll-pg&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，Proc macro，Parsing&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;decaf-lsp&#34;&gt;decaf-lsp&lt;/h3&gt;
&lt;p&gt;Decaf 语言的 LSP Server 实现，支持 Hover、Symbol 等功能，配合 &lt;a href=&#34;https://github.com/jiegec/decaf-vscode&#34;&gt;decaf-vscode&lt;/a&gt; 使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/decaf-lsp&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，LSP，VSCode&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;decaf-rs-pa&#34;&gt;decaf-rs-pa&lt;/h3&gt;
&lt;p&gt;编译原理的 PA，基于 @MashPlant 的 Rust 框架。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/decaf-rs-pa&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;signalprocessing&#34;&gt;SignalProcessing&lt;/h3&gt;
&lt;p&gt;信号处理原理课程的实验。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/SignalProcessing&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：信号处理&lt;/li&gt;
&lt;li&gt;投入时间：较少&lt;/li&gt;
&lt;li&gt;喜爱：3&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dpll&#34;&gt;dpll&lt;/h3&gt;
&lt;p&gt;软件分析与验证课程的实验。要求实现 DPLL 算法来解决 SAT 问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/dpll&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C++&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cache&#34;&gt;cache&lt;/h3&gt;
&lt;p&gt;计算机系统结构课程的实验。模拟一个 Cache 的行为。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/cache&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C++&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：1&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tomasulo&#34;&gt;tomasulo&lt;/h3&gt;
&lt;p&gt;计算机系统结构课程的实验。实现 Tomasulo 算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/tomasulo&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C++&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：1&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;crypto&#34;&gt;crypto&lt;/h3&gt;
&lt;p&gt;现代密码学课程的实验。要求实现几个密码学算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/crypto&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：密码学&lt;/li&gt;
&lt;li&gt;投入时间：较少&lt;/li&gt;
&lt;li&gt;喜爱：5&lt;/li&gt;
&lt;li&gt;收获：5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;miller-rabin&#34;&gt;miller-rabin&lt;/h3&gt;
&lt;p&gt;现代密码学课程的实验。要求实现 Miller-Rabin 算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/miller-rabin&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：密码学&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：3&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;file-server&#34;&gt;file-server&lt;/h3&gt;
&lt;p&gt;网络编程技术课程的实验。要求实现支持上传和下载的文件服务器和配套的客户端。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/file-server&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：网络编程&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：2&lt;/li&gt;
&lt;li&gt;收获：2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cache-advanced&#34;&gt;cache-advanced&lt;/h3&gt;
&lt;p&gt;高等计算机系统结构课程的实验。和本科生课实验类似。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/cache-advanced&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：C&lt;/li&gt;
&lt;li&gt;投入时间：很少&lt;/li&gt;
&lt;li&gt;喜爱：0&lt;/li&gt;
&lt;li&gt;收获：0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sgemm-optimize&#34;&gt;sgemm-optimize&lt;/h3&gt;
&lt;p&gt;高性能计算实验课程的实验，在 Kunpeng 平台上优化 SGEMM。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/sgemm-optimize&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：OpenMP, MPI&lt;/li&gt;
&lt;li&gt;投入时间：较多&lt;/li&gt;
&lt;li&gt;喜爱：8&lt;/li&gt;
&lt;li&gt;收获：8&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;个人参与或编写的项目-1&#34;&gt;个人参与或编写的项目&lt;/h2&gt;
&lt;h3 id=&#34;macgesture&#34;&gt;MacGesture&lt;/h3&gt;
&lt;p&gt;高中时候接手的一个项目，在 macOS 上进行手势识别，然后执行相应的动作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/MacGesture/MacGesture&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Objective-C&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：3&lt;/li&gt;
&lt;li&gt;收获：2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;clone-learn-tsinghua&#34;&gt;clone-learn-tsinghua&lt;/h3&gt;
&lt;p&gt;清华网络学堂的备份工具。用于毕业生的资料归档。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/clone-learn-tsinghua&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：TypeScript&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：8&lt;/li&gt;
&lt;li&gt;收获：1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cs140e&#34;&gt;CS140e&lt;/h3&gt;
&lt;p&gt;大一寒假的时候，Stanford CS140e 首次做出了用 Rust 写操作系统作为实验课程的尝试，我也跟着做了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/cs140e&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，操作系统&lt;/li&gt;
&lt;li&gt;投入时间：较多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rustup-mirror&#34;&gt;rustup-mirror&lt;/h3&gt;
&lt;p&gt;把 rustup 同步到本地的工具，用于 TUNA 等镜像站。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/rustup-mirror&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;classroom-helper&#34;&gt;classroom-helper&lt;/h3&gt;
&lt;p&gt;为“实验物理的大数据方法”课程编写的工具，配合 GitHub Classroom 使用的工具，自动批量 clone 作业仓库，并且执行脚本进行评分，显示代码更改历史。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/classroom-helper&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，TUI&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;verilog-format&#34;&gt;verilog-format&lt;/h3&gt;
&lt;p&gt;一个简单的 Verilog / SystemVerilog 格式化工具。未完成，勿用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/verilog-format&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust，Nom，Parsing&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jielabs&#34;&gt;JieLabs&lt;/h3&gt;
&lt;p&gt;数字逻辑实验平台，远程操作 FPGA 和一些元件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/thu-cs-lab/JieLabs-Web&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：React、Rust、WebSocket、Buildroot&lt;/li&gt;
&lt;li&gt;投入时间：很多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;webhookd&#34;&gt;webhookd&lt;/h3&gt;
&lt;p&gt;一个用于处理 webhook 消息并执行操作的服务。支持 Gitlab 和 GitHub。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/webhookd&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;usbip&#34;&gt;usbip&lt;/h3&gt;
&lt;p&gt;运行一个 USB/IP 服务，可以模拟设备或者转发到 libusb。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.coggm/jiegec/usbip&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Rust&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：8&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tanlabs&#34;&gt;TANLabs&lt;/h3&gt;
&lt;p&gt;网络原理实验平台，包含 CI 自动评测，树莓派评测等功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相关技术：React、Rust、S3、SQS&lt;/li&gt;
&lt;li&gt;投入时间：很多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ht42b534usb2uart&#34;&gt;HT42B534USB2UART&lt;/h3&gt;
&lt;p&gt;一个 USB 2 UART 板子，采用的芯片是 HT42B534。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/HT42B534USB2UART&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：KiCad、JLC&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;daccountd&#34;&gt;daccountd&lt;/h3&gt;
&lt;p&gt;基于 etcd 编写的 LDAP 服务器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/daccountd&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：Go、Etcd&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;wm8731pmod&#34;&gt;WM8731PMOD&lt;/h3&gt;
&lt;p&gt;一个 PMOD 接口的扩展板，上有 WM8731 芯片用于音频处理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/WM8731PMOD&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关技术：LCEDA、JLC&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：10&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;yxportal&#34;&gt;YXPortal&lt;/h3&gt;
&lt;p&gt;一个简单的 OAuth 客户端 + 服务端，用于实验系统的用户认证。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相关技术：Go、Elm&lt;/li&gt;
&lt;li&gt;投入时间：不多&lt;/li&gt;
&lt;li&gt;喜爱：10&lt;/li&gt;
&lt;li&gt;收获：8&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;未完待续&#34;&gt;未完待续&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>