<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>杰哥的{运维，编程，调板子}小笔记</title><description>杰哥的{运维，编程，调板子}小笔记</description><link>https://jia.je/</link><atom:link href="https://jia.je/feed_rss_created.xml" rel="self" type="application/rss+xml" /><language>zh</language> <pubDate>Mon, 18 Nov 2024 15:56:38 -0000</pubDate> <lastBuildDate>Mon, 18 Nov 2024 15:56:38 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.16.0</generator> <item> <title>AMD Zen 5 微架构评测</title> <category>amd</category> <category>cpu</category> <category>hardware</category> <category>performance</category> <category>ryzen</category> <category>uarch-review</category> <category>zen5</category> <description>&lt;h1 id=&#34;amd-zen-5-微架构评测&#34;&gt;AMD Zen 5 微架构评测&lt;a class=&#34;headerlink&#34; href=&#34;#amd-zen-5-微架构评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Zen 5 是 AMD 最新的一代微架构，在很多地方和之前不同，因此测试一下这个微架构在各个方面的表现。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;官方信息&#34;&gt;官方信息&lt;a class=&#34;headerlink&#34; href=&#34;#官方信息&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;AMD 一向公开得比较大方，关于 Zen 5 的信息有：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.amd.com/content/dam/amd/en/documents/processor-tech-docs/software-optimization-guides/58455.zip&#34;&gt;Software Optimization Guide for the AMD Zen5 Microarchitecture&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.amd.com/content/dam/amd/en/documents/epyc-business-docs/white-papers/5th-gen-amd-epyc-processor-architecture-white-paper.pdf&#34;&gt;5TH GEN AMD EPYC™ PROCESSOR ARCHITECTURE&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;现有评测&#34;&gt;现有评测&lt;a class=&#34;headerlink&#34; href=&#34;#现有评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;网上已经有较多针对 Zen 5 微架构的评测和分析，建议阅读：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.phoronix.com/review/amd-zen-5-core&#34;&gt;AMD Reveals More Zen 5 CPU Core Details&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2024/07/26/zen-5s-2-ahead-branch-predictor-unit-how-30-year-old-idea-allows-for-new-tricks/&#34;&gt;Zen 5’s 2-Ahead Branch Predictor Unit: How a 30 Year Old Idea Allows for New Tricks&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2023/10/08/zen-5s-leaked-slides/&#34;&gt;Zen 5’s Leaked Slides&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2024/08/10/amds-strix-point-zen-5-hits-mobile/&#34;&gt;AMD’s Strix Point: Zen 5 Hits Mobile&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2024/08/14/amds-ryzen-9950x-zen-5-on-desktop/&#34;&gt;AMD’s Ryzen 9950X: Zen 5 on Desktop&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2024/09/15/discussing-amds-zen-5-at-hot-chips-2024/&#34;&gt;Discussing AMD’s Zen 5 at Hot Chips 2024&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://blog.hjc.im/zen-5-more-details-1.html&#34;&gt;Zen 5 补充测试 (1/2): 更多微架构细节&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/&#34;&gt;Zen5&#39;s AVX512 Teardown + More...&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面分各个模块分别记录官方提供的信息，以及实测的结果。读者可以对照已有的第三方评测理解。官方信息与实测结果一致的数据会加粗。&lt;/p&gt;&lt;h2 id=&#34;benchmark&#34;&gt;Benchmark&lt;a class=&#34;headerlink&#34; href=&#34;#benchmark&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;AMD Zen 5 的性能测试结果见 &lt;a href=&#34;../../../../../benchmark/&#34;&gt;SPEC&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&#34;mop-vs-uop&#34;&gt;MOP vs uOP&lt;a class=&#34;headerlink&#34; href=&#34;#mop-vs-uop&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;MOP = Macro operation, uOP = Micro operation&lt;/p&gt;&lt;p&gt;AMD 的文档里是这么说的：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The processor implements AMD64 instruction set by means of macro-ops (the primary units ofwork managed by the processor) and micro-ops (the primitive operations executed in theprocessor&#39;s execution units).Instructions are marked as fast path single (one macro-op), fast path double (two macro-ops), ormicrocode (greater than two macro-ops). Macro ops can normally contain up to two micro-ops.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;一条指令可以分成若干个 MOP（比如 REP MOVS 会拆成很多个 MOP），一个 MOP 可以继续细分为 uOP（比如 store 拆分成 store data 和 store address；把内存的值加到寄存器上的 add 指令拆分成 load 和 add）。Dispatch 的单位是 MOP，ROB 保存的也是 MOP。与 Zen3/Zen4 不同，Op Cache 保存的不是 MOP，而是 Fused Instructions，这个 Fusion 来自于 Branch Fusion 或 MOV + ALU Fusion。Fusion 相当于把多条指令合成了一个，减少了 MOP 的数量。&lt;/p&gt;&lt;p&gt;MOP 到 uOP 的拆分需要等到 Scheduler 中才进行，Scheduler 输入 MOP，输出 uOP，也就是说最终给到执行单元的是 uOP。&lt;/p&gt;&lt;p&gt;和 ARM 公版核的 MOP/uOP 对比，其实是很类似的：uOP 是执行单元看到的指令粒度，MOP 是维护精确异常的指令粒度。&lt;/p&gt;&lt;h2 id=&#34;前端&#34;&gt;前端&lt;a class=&#34;headerlink&#34; href=&#34;#前端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;op-cache&#34;&gt;Op Cache&lt;a class=&#34;headerlink&#34; href=&#34;#op-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：64 set, 16 way, &lt;strong&gt;1024 entry&lt;/strong&gt;, &lt;strong&gt;6 (fused) inst/entry&lt;/strong&gt;, 供指 &lt;strong&gt;2 entry/cycle&lt;/strong&gt;&lt;/p&gt;&lt;h4 id=&#34;开启关闭&#34;&gt;开启/关闭&lt;a class=&#34;headerlink&#34; href=&#34;#开启关闭&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;AMD 在 UEFI 固件中提供了关闭 Op Cache 的设置，因此我们可以测试在 Op Cache 开启/关闭不同情况下的性能。通过进一步研究，发现固件的 Op Cache 关闭设置，实际上对应了 MSR[0xc0011021] 的 bit 5：初始情况下，MSR[0xc0011021] 的值为 0x20000000000040，如果进入固件关闭 Op Cache，可以观察到 MSR[0xc0011021] 变成了 0x20000000000060。实际上，Op Cache 可以在进入 Linux 后动态开启/关闭（感谢 David Huang 在博客中提供的信息）：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;sudo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;modprobe&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;msr&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Disable Op Cache for Core 0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;sudo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;wrmsr&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-p&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0xc0011021&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x20000000000060&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Enable Op Cache for Core 0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;sudo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;wrmsr&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-p&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0xc0011021&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x20000000000040&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此开关 Op Cache 不需要重启进固件了。&lt;/p&gt;&lt;h4 id=&#34;容量&#34;&gt;容量&lt;a class=&#34;headerlink&#34; href=&#34;#容量&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Zen 5 的 Op Cache 每个 entry 是 6 (fused) inst，为了测出 Op Cache 的容量，以及确认保存的是 fused inst，利用 MOV + ALU Fusion 来构造指令序列：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# rsi = rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# rsi += rdx&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两条指令满足 Zen 5 的 MOV + ALU Fusion 要求，硬件上融合成一个 &lt;code&gt;rsi = rdx + rdi&lt;/code&gt; 的操作。做这个融合也是因为 x86 指令集缺少 3 地址指令，当然未来 APX 会补上这个缺失。实测发现，这样的指令序列可以达到 12 的 IPC，正好 Zen 5 的 ALU 有 6 个，也就是每周期执行 6 条融合后的指令，和 12 IPC 是吻合的。12 的 IPC 可以一直维持到 36KB 的 footprint，这里的 mov 和 add 指令都是 3 字节，换算下来 36KB 对应 &lt;code&gt;36*1024/6=6144&lt;/code&gt; 个 fused instruction，正好 &lt;code&gt;64*16*6=6144&lt;/code&gt;，对上了。关掉 Op Cache 后，性能下降到 4 IPC，对应了 Decode 宽度，同时也说明 Decode 的 4 Wide 对应的是指令，而不是融合后的指令。&lt;/p&gt;&lt;h4 id=&#34;吞吐&#34;&gt;吞吐&lt;a class=&#34;headerlink&#34; href=&#34;#吞吐&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;接下来要测试 Op Cache 能否单周期给单个线程提供 2 个 entry 的吞吐。由于每个 entry 最多可以有 6 (fused) inst，加起来是 12，而 dispatch 只有 8 MOP/cycle，因此退而求其次，不要求用完 entry 的 6 条指令，而是用 jmp 指令来提前结束 entry：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# rsi = rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;err&#34;&gt;2:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重复上述指令，发现在 5KB 之前都可以达到 4 的 IPC，之后则下降到 2 IPC，说明 5KB 时用满了 Op Cache。这里的 mov 指令是 3 字节，jmp 指令是 2 字节，也就是说 5KB 对应上述指令模式重复了 1024 次，此时 Op Cache 用满了容量，正好 Op Cache 也是 &lt;code&gt;64*16=1024&lt;/code&gt; 个 entry，印证了 Op Cache 的 entry 会被 jmp 提前结束，在上述的指令模式下，entry 不会跨越 jmp 指令记录后面的指令，每个 entry 只有两条指令。那么 4 IPC 证明了 Op Cache 可以每周期提供 2 entry，相比 Decode 只能每周期给单线程提供 4 条指令明显要快。&lt;/p&gt;&lt;h3 id=&#34;取指&#34;&gt;取指&lt;a class=&#34;headerlink&#34; href=&#34;#取指&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：每周期共 64B，可以取&lt;strong&gt;两个&lt;/strong&gt; 32B 对齐的指令块&lt;/p&gt;&lt;p&gt;为了测试取指，需要关掉 Op Cache，但由于 Decode 瓶颈太明显，不容易测出取指的性能，例如是否一个周期可以给单线程取两个 32B 对齐的指令块。目前通过实测可以知道，在关闭 Op Cache 的情况下，测试循环体跨越 64B 缓存行边界的情况，指令模式见下：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;err&#34;&gt;1:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-2&#34;&gt;&lt;a id=&#34;__codelineno-3-2&#34; name=&#34;__codelineno-3-2&#34; href=&#34;#__codelineno-3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;dec&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-3&#34;&gt;&lt;a id=&#34;__codelineno-3-3&#34; name=&#34;__codelineno-3-3&#34; href=&#34;#__codelineno-3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# 64B cache line boundary here&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-4&#34;&gt;&lt;a id=&#34;__codelineno-3-4&#34; name=&#34;__codelineno-3-4&#34; href=&#34;#__codelineno-3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;循环一次需要 1.5 个周期。如果 Fetch 每周期只能取一个 32B/64B 对齐的指令块，那么一次循环需要 2 个周期来取指，但如果 Fetch 每周期可以取两个 32B 对齐的指令块，那么一次循环只需要 1 个周期取指，但实际测出来又是 1.5 个周期，目前还没有找到合理的解释，但大概率 Fetch 还是可以给单线程每周期提供两个 32B 指令块。&lt;/p&gt;&lt;h3 id=&#34;decode&#34;&gt;Decode&lt;a class=&#34;headerlink&#34; href=&#34;#decode&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：2x &lt;strong&gt;4-wide&lt;/strong&gt; decode pipeline, &lt;strong&gt;one pipeline per thread&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;AMD Zen 5 的 Decode 虽然有两个 Pipe，但是每个逻辑线程只能用一个，意味着单线程情况下，无法做到 8-wide Decode，而 4-wide Decode 又太窄了点，因此 Op Cache 的命中率就显得很重要。&lt;/p&gt;&lt;p&gt;为了测试 Decode，需要首先按照上面的方法关闭 Op Cache，然后构造不同的指令序列以观察 IPC，得到的结果如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;重复 1-4 字节 nop：4 IPC&lt;/li&gt;&lt;li&gt;重复 5 字节 nop：3.2 IPC&lt;/li&gt;&lt;li&gt;重复 6 字节 nop：2.67 IPC&lt;/li&gt;&lt;li&gt;重复 7 字节 nop：2.3 IPC&lt;/li&gt;&lt;li&gt;重复 8 字节 nop：2 IPC&lt;/li&gt;&lt;li&gt;重复 9 字节 nop：1.78 IPC&lt;/li&gt;&lt;li&gt;重复 10 字节 nop：1.6 IPC&lt;/li&gt;&lt;li&gt;重复 11-15 字节 nop：1 IPC&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;上述 nop 的编码取自 Software Optimization Guide 的 Encodings for NOP Instructions 1 to 15 表格。&lt;/p&gt;&lt;p&gt;首先可以看到 Zen5 4-wide Decode 的限制，其次可以发现重复 5-10 字节的 nop，每周期的 Decode 吞吐都是 16B。11 字节以上则是撞到了 Decode 的限制：&lt;code&gt;Only the first decode slot (of four) can decode instructions greater than 10 bytes in length&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;比较有意思的是这个 16B 的限制，考虑移动窗口的译码设计，每周期可以对两个连续 16B 的窗口译码（&lt;code&gt;IBQ entries hold 16 byte-aligned fetch windows of the instruction byte stream. The decode pipes each scan two IBQ entries.&lt;/code&gt;），在 5 字节的 nop 模式下，每个周期的 Decode 应该是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Cycle 0: Window 0-31, Decode 0, 5, 10, 15&lt;/li&gt;&lt;li&gt;Cycle 1: Window 16-47, Decode 20, 25, 30, 35&lt;/li&gt;&lt;li&gt;Cycle 2: Window 32-63, Decode 40, 45, 50, 55&lt;/li&gt;&lt;li&gt;Cycle 3: Window 48-79, Decode 60, 65, 70, 75&lt;/li&gt;&lt;li&gt;Cycle 4: Window 80-111, Decode 80, 85, 90, 95&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;按这个理想的方法来看，应该可以做到 4 的 IPC，但实际上没有。一个猜测是，滑动窗口每次只能移动 1 个 16B，而不能从 48 跳到 80，那么从 Cycle 4 开始会出现性能损失：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Cycle 4: Window 64-95, Decode 80, 85, 90&lt;/li&gt;&lt;li&gt;Cycle 5: Window 80-111, Decode 95, 100, 105&lt;/li&gt;&lt;li&gt;Cycle 6: Window 96-127, Decode 110, 115, 120&lt;/li&gt;&lt;li&gt;Cycle 7: Window 112-143, Decode 125, 130, 135&lt;/li&gt;&lt;li&gt;Cycle 8: Window 128-159, Decode 140, 145, 150, 155&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这个规律延续下去，平均下来就是 3.2 IPC。&lt;/p&gt;&lt;p&gt;根据这个猜想，Decode 从两个连续的 IBQ entry 译码最多四条指令，是没有 16B 的限制的，但 IBQ 每周期只能弹出一个 entry，而不允许每周期弹出两个，这才导致了 16B 的吞吐。总之，4-wide 以及 16B 的限制，应该说是很小的。&lt;/p&gt;&lt;h3 id=&#34;l1-icache&#34;&gt;L1 ICache&lt;a class=&#34;headerlink&#34; href=&#34;#l1-icache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;32KB&lt;/strong&gt;, 8-way set associative&lt;/p&gt;&lt;p&gt;为了测试 L1 ICache 的容量，需要关闭 Op Cache，但由于 Decode 的限制，即使 footprint 大于 L1 ICache 容量，IPC 依然没有变化，针对这个现象，猜测 L1 ICache 的预取在起作用，并且 L2 Cache 到 L1 ICache 的 Refill 带宽不小于 Decode 带宽，导致瓶颈在 Decode。&lt;/p&gt;&lt;p&gt;因此，为了测试 L1 ICache 的容量，构造一个 jmp 序列，以 4B 位间距排布，观察到在关闭 Op Cache 的情况下，在 8192 条 jmp 指令之前可以做到 1 CPI，之后逐渐提升到 1.5 CPI，正好 8192 对应了 &lt;code&gt;8192*4=32768&lt;/code&gt; 也就是 32KB L1 ICache 的容量限制。&lt;/p&gt;&lt;h3 id=&#34;l1-itlb&#34;&gt;L1 ITLB&lt;a class=&#34;headerlink&#34; href=&#34;#l1-itlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;64-entry&lt;/strong&gt;, fully associative&lt;/p&gt;&lt;p&gt;为了测试 L1 ITLB 的容量，构造 jmp 序列，每个 jmp 在一个单独的页中，在关闭 Op Cache 的情况下观察 jmp 的性能：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../amd_zen5_itlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到明显的 64 pages 的拐点，对应了 64 entry 的 L1 ITLB。&lt;/p&gt;&lt;h3 id=&#34;l2-itlb&#34;&gt;L2 ITLB&lt;a class=&#34;headerlink&#34; href=&#34;#l2-itlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;2048-entry&lt;/strong&gt;, 8-way set associative L2 ITLB&lt;/p&gt;&lt;p&gt;继续沿用测试 L1 ITLB 的方式，把页的数量提高到 2000+，在关闭 Op Cache 的情况下得到以下测试结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../amd_zen5_l2itlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到明显的 2048 pages 的拐点，对应了 2048 entry 的 L2 ITLB。&lt;/p&gt;&lt;h3 id=&#34;btb&#34;&gt;BTB&lt;a class=&#34;headerlink&#34; href=&#34;#btb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：16K-entry L1 BTB, 8K-entry L2 BTB&lt;/p&gt;&lt;p&gt;因为 L1 ICache 只有 32KB，而 L1 BTB 有 16K entry，每个 entry 最多能保存两条分支指令，因此多数情况下，首先遇到的是 L1 ICache 的瓶颈，而不是 L1 BTB 的瓶颈。&lt;/p&gt;&lt;h3 id=&#34;return-address-stack&#34;&gt;Return Address Stack&lt;a class=&#34;headerlink&#34; href=&#34;#return-address-stack&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;52-entry&lt;/strong&gt; per thread&lt;/p&gt;&lt;p&gt;构造不同深度的调用链，测试每次调用花费的时间，在关闭 Op Cache 的情况下得到如下测试结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../amd_zen5_ras.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 52 的拐点，对应的就是 Return Address Stack 的大小。&lt;/p&gt;&lt;h3 id=&#34;indirect-target-predictor&#34;&gt;Indirect Target Predictor&lt;a class=&#34;headerlink&#34; href=&#34;#indirect-target-predictor&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：3072-entry Indirect Target Array&lt;/p&gt;&lt;h3 id=&#34;move-elimination-zero-cycle-move-and-zeroingones-idiom&#34;&gt;Move Elimination (Zero Cycle Move) and Zeroing/Ones Idiom&lt;a class=&#34;headerlink&#34; href=&#34;#move-elimination-zero-cycle-move-and-zeroingones-idiom&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：支持 xor/sub/cmp/sbb/vxorp/vandnp/vpcmpgt/vpandn/vpxor/vpsub 的 Zeroing Idiom，支持 pcmpeq/vpcmpeq 的 Ones Idiom，支持 mov/movsxd/xchg/(v)vmovap/(v)movdp/(v)movup 的 Zero Cycle Move。&lt;/p&gt;&lt;p&gt;实测下来，以下指令序列的 IPC 为：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;有依赖链的 mov r, r：7 IPC&lt;/li&gt;&lt;li&gt;没有依赖的 mov r, r：7 IPC&lt;/li&gt;&lt;li&gt;xor r, r, r：7 IPC&lt;/li&gt;&lt;li&gt;sub r, r, r：7 IPC&lt;/li&gt;&lt;li&gt;有依赖链的 mov vr, vr：6 IPC&lt;/li&gt;&lt;li&gt;没有依赖的 mov vr, vr：6 IPC&lt;/li&gt;&lt;li&gt;xor vr, vr, vr：6 IPC&lt;/li&gt;&lt;li&gt;mov r, imm：6 IPC&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;其中 r 表示整数寄存器，vr 表示浮点/向量寄存器。总体来说还是做的比较完善的。&lt;/p&gt;&lt;h3 id=&#34;dispatch&#34;&gt;Dispatch&lt;a class=&#34;headerlink&#34; href=&#34;#dispatch&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：8 MOP/cycle, up to 2 taken branches/cycle&lt;/p&gt;&lt;h2 id=&#34;后端&#34;&gt;后端&lt;a class=&#34;headerlink&#34; href=&#34;#后端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;rob&#34;&gt;ROB&lt;a class=&#34;headerlink&#34; href=&#34;#rob&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;224-entry per thread&lt;/strong&gt;, 1-2 MOP per entry&lt;/p&gt;&lt;p&gt;把两个独立的 long latency pointer chasing load 放在循环的头和尾，中间用 NOP 填充，当 NOP 填满了 ROB，第二个 pointer chasing load 无法提前执行，导致性能下降。测试结果如下：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../amd_zen5_rob.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;当 NOP 指令达到 446 条时出现性能突变，此时应该是触发了 Zen 5 的每个 entry 保存两个 MOP 的条件，因此 446 条 NOP 指令对应 223 个 entry，加上循环开头的 load 指令，正好把循环尾部的 load 拦在了 ROB 外面，导致性能下降。&lt;/p&gt;&lt;p&gt;说明单线程可以访问到的 ROB 容量是 224 entry。&lt;/p&gt;&lt;h3 id=&#34;register-file&#34;&gt;Register File&lt;a class=&#34;headerlink&#34; href=&#34;#register-file&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：240-entry(40 per thread for architectural) integer physical register file, 192-entry flag physical register file, 384-entry 512b vector register file&lt;/p&gt;&lt;p&gt;为了测试物理寄存器堆大小，构造一个循环，循环开头和结尾各是一个长延迟的操作，由于 Zen 5 没有实现 temporal prefetcher，使用的是 pointer chasing load。然后在两个长延迟的操作中间穿插不同的指令类型，从而测出对应的物理寄存器堆可供预测执行的寄存器数量：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../amd_zen5_rf.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;整数方面使用 lea 指令来消耗整数物理寄存器而不消耗 flags 寄存器，此时无论是 32 位还是 64 位寄存器，供预测执行的寄存器数都有 200 个，和官方的信息吻合：&lt;code&gt;200+40=240&lt;/code&gt;，说明超线程在没有负载的时候，不会占用整数物理寄存器堆，这在 AMD 的文档中叫做 Watermarked：&lt;code&gt;Resource entries are assigned on demand&lt;/code&gt;。356 个 flags 寄存器超过了官方宣传的 192 的大小，猜测做了一些优化，测到的并非 flags 寄存器堆大小。&lt;/p&gt;&lt;p&gt;浮点方面，测得 430 个供预测执行的浮点寄存器，超过了官方宣传的 384 个 512 位浮点寄存器。考虑到 Zen5 引入了在 Rename 之前的 96-entry Non-Scheduling Queue(NSQ)，在 NSQ 中的指令还没有经过重命名，因此不消耗物理寄存器：&lt;code&gt;384+96=480&lt;/code&gt;，再去掉至少 32 个架构寄存器 zmm0-zmm31，和观察到的 430 是比较接近的。&lt;/p&gt;&lt;p&gt;针对浮点寄存器，Zen5 的不同平台的设计不完全一样，上面的测试是在 9950X 上进行的，其他平台的测试以及分析见 &lt;a href=&#34;http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/#vector_register_file&#34;&gt;Zen5&#39;s AVX512 Teardown + More...&lt;/a&gt;。&lt;/p&gt;&lt;h3 id=&#34;l1-dcache&#34;&gt;L1 DCache&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dcache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;48KB&lt;/strong&gt;, 12-way set associative&lt;/p&gt;&lt;p&gt;使用不同 footprint 的随机的 pointer chasing load，测试性能，得到如下结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../amd_zen5_l1dc.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以观察到明显的 48KB 的拐点，命中 L1 DCache 时 load to use latency 是 4 cycle，命中 L2 时增大到了 14 cycle。&lt;/p&gt;&lt;h3 id=&#34;load-store-unit&#34;&gt;Load Store Unit&lt;a class=&#34;headerlink&#34; href=&#34;#load-store-unit&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：每周期最多四个内存操作。每周期最多四个读，其中最多两个 128b/256b/512b 读；每周期最多两个写，其中最多一个 512b 写。load to use latency，整数是 4-5 个周期，浮点是 7-8 个周期。跨越 64B 边界的读会有额外的一个周期的延迟。支持 Store to load forwarding，要求先前的 store 包括了 load 的所有字节，不要求对齐。&lt;/p&gt;&lt;h4 id=&#34;吞吐_1&#34;&gt;吞吐&lt;a class=&#34;headerlink&#34; href=&#34;#吞吐_1&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;实测 Zen 5 每个周期可以完成如下的访存操作：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;4x 32b Load: 1 cycle&lt;/li&gt;&lt;li&gt;4x 64b Load: 1 cycle&lt;/li&gt;&lt;li&gt;2x 128b Load: 1 cycle&lt;/li&gt;&lt;li&gt;2x 256b Load: 1 cycle&lt;/li&gt;&lt;li&gt;2x 32b Store: 1 cycle&lt;/li&gt;&lt;li&gt;2x 64b Store: 1 cycle&lt;/li&gt;&lt;li&gt;2x 128b Store: 1 cycle&lt;/li&gt;&lt;li&gt;2x 256b Store: 1 cycle&lt;/li&gt;&lt;li&gt;1x 64b Load + 2x 64b Store: 1 cycle&lt;/li&gt;&lt;li&gt;2x 64b Load + 2x 64b Store: 1 cycle&lt;/li&gt;&lt;li&gt;3x 64b Load + 1x 64b Store: 1 cycle&lt;/li&gt;&lt;li&gt;1x 128b Load + 2x 128b Store: 1 cycle&lt;/li&gt;&lt;li&gt;2x 128b Load + 1x 128b Store: 1 cycle&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;简单来说，每周期支持 4 个 64b 的 Load/Store，其中 Store 最多两条。一个 128b 的 Load 相当于两个 64b，对应 IPC 减半。&lt;/p&gt;&lt;h4 id=&#34;延迟&#34;&gt;延迟&lt;a class=&#34;headerlink&#34; href=&#34;#延迟&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;构造串行的 load 链，观察到多数情况下 load to use latency 是 4 个周期，在跨越 64B 边界时，会增加一个周期变成 5 个周期。此外，如果涉及到 index 计算（即 &lt;code&gt;offset(base, index, shift)&lt;/code&gt;），也会增加一个周期。&lt;/p&gt;&lt;h4 id=&#34;store-to-load-forwarding&#34;&gt;Store to Load Forwarding&lt;a class=&#34;headerlink&#34; href=&#34;#store-to-load-forwarding&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;经过实际测试，如下的情况可以成功转发：&lt;/p&gt;&lt;p&gt;对地址 x 的 Store 转发到对地址 y 的 Load 成功时 y-x 的取值范围：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Store\Load&lt;/th&gt;&lt;th&gt;8b Load&lt;/th&gt;&lt;th&gt;16b Load&lt;/th&gt;&lt;th&gt;32b Load&lt;/th&gt;&lt;th&gt;64b Load&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;8b Store&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16b Store&lt;/td&gt;&lt;td&gt;[0,1]&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;32b Store&lt;/td&gt;&lt;td&gt;[0,3]&lt;/td&gt;&lt;td&gt;[0,2]&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;64b Store&lt;/td&gt;&lt;td&gt;[0,7]&lt;/td&gt;&lt;td&gt;[0,6]&lt;/td&gt;&lt;td&gt;[0,4]&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;可以看到，Zen 5 在 Store 完全包含 Load 的情况下都可以转发，没有额外的对齐要求。但当 Load 和 Store 只有部分重合时，就无法转发。两个连续的 32 位的 Store 和一个 64 位的 Load 重合也不能转发。&lt;/p&gt;&lt;p&gt;可见 Zen 5 的 Store to Load Forwarding 实现比较粗暴，只允许 Load 从单个完全包含 Load 的 Store 中转发数据。和 &lt;a href=&#34;../../07/arm_neoverse_v2/&#34;&gt;Neoverse V2&lt;/a&gt; 相比，Zen 5 对 Load 在 Store 内的偏移没有要求，但也不允许 Load 和 Store 只有一部分覆盖，也不支持一个 Load 从两个或更多的 Store 中获取数据。&lt;/p&gt;&lt;p&gt;成功转发时 8 cycle，有 Overlap 但转发失败时 14-15 cycle。&lt;/p&gt;&lt;p&gt;小结：Zen 5 的 Store to Load Forwarding：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;1 ld + 1 st: 要求 st 包含 ld&lt;/li&gt;&lt;li&gt;1 ld + 2+ st: 不支持&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;l1-dtlb&#34;&gt;L1 DTLB&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dtlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：96-entry, fully associative&lt;/p&gt;&lt;p&gt;使用不同 footprint 的随机的 pointer chasing load 且每次 load 都在单独的页内，测试性能，得到如下结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../amd_zen5_l1dtlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以观察到明显的 96 page 的拐点，命中 L1 DTLB 时 load to use latency 是 4 cycle，命中 L2 DTLB 时增大到了 11 cycle。&lt;/p&gt;&lt;h3 id=&#34;l2-dtlb&#34;&gt;L2 DTLB&lt;a class=&#34;headerlink&#34; href=&#34;#l2-dtlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：4096-entry, 16-way set associative&lt;/p&gt;&lt;h3 id=&#34;l2-cache&#34;&gt;L2 Cache&lt;a class=&#34;headerlink&#34; href=&#34;#l2-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：16-way set associative, inclusive, 1MB, &lt;strong&gt;&amp;gt;= 14 cycle load to use latency&lt;/strong&gt;&lt;/p&gt;&lt;h3 id=&#34;l3-cache&#34;&gt;L3 Cache&lt;a class=&#34;headerlink&#34; href=&#34;#l3-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：16-way set associative, exclusive&lt;/p&gt;&lt;h3 id=&#34;执行单元&#34;&gt;执行单元&lt;a class=&#34;headerlink&#34; href=&#34;#执行单元&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：Zen 5 的后端有 6 条 ALU 流水线，4 条访存流水线，4 条 512 位宽向量流水线（其中 2 条支持 FMA），2 条向量访存流水线&lt;/p&gt;&lt;p&gt;实测发现 Zen 5 每周期最多可以执行 2 条 AVX512 的浮点 FMA 指令，也就是说，每周期浮点峰值性能：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;单精度：&lt;code&gt;512/32*2*2=64&lt;/code&gt; FLOP per cycle&lt;/li&gt;&lt;li&gt;双精度：&lt;code&gt;512/64*2*2=32&lt;/code&gt; FLOP per cycle&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;通过 512 位的浮点 datapath，终于达到了第一梯队的浮点峰值性能。&lt;/p&gt;</description><link>https://jia.je/hardware/2024/11/11/amd_zen5/</link> <pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/11/11/amd_zen5/</guid> </item> <item> <title>把评论系统从 Disqus 迁移到 Giscus</title> <category>meta</category> <category>site</category> <description>&lt;h1 id=&#34;把评论系统从-disqus-迁移到-giscus&#34;&gt;把评论系统从 Disqus 迁移到 Giscus&lt;a class=&#34;headerlink&#34; href=&#34;#把评论系统从-disqus-迁移到-giscus&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Disqus 要加广告了，于是本博客的评论系统迁移到了 Giscus。&lt;/p&gt;</description><link>https://jia.je/meta/2024/11/10/migrate-from-disqus-to-giscus/</link> <pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/meta/2024/11/10/migrate-from-disqus-to-giscus/</guid> </item> <item> <title>ARM Neoverse V2 微架构评测</title> <category>arm</category> <category>cpu</category> <category>hardware</category> <category>neoverse</category> <category>performance</category> <category>uarch-review</category> <description>&lt;h1 id=&#34;arm-neoverse-v2-微架构评测&#34;&gt;ARM Neoverse V2 微架构评测&lt;a class=&#34;headerlink&#34; href=&#34;#arm-neoverse-v2-微架构评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ARM Neoverse V2 是目前（2024 年）在服务器上能用到的最新的 ARM 公版核平台（AWS Graviton 4），测试一下这个微架构在各个方面的表现。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;官方信息&#34;&gt;官方信息&lt;a class=&#34;headerlink&#34; href=&#34;#官方信息&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ARM 关于 Neoverse V2 微架构有如下公开信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://hc2023.hotchips.org/assets/program/conference/day1/CPU1/HC2023.Arm.MagnusBruce.v04.FINAL.pdf&#34;&gt;Arm Neoverse V2 platform: Leadership Performance and Power Efficiency for Next-Generation Cloud Computing, ML and HPC Workloads&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://developer.arm.com/documentation/102375/latest/&#34;&gt;Arm® Neoverse™ V2 Core Technical Reference Manual&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://developer.arm.com/documentation/109898/latest/&#34;&gt;Arm Neoverse V2 Software Optimization Guide&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;考虑到 Neoverse V2 与 Cortex X3 的高度相似性，这里也列出 Cortex X3 的相关信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://fuse.wikichip.org/news/6855/arm-unveils-next-gen-flagship-core-cortex-x3/&#34;&gt;Arm Unveils Next-Gen Flagship Core: Cortex-X3&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://developer.arm.com/documentation/101593/latest/&#34;&gt;Arm® Cortex‑X3 Core Technical Reference Manual&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;现有评测&#34;&gt;现有评测&lt;a class=&#34;headerlink&#34; href=&#34;#现有评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;网上已经有 Neoverse V2 微架构的评测和分析，建议阅读：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/p/hot-chips-2023-arms-neoverse-v2&#34;&gt;Hot Chips 2023: Arm’s Neoverse V2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面分各个模块分别记录官方提供的信息，以及实测的结果。读者可以对照已有的第三方评测理解。官方信息与实测结果一致的数据会加粗。&lt;/p&gt;&lt;h2 id=&#34;benchmark&#34;&gt;Benchmark&lt;a class=&#34;headerlink&#34; href=&#34;#benchmark&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Neoverse V2 (AWS Graviton 4) 的性能测试结果见 &lt;a href=&#34;../../../../../benchmark/&#34;&gt;SPEC&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&#34;mop-vs-uop&#34;&gt;MOP vs uOP&lt;a class=&#34;headerlink&#34; href=&#34;#mop-vs-uop&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;MOP = Macro operation, uOP = Micro operation&lt;/p&gt;&lt;p&gt;ARM 公版核微架构既有 MOP 的概念，又有 uOP 的概念。uOP 主要是针对后端，执行单元处理的是 uOP。MOP 出现在 MOP Cache 以及 ROB 当中。他们和指令都并不是一一对应的关系。&lt;/p&gt;&lt;p&gt;例如 Instruction Fusion 特性，可以把多条指令合并到一条 uOP 当中，例如 CMP + CSET，合并成一个 uOP 以后，只需要一个 ALU 就可以完成整个操作。另一方面，一条指令也可能拆成多个 uOP，例如 128b Load Pair 指令，一条指令被拆成两个 uOP，可以独立执行，但为了保证精确异常，在 ROB 中还是同一个 MOP。&lt;/p&gt;&lt;p&gt;当然了，如果不考虑这些细节，大多数情况下，一条指令对应一个 MOP 对应一个 uOP 也是成立的。&lt;/p&gt;&lt;h2 id=&#34;前端&#34;&gt;前端&lt;a class=&#34;headerlink&#34; href=&#34;#前端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;branch-predictor&#34;&gt;Branch Predictor&lt;a class=&#34;headerlink&#34; href=&#34;#branch-predictor&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：Two predicted branches per cycle, nanoBTB + two level main BTB, 8 table 2 way TAGE direction predictor&lt;/p&gt;&lt;h3 id=&#34;l1-icache&#34;&gt;L1 ICache&lt;a class=&#34;headerlink&#34; href=&#34;#l1-icache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;64KB&lt;/strong&gt;, 4-way set associative, VIPT behaving as PIPT, 64B cacheline, PLRU replacement policy&lt;/p&gt;&lt;p&gt;为了测试 L1 ICache 容量，构造一个具有巨大指令 footprint 的循环，由大量的 nop 和最后的分支指令组成。观察在不同 footprint 大小下的 IPC：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../arm_neoverse_v2_fetch_bandwidth.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;开始有一段 IPC 接近 12，此时指令由 MOP Cache 提供，由于连续的两条 NOP 可以被融合成一个 uOP，因此可以突破 8 的限制，但为什么是 12 还需要进一步研究。&lt;/p&gt;&lt;p&gt;当指令超出 MOP Cache 容量后，指令走 ICache + Decode，此时可以达到 6 的 IPC，与 6-wide 的 Decode Width 吻合。当 footprint 超出 64 KB 时，IPC 下降，对应了 64KB 的 L1 ICache 容量。&lt;/p&gt;&lt;p&gt;超出 L1 ICache 容量后，可以达到 4 的 IPC，说明 L2 Cache 可以提供每周期 16 字节的取指带宽。&lt;/p&gt;&lt;h3 id=&#34;mop-cache&#34;&gt;MOP Cache&lt;a class=&#34;headerlink&#34; href=&#34;#mop-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;1536 macro-operations&lt;/strong&gt;, 4-way skewed associative, VIVT behaving as PIPT, NRU replacement policy, &lt;strong&gt;8 MOP/cycle&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;因为 MOP Cache 的带宽比 Decode 高，为了测试出 MOP Cache 的规格，需要构造指令序列，使其可以达到 8 MOP/cycle 的 IPC，如果走的是 Instruction Fetch + Decode，则达不到这个 IPC。但是 Neoverse V2 的 Dispatch 有比较明确的限制：&lt;/p&gt;&lt;p&gt;The dispatch stage can process up to 8 MOPs per cycle and dispatch up to 16 µOPs per cycle, with the following limitations on the number of µOPs of each type that may be simultaneously dispatched.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Up to 4 µOPs utilizing the S（单周期整数）or B（分支）pipelines&lt;/li&gt;&lt;li&gt;Up to 4 µOPs utilizing the M（多周期整数）pipelines&lt;/li&gt;&lt;li&gt;Up to 2 µOPs utilizing the M0（多周期整数）pipelines&lt;/li&gt;&lt;li&gt;Up to 2 µOPs utilizing the V0（浮点/向量） pipeline&lt;/li&gt;&lt;li&gt;Up to 2 µOPs utilizing the V1（浮点/向量） pipeline&lt;/li&gt;&lt;li&gt;Up to 6 µOPs utilizing the L（访存）pipelines&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;考虑到这个限制，使用 4 条 add 指令，4 条 fadd 指令为一组，不断重复。通过测试，这样的指令序列确实可以达到 8 的 IPC。当指令个数增加到超出 MOP Cache 容量时，将会观察到性能的下降：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../arm_neoverse_v2_mop_cache.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;拐点出现在 192 个指令组，此时达到 MOP Cache 的容量瓶颈，&lt;code&gt;192*8=1536&lt;/code&gt;，正好是 MOP Cache 的容量。&lt;/p&gt;&lt;h3 id=&#34;l1-itlb&#34;&gt;L1 ITLB&lt;a class=&#34;headerlink&#34; href=&#34;#l1-itlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：Caches entries at the 4KB, 16KB, 64KB, or 2MB granularity, Fully associative, 48 entries&lt;/p&gt;&lt;p&gt;构造一系列的 B 指令，使得 B 指令分布在不同的 page 上，使得 ITLB 成为瓶颈：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../arm_neoverse_v2_itlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 48 Page 出现了明显的拐点，对应的就是 48 的 L1 ITLB 容量。此后性能降低到 7 CPI，此时对应了 L2 Unified TLB 的延迟。&lt;/p&gt;&lt;p&gt;进一步增加 Page 数量，发现在大约 1000 个页的时候，时间从 7 cycle 逐渐上升：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../arm_neoverse_v2_itlb_l2.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;考虑到 L2 Unified TLB 一共有 2048 个 Entry，猜测它限制了 ITLB 能使用的 L2 TLB 的容量只有 2048 的一半，也就是 1024 项。超出 1024 项以后，需要 Page Table Walker 进行地址翻译。&lt;/p&gt;&lt;h3 id=&#34;decode&#34;&gt;Decode&lt;a class=&#34;headerlink&#34; href=&#34;#decode&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：6-wide Decode&lt;/p&gt;&lt;h3 id=&#34;return-stack&#34;&gt;Return Stack&lt;a class=&#34;headerlink&#34; href=&#34;#return-stack&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Return Stack 记录了最近的函数调用链，call 时压栈，return 时弹栈，从而实现 return 指令的目的地址的预测。构造不同深度的调用链，发现 Neoverse V2 的 Return Stack 深度为 32：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../arm_neoverse_v2_return_stack.png&#34; /&gt;&lt;/p&gt;&lt;h2 id=&#34;后端&#34;&gt;后端&lt;a class=&#34;headerlink&#34; href=&#34;#后端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;dispatch&#34;&gt;Dispatch&lt;a class=&#34;headerlink&#34; href=&#34;#dispatch&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：up to 8 MOPs per cycle and up to 16 uOPs per cycle&lt;/p&gt;&lt;h3 id=&#34;store-to-load-forwarding&#34;&gt;Store to Load Forwarding&lt;a class=&#34;headerlink&#34; href=&#34;#store-to-load-forwarding&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;p&gt;The Neoverse V2 core allows data to be forwarded from store instructions to a load instruction with the restrictions mentioned below:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Load start address should align with the start or middle address of the older store&lt;/li&gt;&lt;li&gt;Loads of size greater than or equal to 8 bytes can get the data forwarded from a maximum of 2 stores. If there are 2 stores, then each store should forward to either first or second half of the load&lt;/li&gt;&lt;li&gt;Loads of size less than or equal to 4 bytes can get their data forwarded from only 1 store&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;经过实际测试，如下的情况可以成功转发：&lt;/p&gt;&lt;p&gt;对地址 x 的 Store 转发到对地址 y 的 Load 成功时 y-x 的取值范围：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Store\Load&lt;/th&gt;&lt;th&gt;8b Load&lt;/th&gt;&lt;th&gt;16b Load&lt;/th&gt;&lt;th&gt;32b Load&lt;/th&gt;&lt;th&gt;64b Load&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;8b Store&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16b Store&lt;/td&gt;&lt;td&gt;{0,1}&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;32b Store&lt;/td&gt;&lt;td&gt;{0,2}&lt;/td&gt;&lt;td&gt;{0,2}&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{-4,0}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;64b Store&lt;/td&gt;&lt;td&gt;{0,4}&lt;/td&gt;&lt;td&gt;{0,4}&lt;/td&gt;&lt;td&gt;{0,4}&lt;/td&gt;&lt;td&gt;{-4,0,4}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;一个 Load 需要转发两个 Store 的数据的情况：对地址 x 的 32b Store 和对地址 x+4 的 32b Store 转发到对地址 y 的 64b Load，在 Overlap 的情况下，要求 y=x，也就是恰好前半来自第一个 Store，后半来自第二个 Store。&lt;/p&gt;&lt;p&gt;和官方的描述是比较符合的，只考虑了全部转发、转发前半和转发后半的三种场景。特别地，针对常见的 64b Load，支持 y-x=-4。同时也支持前半和后半来自两个不同的 Store。对地址本身的对齐没有要求，甚至在跨缓存行边界时也可以转发，只是对 Load 和 Store 的相对位置有要求。&lt;/p&gt;&lt;p&gt;和 &lt;a href=&#34;../../11/amd_zen5/&#34;&gt;Zen 5&lt;/a&gt; 相比，Neoverse V2 对 Store 和 Load 的相对位置有额外的要求（开头或正中央），但支持了 Store 和 Load 只有一部分覆盖的情况，也允许一个 Load 从两个 Store 中取得数据。&lt;/p&gt;&lt;p&gt;从性能上，可以转发时 5 Cycle，有 Overlap 但无法转发时 10.5 Cycle。&lt;/p&gt;&lt;p&gt;小结：ARM Neoverse V2 的 Store to Load Forwarding：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;1 ld + 1 st: 要求 ld 和 st 地址相同或差出半个 st 宽度&lt;/li&gt;&lt;li&gt;1 ld + 2 st: 要求 ld 和 st 地址相同&lt;/li&gt;&lt;li&gt;1 ld + 4 st: 不支持&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;计算单元&#34;&gt;计算单元&lt;a class=&#34;headerlink&#34; href=&#34;#计算单元&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：6x ALU, &lt;strong&gt;2x Branch&lt;/strong&gt;, &lt;strong&gt;4x 128b SIMD&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;实测以下指令的吞吐：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;int add: 4 IPC，受到 Dispatch 限制：&lt;code&gt;Up to 4 µOPs utilizing the S（单周期整数）or B（分支）pipelines&lt;/code&gt;&lt;/li&gt;&lt;li&gt;int mul: 2 IPC，对应两个 Multi Cycle 单元&lt;/li&gt;&lt;li&gt;int not taken branch: 2 IPC，对应两个 Branch 单元&lt;/li&gt;&lt;li&gt;asimd fadd double: 4 IPC，对应四个 FP/ASIMD 单元&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;load-store-unit&#34;&gt;Load Store Unit&lt;a class=&#34;headerlink&#34; href=&#34;#load-store-unit&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;2 Load/Store Pipe + 1 Load Pipe&lt;/strong&gt;, Reduce bandwidth or &lt;strong&gt;incur additional latency&lt;/strong&gt; for:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Load operations that cross a cache-line (64-byte) boundary.&lt;/li&gt;&lt;li&gt;Quad-word load operations that are not 4B aligned.&lt;/li&gt;&lt;li&gt;Store operations that cross a 32B boundary.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;经过测试，一个周期内可以最多完成如下的 Load/Store 指令：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;3x 64b Load&lt;/li&gt;&lt;li&gt;2x 64b Load + 1x 64b Store&lt;/li&gt;&lt;li&gt;1x 64b Load + 2x 64b Store&lt;/li&gt;&lt;li&gt;2x 64b Store&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这个性能符合 2 LS + 1 LD pipe 的设计。&lt;/p&gt;&lt;p&gt;经过测试，当 Load 指令没有跨越缓存行时，load to use 延迟是 4 cycle；当 Load 指令跨过 64B 缓存行边界时，load to use 延迟增加到 5 cycle。&lt;/p&gt;&lt;h3 id=&#34;memory-dependency-predictor&#34;&gt;Memory Dependency Predictor&lt;a class=&#34;headerlink&#34; href=&#34;#memory-dependency-predictor&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;为了预测执行 Load，需要保证 Load 和之前的 Store 访问的内存没有 Overlap，那么就需要有一个预测器来预测 Load 和 Store 之前在内存上的依赖。参考 &lt;a href=&#34;https://blog.stuffedcow.net/2014/01/x86-memory-disambiguation/&#34;&gt;Store-to-Load Forwarding and Memory Disambiguation in x86 Processors&lt;/a&gt; 的方法，构造两个指令模式，分别在地址和数据上有依赖：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;数据依赖，地址无依赖：&lt;code&gt;str x3, [x1]&lt;/code&gt; 和 &lt;code&gt;ldr x3, [x2]&lt;/code&gt;&lt;/li&gt;&lt;li&gt;地址依赖，数据无依赖：&lt;code&gt;str x2, [x1]&lt;/code&gt; 和 &lt;code&gt;ldr x1, [x2]&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;初始化时，&lt;code&gt;x1&lt;/code&gt; 和 &lt;code&gt;x2&lt;/code&gt; 指向同一个地址，重复如上的指令模式，观察到多少条 &lt;code&gt;ldr&lt;/code&gt; 指令时会出现性能下降：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../arm_neoverse_v2_memory_dependency_predictor.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;有意思的是，地址依赖的阈值是 40，而数据依赖没有阈值。&lt;/p&gt;&lt;h3 id=&#34;move-elimination&#34;&gt;Move Elimination&lt;a class=&#34;headerlink&#34; href=&#34;#move-elimination&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：特定情况下这些指令可以被优化：mov reg, 0; mov reg, zero; mov vreg, 0; mov reg, reg;mov vreg, vreg&lt;/p&gt;&lt;p&gt;实际测试，各种模式的 IPC 如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;mov reg, 0: IPC 6&lt;/li&gt;&lt;li&gt;mov vreg, 0: IPC 6&lt;/li&gt;&lt;li&gt;mov reg, reg: 无依赖链时 IPC 4&lt;/li&gt;&lt;li&gt;mov vreg, vreg: 无依赖链时 IPC 3.6&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;虽然做了优化，但算不上很快。&lt;/p&gt;&lt;h3 id=&#34;reorder-buffer&#34;&gt;Reorder Buffer&lt;a class=&#34;headerlink&#34; href=&#34;#reorder-buffer&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;320 MOP&lt;/strong&gt; ROB, 8-wide retire&lt;/p&gt;&lt;p&gt;把两个串行的 fsqrt 序列放在循环的头和尾，中间用 NOP 填充，如果 ROB 足够大，可以在执行开头串行的 fsqrt 序列时，同时执行结尾串行的 fsqrt 序列，此时性能是最优的。如果 ROB 不够大，那么会观察到性能下降。由于 Neoverse V2 执行 NOP 可以达到接近 12 的 IPC，所以只需要很少的 fsqrt 就足够生成足够的延迟。&lt;/p&gt;&lt;p&gt;通过测试，发现在大约 640 条 NOP 时出现性能下降，而 Neoverse V2 实现了 Instruction Fusion，两条 NOP 指令算做一条 uOP，同时也是一条 MOP，因此 640 条 NOP 对应 320 MOP 的 ROB 大小。极限情况下，320 MOP 可以存 640 uOP，但是实际上比较难达到，很容易受限于其他结构。&lt;/p&gt;&lt;h3 id=&#34;l1-dcache&#34;&gt;L1 DCache&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dcache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;64KB&lt;/strong&gt;, 4-way set associative, &lt;strong&gt;VIPT behaving as PIPT&lt;/strong&gt;, 64B cacheline, ECC protected, RRIP replacement policy, &lt;strong&gt;4×64-bit read paths&lt;/strong&gt; and &lt;strong&gt;4×64-bit write&lt;/strong&gt; paths for the integer execute pipeline, &lt;strong&gt;3×128-bit read paths&lt;/strong&gt; and &lt;strong&gt;2×128-bit&lt;/strong&gt; write paths for the vector execute pipeline&lt;/p&gt;&lt;h4 id=&#34;容量&#34;&gt;容量&lt;a class=&#34;headerlink&#34; href=&#34;#容量&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;构造不同大小 footprint 的 pointer chasing 链，测试不同 footprint 下每条 load 指令耗费的时间：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../arm_neoverse_v2_l1dc.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 64KB 出现了明显的拐点，对应的就是 64KB 的 L1 DCache 容量。之后延迟先上升后下降，与 ARM 采用的 Correlated Miss Caching(CMC) 预取器记住了 pointer chasing 的历史有关，详细可以阅读 &lt;a href=&#34;https://hc33.hotchips.org/assets/program/conference/day1/20210818_Hotchips_NeoverseN2.pdf&#34;&gt;Arm Neoverse N2: Arm’s 2nd generation high performance infrastructure CPUs and system IPs&lt;/a&gt;。&lt;/p&gt;&lt;h4 id=&#34;延迟&#34;&gt;延迟&lt;a class=&#34;headerlink&#34; href=&#34;#延迟&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;经过测试，L1 DCache 的 load to use latency 是 4 cycle，没有针对 pointer chasing 做 3 cycle 的优化。&lt;/p&gt;&lt;h4 id=&#34;吞吐&#34;&gt;吞吐&lt;a class=&#34;headerlink&#34; href=&#34;#吞吐&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;使用 FP/ASIMD 128b Load 可以达到 3 IPC，对应了 3x128b read paths；而如果使用 2x64b 整数 LDP，则只能达到 2 IPC，对应 4x64b read paths。也就是说，要达到峰值的读取性能，必须用 FP/ASIMD 指令。写入方面，向量 128b Store 可以达到 2 IPC，对应了 2x128b write paths；类似地，2x64b 整数 STP 能达到 2 IPC，对应 4x64b write paths。&lt;/p&gt;&lt;h4 id=&#34;vipt&#34;&gt;VIPT&lt;a class=&#34;headerlink&#34; href=&#34;#vipt&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;在 4KB page 的情况下，64KB 4-way 的 L1 DCache 不满足 VIPT 的 Index 全在页内偏移的条件（详见 &lt;a href=&#34;../../../../2023/12/08/vipt-l1-cache-page-size/&#34;&gt;VIPT 与缓存大小和页表大小的关系&lt;/a&gt;），此时要么改用 PIPT，要么在 VIPT 的基础上处理 alias 的问题。为了测试这一点，参考 &lt;a href=&#34;https://blog.cyyself.name/why-the-big-l1-cache-is-so-hard/&#34;&gt;浅谈现代处理器实现超大 L1 Cache 的方式&lt;/a&gt; 的测试方法，用 shm 构造出两个 4KB 虚拟页映射到同一个物理页的情况，然后在两个虚拟页之间 copy，发现相比在同一个虚拟页内 copy 有显著的性能下降，并且产生了大量的 L1 DCache Refill：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;copy from aliased page = 3261121467 cycles, 285103870 refills&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;baseline = 1520692165 cycles, 1200 refills&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;slowdown = 2.14x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此验证了 L1 DCache 采用的是 VIPT，并做了针对 alias 的正确性处理。如果是 PIPT，那么 L1 DCache 会发现这两个页对应的是相同的物理地址，性能不会下降，也不需要频繁的 refill。&lt;/p&gt;&lt;h4 id=&#34;构造&#34;&gt;构造&lt;a class=&#34;headerlink&#34; href=&#34;#构造&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;进一步尝试研究 Neoverse V2 的 L1 DCache 的构造，为了支持每周期 3 条 Load 指令，L1 DCache 通常会分 Bank，每个 Bank 都有自己的读口。如果 Load 分布到不同的 Bank 上，各 Bank 可以同时读取，获得更高的性能；如果 Load 命中相同的 Bank，但是访问的 Bank 内地址不同，就只能等到下一个周期再读取。为了测试 Bank 的构造，设计一系列以不同的固定 stride 间隔的 Load 指令，观察 Load 的 IPC：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Stride=1B/2B/4B/8B/16B/32B: IPC=3&lt;/li&gt;&lt;li&gt;Stride=64B: IPC=2&lt;/li&gt;&lt;li&gt;Stride=128B/256B/512B: IPC=1&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Stride=64B 时出现性能下降，说明此时出现了 Bank Conflict，进一步到 Stride=128B 时，只能达到 1 的 IPC，说明此时所有的 Load 都命中了同一个 Bank，并且是串行读取。根据这个现象，认为 Neoverse V2 的 L1 DCache 组织方式是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;一共有两个 Bank，Bank Index 是 VA[6]&lt;/li&gt;&lt;li&gt;每个 Bank 每周期可以从一个缓存行读取数据，支持多个 Load 访问同一个缓存行&lt;/li&gt;&lt;li&gt;如果多个 Load 访问同一个 Bank 的不同缓存行，只能一个周期完成一个 Load&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;l1-dtlb&#34;&gt;L1 DTLB&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dtlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：Caches entries at the 4KB, 16KB, 64KB, 2MB or 512MB granularity, Fully associative, &lt;strong&gt;48&lt;/strong&gt; entries. A miss in the L1 data TLB and a hit in the L2 TLB has a 6-cycle penalty compared to a hit in the L1 data TLB.&lt;/p&gt;&lt;p&gt;用 pointer chasing 的方法测试 L1 DTLB 容量，指针分布在不同的 page 上，使得 DTLB 成为瓶颈：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../arm_neoverse_v2_l1dtlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 48 Page 出现了明显的拐点，对应的就是 48 的 L1 DTLB 容量。超出容量后，需要额外的 5 cycle 的 latency 访问 L2 Unified TLB。&lt;/p&gt;&lt;h3 id=&#34;l2-unified-tlb&#34;&gt;L2 Unified TLB&lt;a class=&#34;headerlink&#34; href=&#34;#l2-unified-tlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：Shared by instructions and data, 8-way set associative, 2048 entries&lt;/p&gt;&lt;h3 id=&#34;l2-cache&#34;&gt;L2 Cache&lt;a class=&#34;headerlink&#34; href=&#34;#l2-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：1MB or 2MB, 8-way set associative, 4 banks, PIPT, ECC protected, 64B cacheline, 10 cycle load-to-use, 128 B/cycle&lt;/p&gt;&lt;h3 id=&#34;sve&#34;&gt;SVE&lt;a class=&#34;headerlink&#34; href=&#34;#sve&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：128b SVE vector length&lt;/p&gt;&lt;p&gt;在 Linux 下查看 &lt;code&gt;/proc/sys/abi/sve_default_vector_length&lt;/code&gt; 的内容，得到 SVE 宽度为 16 字节，也就是 128b。&lt;/p&gt;&lt;p&gt;实测发现 Neoverse V2 每周期最多可以执行 4 条 ASIMD 或 SVE 的浮点 FMA 指令，也就是说，每周期浮点峰值性能：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;单精度：&lt;code&gt;128/32*2*4=32&lt;/code&gt; FLOP per cycle&lt;/li&gt;&lt;li&gt;双精度：&lt;code&gt;128/64*2*4=16&lt;/code&gt; FLOP per cycle&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;与 Zen 2-4、Oryon、Firestorm、LA464、Haswell 等微架构看齐，但不及 Zen 5、Skylake 等通过 AVX512 提供的峰值浮点性能。&lt;/p&gt;</description><link>https://jia.je/hardware/2024/11/07/arm_neoverse_v2/</link> <pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/11/07/arm_neoverse_v2/</guid> </item> <item> <title>Linux 大小核的调度算法探究</title> <category>cpu</category> <category>intel</category> <category>linux</category> <category>qualcomm</category> <category>scheduler</category> <category>software</category> <description>&lt;h1 id=&#34;linux-大小核的调度算法探究&#34;&gt;Linux 大小核的调度算法探究&lt;a class=&#34;headerlink&#34; href=&#34;#linux-大小核的调度算法探究&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;最近看到一些关于 Linux 大小核调度算法的一些博客，考虑到大小核目前已经比较常见了，因此做一些现状的探究。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;现象&#34;&gt;现象&lt;a class=&#34;headerlink&#34; href=&#34;#现象&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;intel&#34;&gt;Intel&lt;a class=&#34;headerlink&#34; href=&#34;#intel&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;首先可以做一下实验，用 &lt;code&gt;stress --cpu N&lt;/code&gt; 启动 N 个计算负载，看看这些线程都会被分配到哪些核上。在 Intel Core i9-14900K 上实验，这个 CPU 是 8P+16E，8P 对应 0-15 核，超线程的核的 ID 是连号的，16E 对应 16-31 核，观察到下面的结果：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;N=1&lt;/code&gt; 时，主要调度到 12-15 核里其中一个，这对应的是 8P 中的最后 2P&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=2&lt;/code&gt; 时，主要调度到 12-13 核里其中一个，以及 14-15 核里其中一个，同样也是 8P 中的最后 2P，每个 P 上分配一个任务&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=3&lt;/code&gt; 时，在 &lt;code&gt;N=2&lt;/code&gt; 的基础上，在 0-11 核里再调度一个&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=4..=8&lt;/code&gt; 时，在 &lt;code&gt;N=2&lt;/code&gt; 的基础上，在 0-11 核里调度剩下的任务，但不会分配到一个 P 核的两个逻辑核上&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=9..=24&lt;/code&gt; 时，在 &lt;code&gt;N=8&lt;/code&gt; 的基础上，在 16-31 核里调度剩下的任务&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=25..=32&lt;/code&gt; 时，在 &lt;code&gt;N=24&lt;/code&gt; 的基础上，把任务分配到 P 核的第二个逻辑核上&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可见在调度时，按照如下的优先级：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;最后 2 个 P 核&lt;/li&gt;&lt;li&gt;其余 6 个 P 核&lt;/li&gt;&lt;li&gt;E 核&lt;/li&gt;&lt;li&gt;P 核的超线程&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;可见 P 核内部也有优先级不同，最后 2 个 P 核具有更高的优先级，而它们的 Boost 频率确实也更高：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cat&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/sys/devices/system/cpu/cpufreq/policy0/scaling_max_freq&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;5700000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cat&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/sys/devices/system/cpu/cpufreq/policy12/scaling_max_freq&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;6000000&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;6 个 P 核的最大频率设定为 5.7 GHz，2 个 P 核的最大频率设定为 6.0 GHz。因此这两个 6.0 GHz 的 P 核会被优先调度。此时再来看 &lt;a href=&#34;https://www.intel.com/content/www/us/en/products/sku/236773/intel-core-i9-processor-14900k-36m-cache-up-to-6-00-ghz/specifications.html&#34;&gt;Intel® Core™ i9 processor 14900K Spec&lt;/a&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Max Turbo Frequency: 6 GHz&lt;/li&gt;&lt;li&gt;Intel® Thermal Velocity Boost Frequency: 6 GHz&lt;/li&gt;&lt;li&gt;Intel® Turbo Boost Max Technology 3.0 Frequency: 5.8 GHz&lt;/li&gt;&lt;li&gt;Performance-core Max Turbo Frequency: 5.6 GHz&lt;/li&gt;&lt;li&gt;Performance-core Base Frequency: 3.2 GHz&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可以看到，官方宣传的最高 Turbo 频率是 6 GHz，但实际上只有两个 P 核可以达到。&lt;/p&gt;&lt;p&gt;但并非所有平台在默认情况下都能达到宣称的最高频率的。例如在 Dell R730 上，Xeon E5-2680 v4 默认情况下只能达到 2.9 GHz 的 Boost 频率，但按照 Intel 官网，这个 CPU 的 Boost 最高可以达到 3.3 GHz。当然了，2.9 GHz 是全核能够达到的 Boost，3.3 GHz 只能少数的核达到，而服务器场景下，大多时间是跑多核负载，限制到 2.9 GHz 也可以理解。如果想要 3.3 GHz，就需要进 BIOS 设置，把调频交给 OS，C-State 也全部放开，这样就可以实现 3.3 GHz 了。这里比较重要的是要打开 C6，因为把空闲的核放到 C6 以后，才能把单核跑到最高的频率。&lt;/p&gt;&lt;h3 id=&#34;amd&#34;&gt;AMD&lt;a class=&#34;headerlink&#34; href=&#34;#amd&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在 AMD Ryzen 9 9950X 上进行类似的实验，这个 CPU 有 16 个核，0 核和 16 核对应一个物理核，其他依此类推，0-7 是一个 CCD，8-15 是另一个 CCD，得到的结果如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;N=1&lt;/code&gt; 时，主要调度到 4，9 和 20 核里其中一个&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=2&lt;/code&gt; 时，主要调度到 0 和 16 核里其中一个，9 和 25 核里其中一个&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=3&lt;/code&gt; 时，在 &lt;code&gt;N=2&lt;/code&gt; 的基础上，调度到 4 和 20 核里其中一个&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=4&lt;/code&gt; 时，在 &lt;code&gt;N=3&lt;/code&gt; 的基础上，调度到 11 和 27 核里其中一个&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=5&lt;/code&gt; 时，在 &lt;code&gt;N=4&lt;/code&gt; 的基础上，调度到 5 和 21 核里其中一个&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=6&lt;/code&gt; 时，在 &lt;code&gt;N=5&lt;/code&gt; 的基础上，调度到 8 和 24 核里其中一个&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=7&lt;/code&gt; 时，在 &lt;code&gt;N=6&lt;/code&gt; 的基础上，调度到 3 和 19 核里其中一个&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=8&lt;/code&gt; 时，在 &lt;code&gt;N=7&lt;/code&gt; 的基础上，调度到 10 和 26 核里其中一个&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;查看它们的 &lt;code&gt;scaling_max_freq&lt;/code&gt;，会发现都是相同的 5.752 GHz。查看它们的 &lt;code&gt;amd_pstate_prefcore_ranking&lt;/code&gt;，发现取值和逻辑核的映射关系：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;236: 0,4,16,20&lt;/li&gt;&lt;li&gt;231: 5,21&lt;/li&gt;&lt;li&gt;226: 3,19&lt;/li&gt;&lt;li&gt;221: 1,17&lt;/li&gt;&lt;li&gt;216: 2,18&lt;/li&gt;&lt;li&gt;211: 7,23&lt;/li&gt;&lt;li&gt;206: 6,22&lt;/li&gt;&lt;li&gt;201: 9,25&lt;/li&gt;&lt;li&gt;196: 11,27&lt;/li&gt;&lt;li&gt;191: 8,24&lt;/li&gt;&lt;li&gt;186: 10,26&lt;/li&gt;&lt;li&gt;181: 12,28&lt;/li&gt;&lt;li&gt;176: 13,29&lt;/li&gt;&lt;li&gt;171: 15,31&lt;/li&gt;&lt;li&gt;166: 14,30&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;按理说值越大的，越应该先被调度，应该按 0-&amp;gt;4-&amp;gt;5-&amp;gt;3 的顺序分配，但实际上观察的结果并不是这样。寻找规律，发现它先从第一个 CCD 找到分数最高的，再从第二个 CCD 找，再回到第一个 CCD 找分数第二高的，依此类推：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;找第一个 CCD 分数最高的核：0&lt;/li&gt;&lt;li&gt;找第二个 CCD 分数最高的核：9&lt;/li&gt;&lt;li&gt;找第一个 CCD 分数第二高的核：4&lt;/li&gt;&lt;li&gt;找第二个 CCD 分数第二高的核：11&lt;/li&gt;&lt;li&gt;找第一个 CCD 分数第三高的核：5&lt;/li&gt;&lt;li&gt;找第二个 CCD 分数第三高的核：8&lt;/li&gt;&lt;li&gt;找第一个 CCD 分数第四高的核：3&lt;/li&gt;&lt;li&gt;找第二个 CCD 分数第四高的核：10&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;说明它的逻辑是，轮流从两个 CCD 中取出一个分数尽量高的核去分配负载。实际测下来，分数高的核也确实能够 Boost 到更高的频率：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;seq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-n&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;:&amp;quot;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;numactl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-C&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;perf&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;stat&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles,task-clock&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;stress&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--cpu&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--timeout&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;grep&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GHz&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sleep&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,700,258,748&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.717 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,642,814,521&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.659 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,648,004,395&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.665 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-5&#34;&gt;&lt;a id=&#34;__codelineno-1-5&#34; name=&#34;__codelineno-1-5&#34; href=&#34;#__codelineno-1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,663,175,321&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.680 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-6&#34;&gt;&lt;a id=&#34;__codelineno-1-6&#34; name=&#34;__codelineno-1-6&#34; href=&#34;#__codelineno-1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,687,251,660&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.704 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-7&#34;&gt;&lt;a id=&#34;__codelineno-1-7&#34; name=&#34;__codelineno-1-7&#34; href=&#34;#__codelineno-1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,667,947,179&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.685 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-8&#34;&gt;&lt;a id=&#34;__codelineno-1-8&#34; name=&#34;__codelineno-1-8&#34; href=&#34;#__codelineno-1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,595,919,881&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.613 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-9&#34;&gt;&lt;a id=&#34;__codelineno-1-9&#34; name=&#34;__codelineno-1-9&#34; href=&#34;#__codelineno-1-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,599,885,078&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.617 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-10&#34;&gt;&lt;a id=&#34;__codelineno-1-10&#34; name=&#34;__codelineno-1-10&#34; href=&#34;#__codelineno-1-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,424,861,894&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.441 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-11&#34;&gt;&lt;a id=&#34;__codelineno-1-11&#34; name=&#34;__codelineno-1-11&#34; href=&#34;#__codelineno-1-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;9&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,427,318,403&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.443 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-12&#34;&gt;&lt;a id=&#34;__codelineno-1-12&#34; name=&#34;__codelineno-1-12&#34; href=&#34;#__codelineno-1-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,422,689,654&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.439 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-13&#34;&gt;&lt;a id=&#34;__codelineno-1-13&#34; name=&#34;__codelineno-1-13&#34; href=&#34;#__codelineno-1-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,425,760,950&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.442 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-14&#34;&gt;&lt;a id=&#34;__codelineno-1-14&#34; name=&#34;__codelineno-1-14&#34; href=&#34;#__codelineno-1-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,418,583,254&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.435 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-15&#34;&gt;&lt;a id=&#34;__codelineno-1-15&#34; name=&#34;__codelineno-1-15&#34; href=&#34;#__codelineno-1-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,425,842,189&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.442 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-16&#34;&gt;&lt;a id=&#34;__codelineno-1-16&#34; name=&#34;__codelineno-1-16&#34; href=&#34;#__codelineno-1-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,375,985,781&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.392 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-17&#34;&gt;&lt;a id=&#34;__codelineno-1-17&#34; name=&#34;__codelineno-1-17&#34; href=&#34;#__codelineno-1-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,377,887,646&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.394 GHz&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;分数高的可以冲到 5.7 GHz，分数低一些的就只能到 5.4 GHz 了。&lt;/p&gt;&lt;h3 id=&#34;qualcomm&#34;&gt;Qualcomm&lt;a class=&#34;headerlink&#34; href=&#34;#qualcomm&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;最后再看一下 Qualcomm X1E80100 平台，这个平台有三个 Cluster：0-3，4-7 和 8-11 是三个 Cluster。其中后两个 Cluster 的每个 Cluster 可以支持其中一个核心从 3.4 GHz Boost 到 4.0 GHz，加起来就是最多两个核心 Boost 到 4.0 GHz。打上 &lt;a href=&#34;https://patchew.org/linux/20240612124056.39230-1-quic._5Fsibis@quicinc.com/&#34;&gt;cpufreq&lt;/a&gt; 的补丁后，内核通过 scmi 接口得到了这些信息：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cat&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/sys/devices/system/cpu/cpufreq/policy*/scaling_max_freq&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;3417600&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;4012800&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;4012800&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但实际调度起来，各个核心乱跑，而 3.4 GHz 距离 4.0 GHz 差距不小，性能差接近 15%，可见目前 Linux 内核并没有很好地适配，目前还是需要手动绑核。高通目前还提交了 &lt;a href=&#34;https://patchwork.kernel.org/project/linux-arm-msm/list/?series=867688&amp;amp;state=*&#34;&gt;memlat govenor&lt;/a&gt; 补丁来对 LLC/DDR 来进行 DVFS，但对这个问题应该没有改进。&lt;/p&gt;&lt;h2 id=&#34;分析&#34;&gt;分析&lt;a class=&#34;headerlink&#34; href=&#34;#分析&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;接下来就要进入到 Linux 源码，找到 Linux 是如何处理这些调度优先级的，这些优先级是谁确定的，又是怎么传递到 Linux 内核，又是怎么参与到调度的呢？&lt;/p&gt;&lt;h3 id=&#34;intel-itmt&#34;&gt;Intel ITMT&lt;a class=&#34;headerlink&#34; href=&#34;#intel-itmt&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;首先来看一下 Intel 的补丁：&lt;a href=&#34;https://lore.kernel.org/lkml/cover.1479844244.git.tim.c.chen@linux.intel.com/&#34;&gt;Support Intel Turbo Boost Max Technology 3.0&lt;/a&gt;，这个 patch 做了这些事情：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://lore.kernel.org/lkml/0998b98943bcdec7d1ddd4ff27358da555ea8e92.1479844244.git.tim.c.chen@linux.intel.com/&#34;&gt;PATCH v8 8/8&lt;/a&gt;: 读取 ACPI 的 CPPC 信息，得到每个核心的 highest_perf，根据 highest_perf，设置逻辑核的调度优先级：&lt;code&gt;sched_set_itmt_core_prio(cppc_perf.highest_perf, cpu);&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://lore.kernel.org/lkml/0e73ae12737dfaafa46c07066cc7c5d3f1675e46.1479844244.git.tim.c.chen@linux.intel.com/&#34;&gt;PATCH v8 1/8&lt;/a&gt;: 修改调度器，让它尊重 arch_asym_cpu_priority 函数计算出来的优先级，而不是按照核心编号从小到大&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://lore.kernel.org/lkml/cd401ccdff88f88c8349314febdc25d51f7c48f7.1479844244.git.tim.c.chen@linux.intel.com/&#34;&gt;PATCH v8 3/8&lt;/a&gt;: 实现 arch_asym_cpu_priority，如果一个物理核对应 n 个逻辑核，那么第一个逻辑核的优先级乘以 n/1，第二个逻辑核的优先级乘以 n/2，依次类推。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;简而言之，从 ACPI 中获取 CPPC 信息，把 CPPC 的 Highest Perf 设置为对应物理核的优先级，再根据物理核的优先级计算每个逻辑核的优先级，如果是 2-SMT，那就是第一个逻辑核的优先级翻倍，第二个逻辑核的优先级不变。但这个方法有局限性，就是要求 E 核的优先级介于 P 核的两个优先级之间，设置起来比较别扭。后来针对 SMT 的处理被集成到了调度器当中，因此从 itmt 的视角来看，不需要针对 SMT 进行特殊处理，SMT 的核设置为同一个优先级即可：&lt;a href=&#34;https://github.com/torvalds/linux/commit/046a5a95c3b0425cfe79e43021d8ee90c1c4f8c9&#34;&gt;x86/sched/itmt: Give all SMT siblings of a core the same priority&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;在 Intel i9-14900K 平台上，无论大小核，Highest Perf 都等于 255，此时无法通过 Highest Perf 来区分核心的体质，此时会触发下面的&lt;a href=&#34;https://github.com/torvalds/linux/blob/c2ee9f594da826bea183ed14f2cc029c719bf4da/drivers/cpufreq/intel_pstate.c#L363-L371&#34;&gt;代码&lt;/a&gt;：&lt;/p&gt;&lt;div class=&#34;language-cpp highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-2&#34;&gt;&lt;a id=&#34;__codelineno-3-2&#34; name=&#34;__codelineno-3-2&#34; href=&#34;#__codelineno-3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; * If CPPC is not available, fall back to MSR_HWP_CAPABILITIES bits [8:0].&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-3&#34;&gt;&lt;a id=&#34;__codelineno-3-3&#34; name=&#34;__codelineno-3-3&#34; href=&#34;#__codelineno-3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-4&#34;&gt;&lt;a id=&#34;__codelineno-3-4&#34; name=&#34;__codelineno-3-4&#34; href=&#34;#__codelineno-3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; * Also, on some systems with overclocking enabled, CPPC.highest_perf is&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-5&#34;&gt;&lt;a id=&#34;__codelineno-3-5&#34; name=&#34;__codelineno-3-5&#34; href=&#34;#__codelineno-3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; * hardcoded to 0xff, so CPPC.highest_perf cannot be used to enable ITMT.&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-6&#34;&gt;&lt;a id=&#34;__codelineno-3-6&#34; name=&#34;__codelineno-3-6&#34; href=&#34;#__codelineno-3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; * Fall back to MSR_HWP_CAPABILITIES then too.&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-7&#34;&gt;&lt;a id=&#34;__codelineno-3-7&#34; name=&#34;__codelineno-3-7&#34; href=&#34;#__codelineno-3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-8&#34;&gt;&lt;a id=&#34;__codelineno-3-8&#34; name=&#34;__codelineno-3-8&#34; href=&#34;#__codelineno-3-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cppc_perf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;highest_perf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CPPC_MAX_PERF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-9&#34;&gt;&lt;a id=&#34;__codelineno-3-9&#34; name=&#34;__codelineno-3-9&#34; href=&#34;#__codelineno-3-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cppc_perf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;highest_perf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HWP_HIGHEST_PERF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;READ_ONCE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all_cpu_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hwp_cap_cached&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看各个核心上 MSR_HWP_CAPABILITIES MSR 记录的 Highest Perf 值：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;seq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sudo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;turbostat&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-n&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--interval&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;grep&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;MSR_HWP_CAPABILITIES&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现后两个 P 核的 highest perf 是 77，其他 P 核的 highest perf 是 73，E 核的 highest perf 是 44。因此 Linux 的调度策略就出来了：先是后两个 P 核，再是其他 P 核，然后是 E 核，最后是 SMT 出来的逻辑核。&lt;/p&gt;&lt;h3 id=&#34;acpi-cppc&#34;&gt;ACPI CPPC&lt;a class=&#34;headerlink&#34; href=&#34;#acpi-cppc&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;接下来，查看 ACPI 的 CPPC 信息保存了什么。&lt;a href=&#34;https://uefi.org/specs/ACPI/6.5/08_Processor_Configuration_and_Control.html?highlight=cppc#collaborative-processor-performance-control&#34;&gt;CPPC&lt;/a&gt; 全称是 Collaborative Processor Performance Control，是对已有的 P State 的改进，原来的 P State 是分立的几个配置，可选项比较少，CPPC 对性能做了抽象，每个核心可以有 Highest Performance，Nominal Performance，Lowest Nonlinear Performance 和 Lowest Performance 这几个值，性能可以在这些值之间浮动。简单来说，Highest 对应单核 Boost 到的最高性能，Nominal 对应全核能达到的性能，Lowest 对应最低频下的性能，Lowest Nonlinear 代表性能功耗比线性的界限，往下性能核功耗是线性的，往上性能功耗比会下降。OS 可以设定想要的性能范围：Minimum 和 Maximum Perf，也可以指定一个想要的性能 Desired Performance。当然了，硬件也不一定能够达到 Highest Perf，当前能保证达到的最高性能叫做 Guaranteed Perf。此外还有 Energy Performance Preference (EPP)，OS 告诉硬件，我想要能效还是性能，最小的 0 表示性能，最大的 255 表示能效。&lt;/p&gt;&lt;p&gt;简单来说，硬件告诉 OS 五个值：Highest Perf，Nominal Perf，Lowest Nonlinear Perf，Lowest Perf 和 Guaranteed Perf，OS 通过三个值告诉硬件，我想要什么样的性能：Min Perf，Max Perf，Desired Perf，以及性能和功耗哪个更看重：EPP。&lt;/p&gt;&lt;h3 id=&#34;amd-cppc&#34;&gt;AMD CPPC&lt;a class=&#34;headerlink&#34; href=&#34;#amd-cppc&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在 AMD 平台上，CPPC 的这些性能值既可以通过 ACPI 获取，又可以通过 MSR 来读写（来源：&lt;a href=&#34;https://www.amd.com/content/dam/amd/en/documents/processor-tech-docs/software-optimization-guides/57254-PUB_3.00.zip&#34;&gt;Processor Programming Reference (PPR) for AMD Family 1Ah Model 24h, Revision B0 Processors&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../linux-core-scheduling-cppc-1.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../linux-core-scheduling-cppc-2.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;在更早的 AMD 处理器中，没有这些 MSR，而是通过 MMIO 来控制，这些信息记录在 ACPI CPPC 当中。&lt;/p&gt;&lt;p&gt;通过比对 &lt;code&gt;/sys/devices/system/cpu/cpu*/acpi_cppc/highest_perf&lt;/code&gt; 和 &lt;code&gt;/sys/devices/system/cpu/cpu*/cpufreq/amd_pstate_prefcore_ranking&lt;/code&gt;，我们会发现它们是一样的，说明 amd-pstate 驱动做的事情和 itmt 类似，根据 ACPI 的 Highest Perf 信息（或者从 MSR 0xC001_02B0 读出 Highest Perf），设置 Preferred Core Ranking 以及调度器的优先级。阅读代码，可以看到它确实是这么做的：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;初始化中，设置优先级为 &lt;code&gt;highest_perf&lt;/code&gt;：&lt;a href=&#34;https://github.com/torvalds/linux/blob/c2ee9f594da826bea183ed14f2cc029c719bf4da/drivers/cpufreq/amd-pstate.c#L796&#34;&gt;&lt;code&gt;sched_set_itmt_core_prio((int)READ_ONCE(cpudata-&amp;gt;highest_perf), cpudata-&amp;gt;cpu);&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;设置 &lt;code&gt;prefcore_ranking&lt;/code&gt; 为 &lt;code&gt;highest_perf&lt;/code&gt;: &lt;a href=&#34;https://github.com/torvalds/linux/blob/c2ee9f594da826bea183ed14f2cc029c719bf4da/drivers/cpufreq/amd-pstate.c#L402&#34;&gt;&lt;code&gt;WRITE_ONCE(cpudata-&amp;gt;prefcore_ranking, cppc_perf.highest_perf)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;运行过程中，如果发现 &lt;code&gt;highest_perf&lt;/code&gt; 出现变化，也更新到调度器的优先级当中：&lt;a href=&#34;https://github.com/torvalds/linux/blob/master/drivers/cpufreq/amd-pstate.c#L822&#34;&gt;&lt;code&gt;sched_set_itmt_core_prio((int)cur_high, cpu);&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;剩下的就和 Intel 一样了。至于为什么调度器轮流从两个 CCD 取优先级最高的核心调度，应该是调度器考虑了这些核心的拓扑，进行了负载均衡，尽量保证每个 CCD 上的负载相当。这样的设计在 9950X 这种对称的架构上没啥问题，但如果是 Strix Point 这种混合 Zen5 和 Zen5c 的情况，如果还像这样，就会在 Zen5 和 Zen5c 之间来回调度，这样就不太合适了：应该先调度 Zen5，再调度 Zen5c。完整的讨论见 &lt;a href=&#34;https://blog.hjc.im/thoughts-on-linux-preferred-cores-and-multi-ccx.html&#34;&gt;谈谈 Linux 与 ITMT 调度器与多簇处理器&lt;/a&gt;。最近 Linux 也上游化了相关的 Patch，使得 P 核优先被调度：&lt;a href=&#34;https://www.phoronix.com/news/AMD-Hetero-Topo-Linux-6.13&#34;&gt;AMD Heterogeneous CPU Design Topology Patches Coming For Linux 6.13&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;而我们知道 Linux 的 cpufreq 设置了不同的 governor，例如 performance 和 powersave。那么它们是怎么映射到 Min/Max/Desired Perf 的呢？通过阅读代码，可以发现：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;powersave 对应的配置是：Min Perf 设置为 Lowest/Lowest Nonlinear Perf，Max Perf 设置为 Highest/Nominal Perf&lt;/li&gt;&lt;li&gt;performance 对应的配置是：Min Perf 和 Max Perf 都设置为 Highest/Nominal Perf&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果启用 boost（&lt;code&gt;echo 1 &amp;gt; /sys/devices/system/cpu/cpufreq/policy0/boost&lt;/code&gt;），那就把 Max Perf 设置到 Highest Perf；如果不启用 Boost，就设置到 Nominal Perf。&lt;/p&gt;&lt;p&gt;下面给出几个例子，其中 Highest Perf 为 166，Nominal Perf 为 124，Lowest Perf 为 18：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;performance + boost=1: Min = 166, Max = 166&lt;/li&gt;&lt;li&gt;performance + boost=0: Min = 124, Max = 124&lt;/li&gt;&lt;li&gt;powersave + boost=1: Min = 18, Max = 166&lt;/li&gt;&lt;li&gt;powersave + boost=0: Min = 18, Max = 124&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;而其他由 Linux 实现变频的 governor：schedutil 和 ondemand，会通过 Desired Perf 来实现。&lt;/p&gt;&lt;p&gt;amd-pstate 支持三个&lt;a href=&#34;https://www.phoronix.com/news/AMD-P-State-Guided-Auto&#34;&gt;运行模式&lt;/a&gt;：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;active(默认): 软件就设置一下要性能还是能耗（通过 performance/powersave governor 和 EPP &lt;code&gt;/sys/devices/system/cpu/cpufreq/policy0/energy_performance_preference&lt;/code&gt;），其他的都交给硬件自动调整&lt;/li&gt;&lt;li&gt;guided：软件设置一个最低和最高的性能，其他都交给硬件&lt;/li&gt;&lt;li&gt;passive：软件来负责调频，结果通过 Desired Perf 告诉硬件&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这里说的 active 和 passive 是从硬件的角度出发的，而不是 OS。&lt;/p&gt;&lt;p&gt;注：虽然这里说是硬件调整，实际上大概率是由在一个片上的小 CPU 运行的固件（PMFW，Power Management Firmware）负责调整。&lt;/p&gt;&lt;h3 id=&#34;qualcomm_1&#34;&gt;Qualcomm&lt;a class=&#34;headerlink&#34; href=&#34;#qualcomm_1&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;arm64 架构没有实现 arch_asym_cpu_priority 函数，因此用的不是上述 Intel/AMD 的机制，而是在 Device Tree 中用 &lt;a href=&#34;https://www.kernel.org/doc/Documentation/devicetree/bindings/arm/cpu-capacity.txt&#34;&gt;capacity-dmips-mhz&lt;/a&gt; 标记每个核心的性能，但是 X Elite 的 DTS 没有记录这个信息，因此 Linux 内核也就无法合理地调度了。因此一个可能的解决办法是，给后两个 Cluster 的一个核设置更高的 capacity-dmips-mhz，其他的核心都设置成一样。但其实通常来说，对于同一个核来说，提高频率以后，DMIPS/MHz 反而是下降的，内核用 DMIPS/MHz 这个指标，主要是用来区分大小核，而不是用来判断有没有 Boost。&lt;/p&gt;&lt;p&gt;实际尝试了一下，给 4 和 8 这两个核标记更高的 capacity-dmips-mhz，现在跑单核或双核负载可以自动跑到 4.0 GHz 上了。表现在 Geekbench 6 上，就是单核性能 2452 分到 2892 分的区别。修改的内容已经提交：&lt;a href=&#34;https://lore.kernel.org/lkml/20241025031257.6284-2-c@jia.je/&#34;&gt;[PATCH] arm64: dts: qcom: x1e80100: Add performance hint for boost clock&lt;/a&gt;，不过合并的概率不大，毕竟不是什么优雅的解决办法。&lt;/p&gt;&lt;h2 id=&#34;小结&#34;&gt;小结&lt;a class=&#34;headerlink&#34; href=&#34;#小结&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;针对不同核心的不同性能以及 SMT，Linux 的调度器需要知道各个逻辑核心的调度优先级。在 Intel/AMD 平台上，这个信息目前主要是通过 CPPC 的 Highest Perf 来获取，也可能 Fallback 到 MSR_HWP_CAPABILITIES 上。在 ARM64 平台上，则需要 DTS 标记各核心的性能。&lt;/p&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;a class=&#34;headerlink&#34; href=&#34;#参考&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://blog.hjc.im/thoughts-on-linux-preferred-cores-and-multi-ccx.html&#34;&gt;谈谈 Linux 与 ITMT 调度器与多簇处理器&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://zhiwei-lii.github.io/intel-cpu%E4%B8%8A%E9%9D%A2%E7%9A%84linux%E5%A4%A7%E5%B0%8F%E6%A0%B8%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98/&#34;&gt;Intel CPU 上面的 Linux 大小核调度问题&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/software/2024/10/23/linux-core-scheduling/</link> <pubDate>Wed, 23 Oct 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2024/10/23/linux-core-scheduling/</guid> </item> <item> <title>IBM z15 Mainframe CPU 分支预测器学习笔记</title> <category>bp</category> <category>cpu</category> <category>hardware</category> <category>ibm</category> <category>microarchitecture</category> <description>&lt;h1 id=&#34;ibm-z15-mainframe-cpu-分支预测器学习笔记&#34;&gt;IBM z15 Mainframe CPU 分支预测器学习笔记&lt;a class=&#34;headerlink&#34; href=&#34;#ibm-z15-mainframe-cpu-分支预测器学习笔记&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ISCA 2020 的一篇文章 &lt;a href=&#34;https://ieeexplore.ieee.org/document/9138999&#34;&gt;The IBM z15 High Frequency Mainframe Branch Predictor Industrial Product&lt;/a&gt; 非常详细地解析了 IBM z15 Mainframe CPU 的分支预测器设计。本文是对这篇论文的学习和整理的笔记。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;设计思路&#34;&gt;设计思路&lt;a class=&#34;headerlink&#34; href=&#34;#设计思路&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;论文的第二节 Branch Prediction Design Considerations 提到了它设计分支预测器时需要考虑的事情。z15 处理器面向的是具有很大指令 footprint 的程序，为此准备了 128KB 的 L1 ICache，以及 4MB 的 L2 Private ICache。为了支撑 MB 级别的指令，BTB 也要相应增大。&lt;/p&gt;&lt;p&gt;IBM z 系列用的是变长指令集，指令长度可能是 2 或 4 或 6 字节，平均长度是 5 字节。考虑到每 5 条指令有一条分支指令，那就是每 25 个字节有一条分支指令，那么 4MB 的 L2 ICache 平均下来可能有 164K 条分支。因此，z15 设计了可以保存 128K 条分支的 L2 BTB。z15 的流水线很长，分支预测错误会带来 26 个周期的开销，因此分支预测的正确率就很重要。z15 处理器设计了两级的 BTB，L1 BTB（论文中称 BTB1）容量是 16K=2K x 8 way，L2 BTB（论文中称 BTB2）容量是 128K=32K x 4-way。为了加速 L1 BTB 的预测，z15 有 Column Predictor（CPRED，1K x 8）。为了预测分支的方向，z15 还引入了 PHT（short 和 long 两个 PHT，都是 512 x 8），Perceptron（16 x 2）。为了预测间接分支和返回指令的目的地址，z15 设计了 Changing Target Buffer（CTB，2K x 1）和 Call/Return Stack（CRS）。&lt;/p&gt;&lt;h2 id=&#34;具体实现&#34;&gt;具体实现&lt;a class=&#34;headerlink&#34; href=&#34;#具体实现&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;z15 采用的是分离式前端，分支预测器有 6 级的流水线，每一级分别记为 b0-b5。各级的功能如下：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Indexing into the BTB arrays occurs inthe b0 cycle, which when superimposed over the z15 corepipeline in figure 1 coincides with the very stage after arestart, but deviates away from the core pipeline after that.An array access cycle is in b1. Metadata from the arrays isobtained in b2, and hit detection and direction applicationon a per branch basis performed across the b2 and b3cycles. Ordering of the branches based on their low-orderinstruction address bits is also done in b3. In b4, the finalprediction is prepared, including selection of theappropriate target address provider. The prediction ispresented to the consumers, namely the IDU and ICM, inthe b5 cycle.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果等到 b5 才出预测结果就比较慢了，因此它还可以在 b2 周期出结果，利用的是 CPRED 预测器。在 CPRED 工作的情况下，每两个周期可以预测一个 taken branch，如果 CPRED 没有预测，那就需要每 5 个周期预测一个 taken branch，而在 SMT2 模式下，两个线程轮流访问 BTB，此时每个线程需要每 6 个周期预测一个 taken branch。&lt;/p&gt;&lt;p&gt;z15 的 L1 BTB 的 8-way 意味着在一个周期可以进行 8 条分支的预测，从 64B 的指令中，识别最多 8 条指令，从中找到第一条跳转的分支。为了优化性能和功耗，在面对连续的无分支指令的代码时，可以快速跳过，这里用的是 SKOOT（Skip Over OffseT）预测器，在 BTB 的分支记录了到下一次分支的距离，如果这个距离很长，那就可以快速跳过若干个 64B 指令块。&lt;/p&gt;&lt;p&gt;为了预测分支的方向，在 L1 BTB 里，也保存了 2 bit saturating counter，也就是 BTB 也充当了通常说的 BHT。除了 BHT 以外，为了预测分支方向，z15 记录了 Global Path Vector，也就是常说的 PHR，记录最近的 n 条 taken branch 的历史。z14 之前，GPV 记录了最近 9 条 taken branch 的历史，z14 和 z15，GPV 记录了最近 17 条 taken branch 的历史。GPV 中每个 taken branch 提供 2 bit 的信息。&lt;/p&gt;&lt;p&gt;GPV 和 PC 作为 TAGE 的输入，进行方向预测。z15 采用了两个 TAGE PHT，都是 512 x 8 way，一共是 8K 分支的容量，历史短的 TAGE PHT 只用最近 9 条 taken branch 的历史，历史长的 TAGE PHT 则会用完整的 17 条 taken branch 的历史。论文里比较详细地描述了 TAGE 的实现，基本和 A. Seznec 的设计是一样的，也做了 USE_ALT_ON_NA 的改进。除了 TAGE 以外，z15 还有 Perceptron 预测器，有 32 个 entry，16 x 2 way，把系数和 GPV 进行点积（GPV 的每个 bit 映射为 1 和 -1），根据结果的符号决定跳转的方向。&lt;/p&gt;&lt;p&gt;因此一共有 BHT、TAGE 和 Perceptron 可以提供方向预测。为了判断用哪个预测器来提供最终的方向，规则是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;对于条件分支，记录它是否曾经跳和不跳过（Bidirectional），如果只往一个方向跳，就查 BHT&lt;/li&gt;&lt;li&gt;如果两个方向都跳过，此时 Perceptron 优先级更高，如果 Perceptron 命中且置信度高，则用 Perceptron 的结果&lt;/li&gt;&lt;li&gt;否则考察 TAGE 的预测结果，如果 TAGE 命中且置信度高，则用 TAGE 的结果&lt;/li&gt;&lt;li&gt;如果 Perceptron 和 TAGE 都没有命中，再用 BHT 的结果&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;简单来说，优先级是 Perceptron &amp;gt; TAGE &amp;gt; BHT。&lt;/p&gt;&lt;p&gt;为了预测间接分支的目的地址，z15 上 PC 和 GPV 通过哈希映射到 CTB（Changing Target Buffer）的表项上，每个表项记录了分支的目的地址。&lt;/p&gt;&lt;p&gt;有意思的是，z15 指令集里没有单独的 call 和 return 指令，因此硬件需要识别间接分支里的 call 和 return 模式。论文里介绍了具体的识别方法，但目前主流指令集都做了区分（要么是单独的指令，要么建议编译器用特定的寄存器，标记 call 和 return），所以这个方法也没啥参考价值。&lt;/p&gt;</description><link>https://jia.je/hardware/2024/09/21/ibm-z15-branch-predictor/</link> <pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/09/21/ibm-z15-branch-predictor/</guid> </item> <item> <title>浅谈乱序执行 CPU（三：前端）</title> <category>bp</category> <category>brief-into-ooo</category> <category>cpu</category> <category>frontend</category> <category>hardware</category> <category>ooo</category> <category>prediction</category> <description>&lt;h1 id=&#34;浅谈乱序执行-cpu三前端&#34;&gt;浅谈乱序执行 CPU（三：前端）&lt;a class=&#34;headerlink&#34; href=&#34;#浅谈乱序执行-cpu三前端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;/kb/hardware/ooo_cpu.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这是 &lt;a href=&#34;../../../../2021/09/14/brief-into-ooo/&#34;&gt;浅谈乱序执行 CPU&lt;/a&gt; 系列博客的第三篇。&lt;/p&gt;&lt;p&gt;本文主要讨论处理器前端的部分。&lt;/p&gt;&lt;p&gt;本系列的所有文章：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;../../../../2021/09/14/brief-into-ooo/&#34;&gt;浅谈乱序执行 CPU（一：乱序）&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;../../../../2022/03/31/brief-into-ooo-2/&#34;&gt;浅谈乱序执行 CPU（二：访存）&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;./&#34;&gt;浅谈乱序执行 CPU（三：前端）&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;处理器前端&#34;&gt;处理器前端&lt;a class=&#34;headerlink&#34; href=&#34;#处理器前端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;再来分析一下乱序执行 CPU 的前端部分。以 RISC-V 为例，指令长度有 4 字节或者 2 字节两种，其中 2 字节属于压缩指令集。如何正确并高效地进行取指令译码？&lt;/p&gt;&lt;p&gt;首先，我们希望前端能够尽可能快地取指令，前端的取指能力要和后端匹配，比如对于一个四发射的 CPU，前端对应地需要一个周期取 &lt;code&gt;4*4=16&lt;/code&gt; 字节的指令。但是，这 16 字节可能是 4 条非压缩指令，也可能是 8 条压缩指令，也可能是混合的情况。所以，这里会出现一个可能出现指令条数不匹配的情况，所以中间可以添加一个 Fetch Buffer，比如 &lt;a href=&#34;https://github.com/riscv-boom/riscv-boom&#34;&gt;BOOM&lt;/a&gt; 的实现中，L1 ICache 每周期读取 16 字节，然后进行预译码，出来 8 条指令，保存到 Fetch Buffer 中。这里需要考虑以下几点：首先从 ICache 读取的数据是对齐的，但是 PC 可能不是，比如中间的地址。其次，可能一个 4 字节的非压缩指令跨越了两次 Fetch，比如前 2 个字节在前一个 Fetch Bundle，后 2 个字节在后一个 Fetch Bundle；此外，每个 2 字节的边界都需要判断一下是压缩指令还是非压缩指令。一个非常特殊的情况就是，一个 4 字节的指令跨越了两个页，所以两个页都需要查询页表；如果恰好在第二个页处发生了页缺失，此时 epc 是指令的起始地址，但 tval 是第二个页的地址，这样内核才知道是哪个页发生了缺失。&lt;/p&gt;&lt;p&gt;其次，需要配合分支预测。如果需要保证分支预测正确的情况下，能够在循环中达到接近 100% 的性能，那么，在 Fetch 分支结尾的分支指令的同时，需要保证下一次 Fetch 已经得到了分支预测的目的地址。这个就是 BOOM 里面的 L0 BTB (1-cycle redirect)。但是，一个周期内完成的分支预测，它的面积肯定不能大，否则时序无法满足，所以 BOOM 里面还设计了 2-cycle 和 3-cycle 的比较高级的分支预测器，还有针对函数调用的 RAS（Return Address Stack）。&lt;/p&gt;&lt;p&gt;分支预测也有很多方法。比较简单的方法是实现一个 BHT，每个项是一个 2 位的饱和计数器，超过一半的时候增加，少于一半时减少。但是，如果遇到了跳转/不跳转/跳转/不跳转这种来回切换的情况，准确率就很低。一个复杂一些的设计，就是用 BHR，记录这个分支指令最近几次的历史，对于每种可能的历史，都对应一个 2 位的饱和计数器。这样，遇到刚才所说的情况就会很好地预测。但实践中会遇到问题：如果在写回之前，又进行了一次预测，因为预测是在取指的时候做的，但是更新 BPU 是在写回的时候完成的，这时候预测就是基于旧的状态进行预测，这时候 BHR 就会出现不准确的问题；而且写回 BPU 的时候，会按照原来的状态进行更新，这个状态可能也是错误的，导致丢失一次更新，识别的模式从跳转/不跳转/跳转/不跳转变成了跳转/跳转/跳转/不跳转，这样又会预测错误。一个解决办法是，在取指阶段，BPU 预测完就立即按照预测的结果更新 BHR，之后写回阶段会恢复到实际的 BHR 取值。论文 &lt;a href=&#34;https://dl.acm.org/doi/10.1145/192724.192756&#34;&gt;The effect of speculatively updating branch history on branch prediction accuracy, revisited&lt;/a&gt; 和 &lt;a href=&#34;https://jilp.org/vol2/v2paper1.pdf&#34;&gt;Speculative Updates of Local and Global Branch History: A Quantitative Analysis&lt;/a&gt; 讨论了这个实现方式对性能的影响。&lt;/p&gt;&lt;p&gt;比较容易做预测更新和恢复的是全局分支历史，可以维护两个 GHR（Global History Register），一个是目前取指令最新的，一个是提交的最新的。在预测的时候，用 GHR 去找对应的 2-bit 状态，然后把预测结果更新到 GHR 上。在预测失败的时候，把 GHR 恢复为提交的状态。如果要支持一个 Fetch Packet 中有多个分支，可以让 GHR 对应若干个 2-bit 状态，分别对应相应位置上的分支的状态，当然这样面积也会增加很多。&lt;/p&gt;&lt;p&gt;除了记录条件分支的跳与不跳以外，通常还可以维护 taken branch 的地址，记录这样的分支历史的 GHR 就叫做 PHR（Path History Register）。&lt;/p&gt;&lt;p&gt;目前比较主流的分支预测算法就是 &lt;a href=&#34;https://inria.hal.science/hal-03408381/document&#34;&gt;TAGE&lt;/a&gt; 了：维护多个表，每个表采取的历史长度不同，呈几何级数，使得需要比较短的历史就可以预测的分支可以更快的预热，需要比较长的历史才能预测的分支也可以有较好的准确度。比较有意思的是 TAGE 的表项分配和替换的算法，useful counter 和 altpred 的设计，以及 USE_ALT_ON_NA 的优化。为了预测间接分支，可以把目的地址放到 TAGE 的表项里，把预测方向变为预测目的地址，这种预测间接分支的 TAGE 就叫做 ITTAGE。部分实现还会给 TAGE 添加 Statistical Corrector 或者 Loop Predictor。这些算法基本统治了当今高性能的处理器设计。&lt;/p&gt;&lt;p&gt;我在博客 &lt;a href=&#34;../../10/samsung-exynos-cpu/&#34;&gt;三星 Exynos CPU 微架构学习笔记&lt;/a&gt; 中详细分析了 Exynos 微架构的前端设计，建议感兴趣的读者阅读。&lt;/p&gt;&lt;h2 id=&#34;short-forward-branch&#34;&gt;Short Forward Branch&lt;a class=&#34;headerlink&#34; href=&#34;#short-forward-branch&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;论文 &lt;a href=&#34;https://carrv.github.io/2020/papers/CARRV2020_paper_15_Zhao.pdf&#34;&gt;SonicBOOM: The 3rd Generation Berkeley Out-of-Order Machine&lt;/a&gt; 提到了一个有意思的优化：Short Forward Branch。它面对的场景是一些小的 if 语句，在 if 的条件满足时，执行少量的指令。正常来说，这样的代码会被编译成一个 Forward 的分支，被跳过的就是 if 条件满足时要执行的代码对应的指令。如果分支比较好预测，那现有的分支预测器就可以得到很好的性能，但如果分支不好预测，例如它会依赖数据的值，并且具有一定的随机性，这时候性能就会下降。为了解决这个问题，可以用条件执行来代替分支：把分支指令替换为比较指令，然后根据比较的结果来条件执行本来可能会被跳过的指令。下面是论文中给的例子，说的比较的清晰：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../brief-into-ooo-3-sfb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;比较有意思的是，这个优化是完全由硬件来做的，而不是编译器。当然了，如果编译器要做的前提是硬件支持这类标量的条件执行指令，虽然 Zicond 扩展确实提供了类似的功能，很多 RISC-V 实现还没有实现 Zicond。硬件上做的话，就不需要扩展指令集，直接在前端进行识别，当发现这种 Short Forward Branch 时，把分支指令本身改成一条 set-flag 指令，然后把分支到跳转目的地这一段的指令改为条件执行。这样就不需要进行分支预测了，无论原来的分支是否跳转，后续的这些指令都会进入流水线，看起来做了更多的事情，但很多时候反而比错误的分支预测还要快。&lt;/p&gt;&lt;p&gt;这个优化思路在 Intel 的专利 &lt;a href=&#34;https://patents.google.com/patent/US9367314B2/en&#34;&gt;Converting conditional short forward branches to computationally equivalent predicated instructions&lt;/a&gt; 也有阐述，不知道这个优化有没有实际加到 Intel 的处理器当中。专利的图 6 很好地用 X86 的指令阐述了这个优化：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../brief-into-ooo-3-intel.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;Intel 在 &lt;a href=&#34;https://ieeexplore.ieee.org/document/9138936&#34;&gt;ISCA 2020 的论文 Auto-Predication of Critical Branches&lt;/a&gt; 中提供了一些硬件的实现思路，讨论了怎样去检测这样的化分支指令为条件执行指令的情况，如何在硬件中实现高效的条件执行，怎么避免负优化（例如去掉分支指令以后，分支预测器眼里就丢失了分支的历史；转化为条件执行以后，本来可能没有依赖的指令也变得强制有依赖了），建议有兴趣的读者阅读。&lt;/p&gt;&lt;p&gt;那么这样的指令序列在实际的程序里出现的多吗？论文 &lt;a href=&#34;http://ieeexplore.ieee.org/document/717459/&#34;&gt;The Effects of Predicated Execution on Branch Prediction&lt;/a&gt; 分析了这个问题，结论是还真不少。当然了，这篇论文主要的论点是，指令集应该引入各种条件执行指令，这样编译器就可以利用现有处理器的条件执行指令来优化，没有去讨论纯硬件的实现方法。&lt;/p&gt;&lt;p&gt;从 SiFive 提交给 GCC 的 &lt;a href=&#34;https://patchwork.ozlabs.org/project/gcc/patch/20190430234741.8120-1-jimw@sifive.com/#2163277&#34;&gt;patch&lt;/a&gt; 也可以看到，类似的优化被实装到了 SiFive 的 CPU 当中，不过这里做的会更加简单，只考虑了分支跳过一条指令的情况，这种也比较好实现，可以在现有的指令融合机制的基础上，把两条指令合成一条：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The SiFive 7 series cores have macro fusion support to convert a branch over asingle instruction into a conditionally executed instruction. This adds aconditional move pattern, enabled only for the SiFive 7 series cores, thatimplements the initial optimization support for this feature. This gives usabout a 10% increase in coremark scores for this core.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;SiFive 的专利 &lt;a href=&#34;https://patents.google.com/patent/US10996952B2/en&#34;&gt;Macro-op fusion&lt;/a&gt; 也提到了很多在 RISC-V 上实现的指令融合的优化，下面举几个例子：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;bne&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;target&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;target:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以转化为：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ifeqz_addi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就是上面所说的 SiFive 实现的只跳过单条指令的 Short Forward Branch，把 bne + add 指令变成了条件 add 指令，并且自带和 0 比较的逻辑：如果 x1 == 0（ifeqz，if equals to zero），就设置 x3 = x3 + 1，否则 x3 保持不变。类似地，把 add 换成 sub 也可以类似地做融合，甚至连函数调用 jal 指令也可以。&lt;/p&gt;&lt;p&gt;还有一个有趣的指令融合场景：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;beq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;skip&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;target&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;skip:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-5&#34;&gt;&lt;a id=&#34;__codelineno-2-5&#34; name=&#34;__codelineno-2-5&#34; href=&#34;#__codelineno-2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;target:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以融合为：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;target&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可能会觉得，为什么编译器要多此一举，不直接生成一个 bne？答案是 RISC-V 的 bne 的立即数范围太小，要想跳到更大的范围，就需要用 j 指令，于是编译器只好用 beq + j 的组合来实现大范围的 bne。然后 SiFive 的处理器会识别这种模式，把它转换成一条 jne：条件分支，但又有 j 指令的 imm 跳转范围。这也挺有意思的，指令在设计的时候，不好做太多的 imm 位数，编译器因此生成了更复杂的代码，硬件再翻译回来。&lt;/p&gt;&lt;p&gt;苹果申请了 &lt;a href=&#34;https://patents.google.com/patent/US20240028339A1/en&#34;&gt;Using a Next Fetch Predictor Circuit with Short Branches and Return Fetch Groups&lt;/a&gt; 专利，它和上面提到的优化不太一样，但是有些类似。专利里提到了这么几种情况：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果 Fetch Group 内有一个要跳转的分支指令会 Forward 跳转到同一个 Fetch Group 内部，原来的做法是从分支指令的目的地址再 Fetch 一次，但既然是同一个 Fetch Group，Fetch 分支指令的同时，已经把从分支的目的地址开始的指令取进来了，跳过中间的指令，把两段指令拼接起来，可以省下重新 Fetch 一次的时间。&lt;/li&gt;&lt;li&gt;如果 Fetch Group 内有一条 call 指令，在原来的做法里，call 指令之后的指令就被丢弃了，等到未来 return 回来的时候，再重新 Fetch 一次；专利里的做法是，在 call 的时候，把 call 指令之后的指令保存下来，当未来 return 回来的时候，不再重新 Fetch，而是取出保存下来的 call 指令之后的指令，这样就节省了重新 Fetch 一次的时间。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因此它的目的主要是解决重复 Fetch 的能耗问题，而不是分支预测错误率高的问题。&lt;/p&gt;&lt;h2 id=&#34;clustered-decode&#34;&gt;Clustered Decode&lt;a class=&#34;headerlink&#34; href=&#34;#clustered-decode&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;推荐阅读：&lt;a href=&#34;https://zhuanlan.zhihu.com/p/720301269&#34;&gt;解码簇二三事（一）：为什么？&amp;amp;加料！&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Intel 的 E 核从 Tremont 微架构开始实现了 Clustered Decode，从 Goldmont Plus 微架构的传统的 3-wide decode，变成了两条 3-wide decode 的流水线，加起来实现 6-wide decode 的效果。但是这两个流水线怎么协同工作呢？&lt;/p&gt;&lt;p&gt;Intel 在 &lt;a href=&#34;https://cdrdv2-public.intel.com/671488/248966-046A-software-optimization-manual.pdf&#34;&gt;Software Optimization Manual&lt;/a&gt; 中是这么描述的：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Tremont microarchitecture has a 32B predict pipeline that feeds dual 3-wide decode clusters capable of 6 instruction decode per cycle. Each cluster can access a banked 32KB instruction cache at 16B/cycle for a maximum of 32B/cycle.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;ICache 分成两个 bank，两个 bank 可以同时访问，每个 bank 提供 16B/cycle 的带宽，对应两个 decode pipeline。由于不同的 bank 可以用不同的地址的访问，这意味着这两次访问可以访问不同 cacheline 内的指令，这正好对应了指令流里有跳转的情况：&lt;/p&gt;&lt;p&gt;假如有一段指令（下面的指令流 A），最后一条指令会跳转到另一个地址（下面的 1: label），分支预测器在看到这个模式后，就可以让两个 decode cluster 分别处理跳转前的代码（指令流 A 内的 &lt;code&gt;dec + jne&lt;/code&gt;）和跳转后的代码（指令流 B 内的 &lt;code&gt;mov&lt;/code&gt;）：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# instruction stream A&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-2&#34;&gt;&lt;a id=&#34;__codelineno-4-2&#34; name=&#34;__codelineno-4-2&#34; href=&#34;#__codelineno-4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;dec&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-3&#34;&gt;&lt;a id=&#34;__codelineno-4-3&#34; name=&#34;__codelineno-4-3&#34; href=&#34;#__codelineno-4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-4&#34;&gt;&lt;a id=&#34;__codelineno-4-4&#34; name=&#34;__codelineno-4-4&#34; href=&#34;#__codelineno-4-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-5&#34;&gt;&lt;a id=&#34;__codelineno-4-5&#34; name=&#34;__codelineno-4-5&#34; href=&#34;#__codelineno-4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# instruction stream B&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-6&#34;&gt;&lt;a id=&#34;__codelineno-4-6&#34; name=&#34;__codelineno-4-6&#34; href=&#34;#__codelineno-4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;err&#34;&gt;1:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-7&#34;&gt;&lt;a id=&#34;__codelineno-4-7&#34; name=&#34;__codelineno-4-7&#34; href=&#34;#__codelineno-4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就在保持硬件实现比较简单的前提下，实现了比较宽的 decode width（Intel 原文：&lt;code&gt;Whereas increasing decode width in a traditional fashion for x86 requires exponential resources and triggers efficiency loss, clustering allows for x86 decode to be built with linear resources and little efficiency loss.&lt;/code&gt;）。这对于 x86 来说是比较难提升的，因为指令是变长的，如果不知道指令从哪里开始，译码将会十分复杂而且串行。可以看到 ARM 阵营的高性能处理器在 decode width 上有一定的领先，也是因为 ARMv8 是定长指令集。&lt;/p&gt;&lt;p&gt;不过，这个方法也有一个问题：假如没有跳转的分支，怎么办？如果遇到一大段没有分支的指令，似乎就只能用上 3-wide decode，那么这很容易成为一个瓶颈。Tremont 没有解决这个问题，建议用户在这种情况下插入一些 jmp 指令。&lt;/p&gt;&lt;p&gt;Intel 在 Tremont 的下一代 Gracemont 微架构中缓解了这个瓶颈。既然插入一些 jmp 指令可以解决这个问题，如果由硬件自动插入一些伪 jmp 指令，也解决了同样的问题，这就是 Gracemont 的解决思路：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Gracemont microarchitecture addresses this bottleneck by introducing a hardware load-balancer. When the hardware detects long basic blocks, additional toggle points can be created based on internal heuristics. These toggle points are added to the predictors, thus guiding the machine to toggle within the basic block.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;也就是说，硬件会检测这种长的连续指令块（例如连续 32 条指令都没有一个跳转的指令），适时插入一些 toggle point（例如插到第 24 条指令后面），也就是前面说的伪 jmp 指令，这条指令并不存在，而是在分支预测器中做标记，那么未来执行的时候，就可以利用上两条 Decode Pipeline 了：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If there are no natural toggle points (i.e., taken branches) within 32 uops, the hardware will insert a toggle point on the instruction after or corresponding to the 24th uop of the stream. As inserted toggle points consume resources in the predictor, it typically doesn&#39;t insert immediately but rather marks the location of the instruction in a table of addresses. If the same inserted toggle point is marked a second time, it allocates this location into the predictor.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;此外，为了解决变长指令集的译码问题，还有一个优化：在 ICache 中标记每条指令的边界，这样译码的时候，就可以快速寻找到指令边界，从指令边界并行地进行译码，而不用先判断第一条指令有多长，再找到第二条指令在哪，再判断第二条指令有多长，再去找第三条指令。不过这个信息怎么来呢？&lt;/p&gt;&lt;p&gt;一种方法是在 ICache 中进行预译码（Pre-decode），当 ICache 在 refill 的时候，就进行一定的译码，把指令边界标记出来。但 x86 的指令从不同位置开始译码，得到的结果是不一样的，也因为这一点 ROP 攻击在 x86 上比较容易实现。这对于预译码也带来了困难，不知道从哪个字节开始执行。&lt;/p&gt;&lt;p&gt;另一种方法是等到译码的时候，先检查一下有没有指令边界的信息，如果没有，临时耗费两个周期来进行预译码的操作，把指令边界标记出来，把结果写入 ICache 中。由于此时已经从分支预测器知道了指令执行的起始地址，所以得到的结果更加精确。这个方法在 Gracemont 中采用，叫做 On Demand Instruction Length Decoder（OD-ILD），顾名思义，它的译码结果是指令的长度，也就得到了指令的边界信息：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Instead of a second level predecode cache, the Gracemont microarchitecture introduces an “on-demand” instruction length decoder (OD-ILD). This block is typically only active when new instruction bytes are brought into the instruction cache from a miss. When this happens, two extra cycles are added to the fetch pipeline in order to generate predecode bits on the fly.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这个方法在 Intel 的专利 &lt;a href=&#34;https://patents.google.com/patent/US20220100516A1/en&#34;&gt;Circuitry and methods for power efficient generation of length markers for a variable length instruction set&lt;/a&gt; 有比较详细的描述。&lt;/p&gt;&lt;p&gt;Intel 在 Skymont 这一代 E-core 微架构在大大拓宽后端的同时，把 Decode 从两条 3-wide pipeline 改成了三条 3-wide pipeline，那么怎么把这三条 Decode pipeline 喂满，是继续延续上面的思路，只不过插入更多的 toggle point，还是有一些新的设计，让我们拭目以待。&lt;/p&gt;&lt;h2 id=&#34;btb-organization&#34;&gt;BTB Organization&lt;a class=&#34;headerlink&#34; href=&#34;#btb-organization&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;BTB 的目的是在分支预测阶段，提供哪些指令是分支指令，以及这些分支指令的目的地址的信息。那么 BTB 是怎么保存这些信息的呢？论文 &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/3613424.3623774&#34;&gt;Branch Target Buffer Organizations&lt;/a&gt; 总结了几种常见的 BTB 组织方法：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第一种方法：I-BTB，Instruction BTB，对于每个可能出现分支指令的地址，都进行一次 BTB 查询，看看这个地址是不是有分支指令。此时 BTB entry 只需要记录 tag（用于组相连的 Way 匹配）、branch type 和 branch target。以 ARMv8 为例，指令都是 4 字节，假如要对 32 字节的块进行预测，那么就要对这 32 字节的 8 个 4 字节都进行一次 BTB 查询，得到每一个位置上的分支信息。x86 的话每个字节都可能是一条分支指令，用这样的方法需要查询的次数过多。&lt;/li&gt;&lt;li&gt;第二种方法：R-BTB，Region BTB，对于每个对齐的块，记录这个块内的有限条分支的信息，例如对每个对齐到 32 字节的块，记录最多 4 条分支。此时 BTB entry 需要记录 tag（用于组相连的 Way 匹配）、每条分支的 offset、类型 和 target。这样 BTB 查询的次数会比较少，但如果一个块内分支太多，会出现存不下的情况。&lt;/li&gt;&lt;li&gt;第三种方法：B-BTB，Block BTB，记录的是从某个 PC 开始连续的一段指令，这段指令不能有多于 n 条分支，并且不能多于 m 条指令或 m 个字节。此时 BTB entry 需要记录 tag（用于组相连的 Way 匹配）、每条分支的 offset、类型 和 target。这种方法在分支很密集的情况下，会用多个 BTB entry 保存这些分支。此外也比较方便做 2 predictions/cycle：同时预测两个条件分支，如果第一个分支不跳转，那就用第二个分支的结果。但同一个分支可能重复保存在多个 BTB entry 中，因为入口 PC 可能不同。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;下面看一些例子，例如 AMD 在 &lt;a href=&#34;https://www.amd.com/content/dam/amd/en/documents/epyc-technical-docs/software-optimization-guides/56665.zip&#34;&gt;Software Optimization Guide for AMD EPYC™ 7003 Processors&lt;/a&gt; 中有如下表述：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Each BTB entry includes information for branches and their targets. Each BTBentry can hold up to two branches if the last bytes of the branches reside in the same 64-byte alignedcache line and the first branch is a conditional branch.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这和上面所说的 B-BTB 是类似的，如果两条分支在同一个 64B 对齐的 cacheline 内，并且第一条分支是条件分支，就可以保存在同一个 BTB entry 内。换句话说，一个 BTB entry 可以保存 1 到 2 条分支。&lt;/p&gt;&lt;p&gt;香山&lt;a href=&#34;https://raw.githubusercontent.com/OpenXiangShan/XiangShan-doc/main/slides/20220825-RVSC-%E9%A6%99%E5%B1%B1%E5%A4%84%E7%90%86%E5%99%A8%E5%89%8D%E7%AB%AF%E5%8F%96%E6%8C%87%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B.pdf&#34;&gt;南湖微架构&lt;/a&gt;也采用了类似的&lt;a href=&#34;https://docs.xiangshan.cc/zh-cn/latest/frontend/bp/&#34;&gt;B-BTB 设计&lt;/a&gt;，下面是香山微架构文档的截图：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../brief-into-ooo-3-ftb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;如果程序里有很多经常或者总是跳转的分支，那么上面这种 B-BTB 设计就有一些浪费，因为找不到很多条件分支 + 分支的组合，即使找到了，如果条件分支总是跳转，那么第二条分支就浪费了。为了解决这个问题，AMD 在 &lt;a href=&#34;https://www.amd.com/content/dam/amd/en/documents/processor-tech-docs/software-optimization-guides/57647.zip&#34;&gt;Software Optimization Guide for the AMD Zen4 Microarchitecture&lt;/a&gt; 中提到一种解决方案：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Each BTB entry can hold up to two branches, and two pair cases are supported:• A conditional branch followed by another branch with both branches having their last byte in thesame 64 byte aligned cacheline.• A direct branch (excluding CALLs) followed by a branch ending within the 64 byte alignedcacheline containing the target of the first branch.Predicting with BTB pairs allows two fetches to be predicted in one prediction cycle.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;可以看到第一种情况就是前面 Zen 3 的模式，一个 cacheline 内，条件分支 + 分支；第二种情况就是新的设计，它可以记录两条分支指令，第二条分支指令和第一条分支指令的目的地址在同一个 cacheline 中，也就是一个 BTB 记录两条分支指令，第一条跳到第二条，第二条再跳转，在这种情况下，可以一个周期给出两个 Fetch Bundle，也就是 2 taken predictions/cycle。论文中这种设计叫做 MB-BTB。&lt;/p&gt;&lt;p&gt;推荐阅读：&lt;a href=&#34;https://blog.eastonman.com/blog/2023/12/modern-branch-prediction-from-academy-to-industry/&#34;&gt;现代分支预测：从学术界到工业界&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;instruction-prefetcher&#34;&gt;Instruction Prefetcher&lt;a class=&#34;headerlink&#34; href=&#34;#instruction-prefetcher&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;随着程序的指令 footprint 增大，除了增大 L1 ICache 容量，也需要实现合理的 Instruction Prefetcher，把指令预取到 L1 ICache 当中。对于 Decoupled Frontend，目前比较常见的方法是使用 Fetch Directed Intruction Prefetching(FDIP)，利用 Decoupled Frontend 里分支预测可以在取指之前跑得更远的特性，使用分支预测的地址来进行预取。对于 Coupled Frontend，预测和取指紧密相连，FDIP 的方法就不好用了，需要寻找其他的方法。&lt;/p&gt;&lt;p&gt;一种方法是 Call Graph Prefetching(CGP)，来自论文 &lt;a href=&#34;https://ieeexplore.ieee.org/abstract/document/903270&#34;&gt;Call graph prefetching for database applications&lt;/a&gt;。从名字也可以看出，它针对的是数据库场景，而这个场景下，代码的规模很大，更加容易出现 ICache Miss。&lt;/p&gt;&lt;p&gt;它的核心思路是，维护一个 Call Graph History Cache(CGHC) 来记录程序执行的调用图，根据历史信息来预取未来可能会执行的函数的指令，这针对的是频繁的函数调用；针对函数体比较大的情况，函数调用的比例比较小，利用 Next N-Line Prefetching，也就是在 miss 的时候把连续的几条缓存行预取进来。&lt;/p&gt;&lt;p&gt;那么这个 Call Graph History Cache 是怎么维护函数调用的呢？它记录了两个 Array：Tag Array 和 Data Array。Tag Array 记录的是函数的入口地址，以及在这个函数内执行到了第几个函数（Index）；Data Array 则记录了被该函数调用的函数的入口地址，最多八个。例如函数 A 会调用函数 B 和 C，那么 CGHC 会保存这么一条记录：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Tag Array：记录函数 A 的入口地址以及 Index，Index 初始化为 1&lt;/li&gt;&lt;li&gt;Data Array：记录函数 B 和 C 的地址&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;当前端通过分支预测，预测到要执行函数 A，那么就通过 A 的地址去查询 Tag Array，找到匹配，并且发现其 Index 等于 1；那么接着用 Index 访问 Data Array，取出第一个函数的地址，也就是 B，那就预取 B。当函数 B 被调用的时候，更新 Index 为 2，表示函数 B 已经被调用，下一个要被调用的是 C。当函数 B 返回的时候，用 Index 访问 Data Array，得到函数 C 的地址，预取 C。如果说 Call Graph 是个图，那么 Tag Array 和 Data Array 就组成了邻接表。&lt;/p&gt;&lt;p&gt;苹果的专利 &lt;a href=&#34;https://patentimages.storage.googleapis.com/4d/f2/31/acf69ce6f289ff/US10642618.pdf&#34;&gt;Callgraph Signature Prefetch&lt;/a&gt; 使用了类似的思想，不过在维护 Call Graph 的方式上不同：上面的论文是通过显式的方法记录 Call Graph，每个函数调用了哪些函数，而专利中，参考了分支预测记录分支历史的方法，把最近的 call 和 return 地址压缩记录下来，通过 hash 得到 Signature，再用 Signature 去查询 Prefetch Table，相当于在拿最近若干次调用和返回的历史来预测下一次 call 的地址。Prefetch Table 的每个 Entry 记录了这些信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Signature：记录了这个 Entry 对应的 Signature，即最近函数调用的压缩表示；实际可能实现为全相连，也可能是组相连，通过 tag 匹配&lt;/li&gt;&lt;li&gt;Address：要预取的指令地址；专利中还谈到了 Address 的压缩，即把 Address 的高位单独存放在一个 Address Table 中，那么 Prefetch Table 的 Entry 记录了 Address Table 的 Index 以及低位 Offset，需要预取时，再从 Address Table 读取高位，拼接起来&lt;/li&gt;&lt;li&gt;Counter：给从 Address 开始的若干个缓存行维护 Saturating Counter，用来判断是否要进行预取&lt;/li&gt;&lt;li&gt;Order：用来维护 Replacement Policy 所需要的信息&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;那么前端要做的事情就是，根据分支预测去更新 Signature，根据 Signature 查询 Prefetch Table，如果有命中，根据 Counter 的大小决定是否要预取，从 Address 开始预取哪些数据。&lt;/p&gt;</description><link>https://jia.je/hardware/2024/09/12/brief-into-ooo-3/</link> <pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/09/12/brief-into-ooo-3/</guid> </item> <item> <title>三星 Exynos CPU 微架构学习笔记</title> <category>arm</category> <category>cpu</category> <category>exynos</category> <category>hardware</category> <category>microarchitecture</category> <category>samsung</category> <description>&lt;h1 id=&#34;三星-exynos-cpu-微架构学习笔记&#34;&gt;三星 Exynos CPU 微架构学习笔记&lt;a class=&#34;headerlink&#34; href=&#34;#三星-exynos-cpu-微架构学习笔记&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ISCA 2020 的一篇文章 &lt;a href=&#34;https://ieeexplore.ieee.org/document/9138988&#34;&gt;Evolution of the Samsung Exynos CPU Microarchitecture&lt;/a&gt; 非常详细地解析了三星 Exynos 自研 CPU 微架构的演进历史。本文是对这篇论文的学习和整理的笔记。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;分支预测器&#34;&gt;分支预测器&lt;a class=&#34;headerlink&#34; href=&#34;#分支预测器&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;文章 Chapter IV 讲述了 Exynos 系列微架构的分支预测器实现。Exynos 微架构用的是 &lt;a href=&#34;https://ieeexplore.ieee.org/document/903263&#34;&gt;Scaled Hashed Perceptron&lt;/a&gt; 分支方向预测器，这个分支预测器的提出者 Daniel A. Jiménez 也在这篇论文的作者列表中。现在采用基于 Perceptron 的分支预测器的处理器不多，AMD 的 Zen 1 用了，Zen 2 是 Perceptron 加 TAGE，Zen 3 以后就只有 TAGE 了。&lt;/p&gt;&lt;p&gt;除了方向预测器，还需要有 BTB 来识别分支以及记录分支的目的地址。为了性能，每个周期都要预测至少一个分支，所以一般会有一个 0-bubble 的 BTB，在这里叫 uBTB（microBTB，用 u 代替希腊字母 μ）。但也因为时序的限制，不会做的太大。为了支持有更大的容量，通常还会有更大的，延迟也更长的 BTB，在这里叫 mBTB（Main BTB），最大的是 L2 BTB，还有后面会讲到处理边界情况的 vBTB。同理，分支预测器也有容量和延迟的双重考虑，设置不同大小和容量的分支预测器，也可能会分多级，和 0-bubble uBTB 配对的 LHP（Local History Perception）以及 1-2 bubble mBTB 配对的完整的 SHP（Scaled Hashed Perception）。此外还有 RAS（Return Address Stack）负责函数返回地址的预测。&lt;/p&gt;&lt;p&gt;首先从 Exynos 最早的分支预测器设计开始。一开始设计的时候，就考虑到要支持 2 prediction/clock 的场景，前提是第一个分支是 not taken 的。例如有两条分支指令，第一条是条件分支指令，如果第一条分支 taken，那就以第一条分支的结果为准；如果第一条分支 not taken，那就应该以第二条分支的结果为准。这样可以在比较低的开销的前提下，一个周期预测两条分支指令，提高分支预测的性能，如果不做这个优化的话，需要先预测第一条分支，预测完，再去预测第二条分支。论文中指出，对于这种需要预测 2 个分支的场景，有 60% 的情况是第一条分支 taken，24% 情况是第一条分支 not taken 并且第二条分支 taken，两个都 not taken 的情况占 16%。那么后 40% 的情况就可以得到性能提升。这个优化还是挺常见的，例如&lt;a href=&#34;https://raw.githubusercontent.com/OpenXiangShan/XiangShan-doc/main/slides/20220825-RVSC-%E9%A6%99%E5%B1%B1%E5%A4%84%E7%90%86%E5%99%A8%E5%89%8D%E7%AB%AF%E5%8F%96%E6%8C%87%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B.pdf&#34;&gt;香山南湖架构&lt;/a&gt;做了这个优化，而且虽然可以 2 predictions/cycle，但实际上只有一个 Fetch Packet，也最多 1 taken prediction/cycle。&lt;/p&gt;&lt;p&gt;SHP，也就是那个最大的 Perceptron 预测器，包含了 8 个表，每个表有 1024 个权重，每个 BTB 表项还给每个分支记录了一个 bias。预测的时候，根据 GHR（根据分支 taken/not taken 历史）和 PHR（根据 taken branch 地址）以及分支的 PC 经过哈希，得到 table 的 index，根据 index 去访问权重。把从 8 个表里读出来的权重加起来，再加上 bias 的两倍，得到最早的计算结果，如果是非负数，则预测为 taken；负数则预测为 not taken。&lt;/p&gt;&lt;p&gt;知道分支的实际跳转方向后，如果预测错误了，或者预测对了，但是计算结果太接近 0，就需要更新 weight。更新时，会更新参与到计算的来自各个表的 weight，如果是 taken，那就增加 weight；如果是 not taken，就减少 weight。Exynos M1 采用了 165 位的 GHR，也就是最近 165 条条件分支的跳转方向，以及 80 位的 PHR，每个 taken branch 会向 PHR 贡献 3 个 bit（B[4:2]），但是没说移位多少。这样就构成了一个 Perceptron 预测器。&lt;/p&gt;&lt;p&gt;特别地，针对总是跳转的分支，例如无条件跳转分支，或者总是跳转的条件分支，就不用更新 SHP 了，他们只需要在 BTB 中标记一下即可，避免污染 SHP，干扰其他分支的预测。类似的思路也挺常见的，AMD 的做法是，对于从来没有跳转过的条件分支指令，不分配 BTB 表项，并且预测为不跳转；当条件分支了跳转第一次，那就会在 BTB 中分配表项，标记为 always taken，表示预测为总是跳转；当条件分支跳转和不跳转各至少一次，才启用分支方向预测器。&lt;/p&gt;&lt;p&gt;接下来是 BTB。mBTB，也就是上面提到的有 1-2 bubble 的略微大一些的 BTB，可以给 128B 大小的 cacheline 保存 8 条分支指令。统计数据表示，平均每 5 条指令有一条是分支指令，那么 128B 在 4 字节定长指令的情况下，可以存 32 条指令，估算得到大约有 6-7 条分支指令，所以设计了可以存 8 条。但也有可能分支密度很高，128B 全是分支指令，那就会有 32 条分支指令了。&lt;/p&gt;&lt;p&gt;为了解决这个问题，设计了 vBTB（virtual indexed BTB），可以把 128B 的 cacheline 里超过 8 个 branch 的多余部分保存下来，当然了，会有额外的开销。&lt;/p&gt;&lt;p&gt;比较特别的是，没有设计单独的例如 ITTAGE 那样的 Indirect Predictor，而是采用了叫做 VPC（Virtual PC）的方案，它的思路是，复用方向预测器和 BTB 的能力，把一条 Indirect Branch 映射为多条 Conditional Branch，每个 Conditional Branch 的 Target 对应一个可能的 Indirect Branch Target，这个 Target 就存在 BTB 当中。预测的时候，按照顺序遍历每个虚拟的 Conditional Branch，如果预测为 taken，那就跳转到这个虚拟的分支的目的地址；如果预测为 not taken，那就遍历到下一个虚拟的分支。如果所有的虚拟条件分支都被预测为不跳转，那就需要等到后端计算出实际的目的地址，再跳转。对于每个 Indirect Branch，这样的虚拟条件分支最多生成 16 个。&lt;/p&gt;&lt;p&gt;这些虚拟的条件分支既然要利用 BTB 的空间，自然也会抢占 128B cacheline 最多 8 条分支的限制，多余的分支或者 Indirect Branch 生成的虚拟条件分支也会溢出到 vBTB 内。这种设计还是第一次见。&lt;/p&gt;&lt;p&gt;由于这个初始的分支预测器设计只有一个 main BTB，需要 2 bubble 才能出一个 taken branch，在 taken branch 很密集的时候，就需要三个周期一个 taken branch 了，这性能肯定不够好。所以 Exynos M1 引入了 0-bubble 的 uBTB，容量比较小，好处是快，一般这种 0-bubble BTB 也可以叫做 Next Line Predictor，预测下一个周期的 Fetch 地址。&lt;/p&gt;&lt;p&gt;为了实现 0-bubble 的 uBTB，Exynos M1 用了一个基于图的结构来记录分支之间的跳转关系，配合一个记录分支局部历史的 Hashed Perceptron 算法来预测方向。这个预测算法也是第一次见，在三星的专利 &lt;a href=&#34;https://patents.google.com/patent/US20170068539A1/en&#34;&gt;High performance zero bubble conditional branch prediction using micro branch target buffer &lt;/a&gt; 中提出，大题思路其实就是把基本块学习出来，找到分支之间 taken 和 not taken 的关系，以每个分支为一个结点，如果一个分支 taken 以后会到另一个分支，那就在这两个分支对应的结点之间连一条 taken 的有向边，类似地，not taken 也会连 not taken 的有向边。&lt;/p&gt;&lt;p&gt;有了图以后，就可以直接从图中知道下一个会到达的分支在哪里，即使这个分支可能距离很远；而常规的 BTB 设计里，则是拿到地址以后，用地址去寻找匹配的 BTB entry，这个过程中可能会扫描到一些不存在分支指令的代码块。这里也支持前面说的连续两个分支同时预测的情况，在同一个周期内预测两个分支，如果第一个分支不跳，就用第二个分支的结果，在树上转移。为了省电，当 uBTB 预测准确率较高，图记录了最近执行的所有分支，那么 uBTB 就可以火力全开，保持 0-bubble 的预测，这个预测在后面的流水线中会被 mBTB 和 SHP 进行进一步的确认。如果准确率特别高，认为 mBTB 和 SHP 大概率也会得到相同的预测结果，就会进一步停止 mBTB 和 SHP 的使用，降低功耗，这时候就要靠后端的 Branch Unit 来检查预测是否正确。&lt;/p&gt;&lt;p&gt;这就是 Exynos M1 和 M2 的分支预测器设计。上面的专利&lt;a href=&#34;https://patents.google.com/patent/US20170068539A1/en&#34;&gt;High performance zero bubble conditional branch prediction using micro branch target buffer&lt;/a&gt;还给出了前端的流水线各级的功能：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../samsung-exynos-cpu-frontend-1.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;这个图中没有绘制 uBTB 内部的结构，uBTB 负责给出初始的预测，到 B1 阶段，从 B1 开始，会经过两条流水线，上面的流水线是 mBTB + SHP 负责更精确的预测，下面的流水线是查询 ITLB + 读取 ICache。上面说 2-bubble 的 mBTB，实际上就是从 B1 得到 Fetch Window，B2 读取 mBTB 和 SHP 的权重，等到 B3 完成之后才可以计算出结果，判断是 taken 还是 not taken，如果预测的结果和 uBTB 预测不一致，就需要刷流水，从 B1 重新开始：B1 B2 B3 B1 B2 B3，三个周期一个 taken branch。&lt;/p&gt;&lt;p&gt;图中也可以看到 vBTB 在 B4，所以如果一个 cacheline 有超过 8 个 branch，那么在预测这些溢出到 vBTB 中的分支时，需要额外的两个周期：B1 B2 B3 B4 B3，五个周期一个 taken branch。&lt;/p&gt;&lt;p&gt;Exynos M3 继续改进了分支预测器。首先是 uBTB 的图的容量翻倍，添加了针对无条件分支的容量。为了加速总是跳转的条件分支指令，当 mBTB 检测到总是跳转的条件分支指令时，提前一个周期得到结果，也就是上图中 B3 到 B1 的连线，没有经过权重计算，直接刷 B1：B1 B2 B1 B2，两个周期一个 taken branch，1-bubble，在论文里叫做 1AT（1-bubble Always Taken）。Exynos M3 还翻倍了 SHP 的行的个数，也翻倍了 L2 BTB 容量。&lt;/p&gt;&lt;p&gt;Exynos M4 继续翻倍了 L2 BTB 容量，减少了 L2 BTB refill 到 mBTB 的延迟，带宽翻倍。这个优化主要是针对分支比较多，mBTB 存不下的程序。&lt;/p&gt;&lt;p&gt;Exynos M5 增加了 Empty Line Optimization 优化：检测没有分支的缓存行，如果确认缓存行没有分支，那就不用预测里面的分支了，可以节省功耗。&lt;/p&gt;&lt;p&gt;为了进一步优化 taken branch 的吞吐，在 mBTB 中记录分支的目的地址时，不仅记录在分支本身所在的 mBTB entry 中，还要记录在这条分支的前序分支的 mBTB entry 中：例如 A 跳转到 B，B 跳转到 C，经典的实现是用 A 的地址找到 A 的 BTB entry，entry 中记录了 A 目的地址是 B，接着用 B 的地址找到 B 的 BTB entry，entry 中记录了 B 的目的地址是 C；而 Exynos M5 的设计是，C 的目的地址，不仅要记录在 B 的 BTB entry 中，还要记录在 A 的 BTB entry 中。不过这里要求 B 的跳转是 always-taken 或者 often-taken，因为并没有对第二条分支做预测，而是预测它一定会跳。通过这样的方法，可以在 2-bubble 的预测器的实现下，实现 1 taken branch/cycle 的吞吐，等效于一个 0-bubble 的预测器。下面是论文中对 mBTB 从 2-bubble 到 1-bubble 最终到 0-bubble 的变化的对比图：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../samsung-exynos-cpu-mbtb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;最左边的 SHP 2-bubble 就是最初的实现，它需要在 B3 得到分支是 taken 还是 not taken 的信息，如果和之前预测的不一样，那就需要 flush 掉流水线，B1 重新从正确的地址开始，然后重复这个过程，由于每次都需要到 B3 才能得到正确的地址，所以三个周期一个 taken branch。&lt;/p&gt;&lt;p&gt;中间是改进的 1AT 1-bubble 实现，它在 mBTB 中记录了这个分支是否是 Always Taken。因为 mBTB 在 B2 中读取，所以这个信息在 B2 就可以得知，例如图中 A 分支到达 B2 时，检测到它是 Always Taken，下个周期的 B1 直接就从正确的地址 B 开始，同理 B 到达 B2 时，又发现它是 Always Taken，下一个周期的 B1 又从 C 开始，所以两周期一个 taken branch，前提是分支是 Always Taken，通过避免分支预测来减少一个周期的 bubble。&lt;/p&gt;&lt;p&gt;右边是最后的 ZAT/ZOT 0-bubble 实现，它在 mBTB 中记录了后续两个分支的地址，例如 X 在 mBTB 中记录了 A 和 B 的地址。当 B3 发现 X 要跳转的时候，刷流水线，在接下来的两个周期里分别给 B1 提供了 A 和 B 的地址。当 A 到达 B2 时，A 在 mBTB 里记录了 B 和 C 的地址，于是把 C 的地址转发到下一个周期的 B1，依此类推，B2 的 B 得到了 D 的地址，B2 的 C 得到了 E 的地址，这样实现了每个周期一个 taken branch。通过记录两跳的地址和避免分支预测（把 Always Taken 和 Often Taken 都预测为 Taken），两个周期给出两个地址，减少两个周期的 bubble。&lt;/p&gt;&lt;p&gt;这时候就相当于有两个 0-bubble 预测器了，mBTB 有 0-bubble 能力，uBTB 也有，所以 Exynos M5 减少了 uBTB 的容量，换取更大的 mBTB 的预测器容量：SHP 的表数量翻倍，GHR 历史长度增加。&lt;/p&gt;&lt;p&gt;虽然 mBTB 在特定情况下可以做到 0-bubble，但是如果总是需要纠正预测错误，就会回退到三个周期一条分支的性能。为了解决这个问题，Exynos M5 引入了 Mispredict Recovery Buffer（MRB）：针对比较难预测的分支，记录它后续最可能执行的三次 fetch 的地址，如果命中了 MRB，那就直接从 MRB 中按顺序用三个周期把这三次 fetch 的地址放到 B1，然后流水线去验证这三个 fetch 地址是否正确，节省了重复的 B3 到 B1 的重定向时间。这个思路有点像大模型的推测生成：用比较短的时间预测（在这里是直接用 MRB 记下来了）出一个本来是串行的过程的结果，然后再用流水线或者并行的方式去验证结果是否正确。利用的性质都是，串行生成慢，但是验证结果却比较快。&lt;/p&gt;&lt;p&gt;Exynos M6 扩大了 mBTB 容量，针对间接跳转指令做了更多的优化，主要是考虑应用程序会出现一个间接跳转会跳转到上百个不同的目的地址这种模式，之前的 VPC 方法是 O(n) 的，n 是可能的目的地址的个数，n 小的时候比较好，n 大了就很慢了。&lt;/p&gt;&lt;p&gt;Exynos M6 的办法是，针对这些目的地址特别多的间接跳转指令，设计单独的存储，不去占用 vBTB 的空间，这个空间是 Indirect target storage，采用 4 路组相连，一共 256 个 set。经常出现的目的地址还是和之前一样，放在 mBTB 中，但是对于剩下的目的地址，则是放到 Indirect target storage 中，根据最近的 indirect branch target 计算出 Index 和 Tag，去 Indirect target storage 中寻找，其实这个就和 ITTAGE 里的一个 table 有点类似了。&lt;/p&gt;&lt;p&gt;最后论文总结了 Exynos 从 M1 到 M6 的各级分支预测器的存储面积开销，基本每一代都有所增加，既有 MPKI 的减少（M6 相比 M1 在 SPECint2006 上 MPKI 减少 25.6%），又有预测性能的提升。&lt;/p&gt;&lt;h2 id=&#34;分支预测安全&#34;&gt;分支预测安全&lt;a class=&#34;headerlink&#34; href=&#34;#分支预测安全&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;有意思的，论文也提到了分支预测的安全问题，主要是避免跨上下文的分支预测器注入攻击。核心思路是，给每个上下文生成一个随机数（&lt;code&gt;CONTEXT_HASH&lt;/code&gt;），然后把随机数异或到 BTB 保存的目的地址里面去，在从 BTB 读出来目的地址使用之前，要再次异或同一个随机数。那么如果是读取了来自同一个上下文的 BTB entry，通过两次异或可以得到正确的原始数据；如果是读取了来自不同上下文的 BTB entry，由于随机数不同，最后会得到随机的数据。当然了，前提是这些随机数不能被攻击者得到，对软件是不可见的。&lt;/p&gt;&lt;h2 id=&#34;uop-cache&#34;&gt;uOP Cache&lt;a class=&#34;headerlink&#34; href=&#34;#uop-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Exynos M1 到 M4 没有 uOP Cache，所有指令都需要经过取指和译码，得到 uOP。从 Exynos M5 开始引入了 uOP Cache，会缓存译码后的 uOP。Exynos M5 的 uOP Cache 最多可以保存 384 个 uOP，每个 entry 可以保存 6 个 uOP，一个周期提供一个 entry。一个 uOP Cache Entry 中的 uOP 来自连续的指令，以分支指令作为结尾。下面是论文给出的一个例子：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../samsung-exynos-cpu-uop.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;这段指令的入口在第一个缓存行的最后，从 I0 开始，执行 I0 I1 I2 I3，I3 是一条分支指令，因此 uOP 的 entry 到此结束，记录了 I0-I3 译码后的 uOP，这里 I2 指令被译码成了两条 uOP，于是这个 entry 就是 U0 U1 U2A U2B U3 这五个 uOP。I3 跳转到了 I4，I4 紧接着又是一条分支指令 I5，所以 uOP 的 entry 到这里结束，记录 I4 和 I5 译码后的 uOP：U4 和 U5。后面依此类推。&lt;/p&gt;&lt;p&gt;那么什么时候 uOP Cache 启用呢？论文中提到了一个状态机：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;FilterMode：当 uBTB 在学习分支之间的关系时，也在检查这段代码能否放到 uOP Cache 里，如果可以的话，转移到 BuildMode&lt;/li&gt;&lt;li&gt;BuildMode：开始把译码得到的 uOP 保存到 uOP Cache 内部，同时和 uBTB 学习到的图进行比对，当图中大部分的边对应的指令都已经被 uOP Cache 学习到，说明 uOP Cache 已经捕捉了大部分需要的指令，进入 FetchMode&lt;/li&gt;&lt;li&gt;FetchMode：指令缓存和译码部件被关闭，节省功耗，所有指令都从 uOP Cache 提供；此时如果 uBTB 的准确率很高，mBTB 也可以关掉，进一步节省功耗。当 uOP Cache 命中率降低，切换回 FilterMode&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这种设计还是比较常见的，uOP Cache 和 Decoder 不会同时工作，而是二选一，根据 uOP Cache 的命中率来决定谁来工作。然后进一步为了避免 uOP Cache 填充的功耗，如果 uBTB 发现这些代码放不下 uOP Cache 中，就不填充 uOP Cache 了，这就是 FilterMode 的设计的意义。&lt;/p&gt;&lt;h2 id=&#34;l1-数据预取&#34;&gt;L1 数据预取&lt;a class=&#34;headerlink&#34; href=&#34;#l1-数据预取&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;L1 数据预取器会检测不同的 stride，在虚拟地址上，跟踪访存的历史，为了方便识别访存的序列，由于访存是可以乱序执行的，它会进行重排，使得访存模式的识别看到就是程序的顺序。为了验证预取是否正确，在预取的同时，也会把这些预取的地址记录下来，放在 Confirmation Queue 中，和未来的 load 地址做比对。如果预取器和未来的 load 匹配的比例很高，说明预取器很准确，可以继续让他预取。如果准确率较低，为了避免浪费内存带宽，就会停止预取。&lt;/p&gt;&lt;p&gt;除了 strided 访存模式，Exynos M3 还引入了 Spatial Memory Stream 预取器，它会跟踪一个区间的第一次 cache miss 和后续的 miss，当再次遇到第一次 cache miss 的地址时，预取后续可能会出现 miss 的地址。&lt;/p&gt;&lt;h2 id=&#34;l2l3-缓存&#34;&gt;L2/L3 缓存&lt;a class=&#34;headerlink&#34; href=&#34;#l2l3-缓存&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;为了减少数据的重复，L3 缓存和 L1/L2 是 exclusive 的关系，数据是互斥的，要么存在 L3 里，要么存在 L1/L2 里，要么都不存。&lt;/p&gt;&lt;p&gt;Exynos M4 针对 L2 缓存引入了 Buddy Prefetcher：如果一个缓存行缺失了，那就把它相邻的下一个缓存行也预取进来。&lt;/p&gt;&lt;h2 id=&#34;访存延迟&#34;&gt;访存延迟&lt;a class=&#34;headerlink&#34; href=&#34;#访存延迟&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Exynos 系列的 load to use latency 通常情况下是 4 cycle，但针对 load to load 的情况，也就是前一个 load 的结果，作为后一个 load 的基地址的情况，从 Exynos M4 开始可以做到 3 cycle 的 load to use latency，这在论文中叫做 cascading load。这个 4 cycle 减到 3 cycle 的特性在苹果，高通和 Intel（E-core）的 CPU 中都有看到。&lt;/p&gt;&lt;h2 id=&#34;小结&#34;&gt;小结&lt;a class=&#34;headerlink&#34; href=&#34;#小结&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;虽然 Exynos 系列微架构的芯片没有新的演进了，但是也非常感谢这些作者慷慨地介绍了他们这些年优化微架构的努力，提供了很多有价值的信息。从作者信息也可以看到，当时开发 Exynos 的团队成员，在团队解散以后，去的基本也是有自研核的公司：Sifive，Centaur，ARM，AMD，Nuvia。&lt;/p&gt;&lt;p&gt;由于本人对 DCache 以及 Prefetch 部分缺乏深入了解，所以这部分的介绍比较少，有兴趣的读者建议参考原文。&lt;/p&gt;</description><link>https://jia.je/hardware/2024/09/10/samsung-exynos-cpu/</link> <pubDate>Tue, 10 Sep 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/09/10/samsung-exynos-cpu/</guid> </item> <item> <title>内存模型和内存序</title> <category>acquire</category> <category>arm64</category> <category>cpu</category> <category>hardware</category> <category>lock</category> <category>mca</category> <category>ordering</category> <category>release</category> <category>tso</category> <category>x86</category> <description>&lt;h1 id=&#34;内存模型和内存序&#34;&gt;内存模型和内存序&lt;a class=&#34;headerlink&#34; href=&#34;#内存模型和内存序&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;内存模型和内存序是一个贯穿软硬件实现的概念，你可以在 CPU 微架构，总线，到汇编指令，编译器和编程语言中看到它们。本文主要来探讨这些问题。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;内存模型&#34;&gt;内存模型&lt;a class=&#34;headerlink&#34; href=&#34;#内存模型&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;对于处理器核心来说，如何实现访存指令，对性能的影响是十分显著的。最基础的硬件实现方法，就是串行地完成每一条 Load 和 Store 指令，每一条访存指令执行完，才能开始执行下一条访存指令。但如果正在执行的访存指令 A 遇到了缓存缺失，需要等待缓存的回填，由于硬件只实现了串行执行，在 A 之后未来要执行的访存指令 B 又必须等待 A 的完成，耗费的时间就会比较长。&lt;/p&gt;&lt;p&gt;但很多时候，B 指令并不依赖 A 指令，可能访问的是不同的内存地址，可能 B 要访问的数据就在缓存中，如果能够在 A 等待缓存回填的时间同时执行 B，性能可以得到提升。但并非所有的 B 都可以提前执行的，比如&lt;/p&gt;&lt;ul&gt;&lt;li&gt;从核内的视角来看，A 和 B 访问的内存范围有重合，那么它们的执行顺序就很重要：&lt;ul&gt;&lt;li&gt;如果 A 是 Store 指令，B 是 Load 指令，B 在 A 之前执行，B 提早从 Cache 读取数据，得到的是 A 写入之前的结果，数据就错了。不过好在这可以通过 Store to Load Forwarding 解决，把 A 要写入的数据以及 Cache 中的数据拼接出，可以得到正确的 B 要读取的数据。&lt;/li&gt;&lt;li&gt;如果 A 是 Load 指令，B 是 Store 指令，B 在 A 之前执行，提早向 Cache 写入数据，那么 A 都出来的就是 B 写入之后的结果，数据就错了。&lt;/li&gt;&lt;li&gt;如果 A 和 B 都是 Store 指令，B 在 A 之前执行，那么最终内存中的值是 A 覆盖了 B，而不是预期的 B 覆盖了 A&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;从核外的视角来看，假如目前正在一个被锁保护的临界区，A 是对被保护的数据的修改，B 是释放锁，如果 B 在 A 之前执行，就会导致锁释放了，但还在修改被保护的数据的情况。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可能还有其他类似的场景，简单总结一下，决定访存的是否乱序，如何乱序，需要考虑：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;从核内的视角来看，乱序执行不能修改程序的一样。实现乱序的性能，又要表现出类似串行的行为&lt;/li&gt;&lt;li&gt;从核间的视角来看，有一些指令不能乱序，否则会影响核间同步互斥的正确性&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;除了 CPU 核之间，如果一些外设（例如显卡，网卡）也要访问内存，那么 CPU 和外设之间，也可能有类似的顺序问题。&lt;/p&gt;&lt;p&gt;因此就需要明确规定硬件乱序执行的模式和边界，使得软件开发者一方面可以根据需要在软件中插入指令来阻止不期望发生的乱序，从而保证正确性；另一方面在大多数时间，硬件提供的乱序可以在保证正确性的情况下，提供更好的性能。&lt;/p&gt;&lt;p&gt;但这个模式和边界不是一天建成的。硬件厂商希望能够不断推出性能更好的新处理器，这些新处理器可能为了性能去做更多的优化，这些优化可能会涉及到更多的乱序情况，这时候兼容性就成了一个问题：旧软件假设了硬件不会做某种乱序，结果新硬件做了，那旧软件在新硬件上就会出现兼容性问题。于是软件开发者很希望有一个标准或者说模型出来，硬件保证按照这个模型实现乱序，软件按照这个模型来开发，这样软件硬件分别发展，也不会出错。&lt;/p&gt;&lt;p&gt;但硬件厂商对这个事情也扭扭捏捏，生怕今天做了什么规定，明天发现这个规定会浪费了一个巨大的性能提升机会，但竞争对手没有做这个承诺，竞争对手就得到了优势。但是不做承诺呢，软件生态又成了一个问题：在今年的处理器上写代码，只能保证在今年的处理器上可以正常跑，明年出了新的处理器，出现了不兼容的地方，又要重新改一遍，这会把软件开发者给赶跑的。在这种别扭的心态下，很长时间以来，硬件厂商对此都写的有些语焉不详，相关的争论在零几年都一直能看到。&lt;/p&gt;&lt;p&gt;不过好在现在是 2024 年，大多数处理器的内存模型和内存序都已经比较明确，虽然很多时候硬件厂商做的是比较宽松的保证，实际实现的时候会更加严格，例如声称 A 和 B 是允许乱序执行的，但实际上目前的所有硬件都没有这么做，软件也只能按照最保守的方式来做假设。但有总比没有好，可能也是硬件厂商研究了很多年，没发现什么可以继续优化的余地了，不如死了心把规矩给定下来，把软件生态给打好。&lt;/p&gt;&lt;p&gt;现在开始讲实际的内存模型和内存序。为什么这两个概念总是放在一起讲？什么是模型？什么是序？&lt;/p&gt;&lt;p&gt;CPU 核心的实现是很复杂的，不同代的 CPU 架构的实现也有很多不同，屏蔽这些微架构的细节，把它们对软件暴露出来的行为，抽象出一个统一的硬件模型，这个模型展现了硬件针对内存访问的工作方式，就是内存模型。根据内存模型，定义哪些情况下，哪些指令可以和哪些指令乱序，为了避免乱序，又可以添加哪些指令来避免乱序，这就是内存序。通过对硬件的建模，把复杂的微架构实现剥离出来，得到一个抽象的模型，以分布式系统的理论去研究它的行为。&lt;/p&gt;&lt;h3 id=&#34;sc&#34;&gt;SC&lt;a class=&#34;headerlink&#34; href=&#34;#sc&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;下面来看一个简单的内存模型的例子：假如 CPU 不做任何的乱序，严格按照指令的顺序进行访存；从多核的角度来看，来自不同核心的访存都会到达内存子系统，每个访存都是原子的。那么最后在内存子系统上进行的访存序列，就是各个核心的程序的访存序列交错的结果。举个例子：&lt;/p&gt;&lt;p&gt;A 核心上的程序要进行 Read a（表示读取 a 地址的数据，下面简称 Ra）和 Write a 操作（表示把数据写入 a 地址，下面简称 Wa）；B 核心上的程序要进行 Read b 和 Write b 操作。由于每个核心内部不会对访存进行重排，所以这些访存操作在内存子系统上执行时，会保持它在程序里的执行顺序，这个叫做 program order。由于不同核心发起访存的时间不同，最后在内存子系统上执行的访存可能有这些情况：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ra Wa Rb Wb&lt;/li&gt;&lt;li&gt;Ra Rb Wa Wb&lt;/li&gt;&lt;li&gt;Ra Rb Wb Wa&lt;/li&gt;&lt;li&gt;Rb Ra Wa Wb&lt;/li&gt;&lt;li&gt;Rb Ra Wb Wa&lt;/li&gt;&lt;li&gt;Rb Wb Ra Wa&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可以看到，可能是先完成所有 A 核心上的访存，再完成 B 核心上的访存（Ra Wa Rb Wb），也可能反过来，先完成 B 核心上的访存，再完成 A 核心上的访存（Rb Wb Ra Wa），也可能两个核心的访存交错进行（例如 Ra Rb Wa Wb）。它们都满足一个条件：Ra 一定在 Wa 之前，Rb 一定在 Wb 之前，也就是说，Ra 一定在 Wa 之前的这种 program order 在内存子系统上的执行顺序 memory order 里也一定会保证。&lt;/p&gt;&lt;p&gt;这种内存模型就是 Sequential Consistency (简称 SC)，它的性质就是遵循 program order，从每个核心来看，代码怎么写的就怎么跑，不做重排，而来自不同核心的访存之间的顺序不做要求。下面是 SC 模型的图示（图源 &lt;a href=&#34;https://www.cl.cam.ac.uk/~pes20/ppc-supplemental/test7.pdf&#34;&gt;A Tutorial Introduction to the ARM and POWER Relaxed Memory Model&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../memory_model_and_memory_ordering_sc.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;根据这个性质，我们就可以分析软件的行为，判断它是否可能出现特定的结果。下面举一个例子：&lt;/p&gt;&lt;p&gt;假如有两个线程，A 线程要给 B 线程传输数据，两个线程分别跑在两个核心上。为了传输数据，A 把数据放在内存地址 x 里，为了标记数据准备完成，另外在内存地址 y 放了一个标记，0 表示数据还没准备好，1 表示数据准备好了。那么 A 要传输数据的时候，要做的事情就是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;初始化的时候，往 y 地址写入 0&lt;/li&gt;&lt;li&gt;要传输数据时，先往 x 地址写入要传输的数据，再往 y 地址写入 1&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;另一边，B 线程要等待 A 线程发送的数据，那么它应该：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;读取 y 地址的内容，检查是否为 1&lt;/li&gt;&lt;li&gt;如果是 1，说明传输的数据已经在 x 地址中了，再从 x 地址读取要传输的数据&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;现在问题来了：以上的写法，它可以正常工作吗？我当然可以去各个硬件平台上都测试测试，看看到底能不能工作。但是既然我们已经知道了硬件是按照一定的内存模型实现的，那我们可以尝试，是否可以从内存模型的角度来判断它到底是否可行。&lt;/p&gt;&lt;p&gt;这里我们采用反证法：如果上面的传输数据方法不可行，会出现什么样的结果？那就是 B 读取到了错误的数据，也就是 B 从 x 地址读取数据时，A 还没有来得及往 x 地址写入数据。这可能吗？我们来进行推导：&lt;/p&gt;&lt;p&gt;首先简化一下 A 线程做的操作：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;向 x 地址写入数据，不妨设这个数据是 1，也就是 &lt;code&gt;*x = 1&lt;/code&gt;，记为 Wx1（W 表示 write，后面跟随地址以及写入的数据）&lt;/li&gt;&lt;li&gt;向 y 地址写入 1，表示数据准备完成，也就是 &lt;code&gt;*y = 1&lt;/code&gt;，记为 Wy1&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;接着是 B 线程做的操作，假设出现了错误情况，也就是在 &lt;code&gt;y = 1&lt;/code&gt; 的时候，从 x 读取了错误的数据：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;从 y 地址读取数据，得到了 1，表示数据准备完成，也就是 &lt;code&gt;r1 = *y&lt;/code&gt;，r1 等于 1，记为 Ry1（R 表示 read，后面跟随地址以及读取到的数据）&lt;/li&gt;&lt;li&gt;从 x 地址读取数据，因为前面假设了读取了错误的数据，正确的数据是 1，不妨设错误的数据是 0，也就是 &lt;code&gt;r2 = *x&lt;/code&gt;，r2 等于 0，记为 Rx0&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;接下来证明：在 SC 内存模型下，这种可能性不存在：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在 SC 内存模型下，program order 得到保持，也就是 A 和 B 线程各自的执行顺序是保证的，可知 Wx1 必须出现在 Wy1 之前，Ry1 必须出现在 Rx0 之前，记作 Wx1 -&amp;gt; Wy1，Ry1 -&amp;gt; Rx0&lt;/li&gt;&lt;li&gt;对于 x 地址来说，Wx1 写入了 1，Rx0 读出了 0，说明 Rx0 必须在 Wx1 之前执行，才可能读到 0，即 Rx0 -&amp;gt; Wx1；对于 y 地址来说，Wy1 写入了 1，Ry1 读出了 1，由于 y 地址的初始值是 0，说明 Ry1 必须在 Wy1 之后执行，才可能读到 0，即 Wy1 -&amp;gt; Ry1&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这样我们就得到了四组顺序关系：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Wx1 -&amp;gt; Wy1&lt;/li&gt;&lt;li&gt;Wy1 -&amp;gt; Ry1&lt;/li&gt;&lt;li&gt;Ry1 -&amp;gt; Rx0&lt;/li&gt;&lt;li&gt;Rx0 -&amp;gt; Wx1&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;你会发现这四个操作的顺序关系出现了环，说明不存在一个执行序列，可以同时满足这四组顺序关系。也就说明 SC 内存模型下，不可能得到这个执行结果。通过内存模型，我可以从理论上证明这段代码在 SC 内存模型下是没有问题的，那么这段代码在所有实现了 SC 内存模型的处理器上可以正常工作。&lt;/p&gt;&lt;h3 id=&#34;litmus&#34;&gt;Litmus&lt;a class=&#34;headerlink&#34; href=&#34;#litmus&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;像上面这种来自多线程编程的一个小片段，我们可以从内存模型的角度分析它可能的执行结果，也可以在实际的处理器上运行，这种小片段就叫做 Litmus test，上面看到的这个例子，其实是 Litmus test 当中的 Message Passing 测试（MP）。利用 &lt;a href=&#34;https://github.com/herd/herdtools7&#34;&gt;herd/herdtools7 on GitHub&lt;/a&gt; 工具，我们可以在电脑上实际去运行 Litmus test，观察它的实际运行结果。herdtools7 的安装流程：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;安装 OCaml 工具链（包括 opam），配置 opam&lt;/li&gt;&lt;li&gt;用 opam 安装 herdtools7: &lt;code&gt;opam install herdtools7&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;有了 herdtools7 以后，如果要执行上面的 Message Passing 测试，只需要按照运行如下的命令（以 x86 为例）：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;diycross7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-arch&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;X86&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-name&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;MP-X86&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PodWW&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Rfe&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PodRR&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Fre&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;litmus7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;MP-X86.litmus&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它就会在 x86 机器上运行 MP 测试，运行 1000000 次后，发现没有出现前面所述的读出来 y 等于 1 但是 x 等于 0 的情况。那么上面出现的 &lt;code&gt;PodWW Rfe PodRR Fre&lt;/code&gt; 是什么意思？我们首先来看看生成的 &lt;code&gt;MP-X86.litmus&lt;/code&gt; 文件的内容：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;X86 MP-X86&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;&amp;quot;PodWW Rfe PodRR Fre&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt;Cycle=Rfe PodRR Fre PodWW&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt;Generator=diycross7 (version 7.56+03)&lt;/span&gt;&lt;span id=&#34;__span-1-5&#34;&gt;&lt;a id=&#34;__codelineno-1-5&#34; name=&#34;__codelineno-1-5&#34; href=&#34;#__codelineno-1-5&#34;&gt;&lt;/a&gt;Prefetch=0:x=F,0:y=W,1:y=F,1:x=T&lt;/span&gt;&lt;span id=&#34;__span-1-6&#34;&gt;&lt;a id=&#34;__codelineno-1-6&#34; name=&#34;__codelineno-1-6&#34; href=&#34;#__codelineno-1-6&#34;&gt;&lt;/a&gt;Com=Rf Fr&lt;/span&gt;&lt;span id=&#34;__span-1-7&#34;&gt;&lt;a id=&#34;__codelineno-1-7&#34; name=&#34;__codelineno-1-7&#34; href=&#34;#__codelineno-1-7&#34;&gt;&lt;/a&gt;Orig=PodWW Rfe PodRR Fre&lt;/span&gt;&lt;span id=&#34;__span-1-8&#34;&gt;&lt;a id=&#34;__codelineno-1-8&#34; name=&#34;__codelineno-1-8&#34; href=&#34;#__codelineno-1-8&#34;&gt;&lt;/a&gt;{&lt;/span&gt;&lt;span id=&#34;__span-1-9&#34;&gt;&lt;a id=&#34;__codelineno-1-9&#34; name=&#34;__codelineno-1-9&#34; href=&#34;#__codelineno-1-9&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;span id=&#34;__span-1-10&#34;&gt;&lt;a id=&#34;__codelineno-1-10&#34; name=&#34;__codelineno-1-10&#34; href=&#34;#__codelineno-1-10&#34;&gt;&lt;/a&gt; P0 | P1 ;&lt;/span&gt;&lt;span id=&#34;__span-1-11&#34;&gt;&lt;a id=&#34;__codelineno-1-11&#34; name=&#34;__codelineno-1-11&#34; href=&#34;#__codelineno-1-11&#34;&gt;&lt;/a&gt; MOV [x],$1 | MOV EAX,[y] ;&lt;/span&gt;&lt;span id=&#34;__span-1-12&#34;&gt;&lt;a id=&#34;__codelineno-1-12&#34; name=&#34;__codelineno-1-12&#34; href=&#34;#__codelineno-1-12&#34;&gt;&lt;/a&gt; MOV [y],$1 | MOV EBX,[x] ;&lt;/span&gt;&lt;span id=&#34;__span-1-13&#34;&gt;&lt;a id=&#34;__codelineno-1-13&#34; name=&#34;__codelineno-1-13&#34; href=&#34;#__codelineno-1-13&#34;&gt;&lt;/a&gt;exists (1:EAX=1 /\ 1:EBX=0)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;忽略开头的部分，直接从 P0 P1 这一行开始看：P0 和 P1 对应两个处理器核心，下面是在这两个核心上要运行的汇编指令：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;P0 上运行：&lt;ul&gt;&lt;li&gt;MOV [x], $1：往 x 地址写入 1，也就是前面说的 &lt;code&gt;*x = 1&lt;/code&gt;, Wx1&lt;/li&gt;&lt;li&gt;MOV [y], $1：往 y 地址写入 1，也就是前面说的 &lt;code&gt;*y = 1&lt;/code&gt;, Wy1&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;P1 上运行：&lt;ul&gt;&lt;li&gt;MOV EAX, [y]：从 y 地址读取数据，保存在 EAX 寄存器，也就是前面说的 &lt;code&gt;r1 = *y&lt;/code&gt;&lt;/li&gt;&lt;li&gt;MOV EBX, [x]：从 x 地址读取数据，保存在 EAX 寄存器，也就是前面说的 &lt;code&gt;r2 = *x&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;正好就是 Message Passing 测试的内容，只不过用汇编完成了实现。最后，它提问：&lt;code&gt;exists (1:EAX=1 /\ 1:EBX=0)&lt;/code&gt;，即是否存在一种可能，P1 的 EAX 寄存器（&lt;code&gt;1:EAX&lt;/code&gt;）等于 1，同时（&lt;code&gt;/\&lt;/code&gt; 表示逻辑与）P1 的 EBX 寄存器（&lt;code&gt;1:EBX&lt;/code&gt;）等于 0？这就是上面提到的错误情况，y 等于 1 但是 x 等于 0。&lt;/p&gt;&lt;p&gt;接下来的 &lt;code&gt;litmus7 MP-X86.litmus&lt;/code&gt; 命令就会在两个核心上运行这段汇编，并且统计最终的执行结果，发现：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;Histogram (3 states)&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;500087:&amp;gt;1:EAX=0; 1:EBX=0;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;1281 :&amp;gt;1:EAX=0; 1:EBX=1;&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;498632:&amp;gt;1:EAX=1; 1:EBX=1;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行了 1000000 次，观察到 500087 次 y=1, x=0；1281 次 y=0, x=1；498632 次 y=1, x=1；没有观察到 y=1 &amp;amp;&amp;amp; x=0。也就是没有找到反例。&lt;/p&gt;&lt;p&gt;那么 diycross7 命令是怎么生成这段汇编的呢？答案就在 &lt;code&gt;PodWW Rfe PodRR Fre&lt;/code&gt; 参数当中。它描述的就是我们前面提到的四组顺序关系：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Wx1 -&amp;gt; Wy1: P0 上的 program order&lt;/li&gt;&lt;li&gt;Wy1 -&amp;gt; Ry1: memory 上的写后读&lt;/li&gt;&lt;li&gt;Ry1 -&amp;gt; Rx0: P1 上的 program order&lt;/li&gt;&lt;li&gt;Rx0 -&amp;gt; Wx1: memory 上的读后写&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果这四组顺序关系都得到保证，那么就不存在一个执行序列可以同时满足这四组顺序关系。在 diycross7 的语言里面，我们把这四组顺序关系描述出来：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Wx1 -&amp;gt; Wy1: P0 上的 program order，并且是两个 Write 之间的 program order，所以是 PodWW（Pod = program order，WW = write to write）&lt;/li&gt;&lt;li&gt;Wy1 -&amp;gt; Ry1: memory 上的写后读，并且分别在 P0 和 P1 上执行，所以是 Rfe（Rf = read from，后面的 read 的数据来自前面的 write，箭头从 W 指向 R，e = external，表示读和写在两个核上）&lt;/li&gt;&lt;li&gt;Ry1 -&amp;gt; Rx0: P1 上的 program order，并且是两个 Read 之间的 program order，所以是 PodRR（Pod = program order，RR = read to read）&lt;/li&gt;&lt;li&gt;Rx0 -&amp;gt; Wx1: memory 上的读后写，并且分别在 P1 和 P0 上执行，所以是 Fre（Fr = from read，读在前，写在后，箭头从 R 指向 W，e = external，表示读和写在两个核上）&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;于是我们就用 &lt;code&gt;PodWW Rfe PodRR Fre&lt;/code&gt; 描述了这四组顺序关系，diycross7 工具就根据这四组顺序关系，生成了汇编程序，这个汇编程序会用到这些顺序关系，那么在处理器上执行，就可以判断在处理器的内存模型下，这个环是否可能打破，反例是否可能存在。通过这种描述方法，我们可以设计出各种各样的 Litmus test，测试和分析不同的代码在各种处理器的内存模型下，会有怎样的表现。&lt;/p&gt;&lt;h3 id=&#34;store-buffer&#34;&gt;Store Buffer&lt;a class=&#34;headerlink&#34; href=&#34;#store-buffer&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;暂时先不讲内存模型，先讲讲处理器在访存上的一个重要的优化：Store Buffer。对于乱序执行处理器来说，预测执行是有限度的，因为如果预测错误了，需要回滚到正确的状态，这也意味着，有副作用的指令不能简单地预测执行：例如在一段操作系统内核的代码里，需要根据用户的输入决定电脑要关机还是重启：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shutdown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-2&#34;&gt;&lt;a id=&#34;__codelineno-3-2&#34; name=&#34;__codelineno-3-2&#34; href=&#34;#__codelineno-3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;do_shutdown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-3&#34;&gt;&lt;a id=&#34;__codelineno-3-3&#34; name=&#34;__codelineno-3-3&#34; href=&#34;#__codelineno-3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-4&#34;&gt;&lt;a id=&#34;__codelineno-3-4&#34; name=&#34;__codelineno-3-4&#34; href=&#34;#__codelineno-3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;do_reboot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-5&#34;&gt;&lt;a id=&#34;__codelineno-3-5&#34; name=&#34;__codelineno-3-5&#34; href=&#34;#__codelineno-3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假如处理器实现了分支预测，预测 &lt;code&gt;shutdown == true&lt;/code&gt;，接着预测执行了 &lt;code&gt;do_shutdown&lt;/code&gt;，如果处理器真的预测执行了关机操作，那么电脑就直接关机了，都没有来得及确认是不是要关机。例如实际上可能 &lt;code&gt;shutdown == false&lt;/code&gt;，应该执行的是 &lt;code&gt;do_reboot&lt;/code&gt;，本来是重启的，却变成了关机。所以预测执行遇到这种带有副作用（side effect）的指令，需要单独处理。&lt;/p&gt;&lt;p&gt;一个简单的办法就是要求所有带有副作用的指令顺序执行，只有前面的所有指令执行完了，有副作用的指令才可以执行，因为此时不可能回滚到更早的指令了。但是有副作用的指令很多，通常认为 Store 指令都有副作用，如果考虑到侧信道攻击和安全性，可能连 Load 指令都有副作用，因为它会改变 Cache 的状态；如果要访问外设，那么 Load 和 Store 都有副作用。在乱序处理器上，就是只允许有副作用的指令在 Reorder Buffer（ROB）头部，才可以执行。但如果遇到了缓存缺失，这个时间就会很长，一直堵住 ROB，影响性能。&lt;/p&gt;&lt;p&gt;为了解决这个问题，针对写入内存的 Store 指令，虽然它有副作用，但通常认为缓存写入是不会失败的，所以不用担心写入失败的问题，所以可以把这些 Store 指令放在一个队列里面，这个队列称为 Store Buffer。从 ROB 提交的 Store 指令会放到 Store Buffer 里面，此时可以认为 Store 指令完成了提交，Store 指令从 ROB 中删除，不再堵塞后面的其他指令。Store Buffer 队列里的 Store 指令会按顺序把数据写入缓存，这时候再遇到缓存缺失，影响也比较小。&lt;/p&gt;&lt;p&gt;当然了，由于 Store Buffer 里的数据还没写入缓存，缓存里的数据不一定是最新的，所以后续 Load 指令读取数据时，不仅要从缓存中读取，还要查询 Store Buffer，如果缓存和 Store Buffer 都有数据，要以 Store Buffer 为准。这样实现以后，从单线程程序的角度来看，行为没有变化。但是多线程程序就遇到了一个新问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A 核心向 x 地址写入 1，从 y 地址读取数据&lt;/li&gt;&lt;li&gt;B 核心向 y 地址写入 1，从 x 地址读取数据&lt;/li&gt;&lt;li&gt;A 核心从 y 地址读取数据，因为 A 没有写入 y 地址，所以 A 从缓存中读取 y 地址的数据；同时 B 核心从 x 地址读取数据，同理 B 也从缓存中读取 x 地址的数据&lt;/li&gt;&lt;li&gt;两个核心写入数据的指令进入了各自核心的 Store Buffer，但是还没写入缓存；因此 A 和 B 从缓存中读取的数据都是 0&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;用程序来表达，就是：&lt;/p&gt;&lt;p&gt;A 核心：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Wx1: *x = 1&lt;/li&gt;&lt;li&gt;Ry0: r1 = *y&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;B 核心：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Wy1: *y = 1&lt;/li&gt;&lt;li&gt;Rx0: r2 = *x&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;你可能会想，这怎么可能？明明两边都是先写后读，怎么结果却好像是先读后写？如果我们继续按照 SC 模型的规定来寻找顺序关系：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;program order: Wx1 -&amp;gt; Ry0, Wy1 -&amp;gt; Rx0&lt;/li&gt;&lt;li&gt;coherence：Ry0 -&amp;gt; Wy1，Rx0 -&amp;gt; Wx1&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;出现了环：Wx1 -&amp;gt; Ry0 -&amp;gt; Wy1 -&amp;gt; Rx0 -&amp;gt; Wx1，说明这个结果在 SC 模型下不可能成立。但如果我们在 x86 机器上真的跑一下这个测试：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;diycross7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-arch&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;X86&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-name&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;SB-X86&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PodWR&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Fre&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PodWR&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Fre&lt;/span&gt;&lt;span id=&#34;__span-4-2&#34;&gt;&lt;a id=&#34;__codelineno-4-2&#34; name=&#34;__codelineno-4-2&#34; href=&#34;#__codelineno-4-2&#34;&gt;&lt;/a&gt;litmus7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;SB-X86.litmus&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;PodWR Fre PodWR Fre&lt;/code&gt; 是这么来的：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Wx1 -&amp;gt; Ry0: PodWR, program order, write to read&lt;/li&gt;&lt;li&gt;Ry0 -&amp;gt; Wy1: Fre, from-read, external&lt;/li&gt;&lt;li&gt;Wy1 -&amp;gt; Rx0: PodWR, program order, write to read&lt;/li&gt;&lt;li&gt;Rx0 -&amp;gt; Wx1: Fre, from-read, external&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;diycross7 命令生成了下面的汇编：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-5-1&#34;&gt;&lt;a id=&#34;__codelineno-5-1&#34; name=&#34;__codelineno-5-1&#34; href=&#34;#__codelineno-5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;P0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;P1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-2&#34;&gt;&lt;a id=&#34;__codelineno-5-2&#34; name=&#34;__codelineno-5-2&#34; href=&#34;#__codelineno-5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;MOV&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;MOV&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-3&#34;&gt;&lt;a id=&#34;__codelineno-5-3&#34; name=&#34;__codelineno-5-3&#34; href=&#34;#__codelineno-5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;MOV&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;EAX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;MOV&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;EAX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-4&#34;&gt;&lt;a id=&#34;__codelineno-5-4&#34; name=&#34;__codelineno-5-4&#34; href=&#34;#__codelineno-5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;exists&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;EAX&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/\&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;EAX&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行 litmus7 得到如下的结果：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-6-1&#34;&gt;&lt;a id=&#34;__codelineno-6-1&#34; name=&#34;__codelineno-6-1&#34; href=&#34;#__codelineno-6-1&#34;&gt;&lt;/a&gt;Histogram (4 states)&lt;/span&gt;&lt;span id=&#34;__span-6-2&#34;&gt;&lt;a id=&#34;__codelineno-6-2&#34; name=&#34;__codelineno-6-2&#34; href=&#34;#__codelineno-6-2&#34;&gt;&lt;/a&gt;540 *&amp;gt;0:EAX=0; 1:EAX=0;&lt;/span&gt;&lt;span id=&#34;__span-6-3&#34;&gt;&lt;a id=&#34;__codelineno-6-3&#34; name=&#34;__codelineno-6-3&#34; href=&#34;#__codelineno-6-3&#34;&gt;&lt;/a&gt;499697:&amp;gt;0:EAX=1; 1:EAX=0;&lt;/span&gt;&lt;span id=&#34;__span-6-4&#34;&gt;&lt;a id=&#34;__codelineno-6-4&#34; name=&#34;__codelineno-6-4&#34; href=&#34;#__codelineno-6-4&#34;&gt;&lt;/a&gt;499760:&amp;gt;0:EAX=0; 1:EAX=1;&lt;/span&gt;&lt;span id=&#34;__span-6-5&#34;&gt;&lt;a id=&#34;__codelineno-6-5&#34; name=&#34;__codelineno-6-5&#34; href=&#34;#__codelineno-6-5&#34;&gt;&lt;/a&gt;3 :&amp;gt;0:EAX=1; 1:EAX=1;&lt;/span&gt;&lt;span id=&#34;__span-6-6&#34;&gt;&lt;a id=&#34;__codelineno-6-6&#34; name=&#34;__codelineno-6-6&#34; href=&#34;#__codelineno-6-6&#34;&gt;&lt;/a&gt;Ok&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你会发现在 x86 机器上真的出现了这个结果：从 x 和 y 读出来的数据都是 0。这就说明 x86 机器实现的并不是 SC 的内存模型。在 SC 模型下，这段代码的四个顺序关系成环，使得不存在 x 和 y 读出来都为 0 的情况；现在确实观察到了读出来 x 和 y 都为 0 的情况，说明这个环被断开了，有的边不再成立。&lt;/p&gt;&lt;p&gt;回想前面提到的 Store Buffer 的硬件实现，问题出现在，x 和 y 处于不同的地址，A 核心读取 y 时，直接通过缓存读取数据，此时从缓存的视角来看，先看到了 A 核心读取 y，后看到了 A 核心写入了 x，这和指令的顺序不同。也就是 PodWR（Program order write to read）这条边不再成立了，这种情况下，从核外的视角看，程序的先 Store 后 Load，可能被重排为先 Load 后 Store。这也说明 x86 的处理器做了 Store Buffer 的硬件实现。在优化性能的同时，也切实改变了内存模型。&lt;/p&gt;&lt;h3 id=&#34;x86-tso&#34;&gt;X86-TSO&lt;a class=&#34;headerlink&#34; href=&#34;#x86-tso&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;依托 Store Buffer，我们可以构建出一个新的内存模型：在每个核心和内存子系统之间，多了一个 Store Buffer，Store 指令会先进入 Store Buffer，再进入内存子系统。当 Load 指令和 Store Buffer 中的 Store 指令有数据相关时，会从 Store Buffer 中取数据，如果不相关，或者不完全相关（例如只有一部分重合），则会从内存子系统中取数据，此时从内存子系统的角度来看，就发生了 Load 提前于 Store 执行的重排。这个模型被称为 &lt;a href=&#34;https://dl.acm.org/doi/10.1145/1785414.1785443&#34;&gt;X86-TSO&lt;/a&gt;（图源 &lt;a href=&#34;https://link.springer.com/book/10.1007/978-3-031-01764-3&#34;&gt;A Primer on Memory Consistency and Cache Coherence, Second Edition&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../memory_model_and_memory_ordering_x86_tso.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;需要注意的是，X86-TSO 模型是在 &lt;a href=&#34;https://dl.acm.org/doi/10.1145/1785414.1785443&#34;&gt;2010 年的论文 x86-TSO: a rigorous and usable programmer&#39;s model for x86 multiprocessors&lt;/a&gt;中由学术界对现有 x86 处理器的内存模型的总结，但 Intel 和 AMD 在他们的文档中没有直接采用这个模型，而是给出了各种各样的规则。但实践中，可以认为 x86 处理器用的就是这个模型，从各自 litmus 测试中，也没有发现理论和实际不一致的地方。&lt;/p&gt;&lt;p&gt;这里的 TSO 的全称是 Total Store Order，意思是针对 Store 指令（只有离开 Store Buffer 进入缓存的才算），有一个全局的顺序。内存子系统会处理来自不同核心的 Store，但会保证 Store 有一个先后顺序，并且所有核心会看到同一个顺序。这个概念有些时候还会被称为 Multi-copy Atomic，字面意思是当一个 Store 被其他核心看到时，所有核心都会“同时”看到，不会说一部分核先看到，另一部分核后看到。&lt;/p&gt;&lt;p&gt;从 TSO 的字面意思来说，并没有提到 Load 可以被重排到 Store 之前，是 X86 的 TSO 实现了这种重排。不过平常也不会专门去区分这件事情，提到 TSO，大家想到的都是 X86 的 TSO，也就是 X86-TSO 模型。&lt;/p&gt;&lt;p&gt;总结一下，X86-TSO 模型的规定就是如下几点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Total Store Order：所有核心会观察到相同的全局的 Store 顺序&lt;/li&gt;&lt;li&gt;Load 可以被重排到 Store 之前&lt;/li&gt;&lt;li&gt;Load 会从 Store Buffer 和缓存两个地方取数据&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;对比 SC 和 X86-TSO 模型：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;X86-TSO 模型允许 Load 被重排到 Store 之前&lt;/li&gt;&lt;li&gt;Store Buffer 测试下，SC 禁止重排，X86-TSO 允许重排&lt;/li&gt;&lt;li&gt;Message Passing 测试下，SC 和 X86-TSO 都禁止重排&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;weakrelaxed-memory-model&#34;&gt;Weak/Relaxed Memory Model&lt;a class=&#34;headerlink&#34; href=&#34;#weakrelaxed-memory-model&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在 X86 以外的指令集架构，经常可以看到另外一种内存模型，一般称为 Weak Memory Model 或者 Relaxed Memory Model。怎么个 Weak 法呢？就是硬件想重排就重排，当然了，是在保证核内视角正确的前提下。回想前面 SC 模型和 X86-TSO 模型，它们对于 Load 和 Store 之间重排的要求是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;先 Load 后 Load：SC 和 X86-TSO 不允许重排&lt;/li&gt;&lt;li&gt;先 Load 后 Store：SC 和 X86-TSO 不允许重排&lt;/li&gt;&lt;li&gt;先 Store 后 Load：SC 不允许重排，X86-TSO 允许重排&lt;/li&gt;&lt;li&gt;先 Store 后 Store：SC 和 X86-TSO 不允许重排&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;既然 Weak 了，那就自由到底：全都允许重排。如果用户不想重排，那再加合适的 fence 或 barrier 指令，阻止不想要的重排。在这个内存模型下，每个核心可以在向内存子系统读写前，对自己的读写进行重排（图源 &lt;a href=&#34;https://link.springer.com/book/10.1007/978-3-031-01764-3&#34;&gt;A Primer on Memory Consistency and Cache Coherence, Second Edition&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../memory_model_and_memory_ordering_weak.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;这意味着什么呢？前面出现过 Message Passing 的例子，结论是 MP 测试的情况在 SC 和 X86-TSO 场景下都被禁止。但如果我们在一个具有 Weak Memory Model 的机器上运行：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-7-1&#34;&gt;&lt;a id=&#34;__codelineno-7-1&#34; name=&#34;__codelineno-7-1&#34; href=&#34;#__codelineno-7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# P0:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-2&#34;&gt;&lt;a id=&#34;__codelineno-7-2&#34; name=&#34;__codelineno-7-2&#34; href=&#34;#__codelineno-7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# 1. Wx1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-3&#34;&gt;&lt;a id=&#34;__codelineno-7-3&#34; name=&#34;__codelineno-7-3&#34; href=&#34;#__codelineno-7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# 2. Wy1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-4&#34;&gt;&lt;a id=&#34;__codelineno-7-4&#34; name=&#34;__codelineno-7-4&#34; href=&#34;#__codelineno-7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# P1:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-5&#34;&gt;&lt;a id=&#34;__codelineno-7-5&#34; name=&#34;__codelineno-7-5&#34; href=&#34;#__codelineno-7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# 1. Ry1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-6&#34;&gt;&lt;a id=&#34;__codelineno-7-6&#34; name=&#34;__codelineno-7-6&#34; href=&#34;#__codelineno-7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# 2. Rx0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-7&#34;&gt;&lt;a id=&#34;__codelineno-7-7&#34; name=&#34;__codelineno-7-7&#34; href=&#34;#__codelineno-7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# orders:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-8&#34;&gt;&lt;a id=&#34;__codelineno-7-8&#34; name=&#34;__codelineno-7-8&#34; href=&#34;#__codelineno-7-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Wx1 -&amp;gt; Wy1: PodWW&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-9&#34;&gt;&lt;a id=&#34;__codelineno-7-9&#34; name=&#34;__codelineno-7-9&#34; href=&#34;#__codelineno-7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Wy1 -&amp;gt; Ry1: Rfe&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-10&#34;&gt;&lt;a id=&#34;__codelineno-7-10&#34; name=&#34;__codelineno-7-10&#34; href=&#34;#__codelineno-7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Ry1 -&amp;gt; Rx0: PodRR&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-11&#34;&gt;&lt;a id=&#34;__codelineno-7-11&#34; name=&#34;__codelineno-7-11&#34; href=&#34;#__codelineno-7-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Rx0 -&amp;gt; Wx1: Fre&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-12&#34;&gt;&lt;a id=&#34;__codelineno-7-12&#34; name=&#34;__codelineno-7-12&#34; href=&#34;#__codelineno-7-12&#34;&gt;&lt;/a&gt;diycross7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-arch&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;AArch64&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-name&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;MP-AArch64&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PodWW&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Rfe&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PodRR&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Fre&lt;/span&gt;&lt;span id=&#34;__span-7-13&#34;&gt;&lt;a id=&#34;__codelineno-7-13&#34; name=&#34;__codelineno-7-13&#34; href=&#34;#__codelineno-7-13&#34;&gt;&lt;/a&gt;litmus7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;MP-AArch64.litmus&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# MP = Message Passing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会发现虽然概率比较低，但确实会出现 y=1，x=0 的情况：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-8-1&#34;&gt;&lt;a id=&#34;__codelineno-8-1&#34; name=&#34;__codelineno-8-1&#34; href=&#34;#__codelineno-8-1&#34;&gt;&lt;/a&gt;Histogram (4 states)&lt;/span&gt;&lt;span id=&#34;__span-8-2&#34;&gt;&lt;a id=&#34;__codelineno-8-2&#34; name=&#34;__codelineno-8-2&#34; href=&#34;#__codelineno-8-2&#34;&gt;&lt;/a&gt;500000:&amp;gt;1:X1=0; 1:X3=0;&lt;/span&gt;&lt;span id=&#34;__span-8-3&#34;&gt;&lt;a id=&#34;__codelineno-8-3&#34; name=&#34;__codelineno-8-3&#34; href=&#34;#__codelineno-8-3&#34;&gt;&lt;/a&gt;1 *&amp;gt;1:X1=1; 1:X3=0;&lt;/span&gt;&lt;span id=&#34;__span-8-4&#34;&gt;&lt;a id=&#34;__codelineno-8-4&#34; name=&#34;__codelineno-8-4&#34; href=&#34;#__codelineno-8-4&#34;&gt;&lt;/a&gt;1 :&amp;gt;1:X1=0; 1:X3=1;&lt;/span&gt;&lt;span id=&#34;__span-8-5&#34;&gt;&lt;a id=&#34;__codelineno-8-5&#34; name=&#34;__codelineno-8-5&#34; href=&#34;#__codelineno-8-5&#34;&gt;&lt;/a&gt;499998:&amp;gt;1:X1=1; 1:X3=1;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;既然在实际的 ARM 机器上测出来这种情况，说明 PodWW 或者 PodRR 至少有一个出现了重排，打破了环。&lt;/p&gt;&lt;p&gt;更进一步，SC 和 X86-TSO 都要求有 Total Store Order（Multi-copy Atomic）：所有核心会看到统一的 Store 顺序。有要求，就可以舍弃，部分 Weak Memory Model 也不要求这一点，这个时候，内存模型就好像每个核心都有自己的一份内存，这些内存之间会互相传播 Store 以保证缓存一致性，但是有的核心可能先看到，有的核心可能后看到（图源 &lt;a href=&#34;https://www.cl.cam.ac.uk/~pes20/ppc-supplemental/test7.pdf&#34;&gt;A Tutorial Introduction to the ARM and POWER Relaxed Memory Model&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../memory_model_and_memory_ordering_weak_2.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;这一点可以在 IRIW（全称 Independent Read of Independent Write；准确地说，为了排除 PodRR 重排的情况，要用 IRIW+addrs 或者加 barrier）Litmus 测试中看到。简单来说，IRIW 测试中，有两个核心负责写入，另外两个核心负责读，如果这两个负责读的核心观察到了不同的写入顺序，说明没有 Total Store Order（Multi-copy Atomic）：写入传播到不同核心的顺序可能打乱。&lt;/p&gt;&lt;h2 id=&#34;内存序&#34;&gt;内存序&lt;a class=&#34;headerlink&#34; href=&#34;#内存序&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;指令集&#34;&gt;指令集&lt;a class=&#34;headerlink&#34; href=&#34;#指令集&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;既然 X86-TSO 已经出现了一种可能的重排情况：Load 被重排到 Store 之前，假如我们不希望出现这种重排，怎么办？各个指令集都提供了一些 fence 或者 barrier 指令，可以阻止各种类型的重排。以 x86 为例：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;sfence: store fence，保证 sfence 之前的 store 都完成（globally visible，得写到缓存里才算）之后，才开始 sfence 之后的 store&lt;/li&gt;&lt;li&gt;lfence: load fence，保证 lfence 之前的 load 都完成（globally visible）之后，才开始 lfence 之后的 load&lt;/li&gt;&lt;li&gt;mfence: memory fence, 保证 mfence 之前的 load 和 store 都完成（globally visible）之后，才开始 mfence 之后的 load 和 store&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这其中常用的其实就是 mfence：前面提到 X86-TSO 允许 Load 被重排到 Store 之前，为了阻止这一点，lfence 和 sfence 都不够，因为 lfence 管的是 Load 被重排到 Load 之前，sfence 管的是 Store 被重排到 Store 之前。mfence 则可以：在 Store 后面紧挨着一条 mfence 指令，那么 mfence 之后的 Load 指令就无法被重排到 Store 之前：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;store&lt;/li&gt;&lt;li&gt;mfence&lt;/li&gt;&lt;li&gt;load&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;所以如果要在 x86 上运行按照 SC 内存模型编写的程序，为了保证正确性，需要在每个 Store 后面加一条 mfence 指令。&lt;/p&gt;&lt;p&gt;再来看看对于 ARMv8 这种具有 Weak/Relaxed Memory Model 的架构，指令集提供了哪些指令来避免重排：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;DMB：相当于 x86 的 mfence，保证 DMB 后的 Load 和 Store 不会重排到 DMB 之前，DMB 前的 Load 和 Store 也不会重排到 DMB 之后&lt;/li&gt;&lt;li&gt;Load Acquire：对 Load 指令添加 Acquire 语义，保证 Load Acquire 之后的 Load/Store 不会被重排到 Load Acquire 之前&lt;/li&gt;&lt;li&gt;Store Release：对 Release 指令添加 Release 语义，保证 Store Release 之前的 Load/Store 不会被重排到 Store Release 之后&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;看到 Acquire 和 Release，你可能会觉得这个说法有点熟悉：在锁里面，获得锁可以说 Lock 或者说 Acquire；释放锁可以说 Unlock 或者说 Release。事实上，Load Acquire 和 Store Release 正好就可以用在 Lock 和 Unlock 的场合：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-9-1&#34;&gt;&lt;a id=&#34;__codelineno-9-1&#34; name=&#34;__codelineno-9-1&#34; href=&#34;#__codelineno-9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Load Acquire&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-2&#34;&gt;&lt;a id=&#34;__codelineno-9-2&#34; name=&#34;__codelineno-9-2&#34; href=&#34;#__codelineno-9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-3&#34;&gt;&lt;a id=&#34;__codelineno-9-3&#34; name=&#34;__codelineno-9-3&#34; href=&#34;#__codelineno-9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Store Release&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在临界区中读取 x，肯定希望是在持有锁的前提下进行 Load，也就是说 Load x 不能被重排到 &lt;code&gt;lock()&lt;/code&gt; 之前，也不能被重排到 &lt;code&gt;unlock()&lt;/code&gt; 之后；同理在临界区中写入 y，肯定也是希望在持有锁的前提下进行 Store，也就是说 Store y 不能被重排到 &lt;code&gt;lock()&lt;/code&gt; 之前或 &lt;code&gt;unlock()&lt;/code&gt; 之后。为了避免这个重排，在一头一尾分别加上 Acquire 和 Release 标记，就可以保证临界区内的 Load/Store 都是在持有锁的情况下进行。&lt;/p&gt;&lt;p&gt;除了锁以外，这个模式也可以用来实现正确的 Message Passing，原来的 Message Passing 实现是：&lt;/p&gt;&lt;p&gt;P0:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;*x = 1&lt;/li&gt;&lt;li&gt;*y = 1&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;P1:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;r1 = *y&lt;/li&gt;&lt;li&gt;r2 = *x&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这里会有 Store-Store 重排以及 Load-Load 重排的风险，加上 Load Acquire 和 Store Release 以后：&lt;/p&gt;&lt;p&gt;P0:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;*x = 1&lt;/li&gt;&lt;li&gt;*y = 1 (Store Release)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;P1:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;r1 = *y (Load Acquire)&lt;/li&gt;&lt;li&gt;r2 = *x&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这样就避免了重排，P1 可以观察到正确的结果。&lt;/p&gt;&lt;p&gt;此外，Acquire 和 Release 标记也可以添加到原子指令上，毕竟原子指令其实就是 Load + Store。相比 Fence，Acquire 和 Release 是单向的，只影响前面的指令，或者只影响后面的指令，而 Fence 通常是两个方向都阻止，不许前面的排到后面，也不许后面的排到前面。&lt;/p&gt;&lt;h3 id=&#34;软件&#34;&gt;软件&lt;a class=&#34;headerlink&#34; href=&#34;#软件&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;从上面的分析可见，不同的处理器和指令集使用了不同的内存模型，提供了不同的指令来控制乱序重排，但是对于软件开发者来说，会希望尽量用一套通用的 API 来控制乱序重排，可以兼容各种指令集，不用去记忆每个处理器用的是什么内存模型，不用去知道哪些指令可以用来解决哪些重排。&lt;/p&gt;&lt;p&gt;这个 API 在很多编程语言中都有，C 的 stdatomic.h，C++ 的 std::memory_order，Rust 的 std::sync::atomic::Ordering 等等。它们对各种处理器的内存序进行了进一步的抽象，并且在编译的时候，由编译器或标准库把这些抽象的内存序翻译成实际的指令。以 C++ 的抽象为例，有如下几种内存序（图源 &lt;a href=&#34;https://en.cppreference.com/w/cpp/atomic/memory_order&#34;&gt;cppreference&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../memory_model_and_memory_ordering_order.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;其中比较重要的 acquire 和 release，其实就是上面提到的 Load Acquire 和 Store Release。最后的 seq_cst，就对应了 Sequential Consistency（SC）模型，要模拟 SC 模型的行为。&lt;/p&gt;&lt;p&gt;由于 C++ 可以被编译到不同的指令集架构，所以这些 memory order 在编译的时候，会变成对应的指令，也可能由于内存模型保证了不出现对应的乱序，不需要生成额外的指令。以 X86 为例子：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Load Acquire：防止 Load 之后的 Load/Store 指令被重排到 Load 之前，因为 X86-TSO 阻止了 Load-Load 和 Load-Store（先 Load 后 Store）重排，所以不需要额外的指令&lt;/li&gt;&lt;li&gt;Store Release：防止 Store 之前的 Load/Store 指令被重排到 Store 之后，因为 X86-TSO 阻止了 Load-Store 和 Store-Store 重排，所以不需要额外的指令&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;完整的对应关系，建议阅读 &lt;a href=&#34;https://www.cl.cam.ac.uk/~pes20/cpp/cpp0xmappings.html&#34;&gt;C/C++11 mappings to processors&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;编译器的优化可能会对内存序产生一些意料之外的影响，推荐阅读 Linux 内核的 &lt;a href=&#34;https://www.kernel.org/doc/Documentation/memory-barriers.txt&#34;&gt;LINUX KERNEL MEMORY BARRIERS&lt;/a&gt; 文档。&lt;/p&gt;&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;a class=&#34;headerlink&#34; href=&#34;#参考文献&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.cl.cam.ac.uk/~pes20/ppc-supplemental/test7.pdf&#34;&gt;A Tutorial Introduction to the ARM and POWER Relaxed Memory Model&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.cl.cam.ac.uk/~pes20/weakmemory/x86tso-paper.tphols.pdf&#34;&gt;A Better x86 Memory Model: x86-TSO&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/hwmm&#34;&gt;Hardware Memory Models - Russ Cox&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/herd/herdtools7&#34;&gt;herd/herdtools7 on GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://link.springer.com/book/10.1007/978-3-031-01764-3&#34;&gt;A Primer on Memory Consistency and Cache Coherence, Second Edition&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/generate-litmus-tests-automatically-diy7-tool&#34;&gt;How to generate litmus tests automatically with the diy7 tool&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/hardware/2024/09/04/memory_model_and_memory_ordering/</link> <pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/09/04/memory_model_and_memory_ordering/</guid> </item> <item> <title>Qualcomm Oryon 微架构评测</title> <category>cpu</category> <category>hardware</category> <category>oryon</category> <category>performance</category> <category>qualcomm</category> <category>uarch-review</category> <category>xelite</category> <description>&lt;h1 id=&#34;qualcomm-oryon-微架构评测&#34;&gt;Qualcomm Oryon 微架构评测&lt;a class=&#34;headerlink&#34; href=&#34;#qualcomm-oryon-微架构评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;最近借到一台 Surface Laptop 7 可以拿来折腾，它用的是高通 Snapdragon X Elite 处理器，借此机会测试一下这个微架构在各个方面的表现。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;官方信息&#34;&gt;官方信息&lt;a class=&#34;headerlink&#34; href=&#34;#官方信息&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;高通关于 Oryon 微架构有两个 slides，内容可以在以下的链接中看到：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.anandtech.com/show/21445/qualcomm-snapdragon-x-architecture-deep-dive/2&#34;&gt;The Qualcomm Snapdragon X Architecture Deep Dive: Getting To Know Oryon and Adreno X1 - Anandtech&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2024/08/26/hot-chips-2024-qualcomms-oryon-core/&#34;&gt;Hot Chips 2024: Qualcomm’s Oryon Core - Chips and Cheese&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;两次内容大体一致，Hot Chips 2024 的内容更加详细，但也出现了一些前后矛盾的地方。&lt;/p&gt;&lt;h2 id=&#34;现有评测&#34;&gt;现有评测&lt;a class=&#34;headerlink&#34; href=&#34;#现有评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;网上已经有较多针对 Oryon 微架构的评测和分析，建议阅读：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/704707254&#34;&gt;高通 X Elite Oryon 微架构评测：走走停停&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2024/07/09/qualcomms-oryon-core-a-long-time-in-the-making/&#34;&gt;Qualcomm’s Oryon Core: A Long Time in the Making&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2024/05/15/qualcomms-oryon-llvm-patches/&#34;&gt;Qualcomm’s Oryon LLVM Patches&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Ue41197Qb/&#34;&gt;高通自研 PC 芯片 X Elite 实测：真能干翻苹果英特尔？&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1z1421r7dZ/&#34;&gt;太贵了，它没你想的那么美好！高通骁龙 X Elite 78-100 笔记本详细评测&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.qualcomm.com/products/mobile/snapdragon/laptops-and-tablets/snapdragon-x-elite&#34;&gt;Snapdragon X Elite&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.qualcomm.com/products/technology/processors/oryon&#34;&gt;Qualcomm Oryon CPU&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面分各个模块分别记录官方提供的信息，以及实测的结果。读者可以对照已有的第三方评测理解。官方信息与实测结果一致的数据会加粗。&lt;/p&gt;&lt;h2 id=&#34;benchmark&#34;&gt;Benchmark&lt;a class=&#34;headerlink&#34; href=&#34;#benchmark&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Qualcomm Oryon 的性能测试结果见 &lt;a href=&#34;../../../../../benchmark/&#34;&gt;SPEC&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&#34;前端&#34;&gt;前端&lt;a class=&#34;headerlink&#34; href=&#34;#前端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;取指&#34;&gt;取指&lt;a class=&#34;headerlink&#34; href=&#34;#取指&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：取指可以达到每周期最多 &lt;strong&gt;16&lt;/strong&gt; 指令&lt;/p&gt;&lt;p&gt;为了测试实际的 Fetch 宽度，参考 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/720136752&#34;&gt;如何测量真正的取指带宽（I-fetch width） - JamesAslan&lt;/a&gt; 构造了测试。&lt;/p&gt;&lt;p&gt;其原理是当 Fetch 要跨页的时候，由于两个相邻页可能映射到不同的物理地址，如果要支持单周期跨页取指，需要查询两次 ITLB，或者 ITLB 需要把相邻两个页的映射存在一起。这个场景一般比较少，处理器很少会针对这种特殊情况做优化，但也不是没有。经过测试，把循环放在两个页的边界上，发现 Oryon 微架构遇到跨页的取指时确实会拆成两个周期来进行。在此基础上，构造一个循环，循环的第一条指令放在第一个页的最后四个字节，其余指令放第二个页上，那么每次循环的取指时间，就是一个周期（读取第一个页内的指令）加上第二个页内指令需要 Fetch 的周期数，多的这一个周期就足以把 Fetch 宽度从后端限制中区分开，实验结果如下：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_if_width.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;图中蓝线表示的就是上面所述的第一条指令放一个页，其余指令放第二个页的情况，可以看到每 16 条指令会多一个周期，因此 Oryon 的前端取指宽度确实是 16 条指令。&lt;/p&gt;&lt;p&gt;为了确认这个瓶颈是由取指造成的，又构造了一组实验，把循环的所有指令都放到一个页中，这个时候 Fetch 不再成为瓶颈（图中 aligned），两个曲线的对比可以明确地得出上述结论。&lt;/p&gt;&lt;h3 id=&#34;l1-icache&#34;&gt;L1 ICache&lt;a class=&#34;headerlink&#34; href=&#34;#l1-icache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;192KB&lt;/strong&gt; &lt;strong&gt;6-way&lt;/strong&gt; L1 ICache&lt;/p&gt;&lt;p&gt;为了测试 L1 ICache 容量，构造一个具有巨大指令 footprint 的循环，由大量的 nop 和最后的分支指令组成。观察在不同 footprint 大小下的 IPC：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_fetch_bandwidth.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 footprint 在 192 KB 之前时可以达到 8 IPC，之后则快速降到 2 IPC，这里的 192 KB 就对应了 L1 ICache 的容量。虽然 Fetch 可以每周期 16 条指令，也就是一条 64B 的缓存行，由于后端的限制，只能观察到 8 的 IPC。&lt;/p&gt;&lt;h3 id=&#34;l1-itlb&#34;&gt;L1 ITLB&lt;a class=&#34;headerlink&#34; href=&#34;#l1-itlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;256-entry&lt;/strong&gt; &lt;strong&gt;8-way&lt;/strong&gt; L1 ITLB，支持 4KB 和 64KB 的页表大小&lt;/p&gt;&lt;p&gt;构造一系列的 B 指令，使得 B 指令分布在不同的 page 上，使得 ITLB 成为瓶颈：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_itlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 256 Page 出现了明显的拐点，对应的就是 256 的 L1 ITLB 容量。注意要避免 ICache 和 BTB 的容量成为瓶颈，把 B 指令分布在不同的 Cache Line 和 BTB entry 上。&lt;/p&gt;&lt;p&gt;如果每两个 page 放一条 B 指令，容量减小到 128 Page；进一步把 B 指令放得更加稀疏，最终在每 32 个 page 放一条 B 指令时，容量减到 8 Page，之后不再减小。说明 L1 ITLB 是 32 Set 8 Way，Index 是 PC[16:12]。这是页表大小为 4KB 的情况，64KB 没有测试，预计是类似的。&lt;/p&gt;&lt;h3 id=&#34;decode&#34;&gt;Decode&lt;a class=&#34;headerlink&#34; href=&#34;#decode&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：8 inst/cycle decoded&lt;/p&gt;&lt;h3 id=&#34;return-stack&#34;&gt;Return Stack&lt;a class=&#34;headerlink&#34; href=&#34;#return-stack&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;50-entry&lt;/strong&gt; return stack&lt;/p&gt;&lt;p&gt;构造不同深度的调用链，测试每次调用花费的平均时间，得到下面的图：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_rs.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到调用链深度为 50 时性能突然变差，因此 Return Stack 深度为 50。&lt;/p&gt;&lt;h3 id=&#34;branch-predictor&#34;&gt;Branch Predictor&lt;a class=&#34;headerlink&#34; href=&#34;#branch-predictor&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：80KB Conditional Predictor, 40KB Indirect Predictor&lt;/p&gt;&lt;h3 id=&#34;btb&#34;&gt;BTB&lt;a class=&#34;headerlink&#34; href=&#34;#btb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;2K+&lt;/strong&gt; entry BTB&lt;/p&gt;&lt;p&gt;构造大量的无条件分支指令（B 指令），BTB 需要记录这些指令的目的地址，那么如果分支数量超过了 BTB 的容量，性能会出现明显下降。当把大量 B 指令紧密放置，也就是每 4 字节一条 B 指令时：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_btb_4b.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可见在 2048 个分支之内可以达到 1 的 CPI，超过 2048 个分支，出现了 3 CPI 的平台，一直延续到 32768 个分支或更多。超出 BTB 容量以后，分支预测时，无法从 BTB 中得到哪些指令是分支指令的信息，只能等到取指甚至译码后才能后知后觉地发现这是一条分支指令，这样就出现了性能损失，出现了 3 CPI 的情况。&lt;/p&gt;&lt;p&gt;降低分支指令的密度，在 B 指令之间插入 NOP 指令，使得每 8 个字节有一条 B 指令，得到如下结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_btb_8b.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 CPI=1 的拐点前移到 1024 个分支，同时 CPI=3 的平台也出现了新的拐点，在 16384 和 32768 之间。拐点的前移，意味着 BTB 采用了组相连的结构，当 B 指令的 PC 的部分低位总是为 0 时，组相连的 Index 可能无法取到所有的 Set，导致表现出来的 BTB 容量只有部分 Set，例如此处容量减半，说明只有一半的 Set 被用到了。&lt;/p&gt;&lt;p&gt;出现新的拐点，对应的是指令 footprint 超出 L1 ICache 的情况：L1 ICache 是 192KB，按照每 8 字节一个 B 指令计算，最多可以存放 24576 条 B 指令，这个值正好处在 16384 和 32768 之间，和拐点吻合。&lt;/p&gt;&lt;p&gt;如果进一步降低 B 指令的密度，使得它的低若干位都等于 0，最终 CPI=1 的拐点定格在 2 条分支，CPI=3/3.5 的拐点定格在 6 条分支。根据这个信息，认为 BTB 是 1024 Set 2 Way 的结构，Index 是 PC[11:2]；同时也侧面佐证了 192KB L1 ICache 是 512 Set 6 Way，Index 是 PC[14:6]。不过考虑到 Oryon 支持跨 64B 边界访存，实际的 L1 ICache 大概率是分 bank 的，这样才能在保持单读口的情况下，一个周期从连续的两个 Cache Line 中取指令。&lt;/p&gt;&lt;p&gt;小结：BTB 容量为 2048 项，采用 2 路组相连方式，当所有分支命中 BTB 时，可以达到 1 CPI；如果超出了 BTB 容量，但没有超出 L1 ICache 容量，可以达到 3 CPI。&lt;/p&gt;&lt;h3 id=&#34;branch-mispredict-latency&#34;&gt;Branch Mispredict Latency&lt;a class=&#34;headerlink&#34; href=&#34;#branch-mispredict-latency&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：13 cycle Branch Mispredict Latency&lt;/p&gt;&lt;h2 id=&#34;后端&#34;&gt;后端&lt;a class=&#34;headerlink&#34; href=&#34;#后端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;物理寄存器堆&#34;&gt;物理寄存器堆&lt;a class=&#34;headerlink&#34; href=&#34;#物理寄存器堆&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：400+ registers Integer pool, 400+ registers Vector pool&lt;/p&gt;&lt;p&gt;为了测试物理寄存器堆的大小，一般会用两个依赖链很长的操作放在开头和结尾，中间填入若干个无关的指令，并且用这些指令来耗费物理寄存器堆。测试结果见下图：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_prf.png&#34; /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;32b/64b int：测试 32/64 位整数寄存器的数量，拐点在 362-374&lt;/li&gt;&lt;li&gt;fp：测试浮点寄存器的数量，拐点在 362-372&lt;/li&gt;&lt;li&gt;flags：测试 NZCV 寄存器的数量，拐点在 119-126&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可见整数和浮点数都能提供大约 360+ 个寄存器用于乱序执行，加上用于保存架构寄存器的至少 32 个寄存器，加起来和高通宣称的 400+ 是比较一致的。整数和浮点个数测出来一样，可能是这两个寄存器堆大小一样，也可能是整数和浮点放同一个寄存器堆中。经过混合整数和浮点指令测试，认为这两个寄存器堆并不共享。&lt;/p&gt;&lt;p&gt;NZCV 重命名则比整数寄存器少得多，只有 120+，也是考虑到 ARMv8 指令集大部分指令不像 X86 那样会修改 NZCV。&lt;/p&gt;&lt;h3 id=&#34;reservation-stations&#34;&gt;Reservation Stations&lt;a class=&#34;headerlink&#34; href=&#34;#reservation-stations&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;IXU 6-wide 64-bit, each with 20 entry queue&lt;/li&gt;&lt;li&gt;VXU 4-wide 128-bit, each with 48 entry queue&lt;/li&gt;&lt;li&gt;LSU 4-wide 128-bit, each with 16 entry queue (注：Hot Chips 上的 Slides 写的是四个 64-entry，出现了不一致)&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;执行单元&#34;&gt;执行单元&lt;a class=&#34;headerlink&#34; href=&#34;#执行单元&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Up to &lt;strong&gt;6&lt;/strong&gt; ALU/cycle&lt;/li&gt;&lt;li&gt;Up to &lt;strong&gt;2&lt;/strong&gt; Branch/cycle&lt;/li&gt;&lt;li&gt;Up to &lt;strong&gt;2&lt;/strong&gt; multiply/MLA per cycle&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在循环中重复下列指令多次，测量 CPI，得到如下结果：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;add x0, x0, 1&lt;/code&gt;：CPI = 6.0，说明可以 6 ALU/cycle&lt;/li&gt;&lt;li&gt;&lt;code&gt;cbnz xzr, target;target:&lt;/code&gt;：CPI = 2.0，说明可以 2 Branch/cycle，注意这里是 not taken 分支&lt;/li&gt;&lt;li&gt;&lt;code&gt;mul x0, x1, x2&lt;/code&gt;：CPI = 2.0，说明可以 2 Multiply/cycle&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;reorder-buffer&#34;&gt;Reorder Buffer&lt;a class=&#34;headerlink&#34; href=&#34;#reorder-buffer&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Retirement 8 uOps/cycle&lt;/li&gt;&lt;li&gt;Reorder Buffer is 650+ uOps&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为了测试 ROB 的大小，设计了一个循环，循环开始是 8 条串行的 fsqrt 指令，每条指令需要 13 个周期，由于数据依赖，一共需要 8*13=104 个周期完成。之后是若干条 NOP 指令，当 NOP 指令比较少时，循环的时候取决于 fsqrt 指令的时间，一次循环大约需要 104 个周期；当 NOP 指令数量过多，填满了 ROB 以后，就会导致 ROB 无法保存下一次循环的 fsqrt 指令，性能出现下降。测试结果如下：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_rob.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;当 NOP 数量达到 676 时，性能开始急剧下滑，而执行 676 条 NOP 只需要 676/8=84.5 个周期，小于 104 个周期，说明瓶颈不在执行 NOP 上，而是因为 ROB 被填满，导致后续的 fsqrt 指令无法及时执行。因此认为 Oryon 的 ROB 大小在 680+。&lt;/p&gt;&lt;p&gt;没有观察到类似 Firestorm 的 Coalesced ROB 的设计。&lt;/p&gt;&lt;h3 id=&#34;load-store-unit--l1-dcache&#34;&gt;Load Store Unit + L1 DCache&lt;a class=&#34;headerlink&#34; href=&#34;#load-store-unit--l1-dcache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;96KB&lt;/strong&gt; 6-way L1 DCache&lt;/li&gt;&lt;li&gt;&lt;strong&gt;224-entry&lt;/strong&gt; &lt;strong&gt;7-way&lt;/strong&gt; L1 DTLB, supports 4KB and 64KB translation granules&lt;/li&gt;&lt;li&gt;Up to 4 Load-Store operations per cycle&lt;/li&gt;&lt;li&gt;192 entry Load Queue, 56 entry Store Queue&lt;/li&gt;&lt;li&gt;Full 64B/cycle for both fills and evictions to L2 cache&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;l1-dcache-容量&#34;&gt;L1 DCache 容量&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dcache-容量&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;构造不同大小 footprint 的 pointer chasing 链，测试不同 footprint 下每条 load 指令耗费的时间：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_l1dc.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 96KB 出现了明显的拐点，对应的就是 96KB 的 L1 DCache 容量。&lt;/p&gt;&lt;h4 id=&#34;l1-dtlb-容量&#34;&gt;L1 DTLB 容量&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dtlb-容量&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;用类似的方法测试 L1 DTLB 容量，只不过这次 pointer chasing 链的指针分布在不同的 page 上，使得 DTLB 成为瓶颈：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_dtlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 224 Page 出现了明显的拐点，对应的就是 224 的 L1 DTLB 容量。从每个 page 一个指针改成每 32 page 一个指针并注意对齐尽量保证 Index 为 0，此时 L1 DTLB 容量降为 7，说明 L1 DTLB 是 7 路组相连结构，32 个 Set，Index 位是 VA[16:12]，这些页被映射到了相同的 Set 当中：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_dtlb_7.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;命中 L1 DTLB 时每条 Load 指令是 3 cycle，意味着高通实现了 3 cycle 的 pointer chasing load to use latency，这个特性在苹果，Exynos M-series 和 Intel 的 E-core 中也可以看到，针对这个优化的讨论，详见 &lt;a href=&#34;../../../../2022/03/31/brief-into-ooo-2/&#34;&gt;浅谈乱序执行 CPU（二：访存）&lt;/a&gt; 的 Load Pipeline 小节。在其他场景下，依然是 4 cycle 的 load to use latency。&lt;/p&gt;&lt;h4 id=&#34;loadstore-带宽&#34;&gt;Load/Store 带宽&lt;a class=&#34;headerlink&#34; href=&#34;#loadstore-带宽&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;针对 Load Store 带宽，实测每个周期可以完成：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;4x 128b Load&lt;/li&gt;&lt;li&gt;3x 128b Load + 1x 128b Store&lt;/li&gt;&lt;li&gt;2x 128b Load + 2x 128b Store&lt;/li&gt;&lt;li&gt;1x 128b Load + 2x 128b Store&lt;/li&gt;&lt;li&gt;2x 128b Store&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果把每条指令的访存位宽从 128b 改成 256b，读写带宽不变，指令吞吐减半。也就是说最大的读带宽是 64B/cyc，最大的写带宽是 32B/cyc，二者不能同时达到。&lt;/p&gt;&lt;p&gt;不太确定的是高通官方的表述里 &lt;code&gt;Up to 4 Load-Store operations per cycle&lt;/code&gt; 对于 4 Store ops per cycle 以什么方式成立，因为从 IPC 来看，只能达到 2 Store Per Cycle。&lt;/p&gt;&lt;h4 id=&#34;l1-dcache-分-bank&#34;&gt;L1 DCache 分 Bank&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dcache-分-bank&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;考虑到 L1 DCache 需要单周期支持 4 条 Load 指令，如果要用单读口的 SRAM，一般的做法是设计 4 个 Bank，每个 Bank 对应一组 SRAM。为了测试 Bank 的粒度，使用不同跨步（Stride）的 Load，观察 IPC：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Stride=1B/2B/4B/8B/16B/32B/64B 时 IPC=4&lt;/li&gt;&lt;li&gt;Stride=128B 时 IPC=2&lt;/li&gt;&lt;li&gt;Stride=256B 时 IPC=1&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;当多个 Load 访问同一个 Cache Line 时，这些 Load 可以同时进行，极限情况下用 4 条 128b Load 可以做到一个周期把整个 64B Cache Line 都读出来；Stride=128B 时，IPC 砍半，说明只有一半的 Bank 得到了利用，进一步 Stride=256B 时，IPC=1，说明只有一个 Bank 被用上。那么 L1 DCache 的组织方式应该是 4 个 Bank，Bank Index 对应 PA[7:6]，也就是连续的四个 64B Cache Line 会被映射到四个 Bank 上。当多个 Load 被映射到同一个 Bank 且访问的不是同一个 Cache Line 时，会出现性能损失。&lt;/p&gt;&lt;h4 id=&#34;vipt&#34;&gt;VIPT&lt;a class=&#34;headerlink&#34; href=&#34;#vipt&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;在 4KB page 的情况下，96KB 6-way 的 L1 DCache 不满足 VIPT 的 Index 全在页内偏移的条件（详见 &lt;a href=&#34;../../../../2023/12/08/vipt-l1-cache-page-size/&#34;&gt;VIPT 与缓存大小和页表大小的关系&lt;/a&gt;），此时要么改用 PIPT，要么在 VIPT 的基础上处理 alias 的问题。为了测试这一点，参考 &lt;a href=&#34;https://blog.cyyself.name/why-the-big-l1-cache-is-so-hard/&#34;&gt;浅谈现代处理器实现超大 L1 Cache 的方式&lt;/a&gt; 的测试方法，用 shm 构造出两个 4KB 虚拟页映射到同一个物理页的情况，然后在两个虚拟页之间 copy，发现相比在同一个虚拟页内 copy 有显著的性能下降，并且产生了大量的 L1 DCache Refill：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;copy from aliased page = 8407465601 cycles, 321782134 refills&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;baseline = 1239053083 cycles, 20 refills&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;slowdown = 6.79x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此猜测 L1 DCache 采用的是 VIPT，并做了针对 alias 的正确性处理。如果是 PIPT，那么 L1 DCache 会发现这两个页对应的是相同的物理地址，性能不会下降，也不需要频繁的 refill。&lt;/p&gt;&lt;h4 id=&#34;memory-dependency-predictor&#34;&gt;Memory Dependency Predictor&lt;a class=&#34;headerlink&#34; href=&#34;#memory-dependency-predictor&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;为了预测执行 Load，需要保证 Load 和之前的 Store 访问的内存没有 Overlap，那么就需要有一个预测器来预测 Load 和 Store 之前在内存上的依赖。参考 &lt;a href=&#34;https://blog.stuffedcow.net/2014/01/x86-memory-disambiguation/&#34;&gt;Store-to-Load Forwarding and Memory Disambiguation in x86 Processors&lt;/a&gt; 的方法，构造两个指令模式，分别在地址和数据上有依赖：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;数据依赖，地址无依赖：&lt;code&gt;str x3, [x1]&lt;/code&gt; 和 &lt;code&gt;ldr x3, [x2]&lt;/code&gt;&lt;/li&gt;&lt;li&gt;地址依赖，数据无依赖：&lt;code&gt;str x2, [x1]&lt;/code&gt; 和 &lt;code&gt;ldr x1, [x2]&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;初始化时，&lt;code&gt;x1&lt;/code&gt; 和 &lt;code&gt;x2&lt;/code&gt; 指向同一个地址，重复如上的指令模式，观察到多少条 &lt;code&gt;ldr&lt;/code&gt; 指令时会出现性能下降：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_memory_dependency_predictor.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;有意思的是，两种模式出现了不同的阈值，地址依赖的阈值是 64，而数据依赖的阈值是 96。&lt;/p&gt;&lt;h4 id=&#34;store-to-load-forwarding&#34;&gt;Store to Load Forwarding&lt;a class=&#34;headerlink&#34; href=&#34;#store-to-load-forwarding&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;经过实际测试，如下的情况可以成功转发：&lt;/p&gt;&lt;p&gt;对地址 x 的 Store 转发到对地址 y 的 Load 成功时 y-x 的取值范围：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Store\Load&lt;/th&gt;&lt;th&gt;8b Load&lt;/th&gt;&lt;th&gt;16b Load&lt;/th&gt;&lt;th&gt;32b Load&lt;/th&gt;&lt;th&gt;64b Load&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;8b Store&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;[-1,0]&lt;/td&gt;&lt;td&gt;[-3,0]&lt;/td&gt;&lt;td&gt;[-7,0]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16b Store&lt;/td&gt;&lt;td&gt;[0,1]&lt;/td&gt;&lt;td&gt;[-1,1]&lt;/td&gt;&lt;td&gt;[-3,1]&lt;/td&gt;&lt;td&gt;[-7,1]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;32b Store&lt;/td&gt;&lt;td&gt;[0,3]&lt;/td&gt;&lt;td&gt;[-1,3]&lt;/td&gt;&lt;td&gt;[-3,3]&lt;/td&gt;&lt;td&gt;[-7,3]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;64b Store&lt;/td&gt;&lt;td&gt;[0,7]&lt;/td&gt;&lt;td&gt;[-1,7]&lt;/td&gt;&lt;td&gt;[-3,7]&lt;/td&gt;&lt;td&gt;[-7,7]&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;从上表可以看到，所有 Store 和 Load Overlap 的情况，无论地址偏移，都能成功转发，不过代价是如果 Load 或 Store 跨越 64B 缓存行的边界时就会转发失败，毕竟在只有部分覆盖的情况下，剩下的部分需要从缓存中读取。Apple Firestorm 和 Qualcomm Oryon 比较类似，所有 Overlap 情况下都可以成功转发，但即使是跨越 64B 缓存行也可以成功转发，只需要多花费一个周期。&lt;/p&gt;&lt;p&gt;一个 Load 需要转发两个 Store 的数据的情况比较奇怪：对地址 x 的 32b Store 和对地址 x+4 的 32b Store 转发到对地址 y 的 64b Load，要求 x%4==0，不跨越 64B 缓存行，对 y-x 除了 Overlap 以外没有额外的要求。Apple Firestorm 则没有 x%4==0 这个局限性，但在跨越 64B 缓存行时也不能转发。&lt;/p&gt;&lt;p&gt;但 64b Load 就不支持从 4 个 16b Store 转发了，8 个 8b Store 也不支持。Apple Firetorm 则都支持，相比从单个 Store 转发多 1-2 个周期。&lt;/p&gt;&lt;p&gt;由此看出 Oryon 和 &lt;a href=&#34;../../../11/11/amd_zen5/&#34;&gt;Zen 5&lt;/a&gt; 以及 &lt;a href=&#34;../../../11/07/arm_neoverse_v2/&#34;&gt;Neoverse V2&lt;/a&gt; 在设计思路上的不同：Oryon 追求 Load 和 Store 的自由组合，允许只有一部分覆盖，也无所谓地址偏移是多少，但也牺牲了跨 64B 缓存行时的性能。此外，Oryon 针对一个 Load 转发两个 Store 的情况的支持比较特别，要求 Store 地址对齐到 4B。&lt;/p&gt;&lt;p&gt;成功转发时 9 cycle，有 Overlap 但转发失败时 17-23 cycle，跨缓存行时要 40+ cycle。&lt;/p&gt;&lt;p&gt;小结：Qualcomm Oryon 的 Store to Load Forwarding：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;1 ld + 1 st: 要求不跨越 64B 边界&lt;/li&gt;&lt;li&gt;1 ld + 2 st: 要求 ld 对齐到 4B 边界且不跨越 64B 边界&lt;/li&gt;&lt;li&gt;1 ld + 4 st: 不支持&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;load-to-use-latency&#34;&gt;Load to use latency&lt;a class=&#34;headerlink&#34; href=&#34;#load-to-use-latency&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Oryon 的 Load to use latency 针对 pointer chasing 场景做了优化，在下列的场景下可以达到 3 cycle:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;ldr x0, [x0]&lt;/code&gt;: load 结果转发到基地址，无偏移&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldr x0, [x0, 8]&lt;/code&gt;：load 结果转发到基地址，有立即数偏移&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldr x0, [x0, x1]&lt;/code&gt;：load 结果转发到基地址，有寄存器偏移&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldp x0, x1, [x0]&lt;/code&gt;：load pair 的第一个目的寄存器转发到基地址，无偏移&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在下列场景下 Load to use latency 则是 4 cycle：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;load 的目的寄存器作为 alu 的源寄存器（下称 load to alu latency）&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldr x0, [sp, x0, lsl #3]&lt;/code&gt;：load 结果转发到 index&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在下列场景下 Load to use latency 则是 5 cycle：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;ldp x1, x0, [x0]&lt;/code&gt;：load pair 的第二个目的寄存器转发到基地址，无偏移&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;比较奇怪的是 &lt;code&gt;ldr x0, [x0]&lt;/code&gt; 在跨越 8B 边界时的行为，load to load latency 退化为 6 cycle，load to alu latency 则是 4 cycle。Apple Firestorm 则没有这个问题，在跨越 8B 边界甚至 64B 边界时，实现了 4 cycle load to load latency 和 4 cycle load to alu latency。&lt;/p&gt;&lt;h3 id=&#34;mmu&#34;&gt;MMU&lt;a class=&#34;headerlink&#34; href=&#34;#mmu&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;4KB and 64KB translation granules&lt;/li&gt;&lt;li&gt;1 cycle access for L1 ITLB &amp;amp; L1 DTLB&lt;/li&gt;&lt;li&gt;Unified L2 TLB, 8-way &amp;gt;8K entry&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;l2-cache&#34;&gt;L2 Cache&lt;a class=&#34;headerlink&#34; href=&#34;#l2-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;12MB 12-way L2 Cache&lt;/li&gt;&lt;li&gt;MOESI&lt;/li&gt;&lt;li&gt;17 cycle latency for L1 miss to L2 hit&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;memory&#34;&gt;Memory&lt;a class=&#34;headerlink&#34; href=&#34;#memory&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;6MB System Level Cache, 26-29ns latency, 135GB/s bandwidth in each direction&lt;/li&gt;&lt;li&gt;LPDDR5x DRAM, 8448 MT/s, 8 channel of 16 bits, 135GB/s bandwidth, 102-104ns latency&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/hardware/2024/09/01/qualcomm_oryon/</link> <pubDate>Sun, 01 Sep 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/09/01/qualcomm_oryon/</guid> </item> <item> <title>分支预测的 2-taken 和 2-ahead</title> <category>arm</category> <category>branch</category> <category>cortex</category> <category>cpu</category> <category>hardware</category> <category>ooo</category> <category>prediction</category> <category>predictor</category> <description>&lt;h1 id=&#34;分支预测的-2-taken-和-2-ahead&#34;&gt;分支预测的 2-taken 和 2-ahead&lt;a class=&#34;headerlink&#34; href=&#34;#分支预测的-2-taken-和-2-ahead&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;随着 Zen 5 的推出，更多 Zen5 的架构设计细节被公开，可以看到 Zen 5 前端出现了令人瞩目的变化：引入了 2-taken, 2-ahead 分支预测的设计。这是什么意思？它架构上是怎么实现的？可以带来哪些性能提升？&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;背景知识&#34;&gt;背景知识&lt;a class=&#34;headerlink&#34; href=&#34;#背景知识&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;首先还是回顾一下处理器前端在做的事情：根据 PC，从 ICache 读取指令，然后译码，发给后端取执行。但是执行的的指令里有大量的分支指令，它们会改变 PC，后续指令需要从新的 PC 处取，但是取指的时候并不知道分支指令未来会如何跳转，如果每次分支指令都要刷流水线重新取指，就会产生很多的流水线空泡，因此就有了分支预测。&lt;/p&gt;&lt;p&gt;分支预测和取指是同时进行的：取指令的同时，也在预测这些指令是否会跳转，如果会跳转，跳转的目的地址是多少，用于指导下一个周期从哪里取指。为了做到这个事情，首先需要知道有没有分支或跳转指令，这个信息会保存在 BTB 中，或者要等到取指完成，译码后才知道哪些是分支或跳转指令。如果有，对于条件分支指令来说，需要一个方向预测器（CBP），判断分支是否会跳转，还需要一个分支目的地址缓存（BTB），如果分支要跳的话，知道要跳到什么地方。除了条件分支指令以外，针对 return 指令，跳转的地址和此前 call 对应，需要记录调用的返回地址栈（RAS）。针对其他的间接跳转指令，例如函数指针调用，一个跳转可能有多个目的地址，还需要一个针对间接跳转的目的地址的预测器（IBP）。这些组件（CBP、BTB、RAS 和 IBP）构成了现代处理器的分支预测器。&lt;/p&gt;&lt;p&gt;在此基础上，目前比较流行分离式/解耦式前端（Decoupled Frontend）：和耦合/非分离式前端相对，耦合前端是说分支预测器和指令缓存紧密协作，分支预测器指导下一次取指的地址，取出的指令立即用于分支预测器。分离式前端把分支预测器变成了生产者，生产取指的地址，然后指令缓存是生产者，消费取指的地址，从缓存读取指令，进行后续的译码，消费者和生产者之间通过队列（Fetch Target Queue）隔开。这样，分支预测器可以独立指令缓存工作，在前面抢跑，即使指令缓存出现了缺失，也可以继续预测未来很多个指令之后的分支。更进一步，还可以根据抢跑的这些分支的信息，提前把指令从 L2 缓存预取到 L1 指令缓存，那么未来指令缓存要取指令的时候，大概率已经在缓存当中了。&lt;/p&gt;&lt;p&gt;当然了，解耦式前端的抢跑也是有代价的：此时分支预测器对未来取出的指令实际上会是什么样是不知道的，只能依赖 BTB 中记录的历史信息，所以 BTB 一般都会做的比较大。但与此同时，耦合式前端可以在 L1 指令缓存从 L2 加载指令时做预译码，找到其中的分支，然后拿 L1 指令缓存作为更大的 BTB，例如 Apple M1 Firestorm 就可以拿巨大的 192KB L1 指令缓存作为 BTB，等效 BTB 容量特别巨大。孰好孰坏，现在还看不清楚。&lt;/p&gt;&lt;p&gt;那么一个分支，从分支预测，到取指，执行，会经历哪些阶段呢？首先是分支预测，分支预测器会把那些会跳转的情况找出来，因为它会影响下一次取指的地址；如果没有分支跳转，或者有分支但是不跳转，那就比较简单，下一次取指地址就直接顺着地址往下算就可以。取指译码以后，会和之前预测的情况做比对，如果发现预测成了分支，结果实际上不是分支，说明分支预测器错了，及时修正。执行的时候，按照分支指令的操作数，实际判断一下要不要跳转，和之前预测的结果比对。如果对了，那就皆大欢喜；如果错了，那就要刷掉那些错误预测的指令。当然还要通知一下分支预测器，让他更新预测的计数器。&lt;/p&gt;&lt;p&gt;接下来回到本文的主题：分支预测最近几年来比较大的一些改动。&lt;/p&gt;&lt;h2 id=&#34;2-branch&#34;&gt;2 branch&lt;a class=&#34;headerlink&#34; href=&#34;#2-branch&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;刚才提到，分支参与到预测，取指，执行等阶段之中，其中执行阶段是比较简单的，所以比较容易扩展，例如 Cortex-A77 引入了第二个分支执行单元，每个周期可以执行两条分支指令，目前很多高性能处理器都采用了两个分支执行单元。但大部分处理器每个周期只能预测一个分支，这样每个周期只用访问一次 BTB 等结构，那似乎两个分支执行单元没有什么用？毕竟如果第一个分支跳转了，那第二个分支的地址需要依赖第一个分支的目的地址计算得出，这样这两个分支的预测就一定程度上就串行化了，这个是比较困难的。但如果第一个分支不跳转，去预测第二个分支跳转或者不跳转，这个还是相对比较好支持的。这样，分支预测时，每个周期可以最多预测一个 taken 分支，但同时还可以有 not taken 分支。此外，还有那种从来没有 taken 过的分支，这种一般为了节省 BTB 存储，一般是不记录在 BTB 内部的。考虑到这些情况，设计两个分支执行单元会有一些收益。&lt;/p&gt;&lt;p&gt;但是为什么没有增加到三个呢？还真有，Zen 5 就增加到了三个分支执行单元，但是增加到三个的前提是每周期可以预测两个 taken 分支，否则性能收益很小。这是怎么做到的呢？下面我们来讨论这个问题。&lt;/p&gt;&lt;h2 id=&#34;2-taken2-ahead&#34;&gt;2-taken/2-ahead&lt;a class=&#34;headerlink&#34; href=&#34;#2-taken2-ahead&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;刚才提到，想要进一步提升分支预测和执行能力，需要支持每个周期预测更多的 taken 分支，刚才是 1 个，现在就要 2 个。ARM 在 Cortex-A78 上添加了 2-taken 分支预测的支持，也就是可以每周期最多可以预测两个 taken 的分支。这是怎么做到的？如果做的非常通用，就要像上面说的那样，先预测第一个分支，拿第一个分支预测的结果，再去预测第二个分支，这件事情要在一个周期内完成，这个挑战是很大的。我们来分析一下：&lt;/p&gt;&lt;p&gt;假如现在有四个基本块 A、B、C 和 D，并且按照这个顺序执行，也就是说，A 最后的指令是一个分支，跳转到 B，同理 B 跳转到 C，C 跳转到 D。经典的分支预测算法，用 A 去预测 B，用 B 去预测 C，用 C 去预测 D，这样每个周期预测一个 taken 分支。那么如果要实现 2-taken 预测算法，假如已知了 A，那就要预测 B 和 C，但是就必须先拿 A 预测 B，再拿 B 预测 C，这样就串行了，时序很难保证。当然也可以同时搞两套预测，一套用 A 预测 B，一套用 A 预测 C，但是这样每个分支要记录的信息就翻倍了。&lt;/p&gt;&lt;p&gt;在论文 Multiple-Block Ahead Branch Predictors 中可以看到一种更通用做法，称为 2-ahead：已知 A 和 B，用 A 去预测 C，用 B 去预测 D。此时分支预测的就是间隔一次以后的目的地址，而不是直接的目的地址，这样的设计下，BTB 等结构需要变成双端口，这样才能同时预测两个分支：A 和 B。预测出 C 和 D 以后，再用同样的办法去预测 E 和 F，这样持续下去。当然论文设计的比这里讲的更复杂一点，具体细节见论文。&lt;/p&gt;&lt;p&gt;我们不知道 ARM 具体如何实现的 2-taken，但是可以猜想它做了一些限制，例如虽然两个分支都是 taken，但是可能对偏移、地址有一些限制，例如要求在同一个 cacheline 内。Intel 的 Golden Cove 架构，AMD 的 Zen 4 架构也实现了 2-taken，都有或多或少类似的限制。&lt;a href=&#34;https://chipsandcheese.com/2023/10/08/zen-5s-leaked-slides/&#34;&gt;Chips and Cheese&lt;/a&gt; 是这么描述 Intel 和 ARM 的 2-taken 支持的：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Rocket Lake could unroll small loops within its loop buffer, turning takenbranches into not-taken ones from the fetch perspective. Arm’s Neoverse N2 andCortex X2 can also sustain two taken branches per cycle by using a 64 entrynano-BTB.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在 AMD 针对 Zen 2 的 Software Optimization Guide for AMD Family 17h Models 30h and Greater Processors 中也明确指出，BTB 每个条目最多可以记录同一个 cache line 里的两个分支，但是要求第一个分支是条件分支，这为 2-taken 分支预测提供了必要的信息，但也有限制：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The branch target buffer (BTB) is a three-level structure accessed using thefetch address of the current fetch block. Each BTB entry includes informationfor branches and their targets. Each BTB entry can hold up to two branches ifthe branches reside in the same 64-byte aligned cache line and the first branchis a conditional branch.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;因此，可以用 2-taken 表示限制比较多的每个周期可以预测 2 个 taken 的算法，而用 2-ahead 表示更加通用的预测 2 个 taken 的算法。即使做了 2-taken 的预测器支持，也未必可以每周期执行 2 个 taken 分支，例如 AMD 在论文 &lt;a href=&#34;https://ieeexplore.ieee.org/document/10466769&#34;&gt;AMD Next-Generation “Zen 4” Core and 4th Gen AMD EPYC Server CPUs&lt;/a&gt; 是这么表述 Zen 4 的 2-taken 实现的：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;To better feed the wide execution engine, AMD has implemented several front-endbandwidth improvements on “Zen 4.” One is the ability to predict and dispatch upto two taken branches per cycle. While the Instruction Cache (I-Cache) orOperation Cache (Op Cache) fetch limits the sustained fetch bandwidth to onetaken branch per cycle, predicting two taken branches per cycle allows thebranch predictor to run ahead more often and compensate for existing branchprediction stall cycles. Dispatching up to two taken branches per cycle, andoptimizations of the integer scheduler assignment allow “Zen 4” to fill theout-of-order part of the machine faster once a dispatch (allocation) stall hasbeen resolved.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;也就是说，虽然做了 2-taken/2-ahead，只是分支预测的带宽增加了，每个周期可以预测更多的分支，但这还不够。前面也提到了，分支预测器是生产者，指令缓存是消费者，生产者的性能提升了，那么消费者的性能也要相应提升才是。但是指令缓存是一片很大的 SRAM，功耗和时序都比较麻烦，所以改起来比较困难。如果单纯增加指令缓存一次取指的宽度，例如 8 字节提升到 16 字节，对于分支密度低的情况比较有效，但如果分支很多，那么这样效果也不会很好，要提升性能，就要考虑双端口，每个周期从两个不同的地址取指。这就是 Zen 5 做的事情。&lt;/p&gt;&lt;h2 id=&#34;2-fetch&#34;&gt;2-fetch&lt;a class=&#34;headerlink&#34; href=&#34;#2-fetch&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Zen 5 除了 2-taken 以外，还实现了 2-fetch，也就是每个周期可以预测未来的两个分支，并从两个地址取指令，分别译码，然后再拼起来。此外，Zen 5 的双取指还可以服务于超线程，每个线程用一个取指流水线。当超线程空闲的时候，两个取值流水线可以服务于同一个线程，提供更高的性能。&lt;/p&gt;&lt;p&gt;目前 Zen 5 的实现细节还不清晰，期待未来更多的微架构解析。&lt;/p&gt;&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;a class=&#34;headerlink&#34; href=&#34;#参考文献&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2024/07/26/zen-5s-2-ahead-branch-predictor-unit-how-30-year-old-idea-allows-for-new-tricks/&#34;&gt;Zen 5’s 2-Ahead Branch Predictor Unit: How a 30 Year Old Idea Allows for New Tricks&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.anandtech.com/show/15813/arm-cortex-a78-cortex-x1-cpu-ip-diverging/2&#34;&gt;Arm&#39;s New Cortex-A78 and Cortex-X1 Microarchitectures: An Efficiency and Performance Divergence - Anandtech&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.techpowerup.com/review/amd-zen-5-technical-deep-dive/3.html&#34;&gt;AMD Zen 5 Technical Deep Dive&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://hothardware.com/reviews/amd-ryzen-ai-zen-5-architecture-overview&#34;&gt;AMD Zen 5 Architecture Reveal: A Ryzen 9000 And Ryzen AI 300 Deep Dive&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.tomshardware.com/pc-components/cpus/amd-deep-dives-zen-5-ryzen-9000-and-strix-point-cpu-rdna-35-gpu-and-xdna-2-architectures/4&#34;&gt;AMD deep-dives Zen 5 architecture — Ryzen 9000 and AI 300 benchmarks, RDNA 3.5 GPU, XDNA 2, and more&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://cseweb.ucsd.edu/~calder/papers/UCSD-CS00-645.pdf&#34;&gt;Optimizations Enabled by a Decoupled Front-End Architecture&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.anandtech.com/show/14384/arm-announces-cortexa77-cpu-ip/3&#34;&gt;The Cortex-A77 µarch: Added ALUs &amp;amp; Better Load/Stores&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/237090.237169&#34;&gt;Multiple-Block Ahead Branch Predictors&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2021/12/02/popping-the-hood-on-golden-cove/&#34;&gt;Popping the Hood on Golden Cove&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.anandtech.com/show/17585/amd-zen-4-ryzen-9-7950x-and-ryzen-5-7600x-review-retaking-the-high-end/8&#34;&gt;AMD Zen 4 Ryzen 9 7950X and Ryzen 5 7600X Review: Retaking The High-End&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/document/10466769&#34;&gt;AMD Next-Generation “Zen 4” Core and 4th Gen AMD EPYC Server CPUs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/hardware/2024/08/02/branch-prediction-2-taken-2-ahead/</link> <pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/08/02/branch-prediction-2-taken-2-ahead/</guid> </item> <item> <title>在 Surface Laptop 7 上运行 Debian Linux</title> <category>aarch64</category> <category>debian</category> <category>hardware</category> <category>linux</category> <category>qcom</category> <category>qualcomm</category> <category>surface</category> <category>xelite</category> <description>&lt;h1 id=&#34;在-surface-laptop-7-上运行-debian-linux&#34;&gt;在 Surface Laptop 7 上运行 Debian Linux&lt;a class=&#34;headerlink&#34; href=&#34;#在-surface-laptop-7-上运行-debian-linux&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;最近借到一台 Surface Laptop 7 可以拿来折腾，它用的是高通 Snapdragon X Elite 处理器，跑的是 Windows on Arm 系统。但作为 Linux 用户，肯定不满足于 WSL，而要裸机上安装 Linux。由于这个机器太新，所以安装的过程遇到了很多坎坷。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;上游进展&#34;&gt;上游进展&lt;a class=&#34;headerlink&#34; href=&#34;#上游进展&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;目前 X Elite 处理器的上游支持已经逐步完善，但是还是需要很新的内核，也就是最近才合并了 X Elite 的两个笔记本的 device tree 支持进内核。我用的是 v6.11-rc1-43-g94ede2a3e913 版本的内核，目前可以正常显示，Wi-Fi 正常，USB Type-C 口正常工作（键盘，鼠标，有线网都可以通过 USB 接到电脑上），内置的键盘、触摸板和触摸屏不工作。希望后续可以获得更好的硬件支持。&lt;/p&gt;&lt;h2 id=&#34;折腾过程&#34;&gt;折腾过程&lt;a class=&#34;headerlink&#34; href=&#34;#折腾过程&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;高通和 Linaro 在去年的时候推出了一个实验性的 Debian Installer Image：https://git.codelinaro.org/linaro/qcomlt/demos/debian-12-installer-image，它针对的设备是高通自己的 CRD 设备，和 Surface Laptop 7 不同。自然，把这个 image 写到 U 盘里并启动是不行的。&lt;/p&gt;&lt;p&gt;需要注意的是，Surface Laptop 7 默认安装了 Windows，并且开启了安全启动，而我们自己编译的 Linux 内核自然是过不了安全启动的，所以要去固件关闭安全启动。由于 Windows 的 Bitlocker 默认是打开的，请先保证你可以获取 Bitlocker recovery key，不然之后可能进不去 Windows 系统了。安装双系统前，记得在 Windows 里准备好分区表，空间不够的话，可以在线缩小 NTFS。&lt;/p&gt;&lt;p&gt;进入固件的方法：按住音量上键开机。开机后，可以看到 Surface UEFI 的界面，可以调启动顺序，也可以关闭安全启动。为了安装方便，建议把 USB Storage 放到第一个。&lt;/p&gt;&lt;p&gt;接着就开始启动 U 盘里的 Debian Installer Image 了。启动以后，可以看到进入了 grub shell，目测是 grub 找不到自己的配置文件，可以在 (hd1,msdos1)/boot/grub 下面找到。但是这个 image 的 device tree 和 kernel 都比较老，直接启动会发现，Debian Install 进去了，但是内置键盘和外置 USB 键盘都不工作，于是没法进行进一步的安装。&lt;/p&gt;&lt;p&gt;这时候，在网上搜索了一下已有的在 X Elite 上运行 Linux 的尝试，发现有人在 ASUS 的 X Elite 笔记本上装好了（&lt;a href=&#34;https://matrix.org/_matrix/media/v3/download/matrix.org/hrxnkHBVEacnUGKSnHPMUHRX/1000004724.jpg&#34;&gt;来源&lt;/a&gt;），我就试着用 ASUS 对应型号笔记本的 device tree 去启动，依然不行，经过了解后（感谢 @imbushuo），得知 Surface 的内置键盘等外设需要通过 SAM 访问，需要额外的配置，目前不确定能否通过 device tree 启用。&lt;/p&gt;&lt;p&gt;但很快也发现有人在 Surface Laptop 7 上跑起来了（&lt;a href=&#34;https://x.com/merckhung/status/1804972131182354604&#34;&gt;来源&lt;/a&gt;），我发邮件问了这个作者，作者说他用的是外置的键盘，内置的键盘也不工作。放大观察作者录的视频，发现用的是最新的 master 分支的 Linux 内核，并且用的就是 CRD 的 device tree。到这里就比较有思路了：自己编译一个内核，然后用 x1e80100-crd.dtb 作为 device tree。&lt;/p&gt;&lt;p&gt;于是魔改了 Debian Installer Image：替换掉 linux 内核，换成自己编译的最新版，解开 initrd，把里面的 kernel modules 也换成新内核的版本，再把新的 x1e80100-crd.dtb 复制上去，再用 grub 启动新内核 + 新 initrd + 新 Device Tree，发现 USB 外接键盘工作了！虽然只有 Type-C 工作，但是也足够完成剩下的工作了。&lt;/p&gt;&lt;p&gt;不过在安装 Debian 的时候，还遇到了小插曲：glibc 版本不够新，估计是 Linaro 的 Image 太老了。于是我从新的 debian arm64 里复制了 libc.so.6 和 ld-linux-aarch64.so.1，覆盖掉 initrd 里的旧版本，这样就好了。&lt;/p&gt;&lt;p&gt;安装完以后，安装的系统里的内核是 debian 的最新内核，但是不够新，于是又老传统：手动 arch-chroot 进新的 sysroot，安装新的内核。也可以像 Linaro 仓库里指出的那样，直接替换 Debian Installer Image 里的 deb，但是我发现我打的 deb 太大了（毕竟 defconfig），放不进文件系统，只好最后自己手动装。&lt;/p&gt;&lt;p&gt;最后在 grub 配置里添加 devicetree 加载命令，再从 Debian Installer Image 的 grub 配置偷 linux cmdline，最终是 grub 配置是这个样子：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;devicetree&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/boot/x1e80100-crd.dtb&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Loading Linux 6.11.0-rc1-00043-g94ede2a3e913 ...&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;linux&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/boot/vmlinuz-6.11.0-rc1-00043-g94ede2a3e913&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ro&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;efi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;novamap&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;pd_ignore_unused&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;clk_ignore_unused&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fw_devlink&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;off&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cma&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;128M&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;quiet&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Loading initial ramdisk ...&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;initrd&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/boot/initrd.img-6.11.0-rc1-00043-g94ede2a3e913&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样搞完，Debian 系统就正常起来了！&lt;/p&gt;&lt;p&gt;本文也发到了 Reddit 上：https://www.reddit.com/r/SurfaceLinux/comments/1efmyb3/managed_to_install_baremetal_linux_on_snapdragon/&lt;/p&gt;&lt;p&gt;UPDATE:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;(2024-07-31 更新) 不知道为啥，无线网卡忽然被 rfkill 了，没有找到原因，Windows 里可以继续正常使用&lt;/li&gt;&lt;li&gt;(2024-07-31 更新) CPUFreq 驱动已经有 patch：&lt;a href=&#34;https://patchew.org/linux/20240612124056.39230-1-quic._5Fsibis@quicinc.com/&#34;&gt;[PATCH V6 0/5] qcom: x1e80100: Enable CPUFreq&lt;/a&gt;，打上即可自动调频&lt;/li&gt;&lt;li&gt;(2024-07-31 更新) 内置的键盘的问题修好了，需要额外的补丁，见 https://github.com/jiegec/linux/tree/surface-laptop-7。&lt;/li&gt;&lt;li&gt;(2024-09-05 更新) 上游合并了 Surface Laptop 7 (Romulus 13/15) 的 Device Tree (&lt;code&gt;arch/arm64/boot/dts/qcom/x1e80100-microsoft-romulus13.dts&lt;/code&gt;)，内置的键盘也直接支持了，直接用上游的 Device Tree 即可启动，见 https://github.com/jiegec/linux/tree/surface-laptop-7-next，估计 6.12 就有正式支持了&lt;/li&gt;&lt;li&gt;(2024-09-05 更新) 更新 Mesa 到 24.2.1，显卡加速也工作了&lt;/li&gt;&lt;/ol&gt;</description><link>https://jia.je/hardware/2024/07/30/debian-linux-on-surface-laptop-7/</link> <pubDate>Tue, 30 Jul 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/07/30/debian-linux-on-surface-laptop-7/</guid> </item> <item> <title>开发一个链接器（4）</title> <category>elf</category> <category>linker</category> <category>linux</category> <category>software</category> <category>write-a-linker</category> <description>&lt;h1 id=&#34;开发一个链接器4&#34;&gt;开发一个链接器（4）&lt;a class=&#34;headerlink&#34; href=&#34;#开发一个链接器4&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;a class=&#34;headerlink&#34; href=&#34;#前言&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这个系列的前三篇博客实现了一个简单的静态链接器，它可以输入若干个 ELF .o 文件，输出 ELF 可执行文件或者动态库。接下来，我们要进一步支持动态库，不仅可以生成动态库，还支持让动态库参与到静态链接当中。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;回顾&#34;&gt;回顾&lt;a class=&#34;headerlink&#34; href=&#34;#回顾&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;首先回顾一下：在这个系列的前三篇博客中，我们观察了现有链接器的工作过程，并且实现了一个简单的链接器：输入若干个 ELF object，链接成一个可以运行的 ELF 可执行文件或者 ELF 动态库。这个过程包括：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;解析输入的若干个 ELF，收集各个 section 需要保留下来的内容，合并来自不同 ELF 的同名 section&lt;/li&gt;&lt;li&gt;规划将要生成的 ELF 可执行文件的内容布局：开始是固定的文件头，之后是各个 section，计算出它们从哪里开始到哪里结束&lt;/li&gt;&lt;li&gt;如果要生成动态库，还需要针对动态链接器，构造一些额外的 section（&lt;code&gt;.dynamic&lt;/code&gt;，&lt;code&gt;.dynsym&lt;/code&gt; 和 &lt;code&gt;.dynstr&lt;/code&gt;）&lt;/li&gt;&lt;li&gt;第二步完成以后，就可以知道在运行时，各个 section 将会被加载到哪个地址上，进而更新符号表，得到每个符号在运行时会处在哪个地址上；此时我们就可以计算重定位，把地址按照预设的规则填入到对应的地方&lt;/li&gt;&lt;li&gt;如果要生成动态库，因为运行时动态库的加载地址不确定，所以在 ELF 中把加载地址设为 0，并且要求代码是地址无关代码（PIC，Position Independent Code）&lt;/li&gt;&lt;li&gt;最后按照预设的文件布局，把文件内容写入到 ELF 文件中&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;接下来我们就要支持链接动态库，在上一篇博客中，最后的这一步是用 GNU ld 完成的：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# assemble sources&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;as&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main.s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main.o&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;as&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;printer.s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;printer.o&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# ld -shared: generate shared library&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# we have implemented this in the previous blog post&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-6&#34;&gt;&lt;a id=&#34;__codelineno-0-6&#34; name=&#34;__codelineno-0-6&#34; href=&#34;#__codelineno-0-6&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ld&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-shared&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;printer.o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;libprinter.so&lt;/span&gt;&lt;span id=&#34;__span-0-7&#34;&gt;&lt;a id=&#34;__codelineno-0-7&#34; name=&#34;__codelineno-0-7&#34; href=&#34;#__codelineno-0-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-8&#34;&gt;&lt;a id=&#34;__codelineno-0-8&#34; name=&#34;__codelineno-0-8&#34; href=&#34;#__codelineno-0-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# ld -dynamic-linker: Set path to dynamic linker for the executable&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-9&#34;&gt;&lt;a id=&#34;__codelineno-0-9&#34; name=&#34;__codelineno-0-9&#34; href=&#34;#__codelineno-0-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# we are going to implement this one&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-10&#34;&gt;&lt;a id=&#34;__codelineno-0-10&#34; name=&#34;__codelineno-0-10&#34; href=&#34;#__codelineno-0-10&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ld&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-dynamic-linker&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/lib64/ld-linux-x86-64.so.2&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main.o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;libprinter.so&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main&lt;/span&gt;&lt;span id=&#34;__span-0-11&#34;&gt;&lt;a id=&#34;__codelineno-0-11&#34; name=&#34;__codelineno-0-11&#34; href=&#34;#__codelineno-0-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-12&#34;&gt;&lt;a id=&#34;__codelineno-0-12&#34; name=&#34;__codelineno-0-12&#34; href=&#34;#__codelineno-0-12&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./main&lt;/span&gt;&lt;span id=&#34;__span-0-13&#34;&gt;&lt;a id=&#34;__codelineno-0-13&#34; name=&#34;__codelineno-0-13&#34; href=&#34;#__codelineno-0-13&#34;&gt;&lt;/a&gt;Hello&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;world!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，我们要实现的就是 &lt;code&gt;ld -dynamic-linker /lib64/ld-linux-x86-64.so.2 main.o libprinter.so -o main&lt;/code&gt; 命令的功能。&lt;/p&gt;&lt;h2 id=&#34;分析&#34;&gt;分析&lt;a class=&#34;headerlink&#34; href=&#34;#分析&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;观察可执行文件&#34;&gt;观察可执行文件&lt;a class=&#34;headerlink&#34; href=&#34;#观察可执行文件&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;首先要分析一下 ld 在实现动态链接的时候，做了什么事情。观察链接得到的可执行文件 &lt;code&gt;main&lt;/code&gt;：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ld&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-dynamic-linker&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/lib64/ld-linux-x86-64.so.2&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main.o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;libprinter.so&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;readelf&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先是 ELF Header 部分：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;ELF&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Header:&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Magic:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;7f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;4c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Class:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ELF64&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Data:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;complement,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;little&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;endian&lt;/span&gt;&lt;span id=&#34;__span-2-5&#34;&gt;&lt;a id=&#34;__codelineno-2-5&#34; name=&#34;__codelineno-2-5&#34; href=&#34;#__codelineno-2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Version:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;current&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-6&#34;&gt;&lt;a id=&#34;__codelineno-2-6&#34; name=&#34;__codelineno-2-6&#34; href=&#34;#__codelineno-2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;OS/ABI:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;UNIX&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;System&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;V&lt;/span&gt;&lt;span id=&#34;__span-2-7&#34;&gt;&lt;a id=&#34;__codelineno-2-7&#34; name=&#34;__codelineno-2-7&#34; href=&#34;#__codelineno-2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ABI&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Version:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-8&#34;&gt;&lt;a id=&#34;__codelineno-2-8&#34; name=&#34;__codelineno-2-8&#34; href=&#34;#__codelineno-2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Type:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;EXEC&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Executable&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-9&#34;&gt;&lt;a id=&#34;__codelineno-2-9&#34; name=&#34;__codelineno-2-9&#34; href=&#34;#__codelineno-2-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Machine:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Advanced&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Micro&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Devices&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;X86-64&lt;/span&gt;&lt;span id=&#34;__span-2-10&#34;&gt;&lt;a id=&#34;__codelineno-2-10&#34; name=&#34;__codelineno-2-10&#34; href=&#34;#__codelineno-2-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Version:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1&lt;/span&gt;&lt;span id=&#34;__span-2-11&#34;&gt;&lt;a id=&#34;__codelineno-2-11&#34; name=&#34;__codelineno-2-11&#34; href=&#34;#__codelineno-2-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Entry&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;point&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;address:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x401030&lt;/span&gt;&lt;span id=&#34;__span-2-12&#34;&gt;&lt;a id=&#34;__codelineno-2-12&#34; name=&#34;__codelineno-2-12&#34; href=&#34;#__codelineno-2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Start&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;program&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;into&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-13&#34;&gt;&lt;a id=&#34;__codelineno-2-13&#34; name=&#34;__codelineno-2-13&#34; href=&#34;#__codelineno-2-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Start&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12696&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;into&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-14&#34;&gt;&lt;a id=&#34;__codelineno-2-14&#34; name=&#34;__codelineno-2-14&#34; href=&#34;#__codelineno-2-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Flags:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;/span&gt;&lt;span id=&#34;__span-2-15&#34;&gt;&lt;a id=&#34;__codelineno-2-15&#34; name=&#34;__codelineno-2-15&#34; href=&#34;#__codelineno-2-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;this&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-16&#34;&gt;&lt;a id=&#34;__codelineno-2-16&#34; name=&#34;__codelineno-2-16&#34; href=&#34;#__codelineno-2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;program&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-17&#34;&gt;&lt;a id=&#34;__codelineno-2-17&#34; name=&#34;__codelineno-2-17&#34; href=&#34;#__codelineno-2-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Number&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;program&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-18&#34;&gt;&lt;a id=&#34;__codelineno-2-18&#34; name=&#34;__codelineno-2-18&#34; href=&#34;#__codelineno-2-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-19&#34;&gt;&lt;a id=&#34;__codelineno-2-19&#34; name=&#34;__codelineno-2-19&#34; href=&#34;#__codelineno-2-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Number&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-20&#34;&gt;&lt;a id=&#34;__codelineno-2-20&#34; name=&#34;__codelineno-2-20&#34; href=&#34;#__codelineno-2-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;string&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;table&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;index:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和之前看到的可执行文件没什么不同：Type 是 EXEC 表示可执行文件，入口地址指向了 &lt;code&gt;main&lt;/code&gt; 的地址 &lt;code&gt;0x401030&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;接下来看 Section 部分：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;Section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Headers:&lt;/span&gt;&lt;span id=&#34;__span-3-2&#34;&gt;&lt;a id=&#34;__codelineno-3-2&#34; name=&#34;__codelineno-3-2&#34; href=&#34;#__codelineno-3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Nr&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Name&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Type&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Address&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Offset&lt;/span&gt;&lt;span id=&#34;__span-3-3&#34;&gt;&lt;a id=&#34;__codelineno-3-3&#34; name=&#34;__codelineno-3-3&#34; href=&#34;#__codelineno-3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;EntSize&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Flags&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Link&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Info&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Align&lt;/span&gt;&lt;span id=&#34;__span-3-4&#34;&gt;&lt;a id=&#34;__codelineno-3-4&#34; name=&#34;__codelineno-3-4&#34; href=&#34;#__codelineno-3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NULL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00000000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-5&#34;&gt;&lt;a id=&#34;__codelineno-3-5&#34; name=&#34;__codelineno-3-5&#34; href=&#34;#__codelineno-3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-6&#34;&gt;&lt;a id=&#34;__codelineno-3-6&#34; name=&#34;__codelineno-3-6&#34; href=&#34;#__codelineno-3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.interp&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PROGBITS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000400200&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00000200&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-7&#34;&gt;&lt;a id=&#34;__codelineno-3-7&#34; name=&#34;__codelineno-3-7&#34; href=&#34;#__codelineno-3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000000000000001c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-8&#34;&gt;&lt;a id=&#34;__codelineno-3-8&#34; name=&#34;__codelineno-3-8&#34; href=&#34;#__codelineno-3-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.hash&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;HASH&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000400220&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00000220&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-9&#34;&gt;&lt;a id=&#34;__codelineno-3-9&#34; name=&#34;__codelineno-3-9&#34; href=&#34;#__codelineno-3-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000018&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000004&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-10&#34;&gt;&lt;a id=&#34;__codelineno-3-10&#34; name=&#34;__codelineno-3-10&#34; href=&#34;#__codelineno-3-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.gnu.hash&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GNU_HASH&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000400238&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00000238&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-11&#34;&gt;&lt;a id=&#34;__codelineno-3-11&#34; name=&#34;__codelineno-3-11&#34; href=&#34;#__codelineno-3-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000000000000001c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-12&#34;&gt;&lt;a id=&#34;__codelineno-3-12&#34; name=&#34;__codelineno-3-12&#34; href=&#34;#__codelineno-3-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.dynsym&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DYNSYM&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000400258&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00000258&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-13&#34;&gt;&lt;a id=&#34;__codelineno-3-13&#34; name=&#34;__codelineno-3-13&#34; href=&#34;#__codelineno-3-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000048&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000018&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-14&#34;&gt;&lt;a id=&#34;__codelineno-3-14&#34; name=&#34;__codelineno-3-14&#34; href=&#34;#__codelineno-3-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.dynstr&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;STRTAB&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;00000000004002a0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000002a0&lt;/span&gt;&lt;span id=&#34;__span-3-15&#34;&gt;&lt;a id=&#34;__codelineno-3-15&#34; name=&#34;__codelineno-3-15&#34; href=&#34;#__codelineno-3-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000000000000001a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-16&#34;&gt;&lt;a id=&#34;__codelineno-3-16&#34; name=&#34;__codelineno-3-16&#34; href=&#34;#__codelineno-3-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.rela.plt&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;RELA&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;00000000004002c0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000002c0&lt;/span&gt;&lt;span id=&#34;__span-3-17&#34;&gt;&lt;a id=&#34;__codelineno-3-17&#34; name=&#34;__codelineno-3-17&#34; href=&#34;#__codelineno-3-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000030&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000018&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;AI&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-18&#34;&gt;&lt;a id=&#34;__codelineno-3-18&#34; name=&#34;__codelineno-3-18&#34; href=&#34;#__codelineno-3-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.plt&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PROGBITS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000401000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00001000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-19&#34;&gt;&lt;a id=&#34;__codelineno-3-19&#34; name=&#34;__codelineno-3-19&#34; href=&#34;#__codelineno-3-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000030&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;AX&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-20&#34;&gt;&lt;a id=&#34;__codelineno-3-20&#34; name=&#34;__codelineno-3-20&#34; href=&#34;#__codelineno-3-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.text&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PROGBITS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000401030&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00001030&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-21&#34;&gt;&lt;a id=&#34;__codelineno-3-21&#34; name=&#34;__codelineno-3-21&#34; href=&#34;#__codelineno-3-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000000000000000a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;AX&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-22&#34;&gt;&lt;a id=&#34;__codelineno-3-22&#34; name=&#34;__codelineno-3-22&#34; href=&#34;#__codelineno-3-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.eh_frame&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PROGBITS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000402000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00002000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-23&#34;&gt;&lt;a id=&#34;__codelineno-3-23&#34; name=&#34;__codelineno-3-23&#34; href=&#34;#__codelineno-3-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-24&#34;&gt;&lt;a id=&#34;__codelineno-3-24&#34; name=&#34;__codelineno-3-24&#34; href=&#34;#__codelineno-3-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.dynamic&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DYNAMIC&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0000000000402ec8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;00002ec8&lt;/span&gt;&lt;span id=&#34;__span-3-25&#34;&gt;&lt;a id=&#34;__codelineno-3-25&#34; name=&#34;__codelineno-3-25&#34; href=&#34;#__codelineno-3-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000120&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;WA&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-26&#34;&gt;&lt;a id=&#34;__codelineno-3-26&#34; name=&#34;__codelineno-3-26&#34; href=&#34;#__codelineno-3-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.got.plt&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PROGBITS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0000000000402fe8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;00002fe8&lt;/span&gt;&lt;span id=&#34;__span-3-27&#34;&gt;&lt;a id=&#34;__codelineno-3-27&#34; name=&#34;__codelineno-3-27&#34; href=&#34;#__codelineno-3-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000028&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000008&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;WA&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-28&#34;&gt;&lt;a id=&#34;__codelineno-3-28&#34; name=&#34;__codelineno-3-28&#34; href=&#34;#__codelineno-3-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.symtab&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;SYMTAB&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00003010&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-29&#34;&gt;&lt;a id=&#34;__codelineno-3-29&#34; name=&#34;__codelineno-3-29&#34; href=&#34;#__codelineno-3-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;00000000000000d8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000018&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-30&#34;&gt;&lt;a id=&#34;__codelineno-3-30&#34; name=&#34;__codelineno-3-30&#34; href=&#34;#__codelineno-3-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.strtab&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;STRTAB&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000030e8&lt;/span&gt;&lt;span id=&#34;__span-3-31&#34;&gt;&lt;a id=&#34;__codelineno-3-31&#34; name=&#34;__codelineno-3-31&#34; href=&#34;#__codelineno-3-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000043&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-32&#34;&gt;&lt;a id=&#34;__codelineno-3-32&#34; name=&#34;__codelineno-3-32&#34; href=&#34;#__codelineno-3-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.shstrtab&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;STRTAB&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0000312b&lt;/span&gt;&lt;span id=&#34;__span-3-33&#34;&gt;&lt;a id=&#34;__codelineno-3-33&#34; name=&#34;__codelineno-3-33&#34; href=&#34;#__codelineno-3-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000069&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-34&#34;&gt;&lt;a id=&#34;__codelineno-3-34&#34; name=&#34;__codelineno-3-34&#34; href=&#34;#__codelineno-3-34&#34;&gt;&lt;/a&gt;Key&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;to&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Flags:&lt;/span&gt;&lt;span id=&#34;__span-3-35&#34;&gt;&lt;a id=&#34;__codelineno-3-35&#34; name=&#34;__codelineno-3-35&#34; href=&#34;#__codelineno-3-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;W&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;write&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;alloc&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;X&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;execute&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;M&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;merge&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;strings&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;I&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;info&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;/span&gt;&lt;span id=&#34;__span-3-36&#34;&gt;&lt;a id=&#34;__codelineno-3-36&#34; name=&#34;__codelineno-3-36&#34; href=&#34;#__codelineno-3-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;L&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;link&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;order&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;O&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;extra&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;OS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;processing&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;required&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;G&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;group&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;T&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TLS&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;/span&gt;&lt;span id=&#34;__span-3-37&#34;&gt;&lt;a id=&#34;__codelineno-3-37&#34; name=&#34;__codelineno-3-37&#34; href=&#34;#__codelineno-3-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;C&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compressed&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;x&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;unknown&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;specific&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;E&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;exclude&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;/span&gt;&lt;span id=&#34;__span-3-38&#34;&gt;&lt;a id=&#34;__codelineno-3-38&#34; name=&#34;__codelineno-3-38&#34; href=&#34;#__codelineno-3-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;D&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;mbind&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;l&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;large&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;p&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;processor&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;specific&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-39&#34;&gt;&lt;a id=&#34;__codelineno-3-39&#34; name=&#34;__codelineno-3-39&#34; href=&#34;#__codelineno-3-39&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-40&#34;&gt;&lt;a id=&#34;__codelineno-3-40&#34; name=&#34;__codelineno-3-40&#34; href=&#34;#__codelineno-3-40&#34;&gt;&lt;/a&gt;There&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;are&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;no&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;groups&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;this&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它出现了一些在上一篇博客里出现过的和动态链接相关的段：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;.hash&lt;/code&gt; 和 &lt;code&gt;.gnu.hash&lt;/code&gt;：不同格式的哈希表，提供了从符号名字到符号的映射，提高动态链接器查找符号的性能&lt;/li&gt;&lt;li&gt;&lt;code&gt;.dynsym&lt;/code&gt;：Dynamic Symbol，和动态链接有关的动态符号表&lt;/li&gt;&lt;li&gt;&lt;code&gt;.dynstr&lt;/code&gt;：Dynamic String，和动态链接有关的字符串的表&lt;/li&gt;&lt;li&gt;&lt;code&gt;.dynamic&lt;/code&gt;：Dynamic，向动态链接器提供了一些信息&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;此外，还出现了一些新的段：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;.interp&lt;/code&gt;：这个段记录了 Program Interpreter 的路径，也就是前面用命令行 &lt;code&gt;ld -dynamic-linker /lib64/ld-linux-x86-64.so.2&lt;/code&gt; 所指定的 &lt;code&gt;/lib64/ld-linux-x86-64.so.2&lt;/code&gt;，用来告诉操作系统，要运行这个可执行程序，需要依靠这个 Program Interpreter，它同时也是动态链接器&lt;/li&gt;&lt;li&gt;&lt;code&gt;.plt&lt;/code&gt;：Procedure Linkage Table，涉及到动态链接库的函数，下面会详细介绍&lt;/li&gt;&lt;li&gt;&lt;code&gt;.rela.plt&lt;/code&gt;：针对 Procedure Linkage Table 的重定位（Relocation）信息，下面会详细介绍&lt;/li&gt;&lt;li&gt;&lt;code&gt;.got.plt&lt;/code&gt;：针对 Procedure Linkage Table 的 Global Offset Table，下面会详细介绍&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这时候你觉得很奇怪：通常看到 &lt;code&gt;.rela&lt;/code&gt; 开头的段，都是在对象文件里，用来保存对应段的重定位信息。但是为啥可执行文件里还有呢？在前面的几篇博客中，静态链接器已经解决了所有重定位，所以最终的可执行文件里没有重定位。但是，对于动态库，由于静态链接器无法知道动态库会被加载到什么地址上去，只好保留了一些重定位信息，而这些会留给后来的动态链接器：动态链接器会负责加载动态库，也就知道了动态库的地址，因此就可以计算出剩下的这些针对动态库的重定位了。&lt;/p&gt;&lt;p&gt;继续往下看 Program Headers 部分：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;Program&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Headers:&lt;/span&gt;&lt;span id=&#34;__span-4-2&#34;&gt;&lt;a id=&#34;__codelineno-4-2&#34; name=&#34;__codelineno-4-2&#34; href=&#34;#__codelineno-4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Type&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Offset&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;VirtAddr&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PhysAddr&lt;/span&gt;&lt;span id=&#34;__span-4-3&#34;&gt;&lt;a id=&#34;__codelineno-4-3&#34; name=&#34;__codelineno-4-3&#34; href=&#34;#__codelineno-4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;FileSiz&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;MemSiz&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Flags&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Align&lt;/span&gt;&lt;span id=&#34;__span-4-4&#34;&gt;&lt;a id=&#34;__codelineno-4-4&#34; name=&#34;__codelineno-4-4&#34; href=&#34;#__codelineno-4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PHDR&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000040&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000400040&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000400040&lt;/span&gt;&lt;span id=&#34;__span-4-5&#34;&gt;&lt;a id=&#34;__codelineno-4-5&#34; name=&#34;__codelineno-4-5&#34; href=&#34;#__codelineno-4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x00000000000001c0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x00000000000001c0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x8&lt;/span&gt;&lt;span id=&#34;__span-4-6&#34;&gt;&lt;a id=&#34;__codelineno-4-6&#34; name=&#34;__codelineno-4-6&#34; href=&#34;#__codelineno-4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;INTERP&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000200&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000400200&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000400200&lt;/span&gt;&lt;span id=&#34;__span-4-7&#34;&gt;&lt;a id=&#34;__codelineno-4-7&#34; name=&#34;__codelineno-4-7&#34; href=&#34;#__codelineno-4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x000000000000001c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x000000000000001c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1&lt;/span&gt;&lt;span id=&#34;__span-4-8&#34;&gt;&lt;a id=&#34;__codelineno-4-8&#34; name=&#34;__codelineno-4-8&#34; href=&#34;#__codelineno-4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Requesting&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;program&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;interpreter:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/lib64/ld-linux-x86-64.so.2&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-9&#34;&gt;&lt;a id=&#34;__codelineno-4-9&#34; name=&#34;__codelineno-4-9&#34; href=&#34;#__codelineno-4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LOAD&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000000&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000400000&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000400000&lt;/span&gt;&lt;span id=&#34;__span-4-10&#34;&gt;&lt;a id=&#34;__codelineno-4-10&#34; name=&#34;__codelineno-4-10&#34; href=&#34;#__codelineno-4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x00000000000002f0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x00000000000002f0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1000&lt;/span&gt;&lt;span id=&#34;__span-4-11&#34;&gt;&lt;a id=&#34;__codelineno-4-11&#34; name=&#34;__codelineno-4-11&#34; href=&#34;#__codelineno-4-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LOAD&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000001000&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000401000&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000401000&lt;/span&gt;&lt;span id=&#34;__span-4-12&#34;&gt;&lt;a id=&#34;__codelineno-4-12&#34; name=&#34;__codelineno-4-12&#34; href=&#34;#__codelineno-4-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x000000000000003a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x000000000000003a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;E&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1000&lt;/span&gt;&lt;span id=&#34;__span-4-13&#34;&gt;&lt;a id=&#34;__codelineno-4-13&#34; name=&#34;__codelineno-4-13&#34; href=&#34;#__codelineno-4-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LOAD&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000002000&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000402000&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000402000&lt;/span&gt;&lt;span id=&#34;__span-4-14&#34;&gt;&lt;a id=&#34;__codelineno-4-14&#34; name=&#34;__codelineno-4-14&#34; href=&#34;#__codelineno-4-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000000&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000000&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1000&lt;/span&gt;&lt;span id=&#34;__span-4-15&#34;&gt;&lt;a id=&#34;__codelineno-4-15&#34; name=&#34;__codelineno-4-15&#34; href=&#34;#__codelineno-4-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LOAD&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000002ec8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000402ec8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000402ec8&lt;/span&gt;&lt;span id=&#34;__span-4-16&#34;&gt;&lt;a id=&#34;__codelineno-4-16&#34; name=&#34;__codelineno-4-16&#34; href=&#34;#__codelineno-4-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000148&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000148&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;RW&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1000&lt;/span&gt;&lt;span id=&#34;__span-4-17&#34;&gt;&lt;a id=&#34;__codelineno-4-17&#34; name=&#34;__codelineno-4-17&#34; href=&#34;#__codelineno-4-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DYNAMIC&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000002ec8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000402ec8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000402ec8&lt;/span&gt;&lt;span id=&#34;__span-4-18&#34;&gt;&lt;a id=&#34;__codelineno-4-18&#34; name=&#34;__codelineno-4-18&#34; href=&#34;#__codelineno-4-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000120&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000120&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;RW&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x8&lt;/span&gt;&lt;span id=&#34;__span-4-19&#34;&gt;&lt;a id=&#34;__codelineno-4-19&#34; name=&#34;__codelineno-4-19&#34; href=&#34;#__codelineno-4-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GNU_RELRO&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000002ec8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000402ec8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000402ec8&lt;/span&gt;&lt;span id=&#34;__span-4-20&#34;&gt;&lt;a id=&#34;__codelineno-4-20&#34; name=&#34;__codelineno-4-20&#34; href=&#34;#__codelineno-4-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000138&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000138&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，出现了一个 &lt;code&gt;INTERP&lt;/code&gt; 项，它指向了 &lt;code&gt;.interp&lt;/code&gt; 段的地址，这个段里保存的就是 &lt;code&gt;/lib64/ld-linux-x86-64.so.2&lt;/code&gt; 这个字符串，其实就是在告诉操作系统，从这个地址读取 Program Interpreter 的路径。和之前的动态库一样，也出现了 &lt;code&gt;DYNAMIC&lt;/code&gt;，指向了 &lt;code&gt;.dynamic&lt;/code&gt; 段，意味着这即使是可执行文件，也和动态库有一些相似的地方。&lt;/p&gt;&lt;p&gt;下面可以看到 &lt;code&gt;.dynamic&lt;/code&gt; 段的内容：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-5-1&#34;&gt;&lt;a id=&#34;__codelineno-5-1&#34; name=&#34;__codelineno-5-1&#34; href=&#34;#__codelineno-5-1&#34;&gt;&lt;/a&gt;Dynamic&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;at&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;offset&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x2ec8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;contains&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;entries:&lt;/span&gt;&lt;span id=&#34;__span-5-2&#34;&gt;&lt;a id=&#34;__codelineno-5-2&#34; name=&#34;__codelineno-5-2&#34; href=&#34;#__codelineno-5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Tag&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Type&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Name/Value&lt;/span&gt;&lt;span id=&#34;__span-5-3&#34;&gt;&lt;a id=&#34;__codelineno-5-3&#34; name=&#34;__codelineno-5-3&#34; href=&#34;#__codelineno-5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000001&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;NEEDED&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Shared&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;library:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;libprinter.so&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-4&#34;&gt;&lt;a id=&#34;__codelineno-5-4&#34; name=&#34;__codelineno-5-4&#34; href=&#34;#__codelineno-5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000004&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;HASH&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x400220&lt;/span&gt;&lt;span id=&#34;__span-5-5&#34;&gt;&lt;a id=&#34;__codelineno-5-5&#34; name=&#34;__codelineno-5-5&#34; href=&#34;#__codelineno-5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x000000006ffffef5&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;GNU_HASH&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x400238&lt;/span&gt;&lt;span id=&#34;__span-5-6&#34;&gt;&lt;a id=&#34;__codelineno-5-6&#34; name=&#34;__codelineno-5-6&#34; href=&#34;#__codelineno-5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000005&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;STRTAB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x4002a0&lt;/span&gt;&lt;span id=&#34;__span-5-7&#34;&gt;&lt;a id=&#34;__codelineno-5-7&#34; name=&#34;__codelineno-5-7&#34; href=&#34;#__codelineno-5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000006&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;SYMTAB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x400258&lt;/span&gt;&lt;span id=&#34;__span-5-8&#34;&gt;&lt;a id=&#34;__codelineno-5-8&#34; name=&#34;__codelineno-5-8&#34; href=&#34;#__codelineno-5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x000000000000000a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;STRSZ&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-9&#34;&gt;&lt;a id=&#34;__codelineno-5-9&#34; name=&#34;__codelineno-5-9&#34; href=&#34;#__codelineno-5-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x000000000000000b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;SYMENT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-10&#34;&gt;&lt;a id=&#34;__codelineno-5-10&#34; name=&#34;__codelineno-5-10&#34; href=&#34;#__codelineno-5-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000015&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;DEBUG&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;/span&gt;&lt;span id=&#34;__span-5-11&#34;&gt;&lt;a id=&#34;__codelineno-5-11&#34; name=&#34;__codelineno-5-11&#34; href=&#34;#__codelineno-5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000003&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;PLTGOT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x402fe8&lt;/span&gt;&lt;span id=&#34;__span-5-12&#34;&gt;&lt;a id=&#34;__codelineno-5-12&#34; name=&#34;__codelineno-5-12&#34; href=&#34;#__codelineno-5-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000002&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;PLTRELSZ&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-13&#34;&gt;&lt;a id=&#34;__codelineno-5-13&#34; name=&#34;__codelineno-5-13&#34; href=&#34;#__codelineno-5-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000014&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;PLTREL&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;RELA&lt;/span&gt;&lt;span id=&#34;__span-5-14&#34;&gt;&lt;a id=&#34;__codelineno-5-14&#34; name=&#34;__codelineno-5-14&#34; href=&#34;#__codelineno-5-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000017&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;JMPREL&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x4002c0&lt;/span&gt;&lt;span id=&#34;__span-5-15&#34;&gt;&lt;a id=&#34;__codelineno-5-15&#34; name=&#34;__codelineno-5-15&#34; href=&#34;#__codelineno-5-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000000&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;NULL&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和之前看到的动态库对比，多出现了这些项：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;NEEDED&lt;/code&gt;：表示运行这个可执行文件所需要加载的动态库文件名，如果找不到对应的动态库，就会出现熟悉的 &lt;code&gt;error while loading shared libraries&lt;/code&gt; 错误&lt;/li&gt;&lt;li&gt;&lt;code&gt;DEBUG&lt;/code&gt;：用于调试，这里不讨论&lt;/li&gt;&lt;li&gt;&lt;code&gt;PLTGOT&lt;/code&gt;：指向了 &lt;code&gt;.got.plt&lt;/code&gt; 段的地址&lt;/li&gt;&lt;li&gt;&lt;code&gt;PLTRELSZ&lt;/code&gt;：记录了 &lt;code&gt;.rela.plt&lt;/code&gt; 每一项的大小&lt;/li&gt;&lt;li&gt;&lt;code&gt;PLTREL&lt;/code&gt;：&lt;code&gt;RELA&lt;/code&gt; 表示 &lt;code&gt;.rela.plt&lt;/code&gt; 每一项里包含 addend 项（RELA = REL with Addend）&lt;/li&gt;&lt;li&gt;&lt;code&gt;JMPREL&lt;/code&gt;：指向了 &lt;code&gt;.rela.plt&lt;/code&gt; 段的地址&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;动态链接器在加载程序的时候，会去寻找 &lt;code&gt;NEEDED&lt;/code&gt; 所指向的那些动态库并加载进来。那么这些文件会保存在哪里呢？和执行程序要去 &lt;code&gt;PATH&lt;/code&gt; 中寻找类似，动态库也会根据环境变量以及系统配置的路径去寻找。由于这是一个非常频繁进行的操作，为了提升性能，系统中会有一份缓存，这个缓存的内容可以通过 &lt;code&gt;ldconfig -p&lt;/code&gt; 命令查看。&lt;/p&gt;&lt;p&gt;上面提到了很多次 Procedure Linkage Table（PLT），那么它到底是什么呢？下面来观察可执行文件的代码段。&lt;/p&gt;&lt;h3 id=&#34;观察代码段和-plt&#34;&gt;观察代码段和 PLT&lt;a class=&#34;headerlink&#34; href=&#34;#观察代码段和-plt&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;用 &lt;code&gt;objdump -S main&lt;/code&gt; 观察可执行文件的代码段和 PLT：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-6-1&#34;&gt;&lt;a id=&#34;__codelineno-6-1&#34; name=&#34;__codelineno-6-1&#34; href=&#34;#__codelineno-6-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;objdump&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main&lt;/span&gt;&lt;span id=&#34;__span-6-2&#34;&gt;&lt;a id=&#34;__codelineno-6-2&#34; name=&#34;__codelineno-6-2&#34; href=&#34;#__codelineno-6-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-3&#34;&gt;&lt;a id=&#34;__codelineno-6-3&#34; name=&#34;__codelineno-6-3&#34; href=&#34;#__codelineno-6-3&#34;&gt;&lt;/a&gt;main:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;format&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;elf64-x86-64&lt;/span&gt;&lt;span id=&#34;__span-6-4&#34;&gt;&lt;a id=&#34;__codelineno-6-4&#34; name=&#34;__codelineno-6-4&#34; href=&#34;#__codelineno-6-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-5&#34;&gt;&lt;a id=&#34;__codelineno-6-5&#34; name=&#34;__codelineno-6-5&#34; href=&#34;#__codelineno-6-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-6&#34;&gt;&lt;a id=&#34;__codelineno-6-6&#34; name=&#34;__codelineno-6-6&#34; href=&#34;#__codelineno-6-6&#34;&gt;&lt;/a&gt;Disassembly&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.plt:&lt;/span&gt;&lt;span id=&#34;__span-6-7&#34;&gt;&lt;a id=&#34;__codelineno-6-7&#34; name=&#34;__codelineno-6-7&#34; href=&#34;#__codelineno-6-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-8&#34;&gt;&lt;a id=&#34;__codelineno-6-8&#34; name=&#34;__codelineno-6-8&#34; href=&#34;#__codelineno-6-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000401000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;print@plt-0x10&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-6-9&#34;&gt;&lt;a id=&#34;__codelineno-6-9&#34; name=&#34;__codelineno-6-9&#34; href=&#34;#__codelineno-6-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401000&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ea&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;push&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1fea&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 402ff0 &amp;lt;_GLOBAL_OFFSET_TABLE_+0x8&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-10&#34;&gt;&lt;a id=&#34;__codelineno-6-10&#34; name=&#34;__codelineno-6-10&#34; href=&#34;#__codelineno-6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401006&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ec&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;jmp&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;*0x1fec&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 402ff8 &amp;lt;_GLOBAL_OFFSET_TABLE_+0x10&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-11&#34;&gt;&lt;a id=&#34;__codelineno-6-11&#34; name=&#34;__codelineno-6-11&#34; href=&#34;#__codelineno-6-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;40100c:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nopl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-12&#34;&gt;&lt;a id=&#34;__codelineno-6-12&#34; name=&#34;__codelineno-6-12&#34; href=&#34;#__codelineno-6-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-13&#34;&gt;&lt;a id=&#34;__codelineno-6-13&#34; name=&#34;__codelineno-6-13&#34; href=&#34;#__codelineno-6-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000401010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;print@plt&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-6-14&#34;&gt;&lt;a id=&#34;__codelineno-6-14&#34; name=&#34;__codelineno-6-14&#34; href=&#34;#__codelineno-6-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401010&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ea&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;jmp&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;*0x1fea&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 403000 &amp;lt;print&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-15&#34;&gt;&lt;a id=&#34;__codelineno-6-15&#34; name=&#34;__codelineno-6-15&#34; href=&#34;#__codelineno-6-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401016&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;68&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;push&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x0&lt;/span&gt;&lt;span id=&#34;__span-6-16&#34;&gt;&lt;a id=&#34;__codelineno-6-16&#34; name=&#34;__codelineno-6-16&#34; href=&#34;#__codelineno-6-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;40101b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e9&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;jmp&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;print@plt-0x10&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-6-17&#34;&gt;&lt;a id=&#34;__codelineno-6-17&#34; name=&#34;__codelineno-6-17&#34; href=&#34;#__codelineno-6-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-18&#34;&gt;&lt;a id=&#34;__codelineno-6-18&#34; name=&#34;__codelineno-6-18&#34; href=&#34;#__codelineno-6-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000401020&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;exit@plt&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-6-19&#34;&gt;&lt;a id=&#34;__codelineno-6-19&#34; name=&#34;__codelineno-6-19&#34; href=&#34;#__codelineno-6-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401020&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e2&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;jmp&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;*0x1fe2&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 403008 &amp;lt;exit&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-20&#34;&gt;&lt;a id=&#34;__codelineno-6-20&#34; name=&#34;__codelineno-6-20&#34; href=&#34;#__codelineno-6-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401026&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;68&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;push&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x1&lt;/span&gt;&lt;span id=&#34;__span-6-21&#34;&gt;&lt;a id=&#34;__codelineno-6-21&#34; name=&#34;__codelineno-6-21&#34; href=&#34;#__codelineno-6-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;40102b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e9&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;d0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;jmp&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;print@plt-0x10&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-6-22&#34;&gt;&lt;a id=&#34;__codelineno-6-22&#34; name=&#34;__codelineno-6-22&#34; href=&#34;#__codelineno-6-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-23&#34;&gt;&lt;a id=&#34;__codelineno-6-23&#34; name=&#34;__codelineno-6-23&#34; href=&#34;#__codelineno-6-23&#34;&gt;&lt;/a&gt;Disassembly&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.text:&lt;/span&gt;&lt;span id=&#34;__span-6-24&#34;&gt;&lt;a id=&#34;__codelineno-6-24&#34; name=&#34;__codelineno-6-24&#34; href=&#34;#__codelineno-6-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-25&#34;&gt;&lt;a id=&#34;__codelineno-6-25&#34; name=&#34;__codelineno-6-25&#34; href=&#34;#__codelineno-6-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000401030&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;_start&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-6-26&#34;&gt;&lt;a id=&#34;__codelineno-6-26&#34; name=&#34;__codelineno-6-26&#34; href=&#34;#__codelineno-6-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401030&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;db&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;print@plt&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-6-27&#34;&gt;&lt;a id=&#34;__codelineno-6-27&#34; name=&#34;__codelineno-6-27&#34; href=&#34;#__codelineno-6-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401035&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e6&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401020&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;exit@plt&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会发现在 &lt;code&gt;.plt&lt;/code&gt; 段中出现了两个函数：&lt;code&gt;print@plt&lt;/code&gt; 和 &lt;code&gt;exit@plt&lt;/code&gt;，正好是 &lt;code&gt;main&lt;/code&gt; 函数调用的，由动态链接库提供的函数。在 &lt;code&gt;main&lt;/code&gt; 函数里，也不是直接调用动态链接库的 &lt;code&gt;print&lt;/code&gt; 和 &lt;code&gt;exit&lt;/code&gt;，而是调用 &lt;code&gt;.plt&lt;/code&gt; 段里对应的带 &lt;code&gt;@plt&lt;/code&gt; 后缀的版本，这是为什么？而且，&lt;code&gt;.plt&lt;/code&gt; 段开头的那段代码又是做什么的？为什么 &lt;code&gt;print@plt&lt;/code&gt; 和 &lt;code&gt;exit@plt&lt;/code&gt; 函数都要跳到 &lt;code&gt;0x401000&lt;/code&gt; 处的代码？&lt;/p&gt;&lt;p&gt;这时候就要了解 PLT 的用途了。在静态链接的时候，链接的时候，链接器可以知道所有函数的地址，所以重定位都可以计算出，跳转和调用可以直接写入实际的绝对地址或者偏移量。但如果链接了一个动态库，链接器无法知道动态库的地址，所以重定位还是得继续留着，交给最后的动态链接器来完成重定位。那么，一个朴素的方法就是，保留对动态库的所有重定位信息。简单地把工作推迟给了动态链接器。但是，动态链接器工作在程序启动的时候，用户肯定不期望程序每次启动的时候，都要花很长的时间在动态链接上，所以动态链接还得足够快：前面也看到了，各种哈希表各种优化，就是为了提升动态链接的性能。要是每个调用都有一个重定位需要处理，那么性能肯定不好。&lt;/p&gt;&lt;p&gt;那么怎么办呢？很多常用函数，比如 &lt;code&gt;malloc&lt;/code&gt; 和 &lt;code&gt;free&lt;/code&gt; 等等，调用的地方是非常多的。不过，转念一想，虽然调用的地方很多，但是被调用的函数相比之下却会少很多：可能有一千个地方调用 &lt;code&gt;malloc&lt;/code&gt;，但是 &lt;code&gt;malloc&lt;/code&gt; 函数只有一个，如果只重定位一次，就可以解决所有对 &lt;code&gt;malloc&lt;/code&gt; 的调用，那该多好！但是重定位一次只能修改一个地方的代码，怎么办呢？那就让一千个地方都调用一个临时的 &lt;code&gt;malloc&lt;/code&gt; 函数，这个临时的 &lt;code&gt;malloc&lt;/code&gt; 函数通过重定位调用真实的 &lt;code&gt;malloc&lt;/code&gt; 函数，这样重定位只有一次，代价就是多了一次跳转。我们把这个临时的 &lt;code&gt;malloc&lt;/code&gt; 函数叫做 &lt;code&gt;malloc@plt&lt;/code&gt;，把记录所有这些临时函数的表称为 Procedure Linkage Table（PLT），那么代码变成：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-7-1&#34;&gt;&lt;a id=&#34;__codelineno-7-1&#34; name=&#34;__codelineno-7-1&#34; href=&#34;#__codelineno-7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.plt&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-2&#34;&gt;&lt;a id=&#34;__codelineno-7-2&#34; name=&#34;__codelineno-7-2&#34; href=&#34;#__codelineno-7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;malloc@plt:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-3&#34;&gt;&lt;a id=&#34;__codelineno-7-3&#34; name=&#34;__codelineno-7-3&#34; href=&#34;#__codelineno-7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;real_malloc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# emit relocation to the real malloc&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-4&#34;&gt;&lt;a id=&#34;__codelineno-7-4&#34; name=&#34;__codelineno-7-4&#34; href=&#34;#__codelineno-7-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-5&#34;&gt;&lt;a id=&#34;__codelineno-7-5&#34; name=&#34;__codelineno-7-5&#34; href=&#34;#__codelineno-7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.text&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-6&#34;&gt;&lt;a id=&#34;__codelineno-7-6&#34; name=&#34;__codelineno-7-6&#34; href=&#34;#__codelineno-7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;func1:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-7&#34;&gt;&lt;a id=&#34;__codelineno-7-7&#34; name=&#34;__codelineno-7-7&#34; href=&#34;#__codelineno-7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;malloc@plt&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-8&#34;&gt;&lt;a id=&#34;__codelineno-7-8&#34; name=&#34;__codelineno-7-8&#34; href=&#34;#__codelineno-7-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ...&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-9&#34;&gt;&lt;a id=&#34;__codelineno-7-9&#34; name=&#34;__codelineno-7-9&#34; href=&#34;#__codelineno-7-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-10&#34;&gt;&lt;a id=&#34;__codelineno-7-10&#34; name=&#34;__codelineno-7-10&#34; href=&#34;#__codelineno-7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;func2:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-11&#34;&gt;&lt;a id=&#34;__codelineno-7-11&#34; name=&#34;__codelineno-7-11&#34; href=&#34;#__codelineno-7-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;malloc@plt&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-12&#34;&gt;&lt;a id=&#34;__codelineno-7-12&#34; name=&#34;__codelineno-7-12&#34; href=&#34;#__codelineno-7-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就解决了重定位数量太多的问题：从每个调用都要一个重定位，降低到每个被调用的函数一个重定位。但是，这样的 PLT 和实际看到的还是有很大的区别：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-8-1&#34;&gt;&lt;a id=&#34;__codelineno-8-1&#34; name=&#34;__codelineno-8-1&#34; href=&#34;#__codelineno-8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000401010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;print@plt&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-8-2&#34;&gt;&lt;a id=&#34;__codelineno-8-2&#34; name=&#34;__codelineno-8-2&#34; href=&#34;#__codelineno-8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401010&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ea&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;jmp&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;*0x1fea&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 403000 &amp;lt;print&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-3&#34;&gt;&lt;a id=&#34;__codelineno-8-3&#34; name=&#34;__codelineno-8-3&#34; href=&#34;#__codelineno-8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401016&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;68&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;push&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x0&lt;/span&gt;&lt;span id=&#34;__span-8-4&#34;&gt;&lt;a id=&#34;__codelineno-8-4&#34; name=&#34;__codelineno-8-4&#34; href=&#34;#__codelineno-8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;40101b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e9&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;jmp&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;print@plt-0x10&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这三条指令是在做什么呢？为什么不生成一个重定位，直接跳转到实际的 print 函数？而要搞得这么麻烦？&lt;/p&gt;&lt;p&gt;答案是还不满足于当前的性能：完整的代码里可能会调用动态库里的的一千个函数，但是实际运行的时候，并非所有代码都会被执行，于是可能只有一小部分动态库的函数会被调用。这时候，就希望实现一点：第一次调用动态库里的函数的时候，再进行重定位，之后就一直用这个重定位好的结果。那么如果一个函数从来没有被调用过，那就省下了重定位的时间。这就是惰性（Lazy）或者说延迟（Deferred）的思想。&lt;/p&gt;&lt;p&gt;为了实现这个功能，它是这么实现的：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第一次调用的时候，会跳转到动态链接器里，让动态链接器完成重定位，然后跳转到实际的动态库里的函数&lt;/li&gt;&lt;li&gt;第二次和之后调用的时候，直接跳转到实际的动态库里的函数&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;那么怎么去记录实际的动态库里的函数的地址呢？那就找个地方，把这个地址存下来就好。第一次调用的时候，想办法进入到动态链接器，让它进行重定位。重定位完以后，就把这个地址保存下来，下次调用就会直接跳转过去了。再回看 &lt;code&gt;print@plt&lt;/code&gt; 的第一条指令：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-9-1&#34;&gt;&lt;a id=&#34;__codelineno-9-1&#34; name=&#34;__codelineno-9-1&#34; href=&#34;#__codelineno-9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000401010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;print@plt&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-9-2&#34;&gt;&lt;a id=&#34;__codelineno-9-2&#34; name=&#34;__codelineno-9-2&#34; href=&#34;#__codelineno-9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401010&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ea&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;jmp&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;*0x1fea&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 403000 &amp;lt;print&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-3&#34;&gt;&lt;a id=&#34;__codelineno-9-3&#34; name=&#34;__codelineno-9-3&#34; href=&#34;#__codelineno-9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401016&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;68&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;push&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x0&lt;/span&gt;&lt;span id=&#34;__span-9-4&#34;&gt;&lt;a id=&#34;__codelineno-9-4&#34; name=&#34;__codelineno-9-4&#34; href=&#34;#__codelineno-9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;40101b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e9&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;jmp&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;print@plt-0x10&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它跳转到 &lt;code&gt;0x1fea(%rip) # 0x403000&lt;/code&gt; 指向的地址的内容，这里保存了未来 &lt;code&gt;print&lt;/code&gt; 在动态库中的真实地址。那么问题来了，怎么实现第一次调用 &lt;code&gt;print@plt&lt;/code&gt; 的时候，可以进入到动态链接器呢？&lt;code&gt;0x1fea(%rip) # 0x403000&lt;/code&gt; 指向的地址的内容的初始值又是什么呢？下面的 &lt;code&gt;push&lt;/code&gt; 和 &lt;code&gt;jmp&lt;/code&gt; 又是在做什么？&lt;/p&gt;&lt;p&gt;其实，多余的两条指令，结合前面的 &lt;code&gt;0x4010000&lt;/code&gt; 地址的代码，就实现了第一次调用进动态链接器的功能：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-10-1&#34;&gt;&lt;a id=&#34;__codelineno-10-1&#34; name=&#34;__codelineno-10-1&#34; href=&#34;#__codelineno-10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000401000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;print@plt-0x10&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-10-2&#34;&gt;&lt;a id=&#34;__codelineno-10-2&#34; name=&#34;__codelineno-10-2&#34; href=&#34;#__codelineno-10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401000&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ea&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;push&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1fea&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 402ff0 &amp;lt;_GLOBAL_OFFSET_TABLE_+0x8&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-3&#34;&gt;&lt;a id=&#34;__codelineno-10-3&#34; name=&#34;__codelineno-10-3&#34; href=&#34;#__codelineno-10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401006&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ec&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;jmp&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;*0x1fec&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 402ff8 &amp;lt;_GLOBAL_OFFSET_TABLE_+0x10&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-4&#34;&gt;&lt;a id=&#34;__codelineno-10-4&#34; name=&#34;__codelineno-10-4&#34; href=&#34;#__codelineno-10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;40100c:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nopl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-5&#34;&gt;&lt;a id=&#34;__codelineno-10-5&#34; name=&#34;__codelineno-10-5&#34; href=&#34;#__codelineno-10-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-6&#34;&gt;&lt;a id=&#34;__codelineno-10-6&#34; name=&#34;__codelineno-10-6&#34; href=&#34;#__codelineno-10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000401010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;print@plt&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-10-7&#34;&gt;&lt;a id=&#34;__codelineno-10-7&#34; name=&#34;__codelineno-10-7&#34; href=&#34;#__codelineno-10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401010&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ea&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;jmp&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;*0x1fea&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 403000 &amp;lt;print&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-8&#34;&gt;&lt;a id=&#34;__codelineno-10-8&#34; name=&#34;__codelineno-10-8&#34; href=&#34;#__codelineno-10-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401016&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;68&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;push&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x0&lt;/span&gt;&lt;span id=&#34;__span-10-9&#34;&gt;&lt;a id=&#34;__codelineno-10-9&#34; name=&#34;__codelineno-10-9&#34; href=&#34;#__codelineno-10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;40101b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e9&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;jmp&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;print@plt-0x10&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-10-10&#34;&gt;&lt;a id=&#34;__codelineno-10-10&#34; name=&#34;__codelineno-10-10&#34; href=&#34;#__codelineno-10-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-11&#34;&gt;&lt;a id=&#34;__codelineno-10-11&#34; name=&#34;__codelineno-10-11&#34; href=&#34;#__codelineno-10-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000401020&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;exit@plt&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-10-12&#34;&gt;&lt;a id=&#34;__codelineno-10-12&#34; name=&#34;__codelineno-10-12&#34; href=&#34;#__codelineno-10-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401020&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e2&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;jmp&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;*0x1fe2&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 403008 &amp;lt;exit&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-13&#34;&gt;&lt;a id=&#34;__codelineno-10-13&#34; name=&#34;__codelineno-10-13&#34; href=&#34;#__codelineno-10-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401026&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;68&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;push&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x1&lt;/span&gt;&lt;span id=&#34;__span-10-14&#34;&gt;&lt;a id=&#34;__codelineno-10-14&#34; name=&#34;__codelineno-10-14&#34; href=&#34;#__codelineno-10-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;40102b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e9&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;d0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;jmp&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;print@plt-0x10&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;初始情况下，&lt;code&gt;0x403000&lt;/code&gt; 地址保存的地址是 &lt;code&gt;0x401016&lt;/code&gt;，也就是 &lt;code&gt;print@plt&lt;/code&gt; 的 &lt;code&gt;push&lt;/code&gt; 指令的地址。那么，第一次调用 &lt;code&gt;print@plt&lt;/code&gt; 会发生的事情是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;调用 &lt;code&gt;print@plt&lt;/code&gt;，执行 &lt;code&gt;401010: ff 25 ea 1f 00 00 jmp *0x1fea(%rip) # 403000 &amp;lt;print&amp;gt;&lt;/code&gt;，此时 &lt;code&gt;0x403000&lt;/code&gt; 地址保存的内容是 &lt;code&gt;0x401016&lt;/code&gt;，也就是跳转到 &lt;code&gt;0x401016&lt;/code&gt;&lt;/li&gt;&lt;li&gt;执行 &lt;code&gt;401016: 68 00 00 00 00 push $0x0&lt;/code&gt;，向栈上压入了 &lt;code&gt;0&lt;/code&gt;，具体什么含义，下面会进行分析&lt;/li&gt;&lt;li&gt;执行 &lt;code&gt;40101b: e9 e0 ff ff ff jmp 401000 &amp;lt;print@plt-0x10&amp;gt;&lt;/code&gt;，跳转到 &lt;code&gt;0x401000&lt;/code&gt;&lt;/li&gt;&lt;li&gt;执行 &lt;code&gt;401000: ff 35 ea 1f 00 00 push 0x1fea(%rip) # 402ff0 &amp;lt;_GLOBAL_OFFSET_TABLE_+0x8&amp;gt;&lt;/code&gt;，具体什么含义，下面会进行分析&lt;/li&gt;&lt;li&gt;执行 &lt;code&gt;401006: ff 25 ec 1f 00 00 jmp *0x1fec(%rip) # 402ff8 &amp;lt;_GLOBAL_OFFSET_TABLE_+0x10&amp;gt;&lt;/code&gt;，这一条指令跳转到 &lt;code&gt;0x402ff8&lt;/code&gt; 地址保存的内容，这个内容就是动态链接器提供的函数，它会负责进行重定位，重定位以后，就会把结果写到 &lt;code&gt;0x403000&lt;/code&gt; 地址里&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;那么，之后调用 &lt;code&gt;print@plt&lt;/code&gt; 会发生的事情是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;调用 &lt;code&gt;print@plt&lt;/code&gt;，执行 &lt;code&gt;401010: ff 25 ea 1f 00 00 jmp *0x1fea(%rip) # 403000 &amp;lt;print&amp;gt;&lt;/code&gt;，此时 &lt;code&gt;0x403000&lt;/code&gt; 地址保存的内容是经过重定位后的真实的 &lt;code&gt;print&lt;/code&gt; 函数的地址&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;那么这个逻辑就清楚了：&lt;code&gt;0x403000&lt;/code&gt; 保存了 &lt;code&gt;print&lt;/code&gt; 函数的地址，如果还没有重定位，就指向初始化的代码 &lt;code&gt;0x401016&lt;/code&gt;。这段代码向栈上压入了两个内容：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;print@plt&lt;/code&gt; 压入了 0，&lt;code&gt;exit@plt&lt;/code&gt; 压入了 1，这对应了动态符号表里这两个符号的位置，根据编号，就可以查到要找的符号名称&lt;/li&gt;&lt;li&gt;压入了 &lt;code&gt;0x402ff0&lt;/code&gt; 地址的内容，这个内容由动态链接器初始化，可以想到大概是用来表示当前可执行文件的某个指针&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;那么最后跳转到动态链接器里的时候，就可以根据压栈的内容，找到要重定位的函数，进行重定位。&lt;/p&gt;&lt;p&gt;为了保存上面的这些数据：&lt;code&gt;0x403000&lt;/code&gt; 保存的 &lt;code&gt;print&lt;/code&gt; 函数地址，或是动态链接器提供的 &lt;code&gt;0x402ff0&lt;/code&gt; 以及 &lt;code&gt;0x402ff8&lt;/code&gt;，添加了一个 &lt;code&gt;.got.plt&lt;/code&gt; 段：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-11-1&#34;&gt;&lt;a id=&#34;__codelineno-11-1&#34; name=&#34;__codelineno-11-1&#34; href=&#34;#__codelineno-11-1&#34;&gt;&lt;/a&gt;0000000000402fe8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;_GLOBAL_OFFSET_TABLE_&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-11-2&#34;&gt;&lt;a id=&#34;__codelineno-11-2&#34; name=&#34;__codelineno-11-2&#34; href=&#34;#__codelineno-11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;402fe8:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;2e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;enter&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x402e,&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x0&lt;/span&gt;&lt;span id=&#34;__span-11-3&#34;&gt;&lt;a id=&#34;__codelineno-11-3&#34; name=&#34;__codelineno-11-3&#34; href=&#34;#__codelineno-11-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;...&lt;/span&gt;&lt;span id=&#34;__span-11-4&#34;&gt;&lt;a id=&#34;__codelineno-11-4&#34; name=&#34;__codelineno-11-4&#34; href=&#34;#__codelineno-11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;403000&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bad&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-5&#34;&gt;&lt;a id=&#34;__codelineno-11-5&#34; name=&#34;__codelineno-11-5&#34; href=&#34;#__codelineno-11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;403001&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;adc&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%al,0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-6&#34;&gt;&lt;a id=&#34;__codelineno-11-6&#34; name=&#34;__codelineno-11-6&#34; href=&#34;#__codelineno-11-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;403004&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;add&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%al,&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-7&#34;&gt;&lt;a id=&#34;__codelineno-11-7&#34; name=&#34;__codelineno-11-7&#34; href=&#34;#__codelineno-11-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;403006&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;add&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%al,&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-8&#34;&gt;&lt;a id=&#34;__codelineno-11-8&#34; name=&#34;__codelineno-11-8&#34; href=&#34;#__codelineno-11-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;403008&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;es&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;adc&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%al,0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-9&#34;&gt;&lt;a id=&#34;__codelineno-11-9&#34; name=&#34;__codelineno-11-9&#34; href=&#34;#__codelineno-11-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;40300c:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;add&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%al,&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-10&#34;&gt;&lt;a id=&#34;__codelineno-11-10&#34; name=&#34;__codelineno-11-10&#34; href=&#34;#__codelineno-11-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个就叫做 Global Offset Table，这里展示的是用于 PLT 的 GOT。它的内容如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;0x402fe8 开始的 8 个字节：保存了 .dynamic 段的地址&lt;/li&gt;&lt;li&gt;0x402ff0 开始的 8 个字节：保留给动态链接器&lt;/li&gt;&lt;li&gt;0x402ff8 开始的 8 个字节：保留给动态链接器&lt;/li&gt;&lt;li&gt;0x403000 开始的 8 个字节：&lt;code&gt;print&lt;/code&gt; 的地址，初始化为 &lt;code&gt;0x401016&lt;/code&gt;&lt;/li&gt;&lt;li&gt;0x403008 开始的 8 个字节：&lt;code&gt;exit&lt;/code&gt; 的地址，初始化为 &lt;code&gt;0x401026&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;那么到这里，就完成了 PLT 以及 GOT 的分析了。&lt;/p&gt;&lt;p&gt;简单小结一下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;为了减少动态链接要耗费的时间，采用了惰性重定位的方法&lt;/li&gt;&lt;li&gt;为了减少重定位次数，在 PLT 里给每个要调用的动态库里的函数提供了一个跳板函数&lt;/li&gt;&lt;li&gt;为了实现惰性重定位，第一次调用跳板函数，会调用动态链接器的函数来实现重定位，通过压栈来区分要重定位的函数&lt;/li&gt;&lt;li&gt;惰性重定位完成以后，跳板函数直接 jmp 到目标函数&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;实现&#34;&gt;实现&lt;a class=&#34;headerlink&#34; href=&#34;#实现&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;综合以上的分析，落到实现上，需要做这些处理：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;遇到动态链接库的时候，不再复制动态链接库的内容到各个段中，更新符号表并打上标记&lt;/li&gt;&lt;li&gt;生成 .plt 和 .got.plt 段的开头&lt;ol&gt;&lt;li&gt;.plt 开头要生成 push，jmp 和 nop 的指令序列&lt;/li&gt;&lt;li&gt;.got.plt 段开头保存 .dynamic 段的地址，然后预留 16 字节给动态链接器&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;要调用动态链接库里的函数的时候，在 PLT 和 GOT 里生成对应的项：&lt;ol&gt;&lt;li&gt;.plt 里要生成 jmp，push 和 jmp 三条指令的序列&lt;/li&gt;&lt;li&gt;.got.plt 要添加用于保存实际地址的一项&lt;/li&gt;&lt;li&gt;.rela.plt 也相应地更新，指向 .got.plt 里对应项的地址&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;根据命令行参数，设置 DT_INTERP；对于依赖的动态库，添加 DT_NEEDED&lt;/li&gt;&lt;li&gt;把 .plt、.got.plt 相关的信息记录到 .dynamic 段中&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这个过程我用 Rust 完成了实现，链接器部分的代码量大概是 1000 行，比上一个版本多 400 行。&lt;/p&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;a class=&#34;headerlink&#34; href=&#34;#总结&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这就是《开发一个链接器》系列博客的最后一篇博客了。回顾一下，我们都完成了哪些功能：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第一篇博客：支持单个 ELF 对象文件的链接&lt;/li&gt;&lt;li&gt;第二篇博客：支持多个 ELF 对象文件的链接&lt;/li&gt;&lt;li&gt;第三篇博客：支持生成动态库&lt;/li&gt;&lt;li&gt;第四篇博客：支持动态链接&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这距离一个真正能用的链接器还差很多东西：PIE，Linker Script，前面出现过但是没有讨论的 &lt;code&gt;.eh_frame&lt;/code&gt; 的处理等等。但希望这个系列博客可以让你对链接器的工作方式有进一步的了解。&lt;/p&gt;&lt;p&gt;我实现的链接器代码已经开源在 &lt;a href=&#34;https://github.com/jiegec/cold&#34;&gt;jiegec/cold&lt;/a&gt;，编写的过程和博客的时间基本是一致的，针对相应博客的进度，可以找 git commit 历史，查看对应版本的实现。&lt;/p&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;a class=&#34;headerlink&#34; href=&#34;#参考&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;最后给出一些文档，可供实现时参考：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://maskray.me/blog/2021-09-19-all-about-procedure-linkage-table&#34;&gt;All about Procedure Linkage Table&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/software/2024/04/07/write-a-linker-4/</link> <pubDate>Sun, 07 Apr 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2024/04/07/write-a-linker-4/</guid> </item> <item> <title>开发一个链接器（3）</title> <category>elf</category> <category>linker</category> <category>linux</category> <category>software</category> <category>write-a-linker</category> <description>&lt;h1 id=&#34;开发一个链接器3&#34;&gt;开发一个链接器（3）&lt;a class=&#34;headerlink&#34; href=&#34;#开发一个链接器3&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;a class=&#34;headerlink&#34; href=&#34;#前言&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这个系列的前两篇博客实现了一个简单的静态链接器，它可以输入若干个 ELF .o 文件，输出 ELF 可执行文件。接下来，我们进一步支持动态库：输入若干个 ELF .o 文件，输出 ELF 动态库。&lt;/p&gt;&lt;!-- more --&gt;&lt;p&gt;注意，本篇博客只讨论如何生成 ELF 动态库，并不涉及如何链接 ELF 动态库，这将会作为后续文章的内容。&lt;/p&gt;&lt;h2 id=&#34;回顾&#34;&gt;回顾&lt;a class=&#34;headerlink&#34; href=&#34;#回顾&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;首先回顾一下：在这个系列的前两篇博客中，我们观察了现有链接器的工作过程，并且实现了一个简单的链接器：输入若干个 ELF object，链接成一个可以运行的 ELF 可执行文件。这个过程包括：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;解析输入的若干个 ELF，收集各个 section 需要保留下来的内容，合并来自不同 ELF 的同名 section&lt;/li&gt;&lt;li&gt;规划将要生成的 ELF 可执行文件的内容布局：开始是固定的文件头，之后是各个 section，计算出它们从哪里开始到哪里结束&lt;/li&gt;&lt;li&gt;第二步完成以后，就可以知道在运行时，各个 section 将会被加载到哪个地址上，进而更新符号表，得到每个符号在运行时会处在哪个地址上；此时我们就可以计算重定位，把地址按照预设的规则填入到对应的地方&lt;/li&gt;&lt;li&gt;最后按照预设的文件布局，把文件内容写入到 ELF 文件中&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;接下来我们就要实现生成动态库文件，让我们首先分析一下，这里的不同在哪里。&lt;/p&gt;&lt;h2 id=&#34;分析&#34;&gt;分析&lt;a class=&#34;headerlink&#34; href=&#34;#分析&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;动态链接&#34;&gt;动态链接&lt;a class=&#34;headerlink&#34; href=&#34;#动态链接&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;本系列的前面两篇文章博客实现的都是静态链接：由静态链接器完成所有的事情，得到一个可执行文件，这个可执行文件加载到内存中就可以跑，不需要额外的操作。但是静态链接也有一些缺点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;二进制体积大，同样的代码出现在很多个可执行文件中，同时因为这些代码经过了重定位，内容有些许差别，无法复用，浪费硬盘和内存空间&lt;/li&gt;&lt;li&gt;如果某个底层库出现安全问题，由于这个库可能静态链接到了很多不同的程序里，为了去除有问题的代码，需要把所有用到这个库的程序都重新编译一遍，才能保证安全的代码被链接进去&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;为了解决这些问题，常用的解决办法是动态链接：静态链接器只完成一部分的链接，剩下的一部分工作，要等到程序启动的时候完成，那么程序在启动时由动态链接器完成的链接，就是动态链接。举个例子，一段 C 代码调用了标准库里的 C 函数，要么用静态链接，把整个标准库连接到可执行文件里；要么就用动态链接，在可执行文件里保留与函数调用相关的重定位，在程序执行时，再让动态链接器来完成最后的链接过程。动态链接解决了上面提到的问题：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;由于动态链接等到最后程序启动时才进行，所以可执行文件本身的体积就可以做到很小，不再需要静态链接一个可能巨大的静态库&lt;/li&gt;&lt;li&gt;动态链接是每次程序启动时进行，所以如果动态库文件替换了，那么程序未来再次启动时，自然就会用到新的动态库文件，不需要重新编译程序&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;当然了，动态链接也带来了新的要求和挑战：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;静态链接的时候，因为内存地址空间里只会加载一个可执行文件，所以所有地址都可以预先算好，不用担心出现冲突；而动态链接的时候，同一个动态库没办法保证总是映射到同一个地址上：如果每个动态库都写死了自己要加载到的地址，那么不同的动态库选了同样的地址，是否就意味着不能同时用这两个动态库了？因此动态库要支持加载到不同的地址上，为了达到这个目标，就需要在编译动态库的时候，以 PIC（Position Independent Code，位置无关代码）的方式编译，使得无论动态库加载到哪里，程序都可以正常运行。下面会给出一个例子&lt;/li&gt;&lt;li&gt;由于程序每次启动都需要动态链接，那么动态链接的性能就要尽量好；为了达到这个目的，后面会看到静态链接器和动态链接器是如何配合着提高性能的&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;生成动态库&#34;&gt;生成动态库&lt;a class=&#34;headerlink&#34; href=&#34;#生成动态库&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;回顾一下，在上一篇文章中，我们把代码分成了两部分：&lt;code&gt;main.s&lt;/code&gt; 和 &lt;code&gt;printer.s&lt;/code&gt;，前者调用后者实现的 &lt;code&gt;print&lt;/code&gt; 和 &lt;code&gt;exit&lt;/code&gt; 函数：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# https://gist.github.com/adrianratnapala/1321776&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# printer.s&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.rodata&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;hello:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Hello world!\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-6&#34;&gt;&lt;a id=&#34;__codelineno-0-6&#34; name=&#34;__codelineno-0-6&#34; href=&#34;#__codelineno-0-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-7&#34;&gt;&lt;a id=&#34;__codelineno-0-7&#34; name=&#34;__codelineno-0-7&#34; href=&#34;#__codelineno-0-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-8&#34;&gt;&lt;a id=&#34;__codelineno-0-8&#34; name=&#34;__codelineno-0-8&#34; href=&#34;#__codelineno-0-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.text&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-9&#34;&gt;&lt;a id=&#34;__codelineno-0-9&#34; name=&#34;__codelineno-0-9&#34; href=&#34;#__codelineno-0-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.globl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;print&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-10&#34;&gt;&lt;a id=&#34;__codelineno-0-10&#34; name=&#34;__codelineno-0-10&#34; href=&#34;#__codelineno-0-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;print:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-11&#34;&gt;&lt;a id=&#34;__codelineno-0-11&#34; name=&#34;__codelineno-0-11&#34; href=&#34;#__codelineno-0-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# write(1, hello, 13)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-12&#34;&gt;&lt;a id=&#34;__codelineno-0-12&#34; name=&#34;__codelineno-0-12&#34; href=&#34;#__codelineno-0-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-13&#34;&gt;&lt;a id=&#34;__codelineno-0-13&#34; name=&#34;__codelineno-0-13&#34; href=&#34;#__codelineno-0-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-14&#34;&gt;&lt;a id=&#34;__codelineno-0-14&#34; name=&#34;__codelineno-0-14&#34; href=&#34;#__codelineno-0-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdx&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-15&#34;&gt;&lt;a id=&#34;__codelineno-0-15&#34; name=&#34;__codelineno-0-15&#34; href=&#34;#__codelineno-0-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-16&#34;&gt;&lt;a id=&#34;__codelineno-0-16&#34; name=&#34;__codelineno-0-16&#34; href=&#34;#__codelineno-0-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;syscall&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-17&#34;&gt;&lt;a id=&#34;__codelineno-0-17&#34; name=&#34;__codelineno-0-17&#34; href=&#34;#__codelineno-0-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-18&#34;&gt;&lt;a id=&#34;__codelineno-0-18&#34; name=&#34;__codelineno-0-18&#34; href=&#34;#__codelineno-0-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-19&#34;&gt;&lt;a id=&#34;__codelineno-0-19&#34; name=&#34;__codelineno-0-19&#34; href=&#34;#__codelineno-0-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.globl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-20&#34;&gt;&lt;a id=&#34;__codelineno-0-20&#34; name=&#34;__codelineno-0-20&#34; href=&#34;#__codelineno-0-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;exit:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-21&#34;&gt;&lt;a id=&#34;__codelineno-0-21&#34; name=&#34;__codelineno-0-21&#34; href=&#34;#__codelineno-0-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# _exit(0)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-22&#34;&gt;&lt;a id=&#34;__codelineno-0-22&#34; name=&#34;__codelineno-0-22&#34; href=&#34;#__codelineno-0-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-23&#34;&gt;&lt;a id=&#34;__codelineno-0-23&#34; name=&#34;__codelineno-0-23&#34; href=&#34;#__codelineno-0-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-24&#34;&gt;&lt;a id=&#34;__codelineno-0-24&#34; name=&#34;__codelineno-0-24&#34; href=&#34;#__codelineno-0-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;syscall&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# main.s&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.text&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.globl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;_start&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-5&#34;&gt;&lt;a id=&#34;__codelineno-1-5&#34; name=&#34;__codelineno-1-5&#34; href=&#34;#__codelineno-1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;print&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-6&#34;&gt;&lt;a id=&#34;__codelineno-1-6&#34; name=&#34;__codelineno-1-6&#34; href=&#34;#__codelineno-1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么我们就想把 &lt;code&gt;printer.s&lt;/code&gt; 编译成一个动态库 &lt;code&gt;libprinter.so&lt;/code&gt;，然后 &lt;code&gt;main.s&lt;/code&gt; 编译成可执行文件，动态链接到 &lt;code&gt;libprinter.so&lt;/code&gt;。为了生成动态链接库，需要为 &lt;code&gt;ld&lt;/code&gt; 添加 &lt;code&gt;-shared&lt;/code&gt; 命令行参数：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;as&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main.s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main.o&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;as&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;printer.s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;printer.o&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# ld -shared: generate shared library&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ld&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-shared&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;printer.o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;libprinter.so&lt;/span&gt;&lt;span id=&#34;__span-2-5&#34;&gt;&lt;a id=&#34;__codelineno-2-5&#34; name=&#34;__codelineno-2-5&#34; href=&#34;#__codelineno-2-5&#34;&gt;&lt;/a&gt;ld:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;printer.o:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;relocation&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_32S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;against&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;.rodata&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;can&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;not&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;be&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;used&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;when&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;making&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;shared&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;object&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;recompile&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;with&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-fPIC&lt;/span&gt;&lt;span id=&#34;__span-2-6&#34;&gt;&lt;a id=&#34;__codelineno-2-6&#34; name=&#34;__codelineno-2-6&#34; href=&#34;#__codelineno-2-6&#34;&gt;&lt;/a&gt;ld:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;failed&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;to&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;dynamic&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sizes:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;bad&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;value&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和往常一样，我们分别为 &lt;code&gt;main.s&lt;/code&gt; 和 &lt;code&gt;printer.s&lt;/code&gt; 调用汇编器 &lt;code&gt;as&lt;/code&gt;，但这次，单独用 &lt;code&gt;printer.o&lt;/code&gt; 链接出动态库 &lt;code&gt;libprinter.so&lt;/code&gt;，不幸的是，它报错了，告诉我们生成动态库的时候，不允许出现 &lt;code&gt;R_X86_64_32S&lt;/code&gt; 的 relocation 类型：&lt;code&gt;ld: printer.o: relocation R_X86_64_32S against ``.rodata&#39; can not be used when making a shared object&lt;/code&gt;。回忆第一篇博客，&lt;code&gt;R_X86_64_32S&lt;/code&gt; 的意思是把目的符号的绝对地址以 32 位有符号数的形式填写，但前面也提到，动态库是无法提前知道自己会被加载到哪个地址上的，链接器没办法提前知道目的符号的绝对地址。这说明我们需要把 &lt;code&gt;printer.s&lt;/code&gt; 改写成只用相对地址，不用绝对地址，这样就成为位置无关代码（PIC）了。链接器还贴心地告诉我们，可以给编译器传 &lt;code&gt;-fPIC&lt;/code&gt; 参数来让编译器在编译 C 代码的时候生成位置无关代码（PIC）。不过我们正在手写汇编，那就必须手动改写成位置无关代码了，怎么改呢？&lt;/p&gt;&lt;p&gt;既然不允许出现的是 &lt;code&gt;R_X86_64_32S&lt;/code&gt;，我们要找到产生这个 relocation 的汇编代码：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它的目的是把 &lt;code&gt;hello&lt;/code&gt; 的地址写到 &lt;code&gt;%rsi&lt;/code&gt; 寄存器中，但是这个写法会要求链接器以立即数的形式把绝对地址写进去。而我们想要的是地址无关代码，那么就需要用到相对地址。在上一篇文章中，在什么地方出现了相对地址？上一篇文章中，&lt;code&gt;main.s&lt;/code&gt; 调用 &lt;code&gt;print&lt;/code&gt; 和 &lt;code&gt;exit&lt;/code&gt; 时用到了 &lt;code&gt;R_X86_64_PC32&lt;/code&gt;，它的立即数记录的是相对地址偏移。如果在这里，也让链接器生成一个相对的 relocation，就可以实现地址无关了，这条指令是：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;lea&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;lea&lt;/code&gt; 是 x86 的 LEA（Load Effective Address）指令，它的功能是计算 &lt;code&gt;%rip&lt;/code&gt; 加立即数的值，写入到 &lt;code&gt;%rsi&lt;/code&gt; 的值，而这个立即数就是 &lt;code&gt;hello&lt;/code&gt; 相对于 &lt;code&gt;%rip&lt;/code&gt; 的相对地址偏移。很遗憾，汇编器没办法帮我们做这个改写，必须在写代码的时候就想着要写地址无关代码。改写后的 &lt;code&gt;printer.s&lt;/code&gt; 如下：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-5-1&#34;&gt;&lt;a id=&#34;__codelineno-5-1&#34; name=&#34;__codelineno-5-1&#34; href=&#34;#__codelineno-5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# https://gist.github.com/adrianratnapala/1321776&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-2&#34;&gt;&lt;a id=&#34;__codelineno-5-2&#34; name=&#34;__codelineno-5-2&#34; href=&#34;#__codelineno-5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# printer.s&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-3&#34;&gt;&lt;a id=&#34;__codelineno-5-3&#34; name=&#34;__codelineno-5-3&#34; href=&#34;#__codelineno-5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.rodata&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-4&#34;&gt;&lt;a id=&#34;__codelineno-5-4&#34; name=&#34;__codelineno-5-4&#34; href=&#34;#__codelineno-5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;hello:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-5&#34;&gt;&lt;a id=&#34;__codelineno-5-5&#34; name=&#34;__codelineno-5-5&#34; href=&#34;#__codelineno-5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Hello world!\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-6&#34;&gt;&lt;a id=&#34;__codelineno-5-6&#34; name=&#34;__codelineno-5-6&#34; href=&#34;#__codelineno-5-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-7&#34;&gt;&lt;a id=&#34;__codelineno-5-7&#34; name=&#34;__codelineno-5-7&#34; href=&#34;#__codelineno-5-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-8&#34;&gt;&lt;a id=&#34;__codelineno-5-8&#34; name=&#34;__codelineno-5-8&#34; href=&#34;#__codelineno-5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.text&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-9&#34;&gt;&lt;a id=&#34;__codelineno-5-9&#34; name=&#34;__codelineno-5-9&#34; href=&#34;#__codelineno-5-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.globl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;print&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-10&#34;&gt;&lt;a id=&#34;__codelineno-5-10&#34; name=&#34;__codelineno-5-10&#34; href=&#34;#__codelineno-5-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;print:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-11&#34;&gt;&lt;a id=&#34;__codelineno-5-11&#34; name=&#34;__codelineno-5-11&#34; href=&#34;#__codelineno-5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# write(1, hello, 13)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-12&#34;&gt;&lt;a id=&#34;__codelineno-5-12&#34; name=&#34;__codelineno-5-12&#34; href=&#34;#__codelineno-5-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-13&#34;&gt;&lt;a id=&#34;__codelineno-5-13&#34; name=&#34;__codelineno-5-13&#34; href=&#34;#__codelineno-5-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# this instruction requires absolute addressing&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-14&#34;&gt;&lt;a id=&#34;__codelineno-5-14&#34; name=&#34;__codelineno-5-14&#34; href=&#34;#__codelineno-5-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# mov $hello, %rsi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-15&#34;&gt;&lt;a id=&#34;__codelineno-5-15&#34; name=&#34;__codelineno-5-15&#34; href=&#34;#__codelineno-5-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# this one is position independent&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-16&#34;&gt;&lt;a id=&#34;__codelineno-5-16&#34; name=&#34;__codelineno-5-16&#34; href=&#34;#__codelineno-5-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;lea&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-17&#34;&gt;&lt;a id=&#34;__codelineno-5-17&#34; name=&#34;__codelineno-5-17&#34; href=&#34;#__codelineno-5-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdx&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-18&#34;&gt;&lt;a id=&#34;__codelineno-5-18&#34; name=&#34;__codelineno-5-18&#34; href=&#34;#__codelineno-5-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-19&#34;&gt;&lt;a id=&#34;__codelineno-5-19&#34; name=&#34;__codelineno-5-19&#34; href=&#34;#__codelineno-5-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;syscall&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-20&#34;&gt;&lt;a id=&#34;__codelineno-5-20&#34; name=&#34;__codelineno-5-20&#34; href=&#34;#__codelineno-5-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-21&#34;&gt;&lt;a id=&#34;__codelineno-5-21&#34; name=&#34;__codelineno-5-21&#34; href=&#34;#__codelineno-5-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-22&#34;&gt;&lt;a id=&#34;__codelineno-5-22&#34; name=&#34;__codelineno-5-22&#34; href=&#34;#__codelineno-5-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.globl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-23&#34;&gt;&lt;a id=&#34;__codelineno-5-23&#34; name=&#34;__codelineno-5-23&#34; href=&#34;#__codelineno-5-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;exit:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-24&#34;&gt;&lt;a id=&#34;__codelineno-5-24&#34; name=&#34;__codelineno-5-24&#34; href=&#34;#__codelineno-5-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# _exit(0)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-25&#34;&gt;&lt;a id=&#34;__codelineno-5-25&#34; name=&#34;__codelineno-5-25&#34; href=&#34;#__codelineno-5-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-26&#34;&gt;&lt;a id=&#34;__codelineno-5-26&#34; name=&#34;__codelineno-5-26&#34; href=&#34;#__codelineno-5-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-27&#34;&gt;&lt;a id=&#34;__codelineno-5-27&#34; name=&#34;__codelineno-5-27&#34; href=&#34;#__codelineno-5-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;syscall&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以观察到，它确实产生了一个相对的 relocation &lt;code&gt;R_X86_64_PC32&lt;/code&gt;：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-6-1&#34;&gt;&lt;a id=&#34;__codelineno-6-1&#34; name=&#34;__codelineno-6-1&#34; href=&#34;#__codelineno-6-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;as&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;printer.s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;printer.o&lt;/span&gt;&lt;span id=&#34;__span-6-2&#34;&gt;&lt;a id=&#34;__codelineno-6-2&#34; name=&#34;__codelineno-6-2&#34; href=&#34;#__codelineno-6-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;objdump&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-r&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;printer.o&lt;/span&gt;&lt;span id=&#34;__span-6-3&#34;&gt;&lt;a id=&#34;__codelineno-6-3&#34; name=&#34;__codelineno-6-3&#34; href=&#34;#__codelineno-6-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-4&#34;&gt;&lt;a id=&#34;__codelineno-6-4&#34; name=&#34;__codelineno-6-4&#34; href=&#34;#__codelineno-6-4&#34;&gt;&lt;/a&gt;printer.o:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;format&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;elf64-x86-64&lt;/span&gt;&lt;span id=&#34;__span-6-5&#34;&gt;&lt;a id=&#34;__codelineno-6-5&#34; name=&#34;__codelineno-6-5&#34; href=&#34;#__codelineno-6-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-6&#34;&gt;&lt;a id=&#34;__codelineno-6-6&#34; name=&#34;__codelineno-6-6&#34; href=&#34;#__codelineno-6-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-7&#34;&gt;&lt;a id=&#34;__codelineno-6-7&#34; name=&#34;__codelineno-6-7&#34; href=&#34;#__codelineno-6-7&#34;&gt;&lt;/a&gt;Disassembly&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.text:&lt;/span&gt;&lt;span id=&#34;__span-6-8&#34;&gt;&lt;a id=&#34;__codelineno-6-8&#34; name=&#34;__codelineno-6-8&#34; href=&#34;#__codelineno-6-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-9&#34;&gt;&lt;a id=&#34;__codelineno-6-9&#34; name=&#34;__codelineno-6-9&#34; href=&#34;#__codelineno-6-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;print&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-6-10&#34;&gt;&lt;a id=&#34;__codelineno-6-10&#34; name=&#34;__codelineno-6-10&#34; href=&#34;#__codelineno-6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x1,%rdi&lt;/span&gt;&lt;span id=&#34;__span-6-11&#34;&gt;&lt;a id=&#34;__codelineno-6-11&#34; name=&#34;__codelineno-6-11&#34; href=&#34;#__codelineno-6-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;lea&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%rsi&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# e &amp;lt;print+0xe&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-12&#34;&gt;&lt;a id=&#34;__codelineno-6-12&#34; name=&#34;__codelineno-6-12&#34; href=&#34;#__codelineno-6-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;a:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_PC32&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.rodata-0x4&lt;/span&gt;&lt;span id=&#34;__span-6-13&#34;&gt;&lt;a id=&#34;__codelineno-6-13&#34; name=&#34;__codelineno-6-13&#34; href=&#34;#__codelineno-6-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c2&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;xd,%rdx&lt;/span&gt;&lt;span id=&#34;__span-6-14&#34;&gt;&lt;a id=&#34;__codelineno-6-14&#34; name=&#34;__codelineno-6-14&#34; href=&#34;#__codelineno-6-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x1,%rax&lt;/span&gt;&lt;span id=&#34;__span-6-15&#34;&gt;&lt;a id=&#34;__codelineno-6-15&#34; name=&#34;__codelineno-6-15&#34; href=&#34;#__codelineno-6-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1c:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;syscall&lt;/span&gt;&lt;span id=&#34;__span-6-16&#34;&gt;&lt;a id=&#34;__codelineno-6-16&#34; name=&#34;__codelineno-6-16&#34; href=&#34;#__codelineno-6-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1e:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-6-17&#34;&gt;&lt;a id=&#34;__codelineno-6-17&#34; name=&#34;__codelineno-6-17&#34; href=&#34;#__codelineno-6-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-18&#34;&gt;&lt;a id=&#34;__codelineno-6-18&#34; name=&#34;__codelineno-6-18&#34; href=&#34;#__codelineno-6-18&#34;&gt;&lt;/a&gt;000000000000001f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;exit&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-6-19&#34;&gt;&lt;a id=&#34;__codelineno-6-19&#34; name=&#34;__codelineno-6-19&#34; href=&#34;#__codelineno-6-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;xor&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rdi,%rdi&lt;/span&gt;&lt;span id=&#34;__span-6-20&#34;&gt;&lt;a id=&#34;__codelineno-6-20&#34; name=&#34;__codelineno-6-20&#34; href=&#34;#__codelineno-6-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x3c,%rax&lt;/span&gt;&lt;span id=&#34;__span-6-21&#34;&gt;&lt;a id=&#34;__codelineno-6-21&#34; name=&#34;__codelineno-6-21&#34; href=&#34;#__codelineno-6-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;29&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;syscall&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;虽然绝对地址无法确定，但静态链接器依然可以计算出相对地址偏移，完成 relocation 的计算。重新链接，发现它确实成功生成了动态库，不再报错：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-7-1&#34;&gt;&lt;a id=&#34;__codelineno-7-1&#34; name=&#34;__codelineno-7-1&#34; href=&#34;#__codelineno-7-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ld&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-shared&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;printer.o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;libprinter.so&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;观察动态库&#34;&gt;观察动态库&lt;a class=&#34;headerlink&#34; href=&#34;#观察动态库&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;接下来就来看看新生成的 &lt;code&gt;libprinter.so&lt;/code&gt; 和之前的可执行文件有什么不同，首先是 &lt;code&gt;ELF Header&lt;/code&gt; 部分：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-8-1&#34;&gt;&lt;a id=&#34;__codelineno-8-1&#34; name=&#34;__codelineno-8-1&#34; href=&#34;#__codelineno-8-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;readelf&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;libprinter.so&lt;/span&gt;&lt;span id=&#34;__span-8-2&#34;&gt;&lt;a id=&#34;__codelineno-8-2&#34; name=&#34;__codelineno-8-2&#34; href=&#34;#__codelineno-8-2&#34;&gt;&lt;/a&gt;ELF&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Header:&lt;/span&gt;&lt;span id=&#34;__span-8-3&#34;&gt;&lt;a id=&#34;__codelineno-8-3&#34; name=&#34;__codelineno-8-3&#34; href=&#34;#__codelineno-8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Magic:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;7f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;4c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-4&#34;&gt;&lt;a id=&#34;__codelineno-8-4&#34; name=&#34;__codelineno-8-4&#34; href=&#34;#__codelineno-8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Class:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ELF64&lt;/span&gt;&lt;span id=&#34;__span-8-5&#34;&gt;&lt;a id=&#34;__codelineno-8-5&#34; name=&#34;__codelineno-8-5&#34; href=&#34;#__codelineno-8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Data:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;complement,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;little&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;endian&lt;/span&gt;&lt;span id=&#34;__span-8-6&#34;&gt;&lt;a id=&#34;__codelineno-8-6&#34; name=&#34;__codelineno-8-6&#34; href=&#34;#__codelineno-8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Version:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;current&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-7&#34;&gt;&lt;a id=&#34;__codelineno-8-7&#34; name=&#34;__codelineno-8-7&#34; href=&#34;#__codelineno-8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;OS/ABI:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;UNIX&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;System&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;V&lt;/span&gt;&lt;span id=&#34;__span-8-8&#34;&gt;&lt;a id=&#34;__codelineno-8-8&#34; name=&#34;__codelineno-8-8&#34; href=&#34;#__codelineno-8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ABI&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Version:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-9&#34;&gt;&lt;a id=&#34;__codelineno-8-9&#34; name=&#34;__codelineno-8-9&#34; href=&#34;#__codelineno-8-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Type:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DYN&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Shared&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;object&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-10&#34;&gt;&lt;a id=&#34;__codelineno-8-10&#34; name=&#34;__codelineno-8-10&#34; href=&#34;#__codelineno-8-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Machine:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Advanced&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Micro&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Devices&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;X86-64&lt;/span&gt;&lt;span id=&#34;__span-8-11&#34;&gt;&lt;a id=&#34;__codelineno-8-11&#34; name=&#34;__codelineno-8-11&#34; href=&#34;#__codelineno-8-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Version:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1&lt;/span&gt;&lt;span id=&#34;__span-8-12&#34;&gt;&lt;a id=&#34;__codelineno-8-12&#34; name=&#34;__codelineno-8-12&#34; href=&#34;#__codelineno-8-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Entry&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;point&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;address:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;/span&gt;&lt;span id=&#34;__span-8-13&#34;&gt;&lt;a id=&#34;__codelineno-8-13&#34; name=&#34;__codelineno-8-13&#34; href=&#34;#__codelineno-8-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Start&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;program&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;into&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-14&#34;&gt;&lt;a id=&#34;__codelineno-8-14&#34; name=&#34;__codelineno-8-14&#34; href=&#34;#__codelineno-8-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Start&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12584&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;into&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-15&#34;&gt;&lt;a id=&#34;__codelineno-8-15&#34; name=&#34;__codelineno-8-15&#34; href=&#34;#__codelineno-8-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Flags:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;/span&gt;&lt;span id=&#34;__span-8-16&#34;&gt;&lt;a id=&#34;__codelineno-8-16&#34; name=&#34;__codelineno-8-16&#34; href=&#34;#__codelineno-8-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;this&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-17&#34;&gt;&lt;a id=&#34;__codelineno-8-17&#34; name=&#34;__codelineno-8-17&#34; href=&#34;#__codelineno-8-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;program&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-18&#34;&gt;&lt;a id=&#34;__codelineno-8-18&#34; name=&#34;__codelineno-8-18&#34; href=&#34;#__codelineno-8-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Number&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;program&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-19&#34;&gt;&lt;a id=&#34;__codelineno-8-19&#34; name=&#34;__codelineno-8-19&#34; href=&#34;#__codelineno-8-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-20&#34;&gt;&lt;a id=&#34;__codelineno-8-20&#34; name=&#34;__codelineno-8-20&#34; href=&#34;#__codelineno-8-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Number&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-21&#34;&gt;&lt;a id=&#34;__codelineno-8-21&#34; name=&#34;__codelineno-8-21&#34; href=&#34;#__codelineno-8-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;string&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;table&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;index:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和可执行文件的区别在于，&lt;code&gt;Type&lt;/code&gt; 是 &lt;code&gt;DYN (Shared object file)&lt;/code&gt;，表示这是一个动态库文件；&lt;code&gt;Entry point address&lt;/code&gt; 等于零，因为动态库没有入口，入口地址还是由可执行程序提供。&lt;/p&gt;&lt;p&gt;接下来是 Section 部分：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-9-1&#34;&gt;&lt;a id=&#34;__codelineno-9-1&#34; name=&#34;__codelineno-9-1&#34; href=&#34;#__codelineno-9-1&#34;&gt;&lt;/a&gt;Section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Headers:&lt;/span&gt;&lt;span id=&#34;__span-9-2&#34;&gt;&lt;a id=&#34;__codelineno-9-2&#34; name=&#34;__codelineno-9-2&#34; href=&#34;#__codelineno-9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Nr&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Name&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Type&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Address&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Offset&lt;/span&gt;&lt;span id=&#34;__span-9-3&#34;&gt;&lt;a id=&#34;__codelineno-9-3&#34; name=&#34;__codelineno-9-3&#34; href=&#34;#__codelineno-9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;EntSize&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Flags&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Link&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Info&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Align&lt;/span&gt;&lt;span id=&#34;__span-9-4&#34;&gt;&lt;a id=&#34;__codelineno-9-4&#34; name=&#34;__codelineno-9-4&#34; href=&#34;#__codelineno-9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NULL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00000000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-5&#34;&gt;&lt;a id=&#34;__codelineno-9-5&#34; name=&#34;__codelineno-9-5&#34; href=&#34;#__codelineno-9-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-6&#34;&gt;&lt;a id=&#34;__codelineno-9-6&#34; name=&#34;__codelineno-9-6&#34; href=&#34;#__codelineno-9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.hash&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;HASH&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000190&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00000190&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-7&#34;&gt;&lt;a id=&#34;__codelineno-9-7&#34; name=&#34;__codelineno-9-7&#34; href=&#34;#__codelineno-9-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000018&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000004&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-8&#34;&gt;&lt;a id=&#34;__codelineno-9-8&#34; name=&#34;__codelineno-9-8&#34; href=&#34;#__codelineno-9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.gnu.hash&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GNU_HASH&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;00000000000001a8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000001a8&lt;/span&gt;&lt;span id=&#34;__span-9-9&#34;&gt;&lt;a id=&#34;__codelineno-9-9&#34; name=&#34;__codelineno-9-9&#34; href=&#34;#__codelineno-9-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000028&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-10&#34;&gt;&lt;a id=&#34;__codelineno-9-10&#34; name=&#34;__codelineno-9-10&#34; href=&#34;#__codelineno-9-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.dynsym&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DYNSYM&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;00000000000001d0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000001d0&lt;/span&gt;&lt;span id=&#34;__span-9-11&#34;&gt;&lt;a id=&#34;__codelineno-9-11&#34; name=&#34;__codelineno-9-11&#34; href=&#34;#__codelineno-9-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000048&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000018&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-12&#34;&gt;&lt;a id=&#34;__codelineno-9-12&#34; name=&#34;__codelineno-9-12&#34; href=&#34;#__codelineno-9-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.dynstr&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;STRTAB&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000218&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00000218&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-13&#34;&gt;&lt;a id=&#34;__codelineno-9-13&#34; name=&#34;__codelineno-9-13&#34; href=&#34;#__codelineno-9-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000000000000000c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-14&#34;&gt;&lt;a id=&#34;__codelineno-9-14&#34; name=&#34;__codelineno-9-14&#34; href=&#34;#__codelineno-9-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.text&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PROGBITS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000001000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00001000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-15&#34;&gt;&lt;a id=&#34;__codelineno-9-15&#34; name=&#34;__codelineno-9-15&#34; href=&#34;#__codelineno-9-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000000000000002b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;AX&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-16&#34;&gt;&lt;a id=&#34;__codelineno-9-16&#34; name=&#34;__codelineno-9-16&#34; href=&#34;#__codelineno-9-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.rodata&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PROGBITS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000002000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00002000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-17&#34;&gt;&lt;a id=&#34;__codelineno-9-17&#34; name=&#34;__codelineno-9-17&#34; href=&#34;#__codelineno-9-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000000000000000e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-18&#34;&gt;&lt;a id=&#34;__codelineno-9-18&#34; name=&#34;__codelineno-9-18&#34; href=&#34;#__codelineno-9-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.eh_frame&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PROGBITS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000002010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00002010&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-19&#34;&gt;&lt;a id=&#34;__codelineno-9-19&#34; name=&#34;__codelineno-9-19&#34; href=&#34;#__codelineno-9-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-20&#34;&gt;&lt;a id=&#34;__codelineno-9-20&#34; name=&#34;__codelineno-9-20&#34; href=&#34;#__codelineno-9-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.dynamic&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DYNAMIC&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0000000000003f40&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;00002f40&lt;/span&gt;&lt;span id=&#34;__span-9-21&#34;&gt;&lt;a id=&#34;__codelineno-9-21&#34; name=&#34;__codelineno-9-21&#34; href=&#34;#__codelineno-9-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;00000000000000c0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;WA&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-22&#34;&gt;&lt;a id=&#34;__codelineno-9-22&#34; name=&#34;__codelineno-9-22&#34; href=&#34;#__codelineno-9-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.symtab&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;SYMTAB&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00003000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-23&#34;&gt;&lt;a id=&#34;__codelineno-9-23&#34; name=&#34;__codelineno-9-23&#34; href=&#34;#__codelineno-9-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;00000000000000a8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000018&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-24&#34;&gt;&lt;a id=&#34;__codelineno-9-24&#34; name=&#34;__codelineno-9-24&#34; href=&#34;#__codelineno-9-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.strtab&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;STRTAB&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000030a8&lt;/span&gt;&lt;span id=&#34;__span-9-25&#34;&gt;&lt;a id=&#34;__codelineno-9-25&#34; name=&#34;__codelineno-9-25&#34; href=&#34;#__codelineno-9-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000025&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-26&#34;&gt;&lt;a id=&#34;__codelineno-9-26&#34; name=&#34;__codelineno-9-26&#34; href=&#34;#__codelineno-9-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.shstrtab&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;STRTAB&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000030cd&lt;/span&gt;&lt;span id=&#34;__span-9-27&#34;&gt;&lt;a id=&#34;__codelineno-9-27&#34; name=&#34;__codelineno-9-27&#34; href=&#34;#__codelineno-9-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000056&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-28&#34;&gt;&lt;a id=&#34;__codelineno-9-28&#34; name=&#34;__codelineno-9-28&#34; href=&#34;#__codelineno-9-28&#34;&gt;&lt;/a&gt;Key&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;to&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Flags:&lt;/span&gt;&lt;span id=&#34;__span-9-29&#34;&gt;&lt;a id=&#34;__codelineno-9-29&#34; name=&#34;__codelineno-9-29&#34; href=&#34;#__codelineno-9-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;W&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;write&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;alloc&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;X&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;execute&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;M&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;merge&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;strings&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;I&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;info&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;/span&gt;&lt;span id=&#34;__span-9-30&#34;&gt;&lt;a id=&#34;__codelineno-9-30&#34; name=&#34;__codelineno-9-30&#34; href=&#34;#__codelineno-9-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;L&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;link&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;order&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;O&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;extra&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;OS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;processing&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;required&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;G&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;group&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;T&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TLS&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;/span&gt;&lt;span id=&#34;__span-9-31&#34;&gt;&lt;a id=&#34;__codelineno-9-31&#34; name=&#34;__codelineno-9-31&#34; href=&#34;#__codelineno-9-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;C&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compressed&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;x&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;unknown&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;specific&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;E&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;exclude&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;/span&gt;&lt;span id=&#34;__span-9-32&#34;&gt;&lt;a id=&#34;__codelineno-9-32&#34; name=&#34;__codelineno-9-32&#34; href=&#34;#__codelineno-9-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;D&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;mbind&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;l&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;large&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;p&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;processor&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;specific&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-33&#34;&gt;&lt;a id=&#34;__codelineno-9-33&#34; name=&#34;__codelineno-9-33&#34; href=&#34;#__codelineno-9-33&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-34&#34;&gt;&lt;a id=&#34;__codelineno-9-34&#34; name=&#34;__codelineno-9-34&#34; href=&#34;#__codelineno-9-34&#34;&gt;&lt;/a&gt;There&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;are&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;no&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;groups&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;this&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以观察到多了几个没有见到过的 section，这里简要介绍一下，后面会详细解释：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;.hash&lt;/code&gt; 和 &lt;code&gt;.gnu.hash&lt;/code&gt;：从名字可以猜出来，这是某种哈希表，它的作用是提供一个符号名字到符号的映射，提高动态链接器查找符号的性能&lt;/li&gt;&lt;li&gt;&lt;code&gt;.dynsym&lt;/code&gt;：Dynamic Symbol，和动态链接有关的动态符号表&lt;/li&gt;&lt;li&gt;&lt;code&gt;.dynstr&lt;/code&gt;：Dynamic String，和动态链接有关的字符串的表&lt;/li&gt;&lt;li&gt;&lt;code&gt;.dynamic&lt;/code&gt;：Dynamic，向动态链接器提供了一些信息&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;此外，这些段的地址都从 0 开始，而不是可执行文件那样，从 0x400000 开始，毕竟动态库是可能被加载到不同地址上的，是没办法提前确定的。&lt;/p&gt;&lt;p&gt;接下来是 Program Header 部分：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-10-1&#34;&gt;&lt;a id=&#34;__codelineno-10-1&#34; name=&#34;__codelineno-10-1&#34; href=&#34;#__codelineno-10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;Program&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-2&#34;&gt;&lt;a id=&#34;__codelineno-10-2&#34; name=&#34;__codelineno-10-2&#34; href=&#34;#__codelineno-10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Offset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;VirtAddr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;PhysAddr&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-3&#34;&gt;&lt;a id=&#34;__codelineno-10-3&#34; name=&#34;__codelineno-10-3&#34; href=&#34;#__codelineno-10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;FileSiz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;MemSiz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Flags&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Align&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-4&#34;&gt;&lt;a id=&#34;__codelineno-10-4&#34; name=&#34;__codelineno-10-4&#34; href=&#34;#__codelineno-10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LOAD&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000000000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-5&#34;&gt;&lt;a id=&#34;__codelineno-10-5&#34; name=&#34;__codelineno-10-5&#34; href=&#34;#__codelineno-10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;x0000000000000224&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000000224&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x1000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-6&#34;&gt;&lt;a id=&#34;__codelineno-10-6&#34; name=&#34;__codelineno-10-6&#34; href=&#34;#__codelineno-10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LOAD&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000001000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000001000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000001000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-7&#34;&gt;&lt;a id=&#34;__codelineno-10-7&#34; name=&#34;__codelineno-10-7&#34; href=&#34;#__codelineno-10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;x000000000000002b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x000000000000002b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x1000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-8&#34;&gt;&lt;a id=&#34;__codelineno-10-8&#34; name=&#34;__codelineno-10-8&#34; href=&#34;#__codelineno-10-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LOAD&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000002000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000002000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000002000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-9&#34;&gt;&lt;a id=&#34;__codelineno-10-9&#34; name=&#34;__codelineno-10-9&#34; href=&#34;#__codelineno-10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;x0000000000000010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000000010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x1000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-10&#34;&gt;&lt;a id=&#34;__codelineno-10-10&#34; name=&#34;__codelineno-10-10&#34; href=&#34;#__codelineno-10-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LOAD&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000002f40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000003f40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000003f40&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-11&#34;&gt;&lt;a id=&#34;__codelineno-10-11&#34; name=&#34;__codelineno-10-11&#34; href=&#34;#__codelineno-10-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;x00000000000000c0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x00000000000000c0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;RW&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x1000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-12&#34;&gt;&lt;a id=&#34;__codelineno-10-12&#34; name=&#34;__codelineno-10-12&#34; href=&#34;#__codelineno-10-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;DYNAMIC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000002f40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000003f40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000003f40&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-13&#34;&gt;&lt;a id=&#34;__codelineno-10-13&#34; name=&#34;__codelineno-10-13&#34; href=&#34;#__codelineno-10-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;x00000000000000c0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x00000000000000c0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;RW&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-14&#34;&gt;&lt;a id=&#34;__codelineno-10-14&#34; name=&#34;__codelineno-10-14&#34; href=&#34;#__codelineno-10-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GNU_RELRO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000002f40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000003f40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0000000000003f40&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-15&#34;&gt;&lt;a id=&#34;__codelineno-10-15&#34; name=&#34;__codelineno-10-15&#34; href=&#34;#__codelineno-10-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;x00000000000000c0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x00000000000000c0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-16&#34;&gt;&lt;a id=&#34;__codelineno-10-16&#34; name=&#34;__codelineno-10-16&#34; href=&#34;#__codelineno-10-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-17&#34;&gt;&lt;a id=&#34;__codelineno-10-17&#34; name=&#34;__codelineno-10-17&#34; href=&#34;#__codelineno-10-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Segment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;mapping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-18&#34;&gt;&lt;a id=&#34;__codelineno-10-18&#34; name=&#34;__codelineno-10-18&#34; href=&#34;#__codelineno-10-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Segment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Sections...&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-19&#34;&gt;&lt;a id=&#34;__codelineno-10-19&#34; name=&#34;__codelineno-10-19&#34; href=&#34;#__codelineno-10-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.hash&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.gnu.hash&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.dynsym&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.dynstr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-20&#34;&gt;&lt;a id=&#34;__codelineno-10-20&#34; name=&#34;__codelineno-10-20&#34; href=&#34;#__codelineno-10-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.text&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-21&#34;&gt;&lt;a id=&#34;__codelineno-10-21&#34; name=&#34;__codelineno-10-21&#34; href=&#34;#__codelineno-10-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.rodata&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-22&#34;&gt;&lt;a id=&#34;__codelineno-10-22&#34; name=&#34;__codelineno-10-22&#34; href=&#34;#__codelineno-10-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.dynamic&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-23&#34;&gt;&lt;a id=&#34;__codelineno-10-23&#34; name=&#34;__codelineno-10-23&#34; href=&#34;#__codelineno-10-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.dynamic&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-24&#34;&gt;&lt;a id=&#34;__codelineno-10-24&#34; name=&#34;__codelineno-10-24&#34; href=&#34;#__codelineno-10-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.dynamic&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，除了已有的 &lt;code&gt;LOAD&lt;/code&gt; 以外，还出现了新的项目：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;DYNAMIC&lt;/code&gt;：告诉动态链接器，&lt;code&gt;.dynamic&lt;/code&gt; section 在哪个地方&lt;/li&gt;&lt;li&gt;&lt;code&gt;GNU_RELRO&lt;/code&gt;：这是 GNU 链接器安全性扩展，意思是在动态链接器完成重定位后，哪些内存区域可以设置为只读，防止程序篡改&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;紧接着就是 &lt;code&gt;.dynamic&lt;/code&gt; section 的内容：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-11-1&#34;&gt;&lt;a id=&#34;__codelineno-11-1&#34; name=&#34;__codelineno-11-1&#34; href=&#34;#__codelineno-11-1&#34;&gt;&lt;/a&gt;Dynamic&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;at&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;offset&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x2f40&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;contains&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;entries:&lt;/span&gt;&lt;span id=&#34;__span-11-2&#34;&gt;&lt;a id=&#34;__codelineno-11-2&#34; name=&#34;__codelineno-11-2&#34; href=&#34;#__codelineno-11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Tag&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Type&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Name/Value&lt;/span&gt;&lt;span id=&#34;__span-11-3&#34;&gt;&lt;a id=&#34;__codelineno-11-3&#34; name=&#34;__codelineno-11-3&#34; href=&#34;#__codelineno-11-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000004&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;HASH&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x190&lt;/span&gt;&lt;span id=&#34;__span-11-4&#34;&gt;&lt;a id=&#34;__codelineno-11-4&#34; name=&#34;__codelineno-11-4&#34; href=&#34;#__codelineno-11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x000000006ffffef5&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;GNU_HASH&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1a8&lt;/span&gt;&lt;span id=&#34;__span-11-5&#34;&gt;&lt;a id=&#34;__codelineno-11-5&#34; name=&#34;__codelineno-11-5&#34; href=&#34;#__codelineno-11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000005&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;STRTAB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x218&lt;/span&gt;&lt;span id=&#34;__span-11-6&#34;&gt;&lt;a id=&#34;__codelineno-11-6&#34; name=&#34;__codelineno-11-6&#34; href=&#34;#__codelineno-11-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000006&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;SYMTAB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1d0&lt;/span&gt;&lt;span id=&#34;__span-11-7&#34;&gt;&lt;a id=&#34;__codelineno-11-7&#34; name=&#34;__codelineno-11-7&#34; href=&#34;#__codelineno-11-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x000000000000000a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;STRSZ&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-8&#34;&gt;&lt;a id=&#34;__codelineno-11-8&#34; name=&#34;__codelineno-11-8&#34; href=&#34;#__codelineno-11-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x000000000000000b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;SYMENT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-9&#34;&gt;&lt;a id=&#34;__codelineno-11-9&#34; name=&#34;__codelineno-11-9&#34; href=&#34;#__codelineno-11-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000000&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;NULL&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;表示这个动态库向动态链接器提供了一些会在动态链接中用到的信息：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;HASH&lt;/code&gt;：&lt;code&gt;.hash&lt;/code&gt; section 的地址&lt;/li&gt;&lt;li&gt;&lt;code&gt;GNU_HASH&lt;/code&gt;：&lt;code&gt;.gnu.hash&lt;/code&gt; section 的地址&lt;/li&gt;&lt;li&gt;&lt;code&gt;STRTAB&lt;/code&gt;: &lt;code&gt;.dynstr&lt;/code&gt; section 的地址&lt;/li&gt;&lt;li&gt;&lt;code&gt;SYMTAB&lt;/code&gt;: &lt;code&gt;.dynsym&lt;/code&gt; section 的地址&lt;/li&gt;&lt;li&gt;&lt;code&gt;STRSZ&lt;/code&gt;: &lt;code&gt;.dynstr&lt;/code&gt; section 的大小&lt;/li&gt;&lt;li&gt;&lt;code&gt;SYMENT&lt;/code&gt;: &lt;code&gt;.dynsym&lt;/code&gt; 每一项的大小&lt;/li&gt;&lt;li&gt;&lt;code&gt;NULL&lt;/code&gt;: 表示后面没有更多内容了&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;你可能会奇怪，这里面的地址和大小信息，其实都可以从 Section Headers 里找到，为什么还要多此一举，放到这里呢？首先，这里可以存的东西还有很多，不止是这些，后续会看到更多的例子（例如 &lt;code&gt;DT_NEEDED&lt;/code&gt;，&lt;code&gt;DT_SONAME&lt;/code&gt;，&lt;code&gt;DT_RPATH&lt;/code&gt; 等等）；其次，前文提到，动态链接的性能要求是比较高的，为了减少它解析 ELF 的负担，提前把要用的数据准备好。&lt;/p&gt;&lt;p&gt;下面是 relocation 的部分，不出意料，没有 relocation，因为静态链接器已经把 &lt;code&gt;printer.s&lt;/code&gt; 里涉及到的 relocation 都计算完成了。&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-12-1&#34;&gt;&lt;a id=&#34;__codelineno-12-1&#34; name=&#34;__codelineno-12-1&#34; href=&#34;#__codelineno-12-1&#34;&gt;&lt;/a&gt;There&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;are&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;no&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;relocations&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;this&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file.&lt;/span&gt;&lt;span id=&#34;__span-12-2&#34;&gt;&lt;a id=&#34;__codelineno-12-2&#34; name=&#34;__codelineno-12-2&#34; href=&#34;#__codelineno-12-2&#34;&gt;&lt;/a&gt;No&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;processor&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;specific&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;unwind&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;information&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;to&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;decode&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来是符号表，有两份，&lt;code&gt;.dynsym&lt;/code&gt; 是动态符号表，&lt;code&gt;.symtab&lt;/code&gt; 是原来静态链接使用的符号表：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-13-1&#34;&gt;&lt;a id=&#34;__codelineno-13-1&#34; name=&#34;__codelineno-13-1&#34; href=&#34;#__codelineno-13-1&#34;&gt;&lt;/a&gt;Symbol&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;table&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.dynsym&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;contains&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;entries:&lt;/span&gt;&lt;span id=&#34;__span-13-2&#34;&gt;&lt;a id=&#34;__codelineno-13-2&#34; name=&#34;__codelineno-13-2&#34; href=&#34;#__codelineno-13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Num:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Value&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Type&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Bind&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Vis&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Ndx&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Name&lt;/span&gt;&lt;span id=&#34;__span-13-3&#34;&gt;&lt;a id=&#34;__codelineno-13-3&#34; name=&#34;__codelineno-13-3&#34; href=&#34;#__codelineno-13-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NOTYPE&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LOCAL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DEFAULT&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;UND&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-4&#34;&gt;&lt;a id=&#34;__codelineno-13-4&#34; name=&#34;__codelineno-13-4&#34; href=&#34;#__codelineno-13-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000001000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NOTYPE&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GLOBAL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DEFAULT&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;print&lt;/span&gt;&lt;span id=&#34;__span-13-5&#34;&gt;&lt;a id=&#34;__codelineno-13-5&#34; name=&#34;__codelineno-13-5&#34; href=&#34;#__codelineno-13-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000000000000101f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NOTYPE&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GLOBAL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DEFAULT&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-6&#34;&gt;&lt;a id=&#34;__codelineno-13-6&#34; name=&#34;__codelineno-13-6&#34; href=&#34;#__codelineno-13-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-7&#34;&gt;&lt;a id=&#34;__codelineno-13-7&#34; name=&#34;__codelineno-13-7&#34; href=&#34;#__codelineno-13-7&#34;&gt;&lt;/a&gt;Symbol&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;table&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.symtab&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;contains&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;entries:&lt;/span&gt;&lt;span id=&#34;__span-13-8&#34;&gt;&lt;a id=&#34;__codelineno-13-8&#34; name=&#34;__codelineno-13-8&#34; href=&#34;#__codelineno-13-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Num:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Value&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Type&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Bind&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Vis&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Ndx&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Name&lt;/span&gt;&lt;span id=&#34;__span-13-9&#34;&gt;&lt;a id=&#34;__codelineno-13-9&#34; name=&#34;__codelineno-13-9&#34; href=&#34;#__codelineno-13-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NOTYPE&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LOCAL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DEFAULT&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;UND&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-10&#34;&gt;&lt;a id=&#34;__codelineno-13-10&#34; name=&#34;__codelineno-13-10&#34; href=&#34;#__codelineno-13-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;FILE&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LOCAL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DEFAULT&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ABS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;printer.o&lt;/span&gt;&lt;span id=&#34;__span-13-11&#34;&gt;&lt;a id=&#34;__codelineno-13-11&#34; name=&#34;__codelineno-13-11&#34; href=&#34;#__codelineno-13-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000002000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NOTYPE&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LOCAL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DEFAULT&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello&lt;/span&gt;&lt;span id=&#34;__span-13-12&#34;&gt;&lt;a id=&#34;__codelineno-13-12&#34; name=&#34;__codelineno-13-12&#34; href=&#34;#__codelineno-13-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;FILE&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LOCAL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DEFAULT&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ABS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-13&#34;&gt;&lt;a id=&#34;__codelineno-13-13&#34; name=&#34;__codelineno-13-13&#34; href=&#34;#__codelineno-13-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0000000000003f40&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;OBJECT&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LOCAL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DEFAULT&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;_DYNAMIC&lt;/span&gt;&lt;span id=&#34;__span-13-14&#34;&gt;&lt;a id=&#34;__codelineno-13-14&#34; name=&#34;__codelineno-13-14&#34; href=&#34;#__codelineno-13-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000001000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NOTYPE&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GLOBAL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DEFAULT&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;print&lt;/span&gt;&lt;span id=&#34;__span-13-15&#34;&gt;&lt;a id=&#34;__codelineno-13-15&#34; name=&#34;__codelineno-13-15&#34; href=&#34;#__codelineno-13-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000000000000101f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NOTYPE&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GLOBAL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DEFAULT&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;观察可以发现，&lt;code&gt;.dynsym&lt;/code&gt; 只保留了那些外部程序可能会用到的符号（&lt;code&gt;Bind=GLOBAL&lt;/code&gt;），也就是 &lt;code&gt;print&lt;/code&gt; 和 &lt;code&gt;exit&lt;/code&gt;，而内部自己用的 &lt;code&gt;hello&lt;/code&gt; 没有放在里面，只保留可能要用到的东西，给动态链接器减负。此外，&lt;code&gt;.symtab&lt;/code&gt; 还会多出一个 &lt;code&gt;_DYNAMIC&lt;/code&gt; 符号，指向 &lt;code&gt;.dynamic&lt;/code&gt; section。&lt;/p&gt;&lt;p&gt;最后，&lt;code&gt;readelf&lt;/code&gt; 还贴心地计算了一下哈希表的平均查询次数：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-14-1&#34;&gt;&lt;a id=&#34;__codelineno-14-1&#34; name=&#34;__codelineno-14-1&#34; href=&#34;#__codelineno-14-1&#34;&gt;&lt;/a&gt;Histogram&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;bucket&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;list&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;length&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;total&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;bucket&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;span id=&#34;__span-14-2&#34;&gt;&lt;a id=&#34;__codelineno-14-2&#34; name=&#34;__codelineno-14-2&#34; href=&#34;#__codelineno-14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Length&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Number&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;total&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Coverage&lt;/span&gt;&lt;span id=&#34;__span-14-3&#34;&gt;&lt;a id=&#34;__codelineno-14-3&#34; name=&#34;__codelineno-14-3&#34; href=&#34;#__codelineno-14-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.0%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-4&#34;&gt;&lt;a id=&#34;__codelineno-14-4&#34; name=&#34;__codelineno-14-4&#34; href=&#34;#__codelineno-14-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.0%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.0%&lt;/span&gt;&lt;span id=&#34;__span-14-5&#34;&gt;&lt;a id=&#34;__codelineno-14-5&#34; name=&#34;__codelineno-14-5&#34; href=&#34;#__codelineno-14-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;.0%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;.0%&lt;/span&gt;&lt;span id=&#34;__span-14-6&#34;&gt;&lt;a id=&#34;__codelineno-14-6&#34; name=&#34;__codelineno-14-6&#34; href=&#34;#__codelineno-14-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-7&#34;&gt;&lt;a id=&#34;__codelineno-14-7&#34; name=&#34;__codelineno-14-7&#34; href=&#34;#__codelineno-14-7&#34;&gt;&lt;/a&gt;Histogram&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;.gnu.hash&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;bucket&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;list&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;length&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;total&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;buckets&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;span id=&#34;__span-14-8&#34;&gt;&lt;a id=&#34;__codelineno-14-8&#34; name=&#34;__codelineno-14-8&#34; href=&#34;#__codelineno-14-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Length&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Number&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;total&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Coverage&lt;/span&gt;&lt;span id=&#34;__span-14-9&#34;&gt;&lt;a id=&#34;__codelineno-14-9&#34; name=&#34;__codelineno-14-9&#34; href=&#34;#__codelineno-14-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.0%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-10&#34;&gt;&lt;a id=&#34;__codelineno-14-10&#34; name=&#34;__codelineno-14-10&#34; href=&#34;#__codelineno-14-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;.0%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;.0%&lt;/span&gt;&lt;span id=&#34;__span-14-11&#34;&gt;&lt;a id=&#34;__codelineno-14-11&#34; name=&#34;__codelineno-14-11&#34; href=&#34;#__codelineno-14-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-12&#34;&gt;&lt;a id=&#34;__codelineno-14-12&#34; name=&#34;__codelineno-14-12&#34; href=&#34;#__codelineno-14-12&#34;&gt;&lt;/a&gt;No&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;version&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;information&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;found&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;this&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后面会再细讲一下它所采用的哈希表的架构。&lt;/p&gt;&lt;p&gt;结合上面的观察，可以得到一个初步的印象，比较生成可执行文件与生成动态链接库的区别：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;ELF 文件类型不同，DYN (Shared object file) vs EXEC (Executable file)&lt;/li&gt;&lt;li&gt;动态库有额外的一套用于动态链接的 section，包括动态的符号表，动态的字符串表，动态表（&lt;code&gt;.dynamic&lt;/code&gt;），以及哈希表（实现符号名称到符号的映射）&lt;/li&gt;&lt;li&gt;动态库的加载地址不确定，在 ELF 中从 0 开始计算，需要地址无关代码&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;使用动态库&#34;&gt;使用动态库&lt;a class=&#34;headerlink&#34; href=&#34;#使用动态库&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;生成动态库 &lt;code&gt;libprinter.so&lt;/code&gt; 以后，最后还需要让 &lt;code&gt;main.o&lt;/code&gt; 动态链接 &lt;code&gt;libprinter.so&lt;/code&gt;，并运行：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-15-1&#34;&gt;&lt;a id=&#34;__codelineno-15-1&#34; name=&#34;__codelineno-15-1&#34; href=&#34;#__codelineno-15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# ld -dynamic-linker: Set path to dynamic linker for the executable&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-2&#34;&gt;&lt;a id=&#34;__codelineno-15-2&#34; name=&#34;__codelineno-15-2&#34; href=&#34;#__codelineno-15-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ld&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-dynamic-linker&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/lib64/ld-linux-x86-64.so.2&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main.o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;libprinter.so&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main&lt;/span&gt;&lt;span id=&#34;__span-15-3&#34;&gt;&lt;a id=&#34;__codelineno-15-3&#34; name=&#34;__codelineno-15-3&#34; href=&#34;#__codelineno-15-3&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./main&lt;/span&gt;&lt;span id=&#34;__span-15-4&#34;&gt;&lt;a id=&#34;__codelineno-15-4&#34; name=&#34;__codelineno-15-4&#34; href=&#34;#__codelineno-15-4&#34;&gt;&lt;/a&gt;Hello&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;world!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里特别指定了 &lt;code&gt;main&lt;/code&gt; 的动态链接器路径为 &lt;code&gt;/lib64/ld-linux-x86-64.so.2&lt;/code&gt;，这是因为 &lt;code&gt;main&lt;/code&gt; 在启动时，需要由动态链接器来完成最后的动态链接，那么用哪个动态链接器去做这个事情呢？这里就是在指定动态链接器的路径。启动 &lt;code&gt;main&lt;/code&gt; 程序的时候，为了让动态链接器找到当前目录下的 &lt;code&gt;libprinter.so&lt;/code&gt;，添加了环境变量 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; 并设置为当前目录。这样 &lt;code&gt;main&lt;/code&gt; 程序就可以正常运行起来了。&lt;/p&gt;&lt;p&gt;虽然 &lt;code&gt;libprinter.so&lt;/code&gt; 出现在了 &lt;code&gt;ld&lt;/code&gt; 的命令行参数中，但并不代表它的内容会被静态链接到 &lt;code&gt;main&lt;/code&gt; 当中：实际上，静态链接器会以某种形式告诉动态链接器，在 &lt;code&gt;main&lt;/code&gt; 程序启动时，如何去动态链接 &lt;code&gt;libprinter.so&lt;/code&gt;。这个具体形式，会在下一篇博客中详细介绍。现在先讨论一下，动态链接器可能需要做些什么：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;根据 &lt;code&gt;main&lt;/code&gt; 程序记录的信息，去加载 &lt;code&gt;libprinter.so&lt;/code&gt; 的内容，加载到某个内存地址上&lt;/li&gt;&lt;li&gt;&lt;code&gt;main&lt;/code&gt; 程序需要调用 &lt;code&gt;print&lt;/code&gt; 和 &lt;code&gt;exit&lt;/code&gt; 函数，那么动态链接器就需要去查询，&lt;code&gt;libprinter.so&lt;/code&gt; 有没有这些函数，如果有的话，地址是什么&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这个时候，动态链接器就会用到上面出现的 &lt;code&gt;.dynamic&lt;/code&gt; section，根据它的内容，记录下哈希表的位置。程序要调用 &lt;code&gt;print&lt;/code&gt; 函数，那就在哈希表里查询 &lt;code&gt;print&lt;/code&gt; 函数对应的符号，如果找到了，那就可以得到 &lt;code&gt;print&lt;/code&gt; 函数在 &lt;code&gt;libprinter.so&lt;/code&gt; 里的偏移，偏移再加上 &lt;code&gt;libprinter.so&lt;/code&gt; 动态加载的基地址，就得到了实际是 &lt;code&gt;print&lt;/code&gt; 函数的地址，就可以正常调用函数了。&lt;/p&gt;&lt;p&gt;这个查询过程可能会发生很多次，所以性能是很重要的，所以引入了哈希表。那么这个哈希表具体是怎么一个构造呢？以往在数据结构课上讲哈希表的时候，更多是在内存中用哈希表，用拉链法解决哈希冲突的话，直接用指针数组就可以了；而这里的哈希表需要保存在文件中，所以都是用下标来替代指针。&lt;/p&gt;&lt;p&gt;首先讲传统的 SystemV Hash 实现，它保存在 &lt;code&gt;.hash&lt;/code&gt; 段内，使用拉链法解决哈希冲突。它的结构是这样的：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;两个 32 位数 &lt;code&gt;nbucket&lt;/code&gt; 和 &lt;code&gt;nchain&lt;/code&gt;，分别保存有多少个 bucket 和多少个 chain&lt;/li&gt;&lt;li&gt;接下来是 &lt;code&gt;nbucket&lt;/code&gt; 个 32 位数（bucket 数组），对应哈希表的 bucket，内容是 chain 数组的下标，也就是拉链法里，链表的起始结点下标&lt;/li&gt;&lt;li&gt;最后是 &lt;code&gt;nchain&lt;/code&gt; 个 32 位数（chain 数组），记录链表的下一个结点的下标，如果链表后继结点不存在，则保存 &lt;code&gt;STN_UNDEF&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;chain 数组和动态符号表大小相同，元素一一对应。那么用哈希表查询符号的过程如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;对符号名称求哈希值，这个函数是规定好的，输入一个字符串，输出一个 32 位整数&lt;/li&gt;&lt;li&gt;查询哈希值对应的 bucket，得到 chain 数组的下标，这个下标也对应了一个符号&lt;/li&gt;&lt;li&gt;去符号表查看这个符号是否是要查询的符号（字符串比较），如果是，那就找到了目标符号&lt;/li&gt;&lt;li&gt;如果不是，检查 chain 数组，查看链表是否有后继结点，如果有，那么沿着链表，逐个检查符号表中的符号&lt;/li&gt;&lt;li&gt;如果遍历到 &lt;code&gt;STT_UNDEF&lt;/code&gt; 都没有找到匹配的符号，说明目标符号不存在&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;可以看到，这是比较原始的哈希表实现方法，为了减少碰撞，就需要比较大的 &lt;code&gt;nbucket&lt;/code&gt;，但就需要更多的空间了。&lt;/p&gt;&lt;p&gt;为了解决动态库日益增长的符号表大小和不够高的动态链接性能之间的矛盾，目前常见另一种哈希表的实现：GNU Hash，它保存在 &lt;code&gt;.gnu.hash&lt;/code&gt; 段内。虽说是哈希表，但实际上是两种数据结构的组合：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Bloom Filter：Bloom Filter 是一种快速判断某个值是否不在某个集合中的数据结构 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a class=&#34;footnote-ref&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，在这里，就是判断符号是否不在该动态库的符号表中，如果不在，那就不需要进行后续的哈希查表&lt;/li&gt;&lt;li&gt;哈希表：相比 SystemV Hash，做了这些改动：&lt;ol&gt;&lt;li&gt;拉链法的内存访问比较随机，缓存局部性差；所以改成了线性法：把符号按照 bucket 排序，使得同一个 bucket 内的所有符号在数组中连续存放，改进了缓存局部性&lt;/li&gt;&lt;li&gt;在 SystemV Hash 中，在链表遍历的时候，每个结点都需要进行一次字符串的比较，这是比较慢的；在 GNU Hash 中，不再需要保存链表的后继结点的变化，改为保存对应符号的哈希值，那么在遍历连续的 bucket 内的符号时，首先比较哈希值是否相等，不相等时就不需要进行字符串比较了&lt;/li&gt;&lt;li&gt;为了判断当前 bucket 内符号是否遍历完成，拿哈希的最低位做标识，比较哈希时不考虑最低位&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;那么用 GNU Hash 查询符号表的过程如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在 Bloom Filter 中查询目标符号是否不存在，如果不存在，那就说明目标符号不存在&lt;/li&gt;&lt;li&gt;计算出符号名称的哈希，找到对应的 bucket，遍历 bucket 内的元素，判断目标符号与当前元素的哈希值是否相等，如果相等，并且字符串比较也相同，那就找到了目标符号；如果没查到，就查到直到 bucket 结束&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;可以看到，这个算法会比 SystemV Hash 性能更高，构建起来自然也更加复杂。&lt;/p&gt;&lt;h2 id=&#34;实现&#34;&gt;实现&lt;a class=&#34;headerlink&#34; href=&#34;#实现&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;结合以上的分析，我们就可以在上一次博客的基础上实现第三版的链接器，这个链接器可以支持输入多个 ELF .o 文件，输出可执行文件或者动态库。额外的需要实现的内容，包括：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;从符号表（&lt;code&gt;.symtab&lt;/code&gt;）中，取出那些 GLOBAL 的符号，构建出动态符号表（&lt;code&gt;.dynsym&lt;/code&gt;），计算出哈希表，保存在 &lt;code&gt;.hash&lt;/code&gt; 和 &lt;code&gt;.gnu.hash&lt;/code&gt; 段中&lt;/li&gt;&lt;li&gt;构造 &lt;code&gt;.dynamic&lt;/code&gt; section，并在 Program Header 中添加 DYNAMIC，告诉动态链接器，动态链接时所需要的各种信息&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这个过程我用 Rust 完成了实现，链接器部分的代码量大概是 600 行，比上一个版本多 200 行。&lt;/p&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;a class=&#34;headerlink&#34; href=&#34;#参考&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;最后给出一些文档，可供实现时参考：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://refspecs.linuxbase.org/elf/gabi4+/ch5.dynamic.html&#34;&gt;Dynamic Linking&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://flapenguin.me/elf-dt-gnu-hash&#34;&gt;ELF: better symbol lookup via DT_GNU_HASH&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://blogs.oracle.com/solaris/post/gnu-hash-elf-sections&#34;&gt;GNU Hash ELF Sections&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&#34;footnote&#34;&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;这句话有点拗口，但是你没有看错，Bloom Filter 只能确定某个元素不在集合中，但反之，不能确定元素是否一定在集合中。它的原理是，计算集合的每个元素的哈希值，构建出一个 bitset，把哈希值对应的位设为 1，其余设为 0；查询时，计算元素的哈希值，检查 bitset 中对应位是否为 0：如果为 0，那么元素一定不在集合中；如果为 1，由于可能出现哈希冲突，不能确定该元素一定在集合中。&amp;#160;&lt;a class=&#34;footnote-backref&#34; href=&#34;#fnref:1&#34; title=&#34;Jump back to footnote 1 in the text&#34;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description><link>https://jia.je/software/2024/04/06/write-a-linker-3/</link> <pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2024/04/06/write-a-linker-3/</guid> </item> <item> <title>开发一个链接器（2）</title> <category>elf</category> <category>linker</category> <category>linux</category> <category>software</category> <category>write-a-linker</category> <description>&lt;h1 id=&#34;开发一个链接器2&#34;&gt;开发一个链接器（2）&lt;a class=&#34;headerlink&#34; href=&#34;#开发一个链接器2&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;a class=&#34;headerlink&#34; href=&#34;#前言&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这个系列的第一篇博客实现了一个最简单的静态链接器，它可以输入单个 ELF .o 文件，输出 ELF 可执行文件。接下来，我们需要把它升级到支持输入两个或者更多的 ELF .o 文件。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;回顾&#34;&gt;回顾&lt;a class=&#34;headerlink&#34; href=&#34;#回顾&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;首先回顾一下：在这个系列的上一篇博客中，我们观察了现有链接器的工作过程，并且实现了一个最简单的链接器：输入一个 ELF object，链接成一个可以运行的 ELF 可执行文件。这个过程包括：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;解析输入的 ELF，收集各个 section 需要保留下来的内容&lt;/li&gt;&lt;li&gt;规划将要生成的 ELF 可执行文件的内容布局：开始是固定的文件头，之后是各个 section，计算出它们从哪里开始到哪里结束&lt;/li&gt;&lt;li&gt;第二步完成以后，就可以知道在运行时，各个 section 将会被加载到哪个地址上；此时我们就可以计算重定位，把地址按照预设的规则填入到对应的地方&lt;/li&gt;&lt;li&gt;最后按照预设的文件布局，把文件内容写入到 ELF 文件中&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;接下来我们就要实现单文件输入到多文件输入的跨越，让我们首先分析一下，这里的不同在哪里。&lt;/p&gt;&lt;h2 id=&#34;分析&#34;&gt;分析&lt;a class=&#34;headerlink&#34; href=&#34;#分析&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;拆分代码&#34;&gt;拆分代码&lt;a class=&#34;headerlink&#34; href=&#34;#拆分代码&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;输入只有一个 ELF object（.o）文件的时候，这个 object 文件里需要的所有东西都只能由这个 object 自己来提供，所以比较好实现。但如果要输入多个 ELF object 文件，此时可能会出现需要依赖的情况。首先回忆一下之前学习的 C/C++ 的内容，在编写代码的时候，经常会把声明（declaration）放到头文件（.h）里，实现（definition）放在源文件（.c/cpp）：这样可以在 &lt;code&gt;A.cpp&lt;/code&gt; 中调用 &lt;code&gt;B.cpp&lt;/code&gt; 里的函数，不会出现大家经常遇到的 &lt;code&gt;duplicate symbol&lt;/code&gt; 错误。那么这是怎么实现的呢？&lt;/p&gt;&lt;p&gt;我们首先在汇编语言中模拟这个场景。首先回顾一下上一篇博客中用汇编实现的 Hello World 例子：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# From https://gist.github.com/adrianratnapala/1321776&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Hello World on amd64 under Linux.&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# One way to build this is with: &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-6&#34;&gt;&lt;a id=&#34;__codelineno-0-6&#34; name=&#34;__codelineno-0-6&#34; href=&#34;#__codelineno-0-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# gcc hello.S -s -nostartfiles -nostdlib -o hello&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-7&#34;&gt;&lt;a id=&#34;__codelineno-0-7&#34; name=&#34;__codelineno-0-7&#34; href=&#34;#__codelineno-0-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-8&#34;&gt;&lt;a id=&#34;__codelineno-0-8&#34; name=&#34;__codelineno-0-8&#34; href=&#34;#__codelineno-0-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# for syscall numbers look in /usr/include/asm/unistd_64.h&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-9&#34;&gt;&lt;a id=&#34;__codelineno-0-9&#34; name=&#34;__codelineno-0-9&#34; href=&#34;#__codelineno-0-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# for examples look at http://99-bottles-of-beer.net/language-assembler-(amd64)-933.html&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-10&#34;&gt;&lt;a id=&#34;__codelineno-0-10&#34; name=&#34;__codelineno-0-10&#34; href=&#34;#__codelineno-0-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# for insipration look at http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-11&#34;&gt;&lt;a id=&#34;__codelineno-0-11&#34; name=&#34;__codelineno-0-11&#34; href=&#34;#__codelineno-0-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-12&#34;&gt;&lt;a id=&#34;__codelineno-0-12&#34; name=&#34;__codelineno-0-12&#34; href=&#34;#__codelineno-0-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.rodata&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-13&#34;&gt;&lt;a id=&#34;__codelineno-0-13&#34; name=&#34;__codelineno-0-13&#34; href=&#34;#__codelineno-0-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;hello:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-14&#34;&gt;&lt;a id=&#34;__codelineno-0-14&#34; name=&#34;__codelineno-0-14&#34; href=&#34;#__codelineno-0-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Hello world!\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-15&#34;&gt;&lt;a id=&#34;__codelineno-0-15&#34; name=&#34;__codelineno-0-15&#34; href=&#34;#__codelineno-0-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-16&#34;&gt;&lt;a id=&#34;__codelineno-0-16&#34; name=&#34;__codelineno-0-16&#34; href=&#34;#__codelineno-0-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-17&#34;&gt;&lt;a id=&#34;__codelineno-0-17&#34; name=&#34;__codelineno-0-17&#34; href=&#34;#__codelineno-0-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.text&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-18&#34;&gt;&lt;a id=&#34;__codelineno-0-18&#34; name=&#34;__codelineno-0-18&#34; href=&#34;#__codelineno-0-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.globl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;_start&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-19&#34;&gt;&lt;a id=&#34;__codelineno-0-19&#34; name=&#34;__codelineno-0-19&#34; href=&#34;#__codelineno-0-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-20&#34;&gt;&lt;a id=&#34;__codelineno-0-20&#34; name=&#34;__codelineno-0-20&#34; href=&#34;#__codelineno-0-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# write(1, hello, 13)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-21&#34;&gt;&lt;a id=&#34;__codelineno-0-21&#34; name=&#34;__codelineno-0-21&#34; href=&#34;#__codelineno-0-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-22&#34;&gt;&lt;a id=&#34;__codelineno-0-22&#34; name=&#34;__codelineno-0-22&#34; href=&#34;#__codelineno-0-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-23&#34;&gt;&lt;a id=&#34;__codelineno-0-23&#34; name=&#34;__codelineno-0-23&#34; href=&#34;#__codelineno-0-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdx&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-24&#34;&gt;&lt;a id=&#34;__codelineno-0-24&#34; name=&#34;__codelineno-0-24&#34; href=&#34;#__codelineno-0-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-25&#34;&gt;&lt;a id=&#34;__codelineno-0-25&#34; name=&#34;__codelineno-0-25&#34; href=&#34;#__codelineno-0-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;syscall&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-26&#34;&gt;&lt;a id=&#34;__codelineno-0-26&#34; name=&#34;__codelineno-0-26&#34; href=&#34;#__codelineno-0-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-27&#34;&gt;&lt;a id=&#34;__codelineno-0-27&#34; name=&#34;__codelineno-0-27&#34; href=&#34;#__codelineno-0-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# _exit(0)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-28&#34;&gt;&lt;a id=&#34;__codelineno-0-28&#34; name=&#34;__codelineno-0-28&#34; href=&#34;#__codelineno-0-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-29&#34;&gt;&lt;a id=&#34;__codelineno-0-29&#34; name=&#34;__codelineno-0-29&#34; href=&#34;#__codelineno-0-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-30&#34;&gt;&lt;a id=&#34;__codelineno-0-30&#34; name=&#34;__codelineno-0-30&#34; href=&#34;#__codelineno-0-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;syscall&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到代码实际上做了两件事情，首先输出 Hello World，然后退出程序。我们把这两部分分别实现成一个函数，放到另一个 &lt;code&gt;.s&lt;/code&gt; 文件（&lt;code&gt;printer.s&lt;/code&gt;）中：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# https://gist.github.com/adrianratnapala/1321776&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# printer.s&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.rodata&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;hello:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-5&#34;&gt;&lt;a id=&#34;__codelineno-1-5&#34; name=&#34;__codelineno-1-5&#34; href=&#34;#__codelineno-1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Hello world!\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-6&#34;&gt;&lt;a id=&#34;__codelineno-1-6&#34; name=&#34;__codelineno-1-6&#34; href=&#34;#__codelineno-1-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-7&#34;&gt;&lt;a id=&#34;__codelineno-1-7&#34; name=&#34;__codelineno-1-7&#34; href=&#34;#__codelineno-1-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-8&#34;&gt;&lt;a id=&#34;__codelineno-1-8&#34; name=&#34;__codelineno-1-8&#34; href=&#34;#__codelineno-1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.text&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-9&#34;&gt;&lt;a id=&#34;__codelineno-1-9&#34; name=&#34;__codelineno-1-9&#34; href=&#34;#__codelineno-1-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.globl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;print&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-10&#34;&gt;&lt;a id=&#34;__codelineno-1-10&#34; name=&#34;__codelineno-1-10&#34; href=&#34;#__codelineno-1-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;print:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-11&#34;&gt;&lt;a id=&#34;__codelineno-1-11&#34; name=&#34;__codelineno-1-11&#34; href=&#34;#__codelineno-1-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# write(1, hello, 13)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-12&#34;&gt;&lt;a id=&#34;__codelineno-1-12&#34; name=&#34;__codelineno-1-12&#34; href=&#34;#__codelineno-1-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-13&#34;&gt;&lt;a id=&#34;__codelineno-1-13&#34; name=&#34;__codelineno-1-13&#34; href=&#34;#__codelineno-1-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-14&#34;&gt;&lt;a id=&#34;__codelineno-1-14&#34; name=&#34;__codelineno-1-14&#34; href=&#34;#__codelineno-1-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdx&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-15&#34;&gt;&lt;a id=&#34;__codelineno-1-15&#34; name=&#34;__codelineno-1-15&#34; href=&#34;#__codelineno-1-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-16&#34;&gt;&lt;a id=&#34;__codelineno-1-16&#34; name=&#34;__codelineno-1-16&#34; href=&#34;#__codelineno-1-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;syscall&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-17&#34;&gt;&lt;a id=&#34;__codelineno-1-17&#34; name=&#34;__codelineno-1-17&#34; href=&#34;#__codelineno-1-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-18&#34;&gt;&lt;a id=&#34;__codelineno-1-18&#34; name=&#34;__codelineno-1-18&#34; href=&#34;#__codelineno-1-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-19&#34;&gt;&lt;a id=&#34;__codelineno-1-19&#34; name=&#34;__codelineno-1-19&#34; href=&#34;#__codelineno-1-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.globl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-20&#34;&gt;&lt;a id=&#34;__codelineno-1-20&#34; name=&#34;__codelineno-1-20&#34; href=&#34;#__codelineno-1-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;exit:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-21&#34;&gt;&lt;a id=&#34;__codelineno-1-21&#34; name=&#34;__codelineno-1-21&#34; href=&#34;#__codelineno-1-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# _exit(0)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-22&#34;&gt;&lt;a id=&#34;__codelineno-1-22&#34; name=&#34;__codelineno-1-22&#34; href=&#34;#__codelineno-1-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-23&#34;&gt;&lt;a id=&#34;__codelineno-1-23&#34; name=&#34;__codelineno-1-23&#34; href=&#34;#__codelineno-1-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-24&#34;&gt;&lt;a id=&#34;__codelineno-1-24&#34; name=&#34;__codelineno-1-24&#34; href=&#34;#__codelineno-1-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;syscall&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，这里把上面的两段汇编分别放在 &lt;code&gt;print&lt;/code&gt; 和 &lt;code&gt;exit&lt;/code&gt; 函数中，并且加上了 &lt;code&gt;ret&lt;/code&gt; 指令以实现返回函数的调用者。&lt;code&gt;exit&lt;/code&gt; 函数没有添加 &lt;code&gt;ret&lt;/code&gt; ，是因为调用 &lt;code&gt;exit&lt;/code&gt; 系统调用后，进程就退出了，后面的指令不会被执行。接下来，需要在入口函数中调用这两个函数来实现 &lt;code&gt;Hello world&lt;/code&gt; 的打印：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# main.s&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.text&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.globl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;_start&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-5&#34;&gt;&lt;a id=&#34;__codelineno-2-5&#34; name=&#34;__codelineno-2-5&#34; href=&#34;#__codelineno-2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;print&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-6&#34;&gt;&lt;a id=&#34;__codelineno-2-6&#34; name=&#34;__codelineno-2-6&#34; href=&#34;#__codelineno-2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调用 GNU as 分别汇编两个文件然后链接，程序可以正常运行：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Use assembler (GNU as) to assemble&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-2&#34;&gt;&lt;a id=&#34;__codelineno-3-2&#34; name=&#34;__codelineno-3-2&#34; href=&#34;#__codelineno-3-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;as&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main.s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main.o&lt;/span&gt;&lt;span id=&#34;__span-3-3&#34;&gt;&lt;a id=&#34;__codelineno-3-3&#34; name=&#34;__codelineno-3-3&#34; href=&#34;#__codelineno-3-3&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;as&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;printer.s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;printer.o&lt;/span&gt;&lt;span id=&#34;__span-3-4&#34;&gt;&lt;a id=&#34;__codelineno-3-4&#34; name=&#34;__codelineno-3-4&#34; href=&#34;#__codelineno-3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Use ld (GNU ld.bfd) to link&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-5&#34;&gt;&lt;a id=&#34;__codelineno-3-5&#34; name=&#34;__codelineno-3-5&#34; href=&#34;#__codelineno-3-5&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ld&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main.o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;printer.o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;helloworld&lt;/span&gt;&lt;span id=&#34;__span-3-6&#34;&gt;&lt;a id=&#34;__codelineno-3-6&#34; name=&#34;__codelineno-3-6&#34; href=&#34;#__codelineno-3-6&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./helloworld&lt;/span&gt;&lt;span id=&#34;__span-3-7&#34;&gt;&lt;a id=&#34;__codelineno-3-7&#34; name=&#34;__codelineno-3-7&#34; href=&#34;#__codelineno-3-7&#34;&gt;&lt;/a&gt;Hello&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;world!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;观察对象文件&#34;&gt;观察对象文件&lt;a class=&#34;headerlink&#34; href=&#34;#观察对象文件&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这时候我们就要探究，汇编器和链接器是如何协作，使得 &lt;code&gt;main.s&lt;/code&gt; 中的代码可以调用 &lt;code&gt;printer.s&lt;/code&gt; 中的函数。当然了，在这里我们用的是汇编语言，汇编器遇到不存在的函数名就会认为是外部函数。如果是 C/C++ 语言，则要先在 &lt;code&gt;main.c&lt;/code&gt; 中声明这两个函数（或者 &lt;code&gt;#include&lt;/code&gt; 了一个声明了这两个函数的头文件）再调用（比较老的 C 标准允许不声明直接调用，但这是不推荐的）。&lt;/p&gt;&lt;p&gt;首先观察 &lt;code&gt;main.s&lt;/code&gt; 经过汇编得到的 &lt;code&gt;main.o&lt;/code&gt;，看它是怎么调用 &lt;code&gt;print&lt;/code&gt; 和 &lt;code&gt;exit&lt;/code&gt; 函数的：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# objdump -S: Display assembly and intermix source code with disassembly&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-2&#34;&gt;&lt;a id=&#34;__codelineno-4-2&#34; name=&#34;__codelineno-4-2&#34; href=&#34;#__codelineno-4-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;objdump&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main.o&lt;/span&gt;&lt;span id=&#34;__span-4-3&#34;&gt;&lt;a id=&#34;__codelineno-4-3&#34; name=&#34;__codelineno-4-3&#34; href=&#34;#__codelineno-4-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-4&#34;&gt;&lt;a id=&#34;__codelineno-4-4&#34; name=&#34;__codelineno-4-4&#34; href=&#34;#__codelineno-4-4&#34;&gt;&lt;/a&gt;main.o:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;format&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;elf64-x86-64&lt;/span&gt;&lt;span id=&#34;__span-4-5&#34;&gt;&lt;a id=&#34;__codelineno-4-5&#34; name=&#34;__codelineno-4-5&#34; href=&#34;#__codelineno-4-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-6&#34;&gt;&lt;a id=&#34;__codelineno-4-6&#34; name=&#34;__codelineno-4-6&#34; href=&#34;#__codelineno-4-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-7&#34;&gt;&lt;a id=&#34;__codelineno-4-7&#34; name=&#34;__codelineno-4-7&#34; href=&#34;#__codelineno-4-7&#34;&gt;&lt;/a&gt;Disassembly&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.text:&lt;/span&gt;&lt;span id=&#34;__span-4-8&#34;&gt;&lt;a id=&#34;__codelineno-4-8&#34; name=&#34;__codelineno-4-8&#34; href=&#34;#__codelineno-4-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-9&#34;&gt;&lt;a id=&#34;__codelineno-4-9&#34; name=&#34;__codelineno-4-9&#34; href=&#34;#__codelineno-4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;_start&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-4-10&#34;&gt;&lt;a id=&#34;__codelineno-4-10&#34; name=&#34;__codelineno-4-10&#34; href=&#34;#__codelineno-4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;_start+0x5&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-4-11&#34;&gt;&lt;a id=&#34;__codelineno-4-11&#34; name=&#34;__codelineno-4-11&#34; href=&#34;#__codelineno-4-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;_start+0xa&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;反汇编出来可以看到两条 &lt;code&gt;call&lt;/code&gt; 指令，但是它们的地址都很奇怪：第一条指令是 &lt;code&gt;call 5&lt;/code&gt;，而 0x5 是第二条 call 地址的地址；第二条指令是 &lt;code&gt;call a&lt;/code&gt;，按照规律，可以猜出来 0xa 是第二条指令之后的第一个字节的地址，每条指令 5 个字节，两条指令刚好 10 字节，也就是 0xa。这似乎与 &lt;code&gt;print&lt;/code&gt; 和 &lt;code&gt;exit&lt;/code&gt; 函数都没有关系，执行的时候怎么会得到正确的结果呢？&lt;/p&gt;&lt;p&gt;回忆一下，在这个系列的上一篇博客中，反汇编 &lt;code&gt;.o&lt;/code&gt; 文件的时候也出现过类似的情况：&lt;code&gt;_start&lt;/code&gt; 函数需要知道 &lt;code&gt;.rodata&lt;/code&gt; 段里的 &lt;code&gt;hello&lt;/code&gt; 字符串的地址，但是汇编的时候这个地址无法知道，所以汇编器生成了一个 relocation（relocation 的中文翻译是重定位，但我不喜欢这个翻译，所以下文还是用 relocation），告诉链接器去填入正确的地址。这里也是类似的：汇编器在汇编 &lt;code&gt;main.s&lt;/code&gt; 的时候，也无法知道 &lt;code&gt;print&lt;/code&gt; 和 &lt;code&gt;exit&lt;/code&gt; 函数会在什么地址，所以只能生成一个 relocation，把偏移初始化为零，等着链接器来填写。而 x86 上 &lt;code&gt;call&lt;/code&gt; 指令的目的地址计算方法是 &lt;code&gt;call&lt;/code&gt; 指令之后的第一个字节地址加上偏移，这个偏移初始化为 0，那么反汇编看到的就好像是 &lt;code&gt;call&lt;/code&gt; 要调用它自己的下一条指令，这就解释了上面观察到的现象。&lt;/p&gt;&lt;p&gt;正好 &lt;code&gt;objdump&lt;/code&gt; 可以帮我们显示出 relocation，只需要添加 &lt;code&gt;-r&lt;/code&gt; 参数：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-5-1&#34;&gt;&lt;a id=&#34;__codelineno-5-1&#34; name=&#34;__codelineno-5-1&#34; href=&#34;#__codelineno-5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# objdump -r, --reloc: Display the relocation entries in the file&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-2&#34;&gt;&lt;a id=&#34;__codelineno-5-2&#34; name=&#34;__codelineno-5-2&#34; href=&#34;#__codelineno-5-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;objdump&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-r&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main.o&lt;/span&gt;&lt;span id=&#34;__span-5-3&#34;&gt;&lt;a id=&#34;__codelineno-5-3&#34; name=&#34;__codelineno-5-3&#34; href=&#34;#__codelineno-5-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-4&#34;&gt;&lt;a id=&#34;__codelineno-5-4&#34; name=&#34;__codelineno-5-4&#34; href=&#34;#__codelineno-5-4&#34;&gt;&lt;/a&gt;main.o:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;format&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;elf64-x86-64&lt;/span&gt;&lt;span id=&#34;__span-5-5&#34;&gt;&lt;a id=&#34;__codelineno-5-5&#34; name=&#34;__codelineno-5-5&#34; href=&#34;#__codelineno-5-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-6&#34;&gt;&lt;a id=&#34;__codelineno-5-6&#34; name=&#34;__codelineno-5-6&#34; href=&#34;#__codelineno-5-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-7&#34;&gt;&lt;a id=&#34;__codelineno-5-7&#34; name=&#34;__codelineno-5-7&#34; href=&#34;#__codelineno-5-7&#34;&gt;&lt;/a&gt;Disassembly&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.text:&lt;/span&gt;&lt;span id=&#34;__span-5-8&#34;&gt;&lt;a id=&#34;__codelineno-5-8&#34; name=&#34;__codelineno-5-8&#34; href=&#34;#__codelineno-5-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-9&#34;&gt;&lt;a id=&#34;__codelineno-5-9&#34; name=&#34;__codelineno-5-9&#34; href=&#34;#__codelineno-5-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;_start&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-5-10&#34;&gt;&lt;a id=&#34;__codelineno-5-10&#34; name=&#34;__codelineno-5-10&#34; href=&#34;#__codelineno-5-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;_start+0x5&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-5-11&#34;&gt;&lt;a id=&#34;__codelineno-5-11&#34; name=&#34;__codelineno-5-11&#34; href=&#34;#__codelineno-5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_PLT32&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;print-0x4&lt;/span&gt;&lt;span id=&#34;__span-5-12&#34;&gt;&lt;a id=&#34;__codelineno-5-12&#34; name=&#34;__codelineno-5-12&#34; href=&#34;#__codelineno-5-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;_start+0xa&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-5-13&#34;&gt;&lt;a id=&#34;__codelineno-5-13&#34; name=&#34;__codelineno-5-13&#34; href=&#34;#__codelineno-5-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_PLT32&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;exit-0x4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时候会发现，&lt;code&gt;print&lt;/code&gt; 和 &lt;code&gt;exit&lt;/code&gt; 果然出现了，所以汇编器是通过这两条 relocation 告诉链接器，这里实际上要调用哪个函数。但是这里出现的 &lt;code&gt;R_X86_64_PLT32&lt;/code&gt; 是什么意思？&lt;code&gt;print&lt;/code&gt; 和 &lt;code&gt;exit&lt;/code&gt; 后面的 &lt;code&gt;-0x4&lt;/code&gt; 是什么意思，为什么要减 4？如果考虑到前面所说的，&lt;code&gt;call&lt;/code&gt; 指令占用 5 个字节，那不应该是减 5 才对吗？下面来解释这些问题：&lt;/p&gt;&lt;div class=&#34;admonition question&#34;&gt;&lt;p class=&#34;admonition-title&#34;&gt;什么是 &lt;code&gt;R_X86_64_PLT32&lt;/code&gt; ？&lt;/p&gt;&lt;p&gt;在上一篇博客中，出现过 &lt;code&gt;R_X86_64_32S&lt;/code&gt; 这种 relocation 类型，它的意思是把目标符号的地址以 32 位有符号数的格式写到对应的位置，换句话说，用的是绝对地址，例如 &lt;code&gt;0x402000&lt;/code&gt;。但是，刚才提到，x86 的 &lt;code&gt;call&lt;/code&gt; 指令的目的地址计算方法是，&lt;code&gt;call&lt;/code&gt; 指令后的第一个字节的地址，加上地址偏移。也就是说，这个地址偏移是相对的，再填入绝对地址就出错了。实际上，&lt;code&gt;R_X86_64_PLT32&lt;/code&gt; 还涉及到一个新的还没有涉及到的概念 PLT（Procedure Linkage Table），在这里我们先不涉及 PLT，把它当成单纯的相对地址计算去处理。这个单纯的相对地址计算的 relocation 也有正式名字，也就是 &lt;code&gt;R_X86_64_PC32&lt;/code&gt;，意思是根据 PC（Program Counter）计算出和目的地址的相对偏移（32 位）。&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;admonition question&#34;&gt;&lt;p class=&#34;admonition-title&#34;&gt;为什么是 &lt;code&gt;print-0x4&lt;/code&gt;？这个减去 0x4 是怎么来的？&lt;/p&gt;&lt;p&gt;刚才提到，x86 的 &lt;code&gt;call&lt;/code&gt; 指令是用 &lt;code&gt;call&lt;/code&gt; 指令后的第一个字节的地址加上地址偏移，求的和就是要调用的函数的地址。这个过程比较复杂，我们下面举一个具体的例子：&lt;/p&gt;&lt;p&gt;以上面的 &lt;code&gt;call exit&lt;/code&gt; 指令为例，也就是反汇编出来的第二条指令：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-6-1&#34;&gt;&lt;a id=&#34;__codelineno-6-1&#34; name=&#34;__codelineno-6-1&#34; href=&#34;#__codelineno-6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;5:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;e8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0xa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-2&#34;&gt;&lt;a id=&#34;__codelineno-6-2&#34; name=&#34;__codelineno-6-2&#34; href=&#34;#__codelineno-6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;6:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;R_X86_64_PLT32&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;exit-0x4&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假设我们已经知道 &lt;code&gt;print&lt;/code&gt; 函数的地址就是 &lt;code&gt;0xbbbb&lt;/code&gt;，也假设这条 &lt;code&gt;call&lt;/code&gt; 指令最终在内存中的地址也是 &lt;code&gt;0x5&lt;/code&gt;。那么我们应该怎么填写这条 &lt;code&gt;call&lt;/code&gt; 指令的地址偏移呢？&lt;/p&gt;&lt;p&gt;假设地址偏移等于 &lt;code&gt;X&lt;/code&gt;，已知 &lt;code&gt;call&lt;/code&gt; 指令的地址是 0x5，&lt;code&gt;call&lt;/code&gt; 指令占用 0x5 个字节，那么 &lt;code&gt;call&lt;/code&gt; 指令后的第一个字节的地址就是 &lt;code&gt;0x5 + 0x5&lt;/code&gt;，按照 x86 的规定，要调用的函数的地址就是 &lt;code&gt;0x5 + 0x5 + X&lt;/code&gt;。而我们知道要调用的函数是 &lt;code&gt;print&lt;/code&gt;，&lt;code&gt;print&lt;/code&gt; 函数的地址是 &lt;code&gt;0xbbbb&lt;/code&gt;，反解出 &lt;code&gt;X = 0xbbb1&lt;/code&gt;，那么要填进去的地址偏移就是 0xbbb1 这个数。&lt;/p&gt;&lt;p&gt;如果按照这个逻辑，要计算 X 的话，应该是 &lt;code&gt;print - 0x5 - 0x5&lt;/code&gt; 才对，第一个 &lt;code&gt;0x5&lt;/code&gt; 是 &lt;code&gt;call&lt;/code&gt; 指令的起始地址，第二个 &lt;code&gt;0x5&lt;/code&gt; 是 &lt;code&gt;call&lt;/code&gt; 指令的长度。但是为什么看到的是 &lt;code&gt;print - 0x4&lt;/code&gt; 呢？为什么只减了一个数（&lt;code&gt;-0x4&lt;/code&gt;），而不是两个（&lt;code&gt;- 0x5 - 0x5&lt;/code&gt;）？&lt;/p&gt;&lt;p&gt;细心的读者可能观察到，在 &lt;code&gt;R_X86_64_PLT32&lt;/code&gt; 的前面，显示的是 &lt;code&gt;6:&lt;/code&gt;，这表示的是 relocation 标记的地址是 0x6，而不是 0x5（&lt;code&gt;call&lt;/code&gt; 指令的起始地址）。进一步观察，会发现 &lt;code&gt;call&lt;/code&gt; 指令的第一个字节 &lt;code&gt;0xe8&lt;/code&gt; 决定了这是一条 &lt;code&gt;call&lt;/code&gt; 指令，剩下的四个字节都是地址偏移，而链接器要改的也就是这个地址偏移：既然要改的是从 0x6 开始的四个字节，那 relocation 自然指向的就是 0x6！换句话说，链接器不需要知道这是一条 &lt;code&gt;call&lt;/code&gt; 指令，只需要按照 relocation 的规则计算出值填进去就好了。&lt;/p&gt;&lt;p&gt;既然起始地址要从 0x6 开始算了，那么为什么出现 &lt;code&gt;0x4&lt;/code&gt; 就可以解释了：从 relocation 的 0x6 地址开始算，只需要减去 4（&lt;code&gt;call&lt;/code&gt; 指令内地址偏移的长度），而不是减去 5（&lt;code&gt;call&lt;/code&gt; 指令的长度）。另一方面，&lt;code&gt;R_X86_64_PLT32&lt;/code&gt; 本身就告诉链接器，让链接器计算的时候，要减去当前 relocation 的起始地址了。按照这个规则，我们再复现一遍刚才的例子：&lt;/p&gt;&lt;p&gt;链接器观察到一个 &lt;code&gt;R_X86_64_PLT32&lt;/code&gt; 的 relocation，relocation 自身的地址是 0x6，目标地址是 &lt;code&gt;print-0x4&lt;/code&gt;，&lt;code&gt;print&lt;/code&gt; 函数的地址是 &lt;code&gt;0xbbbb&lt;/code&gt;，那么要填入的地址偏移就等于 &lt;code&gt;0xbbbb - 0x4 - 0x6 = 0xbbb1&lt;/code&gt;。这个计算过程用 ABI 文档中的表示方法，就是 &lt;code&gt;S + A - P&lt;/code&gt;，S（Symbol）表示符号的地址（&lt;code&gt;print&lt;/code&gt; 的地址，&lt;code&gt;S=0xbbbb&lt;/code&gt;），A（Addend）表示额外加或者减去的数（这里是减去 0x4，也就是 &lt;code&gt;A=-0x4&lt;/code&gt;），P 表示 relocation 自己的地址（&lt;code&gt;P=0x6&lt;/code&gt;）。&lt;/p&gt;&lt;p&gt;计算结果和之前我们手动推导的是一致的，看起来这两个计算方法似乎没什么区别，反正结果都一样？区别在于，这种设计下，链接器不需要知道指令是什么，不管是不是 &lt;code&gt;call&lt;/code&gt; 指令，只管计算和填数。那么在不同的场景下，或许可以复用相同的 relocation 类型。&lt;/p&gt;&lt;/div&gt;&lt;p&gt;relocation 的情况分析完了，我们学习到汇编器在遇到外部函数时，如何生成看起来错误的 &lt;code&gt;call&lt;/code&gt; 指令，又是如何输出 relocation 让链接器填入正确的偏移，使得 &lt;code&gt;call&lt;/code&gt; 指令可以调用正确的函数。&lt;/p&gt;&lt;p&gt;此时再看 &lt;code&gt;printer.o&lt;/code&gt; 的反汇编结果：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-7-1&#34;&gt;&lt;a id=&#34;__codelineno-7-1&#34; name=&#34;__codelineno-7-1&#34; href=&#34;#__codelineno-7-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;objdump&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-r&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;printer.o&lt;/span&gt;&lt;span id=&#34;__span-7-2&#34;&gt;&lt;a id=&#34;__codelineno-7-2&#34; name=&#34;__codelineno-7-2&#34; href=&#34;#__codelineno-7-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-3&#34;&gt;&lt;a id=&#34;__codelineno-7-3&#34; name=&#34;__codelineno-7-3&#34; href=&#34;#__codelineno-7-3&#34;&gt;&lt;/a&gt;printer.o:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;format&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;elf64-x86-64&lt;/span&gt;&lt;span id=&#34;__span-7-4&#34;&gt;&lt;a id=&#34;__codelineno-7-4&#34; name=&#34;__codelineno-7-4&#34; href=&#34;#__codelineno-7-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-5&#34;&gt;&lt;a id=&#34;__codelineno-7-5&#34; name=&#34;__codelineno-7-5&#34; href=&#34;#__codelineno-7-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-6&#34;&gt;&lt;a id=&#34;__codelineno-7-6&#34; name=&#34;__codelineno-7-6&#34; href=&#34;#__codelineno-7-6&#34;&gt;&lt;/a&gt;Disassembly&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.text:&lt;/span&gt;&lt;span id=&#34;__span-7-7&#34;&gt;&lt;a id=&#34;__codelineno-7-7&#34; name=&#34;__codelineno-7-7&#34; href=&#34;#__codelineno-7-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-8&#34;&gt;&lt;a id=&#34;__codelineno-7-8&#34; name=&#34;__codelineno-7-8&#34; href=&#34;#__codelineno-7-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;print&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-7-9&#34;&gt;&lt;a id=&#34;__codelineno-7-9&#34; name=&#34;__codelineno-7-9&#34; href=&#34;#__codelineno-7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x1,%rdi&lt;/span&gt;&lt;span id=&#34;__span-7-10&#34;&gt;&lt;a id=&#34;__codelineno-7-10&#34; name=&#34;__codelineno-7-10&#34; href=&#34;#__codelineno-7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c6&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x0,%rsi&lt;/span&gt;&lt;span id=&#34;__span-7-11&#34;&gt;&lt;a id=&#34;__codelineno-7-11&#34; name=&#34;__codelineno-7-11&#34; href=&#34;#__codelineno-7-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;a:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_32S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.rodata&lt;/span&gt;&lt;span id=&#34;__span-7-12&#34;&gt;&lt;a id=&#34;__codelineno-7-12&#34; name=&#34;__codelineno-7-12&#34; href=&#34;#__codelineno-7-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c2&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;xd,%rdx&lt;/span&gt;&lt;span id=&#34;__span-7-13&#34;&gt;&lt;a id=&#34;__codelineno-7-13&#34; name=&#34;__codelineno-7-13&#34; href=&#34;#__codelineno-7-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x1,%rax&lt;/span&gt;&lt;span id=&#34;__span-7-14&#34;&gt;&lt;a id=&#34;__codelineno-7-14&#34; name=&#34;__codelineno-7-14&#34; href=&#34;#__codelineno-7-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1c:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;syscall&lt;/span&gt;&lt;span id=&#34;__span-7-15&#34;&gt;&lt;a id=&#34;__codelineno-7-15&#34; name=&#34;__codelineno-7-15&#34; href=&#34;#__codelineno-7-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1e:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-7-16&#34;&gt;&lt;a id=&#34;__codelineno-7-16&#34; name=&#34;__codelineno-7-16&#34; href=&#34;#__codelineno-7-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-17&#34;&gt;&lt;a id=&#34;__codelineno-7-17&#34; name=&#34;__codelineno-7-17&#34; href=&#34;#__codelineno-7-17&#34;&gt;&lt;/a&gt;000000000000001f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;exit&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-7-18&#34;&gt;&lt;a id=&#34;__codelineno-7-18&#34; name=&#34;__codelineno-7-18&#34; href=&#34;#__codelineno-7-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;xor&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rdi,%rdi&lt;/span&gt;&lt;span id=&#34;__span-7-19&#34;&gt;&lt;a id=&#34;__codelineno-7-19&#34; name=&#34;__codelineno-7-19&#34; href=&#34;#__codelineno-7-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x3c,%rax&lt;/span&gt;&lt;span id=&#34;__span-7-20&#34;&gt;&lt;a id=&#34;__codelineno-7-20&#34; name=&#34;__codelineno-7-20&#34; href=&#34;#__codelineno-7-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;29&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;syscall&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不出意外，两个函数都出现了，同时也出现了上一篇博客中提到的 &lt;code&gt;R_X86_64_32S&lt;/code&gt; 的 relocation 类型。仔细观察，会发现这个 relocation 的地址是 &lt;code&gt;0xa&lt;/code&gt;，而不是 &lt;code&gt;mov&lt;/code&gt; 指令的地址 &lt;code&gt;0x7&lt;/code&gt;，聪明的你应该已经观察出来：&lt;code&gt;mov&lt;/code&gt; 指令前三个字节表示了这是一条 &lt;code&gt;mov&lt;/code&gt; 指令，目的寄存器是 &lt;code&gt;%rsi&lt;/code&gt;，后四个字节就是要 &lt;code&gt;mov&lt;/code&gt; 的立即数，所以 relocation 直接指向了后四个字节的地址。链接器不需要反汇编，不需要知道这是一条 &lt;code&gt;mov&lt;/code&gt; 指令，只管找 relocation 往里填。&lt;/p&gt;&lt;h3 id=&#34;观察可执行文件&#34;&gt;观察可执行文件&lt;a class=&#34;headerlink&#34; href=&#34;#观察可执行文件&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;关于两个 &lt;code&gt;.o&lt;/code&gt; 文件分析得差不多了，接下来看最后运行 &lt;code&gt;ld main.o printer.o -o helloworld&lt;/code&gt; 得到的可执行文件：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-8-1&#34;&gt;&lt;a id=&#34;__codelineno-8-1&#34; name=&#34;__codelineno-8-1&#34; href=&#34;#__codelineno-8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;helloworld:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;elf64-x86-64&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-2&#34;&gt;&lt;a id=&#34;__codelineno-8-2&#34; name=&#34;__codelineno-8-2&#34; href=&#34;#__codelineno-8-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-3&#34;&gt;&lt;a id=&#34;__codelineno-8-3&#34; name=&#34;__codelineno-8-3&#34; href=&#34;#__codelineno-8-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-4&#34;&gt;&lt;a id=&#34;__codelineno-8-4&#34; name=&#34;__codelineno-8-4&#34; href=&#34;#__codelineno-8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;Disassembly&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-5&#34;&gt;&lt;a id=&#34;__codelineno-8-5&#34; name=&#34;__codelineno-8-5&#34; href=&#34;#__codelineno-8-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-6&#34;&gt;&lt;a id=&#34;__codelineno-8-6&#34; name=&#34;__codelineno-8-6&#34; href=&#34;#__codelineno-8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;err&#34;&gt;0000000000401000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;_start&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-7&#34;&gt;&lt;a id=&#34;__codelineno-8-7&#34; name=&#34;__codelineno-8-7&#34; href=&#34;#__codelineno-8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;401000:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;e8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;40100a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-8&#34;&gt;&lt;a id=&#34;__codelineno-8-8&#34; name=&#34;__codelineno-8-8&#34; href=&#34;#__codelineno-8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;401005:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;e8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;401029&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-9&#34;&gt;&lt;a id=&#34;__codelineno-8-9&#34; name=&#34;__codelineno-8-9&#34; href=&#34;#__codelineno-8-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-10&#34;&gt;&lt;a id=&#34;__codelineno-8-10&#34; name=&#34;__codelineno-8-10&#34; href=&#34;#__codelineno-8-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;err&#34;&gt;000000000040100&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-11&#34;&gt;&lt;a id=&#34;__codelineno-8-11&#34; name=&#34;__codelineno-8-11&#34; href=&#34;#__codelineno-8-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;40100&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;a:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;c7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$0x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-12&#34;&gt;&lt;a id=&#34;__codelineno-8-12&#34; name=&#34;__codelineno-8-12&#34; href=&#34;#__codelineno-8-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;401011:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;c6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$0x402000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-13&#34;&gt;&lt;a id=&#34;__codelineno-8-13&#34; name=&#34;__codelineno-8-13&#34; href=&#34;#__codelineno-8-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;401018:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;c2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$0xd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdx&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-14&#34;&gt;&lt;a id=&#34;__codelineno-8-14&#34; name=&#34;__codelineno-8-14&#34; href=&#34;#__codelineno-8-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;40101&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;f:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;c0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$0x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-15&#34;&gt;&lt;a id=&#34;__codelineno-8-15&#34; name=&#34;__codelineno-8-15&#34; href=&#34;#__codelineno-8-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;401026:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;syscall&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-16&#34;&gt;&lt;a id=&#34;__codelineno-8-16&#34; name=&#34;__codelineno-8-16&#34; href=&#34;#__codelineno-8-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;401028:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-17&#34;&gt;&lt;a id=&#34;__codelineno-8-17&#34; name=&#34;__codelineno-8-17&#34; href=&#34;#__codelineno-8-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-18&#34;&gt;&lt;a id=&#34;__codelineno-8-18&#34; name=&#34;__codelineno-8-18&#34; href=&#34;#__codelineno-8-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;err&#34;&gt;0000000000401029&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-19&#34;&gt;&lt;a id=&#34;__codelineno-8-19&#34; name=&#34;__codelineno-8-19&#34; href=&#34;#__codelineno-8-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;401029:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ff&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;xor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-20&#34;&gt;&lt;a id=&#34;__codelineno-8-20&#34; name=&#34;__codelineno-8-20&#34; href=&#34;#__codelineno-8-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;40102&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;c:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;c0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$0x3c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-21&#34;&gt;&lt;a id=&#34;__codelineno-8-21&#34; name=&#34;__codelineno-8-21&#34; href=&#34;#__codelineno-8-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;401033:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;syscall&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以得到几点观察：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;_start&lt;/code&gt; 函数里函数调用的指令 &lt;code&gt;call print&lt;/code&gt; 和 &lt;code&gt;call exit&lt;/code&gt; 已经被链接器修复，&lt;code&gt;print&lt;/code&gt; 函数内引用 &lt;code&gt;hello&lt;/code&gt; 字符串地址也正确被填写&lt;/li&gt;&lt;li&gt;来自两个 &lt;code&gt;.o&lt;/code&gt; 文件的代码段 &lt;code&gt;.text&lt;/code&gt; 的内容被拼接起来，得到了输出的 ELF 里的 &lt;code&gt;.text&lt;/code&gt; 段内容；类似地，&lt;code&gt;printer.o&lt;/code&gt; 里面的只读数据段 &lt;code&gt;.rodata&lt;/code&gt; 的内容也复制到了输出的 ELF 中，地址是 &lt;code&gt;0x402000&lt;/code&gt;&lt;/li&gt;&lt;li&gt;虽然 &lt;code&gt;objdump&lt;/code&gt; 参数里写了 &lt;code&gt;-r&lt;/code&gt;，要求 &lt;code&gt;objdump&lt;/code&gt; 显示代码中的 relocation，但是链接器已经完成了所有 relocation 的计算并更新了对应的数，因此输出的 ELF 里就没有 relocation 了。在未来的博客中，我们会看到，可执行文件里也可以有 relocation&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;小结&#34;&gt;小结&lt;a class=&#34;headerlink&#34; href=&#34;#小结&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;按照这些观察，我们可以得出，为了支持第二版的链接器，也就是支持两个或者更多个 .o 文件的链接的静态链接器，需要做的额外工作：&lt;/p&gt;&lt;div class=&#34;admonition note&#34;&gt;&lt;p class=&#34;admonition-title&#34;&gt;合并来自多个文件的同一个 section&lt;/p&gt;&lt;p&gt;上面已经观察到，来自不同 .o 的 &lt;code&gt;.text&lt;/code&gt; 段被合并起来，写入到了最终输出的 ELF 的 &lt;code&gt;.text&lt;/code&gt; 段。同理，其他需要输出到可执行文件里的段，也需要合并&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;admonition note&#34;&gt;&lt;p class=&#34;admonition-title&#34;&gt;完善指向 section 的 relocation 的处理&lt;/p&gt;&lt;p&gt;上一篇文章里，只涉及到一个输入的 ELF object 文件，并且也只涉及到对 section 的 relocation，所以每个 section 只有一份，只需要保存每个 section 在内存中的起始地址。但此时，每个 ELF object 文件都可能有自己的 &lt;code&gt;.text&lt;/code&gt; &lt;code&gt;.rodata&lt;/code&gt; section，此时再出现对 section 的 relocation 时，是对输入的 ELF object 自己的 &lt;code&gt;.rodata&lt;/code&gt;，而不是对输出 ELF executable 的 &lt;code&gt;.rodata&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;在上面的例子里，如果 &lt;code&gt;main.s&lt;/code&gt; 和 &lt;code&gt;printer.s&lt;/code&gt; 都往 &lt;code&gt;.rodata&lt;/code&gt; 段写了数据，假如 &lt;code&gt;main.s&lt;/code&gt; 产生了 0x10 字节的数据，&lt;code&gt;printer.s&lt;/code&gt; 产生了 0x20 字节的数据，假设输出的 &lt;code&gt;.rodata&lt;/code&gt; 段从 &lt;code&gt;0x402000&lt;/code&gt; 地址开始，先存 &lt;code&gt;main.o&lt;/code&gt; 的 &lt;code&gt;.rodata&lt;/code&gt; 的内容，再存 &lt;code&gt;printer.o&lt;/code&gt; 的 &lt;code&gt;.rodata&lt;/code&gt; 的内容，那么 &lt;code&gt;printer.o&lt;/code&gt; 的 &lt;code&gt;.rodata&lt;/code&gt; 的数据在内存中的起始地址就是 &lt;code&gt;0x402000 + 0x10 = 0x402010&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;同时，在 &lt;code&gt;printer.o&lt;/code&gt; 中，&lt;code&gt;print&lt;/code&gt; 函数产生了对 &lt;code&gt;.rodata&lt;/code&gt; 的 relocation，实际上是要得到 &lt;code&gt;printer.o&lt;/code&gt; 的 &lt;code&gt;.rodata&lt;/code&gt; 段中的 &lt;code&gt;Hello world&lt;/code&gt; 字符串的起始地址。根据上面的分析，计算 relocation 的时候，应该用 &lt;code&gt;0x402010&lt;/code&gt;（&lt;code&gt;printer.o&lt;/code&gt; 的 &lt;code&gt;.rodata&lt;/code&gt; 在内存中的起始地址），而不是 &lt;code&gt;0x402000&lt;/code&gt;（输出的 &lt;code&gt;.rodata&lt;/code&gt; 的起始地址） 作为 &lt;code&gt;Hello world&lt;/code&gt; 字符串的地址。&lt;/p&gt;&lt;p&gt;简而言之，现在需要记录来自不同 .o 文件的 section 的相对位置。实际上，这在实现上也并不复杂，只是不要忘记这件事情。&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;admonition note&#34;&gt;&lt;p class=&#34;admonition-title&#34;&gt;解析和维护符号表，找到符号对应的地址&lt;/p&gt;&lt;p&gt;在这个例子中，需要维护一个符号表，记录各个符号在内存中的地址，那么后续计算 relocation 的时候，这个地址会参与到计算当中。&lt;/p&gt;&lt;p&gt;在上面的例子里，&lt;code&gt;main.s&lt;/code&gt; 和 &lt;code&gt;printer.s&lt;/code&gt; 都往 &lt;code&gt;.text&lt;/code&gt; 段写了指令。&lt;code&gt;main.s&lt;/code&gt; 产生了 0xa 字节的指令，&lt;code&gt;printer.s&lt;/code&gt; 产生了 0x2b 字节的指令。输出时，假如 &lt;code&gt;.text&lt;/code&gt; 段从 &lt;code&gt;0x401000&lt;/code&gt; 开始，按照下面的逻辑计算各个符号的地址：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;先复制 &lt;code&gt;main.o&lt;/code&gt; 的 &lt;code&gt;.text&lt;/code&gt; 代码段的内容到输出的 &lt;code&gt;.text&lt;/code&gt; 段，此时这部分指令的的起始内存地址就是 &lt;code&gt;0x401000&lt;/code&gt;&lt;/li&gt;&lt;li&gt;由于 &lt;code&gt;_start&lt;/code&gt; 函数在 &lt;code&gt;main.o&lt;/code&gt; 的 &lt;code&gt;.text&lt;/code&gt; 段内的偏移是 &lt;code&gt;0x0&lt;/code&gt;，所以它在内存中的地址就是 &lt;code&gt;0x401000 + 0x0 = 0x401000&lt;/code&gt;&lt;/li&gt;&lt;li&gt;接着复制 &lt;code&gt;printer.o&lt;/code&gt; 的 &lt;code&gt;.text&lt;/code&gt; 代码段的内容到输出的 &lt;code&gt;.text&lt;/code&gt; 段，由于前面已经有 0xa 个字节的数据了，所以这部分指令的起始内存地址就是 &lt;code&gt;0x40100a&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;print&lt;/code&gt; 函数在 &lt;code&gt;printer.o&lt;/code&gt; 的 &lt;code&gt;.text&lt;/code&gt; 段内的偏移是 &lt;code&gt;0x0&lt;/code&gt;，所以它在内存中的地址就是 &lt;code&gt;0x40100a + 0x0 = 0x40100a&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;exit&lt;/code&gt; 函数在 &lt;code&gt;printer.o&lt;/code&gt; 的 &lt;code&gt;.text&lt;/code&gt; 段内的偏移是 &lt;code&gt;0x1f&lt;/code&gt;，所以它在内存中的地址就是 &lt;code&gt;0x40100a + 0x1f = 0x401029&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;所以在复制段内容的同时，各个符号的地址也就可以计算出来了。有了符号表以后，之后计算针对 &lt;code&gt;print&lt;/code&gt; 和 &lt;code&gt;exit&lt;/code&gt; 的 relocation 的时候，查符号表就可以知道地址了。&lt;/p&gt;&lt;/div&gt;&lt;h2 id=&#34;实现&#34;&gt;实现&lt;a class=&#34;headerlink&#34; href=&#34;#实现&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;结合以上的分析，我们就可以在上一次博客的基础上实现第二版的链接器，这个链接器可以支持输入多个 ELF .o 文件。这个过程我用 Rust 完成了实现，链接器部分的代码量大概是 400 行，比上一个版本多 200 行。&lt;/p&gt;</description><link>https://jia.je/software/2024/03/30/write-a-linker-2/</link> <pubDate>Sat, 30 Mar 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2024/03/30/write-a-linker-2/</guid> </item> <item> <title>开发一个链接器（1）</title> <category>elf</category> <category>linker</category> <category>linux</category> <category>software</category> <category>write-a-linker</category> <description>&lt;h1 id=&#34;开发一个链接器1&#34;&gt;开发一个链接器（1）&lt;a class=&#34;headerlink&#34; href=&#34;#开发一个链接器1&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;a class=&#34;headerlink&#34; href=&#34;#前言&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;无论是在课程中还是实践中，都经常和链接器打交道。在这个过程中，大概了解了它的工作原理，对于常见的错误可以知道大概是怎么一回事，以及如何解决。但最近遇到一些涉及到链接器内部的问题，才发现自己对链接器的内部的了解还是比较匮乏的。因此想到自己开发一个链接器，在开发的过程中学习。&lt;/p&gt;&lt;!-- more --&gt;&lt;p&gt;本文假定读者已经对链接器有了一定的了解，如果你还不了解链接的大致过程，可以先学习网络上的资料。&lt;/p&gt;&lt;p&gt;这个系列的第一篇博客的目标是：实现一个最简单的静态链接器，输入单个 ELF .o 文件，输出 ELF 可执行文件。&lt;/p&gt;&lt;h2 id=&#34;分析&#34;&gt;分析&lt;a class=&#34;headerlink&#34; href=&#34;#分析&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;观察对象文件&#34;&gt;观察对象文件&lt;a class=&#34;headerlink&#34; href=&#34;#观察对象文件&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;开发一个链接器，先从最简单的情况开始：输入一个 ELF .o 文件，输出一个 ELF 可执行文件。为了避免引入 libc 等依赖，从网上找了一段直接用 syscall 打印字符串的汇编代码，做了简单修改：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# From https://gist.github.com/adrianratnapala/1321776&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Hello World on amd64 under Linux.&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# One way to build this is with: &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-6&#34;&gt;&lt;a id=&#34;__codelineno-0-6&#34; name=&#34;__codelineno-0-6&#34; href=&#34;#__codelineno-0-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# gcc hello.S -s -nostartfiles -nostdlib -o hello&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-7&#34;&gt;&lt;a id=&#34;__codelineno-0-7&#34; name=&#34;__codelineno-0-7&#34; href=&#34;#__codelineno-0-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-8&#34;&gt;&lt;a id=&#34;__codelineno-0-8&#34; name=&#34;__codelineno-0-8&#34; href=&#34;#__codelineno-0-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# for syscall numbers look in /usr/include/asm/unistd_64.h&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-9&#34;&gt;&lt;a id=&#34;__codelineno-0-9&#34; name=&#34;__codelineno-0-9&#34; href=&#34;#__codelineno-0-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# for examples look at http://99-bottles-of-beer.net/language-assembler-(amd64)-933.html&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-10&#34;&gt;&lt;a id=&#34;__codelineno-0-10&#34; name=&#34;__codelineno-0-10&#34; href=&#34;#__codelineno-0-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# for inspiration look at http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-11&#34;&gt;&lt;a id=&#34;__codelineno-0-11&#34; name=&#34;__codelineno-0-11&#34; href=&#34;#__codelineno-0-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-12&#34;&gt;&lt;a id=&#34;__codelineno-0-12&#34; name=&#34;__codelineno-0-12&#34; href=&#34;#__codelineno-0-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.rodata&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-13&#34;&gt;&lt;a id=&#34;__codelineno-0-13&#34; name=&#34;__codelineno-0-13&#34; href=&#34;#__codelineno-0-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;hello:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-14&#34;&gt;&lt;a id=&#34;__codelineno-0-14&#34; name=&#34;__codelineno-0-14&#34; href=&#34;#__codelineno-0-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Hello world!\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-15&#34;&gt;&lt;a id=&#34;__codelineno-0-15&#34; name=&#34;__codelineno-0-15&#34; href=&#34;#__codelineno-0-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-16&#34;&gt;&lt;a id=&#34;__codelineno-0-16&#34; name=&#34;__codelineno-0-16&#34; href=&#34;#__codelineno-0-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-17&#34;&gt;&lt;a id=&#34;__codelineno-0-17&#34; name=&#34;__codelineno-0-17&#34; href=&#34;#__codelineno-0-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.text&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-18&#34;&gt;&lt;a id=&#34;__codelineno-0-18&#34; name=&#34;__codelineno-0-18&#34; href=&#34;#__codelineno-0-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.globl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;_start&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-19&#34;&gt;&lt;a id=&#34;__codelineno-0-19&#34; name=&#34;__codelineno-0-19&#34; href=&#34;#__codelineno-0-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-20&#34;&gt;&lt;a id=&#34;__codelineno-0-20&#34; name=&#34;__codelineno-0-20&#34; href=&#34;#__codelineno-0-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# write(1, hello, 13)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-21&#34;&gt;&lt;a id=&#34;__codelineno-0-21&#34; name=&#34;__codelineno-0-21&#34; href=&#34;#__codelineno-0-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-22&#34;&gt;&lt;a id=&#34;__codelineno-0-22&#34; name=&#34;__codelineno-0-22&#34; href=&#34;#__codelineno-0-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-23&#34;&gt;&lt;a id=&#34;__codelineno-0-23&#34; name=&#34;__codelineno-0-23&#34; href=&#34;#__codelineno-0-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdx&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-24&#34;&gt;&lt;a id=&#34;__codelineno-0-24&#34; name=&#34;__codelineno-0-24&#34; href=&#34;#__codelineno-0-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-25&#34;&gt;&lt;a id=&#34;__codelineno-0-25&#34; name=&#34;__codelineno-0-25&#34; href=&#34;#__codelineno-0-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;syscall&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-26&#34;&gt;&lt;a id=&#34;__codelineno-0-26&#34; name=&#34;__codelineno-0-26&#34; href=&#34;#__codelineno-0-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-27&#34;&gt;&lt;a id=&#34;__codelineno-0-27&#34; name=&#34;__codelineno-0-27&#34; href=&#34;#__codelineno-0-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# _exit(0)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-28&#34;&gt;&lt;a id=&#34;__codelineno-0-28&#34; name=&#34;__codelineno-0-28&#34; href=&#34;#__codelineno-0-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-29&#34;&gt;&lt;a id=&#34;__codelineno-0-29&#34; name=&#34;__codelineno-0-29&#34; href=&#34;#__codelineno-0-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-30&#34;&gt;&lt;a id=&#34;__codelineno-0-30&#34; name=&#34;__codelineno-0-30&#34; href=&#34;#__codelineno-0-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;syscall&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;details class=&#34;question&#34;&gt;&lt;summary&gt;这段汇编做了什么？&lt;/summary&gt;&lt;p&gt;这段汇编要实现的是向标准输出打印 &lt;code&gt;Hello world!\n&lt;/code&gt;，但为了避免引入 C 标准库（libc），只能直接进行系统调用来完成打印。在 Linux 中，向标准输出打印，实际上就是向标准输出对应的 file handle（简称 fd，通常约定标准输入 stdin 是 0，标准输出 stdout 是 1，标准错误输出 stderr 是 2）写入要打印的内容。而这个需要通过调用 &lt;code&gt;write&lt;/code&gt; syscall 来实现。&lt;/p&gt;&lt;p&gt;知道这一点以后，就要去查找 Linux 的 &lt;a href=&#34;https://man7.org/linux/man-pages/man2/write.2.html&#34;&gt;write syscall&lt;/a&gt; 的文档。文档告诉你，第一个参数是 &lt;code&gt;fd&lt;/code&gt;，第二个参数 &lt;code&gt;buf&lt;/code&gt; 指向要写入的数据，第三个参数 &lt;code&gt;count&lt;/code&gt; 是要写入的数据的长度。结合上面的内容，为了打印 &lt;code&gt;Hello world!\n&lt;/code&gt;，实际上要完成的相当于是 C 代码中的 &lt;code&gt;write(1, hello, 13)&lt;/code&gt;，其中 1 就是 stdout 的 fd，&lt;code&gt;hello&lt;/code&gt; 指向保存 &lt;code&gt;Hello world!\n&lt;/code&gt; 字符串的地址，13 是字符串的长度。那么接下来就要研究，如何用汇编调用 syscall。&lt;/p&gt;&lt;p&gt;接下来，要知道在 amd64 Linux 下，如何用汇编调用 syscall。首先找到 &lt;a href=&#34;https://www.ucw.cz/~hubicka/papers/abi/node33.html#features&#34;&gt;amd64 Linux syscall 调用约定&lt;/a&gt;，它告诉我们：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;syscall 编号保存在 rax 寄存器中&lt;/li&gt;&lt;li&gt;syscall 的参数按顺序，依次保存在 rdi, rsi, rdx, r10, r8, r9 寄存器中&lt;/li&gt;&lt;li&gt;用 syscall 指令调用 syscall&lt;/li&gt;&lt;li&gt;syscall 的返回值也会保存在 rax 寄存器中&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;既然要调用 &lt;code&gt;write(1, hello, 13)&lt;/code&gt;，那就按照上面的要求，设置 &lt;code&gt;rdi=1&lt;/code&gt;、&lt;code&gt;rsi=hello&lt;/code&gt; 和 &lt;code&gt;rdx=13&lt;/code&gt;，最后在 &lt;a href=&#34;https://filippo.io/linux-syscall-table/&#34;&gt;amd64 Linux syscall table&lt;/a&gt; 中找到 &lt;code&gt;write&lt;/code&gt; syscall 的编号是 1，所以设置 &lt;code&gt;rax=1&lt;/code&gt;。到这里，调用 &lt;code&gt;write&lt;/code&gt; syscall 的所有准备任务都已经完成，调用 &lt;code&gt;syscall&lt;/code&gt; 指令即可完成系统调用。这样就完成了一次 &lt;code&gt;Hello world!\n&lt;/code&gt; 的打印：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# write(1, hello, 13)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdx&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-5&#34;&gt;&lt;a id=&#34;__codelineno-1-5&#34; name=&#34;__codelineno-1-5&#34; href=&#34;#__codelineno-1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-6&#34;&gt;&lt;a id=&#34;__codelineno-1-6&#34; name=&#34;__codelineno-1-6&#34; href=&#34;#__codelineno-1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;syscall&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后面 &lt;code&gt;exit(0)&lt;/code&gt; 的系统调用也是类似的，不再赘述。代码中写 &lt;code&gt;_exit(0)&lt;/code&gt; 是为了和 C 标准库中的 &lt;code&gt;exit(0)&lt;/code&gt; 做区分：前者直接退出程序（只会结束当前线程，但是由于当前进程只有一个线程，所以整个进程都结束了），而后者会做一些清理工作，见 &lt;a href=&#34;https://man7.org/linux/man-pages/man2/exit.2.html&#34;&gt;_exit manpage&lt;/a&gt;。&lt;/p&gt;&lt;/details&gt;&lt;p&gt;由于是汇编代码，所以直接调用汇编器生成 ELF .o 文件，然后观察它的内容：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Use assembler (GNU as) to assemble&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;as&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;helloworld_asm.s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;helloworld_asm.o&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# readelf -a, --all: Equivalent to: -h -l -S -s -r -d -V -A -I&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# -h, --file-header: Display the ELF file header&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-5&#34;&gt;&lt;a id=&#34;__codelineno-2-5&#34; name=&#34;__codelineno-2-5&#34; href=&#34;#__codelineno-2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# -l, --program-headers: Display the program headers&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-6&#34;&gt;&lt;a id=&#34;__codelineno-2-6&#34; name=&#34;__codelineno-2-6&#34; href=&#34;#__codelineno-2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# -S, --section-headers: Display the sections&amp;#39; header&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-7&#34;&gt;&lt;a id=&#34;__codelineno-2-7&#34; name=&#34;__codelineno-2-7&#34; href=&#34;#__codelineno-2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# -s, --syms: Display the symbol table&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-8&#34;&gt;&lt;a id=&#34;__codelineno-2-8&#34; name=&#34;__codelineno-2-8&#34; href=&#34;#__codelineno-2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# -r, --relocs: Display the relocations (if present)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-9&#34;&gt;&lt;a id=&#34;__codelineno-2-9&#34; name=&#34;__codelineno-2-9&#34; href=&#34;#__codelineno-2-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# -d, --dynamic: Display the dynamic section (if present)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-10&#34;&gt;&lt;a id=&#34;__codelineno-2-10&#34; name=&#34;__codelineno-2-10&#34; href=&#34;#__codelineno-2-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# -V, --version-info: Display the version sections (if present)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-11&#34;&gt;&lt;a id=&#34;__codelineno-2-11&#34; name=&#34;__codelineno-2-11&#34; href=&#34;#__codelineno-2-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# -A, --arch-specific: Display architecture specific information (if any)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-12&#34;&gt;&lt;a id=&#34;__codelineno-2-12&#34; name=&#34;__codelineno-2-12&#34; href=&#34;#__codelineno-2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# -I, --histogram: Display histogram of bucket list lengths&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-13&#34;&gt;&lt;a id=&#34;__codelineno-2-13&#34; name=&#34;__codelineno-2-13&#34; href=&#34;#__codelineno-2-13&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;readelf&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;helloworld_asm.o&lt;/span&gt;&lt;span id=&#34;__span-2-14&#34;&gt;&lt;a id=&#34;__codelineno-2-14&#34; name=&#34;__codelineno-2-14&#34; href=&#34;#__codelineno-2-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Output is shown below&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面观察 readelf 命令的输出，首先是 ELF 的头部，交代了文件类型，执行在什么指令集架构上等等：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;ELF&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Header:&lt;/span&gt;&lt;span id=&#34;__span-3-2&#34;&gt;&lt;a id=&#34;__codelineno-3-2&#34; name=&#34;__codelineno-3-2&#34; href=&#34;#__codelineno-3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Magic:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;7f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;4c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-3&#34;&gt;&lt;a id=&#34;__codelineno-3-3&#34; name=&#34;__codelineno-3-3&#34; href=&#34;#__codelineno-3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Class:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ELF64&lt;/span&gt;&lt;span id=&#34;__span-3-4&#34;&gt;&lt;a id=&#34;__codelineno-3-4&#34; name=&#34;__codelineno-3-4&#34; href=&#34;#__codelineno-3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Data:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;complement,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;little&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;endian&lt;/span&gt;&lt;span id=&#34;__span-3-5&#34;&gt;&lt;a id=&#34;__codelineno-3-5&#34; name=&#34;__codelineno-3-5&#34; href=&#34;#__codelineno-3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Version:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;current&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-6&#34;&gt;&lt;a id=&#34;__codelineno-3-6&#34; name=&#34;__codelineno-3-6&#34; href=&#34;#__codelineno-3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;OS/ABI:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;UNIX&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;System&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;V&lt;/span&gt;&lt;span id=&#34;__span-3-7&#34;&gt;&lt;a id=&#34;__codelineno-3-7&#34; name=&#34;__codelineno-3-7&#34; href=&#34;#__codelineno-3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ABI&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Version:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-8&#34;&gt;&lt;a id=&#34;__codelineno-3-8&#34; name=&#34;__codelineno-3-8&#34; href=&#34;#__codelineno-3-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Type:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;REL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Relocatable&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-9&#34;&gt;&lt;a id=&#34;__codelineno-3-9&#34; name=&#34;__codelineno-3-9&#34; href=&#34;#__codelineno-3-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Machine:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Advanced&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Micro&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Devices&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;X86-64&lt;/span&gt;&lt;span id=&#34;__span-3-10&#34;&gt;&lt;a id=&#34;__codelineno-3-10&#34; name=&#34;__codelineno-3-10&#34; href=&#34;#__codelineno-3-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Version:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1&lt;/span&gt;&lt;span id=&#34;__span-3-11&#34;&gt;&lt;a id=&#34;__codelineno-3-11&#34; name=&#34;__codelineno-3-11&#34; href=&#34;#__codelineno-3-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Entry&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;point&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;address:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;/span&gt;&lt;span id=&#34;__span-3-12&#34;&gt;&lt;a id=&#34;__codelineno-3-12&#34; name=&#34;__codelineno-3-12&#34; href=&#34;#__codelineno-3-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Start&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;program&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;into&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-13&#34;&gt;&lt;a id=&#34;__codelineno-3-13&#34; name=&#34;__codelineno-3-13&#34; href=&#34;#__codelineno-3-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Start&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;320&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;into&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-14&#34;&gt;&lt;a id=&#34;__codelineno-3-14&#34; name=&#34;__codelineno-3-14&#34; href=&#34;#__codelineno-3-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Flags:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;/span&gt;&lt;span id=&#34;__span-3-15&#34;&gt;&lt;a id=&#34;__codelineno-3-15&#34; name=&#34;__codelineno-3-15&#34; href=&#34;#__codelineno-3-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;this&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-16&#34;&gt;&lt;a id=&#34;__codelineno-3-16&#34; name=&#34;__codelineno-3-16&#34; href=&#34;#__codelineno-3-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;program&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-17&#34;&gt;&lt;a id=&#34;__codelineno-3-17&#34; name=&#34;__codelineno-3-17&#34; href=&#34;#__codelineno-3-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Number&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;program&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-18&#34;&gt;&lt;a id=&#34;__codelineno-3-18&#34; name=&#34;__codelineno-3-18&#34; href=&#34;#__codelineno-3-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-19&#34;&gt;&lt;a id=&#34;__codelineno-3-19&#34; name=&#34;__codelineno-3-19&#34; href=&#34;#__codelineno-3-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Number&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-20&#34;&gt;&lt;a id=&#34;__codelineno-3-20&#34; name=&#34;__codelineno-3-20&#34; href=&#34;#__codelineno-3-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;string&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;table&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;index:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来是比较重要的部分，ELF 包括多个 section，根据用途，不同的指令和数据会放在对应的 section 中，例如 .text 存放指令，.data .bss .rodata 存放各种数据，.rela 存放重定位（relocation）。&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;Section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Headers:&lt;/span&gt;&lt;span id=&#34;__span-4-2&#34;&gt;&lt;a id=&#34;__codelineno-4-2&#34; name=&#34;__codelineno-4-2&#34; href=&#34;#__codelineno-4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Nr&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Name&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Type&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Address&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Offset&lt;/span&gt;&lt;span id=&#34;__span-4-3&#34;&gt;&lt;a id=&#34;__codelineno-4-3&#34; name=&#34;__codelineno-4-3&#34; href=&#34;#__codelineno-4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;EntSize&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Flags&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Link&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Info&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Align&lt;/span&gt;&lt;span id=&#34;__span-4-4&#34;&gt;&lt;a id=&#34;__codelineno-4-4&#34; name=&#34;__codelineno-4-4&#34; href=&#34;#__codelineno-4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NULL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00000000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-5&#34;&gt;&lt;a id=&#34;__codelineno-4-5&#34; name=&#34;__codelineno-4-5&#34; href=&#34;#__codelineno-4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-6&#34;&gt;&lt;a id=&#34;__codelineno-4-6&#34; name=&#34;__codelineno-4-6&#34; href=&#34;#__codelineno-4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.text&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PROGBITS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00000040&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-7&#34;&gt;&lt;a id=&#34;__codelineno-4-7&#34; name=&#34;__codelineno-4-7&#34; href=&#34;#__codelineno-4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000000000000002a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;AX&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-8&#34;&gt;&lt;a id=&#34;__codelineno-4-8&#34; name=&#34;__codelineno-4-8&#34; href=&#34;#__codelineno-4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.rela.text&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;RELA&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000000e8&lt;/span&gt;&lt;span id=&#34;__span-4-9&#34;&gt;&lt;a id=&#34;__codelineno-4-9&#34; name=&#34;__codelineno-4-9&#34; href=&#34;#__codelineno-4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000018&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000018&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;I&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-10&#34;&gt;&lt;a id=&#34;__codelineno-4-10&#34; name=&#34;__codelineno-4-10&#34; href=&#34;#__codelineno-4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.data&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PROGBITS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0000006a&lt;/span&gt;&lt;span id=&#34;__span-4-11&#34;&gt;&lt;a id=&#34;__codelineno-4-11&#34; name=&#34;__codelineno-4-11&#34; href=&#34;#__codelineno-4-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;WA&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-12&#34;&gt;&lt;a id=&#34;__codelineno-4-12&#34; name=&#34;__codelineno-4-12&#34; href=&#34;#__codelineno-4-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.bss&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NOBITS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0000006a&lt;/span&gt;&lt;span id=&#34;__span-4-13&#34;&gt;&lt;a id=&#34;__codelineno-4-13&#34; name=&#34;__codelineno-4-13&#34; href=&#34;#__codelineno-4-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;WA&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-14&#34;&gt;&lt;a id=&#34;__codelineno-4-14&#34; name=&#34;__codelineno-4-14&#34; href=&#34;#__codelineno-4-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.rodata&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PROGBITS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0000006a&lt;/span&gt;&lt;span id=&#34;__span-4-15&#34;&gt;&lt;a id=&#34;__codelineno-4-15&#34; name=&#34;__codelineno-4-15&#34; href=&#34;#__codelineno-4-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000000000000000e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-16&#34;&gt;&lt;a id=&#34;__codelineno-4-16&#34; name=&#34;__codelineno-4-16&#34; href=&#34;#__codelineno-4-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.symtab&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;SYMTAB&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00000078&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-17&#34;&gt;&lt;a id=&#34;__codelineno-4-17&#34; name=&#34;__codelineno-4-17&#34; href=&#34;#__codelineno-4-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000060&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000018&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-18&#34;&gt;&lt;a id=&#34;__codelineno-4-18&#34; name=&#34;__codelineno-4-18&#34; href=&#34;#__codelineno-4-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.strtab&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;STRTAB&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000000d8&lt;/span&gt;&lt;span id=&#34;__span-4-19&#34;&gt;&lt;a id=&#34;__codelineno-4-19&#34; name=&#34;__codelineno-4-19&#34; href=&#34;#__codelineno-4-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000000000000000e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-20&#34;&gt;&lt;a id=&#34;__codelineno-4-20&#34; name=&#34;__codelineno-4-20&#34; href=&#34;#__codelineno-4-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.shstrtab&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;STRTAB&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00000100&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-21&#34;&gt;&lt;a id=&#34;__codelineno-4-21&#34; name=&#34;__codelineno-4-21&#34; href=&#34;#__codelineno-4-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000039&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-22&#34;&gt;&lt;a id=&#34;__codelineno-4-22&#34; name=&#34;__codelineno-4-22&#34; href=&#34;#__codelineno-4-22&#34;&gt;&lt;/a&gt;Key&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;to&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Flags:&lt;/span&gt;&lt;span id=&#34;__span-4-23&#34;&gt;&lt;a id=&#34;__codelineno-4-23&#34; name=&#34;__codelineno-4-23&#34; href=&#34;#__codelineno-4-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;W&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;write&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;alloc&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;X&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;execute&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;M&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;merge&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;strings&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;I&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;info&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;/span&gt;&lt;span id=&#34;__span-4-24&#34;&gt;&lt;a id=&#34;__codelineno-4-24&#34; name=&#34;__codelineno-4-24&#34; href=&#34;#__codelineno-4-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;L&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;link&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;order&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;O&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;extra&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;OS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;processing&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;required&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;G&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;group&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;T&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TLS&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;/span&gt;&lt;span id=&#34;__span-4-25&#34;&gt;&lt;a id=&#34;__codelineno-4-25&#34; name=&#34;__codelineno-4-25&#34; href=&#34;#__codelineno-4-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;C&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compressed&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;x&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;unknown&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;specific&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;E&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;exclude&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;/span&gt;&lt;span id=&#34;__span-4-26&#34;&gt;&lt;a id=&#34;__codelineno-4-26&#34; name=&#34;__codelineno-4-26&#34; href=&#34;#__codelineno-4-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;D&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;mbind&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;l&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;large&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;p&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;processor&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;specific&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么链接器需要特别关注和处理的就是里面的 relocation 以及符号表（Symbol table）了：在汇编生成 .o 文件的时候，由于指令引用了数据（&#34;Hello world!\n&#34;），但是又无法提前知道数据所处的地址，因此汇编器会生成一个 relocation 条目，也就是下面的 &lt;code&gt;R_X86_64_32S&lt;/code&gt;：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-5-1&#34;&gt;&lt;a id=&#34;__codelineno-5-1&#34; name=&#34;__codelineno-5-1&#34; href=&#34;#__codelineno-5-1&#34;&gt;&lt;/a&gt;Relocation&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.rela.text&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;at&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;offset&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0xe8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;contains&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;entry:&lt;/span&gt;&lt;span id=&#34;__span-5-2&#34;&gt;&lt;a id=&#34;__codelineno-5-2&#34; name=&#34;__codelineno-5-2&#34; href=&#34;#__codelineno-5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Offset&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Info&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Type&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Sym.&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Value&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Sym.&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Name&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;+&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Addend&lt;/span&gt;&lt;span id=&#34;__span-5-3&#34;&gt;&lt;a id=&#34;__codelineno-5-3&#34; name=&#34;__codelineno-5-3&#34; href=&#34;#__codelineno-5-3&#34;&gt;&lt;/a&gt;00000000000a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;00010000000b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_32S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.rodata&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;+&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-4&#34;&gt;&lt;a id=&#34;__codelineno-5-4&#34; name=&#34;__codelineno-5-4&#34; href=&#34;#__codelineno-5-4&#34;&gt;&lt;/a&gt;No&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;processor&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;specific&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;unwind&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;information&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;to&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;decode&lt;/span&gt;&lt;span id=&#34;__span-5-5&#34;&gt;&lt;a id=&#34;__codelineno-5-5&#34; name=&#34;__codelineno-5-5&#34; href=&#34;#__codelineno-5-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-6&#34;&gt;&lt;a id=&#34;__codelineno-5-6&#34; name=&#34;__codelineno-5-6&#34; href=&#34;#__codelineno-5-6&#34;&gt;&lt;/a&gt;Symbol&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;table&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.symtab&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;contains&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;entries:&lt;/span&gt;&lt;span id=&#34;__span-5-7&#34;&gt;&lt;a id=&#34;__codelineno-5-7&#34; name=&#34;__codelineno-5-7&#34; href=&#34;#__codelineno-5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Num:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Value&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Type&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Bind&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Vis&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Ndx&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Name&lt;/span&gt;&lt;span id=&#34;__span-5-8&#34;&gt;&lt;a id=&#34;__codelineno-5-8&#34; name=&#34;__codelineno-5-8&#34; href=&#34;#__codelineno-5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NOTYPE&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LOCAL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DEFAULT&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;UND&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-9&#34;&gt;&lt;a id=&#34;__codelineno-5-9&#34; name=&#34;__codelineno-5-9&#34; href=&#34;#__codelineno-5-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;SECTION&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LOCAL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DEFAULT&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.rodata&lt;/span&gt;&lt;span id=&#34;__span-5-10&#34;&gt;&lt;a id=&#34;__codelineno-5-10&#34; name=&#34;__codelineno-5-10&#34; href=&#34;#__codelineno-5-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NOTYPE&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LOCAL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DEFAULT&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello&lt;/span&gt;&lt;span id=&#34;__span-5-11&#34;&gt;&lt;a id=&#34;__codelineno-5-11&#34; name=&#34;__codelineno-5-11&#34; href=&#34;#__codelineno-5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NOTYPE&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GLOBAL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DEFAULT&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;_start&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而当链接器确定了代码和数据的地址以后，发现部分 relocation 的地址已经可以确定下来，那么就可以直接把地址写入到指令中，不再需要动态的 relocation。符号表则提供了符号到地址的映射，做符号解析的时候会用到。&lt;/p&gt;&lt;h3 id=&#34;观察可执行文件&#34;&gt;观察可执行文件&lt;a class=&#34;headerlink&#34; href=&#34;#观察可执行文件&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;下面我们要实现一个最简单的链接器，就把这一个 ELF .o 生成一个可执行文件。可以先让现有的 ld 链接出来，看看它的最终效果是什么样的：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-6-1&#34;&gt;&lt;a id=&#34;__codelineno-6-1&#34; name=&#34;__codelineno-6-1&#34; href=&#34;#__codelineno-6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Use ld (GNU ld.bfd) to link&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-2&#34;&gt;&lt;a id=&#34;__codelineno-6-2&#34; name=&#34;__codelineno-6-2&#34; href=&#34;#__codelineno-6-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ld&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;helloworld_asm.o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;helloworld_asm&lt;/span&gt;&lt;span id=&#34;__span-6-3&#34;&gt;&lt;a id=&#34;__codelineno-6-3&#34; name=&#34;__codelineno-6-3&#34; href=&#34;#__codelineno-6-3&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;readelf&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;helloworld_asm&lt;/span&gt;&lt;span id=&#34;__span-6-4&#34;&gt;&lt;a id=&#34;__codelineno-6-4&#34; name=&#34;__codelineno-6-4&#34; href=&#34;#__codelineno-6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Output is shown below&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先是 ELF 的头部，这次可以看到文件类型变成了可执行文件，并且有了一个入口地址（0x401000）：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-7-1&#34;&gt;&lt;a id=&#34;__codelineno-7-1&#34; name=&#34;__codelineno-7-1&#34; href=&#34;#__codelineno-7-1&#34;&gt;&lt;/a&gt;ELF&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Header:&lt;/span&gt;&lt;span id=&#34;__span-7-2&#34;&gt;&lt;a id=&#34;__codelineno-7-2&#34; name=&#34;__codelineno-7-2&#34; href=&#34;#__codelineno-7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Magic:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;7f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;4c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-3&#34;&gt;&lt;a id=&#34;__codelineno-7-3&#34; name=&#34;__codelineno-7-3&#34; href=&#34;#__codelineno-7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Class:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ELF64&lt;/span&gt;&lt;span id=&#34;__span-7-4&#34;&gt;&lt;a id=&#34;__codelineno-7-4&#34; name=&#34;__codelineno-7-4&#34; href=&#34;#__codelineno-7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Data:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;complement,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;little&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;endian&lt;/span&gt;&lt;span id=&#34;__span-7-5&#34;&gt;&lt;a id=&#34;__codelineno-7-5&#34; name=&#34;__codelineno-7-5&#34; href=&#34;#__codelineno-7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Version:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;current&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-6&#34;&gt;&lt;a id=&#34;__codelineno-7-6&#34; name=&#34;__codelineno-7-6&#34; href=&#34;#__codelineno-7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;OS/ABI:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;UNIX&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;System&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;V&lt;/span&gt;&lt;span id=&#34;__span-7-7&#34;&gt;&lt;a id=&#34;__codelineno-7-7&#34; name=&#34;__codelineno-7-7&#34; href=&#34;#__codelineno-7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ABI&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Version:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-8&#34;&gt;&lt;a id=&#34;__codelineno-7-8&#34; name=&#34;__codelineno-7-8&#34; href=&#34;#__codelineno-7-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Type:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;EXEC&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Executable&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-9&#34;&gt;&lt;a id=&#34;__codelineno-7-9&#34; name=&#34;__codelineno-7-9&#34; href=&#34;#__codelineno-7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Machine:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Advanced&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Micro&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Devices&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;X86-64&lt;/span&gt;&lt;span id=&#34;__span-7-10&#34;&gt;&lt;a id=&#34;__codelineno-7-10&#34; name=&#34;__codelineno-7-10&#34; href=&#34;#__codelineno-7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Version:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1&lt;/span&gt;&lt;span id=&#34;__span-7-11&#34;&gt;&lt;a id=&#34;__codelineno-7-11&#34; name=&#34;__codelineno-7-11&#34; href=&#34;#__codelineno-7-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Entry&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;point&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;address:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x401000&lt;/span&gt;&lt;span id=&#34;__span-7-12&#34;&gt;&lt;a id=&#34;__codelineno-7-12&#34; name=&#34;__codelineno-7-12&#34; href=&#34;#__codelineno-7-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Start&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;program&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;into&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-13&#34;&gt;&lt;a id=&#34;__codelineno-7-13&#34; name=&#34;__codelineno-7-13&#34; href=&#34;#__codelineno-7-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Start&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8472&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;into&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-14&#34;&gt;&lt;a id=&#34;__codelineno-7-14&#34; name=&#34;__codelineno-7-14&#34; href=&#34;#__codelineno-7-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Flags:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;/span&gt;&lt;span id=&#34;__span-7-15&#34;&gt;&lt;a id=&#34;__codelineno-7-15&#34; name=&#34;__codelineno-7-15&#34; href=&#34;#__codelineno-7-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;this&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-16&#34;&gt;&lt;a id=&#34;__codelineno-7-16&#34; name=&#34;__codelineno-7-16&#34; href=&#34;#__codelineno-7-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;program&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-17&#34;&gt;&lt;a id=&#34;__codelineno-7-17&#34; name=&#34;__codelineno-7-17&#34; href=&#34;#__codelineno-7-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Number&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;program&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-18&#34;&gt;&lt;a id=&#34;__codelineno-7-18&#34; name=&#34;__codelineno-7-18&#34; href=&#34;#__codelineno-7-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-19&#34;&gt;&lt;a id=&#34;__codelineno-7-19&#34; name=&#34;__codelineno-7-19&#34; href=&#34;#__codelineno-7-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Number&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;headers:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-20&#34;&gt;&lt;a id=&#34;__codelineno-7-20&#34; name=&#34;__codelineno-7-20&#34; href=&#34;#__codelineno-7-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;string&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;table&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;index:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而 section 也变得更少：没用到的 .data .bss 段都删掉了，并且也没有了 relocation，这是因为这个程序里所有的 relocation 都是内部的，链接的时候就直接计算出地址了并填进去了。&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-8-1&#34;&gt;&lt;a id=&#34;__codelineno-8-1&#34; name=&#34;__codelineno-8-1&#34; href=&#34;#__codelineno-8-1&#34;&gt;&lt;/a&gt;Section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Headers:&lt;/span&gt;&lt;span id=&#34;__span-8-2&#34;&gt;&lt;a id=&#34;__codelineno-8-2&#34; name=&#34;__codelineno-8-2&#34; href=&#34;#__codelineno-8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Nr&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Name&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Type&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Address&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Offset&lt;/span&gt;&lt;span id=&#34;__span-8-3&#34;&gt;&lt;a id=&#34;__codelineno-8-3&#34; name=&#34;__codelineno-8-3&#34; href=&#34;#__codelineno-8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Size&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;EntSize&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Flags&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Link&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Info&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Align&lt;/span&gt;&lt;span id=&#34;__span-8-4&#34;&gt;&lt;a id=&#34;__codelineno-8-4&#34; name=&#34;__codelineno-8-4&#34; href=&#34;#__codelineno-8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NULL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00000000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-5&#34;&gt;&lt;a id=&#34;__codelineno-8-5&#34; name=&#34;__codelineno-8-5&#34; href=&#34;#__codelineno-8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-6&#34;&gt;&lt;a id=&#34;__codelineno-8-6&#34; name=&#34;__codelineno-8-6&#34; href=&#34;#__codelineno-8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.text&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PROGBITS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000401000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00001000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-7&#34;&gt;&lt;a id=&#34;__codelineno-8-7&#34; name=&#34;__codelineno-8-7&#34; href=&#34;#__codelineno-8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000000000000002a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;AX&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-8&#34;&gt;&lt;a id=&#34;__codelineno-8-8&#34; name=&#34;__codelineno-8-8&#34; href=&#34;#__codelineno-8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.rodata&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PROGBITS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000402000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00002000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-9&#34;&gt;&lt;a id=&#34;__codelineno-8-9&#34; name=&#34;__codelineno-8-9&#34; href=&#34;#__codelineno-8-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000000000000000e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-10&#34;&gt;&lt;a id=&#34;__codelineno-8-10&#34; name=&#34;__codelineno-8-10&#34; href=&#34;#__codelineno-8-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.symtab&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;SYMTAB&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00002010&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-11&#34;&gt;&lt;a id=&#34;__codelineno-8-11&#34; name=&#34;__codelineno-8-11&#34; href=&#34;#__codelineno-8-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;00000000000000a8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000018&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-12&#34;&gt;&lt;a id=&#34;__codelineno-8-12&#34; name=&#34;__codelineno-8-12&#34; href=&#34;#__codelineno-8-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.strtab&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;STRTAB&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000020b8&lt;/span&gt;&lt;span id=&#34;__span-8-13&#34;&gt;&lt;a id=&#34;__codelineno-8-13&#34; name=&#34;__codelineno-8-13&#34; href=&#34;#__codelineno-8-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000030&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-14&#34;&gt;&lt;a id=&#34;__codelineno-8-14&#34; name=&#34;__codelineno-8-14&#34; href=&#34;#__codelineno-8-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.shstrtab&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;STRTAB&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;000020e8&lt;/span&gt;&lt;span id=&#34;__span-8-15&#34;&gt;&lt;a id=&#34;__codelineno-8-15&#34; name=&#34;__codelineno-8-15&#34; href=&#34;#__codelineno-8-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000029&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-16&#34;&gt;&lt;a id=&#34;__codelineno-8-16&#34; name=&#34;__codelineno-8-16&#34; href=&#34;#__codelineno-8-16&#34;&gt;&lt;/a&gt;Key&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;to&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Flags:&lt;/span&gt;&lt;span id=&#34;__span-8-17&#34;&gt;&lt;a id=&#34;__codelineno-8-17&#34; name=&#34;__codelineno-8-17&#34; href=&#34;#__codelineno-8-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;W&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;write&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;A&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;alloc&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;X&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;execute&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;M&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;merge&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;strings&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;I&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;info&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;/span&gt;&lt;span id=&#34;__span-8-18&#34;&gt;&lt;a id=&#34;__codelineno-8-18&#34; name=&#34;__codelineno-8-18&#34; href=&#34;#__codelineno-8-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;L&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;link&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;order&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;O&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;extra&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;OS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;processing&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;required&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;G&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;group&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;T&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TLS&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;/span&gt;&lt;span id=&#34;__span-8-19&#34;&gt;&lt;a id=&#34;__codelineno-8-19&#34; name=&#34;__codelineno-8-19&#34; href=&#34;#__codelineno-8-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;C&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;compressed&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;x&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;unknown&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OS&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;specific&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;E&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;exclude&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;/span&gt;&lt;span id=&#34;__span-8-20&#34;&gt;&lt;a id=&#34;__codelineno-8-20&#34; name=&#34;__codelineno-8-20&#34; href=&#34;#__codelineno-8-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;D&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;mbind&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;l&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;large&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;p&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;processor&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;specific&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是一个可执行文件比较特殊的点，它有 segment 的概念，指示内核应该怎样把程序加载到内存里：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-9-1&#34;&gt;&lt;a id=&#34;__codelineno-9-1&#34; name=&#34;__codelineno-9-1&#34; href=&#34;#__codelineno-9-1&#34;&gt;&lt;/a&gt;Program&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Headers:&lt;/span&gt;&lt;span id=&#34;__span-9-2&#34;&gt;&lt;a id=&#34;__codelineno-9-2&#34; name=&#34;__codelineno-9-2&#34; href=&#34;#__codelineno-9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Type&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Offset&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;VirtAddr&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PhysAddr&lt;/span&gt;&lt;span id=&#34;__span-9-3&#34;&gt;&lt;a id=&#34;__codelineno-9-3&#34; name=&#34;__codelineno-9-3&#34; href=&#34;#__codelineno-9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;FileSiz&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;MemSiz&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Flags&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Align&lt;/span&gt;&lt;span id=&#34;__span-9-4&#34;&gt;&lt;a id=&#34;__codelineno-9-4&#34; name=&#34;__codelineno-9-4&#34; href=&#34;#__codelineno-9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LOAD&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000000000&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000400000&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000400000&lt;/span&gt;&lt;span id=&#34;__span-9-5&#34;&gt;&lt;a id=&#34;__codelineno-9-5&#34; name=&#34;__codelineno-9-5&#34; href=&#34;#__codelineno-9-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x00000000000000e8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x00000000000000e8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1000&lt;/span&gt;&lt;span id=&#34;__span-9-6&#34;&gt;&lt;a id=&#34;__codelineno-9-6&#34; name=&#34;__codelineno-9-6&#34; href=&#34;#__codelineno-9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LOAD&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000001000&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000401000&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000401000&lt;/span&gt;&lt;span id=&#34;__span-9-7&#34;&gt;&lt;a id=&#34;__codelineno-9-7&#34; name=&#34;__codelineno-9-7&#34; href=&#34;#__codelineno-9-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x000000000000002a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x000000000000002a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;E&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1000&lt;/span&gt;&lt;span id=&#34;__span-9-8&#34;&gt;&lt;a id=&#34;__codelineno-9-8&#34; name=&#34;__codelineno-9-8&#34; href=&#34;#__codelineno-9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LOAD&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000002000&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000402000&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0000000000402000&lt;/span&gt;&lt;span id=&#34;__span-9-9&#34;&gt;&lt;a id=&#34;__codelineno-9-9&#34; name=&#34;__codelineno-9-9&#34; href=&#34;#__codelineno-9-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x000000000000000e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x000000000000000e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x1000&lt;/span&gt;&lt;span id=&#34;__span-9-10&#34;&gt;&lt;a id=&#34;__codelineno-9-10&#34; name=&#34;__codelineno-9-10&#34; href=&#34;#__codelineno-9-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-11&#34;&gt;&lt;a id=&#34;__codelineno-9-11&#34; name=&#34;__codelineno-9-11&#34; href=&#34;#__codelineno-9-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;to&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Segment&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mapping:&lt;/span&gt;&lt;span id=&#34;__span-9-12&#34;&gt;&lt;a id=&#34;__codelineno-9-12&#34; name=&#34;__codelineno-9-12&#34; href=&#34;#__codelineno-9-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Segment&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Sections...&lt;/span&gt;&lt;span id=&#34;__span-9-13&#34;&gt;&lt;a id=&#34;__codelineno-9-13&#34; name=&#34;__codelineno-9-13&#34; href=&#34;#__codelineno-9-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-14&#34;&gt;&lt;a id=&#34;__codelineno-9-14&#34; name=&#34;__codelineno-9-14&#34; href=&#34;#__codelineno-9-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.text&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-15&#34;&gt;&lt;a id=&#34;__codelineno-9-15&#34; name=&#34;__codelineno-9-15&#34; href=&#34;#__codelineno-9-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.rodata&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它指示内核从文件的三个偏移处加载三个部分内容到内存里，分别是文件头、.text 段以及 .rodata 段。加载完以后，内核从头部里写的入口地址开始执行，就可以把程序跑起来。这时候再去看汇编，可以发现链接后的代码从 0x4001000 开始，并且直接把 .rodata 的地址写到了指令的立即数之中：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-10-1&#34;&gt;&lt;a id=&#34;__codelineno-10-1&#34; name=&#34;__codelineno-10-1&#34; href=&#34;#__codelineno-10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# objdump -S: Display assembly and intermix source code with disassembly&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-2&#34;&gt;&lt;a id=&#34;__codelineno-10-2&#34; name=&#34;__codelineno-10-2&#34; href=&#34;#__codelineno-10-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;objdump&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;helloworld_asm.o&lt;/span&gt;&lt;span id=&#34;__span-10-3&#34;&gt;&lt;a id=&#34;__codelineno-10-3&#34; name=&#34;__codelineno-10-3&#34; href=&#34;#__codelineno-10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;_start&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-10-4&#34;&gt;&lt;a id=&#34;__codelineno-10-4&#34; name=&#34;__codelineno-10-4&#34; href=&#34;#__codelineno-10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x1,%rdi&lt;/span&gt;&lt;span id=&#34;__span-10-5&#34;&gt;&lt;a id=&#34;__codelineno-10-5&#34; name=&#34;__codelineno-10-5&#34; href=&#34;#__codelineno-10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c6&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x0,%rsi&lt;/span&gt;&lt;span id=&#34;__span-10-6&#34;&gt;&lt;a id=&#34;__codelineno-10-6&#34; name=&#34;__codelineno-10-6&#34; href=&#34;#__codelineno-10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c2&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;xd,%rdx&lt;/span&gt;&lt;span id=&#34;__span-10-7&#34;&gt;&lt;a id=&#34;__codelineno-10-7&#34; name=&#34;__codelineno-10-7&#34; href=&#34;#__codelineno-10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x1,%rax&lt;/span&gt;&lt;span id=&#34;__span-10-8&#34;&gt;&lt;a id=&#34;__codelineno-10-8&#34; name=&#34;__codelineno-10-8&#34; href=&#34;#__codelineno-10-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1c:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;syscall&lt;/span&gt;&lt;span id=&#34;__span-10-9&#34;&gt;&lt;a id=&#34;__codelineno-10-9&#34; name=&#34;__codelineno-10-9&#34; href=&#34;#__codelineno-10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1e:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;xor&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rdi,%rdi&lt;/span&gt;&lt;span id=&#34;__span-10-10&#34;&gt;&lt;a id=&#34;__codelineno-10-10&#34; name=&#34;__codelineno-10-10&#34; href=&#34;#__codelineno-10-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;21&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x3c,%rax&lt;/span&gt;&lt;span id=&#34;__span-10-11&#34;&gt;&lt;a id=&#34;__codelineno-10-11&#34; name=&#34;__codelineno-10-11&#34; href=&#34;#__codelineno-10-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;28&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;syscall&lt;/span&gt;&lt;span id=&#34;__span-10-12&#34;&gt;&lt;a id=&#34;__codelineno-10-12&#34; name=&#34;__codelineno-10-12&#34; href=&#34;#__codelineno-10-12&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;objdump&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;helloworld_asm&lt;/span&gt;&lt;span id=&#34;__span-10-13&#34;&gt;&lt;a id=&#34;__codelineno-10-13&#34; name=&#34;__codelineno-10-13&#34; href=&#34;#__codelineno-10-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000401000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;_start&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-10-14&#34;&gt;&lt;a id=&#34;__codelineno-10-14&#34; name=&#34;__codelineno-10-14&#34; href=&#34;#__codelineno-10-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401000&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x1,%rdi&lt;/span&gt;&lt;span id=&#34;__span-10-15&#34;&gt;&lt;a id=&#34;__codelineno-10-15&#34; name=&#34;__codelineno-10-15&#34; href=&#34;#__codelineno-10-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401007&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c6&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x402000,%rsi&lt;/span&gt;&lt;span id=&#34;__span-10-16&#34;&gt;&lt;a id=&#34;__codelineno-10-16&#34; name=&#34;__codelineno-10-16&#34; href=&#34;#__codelineno-10-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;40100e:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c2&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;xd,%rdx&lt;/span&gt;&lt;span id=&#34;__span-10-17&#34;&gt;&lt;a id=&#34;__codelineno-10-17&#34; name=&#34;__codelineno-10-17&#34; href=&#34;#__codelineno-10-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401015&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x1,%rax&lt;/span&gt;&lt;span id=&#34;__span-10-18&#34;&gt;&lt;a id=&#34;__codelineno-10-18&#34; name=&#34;__codelineno-10-18&#34; href=&#34;#__codelineno-10-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;40101c:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;syscall&lt;/span&gt;&lt;span id=&#34;__span-10-19&#34;&gt;&lt;a id=&#34;__codelineno-10-19&#34; name=&#34;__codelineno-10-19&#34; href=&#34;#__codelineno-10-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;40101e:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;xor&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rdi,%rdi&lt;/span&gt;&lt;span id=&#34;__span-10-20&#34;&gt;&lt;a id=&#34;__codelineno-10-20&#34; name=&#34;__codelineno-10-20&#34; href=&#34;#__codelineno-10-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401021&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x3c,%rax&lt;/span&gt;&lt;span id=&#34;__span-10-21&#34;&gt;&lt;a id=&#34;__codelineno-10-21&#34; name=&#34;__codelineno-10-21&#34; href=&#34;#__codelineno-10-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401028&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;syscall&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;小结&#34;&gt;小结&lt;a class=&#34;headerlink&#34; href=&#34;#小结&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;从这里可以归纳出，写一个最简单的链接器，把上述的 .o 链接成可执行文件，大致需要做哪些事情：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;解析 ELF 文件，解析里面的内容&lt;/li&gt;&lt;li&gt;考虑将要输出的 ELF 文件的布局，计算出各个 section 需要保存的内容以及地址，需要考虑 segment 的布局以及对齐&lt;/li&gt;&lt;li&gt;根据地址，完成 relocation 所需要的计算并填入对应的位置&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;实现&#34;&gt;实现&lt;a class=&#34;headerlink&#34; href=&#34;#实现&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;接下来描述一下实现的具体思路：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第一步就是解析输入的 ELF 文件，提取出中间的内容，包括有哪些 section，解析 relocation 的内容等等；这个可以用现成的库来辅助，也可以自己写。&lt;/li&gt;&lt;li&gt;把 section 的内容收集下来，例如 .text .rodata 等等，这些数据之后会写入到可执行 ELF 文件中。&lt;/li&gt;&lt;li&gt;收集完以后，就知道输出的 ELF 大概需要哪些内容了。在进行 relocation 之前，因为目前实现的是采用绝对地址的可执行文件，所以需要先确定好各个 section 和 symbol 的地址，从而实现 relocation 的计算。观察 ld.bfd 输出的文件，可以看到 ELF 文件包括如下几个部分：&lt;ol&gt;&lt;li&gt;ELF file header：ELF 头部，填写各种信息，以及到后续各个 header 的地址偏移&lt;/li&gt;&lt;li&gt;ELF program header：让 ELF Loader 知道有哪些 Segment 要加载&lt;/li&gt;&lt;li&gt;section data：各个 section 的内容，由于 section 需要保证对齐，因此中间需要填一些额外的零字节&lt;/li&gt;&lt;li&gt;ELF section header：保存 section header，记录了 section 的信息&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;而加载到内存里的时候，就是直接大段地连续地加载到内存中，所以可以提前计算好各个部分的地址。例如要把 ELF 加载到 0x400000，那就把 file header 和 program header 放在开头，然后因为 segment 需要对齐到页的边界 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a class=&#34;footnote-ref&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; ，例如对齐到 0x1000（4 KB），那就把连续的相同访问权限的 section 放到一个 segment 内，然后第一个 segment 放到 0x401000，往后再对齐再放下一个 segment，依此类推，直到把所有 segment 都放下为止。&lt;/li&gt;&lt;li&gt;计算好各个部分的地址以后，就可以知道各个 section 和 symbol 在最终的内存里会处于什么地址了。此时就按照 relocation 的要求进行计算（例如前面出现过的 &lt;code&gt;R_X86_64_32S&lt;/code&gt; 就是后写入 64 位的地址的低 32 位，并且检查它符号扩展后等于原来 64 位的地址，如果检查失败，就会得到大家熟悉的 &lt;code&gt;relocation truncated to fit&lt;/code&gt; 错误），直接把计算结果填入到数据中。由于目前只考虑最简单的情况，不涉及到动态重定位，所以可执行文件里所有重定位都会被链接器完成。&lt;/li&gt;&lt;li&gt;针对可执行文件，还需要生成 segment 放到 program header 里。简单粗暴的办法，就是整个文件直接映射到内存的 0x400000，设置权限为 read + write + execute。更精细的做法，则是把不同类型的数据按照合适的权限映射，例如 .rodata 放到 read only 的 segment 里，.text 放到 read + execute 的 segment 里。&lt;/li&gt;&lt;li&gt;再按照前面所述的流程，按照预计好的布局，把 ELF 的内容写到文件里。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这里还有一些细节没有交代，例如 section string table (.shstrtab) 的维护等等。如果只是为了跑起来，符号表都可以直接删掉不要。&lt;/p&gt;&lt;p&gt;实现的过程中，灵活运用 readelf 和 objdump 等工具，确认自己输出的 ELF 文件内容是正确的。如果实现成功，就可以执行生成的可执行文件，成功打印 &lt;code&gt;Hello world！&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;这个过程我用 Rust 完成了实现，使用了现成的 ELF 读写库 &lt;code&gt;object&lt;/code&gt;，链接器部分的代码量大概是 200 行。&lt;/p&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;a class=&#34;headerlink&#34; href=&#34;#参考&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;最后给出一些文档，可供实现时参考：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://refspecs.linuxfoundation.org/elf/elf.pdf&#34;&gt;Tool Interface Standard (TIS) Executable and Linking Format (ELF) Specification&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://refspecs.linuxbase.org/elf/x86_64-abi-0.99.pdf&#34;&gt;System V Application Binary Interface AMD64 Architecture Processor Supplement Draft Version 0.99.6&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&#34;footnote&#34;&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;这是为了在加载 ELF 时可以直接 mmap，而不需要立即把文件内容读取到内存里；更进一步，mmap 是允许多个虚拟页映射到同一个物理页上的，所以允许一些出现一些“不对齐”的情况，得以节省因为对齐而浪费的空间。对于这个话题的进一步了解，建议阅读 &lt;a href=&#34;https://maskray.me/blog/2023-12-17-exploring-the-section-layout-in-linker-output&#34;&gt;Exploring the section layout in linker output&lt;/a&gt;。&amp;#160;&lt;a class=&#34;footnote-backref&#34; href=&#34;#fnref:1&#34; title=&#34;Jump back to footnote 1 in the text&#34;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description><link>https://jia.je/software/2024/02/18/write-a-linker-1/</link> <pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2024/02/18/write-a-linker-1/</guid> </item> <item> <title>Chromium 构建与移植</title> <category>chromium</category> <category>linux</category> <category>loongarch</category> <category>port</category> <category>software</category> <description>&lt;h1 id=&#34;chromium-构建与移植&#34;&gt;Chromium 构建与移植&lt;a class=&#34;headerlink&#34; href=&#34;#chromium-构建与移植&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Google Chrome 也用了很长时间了，但是一直没有尝试过构建 Chromium，这次趁着往 LoongArch 移植 Chromium 的机会，学习了一下 Chromium 的构建。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;克隆代码&#34;&gt;克隆代码&lt;a class=&#34;headerlink&#34; href=&#34;#克隆代码&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Chromium 官方的构建文档链接是 &lt;a href=&#34;https://chromium.googlesource.com/chromium/src/+/main/docs/linux/build_instructions.md&#34;&gt;Checking out and building Chromium on Linux&lt;/a&gt;，按照流程做就可以：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;build-chromium&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# setup depot_tools&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;git&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;clone&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;https://chromium.googlesource.com/chromium/tools/depot_tools.git&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# fish syntax to add depot_tools to PATH&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-6&#34;&gt;&lt;a id=&#34;__codelineno-0-6&#34; name=&#34;__codelineno-0-6&#34; href=&#34;#__codelineno-0-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-x&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PATH&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/depot_tools&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-7&#34;&gt;&lt;a id=&#34;__codelineno-0-7&#34; name=&#34;__codelineno-0-7&#34; href=&#34;#__codelineno-0-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-8&#34;&gt;&lt;a id=&#34;__codelineno-0-8&#34; name=&#34;__codelineno-0-8&#34; href=&#34;#__codelineno-0-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# clone chromium using fetch from depot_tools&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-9&#34;&gt;&lt;a id=&#34;__codelineno-0-9&#34; name=&#34;__codelineno-0-9&#34; href=&#34;#__codelineno-0-9&#34;&gt;&lt;/a&gt;mkdir&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;chromium&lt;/span&gt;&lt;span id=&#34;__span-0-10&#34;&gt;&lt;a id=&#34;__codelineno-0-10&#34; name=&#34;__codelineno-0-10&#34; href=&#34;#__codelineno-0-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;chromium&lt;/span&gt;&lt;span id=&#34;__span-0-11&#34;&gt;&lt;a id=&#34;__codelineno-0-11&#34; name=&#34;__codelineno-0-11&#34; href=&#34;#__codelineno-0-11&#34;&gt;&lt;/a&gt;fetch&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--nohooks&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;chromium&lt;/span&gt;&lt;span id=&#34;__span-0-12&#34;&gt;&lt;a id=&#34;__codelineno-0-12&#34; name=&#34;__codelineno-0-12&#34; href=&#34;#__codelineno-0-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# or&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-13&#34;&gt;&lt;a id=&#34;__codelineno-0-13&#34; name=&#34;__codelineno-0-13&#34; href=&#34;#__codelineno-0-13&#34;&gt;&lt;/a&gt;fetch&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--nohooks&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--no-history&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;chromium&lt;/span&gt;&lt;span id=&#34;__span-0-14&#34;&gt;&lt;a id=&#34;__codelineno-0-14&#34; name=&#34;__codelineno-0-14&#34; href=&#34;#__codelineno-0-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-15&#34;&gt;&lt;a id=&#34;__codelineno-0-15&#34; name=&#34;__codelineno-0-15&#34; href=&#34;#__codelineno-0-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# setup build dependencies&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-16&#34;&gt;&lt;a id=&#34;__codelineno-0-16&#34; name=&#34;__codelineno-0-16&#34; href=&#34;#__codelineno-0-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;src&lt;/span&gt;&lt;span id=&#34;__span-0-17&#34;&gt;&lt;a id=&#34;__codelineno-0-17&#34; name=&#34;__codelineno-0-17&#34; href=&#34;#__codelineno-0-17&#34;&gt;&lt;/a&gt;./build/install-build-deps.sh&lt;/span&gt;&lt;span id=&#34;__span-0-18&#34;&gt;&lt;a id=&#34;__codelineno-0-18&#34; name=&#34;__codelineno-0-18&#34; href=&#34;#__codelineno-0-18&#34;&gt;&lt;/a&gt;gclient&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;runhooks&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然了，这个过程主要是为了开发 chromium 做的，实际上可以做一些简化：如果只是要编译一个已经发布正式版的 chromium，可以直接下载 tarball，例如 &lt;a href=&#34;https://commondatastorage.googleapis.com/chromium-browser-official/chromium-120.0.6099.216.tar.xz&#34;&gt;https://commondatastorage.googleapis.com/chromium-browser-official/chromium-120.0.6099.216.tar.xz&lt;/a&gt;，把链接里的版本号改掉即可；这样可以省去克隆 git repo 以及一堆 submodule 的大量时间。当然了，解压本身也需要比较长的时间，对付这种大型软件必须要有耐心。同理，depot_tools 也可以不要，毕竟自己把代码下载下来了，只需要再装一个 gn，就可以完成剩下的构建。&lt;/p&gt;&lt;h2 id=&#34;构建&#34;&gt;构建&lt;a class=&#34;headerlink&#34; href=&#34;#构建&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;按照默认配置构建，只需要：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;gn&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;gen&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;out/Default&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;意思是用 &lt;code&gt;gn&lt;/code&gt; 工具生成一套用 Ninja 构建的配置，目录在 &lt;code&gt;out/Default&lt;/code&gt; 下面，然后不添加额外的设置。要构建 Chromium，那就在里面跑 ninja：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;ninja&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-C&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;out/Default&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;chrome&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# or&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;autoninja&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-C&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;out/Default&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;chrome&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是如果你去翻各个 Linux 发行版，就会发现它们都会传很多的参数给 gn，实现各种目的：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;gn&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;gen&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;out/Default&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--args&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面给出一些链接：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/AOSC-Dev/aosc-os-abbs/tree/stable/app-web/chromium/autobuild&#34;&gt;AOSC OS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://gitlab.archlinux.org/archlinux/packaging/packages/chromium/-/blob/main/PKGBUILD?ref_type=heads&#34;&gt;Arch Linux&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://salsa.debian.org/chromium-team/chromium/-/blob/master/debian/rules?ref_type=heads&#34;&gt;Debian&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://src.fedoraproject.org/rpms/chromium/blob/rawhide/f/chromium.spec&#34;&gt;Fedora&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这里的门门道道就很多了，很多编译参数影响了最终 Chromium 的功能、性能等等重要的指标。&lt;/p&gt;&lt;p&gt;首先是工具链的选择：Chromium 开发的时候用的是很新的 Clang，还自带了一份 libc++，但是很自然地各大发行版都会倾向于用自己的工具链，那么这个工具链可能是稍微旧一些的 Clang，或者是 GCC，这里就会出现大量的问题：Chromium 开发的时候是不在旧 Clang 或者 GCC 上测试的，所以各个发行版都要维护一堆的 patch，使得用稍微旧一点的正式版 Clang/GCC 也可以构建 Chromium。这些 patch 可以在上面的链接中找到。&lt;/p&gt;&lt;p&gt;除了编译器以外，还有很多依赖也可以选择用 chromium 自带的版本，还是系统自带的版本，这里也有很多可能性。例如要用系统自带的 Clang：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;host_toolchain=&amp;quot;//build/toolchain/linux/unbundle:default&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-4-2&#34;&gt;&lt;a id=&#34;__codelineno-4-2&#34; name=&#34;__codelineno-4-2&#34; href=&#34;#__codelineno-4-2&#34;&gt;&lt;/a&gt;custom_toolchain=&amp;quot;//build/toolchain/linux/unbundle:default&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-4-3&#34;&gt;&lt;a id=&#34;__codelineno-4-3&#34; name=&#34;__codelineno-4-3&#34; href=&#34;#__codelineno-4-3&#34;&gt;&lt;/a&gt;clang_base_path=&amp;quot;/usr&amp;quot; &lt;/span&gt;&lt;span id=&#34;__span-4-4&#34;&gt;&lt;a id=&#34;__codelineno-4-4&#34; name=&#34;__codelineno-4-4&#34; href=&#34;#__codelineno-4-4&#34;&gt;&lt;/a&gt;clang_use_chrome_plugins=false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以尝试用 GCC，但是需要打不少的 patch：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-5-1&#34;&gt;&lt;a id=&#34;__codelineno-5-1&#34; name=&#34;__codelineno-5-1&#34; href=&#34;#__codelineno-5-1&#34;&gt;&lt;/a&gt;CC=gcc CXX=g++ AR=ar NM=nm gn gen out/Default --args=&amp;#39;is_clang=false ...&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等等，还有很多可能的配置选项，这些可以在 Chromium 的源码中找到：它们会用 gn 的配置语言编写，放在 &lt;code&gt;declare_args&lt;/code&gt; 里面。&lt;/p&gt;&lt;h2 id=&#34;移植&#34;&gt;移植&lt;a class=&#34;headerlink&#34; href=&#34;#移植&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;除了在 amd64 构建以外，Chromium 主要还支持 arm64 架构，其他架构属于有第三方 patch，但是 Chromium 处于一个付出额外维护负担的状态，所以其他架构的补丁就没有合并，因此你会发现 riscv64 和 ppc64le 架构上能找到一些发行版自己维护的 patch，并且没有合并到上游。loongarch64 的处境也是类似的，龙芯之前做过一些移植，尝试提交上游，但是最后没有合并进去。&lt;/p&gt;&lt;p&gt;但是 Chromium 对于桌面来说又是比较重要的，无论是作为浏览器，还是用在 Electron 或者 QT 生态中。因此借着龙芯把移植 Electron 的 patch 放出来的机会，顺便把 Chromium 的移植做了：最早是 &lt;a href=&#34;https://github.com/prcups&#34;&gt;@prcups&lt;/a&gt; 把补丁移植到 qt6-webengine 上，证实了补丁的可用性；之后我又移植到了最新版的 Chromium 上，补丁发布在 &lt;a href=&#34;https://github.com/AOSC-Dev/chromium-loongarch64&#34;&gt;AOSC-Dev/chromium-loongarch64&lt;/a&gt;。目前 120 已经适配了，但是这几天 121 又发布了，需要再次更新补丁。新版 Electron 的补丁也还没有做。&lt;/p&gt;&lt;p&gt;在这个过程中，也发现龙芯原来的 patch 内置的 bug：与 seccomp sandbox 有关，原来的代码把对 stat 的处理照抄到了 statx 上，但是它的参数顺序和含义都是不一样的，不能直接照抄。对着代码，大概是正确地实现了出来。之前没有遇到这个问题，大概率是 Electron 下不会用到这个 sandbox。回顾下来，移植的补丁不算多，主要是 crashpad 和 sandbox 两部分代码，观察了一下 archriscv 维护的 riscv 补丁，其实也是类似的。&lt;/p&gt;&lt;p&gt;这个过程遇到了很多困难：一开始 Clang 构建遇到问题，于是改用 GCC，但是前面也说了，Chromium 没有用 GCC 测试，所以会出现很多问题，需要细心地修复；最后终于搞好了以后，再回到 Clang，发现 Clang 的问题已经被 Fedora/Debian 等发行版解决，只需要导入已有的补丁即可。这样折腾下来，终于是搞定了。而目前龙芯的构建机器（3C5000）性能还是不够好，构建一次完整的 Chromium 需要九个小时，未来等龙芯服务器性能提升以后，可以预见到维护成本的降低。&lt;/p&gt;</description><link>https://jia.je/software/2024/01/25/chromium-build-port/</link> <pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2024/01/25/chromium-build-port/</guid> </item> <item> <title>VIPT 与缓存大小和页表大小的关系</title> <category>cache</category> <category>cpu</category> <category>hardware</category> <category>paging</category> <category>vipt</category> <description>&lt;h1 id=&#34;vipt-与缓存大小和页表大小的关系&#34;&gt;VIPT 与缓存大小和页表大小的关系&lt;a class=&#34;headerlink&#34; href=&#34;#vipt-与缓存大小和页表大小的关系&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;VIPT（Virtual Index Physical Tag）是 L1 数据缓存常用的技术，利用了虚拟地址和物理地址的 Index 相同的特性，得以优化 L1 数据缓存的读取。但是 VIPT 的使用，与页表大小和 L1 数据缓存大小都有关系。这篇博客探讨一下，VIPT 技术背后的一些问题。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;vipt-是什么&#34;&gt;VIPT 是什么&lt;a class=&#34;headerlink&#34; href=&#34;#vipt-是什么&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;以防读者不记得 VIPT 是什么，这里再复习一下缓存的原理。首先，把数据的物理地址划分为三段：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Tag&lt;/li&gt;&lt;li&gt;Index&lt;/li&gt;&lt;li&gt;Offset&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;缓存组织成多路，每一路有若干个项，每项里面是一个缓存行。查询时，首先根据 Index 作为下标，去索引缓存，得到多路的缓存行；然后再用 Tag 和多路缓存行进行比较，如果有匹配，则说明是命中；否则就是缓存缺失。&lt;/p&gt;&lt;p&gt;可以看到，这个过程是先用 Index，后用 Tag，因此如果可以先得到 Index，就可以提前完成第一步。回顾一下物理地址和虚拟地址的转换：物理地址和虚拟地址的页内偏移是相同的，只会修改页号。那么，如果把 Index 放在页内偏移的部分，那就可以在虚实地址转换之前，直接从虚拟地址获取到 Index，并且这个 Index 一定是物理地址的 Index，毕竟虚实地址转换不会修改 Index。这就是 VIPT。&lt;/p&gt;&lt;p&gt;所以很明显，VIPT 是一种优化方法，利用虚实转换中页内偏移不变的特性，实现更快的数据缓存读取。&lt;/p&gt;&lt;h2 id=&#34;vipt-的局限性&#34;&gt;VIPT 的局限性&lt;a class=&#34;headerlink&#34; href=&#34;#vipt-的局限性&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;但同时，VIPT 也给 L1 数据缓存带来了局限性。前面提到，VIPT 要求 Index 被包含在页内偏移中，那么可以来算一算，Index 最大是多少：&lt;/p&gt;&lt;p&gt;假如页大小是 &lt;span class=&#34;arithmatex&#34;&gt;\(P\)&lt;/span&gt;，每个缓存行大小是 &lt;span class=&#34;arithmatex&#34;&gt;\(C\)&lt;/span&gt;，为了让 Index 包含在页内偏移中，Index 的个数（也叫做 Sets）&lt;span class=&#34;arithmatex&#34;&gt;\(I\)&lt;/span&gt; 需要满足 &lt;span class=&#34;arithmatex&#34;&gt;\(I * C \le P\)&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;此时考虑一下数据缓存的总大小：每个 Index 有 Way 路缓存行，所以总大小是 &lt;span class=&#34;arithmatex&#34;&gt;\(I * C * W\)&lt;/span&gt;，其中 &lt;span class=&#34;arithmatex&#34;&gt;\(W\)&lt;/span&gt; 指的是路数。此时你会发现，数据缓存的总大小不大于 &lt;span class=&#34;arithmatex&#34;&gt;\(W * P\)&lt;/span&gt;，也就是路数乘以页的大小。&lt;/p&gt;&lt;p&gt;换句话说，L1 数据缓存大小，受限于路数乘以页的大小。如果你去查看一些处理器，你会发现它们都取到了这个最大值：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;i9-13900K: L1 数据缓存 48KB，&lt;span class=&#34;arithmatex&#34;&gt;\(W=12, P=4096\)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;i9-10980XE: L1 数据缓存 32KB，&lt;span class=&#34;arithmatex&#34;&gt;\(W=8, P=4096\)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;EPYC 7551: L1 数据缓存 32KB，&lt;span class=&#34;arithmatex&#34;&gt;\(W=8, P=4096\)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;3A6000: L1 数据缓存 64KB，&lt;span class=&#34;arithmatex&#34;&gt;\(W=4, P=16384\)&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;毕竟比较大的 L1 数据缓存对性能是有帮助的，当然了，太大了也会导致 Load To Use 延迟增加，可能得不偿失。&lt;/p&gt;&lt;p&gt;当然了，L2 L3 等缓存就没有这个限制了，毕竟通常是采用物理地址，不涉及 VIPT。&lt;/p&gt;&lt;p&gt;这时候你可能要说了，等等！为啥有一些处理器不符合这个规则：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Kunpeng-920: L1 数据缓存 64KB，&lt;span class=&#34;arithmatex&#34;&gt;\(W=4, P=4096\)&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;此时 &lt;span class=&#34;arithmatex&#34;&gt;\(W * P\)&lt;/span&gt; 只有 16KB，为什么能够实现 64KB 的数据缓存？实际上，前面的讨论都基于一个假设：页表大小是固定的。要是页表大小不唯一呢？&lt;/p&gt;&lt;h2 id=&#34;多变的页表大小&#34;&gt;多变的页表大小&lt;a class=&#34;headerlink&#34; href=&#34;#多变的页表大小&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;现在一些处理器，特别是非 x86 的处理器，通常会支持多种页表大小：4KB、16KB 和 64KB，由操作系统决定使用哪一种。例如上面的例子中，Kunpeng-920 就支持多种页表大小，如果你用数据缓存大小倒推，会得到页表是 16KB 的结论。那么问题来了，如果要支持多种页表大小，VIPT 还能正常工作吗？&lt;/p&gt;&lt;p&gt;假设有一个 CPU，数据缓存大小是 64KB，4 路，缓存行大小是 64 字节。那么，根据这些信息，可以计算出缓存有 256 个 Set，也就是 Index 可以取 0 到 255，占用地址的 8 个位。缓存行大小是 64 字节，行内便宜占用地址的 6 位。也就是说，Index 对应的是地址的 &lt;code&gt;[13:6]&lt;/code&gt; 位。接下来对页表大小进行分类讨论：&lt;/p&gt;&lt;p&gt;假如页表大小是 64 KB，那么页内偏移就是地址的第 &lt;code&gt;[15:0]&lt;/code&gt; 位，那么物理地址和虚拟地址的 &lt;code&gt;[15:0]&lt;/code&gt; 位相等，自然 Index 对应的 &lt;code&gt;[13:6]&lt;/code&gt; 位也相等，VIPT 不会遇到问题。&lt;/p&gt;&lt;p&gt;假如页表大小是 16 KB，那么页内偏移就是地址的第 &lt;code&gt;[13:0]&lt;/code&gt; 位，那么物理地址和虚拟地址的 &lt;code&gt;[13:0]&lt;/code&gt; 位相等，自然 Index 对应的 &lt;code&gt;[13:6]&lt;/code&gt; 位也相等，VIPT 不会遇到问题。&lt;/p&gt;&lt;p&gt;假如页表大小是 4 KB，那么页内偏移就是地址的第 &lt;code&gt;[11:0]&lt;/code&gt; 位，那么物理地址和虚拟地址的 &lt;code&gt;[11:0]&lt;/code&gt; 位相等，但是 Index 对应的 &lt;code&gt;[13:6]&lt;/code&gt; 位就不一定相等了。这时候会出现什么问题呢？&lt;/p&gt;&lt;p&gt;如果虚拟地址和物理地址都是一一对应，那么即使映射时修改了 &lt;code&gt;[13:12]&lt;/code&gt; 位，Index 变了，也没问题，只要保存的 Tag 是完整的 &lt;code&gt;[VALEN-1:12]&lt;/code&gt; 位，数据依然可以精确地找到，不会访问到错误的数据。但是，在实际使用的时候，有可能出现多个虚拟地址对应同一个物理地址，例如共享内存等等。举一个例子：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第一个虚拟页到物理页的映射：0x80000000 -&amp;gt; 0x00000000&lt;/li&gt;&lt;li&gt;第二个虚拟页到物理页的映射：0x80001000 -&amp;gt; 0x00000000&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这两个虚拟页对应同一个物理页，但是这两个虚拟页的 Index 却不相同，因为它们的第 &lt;code&gt;[13:12]&lt;/code&gt; 位不相等。回顾 L1 数据缓存访问的流程，第一步就是用 Index 作为下标去访问，既然两个虚拟页的访问时下标就不一样，自然也没法访问到同样的数据，往第一个虚拟页写数据，从第二个虚拟页却读不出来，这就坏事了。这个现象叫做 virtual aliasing。&lt;/p&gt;&lt;p&gt;这个问题怎么解决呢？阅读 &lt;a href=&#34;https://www.kernel.org/doc/Documentation/cachetlb.txt&#34;&gt;Cache and TLB Flushing Under Linux&lt;/a&gt;，里面有一段话：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;Is your port susceptible to virtual aliasing in its D-cache?&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;Well, if your D-cache is virtually indexed, is larger in size than&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;PAGE_SIZE, and does not prevent multiple cache lines for the same&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;physical address from existing at once, you have this problem.&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-6&#34;&gt;&lt;a id=&#34;__codelineno-0-6&#34; name=&#34;__codelineno-0-6&#34; href=&#34;#__codelineno-0-6&#34;&gt;&lt;/a&gt;If your D-cache has this problem, first define asm/shmparam.h SHMLBA&lt;/span&gt;&lt;span id=&#34;__span-0-7&#34;&gt;&lt;a id=&#34;__codelineno-0-7&#34; name=&#34;__codelineno-0-7&#34; href=&#34;#__codelineno-0-7&#34;&gt;&lt;/a&gt;properly, it should essentially be the size of your virtually&lt;/span&gt;&lt;span id=&#34;__span-0-8&#34;&gt;&lt;a id=&#34;__codelineno-0-8&#34; name=&#34;__codelineno-0-8&#34; href=&#34;#__codelineno-0-8&#34;&gt;&lt;/a&gt;addressed D-cache (or if the size is variable, the largest possible&lt;/span&gt;&lt;span id=&#34;__span-0-9&#34;&gt;&lt;a id=&#34;__codelineno-0-9&#34; name=&#34;__codelineno-0-9&#34; href=&#34;#__codelineno-0-9&#34;&gt;&lt;/a&gt;size). This setting will force the SYSv IPC layer to only allow user&lt;/span&gt;&lt;span id=&#34;__span-0-10&#34;&gt;&lt;a id=&#34;__codelineno-0-10&#34; name=&#34;__codelineno-0-10&#34; href=&#34;#__codelineno-0-10&#34;&gt;&lt;/a&gt;processes to mmap shared memory at address which are a multiple of&lt;/span&gt;&lt;span id=&#34;__span-0-11&#34;&gt;&lt;a id=&#34;__codelineno-0-11&#34; name=&#34;__codelineno-0-11&#34; href=&#34;#__codelineno-0-11&#34;&gt;&lt;/a&gt;this value.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;翻译成中文，意思就是，假如数据缓存的 VIPT 是基于一个比较大的页（上面的例子是 16KB），比实际的页表大小更大（4KB），并且没有防止同一个物理地址的缓存行出现多次，就会遇到问题。为了解决这个问题，需要在 Linux 里设置 &lt;code&gt;SHMLBA&lt;/code&gt; 参数，它的大小应该是 VIPT 对应的页大小（16KB）。它会要求共享内存的基地址一定是 &lt;code&gt;SHMLBA&lt;/code&gt; 的倍数。&lt;/p&gt;&lt;p&gt;这就解决了前面的问题：出现多个虚拟地址映射同一个物理地址时，既然 Index 不一致会有问题，那就软件上去保证 Index 一致，而保证 Index 一致，其实就是对齐到 &lt;code&gt;SHMLBA&lt;/code&gt; 的倍数。回顾上面的例子：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第一个虚拟页到物理页的映射：0x80000000 -&amp;gt; 0x00000000&lt;/li&gt;&lt;li&gt;第二个虚拟页到物理页的映射：0x80001000 -&amp;gt; 0x00000000&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;第二个页就没有对齐到 &lt;code&gt;SHMLBA&lt;/code&gt;，也就是 16KB 的边界上。假如映射的时候，就保证第二个页对齐到 16KB 的边界上，就变成了：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第一个虚拟页到物理页的映射：0x80000000 -&amp;gt; 0x00000000&lt;/li&gt;&lt;li&gt;第二个虚拟页到物理页的映射：0x80004000 -&amp;gt; 0x00000000&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;此时这两个页的虚拟地址的 &lt;code&gt;[13:12]&lt;/code&gt; 位就相同了，不会出现 virtual aliasing 的问题。这个方法也叫 Page Coloring（的一种），额外要求共享内存中虚拟地址和物理地址的第 &lt;code&gt;[13:12]&lt;/code&gt; 位相同。&lt;/p&gt;&lt;p&gt;因此，在使用共享内存的时候，不要忘记了对齐到 &lt;code&gt;SHMLBA&lt;/code&gt;，它不一定是页表的大小。&lt;/p&gt;&lt;p&gt;这是软件做法，有没有硬件做法呢？答案是，有，可以参考 &lt;a href=&#34;https://cs.stackexchange.com/a/32302&#34;&gt;What problem does cache coloring solve?&lt;/a&gt; 和 &lt;a href=&#34;https://ntnuopen.ntnu.no/ntnu-xmlui/handle/11250/2467634&#34;&gt;Designing a Virtual Memory System for the SHMAC Research Infrastructure&lt;/a&gt; 第 3.7 节。这里列出来几种比较好理解的方法：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;缓存缺失的时候，去其他 set 里寻找匹配，如果发现了，就把数据挪到当前的 virtual index 对应的位置。这个方法复杂点在于需要去其他 set 里寻找可能的匹配。&lt;/li&gt;&lt;li&gt;在 L2 缓存中记录缓存行对应的 virtual index，缓存缺失的时候，去询问 L2，L2 发现有 alias 的情况，告诉 L1 缓存，让他去指定的 set 里寻找数据，并且迁移。这个方法的好处是不需要像第一种方法那样去寻找可能的匹配，而是让 L2 去记录信息。缺点就是需要记录更多信息，另外要求 L2 缓存需要是 inclusive 的。见 &lt;a href=&#34;https://xiangshan-doc.readthedocs.io/zh-cn/latest/huancun/cache_alias/&#34;&gt;XiangShan Cache 别名问题&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;此外还有一些比较复杂的方法，建议阅读上面的参考论文。&lt;/p&gt;&lt;p&gt;因此 VIPT 也可以不受实际的页大小的限制，但是为了解决 aliasing 的问题，需要在软件上或者硬件上找补。&lt;/p&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;a class=&#34;headerlink&#34; href=&#34;#参考&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/page-colouring-on-armv6-and-a-bit-on-armv7&#34;&gt;Page Colouring on ARMv6 (and a bit on ARMv7)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;推荐阅读：&lt;a href=&#34;https://blog.cyyself.name/why-the-big-l1-cache-is-so-hard/&#34;&gt;浅谈现代处理器实现超大 L1 Cache 的方式&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/hardware/2023/12/08/vipt-l1-cache-page-size/</link> <pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2023/12/08/vipt-l1-cache-page-size/</guid> </item> <item> <title>反向代理的 Partial Transfer 问题</title> <category>http</category> <category>network</category> <category>nginx</category> <category>proxy</category> <category>software</category> <description>&lt;h1 id=&#34;反向代理的-partial-transfer-问题&#34;&gt;反向代理的 Partial Transfer 问题&lt;a class=&#34;headerlink&#34; href=&#34;#反向代理的-partial-transfer-问题&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;反向代理已经是无处不在，但是如果反向代理没有根据使用场景调优，或者出现了一些异常，可能会带来不好的用户体验，并且现象十分奇怪，例如访问某 GitLab 实例的时候，偶尔会出现页面加载不完整的情况。&lt;/p&gt;&lt;p&gt;这些问题困扰了我们很久，到最后才发现，原来问题在反向代理上。下面就来回顾一下事情的经过。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;gitlab-页面加载不完整现象&#34;&gt;GitLab 页面加载不完整现象&lt;a class=&#34;headerlink&#34; href=&#34;#gitlab-页面加载不完整现象&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;某 GitLab 实例从某一天开始，用户就开始反馈页面经常刷不出来的问题。打开浏览器的 Developer Tools 查看 HTTP 请求，会发现出现报错 &lt;code&gt;ERR_CONTENT_LENGTH_MISMATCH&lt;/code&gt;（Chrome）或者 &lt;code&gt;NS_ERROR_NET_PARTIAL_TRANSFER&lt;/code&gt;（Firefox）。从名字来看，这个错误的意思是，浏览器只收到了 HTTP 响应的一部分，但是 HTTP 响应头部的 Content-Length 却比实际收到的内容要多，说明确实是没发全。用 Wireshark 抓包，可以看到是网站主动发的 FIN，也不像是 NAT 网关的问题。&lt;/p&gt;&lt;p&gt;这个问题困扰了用户和管理员很久，一直没有找到原因。做一些简单的测试，会发现下载是否完全和 HTTP 响应的内容大小有关，例如浏览一些大的 HTML，就容易被截断，并且截断以后的长度比较稳定地出现在几个数字之间：130304 和 130269，大概 130 KB。&lt;/p&gt;&lt;p&gt;在网上搜索关键词，可以找到这么一篇 &lt;a href=&#34;https://stackoverflow.com/questions/37908967/express-and-nginx-neterr-content-length-mismatch/46694782#46694782&#34;&gt;StackOverflow 回答&lt;/a&gt;：&lt;code&gt;Express and nginx net::ERR_CONTENT_LENGTH_MISMATCH&lt;/code&gt;，看起来和我们遇到的现象很类似。回答中提到，Nginx 有内建的 buffering 机制，关掉它就可以解决问题。但是这看起来太暴力了，不像是合理的解决办法，毕竟 buffering 机制是有用的。&lt;/p&gt;&lt;p&gt;从 &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffering&#34;&gt;Nginx 官网&lt;/a&gt;可以找到 buffering 机制的说明：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;When buffering is enabled, nginx receives a response from the proxied server as&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;soon as possible, saving it into the buffers set by the proxy_buffer_size and&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;proxy_buffers directives. If the whole response does not fit into memory, a part&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;of it can be saved to a temporary file on the disk. Writing to temporary files&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;is controlled by the proxy_max_temp_file_size and proxy_temp_file_write_size&lt;/span&gt;&lt;span id=&#34;__span-0-6&#34;&gt;&lt;a id=&#34;__codelineno-0-6&#34; name=&#34;__codelineno-0-6&#34; href=&#34;#__codelineno-0-6&#34;&gt;&lt;/a&gt;directives.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;翻译成中文，意思就是 Nginx 打开 buffering 机制后，会尽量快地从后端服务器读取响应。这很合理，因为一般后端服务器的资源比较宝贵，如果有很多个链接堵塞了，TCP 发送窗口满了，发不了新的数据，一直在等待客户端回复 ACK，这样就会维持很多 TCP 连接，影响服务器处理新连接的能力，这种累活应该还是由 Nginx 来干。但是问题来了：Nginx 从后端尽量快地读取响应，但浏览器并不一定能够很快地从 Nginx 读取响应，因为浏览器到 Nginx 的网络可能很慢。速率不匹配，那么 Nginx 肯定要实现一定的缓存，这就是 buffering 机制。&lt;/p&gt;&lt;p&gt;具体地，为了实现高效的 buffering 机制，很自然地回想到用内存做 buffer。但是内存容量也是相对有限的，内存放不下，自然就只能写到硬盘里面。那么问题来了，要是硬盘也满了，或者写入硬盘失败了，怎么办？一方面，还得赶紧从后端读取响应，让后端去做别的事情；另一方面，客户端在慢吞吞地收数据，硬盘又写不进去。这时候 Nginx 只能放弃挣扎，把连接断掉。于是客户端就看到了 HTTP 响应传了一半的情况。&lt;/p&gt;&lt;p&gt;这也就能解释之前观察到的一个现象：有的网页，走有线网能够完整打开，走无线网打开是不完整的。从 buffering 机制来解释，就是有线网能够在 buffer 满之前把数据都传完，而无线网来不及。&lt;/p&gt;&lt;h2 id=&#34;本地复现&#34;&gt;本地复现&lt;a class=&#34;headerlink&#34; href=&#34;#本地复现&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;理论理解了，下面来实践一下。我们用 docker compose 启动两个容器，一个容器 proxy 作为反向代理，运行一个 nginx；另一个容器 backend 作为后端，为了简单，也跑了个 nginx，服务一个简单的大 HTML 文件。后端用其他软件也是一样的，只要可以构建出足够大的 HTTP 响应（MB 量级）。&lt;/p&gt;&lt;p&gt;Docker compose 配置：&lt;/p&gt;&lt;div class=&#34;language-yaml highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nt&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;nginx:stable&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-5&#34;&gt;&lt;a id=&#34;__codelineno-1-5&#34; name=&#34;__codelineno-1-5&#34; href=&#34;#__codelineno-1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;127.0.0.1:8001:80&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-6&#34;&gt;&lt;a id=&#34;__codelineno-1-6&#34; name=&#34;__codelineno-1-6&#34; href=&#34;#__codelineno-1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-7&#34;&gt;&lt;a id=&#34;__codelineno-1-7&#34; name=&#34;__codelineno-1-7&#34; href=&#34;#__codelineno-1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;./backend.conf:/etc/nginx/conf.d/default.conf:ro&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-8&#34;&gt;&lt;a id=&#34;__codelineno-1-8&#34; name=&#34;__codelineno-1-8&#34; href=&#34;#__codelineno-1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;./backend:/web:ro&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-9&#34;&gt;&lt;a id=&#34;__codelineno-1-9&#34; name=&#34;__codelineno-1-9&#34; href=&#34;#__codelineno-1-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;proxy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-10&#34;&gt;&lt;a id=&#34;__codelineno-1-10&#34; name=&#34;__codelineno-1-10&#34; href=&#34;#__codelineno-1-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;nginx:stable&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-11&#34;&gt;&lt;a id=&#34;__codelineno-1-11&#34; name=&#34;__codelineno-1-11&#34; href=&#34;#__codelineno-1-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-12&#34;&gt;&lt;a id=&#34;__codelineno-1-12&#34; name=&#34;__codelineno-1-12&#34; href=&#34;#__codelineno-1-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;127.0.0.1:8002:80&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-13&#34;&gt;&lt;a id=&#34;__codelineno-1-13&#34; name=&#34;__codelineno-1-13&#34; href=&#34;#__codelineno-1-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-14&#34;&gt;&lt;a id=&#34;__codelineno-1-14&#34; name=&#34;__codelineno-1-14&#34; href=&#34;#__codelineno-1-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;./proxy.conf:/etc/nginx/conf.d/default.conf:ro&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后端 Nginx 配置：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;server {&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt; listen 80;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt; location / {&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt; root /web;&lt;/span&gt;&lt;span id=&#34;__span-2-5&#34;&gt;&lt;a id=&#34;__codelineno-2-5&#34; name=&#34;__codelineno-2-5&#34; href=&#34;#__codelineno-2-5&#34;&gt;&lt;/a&gt; }&lt;/span&gt;&lt;span id=&#34;__span-2-6&#34;&gt;&lt;a id=&#34;__codelineno-2-6&#34; name=&#34;__codelineno-2-6&#34; href=&#34;#__codelineno-2-6&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;反向代理 Nginx 配置：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;server {&lt;/span&gt;&lt;span id=&#34;__span-3-2&#34;&gt;&lt;a id=&#34;__codelineno-3-2&#34; name=&#34;__codelineno-3-2&#34; href=&#34;#__codelineno-3-2&#34;&gt;&lt;/a&gt; listen 80;&lt;/span&gt;&lt;span id=&#34;__span-3-3&#34;&gt;&lt;a id=&#34;__codelineno-3-3&#34; name=&#34;__codelineno-3-3&#34; href=&#34;#__codelineno-3-3&#34;&gt;&lt;/a&gt; location / {&lt;/span&gt;&lt;span id=&#34;__span-3-4&#34;&gt;&lt;a id=&#34;__codelineno-3-4&#34; name=&#34;__codelineno-3-4&#34; href=&#34;#__codelineno-3-4&#34;&gt;&lt;/a&gt; proxy_pass http://backend;&lt;/span&gt;&lt;span id=&#34;__span-3-5&#34;&gt;&lt;a id=&#34;__codelineno-3-5&#34; name=&#34;__codelineno-3-5&#34; href=&#34;#__codelineno-3-5&#34;&gt;&lt;/a&gt; }&lt;/span&gt;&lt;span id=&#34;__span-3-6&#34;&gt;&lt;a id=&#34;__codelineno-3-6&#34; name=&#34;__codelineno-3-6&#34; href=&#34;#__codelineno-3-6&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么对反代的访问，就能访问到后端上的 &lt;code&gt;index.html&lt;/code&gt; 了。在本地创建一个足够大的 &lt;code&gt;index.html&lt;/code&gt; 文件，确认下载都没有问题。&lt;/p&gt;&lt;p&gt;在搞破坏之前，可以先用 &lt;code&gt;inotifywait&lt;/code&gt; 工具来观察 Nginx 读写文件的行为：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;apt&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;update&lt;/span&gt;&lt;span id=&#34;__span-4-2&#34;&gt;&lt;a id=&#34;__codelineno-4-2&#34; name=&#34;__codelineno-4-2&#34; href=&#34;#__codelineno-4-2&#34;&gt;&lt;/a&gt;apt&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;install&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;inotify-tools&lt;/span&gt;&lt;span id=&#34;__span-4-3&#34;&gt;&lt;a id=&#34;__codelineno-4-3&#34; name=&#34;__codelineno-4-3&#34; href=&#34;#__codelineno-4-3&#34;&gt;&lt;/a&gt;docker&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-it&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nginx-partial-content-test-proxy-1&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/bin/bash&lt;/span&gt;&lt;span id=&#34;__span-4-4&#34;&gt;&lt;a id=&#34;__codelineno-4-4&#34; name=&#34;__codelineno-4-4&#34; href=&#34;#__codelineno-4-4&#34;&gt;&lt;/a&gt;inotifywait&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-r&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-m&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/var/cache/nginx&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用 ApacheBench 进行性能测试：&lt;code&gt;ab -n 10000 -c 10 http://localhost:8002/&lt;/code&gt;，可以看到 &lt;code&gt;inotifywait&lt;/code&gt; 显示 Nginx 进程对 &lt;code&gt;/var/cache/nginx/proxy_temp&lt;/code&gt; 目录下进行了大量的读写，这就是前面所述的 buffering 机制，用来保存文件的路径。&lt;/p&gt;&lt;p&gt;接下来修改权限，让 Nginx 无法读取该目录：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-5-1&#34;&gt;&lt;a id=&#34;__codelineno-5-1&#34; name=&#34;__codelineno-5-1&#34; href=&#34;#__codelineno-5-1&#34;&gt;&lt;/a&gt;docker&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-it&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nginx-partial-content-test-proxy-1&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/bin/bash&lt;/span&gt;&lt;span id=&#34;__span-5-2&#34;&gt;&lt;a id=&#34;__codelineno-5-2&#34; name=&#34;__codelineno-5-2&#34; href=&#34;#__codelineno-5-2&#34;&gt;&lt;/a&gt;chmod&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/var/cache/nginx/proxy_temp&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时再去跑 ApacheBench，会发现大部分请求都因为长度问题失败了：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-6-1&#34;&gt;&lt;a id=&#34;__codelineno-6-1&#34; name=&#34;__codelineno-6-1&#34; href=&#34;#__codelineno-6-1&#34;&gt;&lt;/a&gt;Concurrency Level: 10&lt;/span&gt;&lt;span id=&#34;__span-6-2&#34;&gt;&lt;a id=&#34;__codelineno-6-2&#34; name=&#34;__codelineno-6-2&#34; href=&#34;#__codelineno-6-2&#34;&gt;&lt;/a&gt;Time taken for tests: 5.707 seconds&lt;/span&gt;&lt;span id=&#34;__span-6-3&#34;&gt;&lt;a id=&#34;__codelineno-6-3&#34; name=&#34;__codelineno-6-3&#34; href=&#34;#__codelineno-6-3&#34;&gt;&lt;/a&gt;Complete requests: 10000&lt;/span&gt;&lt;span id=&#34;__span-6-4&#34;&gt;&lt;a id=&#34;__codelineno-6-4&#34; name=&#34;__codelineno-6-4&#34; href=&#34;#__codelineno-6-4&#34;&gt;&lt;/a&gt;Failed requests: 9999&lt;/span&gt;&lt;span id=&#34;__span-6-5&#34;&gt;&lt;a id=&#34;__codelineno-6-5&#34; name=&#34;__codelineno-6-5&#34; href=&#34;#__codelineno-6-5&#34;&gt;&lt;/a&gt; (Connect: 0, Receive: 0, Length: 9999, Exceptions: 0)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用 curl 也可以测试出类似的错误：&lt;code&gt;curl: (18) transfer closed with 455593 bytes remaining to read&lt;/code&gt;。此时 proxy 容器也会报错：&lt;code&gt;open() &#34;/var/cache/nginx/proxy_temp/7/63/0000014637&#34; failed (13: Permission denied) while reading upstream, client: 172.18.0.1, server: , request: &#34;GET / HTTP/1.1&#34;, upstream: &#34;http://172.18.0.3:80/&#34;, host: &#34;localhost:8002&#34;&lt;/code&gt;。用浏览器访问，也复现了之前在 GitLab 实例上看到的现象。恢复目录权限以后，一切都正常了。&lt;/p&gt;&lt;p&gt;这印证了之前的猜想：&lt;code&gt;proxy_temp&lt;/code&gt; 目录写不进去，就有概率出现 Partial Transfer 的情况。但是，此时下载的文件大小比较随机，不像之前那样集中在 130 KB。这时候就要思考 Partial Transfer 的原理了：客户端发起 HTTP 请求，proxy 容器收到请求，转发给 backend；backend 收到 HTTP 请求后，就给 proxy 发送 HTTP 响应。然后 proxy 容器一边从 backend 接收 HTTP 响应，另一边还要发给客户端。什么情况下会断开呢？就是内存里的 buffer 都用完了，backend 给 proxy 发送得快，proxy 给客户端发送得慢，速度的差，决定了内存里的 buffer 可以撑多久。&lt;/p&gt;&lt;p&gt;为了验证这个理论，手动给客户端到 proxy 容器的链路上添加一个延迟，这样就拖慢了 proxy 给客户端发送的速录。在 Linux 上，可以用 &lt;a href=&#34;https://medium.com/@kazushi/simulate-high-latency-network-using-docker-containerand-tc-commands-a3e503ea4307&#34;&gt;tc 给网络接口人为地添加延迟&lt;/a&gt;：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-7-1&#34;&gt;&lt;a id=&#34;__codelineno-7-1&#34; name=&#34;__codelineno-7-1&#34; href=&#34;#__codelineno-7-1&#34;&gt;&lt;/a&gt;tc&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;qdisc&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;add&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;dev&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;bridge_name&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;root&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;netem&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;delay&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;100ms&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;`bridge_name`` 是以 br- 开头的 bridge 网络接口名。此时用 ping 测量，从 proxy 容器访问 host 要 100 ms，proxy 容器访问 backend 容器要 0.02 ms。这就达成了不对称的目的。添加了延迟后，发现 curl 下载的文件大小稳定在 109312 字节附近，也就是 109 KB。虽然和前面的 130 KB 不相等，但是也足以证明了是类似的情况。这个大小，应该和 nginx 在内存中给每个链接维护的 buffer 大小有关，也和网络上传输的过程有关。&lt;/p&gt;&lt;p&gt;小结：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;因 nginx 容器上 proxy_temp 路径下无法写入文件（例如权限不正确、盘满了），nginx 的 buffering 机制在遇到内存中 buffer 用完的情况下，会截断 HTTP 响应；&lt;/li&gt;&lt;li&gt;根据客户端到 nginx，nginx 到后端的带宽和延迟情况，可能会截断到不同的位置。&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;权限问题&#34;&gt;权限问题&lt;a class=&#34;headerlink&#34; href=&#34;#权限问题&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;有意思的是，管理员表示之前并没有改过目录的权限。在网上查了一下，有网友反馈遇到了类似的问题：&lt;a href=&#34;https://forum.nginx.org/read.php?2,296793,296793#msg-296793&#34;&gt;Changing ownership of proxy_temp and other temp directories&lt;/a&gt;。网友表示，他升级 nginx 之前，proxy_temp 路径的权限是归 nobody 所有，nginx 也是用 nobody 用户运行的，所以没有问题。升级 nginx 以后，nginx 用单独的 nginx 用户去执行，此时它没有办法访问 nobody 用户创建的文件夹，因为权限是 &lt;code&gt;rwx------&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;如果深入观察邮件回复，会发现最终引到了一个 &lt;a href=&#34;https://github.com/vmware/photon/commit/abbfedfda7dfd7905d2953745cf1332fde80689c#diff-9a5cc4e7b91577cbccbb6aacc4bc2ee46672ccbe984b89581fc600b2877729f5&#34;&gt;GitHub commit&lt;/a&gt;，它在给 nginx 添加新功能的同时，修改了默认的 nginx 用户设置，使得默认用户变成了 nginx。从维护者的角度来看，把 nobody 换成 nginx 用户，应该不会有什么影响。却不知道 nginx 会用 nobody 用户创建 proxy_temp 等目录，并且设置了严格的权限。一升级，用户一变，nginx 自己就用不了了。于是就出现了问题。&lt;/p&gt;&lt;p&gt;在某 GitLab 实例的问题上，最后发现确实是权限问题。但是细节和上面的也不完全一样，具体权限怎么坏的，目前还是一个谜。&lt;/p&gt;</description><link>https://jia.je/software/2023/12/07/reverse-proxy-partial-transfer/</link> <pubDate>Thu, 07 Dec 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/12/07/reverse-proxy-partial-transfer/</guid> </item> <item> <title>包管理器打包命令速查</title> <category>linux</category> <category>packaging</category> <category>software</category> <description>&lt;h1 id=&#34;包管理器打包命令速查&#34;&gt;包管理器打包命令速查&lt;a class=&#34;headerlink&#34; href=&#34;#包管理器打包命令速查&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;随着 Linux 使用逐渐深入，开始尝试参与到一些发行版/包管理器的维护当中。在此记录一下打包相关命令，方便自己速查。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;aosc-os&#34;&gt;AOSC OS&lt;a class=&#34;headerlink&#34; href=&#34;#aosc-os&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;文档：&lt;a href=&#34;https://wiki.aosc.io/developer/packaging/basics/&#34;&gt;Intro to Package Maintenance: Basics&lt;/a&gt;&lt;/p&gt;&lt;p&gt;用 ciel 工具克隆软件源 + 在容器中构建。创建一个打包环境：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;ciel&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;new&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时目录下包括：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;TREE 目录：&lt;a href=&#34;https://github.com/AOSC-Dev/aosc-os-abbs&#34;&gt;AOSC-Dev/aosc-os-abbs&lt;/a&gt; 的克隆&lt;/li&gt;&lt;li&gt;OUTPUT-* 目录：放置打包出来的 deb&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;可以在 TREE 目录下进行包的更新等等操作。如果要构建包，假设在上一步创建打包环境时，名字设置为 main，用命令：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;ciel&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;build&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-i&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;packages&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;构建完成的 deb 会放到 &lt;code&gt;OUTPUT-[branch]&lt;/code&gt; 下，例如默认是 stable 分支的话，默认会放到 &lt;code&gt;OUTPUT-stable&lt;/code&gt; 下。&lt;/p&gt;&lt;p&gt;构建完成后，如果要提交到软件源，进入某个 OUTPUT 目录，用 &lt;code&gt;pushpkg&lt;/code&gt; 命令：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;pushpkg&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-d&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;user_name&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;branch&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-d&lt;/code&gt; 参数表示提交后删除本地的文件。&lt;/p&gt;&lt;p&gt;贡献流程：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;从 stable checkout 出新的分支&lt;/li&gt;&lt;li&gt;修改 TREE 里面的内容&lt;/li&gt;&lt;li&gt;用 &lt;code&gt;ciel build -i main [packages]&lt;/code&gt; 构建，可以用社区提供的 Buildbot&lt;/li&gt;&lt;li&gt;（可选）pushpkg 推到软件源&lt;/li&gt;&lt;li&gt;Push 到 GitHub 的分支，打开 pr&lt;/li&gt;&lt;li&gt;等待审核，审核通过后，合并并 pushpkg 到 stable&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;debian&#34;&gt;Debian&lt;a class=&#34;headerlink&#34; href=&#34;#debian&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我还没有成为 Debian 维护者，因此并不了解完整流程。&lt;/p&gt;&lt;p&gt;对于一个已有的包，用 &lt;code&gt;apt source&lt;/code&gt; 下载源码和 debian 的文件。很多包已经挪到了 salsa，也就是 debian 的 gitlab 实例上，如果有，&lt;code&gt;apt source&lt;/code&gt; 会提示你可以直接从 salsa 上克隆仓库。&lt;/p&gt;&lt;p&gt;下载了以后，得到的是一份源码，外加 &lt;code&gt;debian&lt;/code&gt; 目录。里面比较重要的是 &lt;code&gt;debian/control&lt;/code&gt;（记录了包的元数据）和 &lt;code&gt;debian/rules&lt;/code&gt;（如何构建）。&lt;/p&gt;&lt;p&gt;为了构建包，简单的办法是用 &lt;code&gt;dpkg-buildpackage&lt;/code&gt; 命令。常用参数：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;-b&lt;/code&gt;：只构建二进制包&lt;/li&gt;&lt;li&gt;&lt;code&gt;-us -uc&lt;/code&gt;：没有配置 GPG，没法签名，自用的时候选择不签名&lt;/li&gt;&lt;li&gt;&lt;code&gt;-nc&lt;/code&gt;：构建前不 clean&lt;/li&gt;&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;：即使依赖不能满足，也要构建&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;此外，还可以设置环境变量：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;DEB_BUILD_PROFILES&lt;/code&gt;：设置 profile，常见的有 nocheck nodoc 等等，和 debian/control 文件里的 &lt;code&gt;&amp;lt;profile&amp;gt;&lt;/code&gt; 对应&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.debian.org/doc/debian-policy/ch-source.html#debian-rules-and-deb-build-options&#34;&gt;&lt;code&gt;DEB_BUILD_OPTIONS&lt;/code&gt;&lt;/a&gt;：和 profile 类似，但是用法略有不同，常见的有 nocheck nodoc noopt nostrip 等等&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;对于&lt;a href=&#34;https://wiki.debian.org/PackagingWithGit&#34;&gt;基于 git 的包&lt;/a&gt;，例如从 salsa 上 clone 的包，可以用 gbp 工具：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;gbp buildpackage&lt;/code&gt;：功能对应 dpkg-buildpackage。&lt;/li&gt;&lt;li&gt;&lt;code&gt;gbp import-orig&lt;/code&gt;：导入一个上游源码的 tarball 到仓库中，可以添加 &lt;code&gt;--uscan&lt;/code&gt; 参数让它自动检测并下载新版；可以添加 &lt;code&gt;--pristine-tar&lt;/code&gt; 参数让它保留一份原始 tarball（的 delta）。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;dpkg-buildpackage 默认会在当前环境下构建新包，因此如果缺了依赖，就需要全局安装。如果不想这样，可以配置 sbuild，在 chroot 中进行构建。&lt;/p&gt;&lt;p&gt;配置 &lt;a href=&#34;https://wiki.debian.org/sbuild&#34;&gt;sbuild&lt;/a&gt; 的简单办法是用 &lt;a href=&#34;https://manpages.debian.org/unstable/sbuild/sbuild-debian-developer-setup.1&#34;&gt;sbuild-debian-developer-setup&lt;/a&gt; 命令。它会在 &lt;code&gt;/srv/chroot&lt;/code&gt; 下创建一个用于容器的 sysroot，里面是一个干净的 debian 环境。之后，可以用 sbuild 命令，在容器里面构建。&lt;/p&gt;&lt;h2 id=&#34;nixpkgs&#34;&gt;Nixpkgs&lt;a class=&#34;headerlink&#34; href=&#34;#nixpkgs&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Nixpkgs 打包过程比较简单：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;修改 Nixpkgs 仓库&lt;/li&gt;&lt;li&gt;用 nix 命令构建新包：&lt;code&gt;nix build -L .#package&lt;/code&gt;&lt;/li&gt;&lt;li&gt;（可选）用 nixpkgs-review 构建所有需要重新构建的包&lt;/li&gt;&lt;li&gt;Push 到 GitHub，创建 PR&lt;/li&gt;&lt;li&gt;等待审核和合并&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Homebrew 也是类似的。&lt;/p&gt;</description><link>https://jia.je/software/2023/12/05/packaging-cookbook/</link> <pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/12/05/packaging-cookbook/</guid> </item> <item> <title>mkdocs-material 的 Instant Navigation 功能坑点</title> <category>instant</category> <category>markdown</category> <category>mkdocs</category> <category>mkdocsmaterial</category> <category>software</category> <category>spa</category> <description>&lt;h1 id=&#34;mkdocs-material-的-instant-navigation-功能坑点&#34;&gt;mkdocs-material 的 Instant Navigation 功能坑点&lt;a class=&#34;headerlink&#34; href=&#34;#mkdocs-material-的-instant-navigation-功能坑点&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;mkdocs-material 支持 &lt;a href=&#34;https://squidfunk.github.io/mkdocs-material/setup/setting-up-navigation/#instant-loading&#34;&gt;Instant Navigation&lt;/a&gt;：启用了以后，在网页里点击其他页面的时候，它会用类似 SPA 的方法，去 fetch 新的网页，然后原地替换，而不是让浏览器跳转过去，可以提升用户体验。&lt;/p&gt;&lt;p&gt;但是在用这个功能的时候，会发现其实并不是那么简单。。。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;sitemap&#34;&gt;Sitemap&lt;a class=&#34;headerlink&#34; href=&#34;#sitemap&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用 Instant Navigation 遇到的第一个问题是：本地 &lt;code&gt;mkdocs serve&lt;/code&gt; 的时候可以工作，而线上 &lt;code&gt;mkdocs build&lt;/code&gt; 再用 nginx 部署的时候，就不工作了，这是为啥呢？&lt;/p&gt;&lt;p&gt;阅读 &lt;a href=&#34;https://github.com/squidfunk/mkdocs-material/blob/bf6e66bddd6cc94ab4fd9becf9fb9d9a2d33f6e2/src/templates/assets/javascripts/integrations/instant/index.ts&#34;&gt;instant/index.ts&lt;/a&gt; 源代码，发现它会检查点击的链接是否在 sitemap 中出现：&lt;/p&gt;&lt;div class=&#34;language-typescript highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Skip, if URL is not included in the sitemap - this could be the case&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// when linking between versions or languages, or to another page that&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// the author included as part of the build, but that is not managed by&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// MkDocs. In that case we must not continue with instant navigation.&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sitemap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;includes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-6&#34;&gt;&lt;a id=&#34;__codelineno-0-6&#34; name=&#34;__codelineno-0-6&#34; href=&#34;#__codelineno-0-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;EMPTY&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是观察了一下生成的 &lt;code&gt;site&lt;/code&gt; 目录，发现下面的 sitemap.xml 是空的。查了一下，发现需要配置 &lt;code&gt;site_url&lt;/code&gt; 才会生成 sitemap.xml 的内容。这也可以理解，毕竟 sitemap.xml 里面写得是绝对 URL。&lt;/p&gt;&lt;p&gt;添加 &lt;code&gt;site_url&lt;/code&gt; 以后，终于生成了 sitemap，但是 instant navigation 依然不工作：用 Chrome Developer Tools 调试，发现代码读取出来的 sitemap 依然为空。阅读&lt;a href=&#34;https://github.com/squidfunk/mkdocs-material/blob/bf6e66bddd6cc94ab4fd9becf9fb9d9a2d33f6e2/src/templates/assets/javascripts/integrations/sitemap/index.ts#L91&#34;&gt;代码&lt;/a&gt;，发现：&lt;/p&gt;&lt;div class=&#34;language-typescript highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cached&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;__md_get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sitemap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;__sitemap&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sessionStorage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cached&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cached&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-5&#34;&gt;&lt;a id=&#34;__codelineno-1-5&#34; name=&#34;__codelineno-1-5&#34; href=&#34;#__codelineno-1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;configuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-6&#34;&gt;&lt;a id=&#34;__codelineno-1-6&#34; name=&#34;__codelineno-1-6&#34; href=&#34;#__codelineno-1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;requestXML&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ow&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;sitemap.xml&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-7&#34;&gt;&lt;a id=&#34;__codelineno-1-7&#34; name=&#34;__codelineno-1-7&#34; href=&#34;#__codelineno-1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-8&#34;&gt;&lt;a id=&#34;__codelineno-1-8&#34; name=&#34;__codelineno-1-8&#34; href=&#34;#__codelineno-1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sitemap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;preprocess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElements&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;loc&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sitemap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-9&#34;&gt;&lt;a id=&#34;__codelineno-1-9&#34; name=&#34;__codelineno-1-9&#34; href=&#34;#__codelineno-1-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-10&#34;&gt;&lt;a id=&#34;__codelineno-1-10&#34; name=&#34;__codelineno-1-10&#34; href=&#34;#__codelineno-1-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-11&#34;&gt;&lt;a id=&#34;__codelineno-1-11&#34; name=&#34;__codelineno-1-11&#34; href=&#34;#__codelineno-1-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;catchError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;EMPTY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// @todo refactor instant loading&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-12&#34;&gt;&lt;a id=&#34;__codelineno-1-12&#34; name=&#34;__codelineno-1-12&#34; href=&#34;#__codelineno-1-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;defaultIfEmpty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]),&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-13&#34;&gt;&lt;a id=&#34;__codelineno-1-13&#34; name=&#34;__codelineno-1-13&#34; href=&#34;#__codelineno-1-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sitemap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;__md_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;__sitemap&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sitemap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sessionStorage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-14&#34;&gt;&lt;a id=&#34;__codelineno-1-14&#34; name=&#34;__codelineno-1-14&#34; href=&#34;#__codelineno-1-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-15&#34;&gt;&lt;a id=&#34;__codelineno-1-15&#34; name=&#34;__codelineno-1-15&#34; href=&#34;#__codelineno-1-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码里缓存了 sitemap 的内容到 session storage 中，进入 developer tools，从 session storage 中删掉 sitemap，就可以发现它能获取到正确的 sitemap，instant navigation 也工作了。&lt;/p&gt;&lt;h2 id=&#34;wavedrom&#34;&gt;Wavedrom&lt;a class=&#34;headerlink&#34; href=&#34;#wavedrom&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Instant Navigation 虽然工作了，但是点击用了 WaveDrom 的网页后，会发现里面的 WaveDrom 代码没有被渲染出来，并且 Developer Tools 会报错。&lt;/p&gt;&lt;p&gt;阅读代码，发现 Instant Navigation 会重新运行新页面上内嵌的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签，然而 WaveDrom 也正好会使用 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签来写它的 WaveJSON 配置，只不过是 &lt;code&gt;&amp;lt;script type=&#34;WaveDrom&#34;&amp;gt;&lt;/code&gt;，所以不会被浏览器执行。&lt;/p&gt;&lt;p&gt;然而 Instant Navigation 重新运行的时候，&lt;a href=&#34;https://github.com/squidfunk/mkdocs-material/blob/bf6e66bddd6cc94ab4fd9becf9fb9d9a2d33f6e2/src/templates/assets/javascripts/integrations/instant/index.ts#L355-L357&#34;&gt;没有考虑到这种情况&lt;/a&gt;：&lt;/p&gt;&lt;div class=&#34;language-typescript highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;script&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;replaceWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它创建了一个新的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag，从旧的复制了 textContent，但是没有复制 type。因此浏览器会把内容当成 JavaScript 去执行，自然就失败了。&lt;/p&gt;&lt;p&gt;这时候怎么办呢？可以有以下几种解决办法：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;修改 mkdocs-material 代码，让它把 type 字段也继承下来&lt;/li&gt;&lt;li&gt;让 wavedrom 用其他 tag，因为 wavedrom 只会检查 type 是否等于 wavedrom，不会检查是什么 tag&lt;/li&gt;&lt;li&gt;提前渲染 wavedrom 到 svg，直接内嵌 svg&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;最后在自己 fork 的 &lt;a href=&#34;https://github.com/jiegec/mkdocs-wavedrom-plugin&#34;&gt;mkdocs-wavedrom-plugin&lt;/a&gt; 中用了第三种方法。如果读者有兴趣，可以给 mkdocs-material 提交 pr。&lt;/p&gt;&lt;p&gt;此外，前两种方法还需要修改 WaveDrom.ProcessAll 的调用方法：模仿 mkdocs-material 的 MathJax 渲染方法，去调用 &lt;code&gt;document$.subscribe&lt;/code&gt;：&lt;/p&gt;&lt;div class=&#34;language-javascript highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-2&#34;&gt;&lt;a id=&#34;__codelineno-3-2&#34; name=&#34;__codelineno-3-2&#34; href=&#34;#__codelineno-3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WaveDrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ProcessAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-3&#34;&gt;&lt;a id=&#34;__codelineno-3-3&#34; name=&#34;__codelineno-3-3&#34; href=&#34;#__codelineno-3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样 Instant Navigation 在“重新加载”页面的时候，才会重新调用 &lt;code&gt;WaveDrom.ProcessAll&lt;/code&gt;。&lt;/p&gt;&lt;h2 id=&#34;math&#34;&gt;Math&lt;a class=&#34;headerlink&#34; href=&#34;#math&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;和 WaveDrom 类似，Arithmatex 扩展默认情况下，也会给数学公式生成 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag，只不过这次是 &lt;a href=&#34;https://github.com/facelessuser/pymdown-extensions/blob/main/docs/src/markdown/extensions/arithmatex.md#mathjax-output-format&#34;&gt;MathJax 的旧格式&lt;/a&gt;：&lt;/p&gt;&lt;div class=&#34;language-html highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;math/tex&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-2&#34;&gt;&lt;a id=&#34;__codelineno-4-2&#34; name=&#34;__codelineno-4-2&#34; href=&#34;#__codelineno-4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1234&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-3&#34;&gt;&lt;a id=&#34;__codelineno-4-3&#34; name=&#34;__codelineno-4-3&#34; href=&#34;#__codelineno-4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个问题的解决办法在比较新的 mkdocs-material 文档里已经&lt;a href=&#34;https://squidfunk.github.io/mkdocs-material/setup/extensions/python-markdown-extensions/#arithmatex&#34;&gt;给出&lt;/a&gt;：&lt;/p&gt;&lt;div class=&#34;language-yaml highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-5-1&#34;&gt;&lt;a id=&#34;__codelineno-5-1&#34; name=&#34;__codelineno-5-1&#34; href=&#34;#__codelineno-5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# in mkdocs.yaml&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-2&#34;&gt;&lt;a id=&#34;__codelineno-5-2&#34; name=&#34;__codelineno-5-2&#34; href=&#34;#__codelineno-5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nt&#34;&gt;markdown_extensions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-3&#34;&gt;&lt;a id=&#34;__codelineno-5-3&#34; name=&#34;__codelineno-5-3&#34; href=&#34;#__codelineno-5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pymdownx.arithmatex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-4&#34;&gt;&lt;a id=&#34;__codelineno-5-4&#34; name=&#34;__codelineno-5-4&#34; href=&#34;#__codelineno-5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;generic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-5&#34;&gt;&lt;a id=&#34;__codelineno-5-5&#34; name=&#34;__codelineno-5-5&#34; href=&#34;#__codelineno-5-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-6&#34;&gt;&lt;a id=&#34;__codelineno-5-6&#34; name=&#34;__codelineno-5-6&#34; href=&#34;#__codelineno-5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nt&#34;&gt;extra_javascript&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-7&#34;&gt;&lt;a id=&#34;__codelineno-5-7&#34; name=&#34;__codelineno-5-7&#34; href=&#34;#__codelineno-5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;javascripts/mathjax.js&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-8&#34;&gt;&lt;a id=&#34;__codelineno-5-8&#34; name=&#34;__codelineno-5-8&#34; href=&#34;#__codelineno-5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;https://polyfill.io/v3/polyfill.min.js?features=es6&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-9&#34;&gt;&lt;a id=&#34;__codelineno-5-9&#34; name=&#34;__codelineno-5-9&#34; href=&#34;#__codelineno-5-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;language-javascript highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-6-1&#34;&gt;&lt;a id=&#34;__codelineno-6-1&#34; name=&#34;__codelineno-6-1&#34; href=&#34;#__codelineno-6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;// in docs/javascripts/mathjax.js&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-2&#34;&gt;&lt;a id=&#34;__codelineno-6-2&#34; name=&#34;__codelineno-6-2&#34; href=&#34;#__codelineno-6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MathJax&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-3&#34;&gt;&lt;a id=&#34;__codelineno-6-3&#34; name=&#34;__codelineno-6-3&#34; href=&#34;#__codelineno-6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-4&#34;&gt;&lt;a id=&#34;__codelineno-6-4&#34; name=&#34;__codelineno-6-4&#34; href=&#34;#__codelineno-6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;inlineMath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;\\(&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;\\)&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-5&#34;&gt;&lt;a id=&#34;__codelineno-6-5&#34; name=&#34;__codelineno-6-5&#34; href=&#34;#__codelineno-6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayMath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;\\[&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;\\]&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-6&#34;&gt;&lt;a id=&#34;__codelineno-6-6&#34; name=&#34;__codelineno-6-6&#34; href=&#34;#__codelineno-6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;processEscapes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-7&#34;&gt;&lt;a id=&#34;__codelineno-6-7&#34; name=&#34;__codelineno-6-7&#34; href=&#34;#__codelineno-6-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;processEnvironments&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-8&#34;&gt;&lt;a id=&#34;__codelineno-6-8&#34; name=&#34;__codelineno-6-8&#34; href=&#34;#__codelineno-6-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-9&#34;&gt;&lt;a id=&#34;__codelineno-6-9&#34; name=&#34;__codelineno-6-9&#34; href=&#34;#__codelineno-6-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-10&#34;&gt;&lt;a id=&#34;__codelineno-6-10&#34; name=&#34;__codelineno-6-10&#34; href=&#34;#__codelineno-6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ignoreHtmlClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;.*|&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-11&#34;&gt;&lt;a id=&#34;__codelineno-6-11&#34; name=&#34;__codelineno-6-11&#34; href=&#34;#__codelineno-6-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;processHtmlClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;arithmatex&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-12&#34;&gt;&lt;a id=&#34;__codelineno-6-12&#34; name=&#34;__codelineno-6-12&#34; href=&#34;#__codelineno-6-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-13&#34;&gt;&lt;a id=&#34;__codelineno-6-13&#34; name=&#34;__codelineno-6-13&#34; href=&#34;#__codelineno-6-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-14&#34;&gt;&lt;a id=&#34;__codelineno-6-14&#34; name=&#34;__codelineno-6-14&#34; href=&#34;#__codelineno-6-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-15&#34;&gt;&lt;a id=&#34;__codelineno-6-15&#34; name=&#34;__codelineno-6-15&#34; href=&#34;#__codelineno-6-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-16&#34;&gt;&lt;a id=&#34;__codelineno-6-16&#34; name=&#34;__codelineno-6-16&#34; href=&#34;#__codelineno-6-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MathJax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;typesetPromise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-17&#34;&gt;&lt;a id=&#34;__codelineno-6-17&#34; name=&#34;__codelineno-6-17&#34; href=&#34;#__codelineno-6-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意到熟悉的 &lt;code&gt;document$&lt;/code&gt;，这也是它可以在 Instant Navigation 下正常工作的原因。&lt;/p&gt;&lt;h2 id=&#34;小结&#34;&gt;小结&lt;a class=&#34;headerlink&#34; href=&#34;#小结&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;因此，为了让 mkdocs-material 的 Instant Navigation 功能工作，你需要保证：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;设置 site_url，保证 sitemap 正常生成&lt;/li&gt;&lt;li&gt;保证代码中不会出现非 javascript 的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag，如 wavedrom 和 math/tex&lt;/li&gt;&lt;li&gt;如果涉及到需要用 javascript 动态渲染的内容，需要在 &lt;code&gt;document$&lt;/code&gt; 上注册回调以重新渲染新页面&lt;/li&gt;&lt;/ol&gt;</description><link>https://jia.je/software/2023/11/26/mkdocs-material-instant-navigation/</link> <pubDate>Sun, 26 Nov 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/11/26/mkdocs-material-instant-navigation/</guid> </item> </channel></rss>