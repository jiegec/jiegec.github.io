<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>杰哥的{运维，编程，调板子}小笔记</title><description>杰哥的{运维，编程，调板子}小笔记</description><link>https://jia.je/</link><atom:link href="https://jia.je/feed_rss_created.xml" rel="self" type="application/rss+xml" /><language>en-None</language> <pubDate>Mon, 25 Sep 2023 10:14:08 -0000</pubDate> <lastBuildDate>Mon, 25 Sep 2023 10:14:08 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.8.0</generator> <item> <title>Podman 和 Docker Rootless 实践</title> <category>docker</category> <category>podman</category> <category>rootless</category> <category>software</category> <description>&lt;h1&gt;Podman 和 Docker Rootless 实践&lt;/h1&gt;&lt;p&gt;最近在配置公用机器的环境，需求是很多用户需要使用 docker，但是众所周知，有 docker 权限就等于有了 root 权限，因此正好想尝试一下现在的 Rootless 容器化方案，例如 docket rootless 和 podman。&lt;/p&gt;</description><link>https://jia.je/software/2023/09/25/docker-rootless/</link> <pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/09/25/docker-rootless/</guid> </item> <item> <title>在 QEMU 中运行 OpenBMC</title> <category>bmc</category> <category>openbmc</category> <category>qemu</category> <category>system</category> <description>&lt;h1&gt;在 QEMU 中运行 OpenBMC&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;最近想给某台机器配一个 BMC，于是调研 OpenBMC 发行版，但是还没有找到可以买到的合适的 BMC，因此先在虚拟机中进行尝试。&lt;/p&gt;</description><link>https://jia.je/system/2023/08/11/openbmc-qemu/</link> <pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/system/2023/08/11/openbmc-qemu/</guid> </item> <item> <title>组装一台采用龙芯 3A6000 CPU 的主机</title> <category>cpu</category> <category>diy</category> <category>hardware</category> <category>loongarch</category> <category>loongson</category> <category>ls3a6000</category> <category>machine</category> <description>&lt;h1&gt;组装一台采用龙芯 3A6000 CPU 的主机&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;最近买到了龙芯 3A6000 以及配套主板，在此记录我组装台式机的过程，以及在其上的体验。&lt;/p&gt;</description><link>https://jia.je/hardware/2023/08/10/diy-ls3a6000-machine/</link> <pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2023/08/10/diy-ls3a6000-machine/</guid> </item> <item> <title>LoongArch 处理器</title> <category>cpu</category> <category>hardware</category> <category>loongarch</category> <category>loongson</category> <description>&lt;h1&gt;LoongArch 处理器&lt;/h1&gt;&lt;p&gt;整理市面上的 LoongArch 处理器以及相关产品。&lt;/p&gt;</description><link>https://jia.je/hardware/2023/08/10/loongarch-cpu/</link> <pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2023/08/10/loongarch-cpu/</guid> </item> <item> <title>普通高校招生录取流程</title> <category>admission</category> <category>gaokao</category> <category>others</category> <description>&lt;h1&gt;普通高校招生录取流程&lt;/h1&gt;&lt;p&gt;本文是本人对普通高校招生录取流程的整理，可能有误，欢迎指出。文中不涉及一些省份的特殊情况。&lt;/p&gt;</description><link>https://jia.je/others/2023/08/06/college-admission/</link> <pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/others/2023/08/06/college-admission/</guid> </item> <item> <title>SPEC CPU 2006 性能测试</title> <category>benchmark</category> <category>software</category> <category>spec</category> <description>&lt;h1&gt;SPEC CPU 2006 性能测试&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;最近在网上看到龙芯 3A6000 的 SPEC CPU 2006 性能评测数据，想着自己也可以在手上的一些平台上测一测，把测试的过程记录在本文。&lt;/p&gt;</description><link>https://jia.je/software/2023/08/02/spec-cpu-2006/</link> <pubDate>Wed, 02 Aug 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/08/02/spec-cpu-2006/</guid> </item> <item> <title>LK-99 相关链接</title> <category>lk99</category> <category>others</category> <description>&lt;h1&gt;LK-99 相关链接&lt;/h1&gt;&lt;p&gt;收录自己找到的一些和 LK-99 相关的信息，非专业人士，看个热闹。&lt;/p&gt;</description><link>https://jia.je/others/2023/08/01/lk99/</link> <pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/others/2023/08/01/lk99/</guid> </item> <item> <title>记录一次 CentOS AArch64 7 到 8 的升级</title> <category>aarch64</category> <category>centos</category> <category>devops</category> <description>&lt;h1&gt;记录一次 CentOS AArch64 7 到 8 的升级&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;有一台 AArch64 机器安装了 CentOS 7，想要升级到 CentOS 8，这篇博客主要讲讲折腾的整个过程，而不是教程：如果真要说，就是不要升级 CentOS 大版本，直接重装吧。如果真的想折腾，可以看看下面的内容。&lt;/p&gt;</description><link>https://jia.je/devops/2023/07/31/upgrade-centos-aarch64-7-to-8/</link> <pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/devops/2023/07/31/upgrade-centos-aarch64-7-to-8/</guid> </item> <item> <title>VFIO - Virtual Function I/O</title> <category>driver</category> <category>linux</category> <category>pcie</category> <category>software</category> <category>vfio</category> <description>&lt;h1&gt;VFIO - Virtual Function I/O&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;VFIO 是 Linux 内核中的一个功能，目的是把 PCIe 设备暴露给用户态的程序，进而可以暴露给虚拟机内的系统，也就是常说的虚拟机 PCIe 直通。为了保证安全性，VFIO 还会配置好 IOMMU，保证用户态程序无法利用设备的 DMA 访问到其他地址空间的数据。&lt;/p&gt;&lt;p&gt;本文探讨 VFIO 暴露的用户态 API 以及如何在用户态中使用 VFIO 直接控制 PCIe 设备。&lt;/p&gt;</description><link>https://jia.je/software/2023/07/24/vfio/</link> <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/07/24/vfio/</guid> </item> <item> <title>Montgomery 模乘</title> <category>crypto</category> <category>crypto</category> <category>montgomery</category> <category>mulmod</category> <description>&lt;h1&gt;Montgomery 模乘&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;在密码学中，经常会涉及到模乘操作：$a * b \bmod N$。朴素的实现方法是，先求出 $a * b$，再对 N 进行除法，那么余数就是模乘的结果。&lt;/p&gt;&lt;p&gt;但由于此时的 $a$ $b$ $N$ 三个数都很大，在计算机上需要用大整数来表示，而大整数的乘法和除法都是需要耗比较多的时间的。如果用 Schönhage–Strassen 算法，计算两个 $n$ 位大整数的乘法需要的时间是 $O(n \log(n) \log(\log(n)))$。&lt;/p&gt;&lt;h2&gt;定义&lt;/h2&gt;&lt;p&gt;Montgomery 模乘是一种提高模乘的性能的方法。具体地，Montgomery 模乘需要一个参数 $R$ 满足 $R$ 和 $N$ 互质，且 $R &amp;gt; N$，那么 Montgomery 模乘实现的是如下计算：&lt;/p&gt;&lt;p&gt;$$M(a, b) = a * b * R^{-1} \bmod N$$&lt;/p&gt;</description><link>https://jia.je/crypto/2023/07/23/montgomery-mul-mod/</link> <pubDate>Sun, 23 Jul 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/crypto/2023/07/23/montgomery-mul-mod/</guid> </item> <item> <title>libc++ 的 uniform_int_distribution 性能问题</title> <category>cpp</category> <category>programming</category> <category>random</category> <category>sampling</category> <category>stl</category> <description>&lt;h1&gt;libc++ 的 uniform_int_distribution 性能问题&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;前段时间，@lwpie 发现一段 C++ 代码在 macOS 下，分别用自带的 Clang 编译和用 Homebrew 的 GCC 编译，性能差距接近一个数量级，下面是运行时间：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;GCC-13 Homebrew: 300&lt;/li&gt;&lt;li&gt;Apple Clang: 2170&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/programming/2023/07/22/uniform-int-distribution-performance/</link> <pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/programming/2023/07/22/uniform-int-distribution-performance/</guid> </item> <item> <title>写一个 bash zsh 和 fish 都能跑的脚本</title> <category>bash</category> <category>fish</category> <category>programming</category> <category>shell</category> <category>zsh</category> <description>&lt;h1&gt;写一个 bash zsh 和 fish 都能跑的脚本&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;bash 和 zsh 都实现了 POSIX shell 标准，因此写脚本的时候，比较容易兼容这两种常见的 shell。但现在 fish 也很流行，而 fish 不符合 POSIX shell 标准，很多地方语法多不兼容，能否写一个脚本，可以用 bash，zsh 和 fish 跑？&lt;/p&gt;&lt;p&gt;```shell&lt;/p&gt;&lt;h1&gt;The following commands should work&lt;/h1&gt;&lt;p&gt;bash test.shzsh test.shfish test.sh```&lt;/p&gt;</description><link>https://jia.je/programming/2023/07/18/portable-script-across-bash-zsh-fish/</link> <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/programming/2023/07/18/portable-script-across-bash-zsh-fish/</guid> </item> <item> <title>把博客生成器从 Hugo 迁移到 Mkdocs</title> <category>meta</category> <category>site</category> <description>&lt;h1&gt;把博客生成器从 Hugo 迁移到 Mkdocs&lt;/h1&gt;&lt;p&gt;距离上一次 &lt;a href=&#34;migrate-from-jekyll-to-hugo.md&#34;&gt;Jekyll 迁移到 Hugo&lt;/a&gt; 已经过去了四年，这次正好 mkdocs-material 发了新的 beta 版本，加入了对博客的支持，所以就当小白鼠，把博客迁移到了 Mkdocs + Mkdocs-Material。&lt;/p&gt;&lt;p&gt;这次迁移比较顺利，除了 tag 和 category 少了一些页面以外，原来的文章的链接都是正常的。为什么要迁移呢，主要是最近写各种文档，Mkdocs 用的比较多，但是 Mkdocs 的 Markdown 很多地方和 Hugo 不太一样，下面列一些最难以忍受的 Hugo 的问题：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;数学公式：Hugo 的 &lt;code&gt;\&lt;/code&gt; 需要转义，导致很多地方写数学公式都很麻烦，然后因为我经常要在 Hugo 和 Mkdocs 之间复制 Markdown，此时就需要很多手动工作。&lt;/li&gt;&lt;li&gt;资源路径：Hugo 的资源路径默认都是绝对路径，要引用其他文章的话，要么用啰嗦的 relref，要么就写绝对路径，比较头疼。Mkdocs 就很好，自动检测，帮我计算出实际的地址。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;迁移的时候有很多细节上的不同，不过基本靠 VSCode 的正则表达式替换解决了。&lt;/p&gt;&lt;p&gt;不过，Mkdocs 又出现了 Jekyll 的老问题，就是性能比较差。当然了，不一定是 Mkdocs 本身的问题，也可能是 Mkdocs-Material 加各种插件的问题，目前还有待观察。无论如何，Python 调起来总归是比 Ruby 要容易。希望不要在未来的某一天，由从 Mkdocs 迁移回 Hugo。&lt;/p&gt;</description><link>https://jia.je/meta/2023/07/15/migrate-from-hugo-to-mkdocs/</link> <pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/meta/2023/07/15/migrate-from-hugo-to-mkdocs/</guid> </item> <item> <title>ECDSA</title> <category>crypto</category> <category>crypto</category> <category>ecc</category> <category>ecdsa</category> <description>&lt;h1&gt;ECDSA&lt;/h1&gt;&lt;p&gt;ECDSA 是一个基于椭圆曲线的签名算法，使用时需要确定一个椭圆曲线，以及它的 base point $G$，且 $G$ 的阶是素数 $n$。ECDSA 支持如下的操作：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;生成签名&lt;/li&gt;&lt;li&gt;验证签名&lt;/li&gt;&lt;li&gt;从签名和明文推导出公钥&lt;/li&gt;&lt;/ol&gt;</description><link>https://jia.je/crypto/2023/07/14/ecdsa/</link> <pubDate>Fri, 14 Jul 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/crypto/2023/07/14/ecdsa/</guid> </item> <item> <title>在 Apple M1 上试用 Gentoo/Prefix</title> <category>devops</category> <category>gentoo</category> <category>gentoo-prefix</category> <category>m1</category> <category>macos</category> <description>&lt;h1&gt;在 Apple M1 上试用 Gentoo/Prefix&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;上一次折腾 Gentoo/Prefix 是&lt;a href=&#34;try-gentoo-prefix-on-macOS.md&#34;&gt;五年多以前&lt;/a&gt;，当时还是用的 Intel Mac，最近需要探索一下在现在的 macOS 系统上用 Gentoo/Prefix 会遇到哪些问题，因此今天在 Apple M1 上重新尝试一次。&lt;/p&gt;</description><link>https://jia.je/devops/2023/07/08/gentoo-prefix-m1/</link> <pubDate>Sat, 08 Jul 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/devops/2023/07/08/gentoo-prefix-m1/</guid> </item> <item> <title>生成树协议</title> <category>mstp</category> <category>networking</category> <category>pvst</category> <category>rstp</category> <category>stp</category> <category>vbst</category> <description>&lt;h1&gt;生成树协议&lt;/h1&gt;&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;/kb/networking/spanning_tree_protocol.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;&lt;h2&gt;Spanning Tree Protocol&lt;/h2&gt;&lt;p&gt;STP（Spanning Tree Protocol）可以在 &lt;a href=&#34;https://ieeexplore.ieee.org/document/1389253&#34;&gt;802.1D-1998&lt;/a&gt; 第 8 章中找到。STP 协议工作在交换机上，需要根据交换机连接的拓扑，自动计算出一个生成树，并且把不在生成树上的边禁用，这样即使连接的拓扑有环路，禁用以后就没有环了。有了 STP 以后，连接交换机的时候就可以刻意连成环，从而提供冗余。&lt;/p&gt;</description><link>https://jia.je/networking/2023/06/20/spanning-tree-protocol/</link> <pubDate>Tue, 20 Jun 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/networking/2023/06/20/spanning-tree-protocol/</guid> </item> <item> <title>从 libvirtd 迁移到 Proxmox VE</title> <category>libvirtd</category> <category>proxmoxve</category> <category>pve</category> <category>qemu</category> <category>software</category> <description>&lt;h1&gt;从 libvirtd 迁移到 Proxmox VE&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;之前用 libvirtd + virt-manager 做 Linux 上的虚拟化，好处是比较轻量级，但是远程控制起来比较麻烦，要么通过 RDP 访问 virt-manager 的 UI，要么就用 cockpit 在网页里去配置虚拟机。此时就会比较怀念 VMware ESXi 的网页，但是 ESXi 装完以后，宿主机就很不自由了，很多东西没法自定义。最后就想到在 Debian 上装一个 Proxmox VE，希望得到一个比较好的中间态。&lt;/p&gt;</description><link>https://jia.je/software/2023/06/15/libvirtd-migrate-proxmox-ve/</link> <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/06/15/libvirtd-migrate-proxmox-ve/</guid> </item> <item> <title>LoongArch 初尝试</title> <category>hardware</category> <category>la32</category> <category>la32r</category> <category>la64</category> <category>loongarch</category> <category>qemu</category> <description>&lt;h1&gt;LoongArch 初尝试&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;最近应龙芯要求把监控程序移植到了 LoongArch 32 Reduced 架构上，趁此机会体验了一下 LoongArch 相关的软件和系统。&lt;/p&gt;</description><link>https://jia.je/hardware/2023/06/12/try-loongarch/</link> <pubDate>Mon, 12 Jun 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2023/06/12/try-loongarch/</guid> </item> <item> <title>Tar 文件格式</title> <category>software</category> <category>tar</category> <description>&lt;h1&gt;Tar 文件格式&lt;/h1&gt;&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;/kb/software/tar.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;最近在解压 tar.gz 文件的时候，发现如果用 unar 解压，就会出现文件名截断到 100 个字节的问题，而如果用 gnu tar 解压，文件名就是正常的，因此深入研究了一下 Tar 的文件格式。实际上，这是因为早期 tar 格式设计的时候，就设定了路径最长 100 字节的限制，后来的扩展解决了这个问题，但是 unar 没能正确地识别扩展，导致解压路径出错。&lt;/p&gt;</description><link>https://jia.je/software/2023/05/23/tar-format/</link> <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/05/23/tar-format/</guid> </item> <item> <title>使用 Docker 部署 OpenLDAP</title> <category>docker</category> <category>ldap</category> <category>openldap</category> <category>software</category> <description>&lt;h1&gt;使用 Docker 部署 OpenLDAP&lt;/h1&gt;&lt;p&gt;OpenLDAP 是一个开源的用户系统实现，主要支持 LDAP 协议，可以给其他系统提供用户认证。下面讨论了如何在 Docker 中部署 OpenLDAP。&lt;/p&gt;</description><link>https://jia.je/software/2023/05/13/openldap-in-docker/</link> <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_created.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/05/13/openldap-in-docker/</guid> </item> </channel></rss>