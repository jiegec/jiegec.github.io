<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>杰哥的{运维，编程，调板子}小笔记</title><description>杰哥的{运维，编程，调板子}小笔记</description><link>https://jia.je/</link><atom:link href="https://jia.je/feed_rss_updated.xml" rel="self" type="application/rss+xml" /><language>zh</language> <pubDate>Thu, 07 Dec 2023 16:07:35 -0000</pubDate> <lastBuildDate>Thu, 07 Dec 2023 16:07:35 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.9.0</generator> <item> <title>反向代理的 Partial Transfer 问题</title> <category>http</category> <category>network</category> <category>nginx</category> <category>proxy</category> <category>software</category> <description>&lt;h1&gt;反向代理的 Partial Transfer 问题&lt;/h1&gt;&lt;p&gt;反向代理已经是无处不在，但是如果反向代理没有根据使用场景调优，或者出现了一些异常，可能会带来不好的用户体验，并且现象十分奇怪，例如访问某 GitLab 实例的时候，偶尔会出现页面加载不完整的情况。&lt;/p&gt;&lt;p&gt;这些问题困扰了我们很久，到最后才发现，原来问题在反向代理上。下面就来回顾一下事情的经过。&lt;/p&gt;</description><link>https://jia.je/software/2023/12/07/reverse-proxy-partial-transfer/</link> <pubDate>Thu, 07 Dec 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/12/07/reverse-proxy-partial-transfer/</guid> </item> <item> <title>包管理器打包命令速查</title> <category>linux</category> <category>packaging</category> <category>software</category> <description>&lt;h1&gt;包管理器打包命令速查&lt;/h1&gt;&lt;p&gt;随着 Linux 使用逐渐深入，开始尝试参与到一些发行版/包管理器的维护当中。在此记录一下打包相关命令，方便自己速查。&lt;/p&gt;</description><link>https://jia.je/software/2023/12/05/packaging-cookbook/</link> <pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/12/05/packaging-cookbook/</guid> </item> <item> <title>mkdocs-material 的 Instant Navigation 功能坑点</title> <category>instant</category> <category>markdown</category> <category>mkdocs</category> <category>mkdocsmaterial</category> <category>software</category> <category>spa</category> <description>&lt;h1&gt;mkdocs-material 的 Instant Navigation 功能坑点&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;mkdocs-material 支持 &lt;a href=&#34;https://squidfunk.github.io/mkdocs-material/setup/setting-up-navigation/#instant-loading&#34;&gt;Instant Navigation&lt;/a&gt;：启用了以后，在网页里点击其他页面的时候，它会用类似 SPA 的方法，去 fetch 新的网页，然后原地替换，而不是让浏览器跳转过去，可以提升用户体验。&lt;/p&gt;&lt;p&gt;但是在用这个功能的时候，会发现其实并不是那么简单。。。&lt;/p&gt;</description><link>https://jia.je/software/2023/11/26/mkdocs-material-instant-navigation/</link> <pubDate>Sun, 26 Nov 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/11/26/mkdocs-material-instant-navigation/</guid> </item> <item> <title>在 Apple Silicon macOS 上跑 Linux 虚拟机 + Rosetta</title> <category>apple</category> <category>arm64</category> <category>linux</category> <category>m1</category> <category>macOS</category> <category>software</category> <category>x86</category> <description>&lt;h1&gt;在 Apple Silicon macOS 上跑 Linux 虚拟机 + Rosetta&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;最近需要跑某个 x86 only 且需要 GUI 的程序，以往都是跑在远程 Linux/Windows 机器上再远程桌面去使用。最近看到了一些比较成熟的在 macOS 上跑 Linux 虚拟机 + Rosetta 的办法（&lt;a href=&#34;https://qiita.com/jin0g/items/692fde40cd895b81f39e&#34;&gt;M1 MacでVivadoが動いた！&lt;/a&gt;），因此记录下来。&lt;/p&gt;</description><link>https://jia.je/software/2023/11/23/apple-silicon-linux-rosetta/</link> <pubDate>Thu, 23 Nov 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/11/23/apple-silicon-linux-rosetta/</guid> </item> <item> <title>Apple 处理器</title> <category>apple</category> <category>cpu</category> <category>hardware</category> <description>&lt;h1&gt;Apple 处理器&lt;/h1&gt;&lt;h2&gt;M 系列&lt;/h2&gt;&lt;p&gt;| 名称 | CPU 核心 | GPU 核心 | 神经网络引擎 | 内存带宽 | 内存大小 ||----------|-----------|----------|--------------|-----------------|---------------------------|| M1 | 4+4 | 7/8 | 16 | | 8GB/16GB || M1 Pro | 6+2/8+2 | 14/16 | 16 | 200GB/s | 16GB/32GB || M1 Max | 8+2 | 24/32 | 16 | 400GB/s | 32GB/64GB || M1 Ultra | 16+4 | 48/64 | 32 | 800GB/s | 64GB/128GB || M2 | 4+4 | 8/10 | 16 | 100GB/s | 8GB/16GB/24GB || M2 Pro | 6+4/8+4 | 16/19 | 16 | 200GB/s | 16GB/32GB || M2 Max | 8+4 | 30/38 | 16 | 400GB/s | 32GB/64GB/96GB || M2 Ultra | 16+8 | 60/76 | 32 | 800GB/s | 64GB/128GB/192GB || M3 | 4+4 | 10 | 16 | 100GB/s | 8GB/16GB/24GB || M3 Pro | 5+6/6+6 | 14/18 | 16 | 150GB/s | 18GB/36GB || M3 Max | 10+4/12+4 | 30/40 | 16 | 300GB/s/400GB/s | 36GB/48GB/64GB/96GB/128GB |&lt;/p&gt;&lt;p&gt;来源：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://support.apple.com/kb/SP854?viewlocale=en_US&amp;amp;locale=en_US&#34;&gt;MacBook Pro (14-inch, 2021) - Technical Specifications&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://support.apple.com/kb/SP839?viewlocale=en_US&amp;amp;locale=en_US&#34;&gt;iMac (24-inch, M1, 2021) - Technical Specifications&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://support.apple.com/kb/SP869?viewlocale=en_US&amp;amp;locale=en_US&#34;&gt;MacBook Air (M2, 2022) - Technical Specifications&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://support.apple.com/kb/SP890?viewlocale=en_US&amp;amp;locale=en_US&#34;&gt;MacBook Pro (16-inch, 2023) - Technical Specifications&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://support.apple.com/kb/SP891?viewlocale=en_US&amp;amp;locale=en_US&#34;&gt;Mac mini (2023) - Technical Specifications&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://support.apple.com/kb/SP865?locale=en_US&#34;&gt;Mac Studio (2022) - Technical Specifications&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://support.apple.com/kb/SP894?locale=en_US&#34;&gt;Mac Studio (2023) - Technical Specifications&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/hardware/2023/10/31/apple-silicon/</link> <pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2023/10/31/apple-silicon/</guid> </item> <item> <title>Clang 如何支持 CUDA 程序</title> <category>clang</category> <category>cuda</category> <category>llvm</category> <category>nvidia</category> <category>software</category> <description>&lt;h1&gt;Clang 如何支持 CUDA 程序&lt;/h1&gt;&lt;h2&gt;前言&lt;/h2&gt;&lt;p&gt;编译 CUDA 程序的主要工具是 NVIDIA 提供的闭源编译器 NVCC，但实际上，NVCC 是基于 LLVM 开发的（来源：&lt;a href=&#34;https://developer.nvidia.com/cuda-llvm-compiler&#34;&gt;NVIDIA CUDA Compiler&lt;/a&gt;），NVIDIA 也把 NVCC 其中一部分逻辑贡献给了 LLVM 上游，使得 &lt;a href=&#34;https://llvm.org/docs/CompileCudaWithLLVM.html&#34;&gt;Clang 也可以在 CUDA 的配合下编译 CUDA 程序&lt;/a&gt;。这篇博客尝试研究 Clang/LLVM 如何实现 CUDA 程序的编译，主要是 Clang 前端部分，后端部分，也就是从 LLVM IR 到 NVPTX 的这一步还没有进行深入的研究。&lt;/p&gt;</description><link>https://jia.je/software/2023/10/17/clang-cuda-support/</link> <pubDate>Tue, 17 Oct 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/10/17/clang-cuda-support/</guid> </item> <item> <title>WSL2 内部实现探究</title> <category>linux</category> <category>os</category> <category>windows</category> <category>wsl</category> <category>wsl2</category> <description>&lt;h1&gt;WSL2 内部实现探究&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;最近看到 &lt;a href=&#34;https://devblogs.microsoft.com/commandline/windows-subsystem-for-linux-september-2023-update/&#34;&gt;Windows Subsystem for Linux September 2023 update&lt;/a&gt; 声称 WSL2 最新的预览版本支持让 Linux 和 Windows 一定程度上共享网络地址空间，就像 WSL1 那样：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;IPv6 support&lt;/li&gt;&lt;li&gt;Connect to Windows servers from within Linux using the localhost address 127.0.0.1&lt;/li&gt;&lt;li&gt;Connect to WSL directly from your local area network (LAN)&lt;/li&gt;&lt;li&gt;Improved networking compatibility for VPNs&lt;/li&gt;&lt;li&gt;Multicast support&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因此比较想知道这是怎么做到的，但目前我手上还没有预览版本的 windows，因此目前先研究 WSL2 已有的功能是如何实现的，未来再回来更新这一部分。&lt;/p&gt;</description><link>https://jia.je/os/2023/10/03/wsl2-internals/</link> <pubDate>Tue, 03 Oct 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/os/2023/10/03/wsl2-internals/</guid> </item> <item> <title>Linux 内核格式与启动协议</title> <category>boot</category> <category>linux</category> <category>os</category> <category>riscv</category> <category>uboot</category> <category>uefi</category> <description>&lt;h1&gt;Linux 内核格式与启动协议&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;之前在各种场合遇到过各种 Linux 内核的文件名或格式，例如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;vmlinux&lt;/li&gt;&lt;li&gt;vmlinuz&lt;/li&gt;&lt;li&gt;uImage&lt;/li&gt;&lt;li&gt;bzImage&lt;/li&gt;&lt;li&gt;uImage&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;即使是同样的文件名，格式可能也是不一样的，相应的启动协议也可能不一样。这篇博客尝试结合 Linux，各种 Bootloader（QEMU，EDK-II，U-Boot，OpenSBI）的代码来研究不同的 Linux 二进制格式以及启动协议。&lt;/p&gt;</description><link>https://jia.je/os/2023/10/01/linux-boot-protocol/</link> <pubDate>Sun, 01 Oct 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/os/2023/10/01/linux-boot-protocol/</guid> </item> <item> <title>Podman 和 Docker Rootless 实践</title> <category>docker</category> <category>podman</category> <category>rootless</category> <category>software</category> <description>&lt;h1&gt;Podman 和 Docker Rootless 实践&lt;/h1&gt;&lt;p&gt;最近在配置公用机器的环境，需求是很多用户需要使用 docker，但是众所周知，有 docker 权限就等于有了 root 权限，因此正好想尝试一下现在的 Rootless 容器化方案，例如 docket rootless 和 podman。&lt;/p&gt;</description><link>https://jia.je/software/2023/09/25/docker-rootless/</link> <pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/09/25/docker-rootless/</guid> </item> <item> <title>在 QEMU 中运行 OpenBMC</title> <category>bmc</category> <category>openbmc</category> <category>qemu</category> <category>system</category> <description>&lt;h1&gt;在 QEMU 中运行 OpenBMC&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;最近想给某台机器配一个 BMC，于是调研 OpenBMC 发行版，但是还没有找到可以买到的合适的 BMC，因此先在虚拟机中进行尝试。&lt;/p&gt;</description><link>https://jia.je/system/2023/08/11/openbmc-qemu/</link> <pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/system/2023/08/11/openbmc-qemu/</guid> </item> <item> <title>组装一台采用龙芯 3A6000 CPU 的主机</title> <category>cpu</category> <category>diy</category> <category>hardware</category> <category>loongarch</category> <category>loongson</category> <category>ls3a6000</category> <category>machine</category> <description>&lt;h1&gt;组装一台采用龙芯 3A6000 CPU 的主机&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;最近买到了龙芯 3A6000 以及配套主板，在此记录我组装台式机的过程，以及在其上的体验。&lt;/p&gt;</description><link>https://jia.je/hardware/2023/08/10/diy-ls3a6000-machine/</link> <pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2023/08/10/diy-ls3a6000-machine/</guid> </item> <item> <title>LoongArch 处理器</title> <category>cpu</category> <category>hardware</category> <category>loongarch</category> <category>loongson</category> <description>&lt;h1&gt;LoongArch 处理器&lt;/h1&gt;&lt;p&gt;整理市面上的 LoongArch 处理器以及相关产品。&lt;/p&gt;</description><link>https://jia.je/hardware/2023/08/10/loongarch-cpu/</link> <pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2023/08/10/loongarch-cpu/</guid> </item> <item> <title>普通高校招生录取流程</title> <category>admission</category> <category>gaokao</category> <category>others</category> <description>&lt;h1&gt;普通高校招生录取流程&lt;/h1&gt;&lt;p&gt;本文是本人对普通高校招生录取流程的整理，可能有误，欢迎指出。文中不涉及一些省份的特殊情况。&lt;/p&gt;</description><link>https://jia.je/others/2023/08/06/college-admission/</link> <pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/others/2023/08/06/college-admission/</guid> </item> <item> <title>SPEC CPU 2006 性能测试</title> <category>benchmark</category> <category>software</category> <category>spec</category> <description>&lt;h1&gt;SPEC CPU 2006 性能测试&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;最近在网上看到龙芯 3A6000 的 SPEC CPU 2006 性能评测数据，想着自己也可以在手上的一些平台上测一测，把测试的过程记录在本文。&lt;/p&gt;</description><link>https://jia.je/software/2023/08/02/spec-cpu-2006/</link> <pubDate>Wed, 02 Aug 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/08/02/spec-cpu-2006/</guid> </item> <item> <title>LK-99 相关链接</title> <category>lk99</category> <category>others</category> <description>&lt;h1&gt;LK-99 相关链接&lt;/h1&gt;&lt;p&gt;收录自己找到的一些和 LK-99 相关的信息，非专业人士，看个热闹。&lt;/p&gt;</description><link>https://jia.je/others/2023/08/01/lk99/</link> <pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/others/2023/08/01/lk99/</guid> </item> <item> <title>记录一次 CentOS AArch64 7 到 8 的升级</title> <category>aarch64</category> <category>centos</category> <category>devops</category> <description>&lt;h1&gt;记录一次 CentOS AArch64 7 到 8 的升级&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;有一台 AArch64 机器安装了 CentOS 7，想要升级到 CentOS 8，这篇博客主要讲讲折腾的整个过程，而不是教程：如果真要说，就是不要升级 CentOS 大版本，直接重装吧。如果真的想折腾，可以看看下面的内容。&lt;/p&gt;</description><link>https://jia.je/devops/2023/07/31/upgrade-centos-aarch64-7-to-8/</link> <pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/devops/2023/07/31/upgrade-centos-aarch64-7-to-8/</guid> </item> <item> <title>VFIO - Virtual Function I/O</title> <category>driver</category> <category>linux</category> <category>pcie</category> <category>software</category> <category>vfio</category> <description>&lt;h1&gt;VFIO - Virtual Function I/O&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;VFIO 是 Linux 内核中的一个功能，目的是把 PCIe 设备暴露给用户态的程序，进而可以暴露给虚拟机内的系统，也就是常说的虚拟机 PCIe 直通。为了保证安全性，VFIO 还会配置好 IOMMU，保证用户态程序无法利用设备的 DMA 访问到其他地址空间的数据。&lt;/p&gt;&lt;p&gt;本文探讨 VFIO 暴露的用户态 API 以及如何在用户态中使用 VFIO 直接控制 PCIe 设备。&lt;/p&gt;</description><link>https://jia.je/software/2023/07/24/vfio/</link> <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2023/07/24/vfio/</guid> </item> <item> <title>Montgomery 模乘</title> <category>crypto</category> <category>crypto</category> <category>montgomery</category> <category>mulmod</category> <description>&lt;h1&gt;Montgomery 模乘&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;在密码学中，经常会涉及到模乘操作：$a * b \bmod N$。朴素的实现方法是，先求出 $a * b$，再对 N 进行除法，那么余数就是模乘的结果。&lt;/p&gt;&lt;p&gt;但由于此时的 $a$ $b$ $N$ 三个数都很大，在计算机上需要用大整数来表示，而大整数的乘法和除法都是需要耗比较多的时间的。如果用 Schönhage–Strassen 算法，计算两个 $n$ 位大整数的乘法需要的时间是 $O(n \log(n) \log(\log(n)))$。&lt;/p&gt;&lt;h2&gt;定义&lt;/h2&gt;&lt;p&gt;Montgomery 模乘是一种提高模乘的性能的方法。具体地，Montgomery 模乘需要一个参数 $R$ 满足 $R$ 和 $N$ 互质，且 $R &amp;gt; N$，那么 Montgomery 模乘实现的是如下计算：&lt;/p&gt;&lt;p&gt;$$M(a, b) = a * b * R^{-1} \bmod N$$&lt;/p&gt;</description><link>https://jia.je/crypto/2023/07/23/montgomery-mul-mod/</link> <pubDate>Sun, 23 Jul 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/crypto/2023/07/23/montgomery-mul-mod/</guid> </item> <item> <title>libc++ 的 uniform_int_distribution 性能问题</title> <category>cpp</category> <category>programming</category> <category>random</category> <category>sampling</category> <category>stl</category> <description>&lt;h1&gt;libc++ 的 uniform_int_distribution 性能问题&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;前段时间，@lwpie 发现一段 C++ 代码在 macOS 下，分别用自带的 Clang 编译和用 Homebrew 的 GCC 编译，性能差距接近一个数量级，下面是运行时间：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;GCC-13 Homebrew: 300&lt;/li&gt;&lt;li&gt;Apple Clang: 2170&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/programming/2023/07/22/uniform-int-distribution-performance/</link> <pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/programming/2023/07/22/uniform-int-distribution-performance/</guid> </item> <item> <title>写一个 bash zsh 和 fish 都能跑的脚本</title> <category>bash</category> <category>fish</category> <category>programming</category> <category>shell</category> <category>zsh</category> <description>&lt;h1&gt;写一个 bash zsh 和 fish 都能跑的脚本&lt;/h1&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;bash 和 zsh 都实现了 POSIX shell 标准，因此写脚本的时候，比较容易兼容这两种常见的 shell。但现在 fish 也很流行，而 fish 不符合 POSIX shell 标准，很多地方语法多不兼容，能否写一个脚本，可以用 bash，zsh 和 fish 跑？&lt;/p&gt;&lt;p&gt;```shell&lt;/p&gt;&lt;h1&gt;The following commands should work&lt;/h1&gt;&lt;p&gt;bash test.shzsh test.shfish test.sh```&lt;/p&gt;</description><link>https://jia.je/programming/2023/07/18/portable-script-across-bash-zsh-fish/</link> <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/programming/2023/07/18/portable-script-across-bash-zsh-fish/</guid> </item> </channel></rss>