<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>杰哥的{运维，编程，调板子}小笔记</title><description>杰哥的{运维，编程，调板子}小笔记</description><link>https://jia.je/</link><atom:link href="https://jia.je/feed_rss_updated.xml" rel="self" type="application/rss+xml" /><docs>https://github.com/jiegec/blog-source</docs><language>zh</language> <pubDate>Sat, 19 Apr 2025 00:15:06 -0000</pubDate> <lastBuildDate>Sat, 19 Apr 2025 00:15:06 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.17.1</generator> <image> <url>None</url> <title>杰哥的{运维，编程，调板子}小笔记</title><link>https://jia.je/</link> </image> <item> <title>如何进行条件分支预测器实验</title> <category>bp</category> <category>cbp</category> <category>cpu</category> <category>ooo</category> <category>software</category> <description>&lt;h1 id=&#34;如何进行条件分支预测器实验&#34;&gt;如何进行条件分支预测器实验&lt;a class=&#34;headerlink&#34; href=&#34;#如何进行条件分支预测器实验&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;最近针对各种条件分支预测器（Conditional Branch Predictor）做了在各种 benchmark 上的实验，在此记录一下做这个实验的流程。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;流程&#34;&gt;流程&lt;a class=&#34;headerlink&#34; href=&#34;#流程&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;说到做条件分支预测器实验，到底是做什么呢？其实就是针对未来的处理器中的条件分支预测器的设计，在提前准备好的一些 benchmark 上进行模拟，观察它的预测准确性。既然是未来的处理器，那么硬件肯定是没有的，如果直接用 RTL 去实现新的预测器，再用 RTL 仿真，结果固然准确，但这还是太复杂并且太慢了。所以在前期的时候，首先会构建一个单独的条件分支预测器的实验环境，在只考虑条件分支指令、不考虑其他指令的情况下，单纯来观察预测的效果，从而可以实现比较快速的设计迭代。&lt;/p&gt;&lt;p&gt;为了达成这个目的，需要：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;提前准备好一些 benchmark，提取出这个 benchmark 中所涉及到的条件分支 trace，以及条件分支预测器所需要的其他信息&lt;/li&gt;&lt;li&gt;为了进一步缩短模拟的时间和 trace 的大小，利用 SimPoint 等技术来减少要模拟的指令条数&lt;/li&gt;&lt;li&gt;搭建一个条件分支预测器模拟器，在上一步提取出来的 trace 中模拟条件分支预测器的执行，从而得到结果&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;下面按照这个顺序，分别来讨论一下这个流程。&lt;/p&gt;&lt;h2 id=&#34;benchmark-准备&#34;&gt;benchmark 准备&lt;a class=&#34;headerlink&#34; href=&#34;#benchmark-准备&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;比较常见的 benchmark 就是 SPEC INT 2017，当然现在很多论文也会自己去寻找一些其他的 benchmark，不同的 benchmark 它的程序的特性也是不一样的，未来也可能会有新的 benchmark 出来，所以有必要了解从 benchmark 到 trace 的过程。选好了 benchmark 以后，我们需要思考怎么去生成一个 trace：为了减少后续模拟的负担，我们需要从 benchmark 中提取条件分支的执行历史，作为 groundtruth，喂给条件分支预测器，这样才能知道每次预测是否准确。当然了，网上已经有很多现成的 trace，比如 CBP Championship 比赛也都有提供自己的 benchmark trace（P.S. 2025 年的 CBP Championship 正在火热进行中），但读完本文，你应该可以尝试自己完成这个从 benchmark 到 trace 的过程。&lt;/p&gt;&lt;p&gt;那么第一个问题就是，怎么获取 benchmark 中分支指令执行的信息呢？首先来看一组数据，在 amd64 上，用 &lt;code&gt;-O3&lt;/code&gt; 编译 SPEC INT 2017 的 benchmark，一共 10 个子 benchmark，加起来运行的指令数大约是 1.6e13 条，其中有大约 2.9e12 条分支指令（包括了有条件和无条件），这个数量是非常巨大的，无论是保存这些执行信息的性能开销，还是需要的存储空间，都是比较巨大的。&lt;/p&gt;&lt;p&gt;考虑到条件分支预测器只需要分支指令的信息，所以只考虑 2.9e12 条分支指令的部分，而不去考虑完整的 1.6e13 条指令，首先可以减少一个数量级。接着，考虑每个分支指令需要记录哪些信息：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;知道每一条分支指令的地址、每一条直接分支指令的目的地址&lt;/li&gt;&lt;li&gt;对于执行的每一条条件分支指令，要记录它跳转与否&lt;/li&gt;&lt;li&gt;对于执行的每一条间接分支指令，需要记录它跳转的目的地址&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;其中第一点，由于条件分支指令本身是不变的（不考虑 JIT），所以只需要存一份就行。而 SPEC INT 2017 所有程序的分支指令加起来大概只有 5e4 的量级，相比 1.6e13 的执行的分支指令数可以忽略不计。第三点，由于间接分支指令通常也是比较少的，而且同一条间接分支指令的目的地址通常来说不会特别多，也有压缩的空间。那么最主要的空间来自于：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;虽然条件分支指令数量不多，但是执行的条件分支指令次数很多，每一次执行的可能是不同的条件分支指令，如果要记录当前这次执行的是哪一条条件分支指令，那么这个指令的地址或者一个 id 所占用的空间会很大；如果不记录当前执行的是哪一条分支分支指令，就需要在后续处理的时候，结合可执行程序的汇编来推断，当前执行的是哪一条条件分支指令&lt;/li&gt;&lt;li&gt;其次就是要记录条件分支跳转与否，这一个的开销相对会小一些，只需要一个 bit&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;由此可以推导出不同的 trace 记录方式：&lt;/p&gt;&lt;p&gt;第一种方式是，遇到条件分支指令时，只记录跳转（Taken）还是不跳转（Not Taken），这种方式保存的数据量最小（平均每个分支只需要比 1 bit 略多的空间），但是后续需要结合汇编，恢复出执行的过程，更进一步还可以压缩那些 return 的目的地址等于对应的 call 指令的下一条指令的地址的情况（Indirect Transfer Compression for Returns）。Intel PT 采用的是这种方法。&lt;/p&gt;&lt;p&gt;第二种方式是，遇到条件分支指令时，不仅记录跳转与否，还记录它执行的是哪一条分支指令。这种方式保存的数据量稍多，假如要支持 5e4 条不同的条件分支指令，为了保存这个 id，就需要 16 位。类似地，也可以只记录跳转了的条件分支指令，那么那些没有跳转的条件分支指令，就需要后续结合汇编或者完整的条件分支指令表来恢复出来。CBP Championship 的 trace 采用的是这种方法。&lt;/p&gt;&lt;p&gt;第一种方法明显空间会更小，以 1.6e13 条执行的分支指令数，大概需要 2TB 的磁盘空间；第二种方法，同样的分支指令数，就需要大概 30TB 的磁盘空间。当然了，第二种方法存的数据可以经过无损压缩进一步缩小空间，实测压缩后大概是每分支 0.16 字节（这个数字与所跑的 benchmark 有关系，分支容易被预测的 benchmark 对应更好的压缩率，因为某种意义来说分支预测也是一种无损压缩），只比第一种方法大概每分支 0.14 字节略大。同理，第一种方法存的数据也可以经过无损压缩进一步缩小空间，达到每分支大约 0.018 字节的程度（压缩率也和分支预测准确率有关）。&lt;/p&gt;&lt;p&gt;在评估条件分支预测器的时候，除了知道分支本身，还需要知道执行的指令数，用于计算 MPKI 等，这个可以通过 PMU 单独统计出来，或者直接根据控制流推算出执行的指令数，例如在等长指令的 ISA 上直接用地址差除以指令长度来计算指令数，在变长指令的 ISA 上 Parse ELF 去解析控制流经过的指令：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;解析 ELF，用反汇编器得到每条指令的地址，从小到大排序放到数组中&lt;/li&gt;&lt;li&gt;对于每个分支地址和目的地址，查询它对应的指令在指令数组中的下标，记录下来&lt;/li&gt;&lt;li&gt;统计指令数时，每遇到一个跳转的分支，就用当前跳转的分支的分支地址在指令数组中的下标，减去上一个跳转的分支的目的地址在指令数组中的下标，加上一，累加到指令数中&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;当然了，这里有一些细节，例如如果程序是 PIE，那么需要知道它加载的基地址，从而把运行时的指令地址和 ELF 对应起来；类似地，如果程序加载了 libc 等动态库，也需要知道它们的加载地址。这些信息可以在抓取指令 trace 的同时，顺带记录下来。如果想规避这个麻烦，可以使用静态编译，不过 vdso 依然会动态加载，但 vdso 内指令很少，通常可以忽略不计，可以特判忽略掉。&lt;/p&gt;&lt;p&gt;此外，如果分支预测器需要知道分支指令的 fallthrough 地址（例如 Path History Register），且使用的是变长指令集，还需要记录分支指令的长度。这些需求实现起来都并不复杂，也只需要占用很小的空间。&lt;/p&gt;&lt;p&gt;TB 级别的规模，无论是保存这些数据，还是生成这些数据，或者更进一步在这些数据上模拟条件分支预测器，都会带来很大的负担。因此，需要一个办法来减少要模拟的 trace 长度。&lt;/p&gt;&lt;h2 id=&#34;simpoint&#34;&gt;SimPoint&lt;a class=&#34;headerlink&#34; href=&#34;#simpoint&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://cseweb.ucsd.edu/~calder/papers/ASPLOS-02-SimPoint.pdf&#34;&gt;SimPoint&lt;/a&gt; 是解决这个问题的一个很重要的方法：它观察到了一个很重要的现象，就是这些 benchmark 其实大多数时候是在重复做相同的事情，只不过涉及到的数据不同。这也很好理解，因为很多程序里面都是循环，而循环是很有规律的，我们可以预期程序的行为在时间尺度上也会有一定的周期性。下面是 SimPoint 论文中的一个图，它记录了 gzip-graphic benchmark 的 IPC（每周期指令数，图中的实线）和 L1 数据缓存缺失率（图中的虚线）随着执行过程的变化：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../cbp-experiments-simpoint.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到比较明显的周期性，而涉及到周期性，就会想到利用周期的性质：如果在一个周期上评估它的 IPC 或者分支预测器的准确率，然后外推到其他的周期，是不是大大缩小了执行时间？SimPoint 利用这个思想，设计了如下的步骤：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;首先把整个执行过程按照执行的指令数切分成很多个 slice&lt;/li&gt;&lt;li&gt;接着对 slice 进行聚类，使得每一个类内的 slice 的行为类似，这个类就叫做一个 phase&lt;/li&gt;&lt;li&gt;之后做实验的时候，只需要对每个 phase 内的一个 slice 进行实验，评估出它的 IPC 或者其他性能指标，再按照 phase 内的 slice 数量加权平均，就可以得到完整执行过程的性能指标了&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这里比较核心的步骤，就是怎么对 slice 聚类？SimPoint 论文采用了机器学习的方法：针对每个 slice，统计它在不同 Basic Block 内执行的时间的比例，把这个统计数据记为 Basic Block Vector；那么聚类，就是针对那些 Basic Block Vector 相近的 Slice，进行 K-Means 算法。&lt;/p&gt;&lt;p&gt;由于 K-Means 算法执行的时候，需要首先知道聚出来多少个类，所以 SimPoint 枚举了若干个不同的类的个数，对每个 K-Means 聚类结果进行打分：BIC（Bayesian Information Criterion），根据打分找到一个聚类效果足够好，但是类又不是特别多的结果。&lt;/p&gt;&lt;p&gt;进一步为了提升聚类的性能，SimPoint 还进行了一次降维操作，把很长的 Basic Block Vector 线性映射到一个比较小的 15 维的向量上。&lt;/p&gt;&lt;p&gt;SimPoint 论文中展示了聚类的效果，还是很可观的：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../cbp-experiments-simpoint-2.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;完成聚类以后，SimPoint 的输出就是若干个 phase，每一个类对应一个 phase，每个 phase 包括：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;权重：权重就是这个类中 slice 的个数&lt;/li&gt;&lt;li&gt;代表这个 phase 的一个 slice 的信息，例如它是从第几条指令开始到第几条指令&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;完成 SimPoint 算法后，得到的 trace 长度大大减小，例如一段原始的长为 1e10 条指令的 trace，以 3e7 条指令为一个 slice，聚类以后，只剩下 10 个 phase，那么需要模拟和保存的 trace 长度只剩下了 3e8 条指令。&lt;/p&gt;&lt;p&gt;回顾前面提到的完整的 SPEC INT 2017 的量级：1.6e13 条执行的分支指令数，经过 SimPoint 处理后，可能只需要 1e11 条指令，这就是一个比较好处理的大小了，以单核每秒模拟 1e7 条分支指令的速度，完整跑一次条件分支预测器实验，可能只需要几个小时的时间，再加上多核，可以进一步缩短到几十分钟。&lt;/p&gt;&lt;h2 id=&#34;trace-抓取&#34;&gt;trace 抓取&lt;a class=&#34;headerlink&#34; href=&#34;#trace-抓取&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;刚才讨论了很多 trace 的大小以及如何用 SimPoint 压缩空间，那么这个 trace 到底怎么抓取呢？主要有两种方法：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;基于硬件已有的 trace，比如 &lt;a href=&#34;../../../../2024/12/10/linux-perf-pmu/&#34;&gt;Intel PT&lt;/a&gt;，但需要注意，Intel PT 是可能丢失历史的，虽然比例比较小；为了避免丢失历史，建议设置 &lt;code&gt;sysctl kernel.perf_event_paranoid=-1&lt;/code&gt;（或者用 root 权限来运行 &lt;code&gt;perf record&lt;/code&gt;，即绕过 &lt;code&gt;mlock limit after perf_event_mlock_kb&lt;/code&gt; 的限制）来扩大 Intel PT 使用的 buffer 大小，从 32KB 扩大到 1MB（参考 &lt;a href=&#34;https://github.com/mysqlperformance/pt_perf&#34;&gt;pt_perf&lt;/a&gt;），在大小核机器上还要绑定到一个大核上&lt;/li&gt;&lt;li&gt;基于软件的 Binary Instrumentation，即针对分支指令插桩，比如 Pin、DynamoRIO 甚至 QEMU&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;第一种方法性能是最好的，运行开销比较小，耗费 1.4x 的时间，但是后续处理也比较费劲一些，此外比较依赖平台，ARM 上虽然也有 SPE，但是支持的平台比较少。其他平台就不好说了。&lt;/p&gt;&lt;p&gt;第二种方法性能会差一些，大概会有 30-50x 的性能开销，但是一天一夜也能够把 SPEC INT 2017 跑完。实现的时候，需要注意在遇到分支的时候，首先把信息保存在内存的 buffer 中，buffer 满了再写盘；此外，为了减少磁盘空间以及写盘所耗费的 I/O 时间，可以在内存中一边生成数据一边压缩，直接把压缩好的数据写入到文件中。&lt;/p&gt;&lt;p&gt;实践中，可以先用 Intel PT 抓取 trace，再把 trace 转换为第二种格式，最终的抓取 + 转换的性能开销大概是 15x。大致算法如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;遍历程序中所有的分支，按照地址从小到大保存起来在数组当中，针对那些直接分支，提前计算好从它的目的地址开始遇到的第一个分支在数组的下标&lt;/li&gt;&lt;li&gt;解析 perf.data 中的 Intel PT packet，提取出其中的 TNT 和 TIP packet，从程序的 entrypoint 开始，沿着 Intel PT 的 trace 重建控制流：条件分支从 TNT packet 获取方向，间接分支从 TIP packet 获取目的地址，&lt;/li&gt;&lt;li&gt;如果分支跳转了，就根据目的地址找到从目的地址开始遇到的下一个分支（二分查找）；如果没有跳转，就直接访问数组的下一个分支&lt;/li&gt;&lt;li&gt;注意 RET compression 的处理：维护 call stack，如果遇到 return 的时候刚好在 TNT packet 中，且对应的 bit 是 Taken，则从 call stack 取出目的地址；一个优化是 call stack 不仅记录地址，还记录从这个地址开始遇到的下一个分支在数组的下标&lt;/li&gt;&lt;li&gt;重建控制流的同时，输出第二种格式的 trace，在内存中完成流式压缩&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;以上的这些性能开销只是在一个程序上测得的结果，不同的程序上，其性能开销也有很大的不同。&lt;/p&gt;&lt;p&gt;对于动态链接，perf.data 会记录 mmap event；Pin 和 DynamoRIO 都可以对 module load 事件进行插桩。动态库可以从文件系统中访问，vdso 可以从内存中&lt;a href=&#34;https://ldpreload.com/p/blog/dump-vdso.c&#34;&gt;导出&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&#34;条件分支预测器模拟&#34;&gt;条件分支预测器模拟&lt;a class=&#34;headerlink&#34; href=&#34;#条件分支预测器模拟&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在完成了前面的大部分步骤以后，最终就是搭建一个条件分支预测器的模拟器了。其实这一点倒是并不复杂，例如 CBP Championship 或者 ChampSim 都有现成的框架，它们也都提供了一些经典的分支预测器的实现代码，例如 TAGE-SC-L。在它们的基础上进行开发，就可以评估各种条件分支预测器的预测效果了。&lt;/p&gt;&lt;p&gt;实际上，除了条件分支预测器，还有很多其他的实验也可以用类似的方法构建 trace 然后运行。但条件分支预测器有个比较好的特点：它需要的状态比较简单，通常拿之前一段指令做预热即可，不需要 checkpoint；而如果要完整模拟整个处理器的执行，通常需要得到系统的整个状态，比如内存和寄存器，才能继续执行，这时候就可能需要提前把 slice 开始的状态保存下来（checkpoint），或者用一个简单的不精确的模拟器快速计算出 slice 开始的状态（fast forwarding）。&lt;/p&gt;&lt;h2 id=&#34;实验数据&#34;&gt;实验数据&lt;a class=&#34;headerlink&#34; href=&#34;#实验数据&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在这里列出最终使用的 trace 格式和实验数据：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;trace 格式：使用第二种 trace 记录方法，每次执行 branch 记录 4 字节的信息，包括 branch id 和是否跳转，使用 zstd 进行无损压缩&lt;/li&gt;&lt;li&gt;trace 大小和运行时间统计（GCC 12.2.0，&lt;code&gt;-O3 -static&lt;/code&gt; 编译，在 Intel i9-14900K 上实验）：&lt;/li&gt;&lt;/ol&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;benchmark&lt;/th&gt;&lt;th&gt;子 benchmark&lt;/th&gt;&lt;th&gt;分支执行次数&lt;/th&gt;&lt;th&gt;trace 大小&lt;/th&gt;&lt;th&gt;每分支空间开销&lt;/th&gt;&lt;th&gt;程序直接运行时间&lt;/th&gt;&lt;th&gt;Pin 抓取时间&lt;/th&gt;&lt;th&gt;时间开销&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;500.perlbench_r&lt;/td&gt;&lt;td&gt;checkspam&lt;/td&gt;&lt;td&gt;2.40e11&lt;/td&gt;&lt;td&gt;8.87 GiB&lt;/td&gt;&lt;td&gt;0.32 bit&lt;/td&gt;&lt;td&gt;59s&lt;/td&gt;&lt;td&gt;6334s&lt;/td&gt;&lt;td&gt;107x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;500.perlbench_r&lt;/td&gt;&lt;td&gt;diffmail&lt;/td&gt;&lt;td&gt;1.49e11&lt;/td&gt;&lt;td&gt;2.78 GiB&lt;/td&gt;&lt;td&gt;0.16 bit&lt;/td&gt;&lt;td&gt;33s&lt;/td&gt;&lt;td&gt;4615s&lt;/td&gt;&lt;td&gt;140x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;500.perlbench_r&lt;/td&gt;&lt;td&gt;splitmail&lt;/td&gt;&lt;td&gt;1.33e11&lt;/td&gt;&lt;td&gt;1.49 GiB&lt;/td&gt;&lt;td&gt;0.10 bit&lt;/td&gt;&lt;td&gt;31s&lt;/td&gt;&lt;td&gt;3385s&lt;/td&gt;&lt;td&gt;109x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;500.perlbench_r&lt;/td&gt;&lt;td&gt;合计&lt;/td&gt;&lt;td&gt;5.22e11&lt;/td&gt;&lt;td&gt;13.14 GiB&lt;/td&gt;&lt;td&gt;0.22 bit&lt;/td&gt;&lt;td&gt;123s&lt;/td&gt;&lt;td&gt;14334s&lt;/td&gt;&lt;td&gt;117x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;502.gcc_r&lt;/td&gt;&lt;td&gt;gcc-pp -O3&lt;/td&gt;&lt;td&gt;4.50e10&lt;/td&gt;&lt;td&gt;3.28 GiB&lt;/td&gt;&lt;td&gt;0.63 bit&lt;/td&gt;&lt;td&gt;17s&lt;/td&gt;&lt;td&gt;1625s&lt;/td&gt;&lt;td&gt;96x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;502.gcc_r&lt;/td&gt;&lt;td&gt;gcc-pp -O2&lt;/td&gt;&lt;td&gt;5.37e10&lt;/td&gt;&lt;td&gt;3.46 GiB&lt;/td&gt;&lt;td&gt;0.55 bit&lt;/td&gt;&lt;td&gt;20s&lt;/td&gt;&lt;td&gt;1930s&lt;/td&gt;&lt;td&gt;97x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;502.gcc_r&lt;/td&gt;&lt;td&gt;gcc-smaller&lt;/td&gt;&lt;td&gt;5.51e10&lt;/td&gt;&lt;td&gt;2.84 GiB&lt;/td&gt;&lt;td&gt;0.44 bit&lt;/td&gt;&lt;td&gt;21s&lt;/td&gt;&lt;td&gt;1830s&lt;/td&gt;&lt;td&gt;87x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;502.gcc_r&lt;/td&gt;&lt;td&gt;ref32 -O5&lt;/td&gt;&lt;td&gt;4.22e10&lt;/td&gt;&lt;td&gt;1.20 GiB&lt;/td&gt;&lt;td&gt;0.24 bit&lt;/td&gt;&lt;td&gt;16s&lt;/td&gt;&lt;td&gt;1369s&lt;/td&gt;&lt;td&gt;86x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;502.gcc_r&lt;/td&gt;&lt;td&gt;ref32 -O3&lt;/td&gt;&lt;td&gt;4.80e10&lt;/td&gt;&lt;td&gt;1.50 GiB&lt;/td&gt;&lt;td&gt;0.27 bit&lt;/td&gt;&lt;td&gt;24s&lt;/td&gt;&lt;td&gt;2209s&lt;/td&gt;&lt;td&gt;92x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;502.gcc_r&lt;/td&gt;&lt;td&gt;合计&lt;/td&gt;&lt;td&gt;2.44e11&lt;/td&gt;&lt;td&gt;12.24 GiB&lt;/td&gt;&lt;td&gt;0.43 bit&lt;/td&gt;&lt;td&gt;98s&lt;/td&gt;&lt;td&gt;8963s&lt;/td&gt;&lt;td&gt;91x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;505.mcf_r&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;td&gt;2.21e11&lt;/td&gt;&lt;td&gt;31.0 GiB&lt;/td&gt;&lt;td&gt;1.20 bit&lt;/td&gt;&lt;td&gt;168s&lt;/td&gt;&lt;td&gt;4800s&lt;/td&gt;&lt;td&gt;29x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;520.omnetpp_r&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;td&gt;2.15e11&lt;/td&gt;&lt;td&gt;13.3 GiB&lt;/td&gt;&lt;td&gt;0.53 bit&lt;/td&gt;&lt;td&gt;135s&lt;/td&gt;&lt;td&gt;7289s&lt;/td&gt;&lt;td&gt;54x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;523.xalancbmk_r&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;td&gt;3.27e11&lt;/td&gt;&lt;td&gt;4.45 GiB&lt;/td&gt;&lt;td&gt;0.12 bit&lt;/td&gt;&lt;td&gt;112s&lt;/td&gt;&lt;td&gt;8883s&lt;/td&gt;&lt;td&gt;79x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;525.x264_r&lt;/td&gt;&lt;td&gt;pass 1&lt;/td&gt;&lt;td&gt;1.44e10&lt;/td&gt;&lt;td&gt;579 MiB&lt;/td&gt;&lt;td&gt;0.34 bit&lt;/td&gt;&lt;td&gt;14s&lt;/td&gt;&lt;td&gt;348s&lt;/td&gt;&lt;td&gt;25x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;525.x264_r&lt;/td&gt;&lt;td&gt;pass 2&lt;/td&gt;&lt;td&gt;4.42e10&lt;/td&gt;&lt;td&gt;2.30 GiB&lt;/td&gt;&lt;td&gt;0.45 bit&lt;/td&gt;&lt;td&gt;39s&lt;/td&gt;&lt;td&gt;1202s&lt;/td&gt;&lt;td&gt;31x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;525.x264_r&lt;/td&gt;&lt;td&gt;seek 500&lt;/td&gt;&lt;td&gt;4.78e10&lt;/td&gt;&lt;td&gt;2.77 GiB&lt;/td&gt;&lt;td&gt;0.50 bit&lt;/td&gt;&lt;td&gt;41s&lt;/td&gt;&lt;td&gt;1258s&lt;/td&gt;&lt;td&gt;31x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;525.x264_r&lt;/td&gt;&lt;td&gt;合计&lt;/td&gt;&lt;td&gt;1.06e11&lt;/td&gt;&lt;td&gt;5.64 GiB&lt;/td&gt;&lt;td&gt;0.46 bit&lt;/td&gt;&lt;td&gt;94s&lt;/td&gt;&lt;td&gt;2808s&lt;/td&gt;&lt;td&gt;30x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;531.deepsjeng_r&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;td&gt;2.74e11&lt;/td&gt;&lt;td&gt;31.6 GiB&lt;/td&gt;&lt;td&gt;0.99 bit&lt;/td&gt;&lt;td&gt;140s&lt;/td&gt;&lt;td&gt;8093s&lt;/td&gt;&lt;td&gt;58x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;541.leela_r&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;td&gt;3.38e11&lt;/td&gt;&lt;td&gt;75.6 GiB&lt;/td&gt;&lt;td&gt;1.92 bit&lt;/td&gt;&lt;td&gt;224s&lt;/td&gt;&lt;td&gt;8894s&lt;/td&gt;&lt;td&gt;40x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;548.exchange2_r&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;td&gt;3.01e11&lt;/td&gt;&lt;td&gt;26.3 GiB&lt;/td&gt;&lt;td&gt;0.75 bit&lt;/td&gt;&lt;td&gt;88s&lt;/td&gt;&lt;td&gt;6753s&lt;/td&gt;&lt;td&gt;77x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;557.xz_r&lt;/td&gt;&lt;td&gt;cld&lt;/td&gt;&lt;td&gt;5.08e10&lt;/td&gt;&lt;td&gt;9.16 GiB&lt;/td&gt;&lt;td&gt;1.55 bit&lt;/td&gt;&lt;td&gt;60s&lt;/td&gt;&lt;td&gt;1252s&lt;/td&gt;&lt;td&gt;21x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;557.xz_r&lt;/td&gt;&lt;td&gt;cpu2006docs&lt;/td&gt;&lt;td&gt;1.84e11&lt;/td&gt;&lt;td&gt;7.80 GiB&lt;/td&gt;&lt;td&gt;0.36 bit&lt;/td&gt;&lt;td&gt;65s&lt;/td&gt;&lt;td&gt;3923s&lt;/td&gt;&lt;td&gt;60x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;557.xz_r&lt;/td&gt;&lt;td&gt;input&lt;/td&gt;&lt;td&gt;7.96e10&lt;/td&gt;&lt;td&gt;10.5 GiB&lt;/td&gt;&lt;td&gt;1.14 bit&lt;/td&gt;&lt;td&gt;55s&lt;/td&gt;&lt;td&gt;1842s&lt;/td&gt;&lt;td&gt;33x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;557.xz_r&lt;/td&gt;&lt;td&gt;合计&lt;/td&gt;&lt;td&gt;3.14e11&lt;/td&gt;&lt;td&gt;27.5 GiB&lt;/td&gt;&lt;td&gt;0.75 bit&lt;/td&gt;&lt;td&gt;180s&lt;/td&gt;&lt;td&gt;7017s&lt;/td&gt;&lt;td&gt;39x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;合计&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;td&gt;2.86e12&lt;/td&gt;&lt;td&gt;241 GiB&lt;/td&gt;&lt;td&gt;0.72 bit&lt;/td&gt;&lt;td&gt;1362s&lt;/td&gt;&lt;td&gt;77834s&lt;/td&gt;&lt;td&gt;57x&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;每分支的空间开销和在 i9-14900K 上测得的 MPKI（Mispredictions Per Kilo Instructions）有比较明显的正相关性：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;benchmark&lt;/th&gt;&lt;th&gt;MPKI&lt;/th&gt;&lt;th&gt;每分支空间开销&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;523.xalancbmk_r&lt;/td&gt;&lt;td&gt;0.84&lt;/td&gt;&lt;td&gt;0.12 bit&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;500.perlbench_r&lt;/td&gt;&lt;td&gt;0.95&lt;/td&gt;&lt;td&gt;0.22 bit&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;525.x264_r&lt;/td&gt;&lt;td&gt;1.06&lt;/td&gt;&lt;td&gt;0.46 bit&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;548.exchange2_r&lt;/td&gt;&lt;td&gt;2.66&lt;/td&gt;&lt;td&gt;0.75 bit&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;502.gcc_r&lt;/td&gt;&lt;td&gt;3.16&lt;/td&gt;&lt;td&gt;0.43 bit&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;531.deepsjeng_r&lt;/td&gt;&lt;td&gt;4.35&lt;/td&gt;&lt;td&gt;0.99 bit&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;520.omnetpp_r&lt;/td&gt;&lt;td&gt;4.47&lt;/td&gt;&lt;td&gt;0.53 bit&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;557.xz_r&lt;/td&gt;&lt;td&gt;5.35&lt;/td&gt;&lt;td&gt;0.75 bit&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;541.leela_r&lt;/td&gt;&lt;td&gt;12.61&lt;/td&gt;&lt;td&gt;1.92 bit&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;505.mcf_r&lt;/td&gt;&lt;td&gt;13.24&lt;/td&gt;&lt;td&gt;1.20 bit&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description><link>https://jia.je/software/2025/04/10/cbp-experiments/</link> <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2025/04/10/cbp-experiments/</guid> </item> <item> <title>Thread Local Storage (TLS) 实现探究</title> <category>glibc</category> <category>linux</category> <category>software</category> <category>tls</category> <description>&lt;h1 id=&#34;thread-local-storage-tls-实现探究&#34;&gt;Thread Local Storage (TLS) 实现探究&lt;a class=&#34;headerlink&#34; href=&#34;#thread-local-storage-tls-实现探究&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;TLS 是 thread local storage 的缩写，可以很方便地存储一些 per-thread 的数据，但它内部是怎么实现的呢？本文对 glibc 2.31 版本的 TLS 实现进行探究。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;__thread&#34;&gt;__thread&lt;a class=&#34;headerlink&#34; href=&#34;#__thread&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;首先来看 TLS 在 C 中是怎么使用的：用 &lt;code&gt;__thread&lt;/code&gt; 标记一个全局变量（注：进入 C11/C++11 标准的用法是用 &lt;code&gt;thread_local&lt;/code&gt; 来标记），那么它就会保存在 TLS 当中，每个线程都有一份：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;__thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么编译器在生成访问这个 TLS 全局变量时，生成的指令也不同。以下面的代码为例：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;global_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;__thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;global&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;global_data&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-5&#34;&gt;&lt;a id=&#34;__codelineno-1-5&#34; name=&#34;__codelineno-1-5&#34; href=&#34;#__codelineno-1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成的 amd64 汇编如下：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.text&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;global:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;global_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-5&#34;&gt;&lt;a id=&#34;__codelineno-2-5&#34; name=&#34;__codelineno-2-5&#34; href=&#34;#__codelineno-2-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-6&#34;&gt;&lt;a id=&#34;__codelineno-2-6&#34; name=&#34;__codelineno-2-6&#34; href=&#34;#__codelineno-2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;tls:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-7&#34;&gt;&lt;a id=&#34;__codelineno-2-7&#34; name=&#34;__codelineno-2-7&#34; href=&#34;#__codelineno-2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;tls_data@tpoff&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-8&#34;&gt;&lt;a id=&#34;__codelineno-2-8&#34; name=&#34;__codelineno-2-8&#34; href=&#34;#__codelineno-2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-9&#34;&gt;&lt;a id=&#34;__codelineno-2-9&#34; name=&#34;__codelineno-2-9&#34; href=&#34;#__codelineno-2-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-10&#34;&gt;&lt;a id=&#34;__codelineno-2-10&#34; name=&#34;__codelineno-2-10&#34; href=&#34;#__codelineno-2-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.tbss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;awT&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;@nobits&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-11&#34;&gt;&lt;a id=&#34;__codelineno-2-11&#34; name=&#34;__codelineno-2-11&#34; href=&#34;#__codelineno-2-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;tls_data:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-12&#34;&gt;&lt;a id=&#34;__codelineno-2-12&#34; name=&#34;__codelineno-2-12&#34; href=&#34;#__codelineno-2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.zero&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-13&#34;&gt;&lt;a id=&#34;__codelineno-2-13&#34; name=&#34;__codelineno-2-13&#34; href=&#34;#__codelineno-2-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-14&#34;&gt;&lt;a id=&#34;__codelineno-2-14&#34; name=&#34;__codelineno-2-14&#34; href=&#34;#__codelineno-2-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.bss&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-15&#34;&gt;&lt;a id=&#34;__codelineno-2-15&#34; name=&#34;__codelineno-2-15&#34; href=&#34;#__codelineno-2-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;global_data:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-16&#34;&gt;&lt;a id=&#34;__codelineno-2-16&#34; name=&#34;__codelineno-2-16&#34; href=&#34;#__codelineno-2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.zero&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问全局变量的时候，采用的是典型的 PC-relative 方式来找到全局变量 &lt;code&gt;global_data&lt;/code&gt; 的地址；访问 thread local 变量的时候，可以看到它采用了一个比较少见的写法：&lt;code&gt;%fs:tls_data@tpoff&lt;/code&gt;，它的意思是由链接器计算出 &lt;code&gt;tls_data&lt;/code&gt; 相对 &lt;code&gt;%fs&lt;/code&gt; 段寄存器的偏移，然后直接写到指令的偏移里。链接以上程序，可以看到最终的二进制是：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;err&#34;&gt;0000000000001140&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;global&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-2&#34;&gt;&lt;a id=&#34;__codelineno-3-2&#34; name=&#34;__codelineno-3-2&#34; href=&#34;#__codelineno-3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;1140:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;89&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ce&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x2ece&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 4014 &amp;lt;global_data&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-3&#34;&gt;&lt;a id=&#34;__codelineno-3-3&#34; name=&#34;__codelineno-3-3&#34; href=&#34;#__codelineno-3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;1146:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-4&#34;&gt;&lt;a id=&#34;__codelineno-3-4&#34; name=&#34;__codelineno-3-4&#34; href=&#34;#__codelineno-3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;1147:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;84&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;nopw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-5&#34;&gt;&lt;a id=&#34;__codelineno-3-5&#34; name=&#34;__codelineno-3-5&#34; href=&#34;#__codelineno-3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;114&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;e:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;00&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-6&#34;&gt;&lt;a id=&#34;__codelineno-3-6&#34; name=&#34;__codelineno-3-6&#34; href=&#34;#__codelineno-3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-7&#34;&gt;&lt;a id=&#34;__codelineno-3-7&#34; name=&#34;__codelineno-3-7&#34; href=&#34;#__codelineno-3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;err&#34;&gt;0000000000001150&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-8&#34;&gt;&lt;a id=&#34;__codelineno-3-8&#34; name=&#34;__codelineno-3-8&#34; href=&#34;#__codelineno-3-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;1150:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;89&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;fc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ff&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ff&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0xfffffffffffffffc&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-9&#34;&gt;&lt;a id=&#34;__codelineno-3-9&#34; name=&#34;__codelineno-3-9&#34; href=&#34;#__codelineno-3-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;1157:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ff&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-10&#34;&gt;&lt;a id=&#34;__codelineno-3-10&#34; name=&#34;__codelineno-3-10&#34; href=&#34;#__codelineno-3-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;1158:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可见最终 &lt;code&gt;global_data&lt;/code&gt; 被放到了相对二进制开头 &lt;code&gt;0x4014&lt;/code&gt; 的地方，而 &lt;code&gt;tls_data&lt;/code&gt; 被放到了 &lt;code&gt;%fs:-0x4&lt;/code&gt; 的位置。那么这个 &lt;code&gt;%fs&lt;/code&gt; 是怎么得到的，&lt;code&gt;-0x4&lt;/code&gt; 的偏移又是怎么计算的呢？下面来进一步研究背后的实现。&lt;/p&gt;&lt;h2 id=&#34;tls-的组织方式&#34;&gt;TLS 的组织方式&lt;a class=&#34;headerlink&#34; href=&#34;#tls-的组织方式&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;首先 TLS 是 per-thread 的存储，意味着每个新线程，都有一个 buffer 需要保存 TLS 的数据。那么这个数据所在的位置，也需要一些 per-thread 的高效方式来访问，在 amd64 上，它是通过 &lt;code&gt;%fs&lt;/code&gt; 段寄存器来维护的。那么 TLS 可能有哪些来源呢？首先可执行程序自己可能会用一些，它通过 DT_NEEDED 由动态链接器在启动时加载的动态库也有一些（比如 &lt;a href=&#34;../../../03/30/glibc-allocator/&#34;&gt;glibc 的 tcache&lt;/a&gt;），此外运行时 dlopen 了一些动态库也会有 TLS 的需求。为了满足这些需求，需要设计一个 TLS 的结构，既能满足这些在启动时已知的可执行程序和动态库的需求，又能满足运行时动态加载的新动态库的需求。&lt;/p&gt;&lt;p&gt;这里面可执行程序和启动时加载的动态库的需求是明确的，不会变的，因此可以由动态链接器在加载的时候，直接给可执行程序和动态库分配 TLS 空间：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;比如可执行程序本身需要 0x10 字节的 TLS 空间，它启动时加载两个动态库 libc.so.6 和 libstdc++.so.6，期中 libc.so.6 需要 0x20 字节的 TLS 空间，libstdc++.so.6 需要 0x30 字节的 TLS 空间&lt;/li&gt;&lt;li&gt;加起来一共需要 0x60 字节的 TLS 空间，那么在创建线程的时候，创建好 0x60 字节的 TLS 空间，按照顺序进行分配：&lt;ol&gt;&lt;li&gt;0x00-0x10: 属于可执行程序&lt;/li&gt;&lt;li&gt;0x10-0x30: 属于 libc.so.6&lt;/li&gt;&lt;li&gt;0x30-0x60: 属于 libstdc++.so.6&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;分配好这个空间以后，因为 libc.so.6 无法提前预知它会被分配到哪个位置，所以需要一次重定位，把 libc.so.6 里的 TLS 空间的使用重定位到分配后的位置，例如 libc.so.6 的 0x20 的 TLS 空间内的开头 8 字节，现在在整个 TLS 空间内的偏移就是 &lt;code&gt;0x20 + 8 = 0x28&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;但是 dlopen 动态加载进来的动态库怎么办呢？这些动态库的数量可以动态变化，可以加载也可以卸载，再这么线性分配就不合适了，这时候就需要给每个 dlopen 得到的动态库分配独立的 TLS 空间。既然是动态分配的空间，那么这些独立的 TLS 空间的地址，不同线程不同，不能通过一个基地址加固定偏移的方式来计算，就需要提供一个机制来找到各个动态库的 TLS 空间的地址。&lt;/p&gt;&lt;p&gt;glibc 的实现中，它把各个动态库的 TLS 空间的起始地址记录在一个 &lt;code&gt;dtv&lt;/code&gt; 数组中，并且提供一个 &lt;code&gt;__tls_get_addr&lt;/code&gt; 函数来查询动态库的 TLS 空间内指定 offset 的实际地址：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;dl_tls_index&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-2&#34;&gt;&lt;a id=&#34;__codelineno-4-2&#34; name=&#34;__codelineno-4-2&#34; href=&#34;#__codelineno-4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-3&#34;&gt;&lt;a id=&#34;__codelineno-4-3&#34; name=&#34;__codelineno-4-3&#34; href=&#34;#__codelineno-4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ti_module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-4&#34;&gt;&lt;a id=&#34;__codelineno-4-4&#34; name=&#34;__codelineno-4-4&#34; href=&#34;#__codelineno-4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ti_offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-5&#34;&gt;&lt;a id=&#34;__codelineno-4-5&#34; name=&#34;__codelineno-4-5&#34; href=&#34;#__codelineno-4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-6&#34;&gt;&lt;a id=&#34;__codelineno-4-6&#34; name=&#34;__codelineno-4-6&#34; href=&#34;#__codelineno-4-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-7&#34;&gt;&lt;a id=&#34;__codelineno-4-7&#34; name=&#34;__codelineno-4-7&#34; href=&#34;#__codelineno-4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-8&#34;&gt;&lt;a id=&#34;__codelineno-4-8&#34; name=&#34;__codelineno-4-8&#34; href=&#34;#__codelineno-4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;__tls_get_addr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_index&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ti&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-9&#34;&gt;&lt;a id=&#34;__codelineno-4-9&#34; name=&#34;__codelineno-4-9&#34; href=&#34;#__codelineno-4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-10&#34;&gt;&lt;a id=&#34;__codelineno-4-10&#34; name=&#34;__codelineno-4-10&#34; href=&#34;#__codelineno-4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtv_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtv&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;THREAD_DTV&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-11&#34;&gt;&lt;a id=&#34;__codelineno-4-11&#34; name=&#34;__codelineno-4-11&#34; href=&#34;#__codelineno-4-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-12&#34;&gt;&lt;a id=&#34;__codelineno-4-12&#34; name=&#34;__codelineno-4-12&#34; href=&#34;#__codelineno-4-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-13&#34;&gt;&lt;a id=&#34;__codelineno-4-13&#34; name=&#34;__codelineno-4-13&#34; href=&#34;#__codelineno-4-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-14&#34;&gt;&lt;a id=&#34;__codelineno-4-14&#34; name=&#34;__codelineno-4-14&#34; href=&#34;#__codelineno-4-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ti&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ti_module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-15&#34;&gt;&lt;a id=&#34;__codelineno-4-15&#34; name=&#34;__codelineno-4-15&#34; href=&#34;#__codelineno-4-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-16&#34;&gt;&lt;a id=&#34;__codelineno-4-16&#34; name=&#34;__codelineno-4-16&#34; href=&#34;#__codelineno-4-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-17&#34;&gt;&lt;a id=&#34;__codelineno-4-17&#34; name=&#34;__codelineno-4-17&#34; href=&#34;#__codelineno-4-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-18&#34;&gt;&lt;a id=&#34;__codelineno-4-18&#34; name=&#34;__codelineno-4-18&#34; href=&#34;#__codelineno-4-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ti&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ti_offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-19&#34;&gt;&lt;a id=&#34;__codelineno-4-19&#34; name=&#34;__codelineno-4-19&#34; href=&#34;#__codelineno-4-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;dtv&lt;/code&gt; 数组的指针保存在 &lt;code&gt;struct pthread&lt;/code&gt;（即 Thread Control Block (TCB)）中，而这个 &lt;code&gt;struct pthread&lt;/code&gt; 就保存在 &lt;code&gt;%fs&lt;/code&gt; 段寄存器指向的地址上：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-5-1&#34;&gt;&lt;a id=&#34;__codelineno-5-1&#34; name=&#34;__codelineno-5-1&#34; href=&#34;#__codelineno-5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;pthread&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-2&#34;&gt;&lt;a id=&#34;__codelineno-5-2&#34; name=&#34;__codelineno-5-2&#34; href=&#34;#__codelineno-5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-3&#34;&gt;&lt;a id=&#34;__codelineno-5-3&#34; name=&#34;__codelineno-5-3&#34; href=&#34;#__codelineno-5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcbhead_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-4&#34;&gt;&lt;a id=&#34;__codelineno-5-4&#34; name=&#34;__codelineno-5-4&#34; href=&#34;#__codelineno-5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-5&#34;&gt;&lt;a id=&#34;__codelineno-5-5&#34; name=&#34;__codelineno-5-5&#34; href=&#34;#__codelineno-5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-6&#34;&gt;&lt;a id=&#34;__codelineno-5-6&#34; name=&#34;__codelineno-5-6&#34; href=&#34;#__codelineno-5-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-7&#34;&gt;&lt;a id=&#34;__codelineno-5-7&#34; name=&#34;__codelineno-5-7&#34; href=&#34;#__codelineno-5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-8&#34;&gt;&lt;a id=&#34;__codelineno-5-8&#34; name=&#34;__codelineno-5-8&#34; href=&#34;#__codelineno-5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-9&#34;&gt;&lt;a id=&#34;__codelineno-5-9&#34; name=&#34;__codelineno-5-9&#34; href=&#34;#__codelineno-5-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-10&#34;&gt;&lt;a id=&#34;__codelineno-5-10&#34; name=&#34;__codelineno-5-10&#34; href=&#34;#__codelineno-5-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtv_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-11&#34;&gt;&lt;a id=&#34;__codelineno-5-11&#34; name=&#34;__codelineno-5-11&#34; href=&#34;#__codelineno-5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-12&#34;&gt;&lt;a id=&#34;__codelineno-5-12&#34; name=&#34;__codelineno-5-12&#34; href=&#34;#__codelineno-5-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uintptr_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stack_guard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-13&#34;&gt;&lt;a id=&#34;__codelineno-5-13&#34; name=&#34;__codelineno-5-13&#34; href=&#34;#__codelineno-5-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-14&#34;&gt;&lt;a id=&#34;__codelineno-5-14&#34; name=&#34;__codelineno-5-14&#34; href=&#34;#__codelineno-5-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcbhead_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-15&#34;&gt;&lt;a id=&#34;__codelineno-5-15&#34; name=&#34;__codelineno-5-15&#34; href=&#34;#__codelineno-5-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-16&#34;&gt;&lt;a id=&#34;__codelineno-5-16&#34; name=&#34;__codelineno-5-16&#34; href=&#34;#__codelineno-5-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;# define THREAD_DTV() \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-17&#34;&gt;&lt;a id=&#34;__codelineno-5-17&#34; name=&#34;__codelineno-5-17&#34; href=&#34;#__codelineno-5-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; ({ struct pthread *__pd; \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-18&#34;&gt;&lt;a id=&#34;__codelineno-5-18&#34; name=&#34;__codelineno-5-18&#34; href=&#34;#__codelineno-5-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; THREAD_GETMEM (__pd, header.dtv); })&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;P.S. stack protector 所使用的 canary 的值就保存在 &lt;code&gt;pthread.header.stack_guard&lt;/code&gt; 字段中，也就是在 &lt;code&gt;%fs:40&lt;/code&gt; 位置。&lt;/p&gt;&lt;p&gt;而之前提到的可执行程序本身的 TLS 空间以及程序启动时加载的动态库的 TLS 空间，实际上是保存在 &lt;code&gt;struct thread&lt;/code&gt; 也就是 TCB 前面的部分，从高地址往低地址分配（图片来源：&lt;a href=&#34;https://www.akkadia.org/drepper/tls.pdf&#34;&gt;ELF Handling For Thread-Local Storage&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../tls-internals-ds.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;图中 &lt;span class=&#34;arithmatex&#34;&gt;\(tp_t\)&lt;/span&gt; 在 amd64 下就是 &lt;code&gt;%fs&lt;/code&gt; 段寄存器，它直接指向的就是 &lt;code&gt;struct thread&lt;/code&gt; 也就是 TCB；从 &lt;code&gt;%fs&lt;/code&gt; 开始往低地址，先分配可执行程序本身的 TLS 空间（图中 &lt;span class=&#34;arithmatex&#34;&gt;\(tlsoffset_1\)&lt;/span&gt; 到 &lt;span class=&#34;arithmatex&#34;&gt;\(tp_t\)&lt;/span&gt; 的范围），后分配程序启动时加载的动态库的 TLS 空间（图中 &lt;span class=&#34;arithmatex&#34;&gt;\(tlsoffset_1\)&lt;/span&gt; 到 &lt;span class=&#34;arithmatex&#34;&gt;\(tlsoffset_2\)&lt;/span&gt; 以及 &lt;span class=&#34;arithmatex&#34;&gt;\(tlsoffset_3\)&lt;/span&gt; 到 &lt;span class=&#34;arithmatex&#34;&gt;\(tlsoffset_2\)&lt;/span&gt; 的范围）。注意这些偏移对于每个线程都是相同的，只是不同线程的 &lt;code&gt;%fs&lt;/code&gt; 寄存器不同。&lt;/p&gt;&lt;p&gt;而对于 dlopen 动态加载的动态库，则 TLS 空间需要动态分配，然后通过 &lt;code&gt;dtv&lt;/code&gt; 数组来索引（图中 &lt;span class=&#34;arithmatex&#34;&gt;\(dtv_{t,4}\)&lt;/span&gt; 和 &lt;span class=&#34;arithmatex&#34;&gt;\(dtv_{t,5}\)&lt;/span&gt;），因此无法通过重定位修正，而是要在运行时通过 &lt;code&gt;__tls_get_addr&lt;/code&gt; 函数获取地址。为了让 &lt;code&gt;__tls_get_addr&lt;/code&gt; 更具有通用性，&lt;code&gt;dtv&lt;/code&gt; 数组也记录了分配在 &lt;code&gt;%fs&lt;/code&gt; 指向的 TCB 更低地址的可执行程序和程序启动时加载的动态库的 TLS 空间，此时 &lt;code&gt;__tls_get_addr&lt;/code&gt; 可以查到所有 TLS 变量的地址。每个动态库在 &lt;code&gt;dtv&lt;/code&gt; 数组中都记录了信息，那么这个动态库在 &lt;code&gt;dtv&lt;/code&gt; 数组中的下标，记为这个动态库的编号（module id），后面会多次出现这个概念。&lt;/p&gt;&lt;p&gt;知道了 TLS 的组织方式后，接下来观察编译器、链接器和动态链接器是如何配合着让代码可以找到正确的 TLS 变量的地址。&lt;/p&gt;&lt;h2 id=&#34;可执行程序&#34;&gt;可执行程序&lt;a class=&#34;headerlink&#34; href=&#34;#可执行程序&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;首先来看一个简单的场景：可执行程序直接访问自己定义的 TLS 变量。前面提到，可执行程序的 TLS 空间直接保存到 &lt;code&gt;%fs&lt;/code&gt; 往下的地址，因此可执行程序的 TLS 变量相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移，是可以提前计算得到的。下面看一个例子：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-6-1&#34;&gt;&lt;a id=&#34;__codelineno-6-1&#34; name=&#34;__codelineno-6-1&#34; href=&#34;#__codelineno-6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;__thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-2&#34;&gt;&lt;a id=&#34;__codelineno-6-2&#34; name=&#34;__codelineno-6-2&#34; href=&#34;#__codelineno-6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;__thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-3&#34;&gt;&lt;a id=&#34;__codelineno-6-3&#34; name=&#34;__codelineno-6-3&#34; href=&#34;#__codelineno-6-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-4&#34;&gt;&lt;a id=&#34;__codelineno-6-4&#34; name=&#34;__codelineno-6-4&#34; href=&#34;#__codelineno-6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read_tls_data1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-5&#34;&gt;&lt;a id=&#34;__codelineno-6-5&#34; name=&#34;__codelineno-6-5&#34; href=&#34;#__codelineno-6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read_tls_data2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-6&#34;&gt;&lt;a id=&#34;__codelineno-6-6&#34; name=&#34;__codelineno-6-6&#34; href=&#34;#__codelineno-6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译得到的汇编：&lt;/p&gt;&lt;div class=&#34;language-s highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-7-1&#34;&gt;&lt;a id=&#34;__codelineno-7-1&#34; name=&#34;__codelineno-7-1&#34; href=&#34;#__codelineno-7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;read_tls_data1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-2&#34;&gt;&lt;a id=&#34;__codelineno-7-2&#34; name=&#34;__codelineno-7-2&#34; href=&#34;#__codelineno-7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;movl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%fs:tls_data1@tpoff, %&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-3&#34;&gt;&lt;a id=&#34;__codelineno-7-3&#34; name=&#34;__codelineno-7-3&#34; href=&#34;#__codelineno-7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-4&#34;&gt;&lt;a id=&#34;__codelineno-7-4&#34; name=&#34;__codelineno-7-4&#34; href=&#34;#__codelineno-7-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-5&#34;&gt;&lt;a id=&#34;__codelineno-7-5&#34; name=&#34;__codelineno-7-5&#34; href=&#34;#__codelineno-7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;read_tls_data2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-6&#34;&gt;&lt;a id=&#34;__codelineno-7-6&#34; name=&#34;__codelineno-7-6&#34; href=&#34;#__codelineno-7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;movl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%fs:tls_data2@tpoff, %&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-7&#34;&gt;&lt;a id=&#34;__codelineno-7-7&#34; name=&#34;__codelineno-7-7&#34; href=&#34;#__codelineno-7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就是在本文一开头就看到的语法：&lt;code&gt;%fs:symbol@tpoff&lt;/code&gt;，它会对应一个 &lt;code&gt;R_X86_64_TPOFF32&lt;/code&gt; 类型的重定位，告诉链接器，这是一个 TLS 变量，并且它的偏移在静态链接的时候就可以计算出来，并且这个偏移会直接写到 &lt;code&gt;mov&lt;/code&gt; 指令的立即数内：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-8-1&#34;&gt;&lt;a id=&#34;__codelineno-8-1&#34; name=&#34;__codelineno-8-1&#34; href=&#34;#__codelineno-8-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;gcc&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-O2&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.o&lt;/span&gt;&lt;span id=&#34;__span-8-2&#34;&gt;&lt;a id=&#34;__codelineno-8-2&#34; name=&#34;__codelineno-8-2&#34; href=&#34;#__codelineno-8-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;objdump&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-r&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.o&lt;/span&gt;&lt;span id=&#34;__span-8-3&#34;&gt;&lt;a id=&#34;__codelineno-8-3&#34; name=&#34;__codelineno-8-3&#34; href=&#34;#__codelineno-8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# omitted&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-4&#34;&gt;&lt;a id=&#34;__codelineno-8-4&#34; name=&#34;__codelineno-8-4&#34; href=&#34;#__codelineno-8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data1&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-8-5&#34;&gt;&lt;a id=&#34;__codelineno-8-5&#34; name=&#34;__codelineno-8-5&#34; href=&#34;#__codelineno-8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%fs:0x0,%eax&lt;/span&gt;&lt;span id=&#34;__span-8-6&#34;&gt;&lt;a id=&#34;__codelineno-8-6&#34; name=&#34;__codelineno-8-6&#34; href=&#34;#__codelineno-8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-7&#34;&gt;&lt;a id=&#34;__codelineno-8-7&#34; name=&#34;__codelineno-8-7&#34; href=&#34;#__codelineno-8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_TPOFF32&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1&lt;/span&gt;&lt;span id=&#34;__span-8-8&#34;&gt;&lt;a id=&#34;__codelineno-8-8&#34; name=&#34;__codelineno-8-8&#34; href=&#34;#__codelineno-8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-8-9&#34;&gt;&lt;a id=&#34;__codelineno-8-9&#34; name=&#34;__codelineno-8-9&#34; href=&#34;#__codelineno-8-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nopl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-10&#34;&gt;&lt;a id=&#34;__codelineno-8-10&#34; name=&#34;__codelineno-8-10&#34; href=&#34;#__codelineno-8-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-11&#34;&gt;&lt;a id=&#34;__codelineno-8-11&#34; name=&#34;__codelineno-8-11&#34; href=&#34;#__codelineno-8-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000000010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data2&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-8-12&#34;&gt;&lt;a id=&#34;__codelineno-8-12&#34; name=&#34;__codelineno-8-12&#34; href=&#34;#__codelineno-8-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%fs:0x0,%eax&lt;/span&gt;&lt;span id=&#34;__span-8-13&#34;&gt;&lt;a id=&#34;__codelineno-8-13&#34; name=&#34;__codelineno-8-13&#34; href=&#34;#__codelineno-8-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;17&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-14&#34;&gt;&lt;a id=&#34;__codelineno-8-14&#34; name=&#34;__codelineno-8-14&#34; href=&#34;#__codelineno-8-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_TPOFF32&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data2&lt;/span&gt;&lt;span id=&#34;__span-8-15&#34;&gt;&lt;a id=&#34;__codelineno-8-15&#34; name=&#34;__codelineno-8-15&#34; href=&#34;#__codelineno-8-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;18&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-8-16&#34;&gt;&lt;a id=&#34;__codelineno-8-16&#34; name=&#34;__codelineno-8-16&#34; href=&#34;#__codelineno-8-16&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;gcc&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls&lt;/span&gt;&lt;span id=&#34;__span-8-17&#34;&gt;&lt;a id=&#34;__codelineno-8-17&#34; name=&#34;__codelineno-8-17&#34; href=&#34;#__codelineno-8-17&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;objdump&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls&lt;/span&gt;&lt;span id=&#34;__span-8-18&#34;&gt;&lt;a id=&#34;__codelineno-8-18&#34; name=&#34;__codelineno-8-18&#34; href=&#34;#__codelineno-8-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# omitted&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-19&#34;&gt;&lt;a id=&#34;__codelineno-8-19&#34; name=&#34;__codelineno-8-19&#34; href=&#34;#__codelineno-8-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000001140&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data1&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-8-20&#34;&gt;&lt;a id=&#34;__codelineno-8-20&#34; name=&#34;__codelineno-8-20&#34; href=&#34;#__codelineno-8-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1140&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;fc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%fs:0xfffffffffffffffc,%eax&lt;/span&gt;&lt;span id=&#34;__span-8-21&#34;&gt;&lt;a id=&#34;__codelineno-8-21&#34; name=&#34;__codelineno-8-21&#34; href=&#34;#__codelineno-8-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1147&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;/span&gt;&lt;span id=&#34;__span-8-22&#34;&gt;&lt;a id=&#34;__codelineno-8-22&#34; name=&#34;__codelineno-8-22&#34; href=&#34;#__codelineno-8-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1148&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-8-23&#34;&gt;&lt;a id=&#34;__codelineno-8-23&#34; name=&#34;__codelineno-8-23&#34; href=&#34;#__codelineno-8-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1149&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nopl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-24&#34;&gt;&lt;a id=&#34;__codelineno-8-24&#34; name=&#34;__codelineno-8-24&#34; href=&#34;#__codelineno-8-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-25&#34;&gt;&lt;a id=&#34;__codelineno-8-25&#34; name=&#34;__codelineno-8-25&#34; href=&#34;#__codelineno-8-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000001150&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data2&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-8-26&#34;&gt;&lt;a id=&#34;__codelineno-8-26&#34; name=&#34;__codelineno-8-26&#34; href=&#34;#__codelineno-8-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1150&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;f8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%fs:0xfffffffffffffff8,%eax&lt;/span&gt;&lt;span id=&#34;__span-8-27&#34;&gt;&lt;a id=&#34;__codelineno-8-27&#34; name=&#34;__codelineno-8-27&#34; href=&#34;#__codelineno-8-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1157&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;/span&gt;&lt;span id=&#34;__span-8-28&#34;&gt;&lt;a id=&#34;__codelineno-8-28&#34; name=&#34;__codelineno-8-28&#34; href=&#34;#__codelineno-8-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1158&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-8-29&#34;&gt;&lt;a id=&#34;__codelineno-8-29&#34; name=&#34;__codelineno-8-29&#34; href=&#34;#__codelineno-8-29&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;objdump&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-t&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls&lt;/span&gt;&lt;span id=&#34;__span-8-30&#34;&gt;&lt;a id=&#34;__codelineno-8-30&#34; name=&#34;__codelineno-8-30&#34; href=&#34;#__codelineno-8-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# omitted&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-31&#34;&gt;&lt;a id=&#34;__codelineno-8-31&#34; name=&#34;__codelineno-8-31&#34; href=&#34;#__codelineno-8-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;g&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.tbss&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000004&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data2&lt;/span&gt;&lt;span id=&#34;__span-8-32&#34;&gt;&lt;a id=&#34;__codelineno-8-32&#34; name=&#34;__codelineno-8-32&#34; href=&#34;#__codelineno-8-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000000004&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;g&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.tbss&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0000000000000004&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据以上输出可以看到，可执行程序自己使用了 8 字节的 TLS 空间，其中低 4 字节对应 &lt;code&gt;tls_data2&lt;/code&gt;，高 4 字节对应 &lt;code&gt;tls_data1&lt;/code&gt;；根据这个信息，链接器就可以推断出 &lt;code&gt;tls_data2&lt;/code&gt; 保存在 &lt;code&gt;%fs-0x8&lt;/code&gt; 的位置，&lt;code&gt;tls_data1&lt;/code&gt; 保存在 &lt;code&gt;%fs-0x4&lt;/code&gt; 的位置，直接把这个偏移编码到 &lt;code&gt;mov&lt;/code&gt; 指令内。这样，运行时开销是最小的。&lt;/p&gt;&lt;p&gt;这一种访问 TLS 的情况，也叫做 local exec TLS model：它只用于可执行程序访问可执行程序自己的 TLS 变量的场景。可执行程序的 TLS 空间总是紧贴着 &lt;code&gt;%fs&lt;/code&gt; 分配，不会受到动态库的影响，因此可以提前计算出它自己的 TLS 变量的偏移。&lt;/p&gt;&lt;h2 id=&#34;动态库&#34;&gt;动态库&lt;a class=&#34;headerlink&#34; href=&#34;#动态库&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;接下来观察另一种情况：动态库使用动态库自己的 TLS 变量。按照前面的分析，有两种情况：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第一种情况是，动态库是在程序启动时被动态链接器加载，那么它会被分配在 &lt;code&gt;%fs&lt;/code&gt; 往低地址的空间。虽然相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移无法在链接阶段就提前得知，但是动态链接器会给它分配连续的 TLS 空间，从而可以计算出它的 TLS 空间相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移，于是动态链接器可以帮助完成剩下的重定位。&lt;/li&gt;&lt;li&gt;第二种情况是，动态库是由 dlopen 被加载，那么它被分配的 TLS 空间的地址就无法从 &lt;code&gt;%fs&lt;/code&gt; 直接计算得出，此时就需要借助 &lt;code&gt;__tls_get_addr&lt;/code&gt; 函数的帮助。&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;initial-exec-tls-model&#34;&gt;initial exec TLS model&lt;a class=&#34;headerlink&#34; href=&#34;#initial-exec-tls-model&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;首先来看第一种情况，它也被叫做 initial exec TLS model。还是从例子开始看起：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-9-1&#34;&gt;&lt;a id=&#34;__codelineno-9-1&#34; name=&#34;__codelineno-9-1&#34; href=&#34;#__codelineno-9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;__thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-2&#34;&gt;&lt;a id=&#34;__codelineno-9-2&#34; name=&#34;__codelineno-9-2&#34; href=&#34;#__codelineno-9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;__thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-3&#34;&gt;&lt;a id=&#34;__codelineno-9-3&#34; name=&#34;__codelineno-9-3&#34; href=&#34;#__codelineno-9-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-4&#34;&gt;&lt;a id=&#34;__codelineno-9-4&#34; name=&#34;__codelineno-9-4&#34; href=&#34;#__codelineno-9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read_tls_data1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-5&#34;&gt;&lt;a id=&#34;__codelineno-9-5&#34; name=&#34;__codelineno-9-5&#34; href=&#34;#__codelineno-9-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read_tls_data2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先观察编译出来的汇编：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-10-1&#34;&gt;&lt;a id=&#34;__codelineno-10-1&#34; name=&#34;__codelineno-10-1&#34; href=&#34;#__codelineno-10-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;gcc&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-ftls-model&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;initial-exec&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-fPIC&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-O2&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.c&lt;/span&gt;&lt;span id=&#34;__span-10-2&#34;&gt;&lt;a id=&#34;__codelineno-10-2&#34; name=&#34;__codelineno-10-2&#34; href=&#34;#__codelineno-10-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cat&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.s&lt;/span&gt;&lt;span id=&#34;__span-10-3&#34;&gt;&lt;a id=&#34;__codelineno-10-3&#34; name=&#34;__codelineno-10-3&#34; href=&#34;#__codelineno-10-3&#34;&gt;&lt;/a&gt;read_tls_data1:&lt;/span&gt;&lt;span id=&#34;__span-10-4&#34;&gt;&lt;a id=&#34;__codelineno-10-4&#34; name=&#34;__codelineno-10-4&#34; href=&#34;#__codelineno-10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;movq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1@gottpoff&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rax&lt;/span&gt;&lt;span id=&#34;__span-10-5&#34;&gt;&lt;a id=&#34;__codelineno-10-5&#34; name=&#34;__codelineno-10-5&#34; href=&#34;#__codelineno-10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;movl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%fs:&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%eax&lt;/span&gt;&lt;span id=&#34;__span-10-6&#34;&gt;&lt;a id=&#34;__codelineno-10-6&#34; name=&#34;__codelineno-10-6&#34; href=&#34;#__codelineno-10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-10-7&#34;&gt;&lt;a id=&#34;__codelineno-10-7&#34; name=&#34;__codelineno-10-7&#34; href=&#34;#__codelineno-10-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-8&#34;&gt;&lt;a id=&#34;__codelineno-10-8&#34; name=&#34;__codelineno-10-8&#34; href=&#34;#__codelineno-10-8&#34;&gt;&lt;/a&gt;read_tls_data2:&lt;/span&gt;&lt;span id=&#34;__span-10-9&#34;&gt;&lt;a id=&#34;__codelineno-10-9&#34; name=&#34;__codelineno-10-9&#34; href=&#34;#__codelineno-10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;movq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data2@gottpoff&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rax&lt;/span&gt;&lt;span id=&#34;__span-10-10&#34;&gt;&lt;a id=&#34;__codelineno-10-10&#34; name=&#34;__codelineno-10-10&#34; href=&#34;#__codelineno-10-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;movl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%fs:&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%eax&lt;/span&gt;&lt;span id=&#34;__span-10-11&#34;&gt;&lt;a id=&#34;__codelineno-10-11&#34; name=&#34;__codelineno-10-11&#34; href=&#34;#__codelineno-10-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，这次生成的汇编不同了：它首先从 &lt;code&gt;symbol@gottpoff(%rip)&lt;/code&gt; 读取一个 offset 到 &lt;code&gt;%rax&lt;/code&gt; 寄存器，再从 &lt;code&gt;%fs:(%rax)&lt;/code&gt; 地址读取 TLS 变量的值。上面提到，在 initial exec TLS model 下，TLS 空间是可以相对 &lt;code&gt;%fs&lt;/code&gt; 寻址的，但是 offset 无法提前得知，需要由动态链接器完成重定位。&lt;/p&gt;&lt;p&gt;回忆之前在&lt;a href=&#34;../../../../2024/04/07/write-a-linker-4/&#34;&gt;《开发一个链接器（4）》&lt;/a&gt;一文中，当动态库想要获得某个只有动态链接器才知道的地址，就会把它预留好位置放到 &lt;code&gt;.got&lt;/code&gt; 表当中，并且输出一个 dynamic relocation，告诉动态链接器如何把地址计算出来并填进去。在这里，原理也是类似的，只不过是在 &lt;code&gt;.got&lt;/code&gt; 表中预留了一个空间来保存 TLS 变量相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移。下面观察对象文件内是怎么记录这个信息的：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-11-1&#34;&gt;&lt;a id=&#34;__codelineno-11-1&#34; name=&#34;__codelineno-11-1&#34; href=&#34;#__codelineno-11-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;as&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.o&lt;/span&gt;&lt;span id=&#34;__span-11-2&#34;&gt;&lt;a id=&#34;__codelineno-11-2&#34; name=&#34;__codelineno-11-2&#34; href=&#34;#__codelineno-11-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;objdump&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-r&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.o&lt;/span&gt;&lt;span id=&#34;__span-11-3&#34;&gt;&lt;a id=&#34;__codelineno-11-3&#34; name=&#34;__codelineno-11-3&#34; href=&#34;#__codelineno-11-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# omitted&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-4&#34;&gt;&lt;a id=&#34;__codelineno-11-4&#34; name=&#34;__codelineno-11-4&#34; href=&#34;#__codelineno-11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data1&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-11-5&#34;&gt;&lt;a id=&#34;__codelineno-11-5&#34; name=&#34;__codelineno-11-5&#34; href=&#34;#__codelineno-11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%rax&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 7 &amp;lt;read_tls_data1+0x7&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-6&#34;&gt;&lt;a id=&#34;__codelineno-11-6&#34; name=&#34;__codelineno-11-6&#34; href=&#34;#__codelineno-11-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_GOTTPOFF&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1-0x4&lt;/span&gt;&lt;span id=&#34;__span-11-7&#34;&gt;&lt;a id=&#34;__codelineno-11-7&#34; name=&#34;__codelineno-11-7&#34; href=&#34;#__codelineno-11-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%fs:&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%eax&lt;/span&gt;&lt;span id=&#34;__span-11-8&#34;&gt;&lt;a id=&#34;__codelineno-11-8&#34; name=&#34;__codelineno-11-8&#34; href=&#34;#__codelineno-11-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;a:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-11-9&#34;&gt;&lt;a id=&#34;__codelineno-11-9&#34; name=&#34;__codelineno-11-9&#34; href=&#34;#__codelineno-11-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nopl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax,%rax,1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-10&#34;&gt;&lt;a id=&#34;__codelineno-11-10&#34; name=&#34;__codelineno-11-10&#34; href=&#34;#__codelineno-11-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-11&#34;&gt;&lt;a id=&#34;__codelineno-11-11&#34; name=&#34;__codelineno-11-11&#34; href=&#34;#__codelineno-11-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000000010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data2&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-11-12&#34;&gt;&lt;a id=&#34;__codelineno-11-12&#34; name=&#34;__codelineno-11-12&#34; href=&#34;#__codelineno-11-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%rax&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 17 &amp;lt;read_tls_data2+0x7&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-13&#34;&gt;&lt;a id=&#34;__codelineno-11-13&#34; name=&#34;__codelineno-11-13&#34; href=&#34;#__codelineno-11-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_GOTTPOFF&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data2-0x4&lt;/span&gt;&lt;span id=&#34;__span-11-14&#34;&gt;&lt;a id=&#34;__codelineno-11-14&#34; name=&#34;__codelineno-11-14&#34; href=&#34;#__codelineno-11-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;17&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%fs:&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%eax&lt;/span&gt;&lt;span id=&#34;__span-11-15&#34;&gt;&lt;a id=&#34;__codelineno-11-15&#34; name=&#34;__codelineno-11-15&#34; href=&#34;#__codelineno-11-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1a:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，这时候它在 &lt;code&gt;mov&lt;/code&gt; 指令的立即数位置创建了一个 &lt;code&gt;R_X86_64_GOTTPOFF&lt;/code&gt; 类型的重定位，这是告诉链接器：创建一个 &lt;code&gt;.got&lt;/code&gt; entry，里面由动态链接器填写对应 symbol 在运行时相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移，然后链接器把 &lt;code&gt;.got&lt;/code&gt; entry 相对 &lt;code&gt;mov&lt;/code&gt; 指令的偏移写到 &lt;code&gt;mov&lt;/code&gt; 指令的立即数内。&lt;/p&gt;&lt;p&gt;至于为啥是 &lt;code&gt;symbol-0x4&lt;/code&gt; 而不是 &lt;code&gt;symbol&lt;/code&gt;，原因在之前&lt;a href=&#34;../../../../2024/03/30/write-a-linker-2/&#34;&gt;《开发一个链接器（2）》&lt;/a&gt; 已经出现过：x86 指令的立即数偏移是基于指令结尾的，而 relocation 指向的是立即数的起始地址，也就是指令结尾地址减去 4，那么立即数也要做相应的修正。&lt;/p&gt;&lt;p&gt;最后，观察链接器做的事情：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-12-1&#34;&gt;&lt;a id=&#34;__codelineno-12-1&#34; name=&#34;__codelineno-12-1&#34; href=&#34;#__codelineno-12-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;gcc&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-shared&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;libtls.so&lt;/span&gt;&lt;span id=&#34;__span-12-2&#34;&gt;&lt;a id=&#34;__codelineno-12-2&#34; name=&#34;__codelineno-12-2&#34; href=&#34;#__codelineno-12-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;objdump&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-D&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-R&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;libtls.so&lt;/span&gt;&lt;span id=&#34;__span-12-3&#34;&gt;&lt;a id=&#34;__codelineno-12-3&#34; name=&#34;__codelineno-12-3&#34; href=&#34;#__codelineno-12-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# omitted&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-4&#34;&gt;&lt;a id=&#34;__codelineno-12-4&#34; name=&#34;__codelineno-12-4&#34; href=&#34;#__codelineno-12-4&#34;&gt;&lt;/a&gt;Disassembly&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.text:&lt;/span&gt;&lt;span id=&#34;__span-12-5&#34;&gt;&lt;a id=&#34;__codelineno-12-5&#34; name=&#34;__codelineno-12-5&#34; href=&#34;#__codelineno-12-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-6&#34;&gt;&lt;a id=&#34;__codelineno-12-6&#34; name=&#34;__codelineno-12-6&#34; href=&#34;#__codelineno-12-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000001100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data1&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-12-7&#34;&gt;&lt;a id=&#34;__codelineno-12-7&#34; name=&#34;__codelineno-12-7&#34; href=&#34;#__codelineno-12-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1100&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;d1&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;2e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x2ed1&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%rax&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 3fd8 &amp;lt;tls_data1+0x3fd4&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-8&#34;&gt;&lt;a id=&#34;__codelineno-12-8&#34; name=&#34;__codelineno-12-8&#34; href=&#34;#__codelineno-12-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1107&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%fs:&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%eax&lt;/span&gt;&lt;span id=&#34;__span-12-9&#34;&gt;&lt;a id=&#34;__codelineno-12-9&#34; name=&#34;__codelineno-12-9&#34; href=&#34;#__codelineno-12-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;110a:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-12-10&#34;&gt;&lt;a id=&#34;__codelineno-12-10&#34; name=&#34;__codelineno-12-10&#34; href=&#34;#__codelineno-12-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;110b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nopl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax,%rax,1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-11&#34;&gt;&lt;a id=&#34;__codelineno-12-11&#34; name=&#34;__codelineno-12-11&#34; href=&#34;#__codelineno-12-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-12&#34;&gt;&lt;a id=&#34;__codelineno-12-12&#34; name=&#34;__codelineno-12-12&#34; href=&#34;#__codelineno-12-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000001110&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data2&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-12-13&#34;&gt;&lt;a id=&#34;__codelineno-12-13&#34; name=&#34;__codelineno-12-13&#34; href=&#34;#__codelineno-12-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1110&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;a9&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;2e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x2ea9&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%rax&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 3fc0 &amp;lt;tls_data2+0x3fc0&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-14&#34;&gt;&lt;a id=&#34;__codelineno-12-14&#34; name=&#34;__codelineno-12-14&#34; href=&#34;#__codelineno-12-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1117&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%fs:&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%eax&lt;/span&gt;&lt;span id=&#34;__span-12-15&#34;&gt;&lt;a id=&#34;__codelineno-12-15&#34; name=&#34;__codelineno-12-15&#34; href=&#34;#__codelineno-12-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;111a:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-12-16&#34;&gt;&lt;a id=&#34;__codelineno-12-16&#34; name=&#34;__codelineno-12-16&#34; href=&#34;#__codelineno-12-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-17&#34;&gt;&lt;a id=&#34;__codelineno-12-17&#34; name=&#34;__codelineno-12-17&#34; href=&#34;#__codelineno-12-17&#34;&gt;&lt;/a&gt;Disassembly&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.got:&lt;/span&gt;&lt;span id=&#34;__span-12-18&#34;&gt;&lt;a id=&#34;__codelineno-12-18&#34; name=&#34;__codelineno-12-18&#34; href=&#34;#__codelineno-12-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-19&#34;&gt;&lt;a id=&#34;__codelineno-12-19&#34; name=&#34;__codelineno-12-19&#34; href=&#34;#__codelineno-12-19&#34;&gt;&lt;/a&gt;0000000000003fb8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;.got&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-12-20&#34;&gt;&lt;a id=&#34;__codelineno-12-20&#34; name=&#34;__codelineno-12-20&#34; href=&#34;#__codelineno-12-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;...&lt;/span&gt;&lt;span id=&#34;__span-12-21&#34;&gt;&lt;a id=&#34;__codelineno-12-21&#34; name=&#34;__codelineno-12-21&#34; href=&#34;#__codelineno-12-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3fc0:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_TPOFF64&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data2&lt;/span&gt;&lt;span id=&#34;__span-12-22&#34;&gt;&lt;a id=&#34;__codelineno-12-22&#34; name=&#34;__codelineno-12-22&#34; href=&#34;#__codelineno-12-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3fd8:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_TPOFF64&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;链接器为两个 TLS 变量分别创建了一个 &lt;code&gt;.got&lt;/code&gt; entry，&lt;code&gt;tls_data1&lt;/code&gt; 对应 &lt;code&gt;0x3fd8&lt;/code&gt;，&lt;code&gt;tls_data2&lt;/code&gt; 对应 &lt;code&gt;0x3fc0&lt;/code&gt;&lt;/li&gt;&lt;li&gt;链接器在这两个 &lt;code&gt;.got&lt;/code&gt; entry 处创建了 dynamic relocation &lt;code&gt;R_X86_64_TPOFF64&lt;/code&gt;，告诉动态链接器：给动态库分配空间后，把 &lt;code&gt;tls_data1&lt;/code&gt; 和 &lt;code&gt;tls_data2&lt;/code&gt; 相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移写入到这两个 &lt;code&gt;.got&lt;/code&gt; entry 内&lt;/li&gt;&lt;li&gt;&lt;p&gt;链接器计算出了 &lt;code&gt;mov&lt;/code&gt; 指令和 &lt;code&gt;.got&lt;/code&gt; entry 的相对偏移，直接写到了 &lt;code&gt;mov&lt;/code&gt; 指令的立即数当中：&lt;/p&gt;&lt;p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-13-1&#34;&gt;&lt;a id=&#34;__codelineno-13-1&#34; name=&#34;__codelineno-13-1&#34; href=&#34;#__codelineno-13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000001100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data1&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-13-2&#34;&gt;&lt;a id=&#34;__codelineno-13-2&#34; name=&#34;__codelineno-13-2&#34; href=&#34;#__codelineno-13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1100&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;d1&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;2e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x2ed1&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%rax&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 3fd8 &amp;lt;tls_data1+0x3fd4&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-3&#34;&gt;&lt;a id=&#34;__codelineno-13-3&#34; name=&#34;__codelineno-13-3&#34; href=&#34;#__codelineno-13-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1107&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%fs:&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%eax&lt;/span&gt;&lt;span id=&#34;__span-13-4&#34;&gt;&lt;a id=&#34;__codelineno-13-4&#34; name=&#34;__codelineno-13-4&#34; href=&#34;#__codelineno-13-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;110a:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-13-5&#34;&gt;&lt;a id=&#34;__codelineno-13-5&#34; name=&#34;__codelineno-13-5&#34; href=&#34;#__codelineno-13-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;110b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nopl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax,%rax,1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-6&#34;&gt;&lt;a id=&#34;__codelineno-13-6&#34; name=&#34;__codelineno-13-6&#34; href=&#34;#__codelineno-13-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-7&#34;&gt;&lt;a id=&#34;__codelineno-13-7&#34; name=&#34;__codelineno-13-7&#34; href=&#34;#__codelineno-13-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000001110&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data2&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-13-8&#34;&gt;&lt;a id=&#34;__codelineno-13-8&#34; name=&#34;__codelineno-13-8&#34; href=&#34;#__codelineno-13-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1110&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;a9&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;2e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x2ea9&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%rax&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 3fc0 &amp;lt;tls_data2+0x3fc0&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-9&#34;&gt;&lt;a id=&#34;__codelineno-13-9&#34; name=&#34;__codelineno-13-9&#34; href=&#34;#__codelineno-13-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1117&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%fs:&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%eax&lt;/span&gt;&lt;span id=&#34;__span-13-10&#34;&gt;&lt;a id=&#34;__codelineno-13-10&#34; name=&#34;__codelineno-13-10&#34; href=&#34;#__codelineno-13-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;111a:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;4. 那么在运行时，为了读取 TLS 变量，首先从 &lt;code&gt;.got&lt;/code&gt; 表读取 TLS 变量相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移写到 &lt;code&gt;%rax&lt;/code&gt; 寄存器，再通过 &lt;code&gt;%fs:(%rax)&lt;/code&gt; 访问 TLS 变量即可&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;那么这就是 initial exec TLS model 的实现方法了：它利用了动态库会在程序启动时加载的性质，保证 TLS 变量都保存在相对 &lt;code&gt;%fs&lt;/code&gt; 的运行时可知且不变的偏移上，把偏移记录在 &lt;code&gt;.got&lt;/code&gt; 表中，由动态链接器去计算，那么访问的时候就很简单了，直接读取 offset 从 &lt;code&gt;%fs&lt;/code&gt; 访问即可。&lt;/p&gt;&lt;h3 id=&#34;localglobal-dynamic-tls-model&#34;&gt;local/global dynamic TLS model&lt;a class=&#34;headerlink&#34; href=&#34;#localglobal-dynamic-tls-model&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;接下来看动态库的第二种情况：它可能由 dlopen 加载，因此 TLS 变量相对 &lt;code&gt;%fs&lt;/code&gt; 的位置可能会变化，此时需要通过 &lt;code&gt;__tls_get_addr&lt;/code&gt; 函数来得到 TLS 变量的地址。回顾前面提到的 &lt;code&gt;__tls_get_addr&lt;/code&gt; 的声明：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-14-1&#34;&gt;&lt;a id=&#34;__codelineno-14-1&#34; name=&#34;__codelineno-14-1&#34; href=&#34;#__codelineno-14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;dl_tls_index&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-2&#34;&gt;&lt;a id=&#34;__codelineno-14-2&#34; name=&#34;__codelineno-14-2&#34; href=&#34;#__codelineno-14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-3&#34;&gt;&lt;a id=&#34;__codelineno-14-3&#34; name=&#34;__codelineno-14-3&#34; href=&#34;#__codelineno-14-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ti_module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-4&#34;&gt;&lt;a id=&#34;__codelineno-14-4&#34; name=&#34;__codelineno-14-4&#34; href=&#34;#__codelineno-14-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ti_offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-5&#34;&gt;&lt;a id=&#34;__codelineno-14-5&#34; name=&#34;__codelineno-14-5&#34; href=&#34;#__codelineno-14-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-6&#34;&gt;&lt;a id=&#34;__codelineno-14-6&#34; name=&#34;__codelineno-14-6&#34; href=&#34;#__codelineno-14-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-7&#34;&gt;&lt;a id=&#34;__codelineno-14-7&#34; name=&#34;__codelineno-14-7&#34; href=&#34;#__codelineno-14-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;__tls_get_addr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_index&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ti&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即它需要两个信息，一个是 TLS 变量所在的动态库的编号（这个编号是动态生成的一个 id，实际上是这个动态库在 &lt;code&gt;dtv&lt;/code&gt; 数组中的下标），另外是这个 TLS 变量在动态库内的偏移。这时候，又分为两种情况：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第一种情况是，这个 TLS 变量就在这个动态库本身内部定义，此时 TLS 变量在动态库内的偏移在链接期间已知，只是不知道 TLS 空间的起始地址，需要通过 &lt;code&gt;__tls_get_addr&lt;/code&gt; 函数获取，这种情景叫做 local dynamic TLS model&lt;/li&gt;&lt;li&gt;第二种情况是，这个 TLS 变量不知道在哪个动态库定义，此时只知道这个 TLS 变量的名字，不知道它属于哪个动态库，也不知道它在动态库内的偏移，这种情况叫做 global dynamic TLS model，是最通用的情况，对 TLS 变量所在的位置没有任何假设&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;local-dynamic-tls-model&#34;&gt;local dynamic TLS model&lt;a class=&#34;headerlink&#34; href=&#34;#local-dynamic-tls-model&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;接下来分析 local dynamic TLS model，它面向的场景是一个可能被 dlopen 加载的动态库，需要访问自己的 TLS 变量，此时需要用 &lt;code&gt;__tls_get_addr&lt;/code&gt; 读取自己的 TLS 空间的起始地址，根据链接时已知的偏移，计算出 TLS 变量在运行时的地址。由于 &lt;code&gt;__tls_get_addr&lt;/code&gt; 需要知道动态库的编号，而这个编号只有动态链接器才知道，因此需要生成一个 dynamic relocation，让动态链接器把这个动态库自己的编号写入到 &lt;code&gt;.got&lt;/code&gt; entry 中，之后才能拿这个 &lt;code&gt;.got&lt;/code&gt; entry 的值调用 &lt;code&gt;__tls_get_addr&lt;/code&gt;，进而得到 TLS 变量的地址。下面来观察这个过程，源码和之前一样：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-15-1&#34;&gt;&lt;a id=&#34;__codelineno-15-1&#34; name=&#34;__codelineno-15-1&#34; href=&#34;#__codelineno-15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;__thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-2&#34;&gt;&lt;a id=&#34;__codelineno-15-2&#34; name=&#34;__codelineno-15-2&#34; href=&#34;#__codelineno-15-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;__thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-3&#34;&gt;&lt;a id=&#34;__codelineno-15-3&#34; name=&#34;__codelineno-15-3&#34; href=&#34;#__codelineno-15-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-4&#34;&gt;&lt;a id=&#34;__codelineno-15-4&#34; name=&#34;__codelineno-15-4&#34; href=&#34;#__codelineno-15-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read_tls_data1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-5&#34;&gt;&lt;a id=&#34;__codelineno-15-5&#34; name=&#34;__codelineno-15-5&#34; href=&#34;#__codelineno-15-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read_tls_data2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先查看生成的汇编：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-16-1&#34;&gt;&lt;a id=&#34;__codelineno-16-1&#34; name=&#34;__codelineno-16-1&#34; href=&#34;#__codelineno-16-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;gcc&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-ftls-model&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;local-dynamic&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-fPIC&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-O2&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.c&lt;/span&gt;&lt;span id=&#34;__span-16-2&#34;&gt;&lt;a id=&#34;__codelineno-16-2&#34; name=&#34;__codelineno-16-2&#34; href=&#34;#__codelineno-16-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cat&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.s&lt;/span&gt;&lt;span id=&#34;__span-16-3&#34;&gt;&lt;a id=&#34;__codelineno-16-3&#34; name=&#34;__codelineno-16-3&#34; href=&#34;#__codelineno-16-3&#34;&gt;&lt;/a&gt;read_tls_data1:&lt;/span&gt;&lt;span id=&#34;__span-16-4&#34;&gt;&lt;a id=&#34;__codelineno-16-4&#34; name=&#34;__codelineno-16-4&#34; href=&#34;#__codelineno-16-4&#34;&gt;&lt;/a&gt;.LFB0:&lt;/span&gt;&lt;span id=&#34;__span-16-5&#34;&gt;&lt;a id=&#34;__codelineno-16-5&#34; name=&#34;__codelineno-16-5&#34; href=&#34;#__codelineno-16-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;subq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$8&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rsp&lt;/span&gt;&lt;span id=&#34;__span-16-6&#34;&gt;&lt;a id=&#34;__codelineno-16-6&#34; name=&#34;__codelineno-16-6&#34; href=&#34;#__codelineno-16-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;leaq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1@tlsld&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rdi&lt;/span&gt;&lt;span id=&#34;__span-16-7&#34;&gt;&lt;a id=&#34;__codelineno-16-7&#34; name=&#34;__codelineno-16-7&#34; href=&#34;#__codelineno-16-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;__tls_get_addr@PLT&lt;/span&gt;&lt;span id=&#34;__span-16-8&#34;&gt;&lt;a id=&#34;__codelineno-16-8&#34; name=&#34;__codelineno-16-8&#34; href=&#34;#__codelineno-16-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;movl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1@dtpoff&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%eax&lt;/span&gt;&lt;span id=&#34;__span-16-9&#34;&gt;&lt;a id=&#34;__codelineno-16-9&#34; name=&#34;__codelineno-16-9&#34; href=&#34;#__codelineno-16-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;addq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$8&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rsp&lt;/span&gt;&lt;span id=&#34;__span-16-10&#34;&gt;&lt;a id=&#34;__codelineno-16-10&#34; name=&#34;__codelineno-16-10&#34; href=&#34;#__codelineno-16-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-16-11&#34;&gt;&lt;a id=&#34;__codelineno-16-11&#34; name=&#34;__codelineno-16-11&#34; href=&#34;#__codelineno-16-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-12&#34;&gt;&lt;a id=&#34;__codelineno-16-12&#34; name=&#34;__codelineno-16-12&#34; href=&#34;#__codelineno-16-12&#34;&gt;&lt;/a&gt;read_tls_data2:&lt;/span&gt;&lt;span id=&#34;__span-16-13&#34;&gt;&lt;a id=&#34;__codelineno-16-13&#34; name=&#34;__codelineno-16-13&#34; href=&#34;#__codelineno-16-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;subq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$8&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rsp&lt;/span&gt;&lt;span id=&#34;__span-16-14&#34;&gt;&lt;a id=&#34;__codelineno-16-14&#34; name=&#34;__codelineno-16-14&#34; href=&#34;#__codelineno-16-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;leaq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data2@tlsld&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rdi&lt;/span&gt;&lt;span id=&#34;__span-16-15&#34;&gt;&lt;a id=&#34;__codelineno-16-15&#34; name=&#34;__codelineno-16-15&#34; href=&#34;#__codelineno-16-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;__tls_get_addr@PLT&lt;/span&gt;&lt;span id=&#34;__span-16-16&#34;&gt;&lt;a id=&#34;__codelineno-16-16&#34; name=&#34;__codelineno-16-16&#34; href=&#34;#__codelineno-16-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;movl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data2@dtpoff&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%eax&lt;/span&gt;&lt;span id=&#34;__span-16-17&#34;&gt;&lt;a id=&#34;__codelineno-16-17&#34; name=&#34;__codelineno-16-17&#34; href=&#34;#__codelineno-16-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;addq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$8&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rsp&lt;/span&gt;&lt;span id=&#34;__span-16-18&#34;&gt;&lt;a id=&#34;__codelineno-16-18&#34; name=&#34;__codelineno-16-18&#34; href=&#34;#__codelineno-16-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先可以看到的是一个新的语法：&lt;code&gt;symbol@tlsld(%rip)&lt;/code&gt;，生成一个 &lt;code&gt;R_X86_64_TLSLD&lt;/code&gt; 类型的 relocation，它的意思是在 &lt;code&gt;.got&lt;/code&gt; 表中生成一个 entry，这个 entry 会保存当前动态库对应的编号，然后在这里通过 &lt;code&gt;lea&lt;/code&gt; 指令把这个 &lt;code&gt;.got&lt;/code&gt; entry 的地址作为 &lt;code&gt;tls_index *&lt;/code&gt; 类型的参数传给 &lt;code&gt;__tls_get_addr&lt;/code&gt;，那么它就会去寻找这个动态库的 TLS 空间的起始地址，把结果写入到 &lt;code&gt;%rax&lt;/code&gt; 寄存器内。&lt;/p&gt;&lt;p&gt;得到 TLS 空间的起始地址后，再利用 &lt;code&gt;symbol@dtpoff(%rax)&lt;/code&gt; 的语法，生成 &lt;code&gt;R_X86_64_DTPOFF32&lt;/code&gt; 类型的 relocation，在链接的时候直接把 &lt;code&gt;symbol&lt;/code&gt; 相对自己的 TLS 空间的起始地址的偏移写到 &lt;code&gt;movl&lt;/code&gt; 指令内，从而实现了 TLS 变量的访问。&lt;/p&gt;&lt;p&gt;下面观察生成的对象文件：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-17-1&#34;&gt;&lt;a id=&#34;__codelineno-17-1&#34; name=&#34;__codelineno-17-1&#34; href=&#34;#__codelineno-17-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;as&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.o&lt;/span&gt;&lt;span id=&#34;__span-17-2&#34;&gt;&lt;a id=&#34;__codelineno-17-2&#34; name=&#34;__codelineno-17-2&#34; href=&#34;#__codelineno-17-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;objdump&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-D&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-r&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.o&lt;/span&gt;&lt;span id=&#34;__span-17-3&#34;&gt;&lt;a id=&#34;__codelineno-17-3&#34; name=&#34;__codelineno-17-3&#34; href=&#34;#__codelineno-17-3&#34;&gt;&lt;/a&gt;Disassembly&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.text:&lt;/span&gt;&lt;span id=&#34;__span-17-4&#34;&gt;&lt;a id=&#34;__codelineno-17-4&#34; name=&#34;__codelineno-17-4&#34; href=&#34;#__codelineno-17-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-5&#34;&gt;&lt;a id=&#34;__codelineno-17-5&#34; name=&#34;__codelineno-17-5&#34; href=&#34;#__codelineno-17-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data1&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-17-6&#34;&gt;&lt;a id=&#34;__codelineno-17-6&#34; name=&#34;__codelineno-17-6&#34; href=&#34;#__codelineno-17-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ec&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sub&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x8,%rsp&lt;/span&gt;&lt;span id=&#34;__span-17-7&#34;&gt;&lt;a id=&#34;__codelineno-17-7&#34; name=&#34;__codelineno-17-7&#34; href=&#34;#__codelineno-17-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;lea&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%rdi&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# b &amp;lt;read_tls_data1+0xb&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-8&#34;&gt;&lt;a id=&#34;__codelineno-17-8&#34; name=&#34;__codelineno-17-8&#34; href=&#34;#__codelineno-17-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_TLSLD&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1-0x4&lt;/span&gt;&lt;span id=&#34;__span-17-9&#34;&gt;&lt;a id=&#34;__codelineno-17-9&#34; name=&#34;__codelineno-17-9&#34; href=&#34;#__codelineno-17-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data1+0x10&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-17-10&#34;&gt;&lt;a id=&#34;__codelineno-17-10&#34; name=&#34;__codelineno-17-10&#34; href=&#34;#__codelineno-17-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_PLT32&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;__tls_get_addr-0x4&lt;/span&gt;&lt;span id=&#34;__span-17-11&#34;&gt;&lt;a id=&#34;__codelineno-17-11&#34; name=&#34;__codelineno-17-11&#34; href=&#34;#__codelineno-17-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%eax&lt;/span&gt;&lt;span id=&#34;__span-17-12&#34;&gt;&lt;a id=&#34;__codelineno-17-12&#34; name=&#34;__codelineno-17-12&#34; href=&#34;#__codelineno-17-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_DTPOFF32&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1&lt;/span&gt;&lt;span id=&#34;__span-17-13&#34;&gt;&lt;a id=&#34;__codelineno-17-13&#34; name=&#34;__codelineno-17-13&#34; href=&#34;#__codelineno-17-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c4&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;add&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x8,%rsp&lt;/span&gt;&lt;span id=&#34;__span-17-14&#34;&gt;&lt;a id=&#34;__codelineno-17-14&#34; name=&#34;__codelineno-17-14&#34; href=&#34;#__codelineno-17-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1a:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-17-15&#34;&gt;&lt;a id=&#34;__codelineno-17-15&#34; name=&#34;__codelineno-17-15&#34; href=&#34;#__codelineno-17-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nopl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax,%rax,1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-16&#34;&gt;&lt;a id=&#34;__codelineno-17-16&#34; name=&#34;__codelineno-17-16&#34; href=&#34;#__codelineno-17-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-17&#34;&gt;&lt;a id=&#34;__codelineno-17-17&#34; name=&#34;__codelineno-17-17&#34; href=&#34;#__codelineno-17-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000000020&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data2&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-17-18&#34;&gt;&lt;a id=&#34;__codelineno-17-18&#34; name=&#34;__codelineno-17-18&#34; href=&#34;#__codelineno-17-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ec&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sub&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x8,%rsp&lt;/span&gt;&lt;span id=&#34;__span-17-19&#34;&gt;&lt;a id=&#34;__codelineno-17-19&#34; name=&#34;__codelineno-17-19&#34; href=&#34;#__codelineno-17-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;24&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;lea&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%rdi&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 2b &amp;lt;read_tls_data2+0xb&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-20&#34;&gt;&lt;a id=&#34;__codelineno-17-20&#34; name=&#34;__codelineno-17-20&#34; href=&#34;#__codelineno-17-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;27&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_TLSLD&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data2-0x4&lt;/span&gt;&lt;span id=&#34;__span-17-21&#34;&gt;&lt;a id=&#34;__codelineno-17-21&#34; name=&#34;__codelineno-17-21&#34; href=&#34;#__codelineno-17-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;2b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data2+0x10&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-17-22&#34;&gt;&lt;a id=&#34;__codelineno-17-22&#34; name=&#34;__codelineno-17-22&#34; href=&#34;#__codelineno-17-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;2c:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_PLT32&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;__tls_get_addr-0x4&lt;/span&gt;&lt;span id=&#34;__span-17-23&#34;&gt;&lt;a id=&#34;__codelineno-17-23&#34; name=&#34;__codelineno-17-23&#34; href=&#34;#__codelineno-17-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%eax&lt;/span&gt;&lt;span id=&#34;__span-17-24&#34;&gt;&lt;a id=&#34;__codelineno-17-24&#34; name=&#34;__codelineno-17-24&#34; href=&#34;#__codelineno-17-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;32&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_DTPOFF32&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data2&lt;/span&gt;&lt;span id=&#34;__span-17-25&#34;&gt;&lt;a id=&#34;__codelineno-17-25&#34; name=&#34;__codelineno-17-25&#34; href=&#34;#__codelineno-17-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;36&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c4&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;add&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x8,%rsp&lt;/span&gt;&lt;span id=&#34;__span-17-26&#34;&gt;&lt;a id=&#34;__codelineno-17-26&#34; name=&#34;__codelineno-17-26&#34; href=&#34;#__codelineno-17-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3a:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，由于 &lt;code&gt;__tls_get_addr&lt;/code&gt; 的运行时地址也是不知道的，所以就和调用其他动态库的函数一样，用已有的 PLT 机制去重定位。&lt;/p&gt;&lt;p&gt;接下来看最后的动态库：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-18-1&#34;&gt;&lt;a id=&#34;__codelineno-18-1&#34; name=&#34;__codelineno-18-1&#34; href=&#34;#__codelineno-18-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;gcc&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-shared&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;libtls.so&lt;/span&gt;&lt;span id=&#34;__span-18-2&#34;&gt;&lt;a id=&#34;__codelineno-18-2&#34; name=&#34;__codelineno-18-2&#34; href=&#34;#__codelineno-18-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;objdump&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-D&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-R&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;libtls.so&lt;/span&gt;&lt;span id=&#34;__span-18-3&#34;&gt;&lt;a id=&#34;__codelineno-18-3&#34; name=&#34;__codelineno-18-3&#34; href=&#34;#__codelineno-18-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# omitted&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-18-4&#34;&gt;&lt;a id=&#34;__codelineno-18-4&#34; name=&#34;__codelineno-18-4&#34; href=&#34;#__codelineno-18-4&#34;&gt;&lt;/a&gt;Disassembly&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.text:&lt;/span&gt;&lt;span id=&#34;__span-18-5&#34;&gt;&lt;a id=&#34;__codelineno-18-5&#34; name=&#34;__codelineno-18-5&#34; href=&#34;#__codelineno-18-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-18-6&#34;&gt;&lt;a id=&#34;__codelineno-18-6&#34; name=&#34;__codelineno-18-6&#34; href=&#34;#__codelineno-18-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000001110&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data1&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-18-7&#34;&gt;&lt;a id=&#34;__codelineno-18-7&#34; name=&#34;__codelineno-18-7&#34; href=&#34;#__codelineno-18-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1110&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ec&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sub&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x8,%rsp&lt;/span&gt;&lt;span id=&#34;__span-18-8&#34;&gt;&lt;a id=&#34;__codelineno-18-8&#34; name=&#34;__codelineno-18-8&#34; href=&#34;#__codelineno-18-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1114&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;9d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;2e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;lea&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x2e9d&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%rdi&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 3fb8 &amp;lt;_DYNAMIC+0x1c0&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-18-9&#34;&gt;&lt;a id=&#34;__codelineno-18-9&#34; name=&#34;__codelineno-18-9&#34; href=&#34;#__codelineno-18-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;111b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1030&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;__tls_get_addr@plt&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-18-10&#34;&gt;&lt;a id=&#34;__codelineno-18-10&#34; name=&#34;__codelineno-18-10&#34; href=&#34;#__codelineno-18-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1120&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x4&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%eax&lt;/span&gt;&lt;span id=&#34;__span-18-11&#34;&gt;&lt;a id=&#34;__codelineno-18-11&#34; name=&#34;__codelineno-18-11&#34; href=&#34;#__codelineno-18-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1126&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c4&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;add&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x8,%rsp&lt;/span&gt;&lt;span id=&#34;__span-18-12&#34;&gt;&lt;a id=&#34;__codelineno-18-12&#34; name=&#34;__codelineno-18-12&#34; href=&#34;#__codelineno-18-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;112a:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-18-13&#34;&gt;&lt;a id=&#34;__codelineno-18-13&#34; name=&#34;__codelineno-18-13&#34; href=&#34;#__codelineno-18-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;112b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nopl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax,%rax,1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-18-14&#34;&gt;&lt;a id=&#34;__codelineno-18-14&#34; name=&#34;__codelineno-18-14&#34; href=&#34;#__codelineno-18-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-18-15&#34;&gt;&lt;a id=&#34;__codelineno-18-15&#34; name=&#34;__codelineno-18-15&#34; href=&#34;#__codelineno-18-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000001130&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data2&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-18-16&#34;&gt;&lt;a id=&#34;__codelineno-18-16&#34; name=&#34;__codelineno-18-16&#34; href=&#34;#__codelineno-18-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1130&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ec&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sub&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x8,%rsp&lt;/span&gt;&lt;span id=&#34;__span-18-17&#34;&gt;&lt;a id=&#34;__codelineno-18-17&#34; name=&#34;__codelineno-18-17&#34; href=&#34;#__codelineno-18-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1134&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;7d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;2e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;lea&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x2e7d&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%rdi&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 3fb8 &amp;lt;_DYNAMIC+0x1c0&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-18-18&#34;&gt;&lt;a id=&#34;__codelineno-18-18&#34; name=&#34;__codelineno-18-18&#34; href=&#34;#__codelineno-18-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;113b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;f0&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;fe&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1030&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;__tls_get_addr@plt&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-18-19&#34;&gt;&lt;a id=&#34;__codelineno-18-19&#34; name=&#34;__codelineno-18-19&#34; href=&#34;#__codelineno-18-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1140&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%eax&lt;/span&gt;&lt;span id=&#34;__span-18-20&#34;&gt;&lt;a id=&#34;__codelineno-18-20&#34; name=&#34;__codelineno-18-20&#34; href=&#34;#__codelineno-18-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1146&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c4&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;add&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x8,%rsp&lt;/span&gt;&lt;span id=&#34;__span-18-21&#34;&gt;&lt;a id=&#34;__codelineno-18-21&#34; name=&#34;__codelineno-18-21&#34; href=&#34;#__codelineno-18-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;114a:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-18-22&#34;&gt;&lt;a id=&#34;__codelineno-18-22&#34; name=&#34;__codelineno-18-22&#34; href=&#34;#__codelineno-18-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-18-23&#34;&gt;&lt;a id=&#34;__codelineno-18-23&#34; name=&#34;__codelineno-18-23&#34; href=&#34;#__codelineno-18-23&#34;&gt;&lt;/a&gt;Disassembly&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.got:&lt;/span&gt;&lt;span id=&#34;__span-18-24&#34;&gt;&lt;a id=&#34;__codelineno-18-24&#34; name=&#34;__codelineno-18-24&#34; href=&#34;#__codelineno-18-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-18-25&#34;&gt;&lt;a id=&#34;__codelineno-18-25&#34; name=&#34;__codelineno-18-25&#34; href=&#34;#__codelineno-18-25&#34;&gt;&lt;/a&gt;0000000000003fb8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;.got&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-18-26&#34;&gt;&lt;a id=&#34;__codelineno-18-26&#34; name=&#34;__codelineno-18-26&#34; href=&#34;#__codelineno-18-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;...&lt;/span&gt;&lt;span id=&#34;__span-18-27&#34;&gt;&lt;a id=&#34;__codelineno-18-27&#34; name=&#34;__codelineno-18-27&#34; href=&#34;#__codelineno-18-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3fb8:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_DTPMOD64&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;*ABS*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，无论是访问 &lt;code&gt;tls_data1&lt;/code&gt; 还是 &lt;code&gt;tls_data2&lt;/code&gt;，在调用 &lt;code&gt;__tls_get_addr&lt;/code&gt; 时，使用的参数都是一样的 &lt;code&gt;0x3fb8&lt;/code&gt;，也就是动态链接器把当前动态库的编号写进去的 &lt;code&gt;.got&lt;/code&gt; entry。返回值就是当前动态库的 TLS 空间的基地址，把返回值加上对应的 offset（&lt;code&gt;tls_data1&lt;/code&gt; 的偏移是 4，&lt;code&gt;tls_data2&lt;/code&gt; 的偏移是 0，这个 offset 直接写到了 &lt;code&gt;movl&lt;/code&gt; 指令的立即数里），就得到了 TLS 变量的地址。&lt;/p&gt;&lt;p&gt;特别地，如果在一个函数里访问多个当前动态库的 TLS 变量，那么 &lt;code&gt;__tls_get_addr&lt;/code&gt; 调用是可以合并的：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-19-1&#34;&gt;&lt;a id=&#34;__codelineno-19-1&#34; name=&#34;__codelineno-19-1&#34; href=&#34;#__codelineno-19-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;__thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-19-2&#34;&gt;&lt;a id=&#34;__codelineno-19-2&#34; name=&#34;__codelineno-19-2&#34; href=&#34;#__codelineno-19-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;__thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-19-3&#34;&gt;&lt;a id=&#34;__codelineno-19-3&#34; name=&#34;__codelineno-19-3&#34; href=&#34;#__codelineno-19-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-19-4&#34;&gt;&lt;a id=&#34;__codelineno-19-4&#34; name=&#34;__codelineno-19-4&#34; href=&#34;#__codelineno-19-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read_tls_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_data2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会生成如下的汇编：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-20-1&#34;&gt;&lt;a id=&#34;__codelineno-20-1&#34; name=&#34;__codelineno-20-1&#34; href=&#34;#__codelineno-20-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;gcc&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-ftls-model&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;local-dynamic&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-fPIC&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-O2&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.c&lt;/span&gt;&lt;span id=&#34;__span-20-2&#34;&gt;&lt;a id=&#34;__codelineno-20-2&#34; name=&#34;__codelineno-20-2&#34; href=&#34;#__codelineno-20-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cat&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.s&lt;/span&gt;&lt;span id=&#34;__span-20-3&#34;&gt;&lt;a id=&#34;__codelineno-20-3&#34; name=&#34;__codelineno-20-3&#34; href=&#34;#__codelineno-20-3&#34;&gt;&lt;/a&gt;read_tls_data:&lt;/span&gt;&lt;span id=&#34;__span-20-4&#34;&gt;&lt;a id=&#34;__codelineno-20-4&#34; name=&#34;__codelineno-20-4&#34; href=&#34;#__codelineno-20-4&#34;&gt;&lt;/a&gt;.LFB0:&lt;/span&gt;&lt;span id=&#34;__span-20-5&#34;&gt;&lt;a id=&#34;__codelineno-20-5&#34; name=&#34;__codelineno-20-5&#34; href=&#34;#__codelineno-20-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;subq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$8&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rsp&lt;/span&gt;&lt;span id=&#34;__span-20-6&#34;&gt;&lt;a id=&#34;__codelineno-20-6&#34; name=&#34;__codelineno-20-6&#34; href=&#34;#__codelineno-20-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;leaq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1@tlsld&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rdi&lt;/span&gt;&lt;span id=&#34;__span-20-7&#34;&gt;&lt;a id=&#34;__codelineno-20-7&#34; name=&#34;__codelineno-20-7&#34; href=&#34;#__codelineno-20-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;__tls_get_addr@PLT&lt;/span&gt;&lt;span id=&#34;__span-20-8&#34;&gt;&lt;a id=&#34;__codelineno-20-8&#34; name=&#34;__codelineno-20-8&#34; href=&#34;#__codelineno-20-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;movl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1@dtpoff&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%edx&lt;/span&gt;&lt;span id=&#34;__span-20-9&#34;&gt;&lt;a id=&#34;__codelineno-20-9&#34; name=&#34;__codelineno-20-9&#34; href=&#34;#__codelineno-20-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;addl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data2@dtpoff&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%edx&lt;/span&gt;&lt;span id=&#34;__span-20-10&#34;&gt;&lt;a id=&#34;__codelineno-20-10&#34; name=&#34;__codelineno-20-10&#34; href=&#34;#__codelineno-20-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;addq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$8&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rsp&lt;/span&gt;&lt;span id=&#34;__span-20-11&#34;&gt;&lt;a id=&#34;__codelineno-20-11&#34; name=&#34;__codelineno-20-11&#34; href=&#34;#__codelineno-20-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;movl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%edx,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%eax&lt;/span&gt;&lt;span id=&#34;__span-20-12&#34;&gt;&lt;a id=&#34;__codelineno-20-12&#34; name=&#34;__codelineno-20-12&#34; href=&#34;#__codelineno-20-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就减少了一次 &lt;code&gt;__tls_get_addr&lt;/code&gt; 的调用。&lt;/p&gt;&lt;h3 id=&#34;global-dynamic-tls-model&#34;&gt;global dynamic TLS model&lt;a class=&#34;headerlink&#34; href=&#34;#global-dynamic-tls-model&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;再来介绍最后一种情况：对于一个 dlopen 的动态库，如果它要访问的 TLS 变量，只知道名字，不知道来自哪一个动态库，不知道偏移是多少。这时候，只能把全部工作交给动态链接器去做：让动态链接器根据符号，去查找符号表，找到对应的动态库和偏移，记录下来；由于涉及到动态库的编号和偏移，所以需要两个连续的 &lt;code&gt;.got&lt;/code&gt; entry，正好对应 &lt;code&gt;tls_index&lt;/code&gt; 结构体的两项成员：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-21-1&#34;&gt;&lt;a id=&#34;__codelineno-21-1&#34; name=&#34;__codelineno-21-1&#34; href=&#34;#__codelineno-21-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;dl_tls_index&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-21-2&#34;&gt;&lt;a id=&#34;__codelineno-21-2&#34; name=&#34;__codelineno-21-2&#34; href=&#34;#__codelineno-21-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-21-3&#34;&gt;&lt;a id=&#34;__codelineno-21-3&#34; name=&#34;__codelineno-21-3&#34; href=&#34;#__codelineno-21-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ti_module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-21-4&#34;&gt;&lt;a id=&#34;__codelineno-21-4&#34; name=&#34;__codelineno-21-4&#34; href=&#34;#__codelineno-21-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ti_offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-21-5&#34;&gt;&lt;a id=&#34;__codelineno-21-5&#34; name=&#34;__codelineno-21-5&#34; href=&#34;#__codelineno-21-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;继续上面的例子，这次采用 global dynamic TLS model 进行编译：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-22-1&#34;&gt;&lt;a id=&#34;__codelineno-22-1&#34; name=&#34;__codelineno-22-1&#34; href=&#34;#__codelineno-22-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cat&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.c&lt;/span&gt;&lt;span id=&#34;__span-22-2&#34;&gt;&lt;a id=&#34;__codelineno-22-2&#34; name=&#34;__codelineno-22-2&#34; href=&#34;#__codelineno-22-2&#34;&gt;&lt;/a&gt;__thread&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;int&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-3&#34;&gt;&lt;a id=&#34;__codelineno-22-3&#34; name=&#34;__codelineno-22-3&#34; href=&#34;#__codelineno-22-3&#34;&gt;&lt;/a&gt;__thread&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;int&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data2&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-4&#34;&gt;&lt;a id=&#34;__codelineno-22-4&#34; name=&#34;__codelineno-22-4&#34; href=&#34;#__codelineno-22-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-5&#34;&gt;&lt;a id=&#34;__codelineno-22-5&#34; name=&#34;__codelineno-22-5&#34; href=&#34;#__codelineno-22-5&#34;&gt;&lt;/a&gt;int&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;read_tls_data1&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-6&#34;&gt;&lt;a id=&#34;__codelineno-22-6&#34; name=&#34;__codelineno-22-6&#34; href=&#34;#__codelineno-22-6&#34;&gt;&lt;/a&gt;int&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;read_tls_data2&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data2&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-7&#34;&gt;&lt;a id=&#34;__codelineno-22-7&#34; name=&#34;__codelineno-22-7&#34; href=&#34;#__codelineno-22-7&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;gcc&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-ftls-model&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;global-dynamic&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-fPIC&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-O2&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.c&lt;/span&gt;&lt;span id=&#34;__span-22-8&#34;&gt;&lt;a id=&#34;__codelineno-22-8&#34; name=&#34;__codelineno-22-8&#34; href=&#34;#__codelineno-22-8&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cat&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.s&lt;/span&gt;&lt;span id=&#34;__span-22-9&#34;&gt;&lt;a id=&#34;__codelineno-22-9&#34; name=&#34;__codelineno-22-9&#34; href=&#34;#__codelineno-22-9&#34;&gt;&lt;/a&gt;read_tls_data1:&lt;/span&gt;&lt;span id=&#34;__span-22-10&#34;&gt;&lt;a id=&#34;__codelineno-22-10&#34; name=&#34;__codelineno-22-10&#34; href=&#34;#__codelineno-22-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;subq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$8&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rsp&lt;/span&gt;&lt;span id=&#34;__span-22-11&#34;&gt;&lt;a id=&#34;__codelineno-22-11&#34; name=&#34;__codelineno-22-11&#34; href=&#34;#__codelineno-22-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;data16&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;leaq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1@tlsgd&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rdi&lt;/span&gt;&lt;span id=&#34;__span-22-12&#34;&gt;&lt;a id=&#34;__codelineno-22-12&#34; name=&#34;__codelineno-22-12&#34; href=&#34;#__codelineno-22-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.value&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x6666&lt;/span&gt;&lt;span id=&#34;__span-22-13&#34;&gt;&lt;a id=&#34;__codelineno-22-13&#34; name=&#34;__codelineno-22-13&#34; href=&#34;#__codelineno-22-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;rex64&lt;/span&gt;&lt;span id=&#34;__span-22-14&#34;&gt;&lt;a id=&#34;__codelineno-22-14&#34; name=&#34;__codelineno-22-14&#34; href=&#34;#__codelineno-22-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;__tls_get_addr@PLT&lt;/span&gt;&lt;span id=&#34;__span-22-15&#34;&gt;&lt;a id=&#34;__codelineno-22-15&#34; name=&#34;__codelineno-22-15&#34; href=&#34;#__codelineno-22-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;movl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%eax&lt;/span&gt;&lt;span id=&#34;__span-22-16&#34;&gt;&lt;a id=&#34;__codelineno-22-16&#34; name=&#34;__codelineno-22-16&#34; href=&#34;#__codelineno-22-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;addq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$8&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rsp&lt;/span&gt;&lt;span id=&#34;__span-22-17&#34;&gt;&lt;a id=&#34;__codelineno-22-17&#34; name=&#34;__codelineno-22-17&#34; href=&#34;#__codelineno-22-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-22-18&#34;&gt;&lt;a id=&#34;__codelineno-22-18&#34; name=&#34;__codelineno-22-18&#34; href=&#34;#__codelineno-22-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-19&#34;&gt;&lt;a id=&#34;__codelineno-22-19&#34; name=&#34;__codelineno-22-19&#34; href=&#34;#__codelineno-22-19&#34;&gt;&lt;/a&gt;read_tls_data2:&lt;/span&gt;&lt;span id=&#34;__span-22-20&#34;&gt;&lt;a id=&#34;__codelineno-22-20&#34; name=&#34;__codelineno-22-20&#34; href=&#34;#__codelineno-22-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;subq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$8&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rsp&lt;/span&gt;&lt;span id=&#34;__span-22-21&#34;&gt;&lt;a id=&#34;__codelineno-22-21&#34; name=&#34;__codelineno-22-21&#34; href=&#34;#__codelineno-22-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;data16&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;leaq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data2@tlsgd&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rdi&lt;/span&gt;&lt;span id=&#34;__span-22-22&#34;&gt;&lt;a id=&#34;__codelineno-22-22&#34; name=&#34;__codelineno-22-22&#34; href=&#34;#__codelineno-22-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.value&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x6666&lt;/span&gt;&lt;span id=&#34;__span-22-23&#34;&gt;&lt;a id=&#34;__codelineno-22-23&#34; name=&#34;__codelineno-22-23&#34; href=&#34;#__codelineno-22-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;rex64&lt;/span&gt;&lt;span id=&#34;__span-22-24&#34;&gt;&lt;a id=&#34;__codelineno-22-24&#34; name=&#34;__codelineno-22-24&#34; href=&#34;#__codelineno-22-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;__tls_get_addr@PLT&lt;/span&gt;&lt;span id=&#34;__span-22-25&#34;&gt;&lt;a id=&#34;__codelineno-22-25&#34; name=&#34;__codelineno-22-25&#34; href=&#34;#__codelineno-22-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;movl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%eax&lt;/span&gt;&lt;span id=&#34;__span-22-26&#34;&gt;&lt;a id=&#34;__codelineno-22-26&#34; name=&#34;__codelineno-22-26&#34; href=&#34;#__codelineno-22-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;addq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$8&lt;/span&gt;,&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;%rsp&lt;/span&gt;&lt;span id=&#34;__span-22-27&#34;&gt;&lt;a id=&#34;__codelineno-22-27&#34; name=&#34;__codelineno-22-27&#34; href=&#34;#__codelineno-22-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这次出现了一些不一样的内容：&lt;code&gt;data16&lt;/code&gt;、&lt;code&gt;.value 0x6666&lt;/code&gt; 和 &lt;code&gt;rex64&lt;/code&gt;；实际上，这些是无用的指令前缀，不影响指令的语义，但是保证了这段代码有足够的长度，方便后续链接器进行优化。除了这些奇怪的前缀，核心就是 &lt;code&gt;symbol@tlsgd(%rip)&lt;/code&gt; 语法，它会创建 &lt;code&gt;R_X86_64_TLSGD&lt;/code&gt; relocation，它的意思是：创建一对 &lt;code&gt;.got&lt;/code&gt; entry，第一个 entry 对应 symbol 所在动态库的编号，第二个 entry 对应 symbol 在动态库的 TLS 空间内的偏移，这两个 entry 组成一个 &lt;code&gt;tls_index&lt;/code&gt; 结构体；通过 &lt;code&gt;leaq&lt;/code&gt; 指令得到这个结构体的指针，调用 &lt;code&gt;__tls_get_addr&lt;/code&gt;，就得到了这个 TLS 变量的地址。&lt;/p&gt;&lt;p&gt;接下来看生成的对象文件：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-23-1&#34;&gt;&lt;a id=&#34;__codelineno-23-1&#34; name=&#34;__codelineno-23-1&#34; href=&#34;#__codelineno-23-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;as&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.o&lt;/span&gt;&lt;span id=&#34;__span-23-2&#34;&gt;&lt;a id=&#34;__codelineno-23-2&#34; name=&#34;__codelineno-23-2&#34; href=&#34;#__codelineno-23-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;objdump&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-D&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-r&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.o&lt;/span&gt;&lt;span id=&#34;__span-23-3&#34;&gt;&lt;a id=&#34;__codelineno-23-3&#34; name=&#34;__codelineno-23-3&#34; href=&#34;#__codelineno-23-3&#34;&gt;&lt;/a&gt;Disassembly&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.text:&lt;/span&gt;&lt;span id=&#34;__span-23-4&#34;&gt;&lt;a id=&#34;__codelineno-23-4&#34; name=&#34;__codelineno-23-4&#34; href=&#34;#__codelineno-23-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-23-5&#34;&gt;&lt;a id=&#34;__codelineno-23-5&#34; name=&#34;__codelineno-23-5&#34; href=&#34;#__codelineno-23-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data1&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-23-6&#34;&gt;&lt;a id=&#34;__codelineno-23-6&#34; name=&#34;__codelineno-23-6&#34; href=&#34;#__codelineno-23-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ec&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sub&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x8,%rsp&lt;/span&gt;&lt;span id=&#34;__span-23-7&#34;&gt;&lt;a id=&#34;__codelineno-23-7&#34; name=&#34;__codelineno-23-7&#34; href=&#34;#__codelineno-23-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;data16&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;lea&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%rdi&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# c &amp;lt;read_tls_data1+0xc&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-23-8&#34;&gt;&lt;a id=&#34;__codelineno-23-8&#34; name=&#34;__codelineno-23-8&#34; href=&#34;#__codelineno-23-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-23-9&#34;&gt;&lt;a id=&#34;__codelineno-23-9&#34; name=&#34;__codelineno-23-9&#34; href=&#34;#__codelineno-23-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_TLSGD&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1-0x4&lt;/span&gt;&lt;span id=&#34;__span-23-10&#34;&gt;&lt;a id=&#34;__codelineno-23-10&#34; name=&#34;__codelineno-23-10&#34; href=&#34;#__codelineno-23-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;data16&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;data16&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;rex.W&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data1+0x14&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-23-11&#34;&gt;&lt;a id=&#34;__codelineno-23-11&#34; name=&#34;__codelineno-23-11&#34; href=&#34;#__codelineno-23-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-23-12&#34;&gt;&lt;a id=&#34;__codelineno-23-12&#34; name=&#34;__codelineno-23-12&#34; href=&#34;#__codelineno-23-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_PLT32&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;__tls_get_addr-0x4&lt;/span&gt;&lt;span id=&#34;__span-23-13&#34;&gt;&lt;a id=&#34;__codelineno-23-13&#34; name=&#34;__codelineno-23-13&#34; href=&#34;#__codelineno-23-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%eax&lt;/span&gt;&lt;span id=&#34;__span-23-14&#34;&gt;&lt;a id=&#34;__codelineno-23-14&#34; name=&#34;__codelineno-23-14&#34; href=&#34;#__codelineno-23-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c4&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;add&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x8,%rsp&lt;/span&gt;&lt;span id=&#34;__span-23-15&#34;&gt;&lt;a id=&#34;__codelineno-23-15&#34; name=&#34;__codelineno-23-15&#34; href=&#34;#__codelineno-23-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1a:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-23-16&#34;&gt;&lt;a id=&#34;__codelineno-23-16&#34; name=&#34;__codelineno-23-16&#34; href=&#34;#__codelineno-23-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nopl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax,%rax,1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-23-17&#34;&gt;&lt;a id=&#34;__codelineno-23-17&#34; name=&#34;__codelineno-23-17&#34; href=&#34;#__codelineno-23-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-23-18&#34;&gt;&lt;a id=&#34;__codelineno-23-18&#34; name=&#34;__codelineno-23-18&#34; href=&#34;#__codelineno-23-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000000020&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data2&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-23-19&#34;&gt;&lt;a id=&#34;__codelineno-23-19&#34; name=&#34;__codelineno-23-19&#34; href=&#34;#__codelineno-23-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ec&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sub&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x8,%rsp&lt;/span&gt;&lt;span id=&#34;__span-23-20&#34;&gt;&lt;a id=&#34;__codelineno-23-20&#34; name=&#34;__codelineno-23-20&#34; href=&#34;#__codelineno-23-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;24&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;data16&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;lea&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%rdi&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 2c &amp;lt;read_tls_data2+0xc&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-23-21&#34;&gt;&lt;a id=&#34;__codelineno-23-21&#34; name=&#34;__codelineno-23-21&#34; href=&#34;#__codelineno-23-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;2b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-23-22&#34;&gt;&lt;a id=&#34;__codelineno-23-22&#34; name=&#34;__codelineno-23-22&#34; href=&#34;#__codelineno-23-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;28&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_TLSGD&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data2-0x4&lt;/span&gt;&lt;span id=&#34;__span-23-23&#34;&gt;&lt;a id=&#34;__codelineno-23-23&#34; name=&#34;__codelineno-23-23&#34; href=&#34;#__codelineno-23-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;2c:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;data16&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;data16&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;rex.W&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data2+0x14&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-23-24&#34;&gt;&lt;a id=&#34;__codelineno-23-24&#34; name=&#34;__codelineno-23-24&#34; href=&#34;#__codelineno-23-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;33&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-23-25&#34;&gt;&lt;a id=&#34;__codelineno-23-25&#34; name=&#34;__codelineno-23-25&#34; href=&#34;#__codelineno-23-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_PLT32&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;__tls_get_addr-0x4&lt;/span&gt;&lt;span id=&#34;__span-23-26&#34;&gt;&lt;a id=&#34;__codelineno-23-26&#34; name=&#34;__codelineno-23-26&#34; href=&#34;#__codelineno-23-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;34&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%eax&lt;/span&gt;&lt;span id=&#34;__span-23-27&#34;&gt;&lt;a id=&#34;__codelineno-23-27&#34; name=&#34;__codelineno-23-27&#34; href=&#34;#__codelineno-23-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;36&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c4&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;add&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x8,%rsp&lt;/span&gt;&lt;span id=&#34;__span-23-28&#34;&gt;&lt;a id=&#34;__codelineno-23-28&#34; name=&#34;__codelineno-23-28&#34; href=&#34;#__codelineno-23-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3a:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;基本符合预期，通过 &lt;code&gt;R_X86_64_TLSGD&lt;/code&gt; relocation 来表示意图，通过反汇编也可以看到，多余的那些修饰符是没有用的，语义上就是一条 &lt;code&gt;leaq&lt;/code&gt; 加一条 &lt;code&gt;call&lt;/code&gt; 指令。和之前 local dynamic TLS model 类似，&lt;code&gt;__tls_get_addr&lt;/code&gt; 也是用已有的 PLT 机制来寻址。&lt;/p&gt;&lt;p&gt;最后来看生成的动态库：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-24-1&#34;&gt;&lt;a id=&#34;__codelineno-24-1&#34; name=&#34;__codelineno-24-1&#34; href=&#34;#__codelineno-24-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;gcc&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-shared&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls.o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;libtls.so&lt;/span&gt;&lt;span id=&#34;__span-24-2&#34;&gt;&lt;a id=&#34;__codelineno-24-2&#34; name=&#34;__codelineno-24-2&#34; href=&#34;#__codelineno-24-2&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;objdump&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-D&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-R&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;libtls.so&lt;/span&gt;&lt;span id=&#34;__span-24-3&#34;&gt;&lt;a id=&#34;__codelineno-24-3&#34; name=&#34;__codelineno-24-3&#34; href=&#34;#__codelineno-24-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# omitted&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-4&#34;&gt;&lt;a id=&#34;__codelineno-24-4&#34; name=&#34;__codelineno-24-4&#34; href=&#34;#__codelineno-24-4&#34;&gt;&lt;/a&gt;Disassembly&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.text:&lt;/span&gt;&lt;span id=&#34;__span-24-5&#34;&gt;&lt;a id=&#34;__codelineno-24-5&#34; name=&#34;__codelineno-24-5&#34; href=&#34;#__codelineno-24-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-6&#34;&gt;&lt;a id=&#34;__codelineno-24-6&#34; name=&#34;__codelineno-24-6&#34; href=&#34;#__codelineno-24-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000001110&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data1&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-24-7&#34;&gt;&lt;a id=&#34;__codelineno-24-7&#34; name=&#34;__codelineno-24-7&#34; href=&#34;#__codelineno-24-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1110&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ec&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sub&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x8,%rsp&lt;/span&gt;&lt;span id=&#34;__span-24-8&#34;&gt;&lt;a id=&#34;__codelineno-24-8&#34; name=&#34;__codelineno-24-8&#34; href=&#34;#__codelineno-24-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1114&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;b4&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;2e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;data16&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;lea&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x2eb4&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%rdi&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 3fd0 &amp;lt;tls_data1@@Base+0x3fcc&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-9&#34;&gt;&lt;a id=&#34;__codelineno-24-9&#34; name=&#34;__codelineno-24-9&#34; href=&#34;#__codelineno-24-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;111b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-10&#34;&gt;&lt;a id=&#34;__codelineno-24-10&#34; name=&#34;__codelineno-24-10&#34; href=&#34;#__codelineno-24-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;111c:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;data16&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;data16&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;rex.W&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1030&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;__tls_get_addr@plt&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-24-11&#34;&gt;&lt;a id=&#34;__codelineno-24-11&#34; name=&#34;__codelineno-24-11&#34; href=&#34;#__codelineno-24-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1123&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;/span&gt;&lt;span id=&#34;__span-24-12&#34;&gt;&lt;a id=&#34;__codelineno-24-12&#34; name=&#34;__codelineno-24-12&#34; href=&#34;#__codelineno-24-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1124&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%eax&lt;/span&gt;&lt;span id=&#34;__span-24-13&#34;&gt;&lt;a id=&#34;__codelineno-24-13&#34; name=&#34;__codelineno-24-13&#34; href=&#34;#__codelineno-24-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1126&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c4&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;add&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x8,%rsp&lt;/span&gt;&lt;span id=&#34;__span-24-14&#34;&gt;&lt;a id=&#34;__codelineno-24-14&#34; name=&#34;__codelineno-24-14&#34; href=&#34;#__codelineno-24-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;112a:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-24-15&#34;&gt;&lt;a id=&#34;__codelineno-24-15&#34; name=&#34;__codelineno-24-15&#34; href=&#34;#__codelineno-24-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;112b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1f&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nopl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax,%rax,1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-16&#34;&gt;&lt;a id=&#34;__codelineno-24-16&#34; name=&#34;__codelineno-24-16&#34; href=&#34;#__codelineno-24-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-17&#34;&gt;&lt;a id=&#34;__codelineno-24-17&#34; name=&#34;__codelineno-24-17&#34; href=&#34;#__codelineno-24-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0000000000001130&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;read_tls_data2&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-24-18&#34;&gt;&lt;a id=&#34;__codelineno-24-18&#34; name=&#34;__codelineno-24-18&#34; href=&#34;#__codelineno-24-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1130&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ec&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sub&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x8,%rsp&lt;/span&gt;&lt;span id=&#34;__span-24-19&#34;&gt;&lt;a id=&#34;__codelineno-24-19&#34; name=&#34;__codelineno-24-19&#34; href=&#34;#__codelineno-24-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1134&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3d&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;74&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;2e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;data16&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;lea&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x2e74&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%rdi&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 3fb0 &amp;lt;tls_data2@@Base+0x3fb0&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-20&#34;&gt;&lt;a id=&#34;__codelineno-24-20&#34; name=&#34;__codelineno-24-20&#34; href=&#34;#__codelineno-24-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;113b:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-21&#34;&gt;&lt;a id=&#34;__codelineno-24-21&#34; name=&#34;__codelineno-24-21&#34; href=&#34;#__codelineno-24-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;113c:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;e8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ec&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;fe&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;data16&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;data16&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;rex.W&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;call&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1030&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;__tls_get_addr@plt&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-24-22&#34;&gt;&lt;a id=&#34;__codelineno-24-22&#34; name=&#34;__codelineno-24-22&#34; href=&#34;#__codelineno-24-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1143&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ff&lt;/span&gt;&lt;span id=&#34;__span-24-23&#34;&gt;&lt;a id=&#34;__codelineno-24-23&#34; name=&#34;__codelineno-24-23&#34; href=&#34;#__codelineno-24-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1144&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;8b&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mov&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%rax&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,%eax&lt;/span&gt;&lt;span id=&#34;__span-24-24&#34;&gt;&lt;a id=&#34;__codelineno-24-24&#34; name=&#34;__codelineno-24-24&#34; href=&#34;#__codelineno-24-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1146&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c4&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;add&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;x8,%rsp&lt;/span&gt;&lt;span id=&#34;__span-24-25&#34;&gt;&lt;a id=&#34;__codelineno-24-25&#34; name=&#34;__codelineno-24-25&#34; href=&#34;#__codelineno-24-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;114a:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c3&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ret&lt;/span&gt;&lt;span id=&#34;__span-24-26&#34;&gt;&lt;a id=&#34;__codelineno-24-26&#34; name=&#34;__codelineno-24-26&#34; href=&#34;#__codelineno-24-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-27&#34;&gt;&lt;a id=&#34;__codelineno-24-27&#34; name=&#34;__codelineno-24-27&#34; href=&#34;#__codelineno-24-27&#34;&gt;&lt;/a&gt;Disassembly&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;of&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;section&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.got:&lt;/span&gt;&lt;span id=&#34;__span-24-28&#34;&gt;&lt;a id=&#34;__codelineno-24-28&#34; name=&#34;__codelineno-24-28&#34; href=&#34;#__codelineno-24-28&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-29&#34;&gt;&lt;a id=&#34;__codelineno-24-29&#34; name=&#34;__codelineno-24-29&#34; href=&#34;#__codelineno-24-29&#34;&gt;&lt;/a&gt;0000000000003fa8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&amp;lt;.got&amp;gt;:&lt;/span&gt;&lt;span id=&#34;__span-24-30&#34;&gt;&lt;a id=&#34;__codelineno-24-30&#34; name=&#34;__codelineno-24-30&#34; href=&#34;#__codelineno-24-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;...&lt;/span&gt;&lt;span id=&#34;__span-24-31&#34;&gt;&lt;a id=&#34;__codelineno-24-31&#34; name=&#34;__codelineno-24-31&#34; href=&#34;#__codelineno-24-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3fb0:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_DTPMOD64&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data2@@Base&lt;/span&gt;&lt;span id=&#34;__span-24-32&#34;&gt;&lt;a id=&#34;__codelineno-24-32&#34; name=&#34;__codelineno-24-32&#34; href=&#34;#__codelineno-24-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3fb8:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_DTPOFF64&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data2@@Base&lt;/span&gt;&lt;span id=&#34;__span-24-33&#34;&gt;&lt;a id=&#34;__codelineno-24-33&#34; name=&#34;__codelineno-24-33&#34; href=&#34;#__codelineno-24-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3fd0:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_DTPMOD64&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1@@Base&lt;/span&gt;&lt;span id=&#34;__span-24-34&#34;&gt;&lt;a id=&#34;__codelineno-24-34&#34; name=&#34;__codelineno-24-34&#34; href=&#34;#__codelineno-24-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;3fd8:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;R_X86_64_DTPOFF64&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tls_data1@@Base&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;观察 &lt;code&gt;.got&lt;/code&gt;，可以看到对于每个 TLS 变量，都生成了两个 entry：&lt;code&gt;tls_data2&lt;/code&gt; 占用了 &lt;code&gt;0x3fb0&lt;/code&gt; 和 &lt;code&gt;0x3fb8&lt;/code&gt; 两个 entry，第一个对应动态库的下标（MOD 表示 Module），第二个对应偏移（OFF 表示 Offset）；&lt;code&gt;tls_data1&lt;/code&gt; 也是类似的，占用了 &lt;code&gt;0x3fd0&lt;/code&gt; 和 &lt;code&gt;0x3fd8&lt;/code&gt;。当动态链接器在 &lt;code&gt;.got&lt;/code&gt; 表中准备好 &lt;code&gt;tls_index&lt;/code&gt; 结构体后，在访问 TLS 变量时，只需要 &lt;code&gt;lea&lt;/code&gt; + &lt;code&gt;call&lt;/code&gt; 就可以找到 TLS 变量的地址了。&lt;/p&gt;&lt;h2 id=&#34;四种-tls-model-的对比&#34;&gt;四种 TLS model 的对比&lt;a class=&#34;headerlink&#34; href=&#34;#四种-tls-model-的对比&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;接下来进行四种 TLS model 的对比：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;local exec TLS model: 用于可执行程序访问自身的 TLS 变量，由于可执行程序的 TLS 空间总是紧挨着 &lt;code&gt;%fs&lt;/code&gt;，所以自身的 TLS 变量相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移在链接时已知，可以直接计算出来，运行时开销最小&lt;/li&gt;&lt;li&gt;initial exec TLS model: 用于在程序启动时由动态链接器自动加载的动态库访问自身的 TLS 变量，由于它的 TLS 空间相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移在加载后就是固定的，所以由动态链接器计算出各个 TLS 变量相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移，写到 &lt;code&gt;.got&lt;/code&gt; 表中，运行时只需要读取 &lt;code&gt;.got&lt;/code&gt; 表中记录的 offset，和 &lt;code&gt;%fs&lt;/code&gt; 做加法就得到了变量的地址&lt;/li&gt;&lt;li&gt;local dynamic TLS model: 用于可能被 dlopen 的动态库访问自身的 TLS 变量，由于它的 TLS 空间相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移是不确定的，所以需要用 &lt;code&gt;__tls_get_addr&lt;/code&gt; 调用来获取自身的 TLS 空间的起始地址；为了给 &lt;code&gt;__tls_get_addr&lt;/code&gt; 传递正确的参数，告诉这个函数自己的动态库编号是多少，在 &lt;code&gt;.got&lt;/code&gt; 表中预留了一个 entry 让动态链接器把该动态库的编号写进去；那么运行时只需要读取 &lt;code&gt;.got&lt;/code&gt; 表中记录的动态库编号，调用 &lt;code&gt;__tls_get_addr&lt;/code&gt;，再和链接时已知的 offset 做加法就得到了变量的地址&lt;/li&gt;&lt;li&gt;global dynamic TLS model: 用于通用情况下，不知道 TLS 变量属于哪个动态库，也不知道 TLS 变量在 TLS 空间内的偏移是多少，所以需要动态链接器去查询 TLS 变量属于哪个动态库，放在哪个偏移上，并且动态链接器要把这两个信息写到 &lt;code&gt;.got&lt;/code&gt; 表中；那么运行时就要用 &lt;code&gt;__tls_get_addr&lt;/code&gt; 调用来根据 &lt;code&gt;.got&lt;/code&gt; 表中记录的动态库编号以及偏移来找到变量的地址&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;下面是一个对比表格：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;Instructions&lt;/th&gt;&lt;th&gt;GOT&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;local exec&lt;/td&gt;&lt;td&gt;movq&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;initial exec&lt;/td&gt;&lt;td&gt;movq + addq&lt;/td&gt;&lt;td&gt;offset&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;local dynamic&lt;/td&gt;&lt;td&gt;leaq + call + leaq&lt;/td&gt;&lt;td&gt;self module index&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;global dynamic&lt;/td&gt;&lt;td&gt;leaq + call&lt;/td&gt;&lt;td&gt;module index + offset&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;特别地，local dynamic TLS model 的 &lt;code&gt;leaq + call&lt;/code&gt; 是可以复用的，所以整体来说，还是越通用的 TLS model，运行时的开销越大。&lt;/p&gt;&lt;h2 id=&#34;实际编程中的-tls-model&#34;&gt;实际编程中的 TLS model&lt;a class=&#34;headerlink&#34; href=&#34;#实际编程中的-tls-model&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;看到这里，你可能会疑惑：在编程的时候，大多数时候并没有去管 TLS model 的事情，也就是说在编译的时候并没有指定，那么这个时候会采用什么 TLS model 呢？&lt;/p&gt;&lt;p&gt;答案是取决于编译器和链接器会根据所能了解到的情况，选择一个最优的实现方法。在前面的例子中，都是直接定义了一个全局的 &lt;code&gt;__thread&lt;/code&gt; 变量然后去访问它，但如果它是 &lt;code&gt;static&lt;/code&gt; 的，会发生什么呢？如果编译的时候，没有开 &lt;code&gt;-fPIC&lt;/code&gt;，也就是说生成的代码不会出现在动态库中，又会发生什么呢？&lt;/p&gt;&lt;p&gt;首先来看从编译器到汇编的这一个阶段，会采用什么样的 TLS model：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;如果在编译源码的时候，没有开 &lt;code&gt;-fPIC&lt;/code&gt;，那么生成的代码只出现在可执行程序中，这个时候编译器会直接使用 local exec TLS model，即生成 &lt;code&gt;movl %fs:symbol@tpoff, %rax&lt;/code&gt; 的指令&lt;/li&gt;&lt;li&gt;如果在编译源码的时候，开了 &lt;code&gt;-fPIC&lt;/code&gt;，那么生成的代码既可能出现在可执行程序中，也可能出现在动态库中，这时会首先默认为 global dynamic TLS model，即生成 &lt;code&gt;data16 leaq symbol@tlsgd(%rip), %rdi; .value 0x6666; rex64; call __tls_get_addr@PLT; movl (%rax), %eax&lt;/code&gt; 指令&lt;/li&gt;&lt;li&gt;但如果 &lt;code&gt;__thread&lt;/code&gt; 变量设置了 &lt;code&gt;static&lt;/code&gt;，即使打开了 &lt;code&gt;-fPIC&lt;/code&gt;，也保证了这个 TLS 变量一定是访问自己 TLS 空间中的，不会访问别人的，那么编译器会自动选择 local dynamic TLS model，即生成 &lt;code&gt;leaq symbol@tlsld(%rip), %rdi; call__tls_get_addr@PLT; movl %symbol@dtpoff(%rax), %eax&lt;/code&gt; 指令&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;接下来观察链接的时候，会发生什么事情：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;如果编译源码的时候，打开了 &lt;code&gt;-fPIC&lt;/code&gt; 且没有用 &lt;code&gt;static&lt;/code&gt;，如前所述，编译器会使用 global dynamic TLS model；但如果这个对象文件最后被链接到了可执行程序当中，那么链接器知道这个时候用 local exec TLS model 是性能更好的，那么它会对指令进行改写，此时之前预留的无用的指令前缀 &lt;code&gt;data 16; .value 0x6666; rex64&lt;/code&gt; 起了作用，保证改写前后的指令序列的长度不变：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-25-1&#34;&gt;&lt;a id=&#34;__codelineno-25-1&#34; name=&#34;__codelineno-25-1&#34; href=&#34;#__codelineno-25-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# before linker optimizations: global dynamic&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-2&#34;&gt;&lt;a id=&#34;__codelineno-25-2&#34; name=&#34;__codelineno-25-2&#34; href=&#34;#__codelineno-25-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;na&#34;&gt;data16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;leaq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;symbol@tlsgd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-3&#34;&gt;&lt;a id=&#34;__codelineno-25-3&#34; name=&#34;__codelineno-25-3&#34; href=&#34;#__codelineno-25-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;na&#34;&gt;.value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x6666&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-4&#34;&gt;&lt;a id=&#34;__codelineno-25-4&#34; name=&#34;__codelineno-25-4&#34; href=&#34;#__codelineno-25-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;rex64&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-5&#34;&gt;&lt;a id=&#34;__codelineno-25-5&#34; name=&#34;__codelineno-25-5&#34; href=&#34;#__codelineno-25-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;__tls_get_addr@PLT&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-6&#34;&gt;&lt;a id=&#34;__codelineno-25-6&#34; name=&#34;__codelineno-25-6&#34; href=&#34;#__codelineno-25-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-7&#34;&gt;&lt;a id=&#34;__codelineno-25-7&#34; name=&#34;__codelineno-25-7&#34; href=&#34;#__codelineno-25-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# after linker optimizations: local exec&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-8&#34;&gt;&lt;a id=&#34;__codelineno-25-8&#34; name=&#34;__codelineno-25-8&#34; href=&#34;#__codelineno-25-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# the symbol@tpoff(%rax) relocation is resolved by the linker immediately&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-9&#34;&gt;&lt;a id=&#34;__codelineno-25-9&#34; name=&#34;__codelineno-25-9&#34; href=&#34;#__codelineno-25-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;movq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-10&#34;&gt;&lt;a id=&#34;__codelineno-25-10&#34; name=&#34;__codelineno-25-10&#34; href=&#34;#__codelineno-25-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;leaq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;symbol@tpoff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;类似地，如果编译源码的时候，打开了 &lt;code&gt;-fPIC&lt;/code&gt; 且用了 &lt;code&gt;static&lt;/code&gt;，如前所述，编译器会使用 local dynamic TLS model；但如果这个对象文件最后被链接到了可执行程序当中，那么链接器知道这个时候用 local exec TLS model 是性能更好的，那么它会对指令进行改写，为了保证改写前后的指令序列的长度不变，这次是在生成的汇编里加入无用的指令前缀：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-26-1&#34;&gt;&lt;a id=&#34;__codelineno-26-1&#34; name=&#34;__codelineno-26-1&#34; href=&#34;#__codelineno-26-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# before linker optimizations: local dynamic&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-26-2&#34;&gt;&lt;a id=&#34;__codelineno-26-2&#34; name=&#34;__codelineno-26-2&#34; href=&#34;#__codelineno-26-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;leaq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;symbol@tlsld&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-26-3&#34;&gt;&lt;a id=&#34;__codelineno-26-3&#34; name=&#34;__codelineno-26-3&#34; href=&#34;#__codelineno-26-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;__tls_get_addr@PLT&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-26-4&#34;&gt;&lt;a id=&#34;__codelineno-26-4&#34; name=&#34;__codelineno-26-4&#34; href=&#34;#__codelineno-26-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;symbol@dtpoff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-26-5&#34;&gt;&lt;a id=&#34;__codelineno-26-5&#34; name=&#34;__codelineno-26-5&#34; href=&#34;#__codelineno-26-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-26-6&#34;&gt;&lt;a id=&#34;__codelineno-26-6&#34; name=&#34;__codelineno-26-6&#34; href=&#34;#__codelineno-26-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# after linker optimizations: local exec&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-26-7&#34;&gt;&lt;a id=&#34;__codelineno-26-7&#34; name=&#34;__codelineno-26-7&#34; href=&#34;#__codelineno-26-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# the symbol@tpoff(%rax) relocation is resolved by the linker immediately&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-26-8&#34;&gt;&lt;a id=&#34;__codelineno-26-8&#34; name=&#34;__codelineno-26-8&#34; href=&#34;#__codelineno-26-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;na&#34;&gt;.word&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x6666&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-26-9&#34;&gt;&lt;a id=&#34;__codelineno-26-9&#34; name=&#34;__codelineno-26-9&#34; href=&#34;#__codelineno-26-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;na&#34;&gt;.byte&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x66&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-26-10&#34;&gt;&lt;a id=&#34;__codelineno-26-10&#34; name=&#34;__codelineno-26-10&#34; href=&#34;#__codelineno-26-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;movq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-26-11&#34;&gt;&lt;a id=&#34;__codelineno-26-11&#34; name=&#34;__codelineno-26-11&#34; href=&#34;#__codelineno-26-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;symbol@tpoff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果编译源码的时候，打开了 &lt;code&gt;-fPIC&lt;/code&gt; 且用了 &lt;code&gt;extern&lt;/code&gt; 来标记 TLS 变量，由于编译器不知道这个 TLS 变量属于谁，所以编译器会使用 global dynamic TLS model；但如果这个对象文件最后被链接到了可执行程序当中，并且编译器发现这个 TLS 变量属于一个动态库，这意味着这个 TLS 变量在程序启动时会随着动态库加载而变得可用，适用 initial exec TLS model，于是链接器也会进行改写：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-27-1&#34;&gt;&lt;a id=&#34;__codelineno-27-1&#34; name=&#34;__codelineno-27-1&#34; href=&#34;#__codelineno-27-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# before linker optimizations: global dynamic&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-2&#34;&gt;&lt;a id=&#34;__codelineno-27-2&#34; name=&#34;__codelineno-27-2&#34; href=&#34;#__codelineno-27-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;na&#34;&gt;data16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;leaq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;symbol@tlsgd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-3&#34;&gt;&lt;a id=&#34;__codelineno-27-3&#34; name=&#34;__codelineno-27-3&#34; href=&#34;#__codelineno-27-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;na&#34;&gt;.value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x6666&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-4&#34;&gt;&lt;a id=&#34;__codelineno-27-4&#34; name=&#34;__codelineno-27-4&#34; href=&#34;#__codelineno-27-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;rex64&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-5&#34;&gt;&lt;a id=&#34;__codelineno-27-5&#34; name=&#34;__codelineno-27-5&#34; href=&#34;#__codelineno-27-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;__tls_get_addr@PLT&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-6&#34;&gt;&lt;a id=&#34;__codelineno-27-6&#34; name=&#34;__codelineno-27-6&#34; href=&#34;#__codelineno-27-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-7&#34;&gt;&lt;a id=&#34;__codelineno-27-7&#34; name=&#34;__codelineno-27-7&#34; href=&#34;#__codelineno-27-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# after linker optimizations: initial exec&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-8&#34;&gt;&lt;a id=&#34;__codelineno-27-8&#34; name=&#34;__codelineno-27-8&#34; href=&#34;#__codelineno-27-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;movq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-9&#34;&gt;&lt;a id=&#34;__codelineno-27-9&#34; name=&#34;__codelineno-27-9&#34; href=&#34;#__codelineno-27-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;addq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;symbol@gottpoff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果编译源码的时候，没有打开 &lt;code&gt;-fPIC&lt;/code&gt; 且用了 &lt;code&gt;extern&lt;/code&gt; 来标记 TLS 变量，那么编译器知道，这个对象文件最后只能出现在可执行程序中，那么这个 TLS 变量要么来自于可执行程序自己，要么来自于程序启动时加载的动态库，所以编译器会使用 initial exec TLS model；但如果这个对象文件最后被链接到了可执行程序当中，并且编译器发现这个 TLS 变量属于可执行程序自己，适用 local exec TLS model，于是链接器也会进行改写：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-28-1&#34;&gt;&lt;a id=&#34;__codelineno-28-1&#34; name=&#34;__codelineno-28-1&#34; href=&#34;#__codelineno-28-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# before linker optimizations: initial exec&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-2&#34;&gt;&lt;a id=&#34;__codelineno-28-2&#34; name=&#34;__codelineno-28-2&#34; href=&#34;#__codelineno-28-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;movq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-3&#34;&gt;&lt;a id=&#34;__codelineno-28-3&#34; name=&#34;__codelineno-28-3&#34; href=&#34;#__codelineno-28-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;addq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;symbol@gottpoff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-4&#34;&gt;&lt;a id=&#34;__codelineno-28-4&#34; name=&#34;__codelineno-28-4&#34; href=&#34;#__codelineno-28-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-5&#34;&gt;&lt;a id=&#34;__codelineno-28-5&#34; name=&#34;__codelineno-28-5&#34; href=&#34;#__codelineno-28-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# after linker optimizations: local exec&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-6&#34;&gt;&lt;a id=&#34;__codelineno-28-6&#34; name=&#34;__codelineno-28-6&#34; href=&#34;#__codelineno-28-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# the symbol@tpoff(%rax) relocation is resolved by the linker immediately&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-7&#34;&gt;&lt;a id=&#34;__codelineno-28-7&#34; name=&#34;__codelineno-28-7&#34; href=&#34;#__codelineno-28-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;movq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-8&#34;&gt;&lt;a id=&#34;__codelineno-28-8&#34; name=&#34;__codelineno-28-8&#34; href=&#34;#__codelineno-28-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;leaq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;symbol@tpoff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;可见通过两阶段的处理，在编译器和链接器的协同下，尝试优化到一个开销更小的 TLS model，转化的几种情况如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;global dynamic -&amp;gt; initial exec：编译的时候开了 -fPIC 和 &lt;code&gt;extern&lt;/code&gt;，然后链接到可执行程序内，TLS 变量来自动态库&lt;/li&gt;&lt;li&gt;global dynamic -&amp;gt; local exec：编译的时候开了 -fPIC，然后链接到可执行程序内，TLS 变量来自程序自己&lt;/li&gt;&lt;li&gt;local dynamic -&amp;gt; local exec：编译的时候开了 -fPIC 和 &lt;code&gt;-static&lt;/code&gt;，然后链接到可执行程序内，TLS 变量来自程序自己&lt;/li&gt;&lt;li&gt;initial exec -&amp;gt; local exec：编译的时候没开 -fPIC，然后链接到可执行程序内，TLS 变量来自程序自己&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;tlsdesc&#34;&gt;TLSDESC&lt;a class=&#34;headerlink&#34; href=&#34;#tlsdesc&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;前面提到，在 global dynamic 和 local dynamic 两种 TLS model 下，要访问 TLS 变量的时候，需要调用 &lt;code&gt;__tls_get_addr&lt;/code&gt; 函数，这是比较慢的。为了优化它，让人想到了 PLT 机制：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;初始情况下，PLT 会生成一个 stub，从 &lt;code&gt;.got&lt;/code&gt; 读取一个函数指针并跳转，这个函数指针初始情况下是执行了 &lt;code&gt;stub&lt;/code&gt; 的下一条指令&lt;/li&gt;&lt;li&gt;对于第一次执行这个 stub，它会把这个函数的编号 push 到栈上，然后调用动态链接器提供的 &lt;code&gt;_dl_runtime_resolve&lt;/code&gt; 函数来寻找这个函数的实际地址；此时 &lt;code&gt;_dl_runtime_resolve&lt;/code&gt; 会把找到的函数地址写回到 &lt;code&gt;.got&lt;/code&gt; 的函数指针&lt;/li&gt;&lt;li&gt;此后再次执行 stub 的时候，就会从 &lt;code&gt;.got&lt;/code&gt; 读取计算好的的函数指针，直接跳转到实际的函数地址&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;由此可以类比得到一个针对 TLS 的类似机制，称为 TLSDESC：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;TLSDESC 占用 16 字节空间，前面 8 字节是一个函数指针，后面 8 字节用来保存 offset，保存在 &lt;code&gt;.got&lt;/code&gt; 表中&lt;/li&gt;&lt;li&gt;把原来 local/global dynamic TLS model 对 &lt;code&gt;__tls_get_addr&lt;/code&gt; 的调用，改成调用 TLSDESC 中的函数指针，调用时 &lt;code&gt;%rax&lt;/code&gt; 寄存器指向了 TLSDESC 的地址，它的返回结果是 TLS 变量相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移，后续指令根据这个偏移计算出实际的地址&lt;/li&gt;&lt;li&gt;动态链接器在加载的时候，它会去判断目标 TLS 变量相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移是否是常量：对于可执行程序以及随着程序启动而自动加载的动态库，它们的 TLS 变量相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移是常量&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果目标 TLS 变量相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移是常量，则把这个常量写入到 &lt;code&gt;.got&lt;/code&gt; 表中 TLSDESC 变量的 offset 的位置，然后把函数指针改写成 &lt;code&gt;_dl_tlsdesc_return&lt;/code&gt;，它是一个很简单的实现，因为在调用这个函数时，&lt;code&gt;%rax&lt;/code&gt; 寄存器指向了 TLSDESC 的地址，所以直接从 &lt;code&gt;%rax+8&lt;/code&gt; 地址把 offset 读出来然后返回就可以：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-29-1&#34;&gt;&lt;a id=&#34;__codelineno-29-1&#34; name=&#34;__codelineno-29-1&#34; href=&#34;#__codelineno-29-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;_dl_tlsdesc_return:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-29-2&#34;&gt;&lt;a id=&#34;__codelineno-29-2&#34; name=&#34;__codelineno-29-2&#34; href=&#34;#__codelineno-29-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;movq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-29-3&#34;&gt;&lt;a id=&#34;__codelineno-29-3&#34; name=&#34;__codelineno-29-3&#34; href=&#34;#__codelineno-29-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果目标 TLS 变量相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移不是常量，则把函数指针改写成 &lt;code&gt;_dl_tlsdesc_dynamic&lt;/code&gt; 函数，再走和之前的 &lt;code&gt;__tls_get_addr&lt;/code&gt; 类似的逻辑，完成剩下的查找；由于返回值是 TLS 变量相对 &lt;code&gt;%fs&lt;/code&gt; 的偏移，所以返回之前还要减去 &lt;code&gt;%fs&lt;/code&gt; 的地址：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-30-1&#34;&gt;&lt;a id=&#34;__codelineno-30-1&#34; name=&#34;__codelineno-30-1&#34; href=&#34;#__codelineno-30-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* %rax points to the TLS descriptor, such that 0(%rax) points to&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-2&#34;&gt;&lt;a id=&#34;__codelineno-30-2&#34; name=&#34;__codelineno-30-2&#34; href=&#34;#__codelineno-30-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; _dl_tlsdesc_dynamic itself, and 8(%rax) points to a struct&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-3&#34;&gt;&lt;a id=&#34;__codelineno-30-3&#34; name=&#34;__codelineno-30-3&#34; href=&#34;#__codelineno-30-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; tlsdesc_dynamic_arg object. It must return in %rax the offset&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-4&#34;&gt;&lt;a id=&#34;__codelineno-30-4&#34; name=&#34;__codelineno-30-4&#34; href=&#34;#__codelineno-30-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; between the thread pointer and the object denoted by the&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-5&#34;&gt;&lt;a id=&#34;__codelineno-30-5&#34; name=&#34;__codelineno-30-5&#34; href=&#34;#__codelineno-30-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; argument, without clobbering any registers.&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-6&#34;&gt;&lt;a id=&#34;__codelineno-30-6&#34; name=&#34;__codelineno-30-6&#34; href=&#34;#__codelineno-30-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-7&#34;&gt;&lt;a id=&#34;__codelineno-30-7&#34; name=&#34;__codelineno-30-7&#34; href=&#34;#__codelineno-30-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; The assembly code that follows is a rendition of the following&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-8&#34;&gt;&lt;a id=&#34;__codelineno-30-8&#34; name=&#34;__codelineno-30-8&#34; href=&#34;#__codelineno-30-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; C code, hand-optimized a little bit.&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-9&#34;&gt;&lt;a id=&#34;__codelineno-30-9&#34; name=&#34;__codelineno-30-9&#34; href=&#34;#__codelineno-30-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-10&#34;&gt;&lt;a id=&#34;__codelineno-30-10&#34; name=&#34;__codelineno-30-10&#34; href=&#34;#__codelineno-30-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;ptrdiff_t&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-11&#34;&gt;&lt;a id=&#34;__codelineno-30-11&#34; name=&#34;__codelineno-30-11&#34; href=&#34;#__codelineno-30-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;_dl_tlsdesc_dynamic (register struct tlsdesc *tdp asm (&amp;quot;%rax&amp;quot;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-12&#34;&gt;&lt;a id=&#34;__codelineno-30-12&#34; name=&#34;__codelineno-30-12&#34; href=&#34;#__codelineno-30-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-13&#34;&gt;&lt;a id=&#34;__codelineno-30-13&#34; name=&#34;__codelineno-30-13&#34; href=&#34;#__codelineno-30-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;struct tlsdesc_dynamic_arg *td = tdp-&amp;gt;arg;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-14&#34;&gt;&lt;a id=&#34;__codelineno-30-14&#34; name=&#34;__codelineno-30-14&#34; href=&#34;#__codelineno-30-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;dtv_t *dtv = *(dtv_t **)((char *)__thread_pointer + DTV_OFFSET);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-15&#34;&gt;&lt;a id=&#34;__codelineno-30-15&#34; name=&#34;__codelineno-30-15&#34; href=&#34;#__codelineno-30-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;if (__builtin_expect (td-&amp;gt;gen_count &amp;lt;= dtv[0].counter&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-16&#34;&gt;&lt;a id=&#34;__codelineno-30-16&#34; name=&#34;__codelineno-30-16&#34; href=&#34;#__codelineno-30-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; &amp;amp;&amp;amp; (dtv[td-&amp;gt;tlsinfo.ti_module].pointer.val&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-17&#34;&gt;&lt;a id=&#34;__codelineno-30-17&#34; name=&#34;__codelineno-30-17&#34; href=&#34;#__codelineno-30-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; != TLS_DTV_UNALLOCATED),&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-18&#34;&gt;&lt;a id=&#34;__codelineno-30-18&#34; name=&#34;__codelineno-30-18&#34; href=&#34;#__codelineno-30-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; 1))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-19&#34;&gt;&lt;a id=&#34;__codelineno-30-19&#34; name=&#34;__codelineno-30-19&#34; href=&#34;#__codelineno-30-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; return dtv[td-&amp;gt;tlsinfo.ti_module].pointer.val + td-&amp;gt;tlsinfo.ti_offset&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-20&#34;&gt;&lt;a id=&#34;__codelineno-30-20&#34; name=&#34;__codelineno-30-20&#34; href=&#34;#__codelineno-30-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; - __thread_pointer;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-21&#34;&gt;&lt;a id=&#34;__codelineno-30-21&#34; name=&#34;__codelineno-30-21&#34; href=&#34;#__codelineno-30-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-22&#34;&gt;&lt;a id=&#34;__codelineno-30-22&#34; name=&#34;__codelineno-30-22&#34; href=&#34;#__codelineno-30-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;return __tls_get_addr_internal (&amp;amp;td-&amp;gt;tlsinfo) - __thread_pointer;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-23&#34;&gt;&lt;a id=&#34;__codelineno-30-23&#34; name=&#34;__codelineno-30-23&#34; href=&#34;#__codelineno-30-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-24&#34;&gt;&lt;a id=&#34;__codelineno-30-24&#34; name=&#34;__codelineno-30-24&#34; href=&#34;#__codelineno-30-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;它利用的也是在内存中保存函数指针，通过运行时替换函数指针的方式，实现 slow path 到 fast path 的动态替换。&lt;/p&gt;&lt;h2 id=&#34;dtv-维护&#34;&gt;dtv 维护&lt;a class=&#34;headerlink&#34; href=&#34;#dtv-维护&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;最后再来深入分析一下 dtv 的维护方式。前面提到，dtv 的指针是保存在 &lt;code&gt;struct pthread&lt;/code&gt; 内的，而 &lt;code&gt;struct pthread&lt;/code&gt; 又是保存在 &lt;code&gt;%fs&lt;/code&gt; 寄存器指向的位置：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-31-1&#34;&gt;&lt;a id=&#34;__codelineno-31-1&#34; name=&#34;__codelineno-31-1&#34; href=&#34;#__codelineno-31-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;pthread&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-2&#34;&gt;&lt;a id=&#34;__codelineno-31-2&#34; name=&#34;__codelineno-31-2&#34; href=&#34;#__codelineno-31-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-3&#34;&gt;&lt;a id=&#34;__codelineno-31-3&#34; name=&#34;__codelineno-31-3&#34; href=&#34;#__codelineno-31-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcbhead_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-4&#34;&gt;&lt;a id=&#34;__codelineno-31-4&#34; name=&#34;__codelineno-31-4&#34; href=&#34;#__codelineno-31-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-5&#34;&gt;&lt;a id=&#34;__codelineno-31-5&#34; name=&#34;__codelineno-31-5&#34; href=&#34;#__codelineno-31-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-6&#34;&gt;&lt;a id=&#34;__codelineno-31-6&#34; name=&#34;__codelineno-31-6&#34; href=&#34;#__codelineno-31-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-7&#34;&gt;&lt;a id=&#34;__codelineno-31-7&#34; name=&#34;__codelineno-31-7&#34; href=&#34;#__codelineno-31-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-8&#34;&gt;&lt;a id=&#34;__codelineno-31-8&#34; name=&#34;__codelineno-31-8&#34; href=&#34;#__codelineno-31-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-9&#34;&gt;&lt;a id=&#34;__codelineno-31-9&#34; name=&#34;__codelineno-31-9&#34; href=&#34;#__codelineno-31-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-10&#34;&gt;&lt;a id=&#34;__codelineno-31-10&#34; name=&#34;__codelineno-31-10&#34; href=&#34;#__codelineno-31-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtv_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-11&#34;&gt;&lt;a id=&#34;__codelineno-31-11&#34; name=&#34;__codelineno-31-11&#34; href=&#34;#__codelineno-31-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-12&#34;&gt;&lt;a id=&#34;__codelineno-31-12&#34; name=&#34;__codelineno-31-12&#34; href=&#34;#__codelineno-31-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcbhead_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以要访问 dtv 也很简单，直接从 &lt;code&gt;%fs&lt;/code&gt; 加它在 &lt;code&gt;struct pthread&lt;/code&gt; 结构体内的偏移即可。&lt;/p&gt;&lt;p&gt;前面提到，在调用 &lt;code&gt;__tls_get_addr&lt;/code&gt; 时，需要提供一个动态库的 ID 来查询得到这个动态库的 TLS 空间的起始地址，再加上在这个 TLS 空间内的偏移。而这个动态库的 ID，正好就是 dtv 数组的下标，所以 &lt;code&gt;__tls_get_addr&lt;/code&gt; 做的事情大概是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;找到 &lt;code&gt;dtv&lt;/code&gt; 的地址：&lt;code&gt;mov %fs:DTV_OFFSET, %RDX_LP&lt;/code&gt;&lt;/li&gt;&lt;li&gt;从 &lt;code&gt;__tls_get_addr&lt;/code&gt; 函数的参数里读取 &lt;code&gt;ti_module&lt;/code&gt; 字段：&lt;code&gt;mov TI_MODULE_OFFSET(%rdi), %RAX_LP&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;读取 &lt;code&gt;dtv[ti-&amp;gt;ti_module].val&lt;/code&gt;，也就是这个模块的 TLS 空间的起始地址：&lt;code&gt;salq $4, %rax; movq (%rdx, %rax), %rax&lt;/code&gt;，这里左移 4 位是因为 &lt;code&gt;dtv&lt;/code&gt; 数组的每个元素的类型是 &lt;code&gt;dtv_t&lt;/code&gt;，其定义如下：&lt;/p&gt;&lt;p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-32-1&#34;&gt;&lt;a id=&#34;__codelineno-32-1&#34; name=&#34;__codelineno-32-1&#34; href=&#34;#__codelineno-32-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;dtv_pointer&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-2&#34;&gt;&lt;a id=&#34;__codelineno-32-2&#34; name=&#34;__codelineno-32-2&#34; href=&#34;#__codelineno-32-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-3&#34;&gt;&lt;a id=&#34;__codelineno-32-3&#34; name=&#34;__codelineno-32-3&#34; href=&#34;#__codelineno-32-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Pointer to data, or TLS_DTV_UNALLOCATED. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-4&#34;&gt;&lt;a id=&#34;__codelineno-32-4&#34; name=&#34;__codelineno-32-4&#34; href=&#34;#__codelineno-32-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Unaligned pointer, for deallocation. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-5&#34;&gt;&lt;a id=&#34;__codelineno-32-5&#34; name=&#34;__codelineno-32-5&#34; href=&#34;#__codelineno-32-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-6&#34;&gt;&lt;a id=&#34;__codelineno-32-6&#34; name=&#34;__codelineno-32-6&#34; href=&#34;#__codelineno-32-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-7&#34;&gt;&lt;a id=&#34;__codelineno-32-7&#34; name=&#34;__codelineno-32-7&#34; href=&#34;#__codelineno-32-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* Type for the dtv. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-8&#34;&gt;&lt;a id=&#34;__codelineno-32-8&#34; name=&#34;__codelineno-32-8&#34; href=&#34;#__codelineno-32-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;union&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;dtv&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-9&#34;&gt;&lt;a id=&#34;__codelineno-32-9&#34; name=&#34;__codelineno-32-9&#34; href=&#34;#__codelineno-32-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-10&#34;&gt;&lt;a id=&#34;__codelineno-32-10&#34; name=&#34;__codelineno-32-10&#34; href=&#34;#__codelineno-32-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-11&#34;&gt;&lt;a id=&#34;__codelineno-32-11&#34; name=&#34;__codelineno-32-11&#34; href=&#34;#__codelineno-32-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;dtv_pointer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-12&#34;&gt;&lt;a id=&#34;__codelineno-32-12&#34; name=&#34;__codelineno-32-12&#34; href=&#34;#__codelineno-32-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtv_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;4. 把起始地址加上偏移，然后返回：&lt;code&gt;add TI_OFFSET_OFFSET(%rdi), %RAX_LP; ret&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;但实际情况会比这个更复杂：dlopen 可能会动态引入新的动态库，此时 dtv 数组可能需要扩张；此外，如果一个动态库有 TLS 变量但是从来不用，也可以 lazy 分配它的 TLS 空间，只有在第一次访问的时候，才去分配。&lt;/p&gt;&lt;p&gt;首先来考虑第一个需求，处理 dlopen 导致 dtv 元素个数变化，它的实现方法是这样的：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;dtv[0]&lt;/code&gt; 不用来保存 TLS 空间的信息，而是记录一个 counter，这个 counter 记录的是当前 dtv 的版本号（generation），另外在全局变量 &lt;code&gt;dl_tls_generation&lt;/code&gt; 中记录当前最新的版本号；当 dlopen 导致 dtv 结构发生变化时，更新 &lt;code&gt;dl_tls_generation&lt;/code&gt; 版本，然后在 &lt;code&gt;__tls_get_addr&lt;/code&gt; 里检查版本号，不一致则进入 slow path：&lt;/p&gt;&lt;p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-33-1&#34;&gt;&lt;a id=&#34;__codelineno-33-1&#34; name=&#34;__codelineno-33-1&#34; href=&#34;#__codelineno-33-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;ENTRY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;__tls_get_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-2&#34;&gt;&lt;a id=&#34;__codelineno-33-2&#34; name=&#34;__codelineno-33-2&#34; href=&#34;#__codelineno-33-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;DTV_OFFSET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%RDX_LP&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-3&#34;&gt;&lt;a id=&#34;__codelineno-33-3&#34; name=&#34;__codelineno-33-3&#34; href=&#34;#__codelineno-33-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-4&#34;&gt;&lt;a id=&#34;__codelineno-33-4&#34; name=&#34;__codelineno-33-4&#34; href=&#34;#__codelineno-33-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;GL_TLS_GENERATION_OFFSET&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;_rtld_local&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%RAX_LP&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-5&#34;&gt;&lt;a id=&#34;__codelineno-33-5&#34; name=&#34;__codelineno-33-5&#34; href=&#34;#__codelineno-33-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* GL(dl_tls_generation) == dtv[0].counter */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-6&#34;&gt;&lt;a id=&#34;__codelineno-33-6&#34; name=&#34;__codelineno-33-6&#34; href=&#34;#__codelineno-33-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%RAX_LP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-7&#34;&gt;&lt;a id=&#34;__codelineno-33-7&#34; name=&#34;__codelineno-33-7&#34; href=&#34;#__codelineno-33-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-8&#34;&gt;&lt;a id=&#34;__codelineno-33-8&#34; name=&#34;__codelineno-33-8&#34; href=&#34;#__codelineno-33-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-9&#34;&gt;&lt;a id=&#34;__codelineno-33-9&#34; name=&#34;__codelineno-33-9&#34; href=&#34;#__codelineno-33-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;TI_MODULE_OFFSET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%RAX_LP&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-10&#34;&gt;&lt;a id=&#34;__codelineno-33-10&#34; name=&#34;__codelineno-33-10&#34; href=&#34;#__codelineno-33-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* dtv[ti-&amp;gt;ti_module] */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-11&#34;&gt;&lt;a id=&#34;__codelineno-33-11&#34; name=&#34;__codelineno-33-11&#34; href=&#34;#__codelineno-33-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;salq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-12&#34;&gt;&lt;a id=&#34;__codelineno-33-12&#34; name=&#34;__codelineno-33-12&#34; href=&#34;#__codelineno-33-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;movq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-13&#34;&gt;&lt;a id=&#34;__codelineno-33-13&#34; name=&#34;__codelineno-33-13&#34; href=&#34;#__codelineno-33-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-14&#34;&gt;&lt;a id=&#34;__codelineno-33-14&#34; name=&#34;__codelineno-33-14&#34; href=&#34;#__codelineno-33-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;TI_OFFSET_OFFSET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%RAX_LP&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-15&#34;&gt;&lt;a id=&#34;__codelineno-33-15&#34; name=&#34;__codelineno-33-15&#34; href=&#34;#__codelineno-33-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-16&#34;&gt;&lt;a id=&#34;__codelineno-33-16&#34; name=&#34;__codelineno-33-16&#34; href=&#34;#__codelineno-33-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;err&#34;&gt;1:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-17&#34;&gt;&lt;a id=&#34;__codelineno-33-17&#34; name=&#34;__codelineno-33-17&#34; href=&#34;#__codelineno-33-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* slow path, stack alignment omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-18&#34;&gt;&lt;a id=&#34;__codelineno-33-18&#34; name=&#34;__codelineno-33-18&#34; href=&#34;#__codelineno-33-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;__tls_get_addr_slow&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-19&#34;&gt;&lt;a id=&#34;__codelineno-33-19&#34; name=&#34;__codelineno-33-19&#34; href=&#34;#__codelineno-33-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;2. 在 &lt;code&gt;__tls_get_addr_slow&lt;/code&gt; 中，如果发现当前 dtv 的版本号和最新的版本号 &lt;code&gt;dl_tls_generation&lt;/code&gt; 不一致，就调用 &lt;code&gt;update_get_addr&lt;/code&gt; 来重新分配内存：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-34-1&#34;&gt;&lt;a id=&#34;__codelineno-34-1&#34; name=&#34;__codelineno-34-1&#34; href=&#34;#__codelineno-34-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-34-2&#34;&gt;&lt;a id=&#34;__codelineno-34-2&#34; name=&#34;__codelineno-34-2&#34; href=&#34;#__codelineno-34-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;__tls_get_addr_slow&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_index&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ti&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-34-3&#34;&gt;&lt;a id=&#34;__codelineno-34-3&#34; name=&#34;__codelineno-34-3&#34; href=&#34;#__codelineno-34-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-34-4&#34;&gt;&lt;a id=&#34;__codelineno-34-4&#34; name=&#34;__codelineno-34-4&#34; href=&#34;#__codelineno-34-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtv_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtv&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;THREAD_DTV&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-34-5&#34;&gt;&lt;a id=&#34;__codelineno-34-5&#34; name=&#34;__codelineno-34-5&#34; href=&#34;#__codelineno-34-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-34-6&#34;&gt;&lt;a id=&#34;__codelineno-34-6&#34; name=&#34;__codelineno-34-6&#34; href=&#34;#__codelineno-34-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__glibc_unlikely&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dl_tls_generation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-34-7&#34;&gt;&lt;a id=&#34;__codelineno-34-7&#34; name=&#34;__codelineno-34-7&#34; href=&#34;#__codelineno-34-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update_get_addr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ti&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-34-8&#34;&gt;&lt;a id=&#34;__codelineno-34-8&#34; name=&#34;__codelineno-34-8&#34; href=&#34;#__codelineno-34-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-34-9&#34;&gt;&lt;a id=&#34;__codelineno-34-9&#34; name=&#34;__codelineno-34-9&#34; href=&#34;#__codelineno-34-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tls_get_addr_tail&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ti&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-34-10&#34;&gt;&lt;a id=&#34;__codelineno-34-10&#34; name=&#34;__codelineno-34-10&#34; href=&#34;#__codelineno-34-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;具体的 dtv 更新逻辑比较复杂，有兴趣的读者可以翻阅 glibc 的源码中 &lt;code&gt;update_get_addr&lt;/code&gt; 函数的实现。&lt;/p&gt;&lt;p&gt;接下来考虑第二个需求，也就是 lazy 分配，只有在第一次访问 TLS 空间的时候，才给 dlopen 的动态库分配 TLS 空间。为了区分已分配和未分配的 TLS 空间，未分配的 TLS 空间的 &lt;code&gt;val&lt;/code&gt; 字段的值是 &lt;code&gt;TLS_DTV_UNALLOCATED&lt;/code&gt;，当 &lt;code&gt;__tls_get_addr&lt;/code&gt; 检测到 TLS 空间尚未分配时，也会进入 slow path：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-35-1&#34;&gt;&lt;a id=&#34;__codelineno-35-1&#34; name=&#34;__codelineno-35-1&#34; href=&#34;#__codelineno-35-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;ENTRY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;__tls_get_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-2&#34;&gt;&lt;a id=&#34;__codelineno-35-2&#34; name=&#34;__codelineno-35-2&#34; href=&#34;#__codelineno-35-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;DTV_OFFSET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%RDX_LP&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-3&#34;&gt;&lt;a id=&#34;__codelineno-35-3&#34; name=&#34;__codelineno-35-3&#34; href=&#34;#__codelineno-35-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-4&#34;&gt;&lt;a id=&#34;__codelineno-35-4&#34; name=&#34;__codelineno-35-4&#34; href=&#34;#__codelineno-35-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;GL_TLS_GENERATION_OFFSET&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;_rtld_local&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%RAX_LP&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-5&#34;&gt;&lt;a id=&#34;__codelineno-35-5&#34; name=&#34;__codelineno-35-5&#34; href=&#34;#__codelineno-35-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* GL(dl_tls_generation) == dtv[0].counter */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-6&#34;&gt;&lt;a id=&#34;__codelineno-35-6&#34; name=&#34;__codelineno-35-6&#34; href=&#34;#__codelineno-35-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%RAX_LP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-7&#34;&gt;&lt;a id=&#34;__codelineno-35-7&#34; name=&#34;__codelineno-35-7&#34; href=&#34;#__codelineno-35-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-8&#34;&gt;&lt;a id=&#34;__codelineno-35-8&#34; name=&#34;__codelineno-35-8&#34; href=&#34;#__codelineno-35-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-9&#34;&gt;&lt;a id=&#34;__codelineno-35-9&#34; name=&#34;__codelineno-35-9&#34; href=&#34;#__codelineno-35-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;TI_MODULE_OFFSET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%RAX_LP&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-10&#34;&gt;&lt;a id=&#34;__codelineno-35-10&#34; name=&#34;__codelineno-35-10&#34; href=&#34;#__codelineno-35-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* dtv[ti-&amp;gt;ti_module] */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-11&#34;&gt;&lt;a id=&#34;__codelineno-35-11&#34; name=&#34;__codelineno-35-11&#34; href=&#34;#__codelineno-35-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;salq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-12&#34;&gt;&lt;a id=&#34;__codelineno-35-12&#34; name=&#34;__codelineno-35-12&#34; href=&#34;#__codelineno-35-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;movq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-13&#34;&gt;&lt;a id=&#34;__codelineno-35-13&#34; name=&#34;__codelineno-35-13&#34; href=&#34;#__codelineno-35-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-14&#34;&gt;&lt;a id=&#34;__codelineno-35-14&#34; name=&#34;__codelineno-35-14&#34; href=&#34;#__codelineno-35-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* branch if val == TLS_DTV_UNALLOCATED */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-15&#34;&gt;&lt;a id=&#34;__codelineno-35-15&#34; name=&#34;__codelineno-35-15&#34; href=&#34;#__codelineno-35-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%RAX_LP&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-16&#34;&gt;&lt;a id=&#34;__codelineno-35-16&#34; name=&#34;__codelineno-35-16&#34; href=&#34;#__codelineno-35-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;je&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-17&#34;&gt;&lt;a id=&#34;__codelineno-35-17&#34; name=&#34;__codelineno-35-17&#34; href=&#34;#__codelineno-35-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-18&#34;&gt;&lt;a id=&#34;__codelineno-35-18&#34; name=&#34;__codelineno-35-18&#34; href=&#34;#__codelineno-35-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;TI_OFFSET_OFFSET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%RAX_LP&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-19&#34;&gt;&lt;a id=&#34;__codelineno-35-19&#34; name=&#34;__codelineno-35-19&#34; href=&#34;#__codelineno-35-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-20&#34;&gt;&lt;a id=&#34;__codelineno-35-20&#34; name=&#34;__codelineno-35-20&#34; href=&#34;#__codelineno-35-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;err&#34;&gt;1:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-21&#34;&gt;&lt;a id=&#34;__codelineno-35-21&#34; name=&#34;__codelineno-35-21&#34; href=&#34;#__codelineno-35-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* slow path, stack alignment omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-22&#34;&gt;&lt;a id=&#34;__codelineno-35-22&#34; name=&#34;__codelineno-35-22&#34; href=&#34;#__codelineno-35-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;__tls_get_addr_slow&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-35-23&#34;&gt;&lt;a id=&#34;__codelineno-35-23&#34; name=&#34;__codelineno-35-23&#34; href=&#34;#__codelineno-35-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 slow path 中，最终由 &lt;code&gt;allocate_dtv_entry&lt;/code&gt; 函数来分配这片空间，注意到 TLS 空间可能有对齐的要求，所以它实际上记录了两个地址，一个是 malloc 得到的地址（用于后续的 free 调用），一个是经过对齐后的地址：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-36-1&#34;&gt;&lt;a id=&#34;__codelineno-36-1&#34; name=&#34;__codelineno-36-1&#34; href=&#34;#__codelineno-36-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* Allocate one DTV entry. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-2&#34;&gt;&lt;a id=&#34;__codelineno-36-2&#34; name=&#34;__codelineno-36-2&#34; href=&#34;#__codelineno-36-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;dtv_pointer&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-3&#34;&gt;&lt;a id=&#34;__codelineno-36-3&#34; name=&#34;__codelineno-36-3&#34; href=&#34;#__codelineno-36-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;allocate_dtv_entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-4&#34;&gt;&lt;a id=&#34;__codelineno-36-4&#34; name=&#34;__codelineno-36-4&#34; href=&#34;#__codelineno-36-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-5&#34;&gt;&lt;a id=&#34;__codelineno-36-5&#34; name=&#34;__codelineno-36-5&#34; href=&#34;#__codelineno-36-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;powerof2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;_Alignof&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_align_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-6&#34;&gt;&lt;a id=&#34;__codelineno-36-6&#34; name=&#34;__codelineno-36-6&#34; href=&#34;#__codelineno-36-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-7&#34;&gt;&lt;a id=&#34;__codelineno-36-7&#34; name=&#34;__codelineno-36-7&#34; href=&#34;#__codelineno-36-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* The alignment is supported by malloc. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-8&#34;&gt;&lt;a id=&#34;__codelineno-36-8&#34; name=&#34;__codelineno-36-8&#34; href=&#34;#__codelineno-36-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-9&#34;&gt;&lt;a id=&#34;__codelineno-36-9&#34; name=&#34;__codelineno-36-9&#34; href=&#34;#__codelineno-36-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;dtv_pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-10&#34;&gt;&lt;a id=&#34;__codelineno-36-10&#34; name=&#34;__codelineno-36-10&#34; href=&#34;#__codelineno-36-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-11&#34;&gt;&lt;a id=&#34;__codelineno-36-11&#34; name=&#34;__codelineno-36-11&#34; href=&#34;#__codelineno-36-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-12&#34;&gt;&lt;a id=&#34;__codelineno-36-12&#34; name=&#34;__codelineno-36-12&#34; href=&#34;#__codelineno-36-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Emulate memalign to by manually aligning a pointer returned by&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-13&#34;&gt;&lt;a id=&#34;__codelineno-36-13&#34; name=&#34;__codelineno-36-13&#34; href=&#34;#__codelineno-36-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; malloc. First compute the size with an overflow check. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-14&#34;&gt;&lt;a id=&#34;__codelineno-36-14&#34; name=&#34;__codelineno-36-14&#34; href=&#34;#__codelineno-36-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alloc_size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-15&#34;&gt;&lt;a id=&#34;__codelineno-36-15&#34; name=&#34;__codelineno-36-15&#34; href=&#34;#__codelineno-36-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alloc_size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-16&#34;&gt;&lt;a id=&#34;__codelineno-36-16&#34; name=&#34;__codelineno-36-16&#34; href=&#34;#__codelineno-36-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;dtv_pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-17&#34;&gt;&lt;a id=&#34;__codelineno-36-17&#34; name=&#34;__codelineno-36-17&#34; href=&#34;#__codelineno-36-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-18&#34;&gt;&lt;a id=&#34;__codelineno-36-18&#34; name=&#34;__codelineno-36-18&#34; href=&#34;#__codelineno-36-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Perform the allocation. This is the pointer we need to free&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-19&#34;&gt;&lt;a id=&#34;__codelineno-36-19&#34; name=&#34;__codelineno-36-19&#34; href=&#34;#__codelineno-36-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; later. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-20&#34;&gt;&lt;a id=&#34;__codelineno-36-20&#34; name=&#34;__codelineno-36-20&#34; href=&#34;#__codelineno-36-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alloc_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-21&#34;&gt;&lt;a id=&#34;__codelineno-36-21&#34; name=&#34;__codelineno-36-21&#34; href=&#34;#__codelineno-36-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-22&#34;&gt;&lt;a id=&#34;__codelineno-36-22&#34; name=&#34;__codelineno-36-22&#34; href=&#34;#__codelineno-36-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;dtv_pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-23&#34;&gt;&lt;a id=&#34;__codelineno-36-23&#34; name=&#34;__codelineno-36-23&#34; href=&#34;#__codelineno-36-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-24&#34;&gt;&lt;a id=&#34;__codelineno-36-24&#34; name=&#34;__codelineno-36-24&#34; href=&#34;#__codelineno-36-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Find the aligned position within the larger allocation. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-25&#34;&gt;&lt;a id=&#34;__codelineno-36-25&#34; name=&#34;__codelineno-36-25&#34; href=&#34;#__codelineno-36-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aligned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roundup&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uintptr_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-26&#34;&gt;&lt;a id=&#34;__codelineno-36-26&#34; name=&#34;__codelineno-36-26&#34; href=&#34;#__codelineno-36-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-27&#34;&gt;&lt;a id=&#34;__codelineno-36-27&#34; name=&#34;__codelineno-36-27&#34; href=&#34;#__codelineno-36-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;dtv_pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aligned&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_free&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-36-28&#34;&gt;&lt;a id=&#34;__codelineno-36-28&#34; name=&#34;__codelineno-36-28&#34; href=&#34;#__codelineno-36-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可见这些 lazy 分配的 TLS 空间都是放在堆上的，由 malloc 进行动态分配。而可执行程序和随着程序启动而自动加载的动态库的 TLS 空间，是随着 TCB 也就是 &lt;code&gt;struct pthread&lt;/code&gt; 一起分配的。对于新创建的线程来说，TCB 放置在栈的顶部，而不是在堆上，所以要求大小不能动态变化，只有 dtv 数组的指针保存在 &lt;code&gt;struct pthread&lt;/code&gt; 中，dtv 数组本身是放在堆上的，根据需要进行 malloc/realloc（见 &lt;code&gt;_dl_resize_dtv&lt;/code&gt; 函数）。对于初始线程来说，TCB 是通过 malloc 或者 sbrk 动态分配的。&lt;/p&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;a class=&#34;headerlink&#34; href=&#34;#参考&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.akkadia.org/drepper/tls.pdf&#34;&gt;ELF Handling For Thread-Local Storage&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://maskray.me/blog/2021-02-14-all-about-thread-local-storage&#34;&gt;All about thread-local storage&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/8482079/what-system-data-is-stored-on-the-stack&#34;&gt;What system data is stored on the stack&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/software/2025/04/07/tls-internals/</link> <pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2025/04/07/tls-internals/</guid> </item> <item> <title>glibc 内存分配器实现探究</title> <category>allocator</category> <category>glibc</category> <category>linux</category> <category>malloc</category> <category>software</category> <description>&lt;h1 id=&#34;glibc-内存分配器实现探究&#34;&gt;glibc 内存分配器实现探究&lt;a class=&#34;headerlink&#34; href=&#34;#glibc-内存分配器实现探究&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;malloc 和 free 日常用的很多，但它内部是怎么实现的呢？本文对 glibc 2.31 版本的内存分配器的实现进行探究。&lt;/p&gt;&lt;!-- more --&gt;&lt;p&gt;本文的完整版内容已经整合到&lt;a href=&#34;/kb/software/glibc_allocator.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;&lt;h2 id=&#34;malloc&#34;&gt;malloc&lt;a class=&#34;headerlink&#34; href=&#34;#malloc&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;glibc 2.31 是 ubuntu 20.04 所使用的 libc 版本，首先来分析它的实现，源码可以从 &lt;a href=&#34;https://github.com/bminor/glibc/tree/glibc-2.31&#34;&gt;glibc-2.31 tag&lt;/a&gt; 中找到。&lt;/p&gt;&lt;p&gt;首先来看 malloc 函数，它实现在 &lt;code&gt;malloc/malloc.c&lt;/code&gt; 的 &lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3022&#34;&gt;&lt;code&gt;__libc_malloc&lt;/code&gt;&lt;/a&gt; 函数当中，忽略 &lt;code&gt;__malloc_hook&lt;/code&gt; 和一些检查，首先可以看到它有一段代码，使用了一个叫做 tcache 的数据结构：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* int_free also calls request2size, be careful to not pad twice. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tbytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;checked_request2size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tbytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__set_errno&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ENOMEM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-6&#34;&gt;&lt;a id=&#34;__codelineno-0-6&#34; name=&#34;__codelineno-0-6&#34; href=&#34;#__codelineno-0-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-7&#34;&gt;&lt;a id=&#34;__codelineno-0-7&#34; name=&#34;__codelineno-0-7&#34; href=&#34;#__codelineno-0-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-8&#34;&gt;&lt;a id=&#34;__codelineno-0-8&#34; name=&#34;__codelineno-0-8&#34; href=&#34;#__codelineno-0-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;csize2tidx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tbytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-9&#34;&gt;&lt;a id=&#34;__codelineno-0-9&#34; name=&#34;__codelineno-0-9&#34; href=&#34;#__codelineno-0-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-10&#34;&gt;&lt;a id=&#34;__codelineno-0-10&#34; name=&#34;__codelineno-0-10&#34; href=&#34;#__codelineno-0-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;MAYBE_INIT_TCACHE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-11&#34;&gt;&lt;a id=&#34;__codelineno-0-11&#34; name=&#34;__codelineno-0-11&#34; href=&#34;#__codelineno-0-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-12&#34;&gt;&lt;a id=&#34;__codelineno-0-12&#34; name=&#34;__codelineno-0-12&#34; href=&#34;#__codelineno-0-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;DIAG_PUSH_NEEDS_COMMENT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-13&#34;&gt;&lt;a id=&#34;__codelineno-0-13&#34; name=&#34;__codelineno-0-13&#34; href=&#34;#__codelineno-0-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_bins&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-14&#34;&gt;&lt;a id=&#34;__codelineno-0-14&#34; name=&#34;__codelineno-0-14&#34; href=&#34;#__codelineno-0-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-15&#34;&gt;&lt;a id=&#34;__codelineno-0-15&#34; name=&#34;__codelineno-0-15&#34; href=&#34;#__codelineno-0-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-16&#34;&gt;&lt;a id=&#34;__codelineno-0-16&#34; name=&#34;__codelineno-0-16&#34; href=&#34;#__codelineno-0-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-17&#34;&gt;&lt;a id=&#34;__codelineno-0-17&#34; name=&#34;__codelineno-0-17&#34; href=&#34;#__codelineno-0-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_get&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-18&#34;&gt;&lt;a id=&#34;__codelineno-0-18&#34; name=&#34;__codelineno-0-18&#34; href=&#34;#__codelineno-0-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-19&#34;&gt;&lt;a id=&#34;__codelineno-0-19&#34; name=&#34;__codelineno-0-19&#34; href=&#34;#__codelineno-0-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;DIAG_POP_NEEDS_COMMENT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tcache-thread-local-cache&#34;&gt;tcache (Thread Local Cache)&lt;a class=&#34;headerlink&#34; href=&#34;#tcache-thread-local-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;接下来仔细地研究 tcache 的结构。首先，它是一个 per-thread 的数据结构，意味着每个线程都有自己的一份 tcache，不需要上锁就可以访问：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_perthread_struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来看它具体保存了什么：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* We overlay this structure on the user-data portion of a chunk when&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; the chunk is stored in the per-thread cache. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;tcache_entry&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-5&#34;&gt;&lt;a id=&#34;__codelineno-2-5&#34; name=&#34;__codelineno-2-5&#34; href=&#34;#__codelineno-2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;tcache_entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-6&#34;&gt;&lt;a id=&#34;__codelineno-2-6&#34; name=&#34;__codelineno-2-6&#34; href=&#34;#__codelineno-2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* This field exists to detect double frees. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-7&#34;&gt;&lt;a id=&#34;__codelineno-2-7&#34; name=&#34;__codelineno-2-7&#34; href=&#34;#__codelineno-2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;tcache_perthread_struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-8&#34;&gt;&lt;a id=&#34;__codelineno-2-8&#34; name=&#34;__codelineno-2-8&#34; href=&#34;#__codelineno-2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-9&#34;&gt;&lt;a id=&#34;__codelineno-2-9&#34; name=&#34;__codelineno-2-9&#34; href=&#34;#__codelineno-2-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-10&#34;&gt;&lt;a id=&#34;__codelineno-2-10&#34; name=&#34;__codelineno-2-10&#34; href=&#34;#__codelineno-2-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* There is one of these for each thread, which contains the&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-11&#34;&gt;&lt;a id=&#34;__codelineno-2-11&#34; name=&#34;__codelineno-2-11&#34; href=&#34;#__codelineno-2-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; per-thread cache (hence &amp;quot;tcache_perthread_struct&amp;quot;). Keeping&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-12&#34;&gt;&lt;a id=&#34;__codelineno-2-12&#34; name=&#34;__codelineno-2-12&#34; href=&#34;#__codelineno-2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; overall size low is mildly important. Note that COUNTS and ENTRIES&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-13&#34;&gt;&lt;a id=&#34;__codelineno-2-13&#34; name=&#34;__codelineno-2-13&#34; href=&#34;#__codelineno-2-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; are redundant (we could have just counted the linked list each&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-14&#34;&gt;&lt;a id=&#34;__codelineno-2-14&#34; name=&#34;__codelineno-2-14&#34; href=&#34;#__codelineno-2-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; time), this is for performance reasons. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-15&#34;&gt;&lt;a id=&#34;__codelineno-2-15&#34; name=&#34;__codelineno-2-15&#34; href=&#34;#__codelineno-2-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;tcache_perthread_struct&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-16&#34;&gt;&lt;a id=&#34;__codelineno-2-16&#34; name=&#34;__codelineno-2-16&#34; href=&#34;#__codelineno-2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-17&#34;&gt;&lt;a id=&#34;__codelineno-2-17&#34; name=&#34;__codelineno-2-17&#34; href=&#34;#__codelineno-2-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint16_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TCACHE_MAX_BINS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-18&#34;&gt;&lt;a id=&#34;__codelineno-2-18&#34; name=&#34;__codelineno-2-18&#34; href=&#34;#__codelineno-2-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TCACHE_MAX_BINS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-19&#34;&gt;&lt;a id=&#34;__codelineno-2-19&#34; name=&#34;__codelineno-2-19&#34; href=&#34;#__codelineno-2-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_perthread_struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-20&#34;&gt;&lt;a id=&#34;__codelineno-2-20&#34; name=&#34;__codelineno-2-20&#34; href=&#34;#__codelineno-2-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-21&#34;&gt;&lt;a id=&#34;__codelineno-2-21&#34; name=&#34;__codelineno-2-21&#34; href=&#34;#__codelineno-2-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* Caller must ensure that we know tc_idx is valid and there&amp;#39;s room&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-22&#34;&gt;&lt;a id=&#34;__codelineno-2-22&#34; name=&#34;__codelineno-2-22&#34; href=&#34;#__codelineno-2-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; for more chunks. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-23&#34;&gt;&lt;a id=&#34;__codelineno-2-23&#34; name=&#34;__codelineno-2-23&#34; href=&#34;#__codelineno-2-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__always_inline&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-24&#34;&gt;&lt;a id=&#34;__codelineno-2-24&#34; name=&#34;__codelineno-2-24&#34; href=&#34;#__codelineno-2-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;tcache_put&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunkptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-25&#34;&gt;&lt;a id=&#34;__codelineno-2-25&#34; name=&#34;__codelineno-2-25&#34; href=&#34;#__codelineno-2-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-26&#34;&gt;&lt;a id=&#34;__codelineno-2-26&#34; name=&#34;__codelineno-2-26&#34; href=&#34;#__codelineno-2-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk2mem&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-27&#34;&gt;&lt;a id=&#34;__codelineno-2-27&#34; name=&#34;__codelineno-2-27&#34; href=&#34;#__codelineno-2-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-28&#34;&gt;&lt;a id=&#34;__codelineno-2-28&#34; name=&#34;__codelineno-2-28&#34; href=&#34;#__codelineno-2-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Mark this chunk as &amp;quot;in the tcache&amp;quot; so the test in _int_free will&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-29&#34;&gt;&lt;a id=&#34;__codelineno-2-29&#34; name=&#34;__codelineno-2-29&#34; href=&#34;#__codelineno-2-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; detect a double free. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-30&#34;&gt;&lt;a id=&#34;__codelineno-2-30&#34; name=&#34;__codelineno-2-30&#34; href=&#34;#__codelineno-2-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-31&#34;&gt;&lt;a id=&#34;__codelineno-2-31&#34; name=&#34;__codelineno-2-31&#34; href=&#34;#__codelineno-2-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-32&#34;&gt;&lt;a id=&#34;__codelineno-2-32&#34; name=&#34;__codelineno-2-32&#34; href=&#34;#__codelineno-2-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-33&#34;&gt;&lt;a id=&#34;__codelineno-2-33&#34; name=&#34;__codelineno-2-33&#34; href=&#34;#__codelineno-2-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-34&#34;&gt;&lt;a id=&#34;__codelineno-2-34&#34; name=&#34;__codelineno-2-34&#34; href=&#34;#__codelineno-2-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-35&#34;&gt;&lt;a id=&#34;__codelineno-2-35&#34; name=&#34;__codelineno-2-35&#34; href=&#34;#__codelineno-2-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-36&#34;&gt;&lt;a id=&#34;__codelineno-2-36&#34; name=&#34;__codelineno-2-36&#34; href=&#34;#__codelineno-2-36&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-37&#34;&gt;&lt;a id=&#34;__codelineno-2-37&#34; name=&#34;__codelineno-2-37&#34; href=&#34;#__codelineno-2-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* Caller must ensure that we know tc_idx is valid and there&amp;#39;s&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-38&#34;&gt;&lt;a id=&#34;__codelineno-2-38&#34; name=&#34;__codelineno-2-38&#34; href=&#34;#__codelineno-2-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; available chunks to remove. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-39&#34;&gt;&lt;a id=&#34;__codelineno-2-39&#34; name=&#34;__codelineno-2-39&#34; href=&#34;#__codelineno-2-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__always_inline&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-40&#34;&gt;&lt;a id=&#34;__codelineno-2-40&#34; name=&#34;__codelineno-2-40&#34; href=&#34;#__codelineno-2-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;tcache_get&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-41&#34;&gt;&lt;a id=&#34;__codelineno-2-41&#34; name=&#34;__codelineno-2-41&#34; href=&#34;#__codelineno-2-41&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-42&#34;&gt;&lt;a id=&#34;__codelineno-2-42&#34; name=&#34;__codelineno-2-42&#34; href=&#34;#__codelineno-2-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-43&#34;&gt;&lt;a id=&#34;__codelineno-2-43&#34; name=&#34;__codelineno-2-43&#34; href=&#34;#__codelineno-2-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-44&#34;&gt;&lt;a id=&#34;__codelineno-2-44&#34; name=&#34;__codelineno-2-44&#34; href=&#34;#__codelineno-2-44&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-45&#34;&gt;&lt;a id=&#34;__codelineno-2-45&#34; name=&#34;__codelineno-2-45&#34; href=&#34;#__codelineno-2-45&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-46&#34;&gt;&lt;a id=&#34;__codelineno-2-46&#34; name=&#34;__codelineno-2-46&#34; href=&#34;#__codelineno-2-46&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-47&#34;&gt;&lt;a id=&#34;__codelineno-2-47&#34; name=&#34;__codelineno-2-47&#34; href=&#34;#__codelineno-2-47&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到它有两个成员，把 tcache 分为 &lt;code&gt;TCACHE_MAX_BINS&lt;/code&gt; 这么多个 bin，每个 bin 分别有一个：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;counts[bin]&lt;/code&gt;：记录了这个 bin 中空闲块的数量，&lt;code&gt;tcache_put&lt;/code&gt; 的时候加一，&lt;code&gt;tcache_get&lt;/code&gt; 的时候减一&lt;/li&gt;&lt;li&gt;&lt;code&gt;entries[bin]&lt;/code&gt;: 每个 bin 用一个链表保存了空闲块，链表的节点类型是 &lt;code&gt;tcache_entry&lt;/code&gt;，那么 &lt;code&gt;entries[bin]&lt;/code&gt; 保存了链表头的指针&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;bin 是内存分配器的一个常见做法，把要分配的块的大小分 bin，从而保证拿到的空闲块足够大。接下来看 &lt;code&gt;tcache_put&lt;/code&gt; 是如何把空闲块放到 tcache 中的：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;把空闲块强制转换为 &lt;code&gt;tcache_entry&lt;/code&gt; 结构体类型&lt;/li&gt;&lt;li&gt;把它的 &lt;code&gt;key&lt;/code&gt; 字段指向 tcache，用来表示这个空闲块当前在 &lt;code&gt;tcache&lt;/code&gt; 当中，后续用它来检测 double free&lt;/li&gt;&lt;li&gt;以新的 &lt;code&gt;tcache_entry&lt;/code&gt; 作为链表头，插入到 tcache 的对应的 bin 当中：&lt;code&gt;entries[tc_idx]&lt;/code&gt;&lt;/li&gt;&lt;li&gt;更新这个 bin 的空闲块个数到 &lt;code&gt;count[tc_idx]&lt;/code&gt; 当中&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;反过来，&lt;code&gt;tcache_get&lt;/code&gt; 则是从 tcache 中拿出一个空闲块：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;从链表头 &lt;code&gt;entries[tc_idx]&lt;/code&gt; 取出一个空闲块，把它从链表中删除：&lt;code&gt;entries[tc_idx] = e-&amp;gt;next&lt;/code&gt;&lt;/li&gt;&lt;li&gt;更新这个 bin 的空闲块个数到 &lt;code&gt;count[tc_idx]&lt;/code&gt; 当中&lt;/li&gt;&lt;li&gt;把它的 &lt;code&gt;key&lt;/code&gt; 字段指向 NULL，用来表示这个空闲块当前不在 &lt;code&gt;tcache&lt;/code&gt; 当中&lt;/li&gt;&lt;li&gt;返回这个空闲块的地址&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;malloc_1&#34;&gt;malloc&lt;a class=&#34;headerlink&#34; href=&#34;#malloc_1&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;接下来回到 &lt;code&gt;malloc&lt;/code&gt; 的实现，它首先根据用户要分配的空间大小（&lt;code&gt;bytes&lt;/code&gt;），计算出实际需要分配的大小（&lt;code&gt;tbytes&lt;/code&gt;），和对应的 bin（&lt;code&gt;tc_idx&lt;/code&gt;）：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* int_free also calls request2size, be careful to not pad twice. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-2&#34;&gt;&lt;a id=&#34;__codelineno-3-2&#34; name=&#34;__codelineno-3-2&#34; href=&#34;#__codelineno-3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tbytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-3&#34;&gt;&lt;a id=&#34;__codelineno-3-3&#34; name=&#34;__codelineno-3-3&#34; href=&#34;#__codelineno-3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;checked_request2size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tbytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-4&#34;&gt;&lt;a id=&#34;__codelineno-3-4&#34; name=&#34;__codelineno-3-4&#34; href=&#34;#__codelineno-3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-5&#34;&gt;&lt;a id=&#34;__codelineno-3-5&#34; name=&#34;__codelineno-3-5&#34; href=&#34;#__codelineno-3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__set_errno&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ENOMEM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-6&#34;&gt;&lt;a id=&#34;__codelineno-3-6&#34; name=&#34;__codelineno-3-6&#34; href=&#34;#__codelineno-3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-7&#34;&gt;&lt;a id=&#34;__codelineno-3-7&#34; name=&#34;__codelineno-3-7&#34; href=&#34;#__codelineno-3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-8&#34;&gt;&lt;a id=&#34;__codelineno-3-8&#34; name=&#34;__codelineno-3-8&#34; href=&#34;#__codelineno-3-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;csize2tidx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tbytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;checked_request2size&lt;/code&gt; 实现如下：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define request2size(req) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-2&#34;&gt;&lt;a id=&#34;__codelineno-4-2&#34; name=&#34;__codelineno-4-2&#34; href=&#34;#__codelineno-4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &amp;lt; MINSIZE) ? \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-3&#34;&gt;&lt;a id=&#34;__codelineno-4-3&#34; name=&#34;__codelineno-4-3&#34; href=&#34;#__codelineno-4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; MINSIZE : \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-4&#34;&gt;&lt;a id=&#34;__codelineno-4-4&#34; name=&#34;__codelineno-4-4&#34; href=&#34;#__codelineno-4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp;amp; ~MALLOC_ALIGN_MASK)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-5&#34;&gt;&lt;a id=&#34;__codelineno-4-5&#34; name=&#34;__codelineno-4-5&#34; href=&#34;#__codelineno-4-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-6&#34;&gt;&lt;a id=&#34;__codelineno-4-6&#34; name=&#34;__codelineno-4-6&#34; href=&#34;#__codelineno-4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* Check if REQ overflows when padded and aligned and if the resulting value&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-7&#34;&gt;&lt;a id=&#34;__codelineno-4-7&#34; name=&#34;__codelineno-4-7&#34; href=&#34;#__codelineno-4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; is less than PTRDIFF_T. Returns TRUE and the requested size or MINSIZE in&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-8&#34;&gt;&lt;a id=&#34;__codelineno-4-8&#34; name=&#34;__codelineno-4-8&#34; href=&#34;#__codelineno-4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; case the value is less than MINSIZE on SZ or false if any of the previous&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-9&#34;&gt;&lt;a id=&#34;__codelineno-4-9&#34; name=&#34;__codelineno-4-9&#34; href=&#34;#__codelineno-4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; check fail. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-10&#34;&gt;&lt;a id=&#34;__codelineno-4-10&#34; name=&#34;__codelineno-4-10&#34; href=&#34;#__codelineno-4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-11&#34;&gt;&lt;a id=&#34;__codelineno-4-11&#34; name=&#34;__codelineno-4-11&#34; href=&#34;#__codelineno-4-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;checked_request2size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__nonnull&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-12&#34;&gt;&lt;a id=&#34;__codelineno-4-12&#34; name=&#34;__codelineno-4-12&#34; href=&#34;#__codelineno-4-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-13&#34;&gt;&lt;a id=&#34;__codelineno-4-13&#34; name=&#34;__codelineno-4-13&#34; href=&#34;#__codelineno-4-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__glibc_unlikely&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PTRDIFF_MAX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-14&#34;&gt;&lt;a id=&#34;__codelineno-4-14&#34; name=&#34;__codelineno-4-14&#34; href=&#34;#__codelineno-4-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-15&#34;&gt;&lt;a id=&#34;__codelineno-4-15&#34; name=&#34;__codelineno-4-15&#34; href=&#34;#__codelineno-4-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request2size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-16&#34;&gt;&lt;a id=&#34;__codelineno-4-16&#34; name=&#34;__codelineno-4-16&#34; href=&#34;#__codelineno-4-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-17&#34;&gt;&lt;a id=&#34;__codelineno-4-17&#34; name=&#34;__codelineno-4-17&#34; href=&#34;#__codelineno-4-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它实现的实际上是把用户请求的内存大小，加上 &lt;code&gt;SIZE_SZ&lt;/code&gt;（即 &lt;code&gt;sizeof(size_t)&lt;/code&gt;），向上取整到 &lt;code&gt;MALLOC_ALIGN_MASK&lt;/code&gt; 对应的 alignment（&lt;code&gt;MALLOC_ALIGNMENT&lt;/code&gt;，通常是 &lt;code&gt;2 * SIZE_SZ&lt;/code&gt;）的整数倍数，再和 &lt;code&gt;MINSIZE&lt;/code&gt; 取 max。这里要加 &lt;code&gt;SIZE_SZ&lt;/code&gt;，是因为 malloc 会维护被分配的块的一些信息，包括块的大小和一些 flag，后续会详细讨论，简单来说就是分配的实际空间会比用户请求的空间要更大。&lt;/p&gt;&lt;p&gt;接着，看它是如何计算出 tcache index 的：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-5-1&#34;&gt;&lt;a id=&#34;__codelineno-5-1&#34; name=&#34;__codelineno-5-1&#34; href=&#34;#__codelineno-5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* When &amp;quot;x&amp;quot; is from chunksize(). */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-2&#34;&gt;&lt;a id=&#34;__codelineno-5-2&#34; name=&#34;__codelineno-5-2&#34; href=&#34;#__codelineno-5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;# define csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，从 MINSIZE 开始，以 MALLOC_ALIGNMENT 为单位，每个 bin 对应一个经过 align 以后的可能的内存块大小。得到 tcache index 后，检查对应的 bin 是否有空闲块，如果有，则直接分配：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-6-1&#34;&gt;&lt;a id=&#34;__codelineno-6-1&#34; name=&#34;__codelineno-6-1&#34; href=&#34;#__codelineno-6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_bins&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-2&#34;&gt;&lt;a id=&#34;__codelineno-6-2&#34; name=&#34;__codelineno-6-2&#34; href=&#34;#__codelineno-6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-3&#34;&gt;&lt;a id=&#34;__codelineno-6-3&#34; name=&#34;__codelineno-6-3&#34; href=&#34;#__codelineno-6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-4&#34;&gt;&lt;a id=&#34;__codelineno-6-4&#34; name=&#34;__codelineno-6-4&#34; href=&#34;#__codelineno-6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-5&#34;&gt;&lt;a id=&#34;__codelineno-6-5&#34; name=&#34;__codelineno-6-5&#34; href=&#34;#__codelineno-6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_get&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-6&#34;&gt;&lt;a id=&#34;__codelineno-6-6&#34; name=&#34;__codelineno-6-6&#34; href=&#34;#__codelineno-6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，tcache 相当于是一个 per thread 的小缓存，记录了最近释放的内存块，可供 malloc 使用。由于 bin 的数量有限，所以比较大的内存分配不会经过 tcache。&lt;/p&gt;&lt;p&gt;P.S. &lt;code&gt;calloc&lt;/code&gt; 不会使用 tcache，而是用后面提到的 &lt;code&gt;_int_malloc&lt;/code&gt; 进行各种分配。&lt;/p&gt;&lt;h3 id=&#34;free&#34;&gt;free&lt;a class=&#34;headerlink&#34; href=&#34;#free&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;既然 malloc 用到了 tcache，自然 free 就要往里面放空闲块了，相关的代码在 &lt;code&gt;_int_free&lt;/code&gt; 函数当中：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-7-1&#34;&gt;&lt;a id=&#34;__codelineno-7-1&#34; name=&#34;__codelineno-7-1&#34; href=&#34;#__codelineno-7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;csize2tidx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-2&#34;&gt;&lt;a id=&#34;__codelineno-7-2&#34; name=&#34;__codelineno-7-2&#34; href=&#34;#__codelineno-7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_bins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-3&#34;&gt;&lt;a id=&#34;__codelineno-7-3&#34; name=&#34;__codelineno-7-3&#34; href=&#34;#__codelineno-7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-4&#34;&gt;&lt;a id=&#34;__codelineno-7-4&#34; name=&#34;__codelineno-7-4&#34; href=&#34;#__codelineno-7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Check to see if it&amp;#39;s already in the tcache. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-5&#34;&gt;&lt;a id=&#34;__codelineno-7-5&#34; name=&#34;__codelineno-7-5&#34; href=&#34;#__codelineno-7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk2mem&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-6&#34;&gt;&lt;a id=&#34;__codelineno-7-6&#34; name=&#34;__codelineno-7-6&#34; href=&#34;#__codelineno-7-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-7&#34;&gt;&lt;a id=&#34;__codelineno-7-7&#34; name=&#34;__codelineno-7-7&#34; href=&#34;#__codelineno-7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* This test succeeds on double free. However, we don&amp;#39;t 100%&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-8&#34;&gt;&lt;a id=&#34;__codelineno-7-8&#34; name=&#34;__codelineno-7-8&#34; href=&#34;#__codelineno-7-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; trust it (it also matches random payload data at a 1 in&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-9&#34;&gt;&lt;a id=&#34;__codelineno-7-9&#34; name=&#34;__codelineno-7-9&#34; href=&#34;#__codelineno-7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; 2^&amp;lt;size_t&amp;gt; chance), so verify it&amp;#39;s not an unlikely&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-10&#34;&gt;&lt;a id=&#34;__codelineno-7-10&#34; name=&#34;__codelineno-7-10&#34; href=&#34;#__codelineno-7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; coincidence before aborting. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-11&#34;&gt;&lt;a id=&#34;__codelineno-7-11&#34; name=&#34;__codelineno-7-11&#34; href=&#34;#__codelineno-7-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__glibc_unlikely&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-12&#34;&gt;&lt;a id=&#34;__codelineno-7-12&#34; name=&#34;__codelineno-7-12&#34; href=&#34;#__codelineno-7-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-13&#34;&gt;&lt;a id=&#34;__codelineno-7-13&#34; name=&#34;__codelineno-7-13&#34; href=&#34;#__codelineno-7-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-14&#34;&gt;&lt;a id=&#34;__codelineno-7-14&#34; name=&#34;__codelineno-7-14&#34; href=&#34;#__codelineno-7-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIBC_PROBE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memory_tcache_double_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-15&#34;&gt;&lt;a id=&#34;__codelineno-7-15&#34; name=&#34;__codelineno-7-15&#34; href=&#34;#__codelineno-7-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-16&#34;&gt;&lt;a id=&#34;__codelineno-7-16&#34; name=&#34;__codelineno-7-16&#34; href=&#34;#__codelineno-7-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-17&#34;&gt;&lt;a id=&#34;__codelineno-7-17&#34; name=&#34;__codelineno-7-17&#34; href=&#34;#__codelineno-7-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-18&#34;&gt;&lt;a id=&#34;__codelineno-7-18&#34; name=&#34;__codelineno-7-18&#34; href=&#34;#__codelineno-7-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-19&#34;&gt;&lt;a id=&#34;__codelineno-7-19&#34; name=&#34;__codelineno-7-19&#34; href=&#34;#__codelineno-7-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc_printerr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;free(): double free detected in tcache 2&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-20&#34;&gt;&lt;a id=&#34;__codelineno-7-20&#34; name=&#34;__codelineno-7-20&#34; href=&#34;#__codelineno-7-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* If we get here, it was a coincidence. We&amp;#39;ve wasted a&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-21&#34;&gt;&lt;a id=&#34;__codelineno-7-21&#34; name=&#34;__codelineno-7-21&#34; href=&#34;#__codelineno-7-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; few cycles, but don&amp;#39;t abort. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-22&#34;&gt;&lt;a id=&#34;__codelineno-7-22&#34; name=&#34;__codelineno-7-22&#34; href=&#34;#__codelineno-7-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-23&#34;&gt;&lt;a id=&#34;__codelineno-7-23&#34; name=&#34;__codelineno-7-23&#34; href=&#34;#__codelineno-7-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-24&#34;&gt;&lt;a id=&#34;__codelineno-7-24&#34; name=&#34;__codelineno-7-24&#34; href=&#34;#__codelineno-7-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-25&#34;&gt;&lt;a id=&#34;__codelineno-7-25&#34; name=&#34;__codelineno-7-25&#34; href=&#34;#__codelineno-7-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-26&#34;&gt;&lt;a id=&#34;__codelineno-7-26&#34; name=&#34;__codelineno-7-26&#34; href=&#34;#__codelineno-7-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_put&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-27&#34;&gt;&lt;a id=&#34;__codelineno-7-27&#34; name=&#34;__codelineno-7-27&#34; href=&#34;#__codelineno-7-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-28&#34;&gt;&lt;a id=&#34;__codelineno-7-28&#34; name=&#34;__codelineno-7-28&#34; href=&#34;#__codelineno-7-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-29&#34;&gt;&lt;a id=&#34;__codelineno-7-29&#34; name=&#34;__codelineno-7-29&#34; href=&#34;#__codelineno-7-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它的逻辑也不复杂：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;计算 tcache index，找到对应的 bin&lt;/li&gt;&lt;li&gt;检查它是不是已经被 free 过了，即 double free：free 过的指针，它的 key 字段应当指向 tcache，如果实际检测到是这样，那就去 tcache 里遍历链表，检查是不是真的在里面，如果是，说明 double free 了，报错&lt;/li&gt;&lt;li&gt;如果对应的 bin 的链表长度不是很长（阈值是 &lt;code&gt;mp_.tcache_count&lt;/code&gt;，取值见后），则添加到链表头部，完成 free 的过程&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;那么 tcache 默认情况下有多大呢：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-8-1&#34;&gt;&lt;a id=&#34;__codelineno-8-1&#34; name=&#34;__codelineno-8-1&#34; href=&#34;#__codelineno-8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* We want 64 entries. This is an arbitrary limit, which tunables can reduce. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-2&#34;&gt;&lt;a id=&#34;__codelineno-8-2&#34; name=&#34;__codelineno-8-2&#34; href=&#34;#__codelineno-8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;# define TCACHE_MAX_BINS 64&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-3&#34;&gt;&lt;a id=&#34;__codelineno-8-3&#34; name=&#34;__codelineno-8-3&#34; href=&#34;#__codelineno-8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* This is another arbitrary limit, which tunables can change. Each&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-4&#34;&gt;&lt;a id=&#34;__codelineno-8-4&#34; name=&#34;__codelineno-8-4&#34; href=&#34;#__codelineno-8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; tcache bin will hold at most this number of chunks. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-5&#34;&gt;&lt;a id=&#34;__codelineno-8-5&#34; name=&#34;__codelineno-8-5&#34; href=&#34;#__codelineno-8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;# define TCACHE_FILL_COUNT 7&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也就是说，它有 64 个 bin，每个 bin 的链表最多 7 个空闲块。&lt;/p&gt;&lt;p&gt;在 64 位下，这 64 个 bin 对应的块大小是从 32 字节到 1040 字节，每 16 字节一个 bin（&lt;code&gt;(1040 - 32) / 16 + 1 = 64&lt;/code&gt;）。那么，&lt;code&gt;malloc(1032)&lt;/code&gt; 或更小的分配会经过 tcache，而 &lt;code&gt;malloc(1033)&lt;/code&gt; 或更大的分配则不会。&lt;/p&gt;&lt;h3 id=&#34;实验&#34;&gt;实验&lt;a class=&#34;headerlink&#34; href=&#34;#实验&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;下面来写一段程序来观察 tcache 的行为，考虑到从链表头部插入和删除是后进先出（LIFO），相当于是一个栈，所以分配两个大小相同的块，释放后再分配相同大小的块，得到的指针的顺序应该是反过来的：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-9-1&#34;&gt;&lt;a id=&#34;__codelineno-9-1&#34; name=&#34;__codelineno-9-1&#34; href=&#34;#__codelineno-9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-2&#34;&gt;&lt;a id=&#34;__codelineno-9-2&#34; name=&#34;__codelineno-9-2&#34; href=&#34;#__codelineno-9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-3&#34;&gt;&lt;a id=&#34;__codelineno-9-3&#34; name=&#34;__codelineno-9-3&#34; href=&#34;#__codelineno-9-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-4&#34;&gt;&lt;a id=&#34;__codelineno-9-4&#34; name=&#34;__codelineno-9-4&#34; href=&#34;#__codelineno-9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-5&#34;&gt;&lt;a id=&#34;__codelineno-9-5&#34; name=&#34;__codelineno-9-5&#34; href=&#34;#__codelineno-9-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-6&#34;&gt;&lt;a id=&#34;__codelineno-9-6&#34; name=&#34;__codelineno-9-6&#34; href=&#34;#__codelineno-9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-7&#34;&gt;&lt;a id=&#34;__codelineno-9-7&#34; name=&#34;__codelineno-9-7&#34; href=&#34;#__codelineno-9-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-8&#34;&gt;&lt;a id=&#34;__codelineno-9-8&#34; name=&#34;__codelineno-9-8&#34; href=&#34;#__codelineno-9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-9&#34;&gt;&lt;a id=&#34;__codelineno-9-9&#34; name=&#34;__codelineno-9-9&#34; href=&#34;#__codelineno-9-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-10&#34;&gt;&lt;a id=&#34;__codelineno-9-10&#34; name=&#34;__codelineno-9-10&#34; href=&#34;#__codelineno-9-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-11&#34;&gt;&lt;a id=&#34;__codelineno-9-11&#34; name=&#34;__codelineno-9-11&#34; href=&#34;#__codelineno-9-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;p1=%p p2=%p p3=%p p4=%p&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-12&#34;&gt;&lt;a id=&#34;__codelineno-9-12&#34; name=&#34;__codelineno-9-12&#34; href=&#34;#__codelineno-9-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出如下：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-10-1&#34;&gt;&lt;a id=&#34;__codelineno-10-1&#34; name=&#34;__codelineno-10-1&#34; href=&#34;#__codelineno-10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x55fb2f9732a0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x55fb2f9732d0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x55fb2f9732d0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x55fb2f9732a0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果符合预期，tcache 的内部状态变化过程如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;free(p1)&lt;/code&gt;：p1 变成链表的头部&lt;/li&gt;&lt;li&gt;&lt;code&gt;free(p2)&lt;/code&gt;：p2 变成链表的头部，next 指针指向 p1&lt;/li&gt;&lt;li&gt;&lt;code&gt;p3 = malloc(32)&lt;/code&gt;: p2 是链表的头部，所以被分配给 p3，之后 p1 成为链表的头部&lt;/li&gt;&lt;li&gt;&lt;code&gt;p4 = malloc(32)&lt;/code&gt;: p1 是链表的头部，所以被分配给 p4&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果修改分配的大小，让它们被放到不同的 bin，就不会出现顺序颠倒的情况：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-11-1&#34;&gt;&lt;a id=&#34;__codelineno-11-1&#34; name=&#34;__codelineno-11-1&#34; href=&#34;#__codelineno-11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-2&#34;&gt;&lt;a id=&#34;__codelineno-11-2&#34; name=&#34;__codelineno-11-2&#34; href=&#34;#__codelineno-11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-3&#34;&gt;&lt;a id=&#34;__codelineno-11-3&#34; name=&#34;__codelineno-11-3&#34; href=&#34;#__codelineno-11-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-4&#34;&gt;&lt;a id=&#34;__codelineno-11-4&#34; name=&#34;__codelineno-11-4&#34; href=&#34;#__codelineno-11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-5&#34;&gt;&lt;a id=&#34;__codelineno-11-5&#34; name=&#34;__codelineno-11-5&#34; href=&#34;#__codelineno-11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-6&#34;&gt;&lt;a id=&#34;__codelineno-11-6&#34; name=&#34;__codelineno-11-6&#34; href=&#34;#__codelineno-11-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-7&#34;&gt;&lt;a id=&#34;__codelineno-11-7&#34; name=&#34;__codelineno-11-7&#34; href=&#34;#__codelineno-11-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-8&#34;&gt;&lt;a id=&#34;__codelineno-11-8&#34; name=&#34;__codelineno-11-8&#34; href=&#34;#__codelineno-11-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-9&#34;&gt;&lt;a id=&#34;__codelineno-11-9&#34; name=&#34;__codelineno-11-9&#34; href=&#34;#__codelineno-11-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-10&#34;&gt;&lt;a id=&#34;__codelineno-11-10&#34; name=&#34;__codelineno-11-10&#34; href=&#34;#__codelineno-11-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-11&#34;&gt;&lt;a id=&#34;__codelineno-11-11&#34; name=&#34;__codelineno-11-11&#34; href=&#34;#__codelineno-11-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;p1=%p p2=%p p3=%p p4=%p&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-12&#34;&gt;&lt;a id=&#34;__codelineno-11-12&#34; name=&#34;__codelineno-11-12&#34; href=&#34;#__codelineno-11-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出如下：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-12-1&#34;&gt;&lt;a id=&#34;__codelineno-12-1&#34; name=&#34;__codelineno-12-1&#34; href=&#34;#__codelineno-12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x5638e68db2a0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x5638e68db2d0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x5638e68db2a0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x5638e68db2d0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 p3 等于 p1，p4 等于 p2。此时 p1 和 p3 属于同一个 bin，而 p2 和 p4 属于另一个 bin。&lt;/p&gt;&lt;p&gt;既然我们知道了 tcache 的内部构造，我们可以写一个程序，首先得到 tcache 的地址，再打印出每次 malloc/free 之后的状态：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-13-1&#34;&gt;&lt;a id=&#34;__codelineno-13-1&#34; name=&#34;__codelineno-13-1&#34; href=&#34;#__codelineno-13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-2&#34;&gt;&lt;a id=&#34;__codelineno-13-2&#34; name=&#34;__codelineno-13-2&#34; href=&#34;#__codelineno-13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-3&#34;&gt;&lt;a id=&#34;__codelineno-13-3&#34; name=&#34;__codelineno-13-3&#34; href=&#34;#__codelineno-13-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-4&#34;&gt;&lt;a id=&#34;__codelineno-13-4&#34; name=&#34;__codelineno-13-4&#34; href=&#34;#__codelineno-13-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-5&#34;&gt;&lt;a id=&#34;__codelineno-13-5&#34; name=&#34;__codelineno-13-5&#34; href=&#34;#__codelineno-13-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define TCACHE_MAX_BINS 64&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-6&#34;&gt;&lt;a id=&#34;__codelineno-13-6&#34; name=&#34;__codelineno-13-6&#34; href=&#34;#__codelineno-13-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-7&#34;&gt;&lt;a id=&#34;__codelineno-13-7&#34; name=&#34;__codelineno-13-7&#34; href=&#34;#__codelineno-13-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;tcache_entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-8&#34;&gt;&lt;a id=&#34;__codelineno-13-8&#34; name=&#34;__codelineno-13-8&#34; href=&#34;#__codelineno-13-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;tcache_entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-9&#34;&gt;&lt;a id=&#34;__codelineno-13-9&#34; name=&#34;__codelineno-13-9&#34; href=&#34;#__codelineno-13-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;tcache_perthread_struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-10&#34;&gt;&lt;a id=&#34;__codelineno-13-10&#34; name=&#34;__codelineno-13-10&#34; href=&#34;#__codelineno-13-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-11&#34;&gt;&lt;a id=&#34;__codelineno-13-11&#34; name=&#34;__codelineno-13-11&#34; href=&#34;#__codelineno-13-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-12&#34;&gt;&lt;a id=&#34;__codelineno-13-12&#34; name=&#34;__codelineno-13-12&#34; href=&#34;#__codelineno-13-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;tcache_perthread_struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-13&#34;&gt;&lt;a id=&#34;__codelineno-13-13&#34; name=&#34;__codelineno-13-13&#34; href=&#34;#__codelineno-13-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint16_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TCACHE_MAX_BINS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-14&#34;&gt;&lt;a id=&#34;__codelineno-13-14&#34; name=&#34;__codelineno-13-14&#34; href=&#34;#__codelineno-13-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TCACHE_MAX_BINS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-15&#34;&gt;&lt;a id=&#34;__codelineno-13-15&#34; name=&#34;__codelineno-13-15&#34; href=&#34;#__codelineno-13-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_perthread_struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-16&#34;&gt;&lt;a id=&#34;__codelineno-13-16&#34; name=&#34;__codelineno-13-16&#34; href=&#34;#__codelineno-13-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-17&#34;&gt;&lt;a id=&#34;__codelineno-13-17&#34; name=&#34;__codelineno-13-17&#34; href=&#34;#__codelineno-13-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;dump_tcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_perthread_struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-18&#34;&gt;&lt;a id=&#34;__codelineno-13-18&#34; name=&#34;__codelineno-13-18&#34; href=&#34;#__codelineno-13-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TCACHE_MAX_BINS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-19&#34;&gt;&lt;a id=&#34;__codelineno-13-19&#34; name=&#34;__codelineno-13-19&#34; href=&#34;#__codelineno-13-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-20&#34;&gt;&lt;a id=&#34;__codelineno-13-20&#34; name=&#34;__codelineno-13-20&#34; href=&#34;#__codelineno-13-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-21&#34;&gt;&lt;a id=&#34;__codelineno-13-21&#34; name=&#34;__codelineno-13-21&#34; href=&#34;#__codelineno-13-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;tcache bin #%d: %p&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-22&#34;&gt;&lt;a id=&#34;__codelineno-13-22&#34; name=&#34;__codelineno-13-22&#34; href=&#34;#__codelineno-13-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-23&#34;&gt;&lt;a id=&#34;__codelineno-13-23&#34; name=&#34;__codelineno-13-23&#34; href=&#34;#__codelineno-13-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-24&#34;&gt;&lt;a id=&#34;__codelineno-13-24&#34; name=&#34;__codelineno-13-24&#34; href=&#34;#__codelineno-13-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot; -&amp;gt; %p&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-25&#34;&gt;&lt;a id=&#34;__codelineno-13-25&#34; name=&#34;__codelineno-13-25&#34; href=&#34;#__codelineno-13-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-26&#34;&gt;&lt;a id=&#34;__codelineno-13-26&#34; name=&#34;__codelineno-13-26&#34; href=&#34;#__codelineno-13-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-27&#34;&gt;&lt;a id=&#34;__codelineno-13-27&#34; name=&#34;__codelineno-13-27&#34; href=&#34;#__codelineno-13-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-28&#34;&gt;&lt;a id=&#34;__codelineno-13-28&#34; name=&#34;__codelineno-13-28&#34; href=&#34;#__codelineno-13-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-29&#34;&gt;&lt;a id=&#34;__codelineno-13-29&#34; name=&#34;__codelineno-13-29&#34; href=&#34;#__codelineno-13-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-30&#34;&gt;&lt;a id=&#34;__codelineno-13-30&#34; name=&#34;__codelineno-13-30&#34; href=&#34;#__codelineno-13-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-31&#34;&gt;&lt;a id=&#34;__codelineno-13-31&#34; name=&#34;__codelineno-13-31&#34; href=&#34;#__codelineno-13-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-32&#34;&gt;&lt;a id=&#34;__codelineno-13-32&#34; name=&#34;__codelineno-13-32&#34; href=&#34;#__codelineno-13-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-33&#34;&gt;&lt;a id=&#34;__codelineno-13-33&#34; name=&#34;__codelineno-13-33&#34; href=&#34;#__codelineno-13-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// leak tcache address&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-34&#34;&gt;&lt;a id=&#34;__codelineno-13-34&#34; name=&#34;__codelineno-13-34&#34; href=&#34;#__codelineno-13-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-35&#34;&gt;&lt;a id=&#34;__codelineno-13-35&#34; name=&#34;__codelineno-13-35&#34; href=&#34;#__codelineno-13-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-36&#34;&gt;&lt;a id=&#34;__codelineno-13-36&#34; name=&#34;__codelineno-13-36&#34; href=&#34;#__codelineno-13-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-37&#34;&gt;&lt;a id=&#34;__codelineno-13-37&#34; name=&#34;__codelineno-13-37&#34; href=&#34;#__codelineno-13-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_perthread_struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-38&#34;&gt;&lt;a id=&#34;__codelineno-13-38&#34; name=&#34;__codelineno-13-38&#34; href=&#34;#__codelineno-13-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;tcache is at %p&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-39&#34;&gt;&lt;a id=&#34;__codelineno-13-39&#34; name=&#34;__codelineno-13-39&#34; href=&#34;#__codelineno-13-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// clear tcache&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-40&#34;&gt;&lt;a id=&#34;__codelineno-13-40&#34; name=&#34;__codelineno-13-40&#34; href=&#34;#__codelineno-13-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-41&#34;&gt;&lt;a id=&#34;__codelineno-13-41&#34; name=&#34;__codelineno-13-41&#34; href=&#34;#__codelineno-13-41&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-42&#34;&gt;&lt;a id=&#34;__codelineno-13-42&#34; name=&#34;__codelineno-13-42&#34; href=&#34;#__codelineno-13-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-43&#34;&gt;&lt;a id=&#34;__codelineno-13-43&#34; name=&#34;__codelineno-13-43&#34; href=&#34;#__codelineno-13-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-44&#34;&gt;&lt;a id=&#34;__codelineno-13-44&#34; name=&#34;__codelineno-13-44&#34; href=&#34;#__codelineno-13-44&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-45&#34;&gt;&lt;a id=&#34;__codelineno-13-45&#34; name=&#34;__codelineno-13-45&#34; href=&#34;#__codelineno-13-45&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;after free(p1):&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-46&#34;&gt;&lt;a id=&#34;__codelineno-13-46&#34; name=&#34;__codelineno-13-46&#34; href=&#34;#__codelineno-13-46&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dump_tcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-47&#34;&gt;&lt;a id=&#34;__codelineno-13-47&#34; name=&#34;__codelineno-13-47&#34; href=&#34;#__codelineno-13-47&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-48&#34;&gt;&lt;a id=&#34;__codelineno-13-48&#34; name=&#34;__codelineno-13-48&#34; href=&#34;#__codelineno-13-48&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;after free(p2):&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-49&#34;&gt;&lt;a id=&#34;__codelineno-13-49&#34; name=&#34;__codelineno-13-49&#34; href=&#34;#__codelineno-13-49&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dump_tcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-50&#34;&gt;&lt;a id=&#34;__codelineno-13-50&#34; name=&#34;__codelineno-13-50&#34; href=&#34;#__codelineno-13-50&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-51&#34;&gt;&lt;a id=&#34;__codelineno-13-51&#34; name=&#34;__codelineno-13-51&#34; href=&#34;#__codelineno-13-51&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;after malloc(p3):&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-52&#34;&gt;&lt;a id=&#34;__codelineno-13-52&#34; name=&#34;__codelineno-13-52&#34; href=&#34;#__codelineno-13-52&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dump_tcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-53&#34;&gt;&lt;a id=&#34;__codelineno-13-53&#34; name=&#34;__codelineno-13-53&#34; href=&#34;#__codelineno-13-53&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-54&#34;&gt;&lt;a id=&#34;__codelineno-13-54&#34; name=&#34;__codelineno-13-54&#34; href=&#34;#__codelineno-13-54&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;after malloc(p4):&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-55&#34;&gt;&lt;a id=&#34;__codelineno-13-55&#34; name=&#34;__codelineno-13-55&#34; href=&#34;#__codelineno-13-55&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dump_tcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-56&#34;&gt;&lt;a id=&#34;__codelineno-13-56&#34; name=&#34;__codelineno-13-56&#34; href=&#34;#__codelineno-13-56&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;p1=%p p2=%p p3=%p p4=%p&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-13-57&#34;&gt;&lt;a id=&#34;__codelineno-13-57&#34; name=&#34;__codelineno-13-57&#34; href=&#34;#__codelineno-13-57&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果如下：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-14-1&#34;&gt;&lt;a id=&#34;__codelineno-14-1&#34; name=&#34;__codelineno-14-1&#34; href=&#34;#__codelineno-14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x558f39310010&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-2&#34;&gt;&lt;a id=&#34;__codelineno-14-2&#34; name=&#34;__codelineno-14-2&#34; href=&#34;#__codelineno-14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;after&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-3&#34;&gt;&lt;a id=&#34;__codelineno-14-3&#34; name=&#34;__codelineno-14-3&#34; href=&#34;#__codelineno-14-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x558f39310740&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-4&#34;&gt;&lt;a id=&#34;__codelineno-14-4&#34; name=&#34;__codelineno-14-4&#34; href=&#34;#__codelineno-14-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;after&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-5&#34;&gt;&lt;a id=&#34;__codelineno-14-5&#34; name=&#34;__codelineno-14-5&#34; href=&#34;#__codelineno-14-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x558f39310770&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x558f39310740&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-6&#34;&gt;&lt;a id=&#34;__codelineno-14-6&#34; name=&#34;__codelineno-14-6&#34; href=&#34;#__codelineno-14-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;after&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-7&#34;&gt;&lt;a id=&#34;__codelineno-14-7&#34; name=&#34;__codelineno-14-7&#34; href=&#34;#__codelineno-14-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x558f39310740&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-8&#34;&gt;&lt;a id=&#34;__codelineno-14-8&#34; name=&#34;__codelineno-14-8&#34; href=&#34;#__codelineno-14-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;after&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-14-9&#34;&gt;&lt;a id=&#34;__codelineno-14-9&#34; name=&#34;__codelineno-14-9&#34; href=&#34;#__codelineno-14-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x558f39310740&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x558f39310770&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x558f39310770&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x558f39310740&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印出来的结果和预期一致。&lt;/p&gt;&lt;p&gt;接下来继续分析 malloc 的后续代码。&lt;/p&gt;&lt;h2 id=&#34;回到-__libc_malloc&#34;&gt;回到 &lt;code&gt;__libc_malloc&lt;/code&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#回到-__libc_malloc&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果 malloc 没有命中 tcache，或者 free 没有把空闲块放到 tcache 当中，会发生什么事情呢？接下来往后看，首先是 &lt;code&gt;__libc_malloc&lt;/code&gt; 的后续实现：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-15-1&#34;&gt;&lt;a id=&#34;__codelineno-15-1&#34; name=&#34;__codelineno-15-1&#34; href=&#34;#__codelineno-15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SINGLE_THREAD_P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-2&#34;&gt;&lt;a id=&#34;__codelineno-15-2&#34; name=&#34;__codelineno-15-2&#34; href=&#34;#__codelineno-15-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-3&#34;&gt;&lt;a id=&#34;__codelineno-15-3&#34; name=&#34;__codelineno-15-3&#34; href=&#34;#__codelineno-15-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_int_malloc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main_arena&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-4&#34;&gt;&lt;a id=&#34;__codelineno-15-4&#34; name=&#34;__codelineno-15-4&#34; href=&#34;#__codelineno-15-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// omitted&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-5&#34;&gt;&lt;a id=&#34;__codelineno-15-5&#34; name=&#34;__codelineno-15-5&#34; href=&#34;#__codelineno-15-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-6&#34;&gt;&lt;a id=&#34;__codelineno-15-6&#34; name=&#34;__codelineno-15-6&#34; href=&#34;#__codelineno-15-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-7&#34;&gt;&lt;a id=&#34;__codelineno-15-7&#34; name=&#34;__codelineno-15-7&#34; href=&#34;#__codelineno-15-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-8&#34;&gt;&lt;a id=&#34;__codelineno-15-8&#34; name=&#34;__codelineno-15-8&#34; href=&#34;#__codelineno-15-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;arena_get&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ar_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-9&#34;&gt;&lt;a id=&#34;__codelineno-15-9&#34; name=&#34;__codelineno-15-9&#34; href=&#34;#__codelineno-15-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-10&#34;&gt;&lt;a id=&#34;__codelineno-15-10&#34; name=&#34;__codelineno-15-10&#34; href=&#34;#__codelineno-15-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_int_malloc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ar_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里出现了 arena 的概念：多线程情况下，为了提升性能，同时用多个 arena，每个 arena 用一把锁来保证多线程安全，从而使得多个线程可以同时从不同的 arena 中分配内存。这里先不讨论多线程的情况，先假设在单线程程序下，全局只用一个 arena：&lt;code&gt;main_arena&lt;/code&gt;，然后从里面分配内存。接下来看 &lt;code&gt;_int_malloc&lt;/code&gt; 的内部实现，可以看到它根据要分配的块的大小进入了不同的处理：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-16-1&#34;&gt;&lt;a id=&#34;__codelineno-16-1&#34; name=&#34;__codelineno-16-1&#34; href=&#34;#__codelineno-16-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;// in _int_malloc&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-2&#34;&gt;&lt;a id=&#34;__codelineno-16-2&#34; name=&#34;__codelineno-16-2&#34; href=&#34;#__codelineno-16-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_max_fast&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-3&#34;&gt;&lt;a id=&#34;__codelineno-16-3&#34; name=&#34;__codelineno-16-3&#34; href=&#34;#__codelineno-16-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-4&#34;&gt;&lt;a id=&#34;__codelineno-16-4&#34; name=&#34;__codelineno-16-4&#34; href=&#34;#__codelineno-16-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// fast bin handling&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-5&#34;&gt;&lt;a id=&#34;__codelineno-16-5&#34; name=&#34;__codelineno-16-5&#34; href=&#34;#__codelineno-16-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-6&#34;&gt;&lt;a id=&#34;__codelineno-16-6&#34; name=&#34;__codelineno-16-6&#34; href=&#34;#__codelineno-16-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-7&#34;&gt;&lt;a id=&#34;__codelineno-16-7&#34; name=&#34;__codelineno-16-7&#34; href=&#34;#__codelineno-16-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in_smallbin_range&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-8&#34;&gt;&lt;a id=&#34;__codelineno-16-8&#34; name=&#34;__codelineno-16-8&#34; href=&#34;#__codelineno-16-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-9&#34;&gt;&lt;a id=&#34;__codelineno-16-9&#34; name=&#34;__codelineno-16-9&#34; href=&#34;#__codelineno-16-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// small bin handling&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-10&#34;&gt;&lt;a id=&#34;__codelineno-16-10&#34; name=&#34;__codelineno-16-10&#34; href=&#34;#__codelineno-16-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-11&#34;&gt;&lt;a id=&#34;__codelineno-16-11&#34; name=&#34;__codelineno-16-11&#34; href=&#34;#__codelineno-16-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-12&#34;&gt;&lt;a id=&#34;__codelineno-16-12&#34; name=&#34;__codelineno-16-12&#34; href=&#34;#__codelineno-16-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-13&#34;&gt;&lt;a id=&#34;__codelineno-16-13&#34; name=&#34;__codelineno-16-13&#34; href=&#34;#__codelineno-16-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// consolidate fast bins to unsorted bins&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-14&#34;&gt;&lt;a id=&#34;__codelineno-16-14&#34; name=&#34;__codelineno-16-14&#34; href=&#34;#__codelineno-16-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-15&#34;&gt;&lt;a id=&#34;__codelineno-16-15&#34; name=&#34;__codelineno-16-15&#34; href=&#34;#__codelineno-16-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-16&#34;&gt;&lt;a id=&#34;__codelineno-16-16&#34; name=&#34;__codelineno-16-16&#34; href=&#34;#__codelineno-16-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-17&#34;&gt;&lt;a id=&#34;__codelineno-16-17&#34; name=&#34;__codelineno-16-17&#34; href=&#34;#__codelineno-16-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-18&#34;&gt;&lt;a id=&#34;__codelineno-16-18&#34; name=&#34;__codelineno-16-18&#34; href=&#34;#__codelineno-16-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// process unsorted bins&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-19&#34;&gt;&lt;a id=&#34;__codelineno-16-19&#34; name=&#34;__codelineno-16-19&#34; href=&#34;#__codelineno-16-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;malloc 把空闲的块分成四种类型来保存：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;fast bin: 类似前面的 tcache bin，把大小相同的空闲块放到链表中，再维护多个对应不同大小的空闲块的链表头指针，采用单向链表维护&lt;/li&gt;&lt;li&gt;small bin：small bin 也会把相同的空闲块放在链表中，但相邻的空闲块会被合并为更大的空闲块，采用双向链表维护&lt;/li&gt;&lt;li&gt;large bin：large bin 可能保存不同大小的空闲块，采用双向链表维护&lt;/li&gt;&lt;li&gt;unsorted bin：近期被 free 的空闲块，如果没有保存到 tcache，会被放到 unsorted bin 当中，留待后续的处理&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;在讨论这些 bin 的维护方式之前，首先要知道 glibc 是怎么维护块的：空闲的时候是什么布局，被分配的时候又是什么布局？&lt;/p&gt;&lt;h2 id=&#34;块布局&#34;&gt;块布局&lt;a class=&#34;headerlink&#34; href=&#34;#块布局&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;glibc 每个空闲块（chunk）对应了下面的结构体 &lt;code&gt;malloc_chunk&lt;/code&gt;：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-17-1&#34;&gt;&lt;a id=&#34;__codelineno-17-1&#34; name=&#34;__codelineno-17-1&#34; href=&#34;#__codelineno-17-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-2&#34;&gt;&lt;a id=&#34;__codelineno-17-2&#34; name=&#34;__codelineno-17-2&#34; href=&#34;#__codelineno-17-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INTERNAL_SIZE_T&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunk_prev_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Size of previous chunk (if free). */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-3&#34;&gt;&lt;a id=&#34;__codelineno-17-3&#34; name=&#34;__codelineno-17-3&#34; href=&#34;#__codelineno-17-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INTERNAL_SIZE_T&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunk_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Size in bytes, including overhead. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-4&#34;&gt;&lt;a id=&#34;__codelineno-17-4&#34; name=&#34;__codelineno-17-4&#34; href=&#34;#__codelineno-17-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-5&#34;&gt;&lt;a id=&#34;__codelineno-17-5&#34; name=&#34;__codelineno-17-5&#34; href=&#34;#__codelineno-17-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* double links -- used only if free. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-6&#34;&gt;&lt;a id=&#34;__codelineno-17-6&#34; name=&#34;__codelineno-17-6&#34; href=&#34;#__codelineno-17-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-7&#34;&gt;&lt;a id=&#34;__codelineno-17-7&#34; name=&#34;__codelineno-17-7&#34; href=&#34;#__codelineno-17-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-8&#34;&gt;&lt;a id=&#34;__codelineno-17-8&#34; name=&#34;__codelineno-17-8&#34; href=&#34;#__codelineno-17-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Only used for large blocks: pointer to next larger size. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-9&#34;&gt;&lt;a id=&#34;__codelineno-17-9&#34; name=&#34;__codelineno-17-9&#34; href=&#34;#__codelineno-17-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* double links -- used only if free. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-10&#34;&gt;&lt;a id=&#34;__codelineno-17-10&#34; name=&#34;__codelineno-17-10&#34; href=&#34;#__codelineno-17-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-11&#34;&gt;&lt;a id=&#34;__codelineno-17-11&#34; name=&#34;__codelineno-17-11&#34; href=&#34;#__codelineno-17-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它的字段如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;相邻的前一个空闲块的大小 &lt;code&gt;mchunk_prev_size&lt;/code&gt;，记录它是为了方便找到前一个空闲块的开头，这样合并相邻的空闲块就很简单&lt;/li&gt;&lt;li&gt;当前空闲块的大小 &lt;code&gt;mchunk_size&lt;/code&gt;，由于块的大小是对齐的，所以它的低位被用来记录 flag&lt;/li&gt;&lt;li&gt;&lt;code&gt;fd&lt;/code&gt; 和 &lt;code&gt;bk&lt;/code&gt;：small bin 和 large bin 需要用双向链表维护空闲块，指针就保存在这里&lt;/li&gt;&lt;li&gt;&lt;code&gt;fd_nextsize&lt;/code&gt; 和 &lt;code&gt;bk_next_size&lt;/code&gt;：large bin 需要用双向链表维护不同大小的空闲块，方便找到合适大小的空闲块&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这是空闲块的内存布局，那么被分配的内存呢？被分配的内存，相当于是如下的结构：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-18-1&#34;&gt;&lt;a id=&#34;__codelineno-18-1&#34; name=&#34;__codelineno-18-1&#34; href=&#34;#__codelineno-18-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-18-2&#34;&gt;&lt;a id=&#34;__codelineno-18-2&#34; name=&#34;__codelineno-18-2&#34; href=&#34;#__codelineno-18-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INTERNAL_SIZE_T&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunk_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Size in bytes, including overhead. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-18-3&#34;&gt;&lt;a id=&#34;__codelineno-18-3&#34; name=&#34;__codelineno-18-3&#34; href=&#34;#__codelineno-18-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* malloc() returns pointer to payload */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-18-4&#34;&gt;&lt;a id=&#34;__codelineno-18-4&#34; name=&#34;__codelineno-18-4&#34; href=&#34;#__codelineno-18-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也就是说，&lt;code&gt;malloc()&lt;/code&gt; 返回的地址，等于空闲块里 &lt;code&gt;fd&lt;/code&gt; 所在的位置。被分配的块，除了用户请求的空间以外，只有前面的 &lt;code&gt;sizeof(size_t)&lt;/code&gt; 大小的空间是内存分配器带来的空间开销。块被释放以后，它被重新解释成 &lt;code&gt;malloc_chunk&lt;/code&gt; 结构体（注意它们的起始地址不同，&lt;code&gt;malloc_chunk&lt;/code&gt; 的地址是 malloc 返回的 &lt;code&gt;payload&lt;/code&gt; 地址减去 &lt;code&gt;2 * sizeof(size_t)&lt;/code&gt;，对应 &lt;code&gt;mchunk_prev_size&lt;/code&gt; 和 &lt;code&gt;mchunk_size&lt;/code&gt; 两个字段）。事实上，&lt;code&gt;mchunk_prev_size&lt;/code&gt; 保存在用户请求的空间的最后几个字节。内存布局如下：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-19-1&#34;&gt;&lt;a id=&#34;__codelineno-19-1&#34; name=&#34;__codelineno-19-1&#34; href=&#34;#__codelineno-19-1&#34;&gt;&lt;/a&gt; in-use chunk free chunk&lt;/span&gt;&lt;span id=&#34;__span-19-2&#34;&gt;&lt;a id=&#34;__codelineno-19-2&#34; name=&#34;__codelineno-19-2&#34; href=&#34;#__codelineno-19-2&#34;&gt;&lt;/a&gt;+-------------+ +------------------+&lt;/span&gt;&lt;span id=&#34;__span-19-3&#34;&gt;&lt;a id=&#34;__codelineno-19-3&#34; name=&#34;__codelineno-19-3&#34; href=&#34;#__codelineno-19-3&#34;&gt;&lt;/a&gt;| mchunk_size | | mchunk_size |&lt;/span&gt;&lt;span id=&#34;__span-19-4&#34;&gt;&lt;a id=&#34;__codelineno-19-4&#34; name=&#34;__codelineno-19-4&#34; href=&#34;#__codelineno-19-4&#34;&gt;&lt;/a&gt;+-------------+ +------------------+&lt;/span&gt;&lt;span id=&#34;__span-19-5&#34;&gt;&lt;a id=&#34;__codelineno-19-5&#34; name=&#34;__codelineno-19-5&#34; href=&#34;#__codelineno-19-5&#34;&gt;&lt;/a&gt;| payload | | fd |&lt;/span&gt;&lt;span id=&#34;__span-19-6&#34;&gt;&lt;a id=&#34;__codelineno-19-6&#34; name=&#34;__codelineno-19-6&#34; href=&#34;#__codelineno-19-6&#34;&gt;&lt;/a&gt;| | +------------------+&lt;/span&gt;&lt;span id=&#34;__span-19-7&#34;&gt;&lt;a id=&#34;__codelineno-19-7&#34; name=&#34;__codelineno-19-7&#34; href=&#34;#__codelineno-19-7&#34;&gt;&lt;/a&gt;| | | bk |&lt;/span&gt;&lt;span id=&#34;__span-19-8&#34;&gt;&lt;a id=&#34;__codelineno-19-8&#34; name=&#34;__codelineno-19-8&#34; href=&#34;#__codelineno-19-8&#34;&gt;&lt;/a&gt;| | +------------------+&lt;/span&gt;&lt;span id=&#34;__span-19-9&#34;&gt;&lt;a id=&#34;__codelineno-19-9&#34; name=&#34;__codelineno-19-9&#34; href=&#34;#__codelineno-19-9&#34;&gt;&lt;/a&gt;| | | fd_nextsize |&lt;/span&gt;&lt;span id=&#34;__span-19-10&#34;&gt;&lt;a id=&#34;__codelineno-19-10&#34; name=&#34;__codelineno-19-10&#34; href=&#34;#__codelineno-19-10&#34;&gt;&lt;/a&gt;| | ---&amp;gt; +------------------+&lt;/span&gt;&lt;span id=&#34;__span-19-11&#34;&gt;&lt;a id=&#34;__codelineno-19-11&#34; name=&#34;__codelineno-19-11&#34; href=&#34;#__codelineno-19-11&#34;&gt;&lt;/a&gt;| | | bk_nextsize |&lt;/span&gt;&lt;span id=&#34;__span-19-12&#34;&gt;&lt;a id=&#34;__codelineno-19-12&#34; name=&#34;__codelineno-19-12&#34; href=&#34;#__codelineno-19-12&#34;&gt;&lt;/a&gt;| | +------------------+&lt;/span&gt;&lt;span id=&#34;__span-19-13&#34;&gt;&lt;a id=&#34;__codelineno-19-13&#34; name=&#34;__codelineno-19-13&#34; href=&#34;#__codelineno-19-13&#34;&gt;&lt;/a&gt;| | | unused |&lt;/span&gt;&lt;span id=&#34;__span-19-14&#34;&gt;&lt;a id=&#34;__codelineno-19-14&#34; name=&#34;__codelineno-19-14&#34; href=&#34;#__codelineno-19-14&#34;&gt;&lt;/a&gt;| | | |&lt;/span&gt;&lt;span id=&#34;__span-19-15&#34;&gt;&lt;a id=&#34;__codelineno-19-15&#34; name=&#34;__codelineno-19-15&#34; href=&#34;#__codelineno-19-15&#34;&gt;&lt;/a&gt;| | | |&lt;/span&gt;&lt;span id=&#34;__span-19-16&#34;&gt;&lt;a id=&#34;__codelineno-19-16&#34; name=&#34;__codelineno-19-16&#34; href=&#34;#__codelineno-19-16&#34;&gt;&lt;/a&gt;| | | |&lt;/span&gt;&lt;span id=&#34;__span-19-17&#34;&gt;&lt;a id=&#34;__codelineno-19-17&#34; name=&#34;__codelineno-19-17&#34; href=&#34;#__codelineno-19-17&#34;&gt;&lt;/a&gt;| | +------------------+&lt;/span&gt;&lt;span id=&#34;__span-19-18&#34;&gt;&lt;a id=&#34;__codelineno-19-18&#34; name=&#34;__codelineno-19-18&#34; href=&#34;#__codelineno-19-18&#34;&gt;&lt;/a&gt;| | | mchunk_prev_size |&lt;/span&gt;&lt;span id=&#34;__span-19-19&#34;&gt;&lt;a id=&#34;__codelineno-19-19&#34; name=&#34;__codelineno-19-19&#34; href=&#34;#__codelineno-19-19&#34;&gt;&lt;/a&gt;+-------------+ +------------------+&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此为了在 payload 和 &lt;code&gt;malloc_chunk&lt;/code&gt; 指针之间转换，代码中设计了两个宏来简化指针运算：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-20-1&#34;&gt;&lt;a id=&#34;__codelineno-20-1&#34; name=&#34;__codelineno-20-1&#34; href=&#34;#__codelineno-20-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* conversion from malloc headers to user pointers, and back */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-20-2&#34;&gt;&lt;a id=&#34;__codelineno-20-2&#34; name=&#34;__codelineno-20-2&#34; href=&#34;#__codelineno-20-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-20-3&#34;&gt;&lt;a id=&#34;__codelineno-20-3&#34; name=&#34;__codelineno-20-3&#34; href=&#34;#__codelineno-20-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define chunk2mem(p) ((void*)((char*)(p) + 2*SIZE_SZ))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-20-4&#34;&gt;&lt;a id=&#34;__codelineno-20-4&#34; name=&#34;__codelineno-20-4&#34; href=&#34;#__codelineno-20-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define mem2chunk(mem) ((mchunkptr)((char*)(mem) - 2*SIZE_SZ))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;知道了空闲块的维护方式，由于各个 bin 维护的就是这些空闲块，所以接下来分别看这几种 bin 的维护方式。&lt;/p&gt;&lt;h2 id=&#34;fast-bin&#34;&gt;fast bin&lt;a class=&#34;headerlink&#34; href=&#34;#fast-bin&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;fast bin 的维护方式和 tcache 类似，它把不同大小的空闲块按照大小分成多个 bin，每个 bin 记录在一个单向链表当中，然后用一个数组记录各种 bin 大小的链表头，这里直接用的就是 &lt;code&gt;malloc_chunk&lt;/code&gt; 指针数组：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-21-1&#34;&gt;&lt;a id=&#34;__codelineno-21-1&#34; name=&#34;__codelineno-21-1&#34; href=&#34;#__codelineno-21-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mfastbinptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-21-2&#34;&gt;&lt;a id=&#34;__codelineno-21-2&#34; name=&#34;__codelineno-21-2&#34; href=&#34;#__codelineno-21-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_state&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-21-3&#34;&gt;&lt;a id=&#34;__codelineno-21-3&#34; name=&#34;__codelineno-21-3&#34; href=&#34;#__codelineno-21-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-21-4&#34;&gt;&lt;a id=&#34;__codelineno-21-4&#34; name=&#34;__codelineno-21-4&#34; href=&#34;#__codelineno-21-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* other fields are omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-21-5&#34;&gt;&lt;a id=&#34;__codelineno-21-5&#34; name=&#34;__codelineno-21-5&#34; href=&#34;#__codelineno-21-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Fastbins */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-21-6&#34;&gt;&lt;a id=&#34;__codelineno-21-6&#34; name=&#34;__codelineno-21-6&#34; href=&#34;#__codelineno-21-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mfastbinptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fastbinsY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NFASTBINS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-21-7&#34;&gt;&lt;a id=&#34;__codelineno-21-7&#34; name=&#34;__codelineno-21-7&#34; href=&#34;#__codelineno-21-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 64 位下，默认 &lt;code&gt;NFASTBINS&lt;/code&gt; 等于 10，计算方式如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;最大的由 fast bin 管理的块大小等于 &lt;code&gt;80 * sizeof(size_t) / 4 + sizeof(size_t)&lt;/code&gt; 向上取整到 16 的倍数，在 64 位机器上等于 176 字节&lt;/li&gt;&lt;li&gt;分配粒度从最小的 32 字节到最大的 176 字节，每 16 字节一个 bin，一共有 10 个 bin（&lt;code&gt;(176 - 32) / 16 + 1 = 10&lt;/code&gt;）&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;不过默认情况下，fast bin 管理的块大小通过 &lt;code&gt;set_max_fast(DEFAULT_MXFAST)&lt;/code&gt; 被限制在 &lt;code&gt;DEFAULT_MXFAST&lt;/code&gt; 附近，这个值等于 &lt;code&gt;64 * sizeof(size_t) / 4&lt;/code&gt;，加上 &lt;code&gt;sizeof(size_t)&lt;/code&gt; 再向下取整到 16 的倍数，就是 128 字节。此时，只有前 7 个 bin 可以被用到（32 字节到 128 字节，每 16 字节一个 bin，&lt;code&gt;(128 - 32) / 16 + 1 = 7&lt;/code&gt;），即 &lt;code&gt;malloc(120)&lt;/code&gt; 或更小的分配会保存到 fast bin 中，&lt;code&gt;malloc(121)&lt;/code&gt; 或更大的分配则不会。&lt;/p&gt;&lt;h3 id=&#34;malloc_2&#34;&gt;malloc&lt;a class=&#34;headerlink&#34; href=&#34;#malloc_2&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;分配的时候，和 tcache 类似，也是计算出 fastbin 的 index，然后去找对应的链表，如果链表非空，则从链表头取出空闲块用于分配：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-22-1&#34;&gt;&lt;a id=&#34;__codelineno-22-1&#34; name=&#34;__codelineno-22-1&#34; href=&#34;#__codelineno-22-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define fastbin(ar_ptr, idx) ((ar_ptr)-&amp;gt;fastbinsY[idx])&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-2&#34;&gt;&lt;a id=&#34;__codelineno-22-2&#34; name=&#34;__codelineno-22-2&#34; href=&#34;#__codelineno-22-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-3&#34;&gt;&lt;a id=&#34;__codelineno-22-3&#34; name=&#34;__codelineno-22-3&#34; href=&#34;#__codelineno-22-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* offset 2 to use otherwise unindexable first 2 bins */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-4&#34;&gt;&lt;a id=&#34;__codelineno-22-4&#34; name=&#34;__codelineno-22-4&#34; href=&#34;#__codelineno-22-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define fastbin_index(sz) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-5&#34;&gt;&lt;a id=&#34;__codelineno-22-5&#34; name=&#34;__codelineno-22-5&#34; href=&#34;#__codelineno-22-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; ((((unsigned int) (sz)) &amp;gt;&amp;gt; (SIZE_SZ == 8 ? 4 : 3)) - 2)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-6&#34;&gt;&lt;a id=&#34;__codelineno-22-6&#34; name=&#34;__codelineno-22-6&#34; href=&#34;#__codelineno-22-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-7&#34;&gt;&lt;a id=&#34;__codelineno-22-7&#34; name=&#34;__codelineno-22-7&#34; href=&#34;#__codelineno-22-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;// in _int_malloc, allocate using fastbin&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-8&#34;&gt;&lt;a id=&#34;__codelineno-22-8&#34; name=&#34;__codelineno-22-8&#34; href=&#34;#__codelineno-22-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fastbin_index&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-9&#34;&gt;&lt;a id=&#34;__codelineno-22-9&#34; name=&#34;__codelineno-22-9&#34; href=&#34;#__codelineno-22-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;mfastbinptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fastbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-10&#34;&gt;&lt;a id=&#34;__codelineno-22-10&#34; name=&#34;__codelineno-22-10&#34; href=&#34;#__codelineno-22-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;mchunkptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-11&#34;&gt;&lt;a id=&#34;__codelineno-22-11&#34; name=&#34;__codelineno-22-11&#34; href=&#34;#__codelineno-22-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-12&#34;&gt;&lt;a id=&#34;__codelineno-22-12&#34; name=&#34;__codelineno-22-12&#34; href=&#34;#__codelineno-22-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-13&#34;&gt;&lt;a id=&#34;__codelineno-22-13&#34; name=&#34;__codelineno-22-13&#34; href=&#34;#__codelineno-22-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-14&#34;&gt;&lt;a id=&#34;__codelineno-22-14&#34; name=&#34;__codelineno-22-14&#34; href=&#34;#__codelineno-22-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-15&#34;&gt;&lt;a id=&#34;__codelineno-22-15&#34; name=&#34;__codelineno-22-15&#34; href=&#34;#__codelineno-22-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SINGLE_THREAD_P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-16&#34;&gt;&lt;a id=&#34;__codelineno-22-16&#34; name=&#34;__codelineno-22-16&#34; href=&#34;#__codelineno-22-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-17&#34;&gt;&lt;a id=&#34;__codelineno-22-17&#34; name=&#34;__codelineno-22-17&#34; href=&#34;#__codelineno-22-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-18&#34;&gt;&lt;a id=&#34;__codelineno-22-18&#34; name=&#34;__codelineno-22-18&#34; href=&#34;#__codelineno-22-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;REMOVE_FB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-19&#34;&gt;&lt;a id=&#34;__codelineno-22-19&#34; name=&#34;__codelineno-22-19&#34; href=&#34;#__codelineno-22-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__glibc_likely&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-20&#34;&gt;&lt;a id=&#34;__codelineno-22-20&#34; name=&#34;__codelineno-22-20&#34; href=&#34;#__codelineno-22-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-21&#34;&gt;&lt;a id=&#34;__codelineno-22-21&#34; name=&#34;__codelineno-22-21&#34; href=&#34;#__codelineno-22-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim_idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fastbin_index&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunksize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-22&#34;&gt;&lt;a id=&#34;__codelineno-22-22&#34; name=&#34;__codelineno-22-22&#34; href=&#34;#__codelineno-22-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__builtin_expect&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim_idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-23&#34;&gt;&lt;a id=&#34;__codelineno-22-23&#34; name=&#34;__codelineno-22-23&#34; href=&#34;#__codelineno-22-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc_printerr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;malloc(): memory corruption (fast)&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-24&#34;&gt;&lt;a id=&#34;__codelineno-22-24&#34; name=&#34;__codelineno-22-24&#34; href=&#34;#__codelineno-22-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_remalloced_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-25&#34;&gt;&lt;a id=&#34;__codelineno-22-25&#34; name=&#34;__codelineno-22-25&#34; href=&#34;#__codelineno-22-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* While we&amp;#39;re here, if we see other chunks of the same size,&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-26&#34;&gt;&lt;a id=&#34;__codelineno-22-26&#34; name=&#34;__codelineno-22-26&#34; href=&#34;#__codelineno-22-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; stash them in the tcache. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-27&#34;&gt;&lt;a id=&#34;__codelineno-22-27&#34; name=&#34;__codelineno-22-27&#34; href=&#34;#__codelineno-22-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;csize2tidx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-28&#34;&gt;&lt;a id=&#34;__codelineno-22-28&#34; name=&#34;__codelineno-22-28&#34; href=&#34;#__codelineno-22-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_bins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-29&#34;&gt;&lt;a id=&#34;__codelineno-22-29&#34; name=&#34;__codelineno-22-29&#34; href=&#34;#__codelineno-22-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-30&#34;&gt;&lt;a id=&#34;__codelineno-22-30&#34; name=&#34;__codelineno-22-30&#34; href=&#34;#__codelineno-22-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunkptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-31&#34;&gt;&lt;a id=&#34;__codelineno-22-31&#34; name=&#34;__codelineno-22-31&#34; href=&#34;#__codelineno-22-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-32&#34;&gt;&lt;a id=&#34;__codelineno-22-32&#34; name=&#34;__codelineno-22-32&#34; href=&#34;#__codelineno-22-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* While bin not empty and tcache not full, copy chunks. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-33&#34;&gt;&lt;a id=&#34;__codelineno-22-33&#34; name=&#34;__codelineno-22-33&#34; href=&#34;#__codelineno-22-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_count&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-34&#34;&gt;&lt;a id=&#34;__codelineno-22-34&#34; name=&#34;__codelineno-22-34&#34; href=&#34;#__codelineno-22-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-35&#34;&gt;&lt;a id=&#34;__codelineno-22-35&#34; name=&#34;__codelineno-22-35&#34; href=&#34;#__codelineno-22-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-36&#34;&gt;&lt;a id=&#34;__codelineno-22-36&#34; name=&#34;__codelineno-22-36&#34; href=&#34;#__codelineno-22-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SINGLE_THREAD_P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-37&#34;&gt;&lt;a id=&#34;__codelineno-22-37&#34; name=&#34;__codelineno-22-37&#34; href=&#34;#__codelineno-22-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-38&#34;&gt;&lt;a id=&#34;__codelineno-22-38&#34; name=&#34;__codelineno-22-38&#34; href=&#34;#__codelineno-22-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-39&#34;&gt;&lt;a id=&#34;__codelineno-22-39&#34; name=&#34;__codelineno-22-39&#34; href=&#34;#__codelineno-22-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-40&#34;&gt;&lt;a id=&#34;__codelineno-22-40&#34; name=&#34;__codelineno-22-40&#34; href=&#34;#__codelineno-22-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;REMOVE_FB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-41&#34;&gt;&lt;a id=&#34;__codelineno-22-41&#34; name=&#34;__codelineno-22-41&#34; href=&#34;#__codelineno-22-41&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__glibc_unlikely&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-42&#34;&gt;&lt;a id=&#34;__codelineno-22-42&#34; name=&#34;__codelineno-22-42&#34; href=&#34;#__codelineno-22-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-43&#34;&gt;&lt;a id=&#34;__codelineno-22-43&#34; name=&#34;__codelineno-22-43&#34; href=&#34;#__codelineno-22-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-44&#34;&gt;&lt;a id=&#34;__codelineno-22-44&#34; name=&#34;__codelineno-22-44&#34; href=&#34;#__codelineno-22-44&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_put&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-45&#34;&gt;&lt;a id=&#34;__codelineno-22-45&#34; name=&#34;__codelineno-22-45&#34; href=&#34;#__codelineno-22-45&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-46&#34;&gt;&lt;a id=&#34;__codelineno-22-46&#34; name=&#34;__codelineno-22-46&#34; href=&#34;#__codelineno-22-46&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-47&#34;&gt;&lt;a id=&#34;__codelineno-22-47&#34; name=&#34;__codelineno-22-47&#34; href=&#34;#__codelineno-22-47&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk2mem&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-48&#34;&gt;&lt;a id=&#34;__codelineno-22-48&#34; name=&#34;__codelineno-22-48&#34; href=&#34;#__codelineno-22-48&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alloc_perturb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-49&#34;&gt;&lt;a id=&#34;__codelineno-22-49&#34; name=&#34;__codelineno-22-49&#34; href=&#34;#__codelineno-22-49&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-50&#34;&gt;&lt;a id=&#34;__codelineno-22-50&#34; name=&#34;__codelineno-22-50&#34; href=&#34;#__codelineno-22-50&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-22-51&#34;&gt;&lt;a id=&#34;__codelineno-22-51&#34; name=&#34;__codelineno-22-51&#34; href=&#34;#__codelineno-22-51&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它的过程如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用 &lt;code&gt;fastbin_index (nb)&lt;/code&gt; 根据块的大小计算出 fast bin 的 index，然后 &lt;code&gt;fastbin (av, idx)&lt;/code&gt; 对应 fast bin 的链表头指针&lt;/li&gt;&lt;li&gt;如果链表非空，说明可以从 fast bin 分配空闲块，此时就把链表头的结点弹出：&lt;code&gt;*fb = victim-&amp;gt;fd&lt;/code&gt;（单线程）或 &lt;code&gt;REMOVE_FB (fb, pp, victim)&lt;/code&gt;（多线程）；只用到了单向链表的 &lt;code&gt;fd&lt;/code&gt; 指针，其余的字段没有用到&lt;/li&gt;&lt;li&gt;进行一系列的安全检查：&lt;code&gt;__builtin_expect&lt;/code&gt; 和 &lt;code&gt;check_remalloced_chunk&lt;/code&gt;&lt;/li&gt;&lt;li&gt;检查 tcache 对应的 bin，如果它还没有满，就把 fast bin 链表中的元素挪到 tcache 当中&lt;/li&gt;&lt;li&gt;把 payload 地址通过 &lt;code&gt;chunk2mem&lt;/code&gt; 计算出来，返回给 malloc 调用者&lt;/li&gt;&lt;li&gt;调用 &lt;code&gt;alloc_perturb&lt;/code&gt; 往新分配的空间内写入垃圾数据（可选），避免泄露之前的数据&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;可以看到，这个过程比较简单，和 tcache 类似，只不过它从 thread local 的 tcache 改成了支持多线程的版本，同时为了支持多线程访问，使用 CAS 原子指令来更新链表头部：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-23-1&#34;&gt;&lt;a id=&#34;__codelineno-23-1&#34; name=&#34;__codelineno-23-1&#34; href=&#34;#__codelineno-23-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define REMOVE_FB(fb, victim, pp) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-23-2&#34;&gt;&lt;a id=&#34;__codelineno-23-2&#34; name=&#34;__codelineno-23-2&#34; href=&#34;#__codelineno-23-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; do \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-23-3&#34;&gt;&lt;a id=&#34;__codelineno-23-3&#34; name=&#34;__codelineno-23-3&#34; href=&#34;#__codelineno-23-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; { \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-23-4&#34;&gt;&lt;a id=&#34;__codelineno-23-4&#34; name=&#34;__codelineno-23-4&#34; href=&#34;#__codelineno-23-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; victim = pp; \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-23-5&#34;&gt;&lt;a id=&#34;__codelineno-23-5&#34; name=&#34;__codelineno-23-5&#34; href=&#34;#__codelineno-23-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; if (victim == NULL) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-23-6&#34;&gt;&lt;a id=&#34;__codelineno-23-6&#34; name=&#34;__codelineno-23-6&#34; href=&#34;#__codelineno-23-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; break; \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-23-7&#34;&gt;&lt;a id=&#34;__codelineno-23-7&#34; name=&#34;__codelineno-23-7&#34; href=&#34;#__codelineno-23-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; } \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-23-8&#34;&gt;&lt;a id=&#34;__codelineno-23-8&#34; name=&#34;__codelineno-23-8&#34; href=&#34;#__codelineno-23-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; while ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&amp;gt;fd, victim)) != victim);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正因如此，这个分配过程才能做到比较快，所以这样的分配方法叫做 fast bin。&lt;/p&gt;&lt;h3 id=&#34;free_1&#34;&gt;free&lt;a class=&#34;headerlink&#34; href=&#34;#free_1&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;接下来分析一下 free 的时候，空闲块是如何进入 fast bin 的：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-24-1&#34;&gt;&lt;a id=&#34;__codelineno-24-1&#34; name=&#34;__codelineno-24-1&#34; href=&#34;#__codelineno-24-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;// in _int_free, after tcache handling&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-2&#34;&gt;&lt;a id=&#34;__codelineno-24-2&#34; name=&#34;__codelineno-24-2&#34; href=&#34;#__codelineno-24-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_max_fast&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-3&#34;&gt;&lt;a id=&#34;__codelineno-24-3&#34; name=&#34;__codelineno-24-3&#34; href=&#34;#__codelineno-24-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-4&#34;&gt;&lt;a id=&#34;__codelineno-24-4&#34; name=&#34;__codelineno-24-4&#34; href=&#34;#__codelineno-24-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* check omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-5&#34;&gt;&lt;a id=&#34;__codelineno-24-5&#34; name=&#34;__codelineno-24-5&#34; href=&#34;#__codelineno-24-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free_perturb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk2mem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SIZE_SZ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-6&#34;&gt;&lt;a id=&#34;__codelineno-24-6&#34; name=&#34;__codelineno-24-6&#34; href=&#34;#__codelineno-24-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-7&#34;&gt;&lt;a id=&#34;__codelineno-24-7&#34; name=&#34;__codelineno-24-7&#34; href=&#34;#__codelineno-24-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;atomic_store_relaxed&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;have_fastchunks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-8&#34;&gt;&lt;a id=&#34;__codelineno-24-8&#34; name=&#34;__codelineno-24-8&#34; href=&#34;#__codelineno-24-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fastbin_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-9&#34;&gt;&lt;a id=&#34;__codelineno-24-9&#34; name=&#34;__codelineno-24-9&#34; href=&#34;#__codelineno-24-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fastbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-10&#34;&gt;&lt;a id=&#34;__codelineno-24-10&#34; name=&#34;__codelineno-24-10&#34; href=&#34;#__codelineno-24-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-11&#34;&gt;&lt;a id=&#34;__codelineno-24-11&#34; name=&#34;__codelineno-24-11&#34; href=&#34;#__codelineno-24-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Atomically link P to its fastbin: P-&amp;gt;FD = *FB; *FB = P; */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-12&#34;&gt;&lt;a id=&#34;__codelineno-24-12&#34; name=&#34;__codelineno-24-12&#34; href=&#34;#__codelineno-24-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunkptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-13&#34;&gt;&lt;a id=&#34;__codelineno-24-13&#34; name=&#34;__codelineno-24-13&#34; href=&#34;#__codelineno-24-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-14&#34;&gt;&lt;a id=&#34;__codelineno-24-14&#34; name=&#34;__codelineno-24-14&#34; href=&#34;#__codelineno-24-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SINGLE_THREAD_P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-15&#34;&gt;&lt;a id=&#34;__codelineno-24-15&#34; name=&#34;__codelineno-24-15&#34; href=&#34;#__codelineno-24-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-16&#34;&gt;&lt;a id=&#34;__codelineno-24-16&#34; name=&#34;__codelineno-24-16&#34; href=&#34;#__codelineno-24-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Check that the top of the bin is not the record we are going to&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-17&#34;&gt;&lt;a id=&#34;__codelineno-24-17&#34; name=&#34;__codelineno-24-17&#34; href=&#34;#__codelineno-24-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; add (i.e., double free). */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-18&#34;&gt;&lt;a id=&#34;__codelineno-24-18&#34; name=&#34;__codelineno-24-18&#34; href=&#34;#__codelineno-24-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__builtin_expect&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-19&#34;&gt;&lt;a id=&#34;__codelineno-24-19&#34; name=&#34;__codelineno-24-19&#34; href=&#34;#__codelineno-24-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc_printerr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;double free or corruption (fasttop)&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-20&#34;&gt;&lt;a id=&#34;__codelineno-24-20&#34; name=&#34;__codelineno-24-20&#34; href=&#34;#__codelineno-24-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-21&#34;&gt;&lt;a id=&#34;__codelineno-24-21&#34; name=&#34;__codelineno-24-21&#34; href=&#34;#__codelineno-24-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-22&#34;&gt;&lt;a id=&#34;__codelineno-24-22&#34; name=&#34;__codelineno-24-22&#34; href=&#34;#__codelineno-24-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-23&#34;&gt;&lt;a id=&#34;__codelineno-24-23&#34; name=&#34;__codelineno-24-23&#34; href=&#34;#__codelineno-24-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-24&#34;&gt;&lt;a id=&#34;__codelineno-24-24&#34; name=&#34;__codelineno-24-24&#34; href=&#34;#__codelineno-24-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-25&#34;&gt;&lt;a id=&#34;__codelineno-24-25&#34; name=&#34;__codelineno-24-25&#34; href=&#34;#__codelineno-24-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-26&#34;&gt;&lt;a id=&#34;__codelineno-24-26&#34; name=&#34;__codelineno-24-26&#34; href=&#34;#__codelineno-24-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Check that the top of the bin is not the record we are going to&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-27&#34;&gt;&lt;a id=&#34;__codelineno-24-27&#34; name=&#34;__codelineno-24-27&#34; href=&#34;#__codelineno-24-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; add (i.e., double free). */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-28&#34;&gt;&lt;a id=&#34;__codelineno-24-28&#34; name=&#34;__codelineno-24-28&#34; href=&#34;#__codelineno-24-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__builtin_expect&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-29&#34;&gt;&lt;a id=&#34;__codelineno-24-29&#34; name=&#34;__codelineno-24-29&#34; href=&#34;#__codelineno-24-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc_printerr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;double free or corruption (fasttop)&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-30&#34;&gt;&lt;a id=&#34;__codelineno-24-30&#34; name=&#34;__codelineno-24-30&#34; href=&#34;#__codelineno-24-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-31&#34;&gt;&lt;a id=&#34;__codelineno-24-31&#34; name=&#34;__codelineno-24-31&#34; href=&#34;#__codelineno-24-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-32&#34;&gt;&lt;a id=&#34;__codelineno-24-32&#34; name=&#34;__codelineno-24-32&#34; href=&#34;#__codelineno-24-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;catomic_compare_and_exchange_val_rel&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-33&#34;&gt;&lt;a id=&#34;__codelineno-24-33&#34; name=&#34;__codelineno-24-33&#34; href=&#34;#__codelineno-24-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-34&#34;&gt;&lt;a id=&#34;__codelineno-24-34&#34; name=&#34;__codelineno-24-34&#34; href=&#34;#__codelineno-24-34&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-35&#34;&gt;&lt;a id=&#34;__codelineno-24-35&#34; name=&#34;__codelineno-24-35&#34; href=&#34;#__codelineno-24-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* check omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-24-36&#34;&gt;&lt;a id=&#34;__codelineno-24-36&#34; name=&#34;__codelineno-24-36&#34; href=&#34;#__codelineno-24-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它的逻辑很简单：如果大小合适，就直接添加到 fast bin 的链表头里，没有 tcache 那样的长度限制，多线程场景下依然是用 CAS 来实现原子的链表插入。&lt;/p&gt;&lt;p&gt;相比 tcache，fast bin 的 double free 检查更加简陋：它只能防护连续两次 free 同一个块，只判断了要插入链表的块是否在链表头，而不会检查是否在链表中间。&lt;/p&gt;&lt;h3 id=&#34;实验_1&#34;&gt;实验&lt;a class=&#34;headerlink&#34; href=&#34;#实验_1&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;接下来写一段代码来观察 fast bin 的更新过程：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;由于 fastbin 保存在 &lt;code&gt;main_arena&lt;/code&gt; 中，所以我们需要找到 &lt;code&gt;main_arena&lt;/code&gt; 的运行时地址&lt;/li&gt;&lt;li&gt;&lt;code&gt;main_arena&lt;/code&gt; 不在 libc 符号表中，不能直接找到它的地址，此时可以通过 libc 的调试符号，找到它相对 image base 的 offset 是 &lt;code&gt;0x1ecb80&lt;/code&gt;&lt;/li&gt;&lt;li&gt;再找一个在符号表中的符号 &lt;code&gt;_IO_2_1_stdout_&lt;/code&gt;，它相对 image base 的 offset 是 &lt;code&gt;0x1ed6a0&lt;/code&gt;&lt;/li&gt;&lt;li&gt;根据以上信息，就可以在运行时找到 libc 的 image base 地址，从而推断 &lt;code&gt;main_arena&lt;/code&gt; 的地址，进而找到所有的 fast bin&lt;/li&gt;&lt;li&gt;下面写一段代码，观察空闲块进入 fast bin 的过程&lt;/li&gt;&lt;/ol&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-25-1&#34;&gt;&lt;a id=&#34;__codelineno-25-1&#34; name=&#34;__codelineno-25-1&#34; href=&#34;#__codelineno-25-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stddef.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-2&#34;&gt;&lt;a id=&#34;__codelineno-25-2&#34; name=&#34;__codelineno-25-2&#34; href=&#34;#__codelineno-25-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-3&#34;&gt;&lt;a id=&#34;__codelineno-25-3&#34; name=&#34;__codelineno-25-3&#34; href=&#34;#__codelineno-25-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-4&#34;&gt;&lt;a id=&#34;__codelineno-25-4&#34; name=&#34;__codelineno-25-4&#34; href=&#34;#__codelineno-25-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-5&#34;&gt;&lt;a id=&#34;__codelineno-25-5&#34; name=&#34;__codelineno-25-5&#34; href=&#34;#__codelineno-25-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-6&#34;&gt;&lt;a id=&#34;__codelineno-25-6&#34; name=&#34;__codelineno-25-6&#34; href=&#34;#__codelineno-25-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-7&#34;&gt;&lt;a id=&#34;__codelineno-25-7&#34; name=&#34;__codelineno-25-7&#34; href=&#34;#__codelineno-25-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunk_prev_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Size of previous chunk (if free). */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-8&#34;&gt;&lt;a id=&#34;__codelineno-25-8&#34; name=&#34;__codelineno-25-8&#34; href=&#34;#__codelineno-25-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunk_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Size in bytes, including overhead. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-9&#34;&gt;&lt;a id=&#34;__codelineno-25-9&#34; name=&#34;__codelineno-25-9&#34; href=&#34;#__codelineno-25-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-10&#34;&gt;&lt;a id=&#34;__codelineno-25-10&#34; name=&#34;__codelineno-25-10&#34; href=&#34;#__codelineno-25-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* double links -- used only if free. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-11&#34;&gt;&lt;a id=&#34;__codelineno-25-11&#34; name=&#34;__codelineno-25-11&#34; href=&#34;#__codelineno-25-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-12&#34;&gt;&lt;a id=&#34;__codelineno-25-12&#34; name=&#34;__codelineno-25-12&#34; href=&#34;#__codelineno-25-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-13&#34;&gt;&lt;a id=&#34;__codelineno-25-13&#34; name=&#34;__codelineno-25-13&#34; href=&#34;#__codelineno-25-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Only used for large blocks: pointer to next larger size. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-14&#34;&gt;&lt;a id=&#34;__codelineno-25-14&#34; name=&#34;__codelineno-25-14&#34; href=&#34;#__codelineno-25-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* double links -- used only if free. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-15&#34;&gt;&lt;a id=&#34;__codelineno-25-15&#34; name=&#34;__codelineno-25-15&#34; href=&#34;#__codelineno-25-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-16&#34;&gt;&lt;a id=&#34;__codelineno-25-16&#34; name=&#34;__codelineno-25-16&#34; href=&#34;#__codelineno-25-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-17&#34;&gt;&lt;a id=&#34;__codelineno-25-17&#34; name=&#34;__codelineno-25-17&#34; href=&#34;#__codelineno-25-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-18&#34;&gt;&lt;a id=&#34;__codelineno-25-18&#34; name=&#34;__codelineno-25-18&#34; href=&#34;#__codelineno-25-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* offset 2 to use otherwise unindexable first 2 bins */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-19&#34;&gt;&lt;a id=&#34;__codelineno-25-19&#34; name=&#34;__codelineno-25-19&#34; href=&#34;#__codelineno-25-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define fastbin_index(sz) ((((unsigned int)(sz)) &amp;gt;&amp;gt; (SIZE_SZ == 8 ? 4 : 3)) - 2)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-20&#34;&gt;&lt;a id=&#34;__codelineno-25-20&#34; name=&#34;__codelineno-25-20&#34; href=&#34;#__codelineno-25-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-21&#34;&gt;&lt;a id=&#34;__codelineno-25-21&#34; name=&#34;__codelineno-25-21&#34; href=&#34;#__codelineno-25-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define INTERNAL_SIZE_T size_t&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-22&#34;&gt;&lt;a id=&#34;__codelineno-25-22&#34; name=&#34;__codelineno-25-22&#34; href=&#34;#__codelineno-25-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-23&#34;&gt;&lt;a id=&#34;__codelineno-25-23&#34; name=&#34;__codelineno-25-23&#34; href=&#34;#__codelineno-25-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* MALLOC_ALIGNMENT equals to 16 on 64-bit */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-24&#34;&gt;&lt;a id=&#34;__codelineno-25-24&#34; name=&#34;__codelineno-25-24&#34; href=&#34;#__codelineno-25-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define MALLOC_ALIGNMENT \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-25&#34;&gt;&lt;a id=&#34;__codelineno-25-25&#34; name=&#34;__codelineno-25-25&#34; href=&#34;#__codelineno-25-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; (2 * SIZE_SZ &amp;lt; __alignof__(long double) ? __alignof__(long double) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-26&#34;&gt;&lt;a id=&#34;__codelineno-25-26&#34; name=&#34;__codelineno-25-26&#34; href=&#34;#__codelineno-25-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; : 2 * SIZE_SZ)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-27&#34;&gt;&lt;a id=&#34;__codelineno-25-27&#34; name=&#34;__codelineno-25-27&#34; href=&#34;#__codelineno-25-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-28&#34;&gt;&lt;a id=&#34;__codelineno-25-28&#34; name=&#34;__codelineno-25-28&#34; href=&#34;#__codelineno-25-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* The corresponding word size. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-29&#34;&gt;&lt;a id=&#34;__codelineno-25-29&#34; name=&#34;__codelineno-25-29&#34; href=&#34;#__codelineno-25-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* SIZE_SZ equals to 8 on 64-bit */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-30&#34;&gt;&lt;a id=&#34;__codelineno-25-30&#34; name=&#34;__codelineno-25-30&#34; href=&#34;#__codelineno-25-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define SIZE_SZ (sizeof(INTERNAL_SIZE_T))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-31&#34;&gt;&lt;a id=&#34;__codelineno-25-31&#34; name=&#34;__codelineno-25-31&#34; href=&#34;#__codelineno-25-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-32&#34;&gt;&lt;a id=&#34;__codelineno-25-32&#34; name=&#34;__codelineno-25-32&#34; href=&#34;#__codelineno-25-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* The corresponding bit mask value. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-33&#34;&gt;&lt;a id=&#34;__codelineno-25-33&#34; name=&#34;__codelineno-25-33&#34; href=&#34;#__codelineno-25-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* MALLOC_ALIGN_MASK equals to 15 on 64-bit */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-34&#34;&gt;&lt;a id=&#34;__codelineno-25-34&#34; name=&#34;__codelineno-25-34&#34; href=&#34;#__codelineno-25-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define MALLOC_ALIGN_MASK (MALLOC_ALIGNMENT - 1)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-35&#34;&gt;&lt;a id=&#34;__codelineno-25-35&#34; name=&#34;__codelineno-25-35&#34; href=&#34;#__codelineno-25-35&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-36&#34;&gt;&lt;a id=&#34;__codelineno-25-36&#34; name=&#34;__codelineno-25-36&#34; href=&#34;#__codelineno-25-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* The smallest possible chunk */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-37&#34;&gt;&lt;a id=&#34;__codelineno-25-37&#34; name=&#34;__codelineno-25-37&#34; href=&#34;#__codelineno-25-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* MIN_CHUNK_SIZE equals to 32 on 64-bit */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-38&#34;&gt;&lt;a id=&#34;__codelineno-25-38&#34; name=&#34;__codelineno-25-38&#34; href=&#34;#__codelineno-25-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define MIN_CHUNK_SIZE (offsetof(struct malloc_chunk, fd_nextsize))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-39&#34;&gt;&lt;a id=&#34;__codelineno-25-39&#34; name=&#34;__codelineno-25-39&#34; href=&#34;#__codelineno-25-39&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-40&#34;&gt;&lt;a id=&#34;__codelineno-25-40&#34; name=&#34;__codelineno-25-40&#34; href=&#34;#__codelineno-25-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* The smallest size we can malloc is an aligned minimal chunk */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-41&#34;&gt;&lt;a id=&#34;__codelineno-25-41&#34; name=&#34;__codelineno-25-41&#34; href=&#34;#__codelineno-25-41&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* MINSIZE equals to 32 on 64-bit */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-42&#34;&gt;&lt;a id=&#34;__codelineno-25-42&#34; name=&#34;__codelineno-25-42&#34; href=&#34;#__codelineno-25-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define MINSIZE \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-43&#34;&gt;&lt;a id=&#34;__codelineno-25-43&#34; name=&#34;__codelineno-25-43&#34; href=&#34;#__codelineno-25-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; (unsigned long)(((MIN_CHUNK_SIZE + MALLOC_ALIGN_MASK) &amp;amp; ~MALLOC_ALIGN_MASK))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-44&#34;&gt;&lt;a id=&#34;__codelineno-25-44&#34; name=&#34;__codelineno-25-44&#34; href=&#34;#__codelineno-25-44&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-45&#34;&gt;&lt;a id=&#34;__codelineno-25-45&#34; name=&#34;__codelineno-25-45&#34; href=&#34;#__codelineno-25-45&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* equivalent to max(alignUp(req + SIZE_SZ, MALLOC_ALIGNMENT), MINSIZE) */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-46&#34;&gt;&lt;a id=&#34;__codelineno-25-46&#34; name=&#34;__codelineno-25-46&#34; href=&#34;#__codelineno-25-46&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define request2size(req) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-47&#34;&gt;&lt;a id=&#34;__codelineno-25-47&#34; name=&#34;__codelineno-25-47&#34; href=&#34;#__codelineno-25-47&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &amp;lt; MINSIZE) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-48&#34;&gt;&lt;a id=&#34;__codelineno-25-48&#34; name=&#34;__codelineno-25-48&#34; href=&#34;#__codelineno-25-48&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; ? MINSIZE \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-49&#34;&gt;&lt;a id=&#34;__codelineno-25-49&#34; name=&#34;__codelineno-25-49&#34; href=&#34;#__codelineno-25-49&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp;amp; ~MALLOC_ALIGN_MASK)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-50&#34;&gt;&lt;a id=&#34;__codelineno-25-50&#34; name=&#34;__codelineno-25-50&#34; href=&#34;#__codelineno-25-50&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-51&#34;&gt;&lt;a id=&#34;__codelineno-25-51&#34; name=&#34;__codelineno-25-51&#34; href=&#34;#__codelineno-25-51&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* MAX_FAST_SIZE equals to 160 on 64-bit */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-52&#34;&gt;&lt;a id=&#34;__codelineno-25-52&#34; name=&#34;__codelineno-25-52&#34; href=&#34;#__codelineno-25-52&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define MAX_FAST_SIZE (80 * SIZE_SZ / 4)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-53&#34;&gt;&lt;a id=&#34;__codelineno-25-53&#34; name=&#34;__codelineno-25-53&#34; href=&#34;#__codelineno-25-53&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-54&#34;&gt;&lt;a id=&#34;__codelineno-25-54&#34; name=&#34;__codelineno-25-54&#34; href=&#34;#__codelineno-25-54&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* NFASTBINS equals to 10 on 64-bit */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-55&#34;&gt;&lt;a id=&#34;__codelineno-25-55&#34; name=&#34;__codelineno-25-55&#34; href=&#34;#__codelineno-25-55&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define NFASTBINS (fastbin_index(request2size(MAX_FAST_SIZE)) + 1)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-56&#34;&gt;&lt;a id=&#34;__codelineno-25-56&#34; name=&#34;__codelineno-25-56&#34; href=&#34;#__codelineno-25-56&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-57&#34;&gt;&lt;a id=&#34;__codelineno-25-57&#34; name=&#34;__codelineno-25-57&#34; href=&#34;#__codelineno-25-57&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_state&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-58&#34;&gt;&lt;a id=&#34;__codelineno-25-58&#34; name=&#34;__codelineno-25-58&#34; href=&#34;#__codelineno-25-58&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Serialize access. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-59&#34;&gt;&lt;a id=&#34;__codelineno-25-59&#34; name=&#34;__codelineno-25-59&#34; href=&#34;#__codelineno-25-59&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-60&#34;&gt;&lt;a id=&#34;__codelineno-25-60&#34; name=&#34;__codelineno-25-60&#34; href=&#34;#__codelineno-25-60&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Flags (formerly in max_fast). */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-61&#34;&gt;&lt;a id=&#34;__codelineno-25-61&#34; name=&#34;__codelineno-25-61&#34; href=&#34;#__codelineno-25-61&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-62&#34;&gt;&lt;a id=&#34;__codelineno-25-62&#34; name=&#34;__codelineno-25-62&#34; href=&#34;#__codelineno-25-62&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Set if the fastbin chunks contain recently inserted free blocks. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-63&#34;&gt;&lt;a id=&#34;__codelineno-25-63&#34; name=&#34;__codelineno-25-63&#34; href=&#34;#__codelineno-25-63&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Note this is a bool but not all targets support atomics on booleans. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-64&#34;&gt;&lt;a id=&#34;__codelineno-25-64&#34; name=&#34;__codelineno-25-64&#34; href=&#34;#__codelineno-25-64&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;have_fastchunks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-65&#34;&gt;&lt;a id=&#34;__codelineno-25-65&#34; name=&#34;__codelineno-25-65&#34; href=&#34;#__codelineno-25-65&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Fastbins */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-66&#34;&gt;&lt;a id=&#34;__codelineno-25-66&#34; name=&#34;__codelineno-25-66&#34; href=&#34;#__codelineno-25-66&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fastbinsY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NFASTBINS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-67&#34;&gt;&lt;a id=&#34;__codelineno-25-67&#34; name=&#34;__codelineno-25-67&#34; href=&#34;#__codelineno-25-67&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-68&#34;&gt;&lt;a id=&#34;__codelineno-25-68&#34; name=&#34;__codelineno-25-68&#34; href=&#34;#__codelineno-25-68&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-69&#34;&gt;&lt;a id=&#34;__codelineno-25-69&#34; name=&#34;__codelineno-25-69&#34; href=&#34;#__codelineno-25-69&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;dump_fastbin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-70&#34;&gt;&lt;a id=&#34;__codelineno-25-70&#34; name=&#34;__codelineno-25-70&#34; href=&#34;#__codelineno-25-70&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;libc_base&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1ed6a0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// offset of _IO_2_1_stdout_&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-71&#34;&gt;&lt;a id=&#34;__codelineno-25-71&#34; name=&#34;__codelineno-25-71&#34; href=&#34;#__codelineno-25-71&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_state&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main_arena&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-72&#34;&gt;&lt;a id=&#34;__codelineno-25-72&#34; name=&#34;__codelineno-25-72&#34; href=&#34;#__codelineno-25-72&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;libc_base&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-73&#34;&gt;&lt;a id=&#34;__codelineno-25-73&#34; name=&#34;__codelineno-25-73&#34; href=&#34;#__codelineno-25-73&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1ecb80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// offset of main_arena&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-74&#34;&gt;&lt;a id=&#34;__codelineno-25-74&#34; name=&#34;__codelineno-25-74&#34; href=&#34;#__codelineno-25-74&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NFASTBINS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-75&#34;&gt;&lt;a id=&#34;__codelineno-25-75&#34; name=&#34;__codelineno-25-75&#34; href=&#34;#__codelineno-25-75&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main_arena&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fastbinsY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-76&#34;&gt;&lt;a id=&#34;__codelineno-25-76&#34; name=&#34;__codelineno-25-76&#34; href=&#34;#__codelineno-25-76&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main_arena&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fastbinsY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-77&#34;&gt;&lt;a id=&#34;__codelineno-25-77&#34; name=&#34;__codelineno-25-77&#34; href=&#34;#__codelineno-25-77&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;fastbin #%d: %p&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-78&#34;&gt;&lt;a id=&#34;__codelineno-25-78&#34; name=&#34;__codelineno-25-78&#34; href=&#34;#__codelineno-25-78&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-79&#34;&gt;&lt;a id=&#34;__codelineno-25-79&#34; name=&#34;__codelineno-25-79&#34; href=&#34;#__codelineno-25-79&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-80&#34;&gt;&lt;a id=&#34;__codelineno-25-80&#34; name=&#34;__codelineno-25-80&#34; href=&#34;#__codelineno-25-80&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot; -&amp;gt; %p&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-81&#34;&gt;&lt;a id=&#34;__codelineno-25-81&#34; name=&#34;__codelineno-25-81&#34; href=&#34;#__codelineno-25-81&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-82&#34;&gt;&lt;a id=&#34;__codelineno-25-82&#34; name=&#34;__codelineno-25-82&#34; href=&#34;#__codelineno-25-82&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-83&#34;&gt;&lt;a id=&#34;__codelineno-25-83&#34; name=&#34;__codelineno-25-83&#34; href=&#34;#__codelineno-25-83&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-84&#34;&gt;&lt;a id=&#34;__codelineno-25-84&#34; name=&#34;__codelineno-25-84&#34; href=&#34;#__codelineno-25-84&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-85&#34;&gt;&lt;a id=&#34;__codelineno-25-85&#34; name=&#34;__codelineno-25-85&#34; href=&#34;#__codelineno-25-85&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-86&#34;&gt;&lt;a id=&#34;__codelineno-25-86&#34; name=&#34;__codelineno-25-86&#34; href=&#34;#__codelineno-25-86&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-87&#34;&gt;&lt;a id=&#34;__codelineno-25-87&#34; name=&#34;__codelineno-25-87&#34; href=&#34;#__codelineno-25-87&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-88&#34;&gt;&lt;a id=&#34;__codelineno-25-88&#34; name=&#34;__codelineno-25-88&#34; href=&#34;#__codelineno-25-88&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-89&#34;&gt;&lt;a id=&#34;__codelineno-25-89&#34; name=&#34;__codelineno-25-89&#34; href=&#34;#__codelineno-25-89&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// use 10 malloc + free, the first 7 blocks will be saved in tcache, the rest&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-90&#34;&gt;&lt;a id=&#34;__codelineno-25-90&#34; name=&#34;__codelineno-25-90&#34; href=&#34;#__codelineno-25-90&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ones will go to fastbin&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-91&#34;&gt;&lt;a id=&#34;__codelineno-25-91&#34; name=&#34;__codelineno-25-91&#34; href=&#34;#__codelineno-25-91&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-92&#34;&gt;&lt;a id=&#34;__codelineno-25-92&#34; name=&#34;__codelineno-25-92&#34; href=&#34;#__codelineno-25-92&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;allocate 10 pointers:&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-93&#34;&gt;&lt;a id=&#34;__codelineno-25-93&#34; name=&#34;__codelineno-25-93&#34; href=&#34;#__codelineno-25-93&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-94&#34;&gt;&lt;a id=&#34;__codelineno-25-94&#34; name=&#34;__codelineno-25-94&#34; href=&#34;#__codelineno-25-94&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-95&#34;&gt;&lt;a id=&#34;__codelineno-25-95&#34; name=&#34;__codelineno-25-95&#34; href=&#34;#__codelineno-25-95&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot; %p&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-96&#34;&gt;&lt;a id=&#34;__codelineno-25-96&#34; name=&#34;__codelineno-25-96&#34; href=&#34;#__codelineno-25-96&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-97&#34;&gt;&lt;a id=&#34;__codelineno-25-97&#34; name=&#34;__codelineno-25-97&#34; href=&#34;#__codelineno-25-97&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-98&#34;&gt;&lt;a id=&#34;__codelineno-25-98&#34; name=&#34;__codelineno-25-98&#34; href=&#34;#__codelineno-25-98&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-99&#34;&gt;&lt;a id=&#34;__codelineno-25-99&#34; name=&#34;__codelineno-25-99&#34; href=&#34;#__codelineno-25-99&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// now one ptr goes to fastbin&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-100&#34;&gt;&lt;a id=&#34;__codelineno-25-100&#34; name=&#34;__codelineno-25-100&#34; href=&#34;#__codelineno-25-100&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-101&#34;&gt;&lt;a id=&#34;__codelineno-25-101&#34; name=&#34;__codelineno-25-101&#34; href=&#34;#__codelineno-25-101&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-102&#34;&gt;&lt;a id=&#34;__codelineno-25-102&#34; name=&#34;__codelineno-25-102&#34; href=&#34;#__codelineno-25-102&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-103&#34;&gt;&lt;a id=&#34;__codelineno-25-103&#34; name=&#34;__codelineno-25-103&#34; href=&#34;#__codelineno-25-103&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-104&#34;&gt;&lt;a id=&#34;__codelineno-25-104&#34; name=&#34;__codelineno-25-104&#34; href=&#34;#__codelineno-25-104&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;fastbins after 8 pointers freed:&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-105&#34;&gt;&lt;a id=&#34;__codelineno-25-105&#34; name=&#34;__codelineno-25-105&#34; href=&#34;#__codelineno-25-105&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dump_fastbin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-106&#34;&gt;&lt;a id=&#34;__codelineno-25-106&#34; name=&#34;__codelineno-25-106&#34; href=&#34;#__codelineno-25-106&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-107&#34;&gt;&lt;a id=&#34;__codelineno-25-107&#34; name=&#34;__codelineno-25-107&#34; href=&#34;#__codelineno-25-107&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// free the 9th one&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-108&#34;&gt;&lt;a id=&#34;__codelineno-25-108&#34; name=&#34;__codelineno-25-108&#34; href=&#34;#__codelineno-25-108&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-109&#34;&gt;&lt;a id=&#34;__codelineno-25-109&#34; name=&#34;__codelineno-25-109&#34; href=&#34;#__codelineno-25-109&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-110&#34;&gt;&lt;a id=&#34;__codelineno-25-110&#34; name=&#34;__codelineno-25-110&#34; href=&#34;#__codelineno-25-110&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// two pointers in the fastbin&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-111&#34;&gt;&lt;a id=&#34;__codelineno-25-111&#34; name=&#34;__codelineno-25-111&#34; href=&#34;#__codelineno-25-111&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;fastbins after 9 pointers freed:&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-112&#34;&gt;&lt;a id=&#34;__codelineno-25-112&#34; name=&#34;__codelineno-25-112&#34; href=&#34;#__codelineno-25-112&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dump_fastbin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-113&#34;&gt;&lt;a id=&#34;__codelineno-25-113&#34; name=&#34;__codelineno-25-113&#34; href=&#34;#__codelineno-25-113&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-114&#34;&gt;&lt;a id=&#34;__codelineno-25-114&#34; name=&#34;__codelineno-25-114&#34; href=&#34;#__codelineno-25-114&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// free the 10th one&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-115&#34;&gt;&lt;a id=&#34;__codelineno-25-115&#34; name=&#34;__codelineno-25-115&#34; href=&#34;#__codelineno-25-115&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-116&#34;&gt;&lt;a id=&#34;__codelineno-25-116&#34; name=&#34;__codelineno-25-116&#34; href=&#34;#__codelineno-25-116&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-117&#34;&gt;&lt;a id=&#34;__codelineno-25-117&#34; name=&#34;__codelineno-25-117&#34; href=&#34;#__codelineno-25-117&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// three pointers in the fastbin&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-118&#34;&gt;&lt;a id=&#34;__codelineno-25-118&#34; name=&#34;__codelineno-25-118&#34; href=&#34;#__codelineno-25-118&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;fastbins after 10 pointers freed:&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-119&#34;&gt;&lt;a id=&#34;__codelineno-25-119&#34; name=&#34;__codelineno-25-119&#34; href=&#34;#__codelineno-25-119&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dump_fastbin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-120&#34;&gt;&lt;a id=&#34;__codelineno-25-120&#34; name=&#34;__codelineno-25-120&#34; href=&#34;#__codelineno-25-120&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-25-121&#34;&gt;&lt;a id=&#34;__codelineno-25-121&#34; name=&#34;__codelineno-25-121&#34; href=&#34;#__codelineno-25-121&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出如下：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-26-1&#34;&gt;&lt;a id=&#34;__codelineno-26-1&#34; name=&#34;__codelineno-26-1&#34; href=&#34;#__codelineno-26-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;allocate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x563bd918d6b0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x563bd918d6e0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x563bd918d710&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x563bd918d740&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x563bd918d770&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x563bd918d7a0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x563bd918d7d0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x563bd918d800&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x563bd918d830&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x563bd918d860&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-26-2&#34;&gt;&lt;a id=&#34;__codelineno-26-2&#34; name=&#34;__codelineno-26-2&#34; href=&#34;#__codelineno-26-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;fastbins&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;after&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointers&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;freed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-26-3&#34;&gt;&lt;a id=&#34;__codelineno-26-3&#34; name=&#34;__codelineno-26-3&#34; href=&#34;#__codelineno-26-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;fastbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x563bd918d7f0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-26-4&#34;&gt;&lt;a id=&#34;__codelineno-26-4&#34; name=&#34;__codelineno-26-4&#34; href=&#34;#__codelineno-26-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;fastbins&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;after&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointers&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;freed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-26-5&#34;&gt;&lt;a id=&#34;__codelineno-26-5&#34; name=&#34;__codelineno-26-5&#34; href=&#34;#__codelineno-26-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;fastbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x563bd918d820&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x563bd918d7f0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-26-6&#34;&gt;&lt;a id=&#34;__codelineno-26-6&#34; name=&#34;__codelineno-26-6&#34; href=&#34;#__codelineno-26-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;fastbins&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;after&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointers&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;freed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-26-7&#34;&gt;&lt;a id=&#34;__codelineno-26-7&#34; name=&#34;__codelineno-26-7&#34; href=&#34;#__codelineno-26-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;fastbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x563bd918d850&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x563bd918d820&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x563bd918d7f0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，代码先分配了十个块，再按顺序释放，那么前七个块会进入 tcache，剩下的三个块则进入了同一个 fast bin，并且后释放的会在链表的开头。注意 fast bin 链表里的地址打印的是 chunk 地址，而用 &lt;code&gt;malloc&lt;/code&gt; 分配的地址指向的是 payload 部分，二者差了 16 字节，最终 fast bin 就是把十个块里最后三个块用链表串起来。由于总是往链表的头部插入空闲块，所以后释放的块出现在靠前的位置。&lt;/p&gt;&lt;h2 id=&#34;small-bin&#34;&gt;small bin&lt;a class=&#34;headerlink&#34; href=&#34;#small-bin&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;分析完 fast bin，接下来来看 small bin。small bin 每个 bin 内空闲块的大小是相同的，并且也是以链表的方式组织，只不过用的是双向链表。&lt;/p&gt;&lt;h3 id=&#34;malloc_3&#34;&gt;malloc&lt;a class=&#34;headerlink&#34; href=&#34;#malloc_3&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;接下来观察 &lt;code&gt;_int_malloc&lt;/code&gt; 是怎么使用 small bin 的。前面提到，&lt;code&gt;_int_malloc&lt;/code&gt; 首先会尝试在 fast bin 中分配，如果分配失败，或者大小超出了 fast bin 的范围，接下来会尝试在 small bin 中分配：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-27-1&#34;&gt;&lt;a id=&#34;__codelineno-27-1&#34; name=&#34;__codelineno-27-1&#34; href=&#34;#__codelineno-27-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;// in _int_malloc&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-2&#34;&gt;&lt;a id=&#34;__codelineno-27-2&#34; name=&#34;__codelineno-27-2&#34; href=&#34;#__codelineno-27-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in_smallbin_range&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-3&#34;&gt;&lt;a id=&#34;__codelineno-27-3&#34; name=&#34;__codelineno-27-3&#34; href=&#34;#__codelineno-27-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-4&#34;&gt;&lt;a id=&#34;__codelineno-27-4&#34; name=&#34;__codelineno-27-4&#34; href=&#34;#__codelineno-27-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;smallbin_index&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-5&#34;&gt;&lt;a id=&#34;__codelineno-27-5&#34; name=&#34;__codelineno-27-5&#34; href=&#34;#__codelineno-27-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin_at&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-6&#34;&gt;&lt;a id=&#34;__codelineno-27-6&#34; name=&#34;__codelineno-27-6&#34; href=&#34;#__codelineno-27-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-7&#34;&gt;&lt;a id=&#34;__codelineno-27-7&#34; name=&#34;__codelineno-27-7&#34; href=&#34;#__codelineno-27-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-8&#34;&gt;&lt;a id=&#34;__codelineno-27-8&#34; name=&#34;__codelineno-27-8&#34; href=&#34;#__codelineno-27-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-9&#34;&gt;&lt;a id=&#34;__codelineno-27-9&#34; name=&#34;__codelineno-27-9&#34; href=&#34;#__codelineno-27-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-10&#34;&gt;&lt;a id=&#34;__codelineno-27-10&#34; name=&#34;__codelineno-27-10&#34; href=&#34;#__codelineno-27-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__glibc_unlikely&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-11&#34;&gt;&lt;a id=&#34;__codelineno-27-11&#34; name=&#34;__codelineno-27-11&#34; href=&#34;#__codelineno-27-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc_printerr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;malloc(): smallbin double linked list corrupted&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-12&#34;&gt;&lt;a id=&#34;__codelineno-27-12&#34; name=&#34;__codelineno-27-12&#34; href=&#34;#__codelineno-27-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_inuse_bit_at_offset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-13&#34;&gt;&lt;a id=&#34;__codelineno-27-13&#34; name=&#34;__codelineno-27-13&#34; href=&#34;#__codelineno-27-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-14&#34;&gt;&lt;a id=&#34;__codelineno-27-14&#34; name=&#34;__codelineno-27-14&#34; href=&#34;#__codelineno-27-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-15&#34;&gt;&lt;a id=&#34;__codelineno-27-15&#34; name=&#34;__codelineno-27-15&#34; href=&#34;#__codelineno-27-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-16&#34;&gt;&lt;a id=&#34;__codelineno-27-16&#34; name=&#34;__codelineno-27-16&#34; href=&#34;#__codelineno-27-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main_arena&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-17&#34;&gt;&lt;a id=&#34;__codelineno-27-17&#34; name=&#34;__codelineno-27-17&#34; href=&#34;#__codelineno-27-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_non_main_arena&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-18&#34;&gt;&lt;a id=&#34;__codelineno-27-18&#34; name=&#34;__codelineno-27-18&#34; href=&#34;#__codelineno-27-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_malloced_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-19&#34;&gt;&lt;a id=&#34;__codelineno-27-19&#34; name=&#34;__codelineno-27-19&#34; href=&#34;#__codelineno-27-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* While we&amp;#39;re here, if we see other chunks of the same size,&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-20&#34;&gt;&lt;a id=&#34;__codelineno-27-20&#34; name=&#34;__codelineno-27-20&#34; href=&#34;#__codelineno-27-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; stash them in the tcache. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-21&#34;&gt;&lt;a id=&#34;__codelineno-27-21&#34; name=&#34;__codelineno-27-21&#34; href=&#34;#__codelineno-27-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;csize2tidx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-22&#34;&gt;&lt;a id=&#34;__codelineno-27-22&#34; name=&#34;__codelineno-27-22&#34; href=&#34;#__codelineno-27-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_bins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-23&#34;&gt;&lt;a id=&#34;__codelineno-27-23&#34; name=&#34;__codelineno-27-23&#34; href=&#34;#__codelineno-27-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-24&#34;&gt;&lt;a id=&#34;__codelineno-27-24&#34; name=&#34;__codelineno-27-24&#34; href=&#34;#__codelineno-27-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunkptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-25&#34;&gt;&lt;a id=&#34;__codelineno-27-25&#34; name=&#34;__codelineno-27-25&#34; href=&#34;#__codelineno-27-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-26&#34;&gt;&lt;a id=&#34;__codelineno-27-26&#34; name=&#34;__codelineno-27-26&#34; href=&#34;#__codelineno-27-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* While bin not empty and tcache not full, copy chunks over. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-27&#34;&gt;&lt;a id=&#34;__codelineno-27-27&#34; name=&#34;__codelineno-27-27&#34; href=&#34;#__codelineno-27-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_count&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-28&#34;&gt;&lt;a id=&#34;__codelineno-27-28&#34; name=&#34;__codelineno-27-28&#34; href=&#34;#__codelineno-27-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-29&#34;&gt;&lt;a id=&#34;__codelineno-27-29&#34; name=&#34;__codelineno-27-29&#34; href=&#34;#__codelineno-27-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-30&#34;&gt;&lt;a id=&#34;__codelineno-27-30&#34; name=&#34;__codelineno-27-30&#34; href=&#34;#__codelineno-27-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-31&#34;&gt;&lt;a id=&#34;__codelineno-27-31&#34; name=&#34;__codelineno-27-31&#34; href=&#34;#__codelineno-27-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-32&#34;&gt;&lt;a id=&#34;__codelineno-27-32&#34; name=&#34;__codelineno-27-32&#34; href=&#34;#__codelineno-27-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-33&#34;&gt;&lt;a id=&#34;__codelineno-27-33&#34; name=&#34;__codelineno-27-33&#34; href=&#34;#__codelineno-27-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_inuse_bit_at_offset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-34&#34;&gt;&lt;a id=&#34;__codelineno-27-34&#34; name=&#34;__codelineno-27-34&#34; href=&#34;#__codelineno-27-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main_arena&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-35&#34;&gt;&lt;a id=&#34;__codelineno-27-35&#34; name=&#34;__codelineno-27-35&#34; href=&#34;#__codelineno-27-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_non_main_arena&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-36&#34;&gt;&lt;a id=&#34;__codelineno-27-36&#34; name=&#34;__codelineno-27-36&#34; href=&#34;#__codelineno-27-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-37&#34;&gt;&lt;a id=&#34;__codelineno-27-37&#34; name=&#34;__codelineno-27-37&#34; href=&#34;#__codelineno-27-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-38&#34;&gt;&lt;a id=&#34;__codelineno-27-38&#34; name=&#34;__codelineno-27-38&#34; href=&#34;#__codelineno-27-38&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-39&#34;&gt;&lt;a id=&#34;__codelineno-27-39&#34; name=&#34;__codelineno-27-39&#34; href=&#34;#__codelineno-27-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_put&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-40&#34;&gt;&lt;a id=&#34;__codelineno-27-40&#34; name=&#34;__codelineno-27-40&#34; href=&#34;#__codelineno-27-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-41&#34;&gt;&lt;a id=&#34;__codelineno-27-41&#34; name=&#34;__codelineno-27-41&#34; href=&#34;#__codelineno-27-41&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-42&#34;&gt;&lt;a id=&#34;__codelineno-27-42&#34; name=&#34;__codelineno-27-42&#34; href=&#34;#__codelineno-27-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-43&#34;&gt;&lt;a id=&#34;__codelineno-27-43&#34; name=&#34;__codelineno-27-43&#34; href=&#34;#__codelineno-27-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk2mem&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-44&#34;&gt;&lt;a id=&#34;__codelineno-27-44&#34; name=&#34;__codelineno-27-44&#34; href=&#34;#__codelineno-27-44&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alloc_perturb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-45&#34;&gt;&lt;a id=&#34;__codelineno-27-45&#34; name=&#34;__codelineno-27-45&#34; href=&#34;#__codelineno-27-45&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-46&#34;&gt;&lt;a id=&#34;__codelineno-27-46&#34; name=&#34;__codelineno-27-46&#34; href=&#34;#__codelineno-27-46&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-27-47&#34;&gt;&lt;a id=&#34;__codelineno-27-47&#34; name=&#34;__codelineno-27-47&#34; href=&#34;#__codelineno-27-47&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它的过程如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用 &lt;code&gt;in_smallbin_range (nb)&lt;/code&gt; 检查块的大小是否应该放到 small bin 当中&lt;/li&gt;&lt;li&gt;使用 &lt;code&gt;smallbin_index (nb)&lt;/code&gt; 根据块的大小计算出 small bin 的 index，然后 &lt;code&gt;bin_at (av, idx)&lt;/code&gt; 对应 small bin 的链表尾部的哨兵，这个双向链表有且只有一个哨兵，这个哨兵就放在 small bin 数组当中&lt;/li&gt;&lt;li&gt;找到哨兵结点的前驱结点 &lt;code&gt;last (bin)&lt;/code&gt;，如果链表为空，那么哨兵的前驱结点就是它自己；如果链表非空，那么哨兵的前驱结点就是链表里的最后一个结点，把它赋值给 &lt;code&gt;victim&lt;/code&gt;&lt;/li&gt;&lt;li&gt;把这个空闲块标记为正在使用：&lt;code&gt;set_inuse_bit_at_offset (victim, nb)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;把 &lt;code&gt;victim&lt;/code&gt; 从链表里删除：&lt;code&gt;bck = victim-&amp;gt;bk; bin-&amp;gt;bk = bck; bck-&amp;gt;fd = bin;&lt;/code&gt;，典型的双向链表的结点删除过程，维护 &lt;code&gt;victim&lt;/code&gt; 前驱结点的后继指针，维护哨兵 &lt;code&gt;bin&lt;/code&gt; 的前驱指针&lt;/li&gt;&lt;li&gt;进行一系列的安全检查：&lt;code&gt;check_malloced_chunk&lt;/code&gt;&lt;/li&gt;&lt;li&gt;检查 tcache 对应的 bin，如果它还没有满，就把 small bin 链表中的元素挪到 tcache 当中&lt;/li&gt;&lt;li&gt;把 payload 地址通过 &lt;code&gt;chunk2mem&lt;/code&gt; 计算出来，返回给 malloc 调用者&lt;/li&gt;&lt;li&gt;调用 &lt;code&gt;alloc_perturb&lt;/code&gt; 往新分配的空间内写入垃圾数据（可选），避免泄露之前的数据&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;其实现过程和 fast bin 很类似，只不过把单向链表改成了双向，并且引入了哨兵结点，这个哨兵结点保存在 &lt;code&gt;malloc_state&lt;/code&gt; 结构的 bins 数组当中：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-28-1&#34;&gt;&lt;a id=&#34;__codelineno-28-1&#34; name=&#34;__codelineno-28-1&#34; href=&#34;#__codelineno-28-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define NSMALLBINS 64&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-2&#34;&gt;&lt;a id=&#34;__codelineno-28-2&#34; name=&#34;__codelineno-28-2&#34; href=&#34;#__codelineno-28-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* SMALLBIN_WIDTH equals to 16 on 64-bit */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-3&#34;&gt;&lt;a id=&#34;__codelineno-28-3&#34; name=&#34;__codelineno-28-3&#34; href=&#34;#__codelineno-28-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define SMALLBIN_WIDTH MALLOC_ALIGNMENT&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-4&#34;&gt;&lt;a id=&#34;__codelineno-28-4&#34; name=&#34;__codelineno-28-4&#34; href=&#34;#__codelineno-28-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* SMALLBIN_CORRECTION equals to 0 on 64-bit */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-5&#34;&gt;&lt;a id=&#34;__codelineno-28-5&#34; name=&#34;__codelineno-28-5&#34; href=&#34;#__codelineno-28-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define SMALLBIN_CORRECTION (MALLOC_ALIGNMENT &amp;gt; 2 * SIZE_SZ)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-6&#34;&gt;&lt;a id=&#34;__codelineno-28-6&#34; name=&#34;__codelineno-28-6&#34; href=&#34;#__codelineno-28-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-7&#34;&gt;&lt;a id=&#34;__codelineno-28-7&#34; name=&#34;__codelineno-28-7&#34; href=&#34;#__codelineno-28-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* MIN_LARGE_SIZE equals to 1024 on 64-bit */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-8&#34;&gt;&lt;a id=&#34;__codelineno-28-8&#34; name=&#34;__codelineno-28-8&#34; href=&#34;#__codelineno-28-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define MIN_LARGE_SIZE ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-9&#34;&gt;&lt;a id=&#34;__codelineno-28-9&#34; name=&#34;__codelineno-28-9&#34; href=&#34;#__codelineno-28-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-10&#34;&gt;&lt;a id=&#34;__codelineno-28-10&#34; name=&#34;__codelineno-28-10&#34; href=&#34;#__codelineno-28-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* equivalent to (sz &amp;lt; 1024) on 64-bit */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-11&#34;&gt;&lt;a id=&#34;__codelineno-28-11&#34; name=&#34;__codelineno-28-11&#34; href=&#34;#__codelineno-28-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define in_smallbin_range(sz) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-12&#34;&gt;&lt;a id=&#34;__codelineno-28-12&#34; name=&#34;__codelineno-28-12&#34; href=&#34;#__codelineno-28-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; ((unsigned long) (sz) &amp;lt; (unsigned long) MIN_LARGE_SIZE)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-13&#34;&gt;&lt;a id=&#34;__codelineno-28-13&#34; name=&#34;__codelineno-28-13&#34; href=&#34;#__codelineno-28-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-14&#34;&gt;&lt;a id=&#34;__codelineno-28-14&#34; name=&#34;__codelineno-28-14&#34; href=&#34;#__codelineno-28-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* equivalent to (sz &amp;gt;&amp;gt; 4) on 64-bit */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-15&#34;&gt;&lt;a id=&#34;__codelineno-28-15&#34; name=&#34;__codelineno-28-15&#34; href=&#34;#__codelineno-28-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define smallbin_index(sz) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-16&#34;&gt;&lt;a id=&#34;__codelineno-28-16&#34; name=&#34;__codelineno-28-16&#34; href=&#34;#__codelineno-28-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; ((SMALLBIN_WIDTH == 16 ? (((unsigned) (sz)) &amp;gt;&amp;gt; 4) : (((unsigned) (sz)) &amp;gt;&amp;gt; 3))\&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-17&#34;&gt;&lt;a id=&#34;__codelineno-28-17&#34; name=&#34;__codelineno-28-17&#34; href=&#34;#__codelineno-28-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; + SMALLBIN_CORRECTION)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-18&#34;&gt;&lt;a id=&#34;__codelineno-28-18&#34; name=&#34;__codelineno-28-18&#34; href=&#34;#__codelineno-28-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-19&#34;&gt;&lt;a id=&#34;__codelineno-28-19&#34; name=&#34;__codelineno-28-19&#34; href=&#34;#__codelineno-28-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunkptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-20&#34;&gt;&lt;a id=&#34;__codelineno-28-20&#34; name=&#34;__codelineno-28-20&#34; href=&#34;#__codelineno-28-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-21&#34;&gt;&lt;a id=&#34;__codelineno-28-21&#34; name=&#34;__codelineno-28-21&#34; href=&#34;#__codelineno-28-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* addressing -- note that bin_at(0) does not exist */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-22&#34;&gt;&lt;a id=&#34;__codelineno-28-22&#34; name=&#34;__codelineno-28-22&#34; href=&#34;#__codelineno-28-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define bin_at(m, i) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-23&#34;&gt;&lt;a id=&#34;__codelineno-28-23&#34; name=&#34;__codelineno-28-23&#34; href=&#34;#__codelineno-28-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; (mbinptr) (((char *) &amp;amp;((m)-&amp;gt;bins[((i) - 1) * 2])) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-24&#34;&gt;&lt;a id=&#34;__codelineno-28-24&#34; name=&#34;__codelineno-28-24&#34; href=&#34;#__codelineno-28-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; - offsetof (struct malloc_chunk, fd))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-25&#34;&gt;&lt;a id=&#34;__codelineno-28-25&#34; name=&#34;__codelineno-28-25&#34; href=&#34;#__codelineno-28-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-26&#34;&gt;&lt;a id=&#34;__codelineno-28-26&#34; name=&#34;__codelineno-28-26&#34; href=&#34;#__codelineno-28-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define NBINS 128&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-27&#34;&gt;&lt;a id=&#34;__codelineno-28-27&#34; name=&#34;__codelineno-28-27&#34; href=&#34;#__codelineno-28-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_state&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-28&#34;&gt;&lt;a id=&#34;__codelineno-28-28&#34; name=&#34;__codelineno-28-28&#34; href=&#34;#__codelineno-28-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-29&#34;&gt;&lt;a id=&#34;__codelineno-28-29&#34; name=&#34;__codelineno-28-29&#34; href=&#34;#__codelineno-28-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-30&#34;&gt;&lt;a id=&#34;__codelineno-28-30&#34; name=&#34;__codelineno-28-30&#34; href=&#34;#__codelineno-28-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Normal bins packed as described above */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-31&#34;&gt;&lt;a id=&#34;__codelineno-28-31&#34; name=&#34;__codelineno-28-31&#34; href=&#34;#__codelineno-28-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunkptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NBINS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-28-32&#34;&gt;&lt;a id=&#34;__codelineno-28-32&#34; name=&#34;__codelineno-28-32&#34; href=&#34;#__codelineno-28-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;乍一看会觉得很奇怪，这里 &lt;code&gt;NBINS * 2 - 2&lt;/code&gt; 是什么意思？&lt;code&gt;mchunkptr&lt;/code&gt; 是个指针类型，那它指向的数据存在哪？其实这里用了一个小的 trick：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;不去看 bins 元素的类型，只考虑它的元素的大小，每个元素大小是 &lt;code&gt;sizeof(size_t)&lt;/code&gt;，一共有 &lt;code&gt;NBINS * 2 - 2&lt;/code&gt; 个元素&lt;/li&gt;&lt;li&gt;而每个 bin 对应一个链表的哨兵结点，由于是双向链表，哨兵结点也没有数据，只需要保存前驱和后继两个指针，即每个 bin 只需要存两个指针的空间，也就是 &lt;code&gt;2 * sizeof(size_t)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;正好 &lt;code&gt;bins&lt;/code&gt; 数组给每个 bin 留出了 &lt;code&gt;2 * sizeof(size_t)&lt;/code&gt; 的空间（bin 0 除外，这个 bin 不存在），所以实际上这些哨兵结点的前驱和后继指针就保存在 &lt;code&gt;bins&lt;/code&gt; 数组里，按顺序保存，首先是 bin 1 的前驱，然后是 bin 1 的后继，接着是 bin 2 的前驱，依此类推&lt;/li&gt;&lt;li&gt;虽然空间对上了，但是为了方便使用，代码里用 &lt;code&gt;bin_at&lt;/code&gt; 宏来计算出一个 &lt;code&gt;malloc_chunk&lt;/code&gt; 结构体的指针，而已知 bins 数组只保存了 &lt;code&gt;fd&lt;/code&gt; 和 &lt;code&gt;bk&lt;/code&gt; 两个指针，并且 bin 的下标从 1 开始，所以 bin i 的 &lt;code&gt;fd&lt;/code&gt; 指针地址就是 &lt;code&gt;(char *) &amp;amp;((m)-&amp;gt;bins[((i) - 1) * 2])&lt;/code&gt;，再减去 &lt;code&gt;malloc_chunk&lt;/code&gt; 结构体中 &lt;code&gt;fd&lt;/code&gt; 成员的偏移，就得到了一个 &lt;code&gt;malloc_chunk&lt;/code&gt; 结构体的指针，当然了，这个结构体只有 &lt;code&gt;fd&lt;/code&gt; 和 &lt;code&gt;bk&lt;/code&gt; 两个字段是合法的，其他字段如果访问了，就会访问到其他 bin 那里去&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;抛开这些 trick，其实就等价于用一个数组保存了每个 bin 的 &lt;code&gt;fd&lt;/code&gt; 和 &lt;code&gt;bk&lt;/code&gt; 指针，至于为什么要强行转换成 &lt;code&gt;malloc_chunk&lt;/code&gt; 类型的指针，可能是为了方便代码的编写，不需要区分空闲块的结点和哨兵结点。&lt;/p&gt;&lt;p&gt;此外，small bin 的处理里还多了一次 &lt;code&gt;set_inuse_bit_at_offset (victim, nb)&lt;/code&gt;，它的定义如下：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-29-1&#34;&gt;&lt;a id=&#34;__codelineno-29-1&#34; name=&#34;__codelineno-29-1&#34; href=&#34;#__codelineno-29-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define set_inuse_bit_at_offset(p, s) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-29-2&#34;&gt;&lt;a id=&#34;__codelineno-29-2&#34; name=&#34;__codelineno-29-2&#34; href=&#34;#__codelineno-29-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; (((mchunkptr) (((char *) (p)) + (s)))-&amp;gt;mchunk_size |= PREV_INUSE)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;乍一看会觉得很奇怪，这个访问不是越界了吗？其实这个就是跨过当前的 chunk，访问相邻的下一个 chunk，在它的 &lt;code&gt;mchunk_size&lt;/code&gt; 字段上打标记，表示它的前一个 chunk 已经被占用。前面提到过，&lt;code&gt;mchunk_size&lt;/code&gt; 同时保存了 chunk 的大小和一些 flag，由于 chunk 的大小至少是 8 字节对齐的（32 位系统上），所以最低的 3 位就被拿来保存如下的 flag：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;PREV_INUSE(0x1)&lt;/code&gt;: 前一个 chunk 已经被分配&lt;/li&gt;&lt;li&gt;&lt;code&gt;IS_MAPPED(0x2)&lt;/code&gt;：当前 chunk 的内存来自于 mmap&lt;/li&gt;&lt;li&gt;&lt;code&gt;NON_MAIN_ARENA(0x4)&lt;/code&gt;：当前 chunk 来自于 main arena 以外的其他 arena&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;在这里，就是设置了 &lt;code&gt;PREV_INUSE&lt;/code&gt; flag，方便后续的相邻块的合并。&lt;/p&gt;&lt;p&gt;可以注意到，small bin 的分配范围是 &lt;code&gt;nb &amp;lt; MIN_LARGE_SIZE&lt;/code&gt;，因此在 64 位上，&lt;code&gt;malloc(1000)&lt;/code&gt; 或更小的分配会被 small bin 分配，而 &lt;code&gt;malloc(1001)&lt;/code&gt; 或更大的分配则不可以。&lt;/p&gt;&lt;h3 id=&#34;free_2&#34;&gt;free&lt;a class=&#34;headerlink&#34; href=&#34;#free_2&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在讲述 small bin 在 free 中的实现之前，先讨论 &lt;code&gt;_int_malloc&lt;/code&gt; 的后续逻辑，最后再回过头来看 free 的部分。&lt;/p&gt;&lt;h2 id=&#34;consolidate&#34;&gt;consolidate&lt;a class=&#34;headerlink&#34; href=&#34;#consolidate&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;当要分配的块经过 fast bin 和 small bin 两段逻辑都没能分配成功，并且要分配的块比较大的时候（&lt;code&gt;!in_small_range (nb)&lt;/code&gt;），会进行一次 &lt;code&gt;malloc_consolidate&lt;/code&gt; 调用，这个函数会尝试对 fast bin 中的空闲块进行合并，然后把新的块插入到 unsorted bin 当中。它的实现如下：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-30-1&#34;&gt;&lt;a id=&#34;__codelineno-30-1&#34; name=&#34;__codelineno-30-1&#34; href=&#34;#__codelineno-30-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;unsorted_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsorted_chunks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-2&#34;&gt;&lt;a id=&#34;__codelineno-30-2&#34; name=&#34;__codelineno-30-2&#34; href=&#34;#__codelineno-30-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;maxfb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fastbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NFASTBINS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-3&#34;&gt;&lt;a id=&#34;__codelineno-30-3&#34; name=&#34;__codelineno-30-3&#34; href=&#34;#__codelineno-30-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;fb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fastbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-4&#34;&gt;&lt;a id=&#34;__codelineno-30-4&#34; name=&#34;__codelineno-30-4&#34; href=&#34;#__codelineno-30-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-5&#34;&gt;&lt;a id=&#34;__codelineno-30-5&#34; name=&#34;__codelineno-30-5&#34; href=&#34;#__codelineno-30-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;atomic_exchange_acq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-6&#34;&gt;&lt;a id=&#34;__codelineno-30-6&#34; name=&#34;__codelineno-30-6&#34; href=&#34;#__codelineno-30-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-7&#34;&gt;&lt;a id=&#34;__codelineno-30-7&#34; name=&#34;__codelineno-30-7&#34; href=&#34;#__codelineno-30-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-8&#34;&gt;&lt;a id=&#34;__codelineno-30-8&#34; name=&#34;__codelineno-30-8&#34; href=&#34;#__codelineno-30-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* malloc check omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-9&#34;&gt;&lt;a id=&#34;__codelineno-30-9&#34; name=&#34;__codelineno-30-9&#34; href=&#34;#__codelineno-30-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-10&#34;&gt;&lt;a id=&#34;__codelineno-30-10&#34; name=&#34;__codelineno-30-10&#34; href=&#34;#__codelineno-30-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_inuse_chunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-11&#34;&gt;&lt;a id=&#34;__codelineno-30-11&#34; name=&#34;__codelineno-30-11&#34; href=&#34;#__codelineno-30-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-12&#34;&gt;&lt;a id=&#34;__codelineno-30-12&#34; name=&#34;__codelineno-30-12&#34; href=&#34;#__codelineno-30-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-13&#34;&gt;&lt;a id=&#34;__codelineno-30-13&#34; name=&#34;__codelineno-30-13&#34; href=&#34;#__codelineno-30-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Slightly streamlined version of consolidation code in free() */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-14&#34;&gt;&lt;a id=&#34;__codelineno-30-14&#34; name=&#34;__codelineno-30-14&#34; href=&#34;#__codelineno-30-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunksize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-15&#34;&gt;&lt;a id=&#34;__codelineno-30-15&#34; name=&#34;__codelineno-30-15&#34; href=&#34;#__codelineno-30-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextchunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk_at_offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-16&#34;&gt;&lt;a id=&#34;__codelineno-30-16&#34; name=&#34;__codelineno-30-16&#34; href=&#34;#__codelineno-30-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunksize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextchunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-17&#34;&gt;&lt;a id=&#34;__codelineno-30-17&#34; name=&#34;__codelineno-30-17&#34; href=&#34;#__codelineno-30-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-18&#34;&gt;&lt;a id=&#34;__codelineno-30-18&#34; name=&#34;__codelineno-30-18&#34; href=&#34;#__codelineno-30-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prev_inuse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-19&#34;&gt;&lt;a id=&#34;__codelineno-30-19&#34; name=&#34;__codelineno-30-19&#34; href=&#34;#__codelineno-30-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prevsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prev_size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-20&#34;&gt;&lt;a id=&#34;__codelineno-30-20&#34; name=&#34;__codelineno-30-20&#34; href=&#34;#__codelineno-30-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prevsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-21&#34;&gt;&lt;a id=&#34;__codelineno-30-21&#34; name=&#34;__codelineno-30-21&#34; href=&#34;#__codelineno-30-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk_at_offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prevsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-22&#34;&gt;&lt;a id=&#34;__codelineno-30-22&#34; name=&#34;__codelineno-30-22&#34; href=&#34;#__codelineno-30-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* malloc check omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-23&#34;&gt;&lt;a id=&#34;__codelineno-30-23&#34; name=&#34;__codelineno-30-23&#34; href=&#34;#__codelineno-30-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unlink_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-24&#34;&gt;&lt;a id=&#34;__codelineno-30-24&#34; name=&#34;__codelineno-30-24&#34; href=&#34;#__codelineno-30-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-25&#34;&gt;&lt;a id=&#34;__codelineno-30-25&#34; name=&#34;__codelineno-30-25&#34; href=&#34;#__codelineno-30-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-26&#34;&gt;&lt;a id=&#34;__codelineno-30-26&#34; name=&#34;__codelineno-30-26&#34; href=&#34;#__codelineno-30-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextchunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-27&#34;&gt;&lt;a id=&#34;__codelineno-30-27&#34; name=&#34;__codelineno-30-27&#34; href=&#34;#__codelineno-30-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextinuse&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inuse_bit_at_offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextchunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-28&#34;&gt;&lt;a id=&#34;__codelineno-30-28&#34; name=&#34;__codelineno-30-28&#34; href=&#34;#__codelineno-30-28&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-29&#34;&gt;&lt;a id=&#34;__codelineno-30-29&#34; name=&#34;__codelineno-30-29&#34; href=&#34;#__codelineno-30-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextinuse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-30&#34;&gt;&lt;a id=&#34;__codelineno-30-30&#34; name=&#34;__codelineno-30-30&#34; href=&#34;#__codelineno-30-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-31&#34;&gt;&lt;a id=&#34;__codelineno-30-31&#34; name=&#34;__codelineno-30-31&#34; href=&#34;#__codelineno-30-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unlink_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextchunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-32&#34;&gt;&lt;a id=&#34;__codelineno-30-32&#34; name=&#34;__codelineno-30-32&#34; href=&#34;#__codelineno-30-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-33&#34;&gt;&lt;a id=&#34;__codelineno-30-33&#34; name=&#34;__codelineno-30-33&#34; href=&#34;#__codelineno-30-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clear_inuse_bit_at_offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextchunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-34&#34;&gt;&lt;a id=&#34;__codelineno-30-34&#34; name=&#34;__codelineno-30-34&#34; href=&#34;#__codelineno-30-34&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-35&#34;&gt;&lt;a id=&#34;__codelineno-30-35&#34; name=&#34;__codelineno-30-35&#34; href=&#34;#__codelineno-30-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first_unsorted&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsorted_bin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-36&#34;&gt;&lt;a id=&#34;__codelineno-30-36&#34; name=&#34;__codelineno-30-36&#34; href=&#34;#__codelineno-30-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsorted_bin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-37&#34;&gt;&lt;a id=&#34;__codelineno-30-37&#34; name=&#34;__codelineno-30-37&#34; href=&#34;#__codelineno-30-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first_unsorted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-38&#34;&gt;&lt;a id=&#34;__codelineno-30-38&#34; name=&#34;__codelineno-30-38&#34; href=&#34;#__codelineno-30-38&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-39&#34;&gt;&lt;a id=&#34;__codelineno-30-39&#34; name=&#34;__codelineno-30-39&#34; href=&#34;#__codelineno-30-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in_smallbin_range&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-40&#34;&gt;&lt;a id=&#34;__codelineno-30-40&#34; name=&#34;__codelineno-30-40&#34; href=&#34;#__codelineno-30-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-41&#34;&gt;&lt;a id=&#34;__codelineno-30-41&#34; name=&#34;__codelineno-30-41&#34; href=&#34;#__codelineno-30-41&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-42&#34;&gt;&lt;a id=&#34;__codelineno-30-42&#34; name=&#34;__codelineno-30-42&#34; href=&#34;#__codelineno-30-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-43&#34;&gt;&lt;a id=&#34;__codelineno-30-43&#34; name=&#34;__codelineno-30-43&#34; href=&#34;#__codelineno-30-43&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-44&#34;&gt;&lt;a id=&#34;__codelineno-30-44&#34; name=&#34;__codelineno-30-44&#34; href=&#34;#__codelineno-30-44&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PREV_INUSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-45&#34;&gt;&lt;a id=&#34;__codelineno-30-45&#34; name=&#34;__codelineno-30-45&#34; href=&#34;#__codelineno-30-45&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsorted_bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-46&#34;&gt;&lt;a id=&#34;__codelineno-30-46&#34; name=&#34;__codelineno-30-46&#34; href=&#34;#__codelineno-30-46&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first_unsorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-47&#34;&gt;&lt;a id=&#34;__codelineno-30-47&#34; name=&#34;__codelineno-30-47&#34; href=&#34;#__codelineno-30-47&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_foot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-48&#34;&gt;&lt;a id=&#34;__codelineno-30-48&#34; name=&#34;__codelineno-30-48&#34; href=&#34;#__codelineno-30-48&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-49&#34;&gt;&lt;a id=&#34;__codelineno-30-49&#34; name=&#34;__codelineno-30-49&#34; href=&#34;#__codelineno-30-49&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-50&#34;&gt;&lt;a id=&#34;__codelineno-30-50&#34; name=&#34;__codelineno-30-50&#34; href=&#34;#__codelineno-30-50&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-51&#34;&gt;&lt;a id=&#34;__codelineno-30-51&#34; name=&#34;__codelineno-30-51&#34; href=&#34;#__codelineno-30-51&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-52&#34;&gt;&lt;a id=&#34;__codelineno-30-52&#34; name=&#34;__codelineno-30-52&#34; href=&#34;#__codelineno-30-52&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PREV_INUSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-53&#34;&gt;&lt;a id=&#34;__codelineno-30-53&#34; name=&#34;__codelineno-30-53&#34; href=&#34;#__codelineno-30-53&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-54&#34;&gt;&lt;a id=&#34;__codelineno-30-54&#34; name=&#34;__codelineno-30-54&#34; href=&#34;#__codelineno-30-54&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-55&#34;&gt;&lt;a id=&#34;__codelineno-30-55&#34; name=&#34;__codelineno-30-55&#34; href=&#34;#__codelineno-30-55&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-56&#34;&gt;&lt;a id=&#34;__codelineno-30-56&#34; name=&#34;__codelineno-30-56&#34; href=&#34;#__codelineno-30-56&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-57&#34;&gt;&lt;a id=&#34;__codelineno-30-57&#34; name=&#34;__codelineno-30-57&#34; href=&#34;#__codelineno-30-57&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-58&#34;&gt;&lt;a id=&#34;__codelineno-30-58&#34; name=&#34;__codelineno-30-58&#34; href=&#34;#__codelineno-30-58&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-30-59&#34;&gt;&lt;a id=&#34;__codelineno-30-59&#34; name=&#34;__codelineno-30-59&#34; href=&#34;#__codelineno-30-59&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxfb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;第一层循环，遍历每个非空的 fast bin，进行下列操作&lt;/li&gt;&lt;li&gt;第二层循环，每个非空的 fast bin 有一个单向链表，沿着链表进行迭代，遍历链表上的每个空闲块，进行下列操作&lt;/li&gt;&lt;li&gt;循环内部，检查当前空闲块能否和前后的空闲块合并&lt;/li&gt;&lt;li&gt;首先检查在它前面（地址更低的）相邻的块是否空闲：如果 &lt;code&gt;PREV_INUSE&lt;/code&gt; 没有被设置，可以通过 &lt;code&gt;mchunk_prev_size&lt;/code&gt; 找到前面相邻的块的开头，然后把两个块合并起来；如果前面相邻的块已经在某个双向链表当中（例如 small bin），把它从双向链表中删除：&lt;code&gt;unlink_chunk (av, p);&lt;/code&gt;；为什么前面要用双向链表，也是为了在这里可以直接从链表中间删除一个结点&lt;/li&gt;&lt;li&gt;接着检查在它后面（地址更高的）相邻的块是否空闲：根据自己的 size，计算出下一个块的地址，得到下一个块的大小，再读取下一个块的下一个块，根据它的 &lt;code&gt;PREV_INUSE&lt;/code&gt;，判断下一个块是否空闲；如果空闲，那就把下一个块也合并进来，同理也要把它从双向链表中删除：&lt;code&gt;unlink_chunk (av, nextchunk);&lt;/code&gt;；代码中还有对 top chunk 的特殊处理，这里先略过&lt;/li&gt;&lt;li&gt;合并完成以后，把当前的空闲块放到 unsorted bin 当中，也是一个简单的双向链表向链表头的插入算法：&lt;code&gt;first_unsorted = unsorted_bin-&amp;gt;fd; unsorted_bin-&amp;gt;fd = p; first_unsorted-&amp;gt;bk = p; p-&amp;gt;bk = unsorted_bin; p-&amp;gt;fd = first_unsorted;&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;code&gt;unlink_chunk&lt;/code&gt; 的实现就是经典的双向链表删除结点的算法：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-31-1&#34;&gt;&lt;a id=&#34;__codelineno-31-1&#34; name=&#34;__codelineno-31-1&#34; href=&#34;#__codelineno-31-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* Take a chunk off a bin list. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-2&#34;&gt;&lt;a id=&#34;__codelineno-31-2&#34; name=&#34;__codelineno-31-2&#34; href=&#34;#__codelineno-31-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-3&#34;&gt;&lt;a id=&#34;__codelineno-31-3&#34; name=&#34;__codelineno-31-3&#34; href=&#34;#__codelineno-31-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;unlink_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mstate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunkptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-4&#34;&gt;&lt;a id=&#34;__codelineno-31-4&#34; name=&#34;__codelineno-31-4&#34; href=&#34;#__codelineno-31-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-5&#34;&gt;&lt;a id=&#34;__codelineno-31-5&#34; name=&#34;__codelineno-31-5&#34; href=&#34;#__codelineno-31-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* malloc check omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-6&#34;&gt;&lt;a id=&#34;__codelineno-31-6&#34; name=&#34;__codelineno-31-6&#34; href=&#34;#__codelineno-31-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-7&#34;&gt;&lt;a id=&#34;__codelineno-31-7&#34; name=&#34;__codelineno-31-7&#34; href=&#34;#__codelineno-31-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunkptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-8&#34;&gt;&lt;a id=&#34;__codelineno-31-8&#34; name=&#34;__codelineno-31-8&#34; href=&#34;#__codelineno-31-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunkptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-9&#34;&gt;&lt;a id=&#34;__codelineno-31-9&#34; name=&#34;__codelineno-31-9&#34; href=&#34;#__codelineno-31-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-10&#34;&gt;&lt;a id=&#34;__codelineno-31-10&#34; name=&#34;__codelineno-31-10&#34; href=&#34;#__codelineno-31-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* malloc check omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-11&#34;&gt;&lt;a id=&#34;__codelineno-31-11&#34; name=&#34;__codelineno-31-11&#34; href=&#34;#__codelineno-31-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-12&#34;&gt;&lt;a id=&#34;__codelineno-31-12&#34; name=&#34;__codelineno-31-12&#34; href=&#34;#__codelineno-31-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-13&#34;&gt;&lt;a id=&#34;__codelineno-31-13&#34; name=&#34;__codelineno-31-13&#34; href=&#34;#__codelineno-31-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-14&#34;&gt;&lt;a id=&#34;__codelineno-31-14&#34; name=&#34;__codelineno-31-14&#34; href=&#34;#__codelineno-31-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in_smallbin_range&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunksize_nomask&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-15&#34;&gt;&lt;a id=&#34;__codelineno-31-15&#34; name=&#34;__codelineno-31-15&#34; href=&#34;#__codelineno-31-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-16&#34;&gt;&lt;a id=&#34;__codelineno-31-16&#34; name=&#34;__codelineno-31-16&#34; href=&#34;#__codelineno-31-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* malloc check omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-17&#34;&gt;&lt;a id=&#34;__codelineno-31-17&#34; name=&#34;__codelineno-31-17&#34; href=&#34;#__codelineno-31-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-18&#34;&gt;&lt;a id=&#34;__codelineno-31-18&#34; name=&#34;__codelineno-31-18&#34; href=&#34;#__codelineno-31-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-19&#34;&gt;&lt;a id=&#34;__codelineno-31-19&#34; name=&#34;__codelineno-31-19&#34; href=&#34;#__codelineno-31-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-20&#34;&gt;&lt;a id=&#34;__codelineno-31-20&#34; name=&#34;__codelineno-31-20&#34; href=&#34;#__codelineno-31-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-21&#34;&gt;&lt;a id=&#34;__codelineno-31-21&#34; name=&#34;__codelineno-31-21&#34; href=&#34;#__codelineno-31-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-22&#34;&gt;&lt;a id=&#34;__codelineno-31-22&#34; name=&#34;__codelineno-31-22&#34; href=&#34;#__codelineno-31-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-23&#34;&gt;&lt;a id=&#34;__codelineno-31-23&#34; name=&#34;__codelineno-31-23&#34; href=&#34;#__codelineno-31-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-24&#34;&gt;&lt;a id=&#34;__codelineno-31-24&#34; name=&#34;__codelineno-31-24&#34; href=&#34;#__codelineno-31-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-25&#34;&gt;&lt;a id=&#34;__codelineno-31-25&#34; name=&#34;__codelineno-31-25&#34; href=&#34;#__codelineno-31-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-26&#34;&gt;&lt;a id=&#34;__codelineno-31-26&#34; name=&#34;__codelineno-31-26&#34; href=&#34;#__codelineno-31-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-27&#34;&gt;&lt;a id=&#34;__codelineno-31-27&#34; name=&#34;__codelineno-31-27&#34; href=&#34;#__codelineno-31-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-28&#34;&gt;&lt;a id=&#34;__codelineno-31-28&#34; name=&#34;__codelineno-31-28&#34; href=&#34;#__codelineno-31-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-29&#34;&gt;&lt;a id=&#34;__codelineno-31-29&#34; name=&#34;__codelineno-31-29&#34; href=&#34;#__codelineno-31-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-30&#34;&gt;&lt;a id=&#34;__codelineno-31-30&#34; name=&#34;__codelineno-31-30&#34; href=&#34;#__codelineno-31-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-31&#34;&gt;&lt;a id=&#34;__codelineno-31-31&#34; name=&#34;__codelineno-31-31&#34; href=&#34;#__codelineno-31-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-32&#34;&gt;&lt;a id=&#34;__codelineno-31-32&#34; name=&#34;__codelineno-31-32&#34; href=&#34;#__codelineno-31-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-33&#34;&gt;&lt;a id=&#34;__codelineno-31-33&#34; name=&#34;__codelineno-31-33&#34; href=&#34;#__codelineno-31-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-34&#34;&gt;&lt;a id=&#34;__codelineno-31-34&#34; name=&#34;__codelineno-31-34&#34; href=&#34;#__codelineno-31-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-35&#34;&gt;&lt;a id=&#34;__codelineno-31-35&#34; name=&#34;__codelineno-31-35&#34; href=&#34;#__codelineno-31-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-31-36&#34;&gt;&lt;a id=&#34;__codelineno-31-36&#34; name=&#34;__codelineno-31-36&#34; href=&#34;#__codelineno-31-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;fd_nextsize&lt;/code&gt; 和 &lt;code&gt;bk_nextsize&lt;/code&gt; 字段适用于 large bin，后面会讨论这个双向链表的细节。&lt;/p&gt;&lt;p&gt;因此 unsorted bin 保存了一些从 fast bin 合并而来的一些块，由于 unsorted bin 只有一个，所以它里面会保存各种大小的空闲块。实际上，unsorted bin 占用的就是 &lt;code&gt;malloc_state&lt;/code&gt; 结构中的 bin 1，因为我们已经知道，块的大小至少是 32，而大小为 32 的块，对应的 small bin index 是 2，说明 1 没有被用到，其实就是留给 unsorted bin 用的。在 64 位系统下，&lt;code&gt;malloc_state&lt;/code&gt; 的 127 个 bin 分配如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;bin 1 是 unsorted bin&lt;/li&gt;&lt;li&gt;bin 2 到 bin 63 是 small bin&lt;/li&gt;&lt;li&gt;bin 64 到 bin 126 是 large bin&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;bin 127 没有用到。&lt;/p&gt;&lt;p&gt;经过这次合并之后，接下来 &lt;code&gt;_int_malloc&lt;/code&gt; 尝试从 unsorted bin 和 large bin 中分配空闲块。&lt;/p&gt;&lt;h2 id=&#34;再次回到-__libc_malloc&#34;&gt;再次回到 &lt;code&gt;__libc_malloc&lt;/code&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#再次回到-__libc_malloc&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;接下来，&lt;code&gt;_int_malloc&lt;/code&gt; 有一大段代码来进行后续的内存分配，大概步骤包括：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;把 unsorted bin 中的空闲块的处理，放到 small bin 或者 large bin 中，同时如果有合适的块，就分配给 malloc 的调用者&lt;/li&gt;&lt;li&gt;如果还是没有找到合适大小的块，就在 large bin 里寻找空闲块来分配；如果找不到合适大小的块，进行 consolidate，尝试更多的合并，得到更大的块；重复这个过程多次&lt;/li&gt;&lt;li&gt;如果还是找不到合适的块，就从堆顶分配新的块，如果堆已经满了，还需要去扩大堆，或者直接用 mmap 分配一片内存&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;现在分步骤观察这个过程，首先观察 unsorted bin 的处理。&lt;/p&gt;&lt;h2 id=&#34;unsorted-bin&#34;&gt;unsorted bin&lt;a class=&#34;headerlink&#34; href=&#34;#unsorted-bin&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;首先是 unsorted bin 的空闲块的处理：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-32-1&#34;&gt;&lt;a id=&#34;__codelineno-32-1&#34; name=&#34;__codelineno-32-1&#34; href=&#34;#__codelineno-32-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iters&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-2&#34;&gt;&lt;a id=&#34;__codelineno-32-2&#34; name=&#34;__codelineno-32-2&#34; href=&#34;#__codelineno-32-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsorted_chunks&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsorted_chunks&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-3&#34;&gt;&lt;a id=&#34;__codelineno-32-3&#34; name=&#34;__codelineno-32-3&#34; href=&#34;#__codelineno-32-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-4&#34;&gt;&lt;a id=&#34;__codelineno-32-4&#34; name=&#34;__codelineno-32-4&#34; href=&#34;#__codelineno-32-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-5&#34;&gt;&lt;a id=&#34;__codelineno-32-5&#34; name=&#34;__codelineno-32-5&#34; href=&#34;#__codelineno-32-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunksize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-6&#34;&gt;&lt;a id=&#34;__codelineno-32-6&#34; name=&#34;__codelineno-32-6&#34; href=&#34;#__codelineno-32-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunkptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk_at_offset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-7&#34;&gt;&lt;a id=&#34;__codelineno-32-7&#34; name=&#34;__codelineno-32-7&#34; href=&#34;#__codelineno-32-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-8&#34;&gt;&lt;a id=&#34;__codelineno-32-8&#34; name=&#34;__codelineno-32-8&#34; href=&#34;#__codelineno-32-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* malloc checks omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-9&#34;&gt;&lt;a id=&#34;__codelineno-32-9&#34; name=&#34;__codelineno-32-9&#34; href=&#34;#__codelineno-32-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-10&#34;&gt;&lt;a id=&#34;__codelineno-32-10&#34; name=&#34;__codelineno-32-10&#34; href=&#34;#__codelineno-32-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-11&#34;&gt;&lt;a id=&#34;__codelineno-32-11&#34; name=&#34;__codelineno-32-11&#34; href=&#34;#__codelineno-32-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; If a small request, try to use last remainder if it is the&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-12&#34;&gt;&lt;a id=&#34;__codelineno-32-12&#34; name=&#34;__codelineno-32-12&#34; href=&#34;#__codelineno-32-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; only chunk in unsorted bin. This helps promote locality for&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-13&#34;&gt;&lt;a id=&#34;__codelineno-32-13&#34; name=&#34;__codelineno-32-13&#34; href=&#34;#__codelineno-32-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; runs of consecutive small requests. This is the only&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-14&#34;&gt;&lt;a id=&#34;__codelineno-32-14&#34; name=&#34;__codelineno-32-14&#34; href=&#34;#__codelineno-32-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; exception to best-fit, and applies only when there is&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-15&#34;&gt;&lt;a id=&#34;__codelineno-32-15&#34; name=&#34;__codelineno-32-15&#34; href=&#34;#__codelineno-32-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; no exact fit for a small chunk.&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-16&#34;&gt;&lt;a id=&#34;__codelineno-32-16&#34; name=&#34;__codelineno-32-16&#34; href=&#34;#__codelineno-32-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-17&#34;&gt;&lt;a id=&#34;__codelineno-32-17&#34; name=&#34;__codelineno-32-17&#34; href=&#34;#__codelineno-32-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-18&#34;&gt;&lt;a id=&#34;__codelineno-32-18&#34; name=&#34;__codelineno-32-18&#34; href=&#34;#__codelineno-32-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in_smallbin_range&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-19&#34;&gt;&lt;a id=&#34;__codelineno-32-19&#34; name=&#34;__codelineno-32-19&#34; href=&#34;#__codelineno-32-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsorted_chunks&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-20&#34;&gt;&lt;a id=&#34;__codelineno-32-20&#34; name=&#34;__codelineno-32-20&#34; href=&#34;#__codelineno-32-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_remainder&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-21&#34;&gt;&lt;a id=&#34;__codelineno-32-21&#34; name=&#34;__codelineno-32-21&#34; href=&#34;#__codelineno-32-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MINSIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-22&#34;&gt;&lt;a id=&#34;__codelineno-32-22&#34; name=&#34;__codelineno-32-22&#34; href=&#34;#__codelineno-32-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-23&#34;&gt;&lt;a id=&#34;__codelineno-32-23&#34; name=&#34;__codelineno-32-23&#34; href=&#34;#__codelineno-32-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* split and reattach remainder */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-24&#34;&gt;&lt;a id=&#34;__codelineno-32-24&#34; name=&#34;__codelineno-32-24&#34; href=&#34;#__codelineno-32-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder_size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-25&#34;&gt;&lt;a id=&#34;__codelineno-32-25&#34; name=&#34;__codelineno-32-25&#34; href=&#34;#__codelineno-32-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk_at_offset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-26&#34;&gt;&lt;a id=&#34;__codelineno-32-26&#34; name=&#34;__codelineno-32-26&#34; href=&#34;#__codelineno-32-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsorted_chunks&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsorted_chunks&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-27&#34;&gt;&lt;a id=&#34;__codelineno-32-27&#34; name=&#34;__codelineno-32-27&#34; href=&#34;#__codelineno-32-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_remainder&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-28&#34;&gt;&lt;a id=&#34;__codelineno-32-28&#34; name=&#34;__codelineno-32-28&#34; href=&#34;#__codelineno-32-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsorted_chunks&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-29&#34;&gt;&lt;a id=&#34;__codelineno-32-29&#34; name=&#34;__codelineno-32-29&#34; href=&#34;#__codelineno-32-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in_smallbin_range&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-30&#34;&gt;&lt;a id=&#34;__codelineno-32-30&#34; name=&#34;__codelineno-32-30&#34; href=&#34;#__codelineno-32-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-31&#34;&gt;&lt;a id=&#34;__codelineno-32-31&#34; name=&#34;__codelineno-32-31&#34; href=&#34;#__codelineno-32-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-32&#34;&gt;&lt;a id=&#34;__codelineno-32-32&#34; name=&#34;__codelineno-32-32&#34; href=&#34;#__codelineno-32-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-33&#34;&gt;&lt;a id=&#34;__codelineno-32-33&#34; name=&#34;__codelineno-32-33&#34; href=&#34;#__codelineno-32-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-34&#34;&gt;&lt;a id=&#34;__codelineno-32-34&#34; name=&#34;__codelineno-32-34&#34; href=&#34;#__codelineno-32-34&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-35&#34;&gt;&lt;a id=&#34;__codelineno-32-35&#34; name=&#34;__codelineno-32-35&#34; href=&#34;#__codelineno-32-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_head&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PREV_INUSE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-36&#34;&gt;&lt;a id=&#34;__codelineno-32-36&#34; name=&#34;__codelineno-32-36&#34; href=&#34;#__codelineno-32-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main_arena&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NON_MAIN_ARENA&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-37&#34;&gt;&lt;a id=&#34;__codelineno-32-37&#34; name=&#34;__codelineno-32-37&#34; href=&#34;#__codelineno-32-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_head&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder_size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PREV_INUSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-38&#34;&gt;&lt;a id=&#34;__codelineno-32-38&#34; name=&#34;__codelineno-32-38&#34; href=&#34;#__codelineno-32-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_foot&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-39&#34;&gt;&lt;a id=&#34;__codelineno-32-39&#34; name=&#34;__codelineno-32-39&#34; href=&#34;#__codelineno-32-39&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-40&#34;&gt;&lt;a id=&#34;__codelineno-32-40&#34; name=&#34;__codelineno-32-40&#34; href=&#34;#__codelineno-32-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_malloced_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-41&#34;&gt;&lt;a id=&#34;__codelineno-32-41&#34; name=&#34;__codelineno-32-41&#34; href=&#34;#__codelineno-32-41&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk2mem&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-42&#34;&gt;&lt;a id=&#34;__codelineno-32-42&#34; name=&#34;__codelineno-32-42&#34; href=&#34;#__codelineno-32-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alloc_perturb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-43&#34;&gt;&lt;a id=&#34;__codelineno-32-43&#34; name=&#34;__codelineno-32-43&#34; href=&#34;#__codelineno-32-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-44&#34;&gt;&lt;a id=&#34;__codelineno-32-44&#34; name=&#34;__codelineno-32-44&#34; href=&#34;#__codelineno-32-44&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-45&#34;&gt;&lt;a id=&#34;__codelineno-32-45&#34; name=&#34;__codelineno-32-45&#34; href=&#34;#__codelineno-32-45&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-46&#34;&gt;&lt;a id=&#34;__codelineno-32-46&#34; name=&#34;__codelineno-32-46&#34; href=&#34;#__codelineno-32-46&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* remove from unsorted list */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-47&#34;&gt;&lt;a id=&#34;__codelineno-32-47&#34; name=&#34;__codelineno-32-47&#34; href=&#34;#__codelineno-32-47&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* malloc checks omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-48&#34;&gt;&lt;a id=&#34;__codelineno-32-48&#34; name=&#34;__codelineno-32-48&#34; href=&#34;#__codelineno-32-48&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsorted_chunks&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-49&#34;&gt;&lt;a id=&#34;__codelineno-32-49&#34; name=&#34;__codelineno-32-49&#34; href=&#34;#__codelineno-32-49&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsorted_chunks&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-50&#34;&gt;&lt;a id=&#34;__codelineno-32-50&#34; name=&#34;__codelineno-32-50&#34; href=&#34;#__codelineno-32-50&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-51&#34;&gt;&lt;a id=&#34;__codelineno-32-51&#34; name=&#34;__codelineno-32-51&#34; href=&#34;#__codelineno-32-51&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Take now instead of binning if exact fit */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-52&#34;&gt;&lt;a id=&#34;__codelineno-32-52&#34; name=&#34;__codelineno-32-52&#34; href=&#34;#__codelineno-32-52&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-53&#34;&gt;&lt;a id=&#34;__codelineno-32-53&#34; name=&#34;__codelineno-32-53&#34; href=&#34;#__codelineno-32-53&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-54&#34;&gt;&lt;a id=&#34;__codelineno-32-54&#34; name=&#34;__codelineno-32-54&#34; href=&#34;#__codelineno-32-54&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-55&#34;&gt;&lt;a id=&#34;__codelineno-32-55&#34; name=&#34;__codelineno-32-55&#34; href=&#34;#__codelineno-32-55&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_inuse_bit_at_offset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-56&#34;&gt;&lt;a id=&#34;__codelineno-32-56&#34; name=&#34;__codelineno-32-56&#34; href=&#34;#__codelineno-32-56&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main_arena&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-57&#34;&gt;&lt;a id=&#34;__codelineno-32-57&#34; name=&#34;__codelineno-32-57&#34; href=&#34;#__codelineno-32-57&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_non_main_arena&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-58&#34;&gt;&lt;a id=&#34;__codelineno-32-58&#34; name=&#34;__codelineno-32-58&#34; href=&#34;#__codelineno-32-58&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Fill cache first, return to user only if cache fills.&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-59&#34;&gt;&lt;a id=&#34;__codelineno-32-59&#34; name=&#34;__codelineno-32-59&#34; href=&#34;#__codelineno-32-59&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; We may return one of these chunks later. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-60&#34;&gt;&lt;a id=&#34;__codelineno-32-60&#34; name=&#34;__codelineno-32-60&#34; href=&#34;#__codelineno-32-60&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_nb&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-61&#34;&gt;&lt;a id=&#34;__codelineno-32-61&#34; name=&#34;__codelineno-32-61&#34; href=&#34;#__codelineno-32-61&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-62&#34;&gt;&lt;a id=&#34;__codelineno-32-62&#34; name=&#34;__codelineno-32-62&#34; href=&#34;#__codelineno-32-62&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-63&#34;&gt;&lt;a id=&#34;__codelineno-32-63&#34; name=&#34;__codelineno-32-63&#34; href=&#34;#__codelineno-32-63&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_put&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-64&#34;&gt;&lt;a id=&#34;__codelineno-32-64&#34; name=&#34;__codelineno-32-64&#34; href=&#34;#__codelineno-32-64&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;return_cached&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-65&#34;&gt;&lt;a id=&#34;__codelineno-32-65&#34; name=&#34;__codelineno-32-65&#34; href=&#34;#__codelineno-32-65&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-66&#34;&gt;&lt;a id=&#34;__codelineno-32-66&#34; name=&#34;__codelineno-32-66&#34; href=&#34;#__codelineno-32-66&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-67&#34;&gt;&lt;a id=&#34;__codelineno-32-67&#34; name=&#34;__codelineno-32-67&#34; href=&#34;#__codelineno-32-67&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-68&#34;&gt;&lt;a id=&#34;__codelineno-32-68&#34; name=&#34;__codelineno-32-68&#34; href=&#34;#__codelineno-32-68&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-69&#34;&gt;&lt;a id=&#34;__codelineno-32-69&#34; name=&#34;__codelineno-32-69&#34; href=&#34;#__codelineno-32-69&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_malloced_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-70&#34;&gt;&lt;a id=&#34;__codelineno-32-70&#34; name=&#34;__codelineno-32-70&#34; href=&#34;#__codelineno-32-70&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk2mem&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-71&#34;&gt;&lt;a id=&#34;__codelineno-32-71&#34; name=&#34;__codelineno-32-71&#34; href=&#34;#__codelineno-32-71&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alloc_perturb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-72&#34;&gt;&lt;a id=&#34;__codelineno-32-72&#34; name=&#34;__codelineno-32-72&#34; href=&#34;#__codelineno-32-72&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-73&#34;&gt;&lt;a id=&#34;__codelineno-32-73&#34; name=&#34;__codelineno-32-73&#34; href=&#34;#__codelineno-32-73&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-74&#34;&gt;&lt;a id=&#34;__codelineno-32-74&#34; name=&#34;__codelineno-32-74&#34; href=&#34;#__codelineno-32-74&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-75&#34;&gt;&lt;a id=&#34;__codelineno-32-75&#34; name=&#34;__codelineno-32-75&#34; href=&#34;#__codelineno-32-75&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-76&#34;&gt;&lt;a id=&#34;__codelineno-32-76&#34; name=&#34;__codelineno-32-76&#34; href=&#34;#__codelineno-32-76&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* place chunk in bin */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-77&#34;&gt;&lt;a id=&#34;__codelineno-32-77&#34; name=&#34;__codelineno-32-77&#34; href=&#34;#__codelineno-32-77&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-78&#34;&gt;&lt;a id=&#34;__codelineno-32-78&#34; name=&#34;__codelineno-32-78&#34; href=&#34;#__codelineno-32-78&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in_smallbin_range&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-79&#34;&gt;&lt;a id=&#34;__codelineno-32-79&#34; name=&#34;__codelineno-32-79&#34; href=&#34;#__codelineno-32-79&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-80&#34;&gt;&lt;a id=&#34;__codelineno-32-80&#34; name=&#34;__codelineno-32-80&#34; href=&#34;#__codelineno-32-80&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim_index&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;smallbin_index&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-81&#34;&gt;&lt;a id=&#34;__codelineno-32-81&#34; name=&#34;__codelineno-32-81&#34; href=&#34;#__codelineno-32-81&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin_at&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-82&#34;&gt;&lt;a id=&#34;__codelineno-32-82&#34; name=&#34;__codelineno-32-82&#34; href=&#34;#__codelineno-32-82&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-83&#34;&gt;&lt;a id=&#34;__codelineno-32-83&#34; name=&#34;__codelineno-32-83&#34; href=&#34;#__codelineno-32-83&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-84&#34;&gt;&lt;a id=&#34;__codelineno-32-84&#34; name=&#34;__codelineno-32-84&#34; href=&#34;#__codelineno-32-84&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-85&#34;&gt;&lt;a id=&#34;__codelineno-32-85&#34; name=&#34;__codelineno-32-85&#34; href=&#34;#__codelineno-32-85&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-86&#34;&gt;&lt;a id=&#34;__codelineno-32-86&#34; name=&#34;__codelineno-32-86&#34; href=&#34;#__codelineno-32-86&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim_index&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;largebin_index&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-87&#34;&gt;&lt;a id=&#34;__codelineno-32-87&#34; name=&#34;__codelineno-32-87&#34; href=&#34;#__codelineno-32-87&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin_at&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-88&#34;&gt;&lt;a id=&#34;__codelineno-32-88&#34; name=&#34;__codelineno-32-88&#34; href=&#34;#__codelineno-32-88&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-89&#34;&gt;&lt;a id=&#34;__codelineno-32-89&#34; name=&#34;__codelineno-32-89&#34; href=&#34;#__codelineno-32-89&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-90&#34;&gt;&lt;a id=&#34;__codelineno-32-90&#34; name=&#34;__codelineno-32-90&#34; href=&#34;#__codelineno-32-90&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* maintain large bins in sorted order */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-91&#34;&gt;&lt;a id=&#34;__codelineno-32-91&#34; name=&#34;__codelineno-32-91&#34; href=&#34;#__codelineno-32-91&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-92&#34;&gt;&lt;a id=&#34;__codelineno-32-92&#34; name=&#34;__codelineno-32-92&#34; href=&#34;#__codelineno-32-92&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-93&#34;&gt;&lt;a id=&#34;__codelineno-32-93&#34; name=&#34;__codelineno-32-93&#34; href=&#34;#__codelineno-32-93&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Or with inuse bit to speed comparisons */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-94&#34;&gt;&lt;a id=&#34;__codelineno-32-94&#34; name=&#34;__codelineno-32-94&#34; href=&#34;#__codelineno-32-94&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PREV_INUSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-95&#34;&gt;&lt;a id=&#34;__codelineno-32-95&#34; name=&#34;__codelineno-32-95&#34; href=&#34;#__codelineno-32-95&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* if smaller than smallest, bypass loop below */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-96&#34;&gt;&lt;a id=&#34;__codelineno-32-96&#34; name=&#34;__codelineno-32-96&#34; href=&#34;#__codelineno-32-96&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk_main_arena&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-97&#34;&gt;&lt;a id=&#34;__codelineno-32-97&#34; name=&#34;__codelineno-32-97&#34; href=&#34;#__codelineno-32-97&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-98&#34;&gt;&lt;a id=&#34;__codelineno-32-98&#34; name=&#34;__codelineno-32-98&#34; href=&#34;#__codelineno-32-98&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunksize_nomask&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-99&#34;&gt;&lt;a id=&#34;__codelineno-32-99&#34; name=&#34;__codelineno-32-99&#34; href=&#34;#__codelineno-32-99&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-100&#34;&gt;&lt;a id=&#34;__codelineno-32-100&#34; name=&#34;__codelineno-32-100&#34; href=&#34;#__codelineno-32-100&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-101&#34;&gt;&lt;a id=&#34;__codelineno-32-101&#34; name=&#34;__codelineno-32-101&#34; href=&#34;#__codelineno-32-101&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-102&#34;&gt;&lt;a id=&#34;__codelineno-32-102&#34; name=&#34;__codelineno-32-102&#34; href=&#34;#__codelineno-32-102&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-103&#34;&gt;&lt;a id=&#34;__codelineno-32-103&#34; name=&#34;__codelineno-32-103&#34; href=&#34;#__codelineno-32-103&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-104&#34;&gt;&lt;a id=&#34;__codelineno-32-104&#34; name=&#34;__codelineno-32-104&#34; href=&#34;#__codelineno-32-104&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-105&#34;&gt;&lt;a id=&#34;__codelineno-32-105&#34; name=&#34;__codelineno-32-105&#34; href=&#34;#__codelineno-32-105&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-106&#34;&gt;&lt;a id=&#34;__codelineno-32-106&#34; name=&#34;__codelineno-32-106&#34; href=&#34;#__codelineno-32-106&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-107&#34;&gt;&lt;a id=&#34;__codelineno-32-107&#34; name=&#34;__codelineno-32-107&#34; href=&#34;#__codelineno-32-107&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-108&#34;&gt;&lt;a id=&#34;__codelineno-32-108&#34; name=&#34;__codelineno-32-108&#34; href=&#34;#__codelineno-32-108&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-109&#34;&gt;&lt;a id=&#34;__codelineno-32-109&#34; name=&#34;__codelineno-32-109&#34; href=&#34;#__codelineno-32-109&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk_main_arena&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-110&#34;&gt;&lt;a id=&#34;__codelineno-32-110&#34; name=&#34;__codelineno-32-110&#34; href=&#34;#__codelineno-32-110&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunksize_nomask&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-111&#34;&gt;&lt;a id=&#34;__codelineno-32-111&#34; name=&#34;__codelineno-32-111&#34; href=&#34;#__codelineno-32-111&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-112&#34;&gt;&lt;a id=&#34;__codelineno-32-112&#34; name=&#34;__codelineno-32-112&#34; href=&#34;#__codelineno-32-112&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-113&#34;&gt;&lt;a id=&#34;__codelineno-32-113&#34; name=&#34;__codelineno-32-113&#34; href=&#34;#__codelineno-32-113&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk_main_arena&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-114&#34;&gt;&lt;a id=&#34;__codelineno-32-114&#34; name=&#34;__codelineno-32-114&#34; href=&#34;#__codelineno-32-114&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-115&#34;&gt;&lt;a id=&#34;__codelineno-32-115&#34; name=&#34;__codelineno-32-115&#34; href=&#34;#__codelineno-32-115&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-116&#34;&gt;&lt;a id=&#34;__codelineno-32-116&#34; name=&#34;__codelineno-32-116&#34; href=&#34;#__codelineno-32-116&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-117&#34;&gt;&lt;a id=&#34;__codelineno-32-117&#34; name=&#34;__codelineno-32-117&#34; href=&#34;#__codelineno-32-117&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunksize_nomask&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-118&#34;&gt;&lt;a id=&#34;__codelineno-32-118&#34; name=&#34;__codelineno-32-118&#34; href=&#34;#__codelineno-32-118&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Always insert in the second position. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-119&#34;&gt;&lt;a id=&#34;__codelineno-32-119&#34; name=&#34;__codelineno-32-119&#34; href=&#34;#__codelineno-32-119&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-120&#34;&gt;&lt;a id=&#34;__codelineno-32-120&#34; name=&#34;__codelineno-32-120&#34; href=&#34;#__codelineno-32-120&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-121&#34;&gt;&lt;a id=&#34;__codelineno-32-121&#34; name=&#34;__codelineno-32-121&#34; href=&#34;#__codelineno-32-121&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-122&#34;&gt;&lt;a id=&#34;__codelineno-32-122&#34; name=&#34;__codelineno-32-122&#34; href=&#34;#__codelineno-32-122&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-123&#34;&gt;&lt;a id=&#34;__codelineno-32-123&#34; name=&#34;__codelineno-32-123&#34; href=&#34;#__codelineno-32-123&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-124&#34;&gt;&lt;a id=&#34;__codelineno-32-124&#34; name=&#34;__codelineno-32-124&#34; href=&#34;#__codelineno-32-124&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* malloc checks omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-125&#34;&gt;&lt;a id=&#34;__codelineno-32-125&#34; name=&#34;__codelineno-32-125&#34; href=&#34;#__codelineno-32-125&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-126&#34;&gt;&lt;a id=&#34;__codelineno-32-126&#34; name=&#34;__codelineno-32-126&#34; href=&#34;#__codelineno-32-126&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-127&#34;&gt;&lt;a id=&#34;__codelineno-32-127&#34; name=&#34;__codelineno-32-127&#34; href=&#34;#__codelineno-32-127&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-128&#34;&gt;&lt;a id=&#34;__codelineno-32-128&#34; name=&#34;__codelineno-32-128&#34; href=&#34;#__codelineno-32-128&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-129&#34;&gt;&lt;a id=&#34;__codelineno-32-129&#34; name=&#34;__codelineno-32-129&#34; href=&#34;#__codelineno-32-129&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* malloc checks omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-130&#34;&gt;&lt;a id=&#34;__codelineno-32-130&#34; name=&#34;__codelineno-32-130&#34; href=&#34;#__codelineno-32-130&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-131&#34;&gt;&lt;a id=&#34;__codelineno-32-131&#34; name=&#34;__codelineno-32-131&#34; href=&#34;#__codelineno-32-131&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-132&#34;&gt;&lt;a id=&#34;__codelineno-32-132&#34; name=&#34;__codelineno-32-132&#34; href=&#34;#__codelineno-32-132&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-133&#34;&gt;&lt;a id=&#34;__codelineno-32-133&#34; name=&#34;__codelineno-32-133&#34; href=&#34;#__codelineno-32-133&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-134&#34;&gt;&lt;a id=&#34;__codelineno-32-134&#34; name=&#34;__codelineno-32-134&#34; href=&#34;#__codelineno-32-134&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-135&#34;&gt;&lt;a id=&#34;__codelineno-32-135&#34; name=&#34;__codelineno-32-135&#34; href=&#34;#__codelineno-32-135&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-136&#34;&gt;&lt;a id=&#34;__codelineno-32-136&#34; name=&#34;__codelineno-32-136&#34; href=&#34;#__codelineno-32-136&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mark_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-137&#34;&gt;&lt;a id=&#34;__codelineno-32-137&#34; name=&#34;__codelineno-32-137&#34; href=&#34;#__codelineno-32-137&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-138&#34;&gt;&lt;a id=&#34;__codelineno-32-138&#34; name=&#34;__codelineno-32-138&#34; href=&#34;#__codelineno-32-138&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-139&#34;&gt;&lt;a id=&#34;__codelineno-32-139&#34; name=&#34;__codelineno-32-139&#34; href=&#34;#__codelineno-32-139&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-140&#34;&gt;&lt;a id=&#34;__codelineno-32-140&#34; name=&#34;__codelineno-32-140&#34; href=&#34;#__codelineno-32-140&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-141&#34;&gt;&lt;a id=&#34;__codelineno-32-141&#34; name=&#34;__codelineno-32-141&#34; href=&#34;#__codelineno-32-141&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-142&#34;&gt;&lt;a id=&#34;__codelineno-32-142&#34; name=&#34;__codelineno-32-142&#34; href=&#34;#__codelineno-32-142&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* If we&amp;#39;ve processed as many chunks as we&amp;#39;re allowed while&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-143&#34;&gt;&lt;a id=&#34;__codelineno-32-143&#34; name=&#34;__codelineno-32-143&#34; href=&#34;#__codelineno-32-143&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; filling the cache, return one of the cached ones. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-144&#34;&gt;&lt;a id=&#34;__codelineno-32-144&#34; name=&#34;__codelineno-32-144&#34; href=&#34;#__codelineno-32-144&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_unsorted_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-145&#34;&gt;&lt;a id=&#34;__codelineno-32-145&#34; name=&#34;__codelineno-32-145&#34; href=&#34;#__codelineno-32-145&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;return_cached&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-146&#34;&gt;&lt;a id=&#34;__codelineno-32-146&#34; name=&#34;__codelineno-32-146&#34; href=&#34;#__codelineno-32-146&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_unsorted_limit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-147&#34;&gt;&lt;a id=&#34;__codelineno-32-147&#34; name=&#34;__codelineno-32-147&#34; href=&#34;#__codelineno-32-147&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_unsorted_count&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_unsorted_limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-148&#34;&gt;&lt;a id=&#34;__codelineno-32-148&#34; name=&#34;__codelineno-32-148&#34; href=&#34;#__codelineno-32-148&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-149&#34;&gt;&lt;a id=&#34;__codelineno-32-149&#34; name=&#34;__codelineno-32-149&#34; href=&#34;#__codelineno-32-149&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcache_get&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tc_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-150&#34;&gt;&lt;a id=&#34;__codelineno-32-150&#34; name=&#34;__codelineno-32-150&#34; href=&#34;#__codelineno-32-150&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-151&#34;&gt;&lt;a id=&#34;__codelineno-32-151&#34; name=&#34;__codelineno-32-151&#34; href=&#34;#__codelineno-32-151&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-152&#34;&gt;&lt;a id=&#34;__codelineno-32-152&#34; name=&#34;__codelineno-32-152&#34; href=&#34;#__codelineno-32-152&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define MAX_ITERS 10000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-153&#34;&gt;&lt;a id=&#34;__codelineno-32-153&#34; name=&#34;__codelineno-32-153&#34; href=&#34;#__codelineno-32-153&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iters&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_ITERS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-154&#34;&gt;&lt;a id=&#34;__codelineno-32-154&#34; name=&#34;__codelineno-32-154&#34; href=&#34;#__codelineno-32-154&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-32-155&#34;&gt;&lt;a id=&#34;__codelineno-32-155&#34; name=&#34;__codelineno-32-155&#34; href=&#34;#__codelineno-32-155&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它的流程如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;遍历 unsorted bin 双向链表，从哨兵结点开始，从后往前遍历空闲块&lt;/li&gt;&lt;li&gt;fast path 逻辑：如果要申请的块比当前空闲块小，并且当前空闲块可以拆分，那就拆分当前的空闲块，然后直接分配拆分后的空闲块&lt;/li&gt;&lt;li&gt;如果要申请的块的大小和当前空闲块的大小相同，把空闲块放到 tcache，或者直接分配这个空闲块&lt;/li&gt;&lt;li&gt;把当前空闲块根据大小，分发到 small bin 或者 large bin&lt;/li&gt;&lt;li&gt;如果 tcache 中有合适的空闲块，就分配它&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;由此可见，unsorted bin 中的空闲块在 malloc 的时候会被分派到对应的 small bin 或者 large bin 当中。small bin 的处理比较简单，因为每个 bin 的块大小都相同，直接加入到双向链表即可。large bin 的处理则比较复杂，下面主要来分析 large bin 的结构。&lt;/p&gt;&lt;h2 id=&#34;large-bin&#34;&gt;large bin&lt;a class=&#34;headerlink&#34; href=&#34;#large-bin&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;large bin 和其他 bin 的不同的地方在于，它每个 bin 的大小不是一个固定的值，而是一个范围。在 64 位下，bin 64 到 bin 127 对应的块大小范围：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;bin 64 到 bin 96: 从 1024 字节开始，每个 bin 覆盖 64 字节的长度范围，例如 bin 64 对应 1024-1087 字节范围，bin 96 对应 3072-3135 字节范围&lt;/li&gt;&lt;li&gt;bin 97 到 bin 111: 从 3136 字节开始，每个 bin 覆盖 512 字节的长度范围，例如 bin 97 对应 3136-3583 字节范围（没有涵盖 512 字节是因为对齐问题，其他的都是涵盖 512 字节），bin 111 对应 10240-10751 字节范围&lt;/li&gt;&lt;li&gt;bin 112 到 bin 119: 从 10752 字节开始，每个 bin 覆盖 4096 字节的长度范围，例如 bin 112 对应 10752-12287 字节范围（没有涵盖 4096 字节是因为对齐问题，其他的都是涵盖 4096 字节），bin 119 对应 36864-40959 字节范围&lt;/li&gt;&lt;li&gt;bin 120 到 bin 123: 从 40960 字节开始，每个 bin 覆盖 32768 字节的长度范围，例如 bin 120 对应 40960-65535 字节范围（没有涵盖 32768 字节是因为对齐问题，其他的都是涵盖 32768 字节），bin 123 对应 131072-163839 字节范围&lt;/li&gt;&lt;li&gt;bin 124: 163840-262143 共 98304 个字节的范围&lt;/li&gt;&lt;li&gt;bin 125: 262144-524287 共 262144 个字节的范围&lt;/li&gt;&lt;li&gt;bin 126: 524288 或更长&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;可以看到，比较短的长度范围给的 bin 也比较多，后面则更加稀疏。上述各个 bin 的大小范围可以通过以下代码打印：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-33-1&#34;&gt;&lt;a id=&#34;__codelineno-33-1&#34; name=&#34;__codelineno-33-1&#34; href=&#34;#__codelineno-33-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-2&#34;&gt;&lt;a id=&#34;__codelineno-33-2&#34; name=&#34;__codelineno-33-2&#34; href=&#34;#__codelineno-33-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define largebin_index_64(sz) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-3&#34;&gt;&lt;a id=&#34;__codelineno-33-3&#34; name=&#34;__codelineno-33-3&#34; href=&#34;#__codelineno-33-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; (((((unsigned long)(sz)) &amp;gt;&amp;gt; 6) &amp;lt;= 48) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-4&#34;&gt;&lt;a id=&#34;__codelineno-33-4&#34; name=&#34;__codelineno-33-4&#34; href=&#34;#__codelineno-33-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; ? 48 + (((unsigned long)(sz)) &amp;gt;&amp;gt; 6) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-5&#34;&gt;&lt;a id=&#34;__codelineno-33-5&#34; name=&#34;__codelineno-33-5&#34; href=&#34;#__codelineno-33-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; : ((((unsigned long)(sz)) &amp;gt;&amp;gt; 9) &amp;lt;= 20) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-6&#34;&gt;&lt;a id=&#34;__codelineno-33-6&#34; name=&#34;__codelineno-33-6&#34; href=&#34;#__codelineno-33-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; ? 91 + (((unsigned long)(sz)) &amp;gt;&amp;gt; 9) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-7&#34;&gt;&lt;a id=&#34;__codelineno-33-7&#34; name=&#34;__codelineno-33-7&#34; href=&#34;#__codelineno-33-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; : ((((unsigned long)(sz)) &amp;gt;&amp;gt; 12) &amp;lt;= 10) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-8&#34;&gt;&lt;a id=&#34;__codelineno-33-8&#34; name=&#34;__codelineno-33-8&#34; href=&#34;#__codelineno-33-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; ? 110 + (((unsigned long)(sz)) &amp;gt;&amp;gt; 12) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-9&#34;&gt;&lt;a id=&#34;__codelineno-33-9&#34; name=&#34;__codelineno-33-9&#34; href=&#34;#__codelineno-33-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; : ((((unsigned long)(sz)) &amp;gt;&amp;gt; 15) &amp;lt;= 4) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-10&#34;&gt;&lt;a id=&#34;__codelineno-33-10&#34; name=&#34;__codelineno-33-10&#34; href=&#34;#__codelineno-33-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; ? 119 + (((unsigned long)(sz)) &amp;gt;&amp;gt; 15) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-11&#34;&gt;&lt;a id=&#34;__codelineno-33-11&#34; name=&#34;__codelineno-33-11&#34; href=&#34;#__codelineno-33-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; : ((((unsigned long)(sz)) &amp;gt;&amp;gt; 18) &amp;lt;= 2) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-12&#34;&gt;&lt;a id=&#34;__codelineno-33-12&#34; name=&#34;__codelineno-33-12&#34; href=&#34;#__codelineno-33-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; ? 124 + (((unsigned long)(sz)) &amp;gt;&amp;gt; 18) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-13&#34;&gt;&lt;a id=&#34;__codelineno-33-13&#34; name=&#34;__codelineno-33-13&#34; href=&#34;#__codelineno-33-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; : 126)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-14&#34;&gt;&lt;a id=&#34;__codelineno-33-14&#34; name=&#34;__codelineno-33-14&#34; href=&#34;#__codelineno-33-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-15&#34;&gt;&lt;a id=&#34;__codelineno-33-15&#34; name=&#34;__codelineno-33-15&#34; href=&#34;#__codelineno-33-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-16&#34;&gt;&lt;a id=&#34;__codelineno-33-16&#34; name=&#34;__codelineno-33-16&#34; href=&#34;#__codelineno-33-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;largebin_index_64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-17&#34;&gt;&lt;a id=&#34;__codelineno-33-17&#34; name=&#34;__codelineno-33-17&#34; href=&#34;#__codelineno-33-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-18&#34;&gt;&lt;a id=&#34;__codelineno-33-18&#34; name=&#34;__codelineno-33-18&#34; href=&#34;#__codelineno-33-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1000000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-19&#34;&gt;&lt;a id=&#34;__codelineno-33-19&#34; name=&#34;__codelineno-33-19&#34; href=&#34;#__codelineno-33-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;largebin_index_64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-20&#34;&gt;&lt;a id=&#34;__codelineno-33-20&#34; name=&#34;__codelineno-33-20&#34; href=&#34;#__codelineno-33-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;%d-%d: %d, length %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-21&#34;&gt;&lt;a id=&#34;__codelineno-33-21&#34; name=&#34;__codelineno-33-21&#34; href=&#34;#__codelineno-33-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-22&#34;&gt;&lt;a id=&#34;__codelineno-33-22&#34; name=&#34;__codelineno-33-22&#34; href=&#34;#__codelineno-33-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;largebin_index_64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-23&#34;&gt;&lt;a id=&#34;__codelineno-33-23&#34; name=&#34;__codelineno-33-23&#34; href=&#34;#__codelineno-33-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-24&#34;&gt;&lt;a id=&#34;__codelineno-33-24&#34; name=&#34;__codelineno-33-24&#34; href=&#34;#__codelineno-33-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-25&#34;&gt;&lt;a id=&#34;__codelineno-33-25&#34; name=&#34;__codelineno-33-25&#34; href=&#34;#__codelineno-33-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;%d-inf: %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-26&#34;&gt;&lt;a id=&#34;__codelineno-33-26&#34; name=&#34;__codelineno-33-26&#34; href=&#34;#__codelineno-33-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-33-27&#34;&gt;&lt;a id=&#34;__codelineno-33-27&#34; name=&#34;__codelineno-33-27&#34; href=&#34;#__codelineno-33-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此 large bin 里面会有不同 chunk 大小的空闲块。为了快速地寻找想要的大小的空闲块，large bin 中空闲块按照从大到小的顺序组成链表，同时通过 &lt;code&gt;fd_nextsize&lt;/code&gt; 和 &lt;code&gt;bk_nextsize&lt;/code&gt; 把每种大小出现的第一个块组成双向链表。大致的连接方式如下，参考了 &lt;a href=&#34;https://sourceware.org/glibc/wiki/MallocInternals&#34;&gt;Malloc Internals&lt;/a&gt; 给的示例：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-34-1&#34;&gt;&lt;a id=&#34;__codelineno-34-1&#34; name=&#34;__codelineno-34-1&#34; href=&#34;#__codelineno-34-1&#34;&gt;&lt;/a&gt; bins[id] chunk A chunk B chunk C&lt;/span&gt;&lt;span id=&#34;__span-34-2&#34;&gt;&lt;a id=&#34;__codelineno-34-2&#34; name=&#34;__codelineno-34-2&#34; href=&#34;#__codelineno-34-2&#34;&gt;&lt;/a&gt;+----------+ +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-34-3&#34;&gt;&lt;a id=&#34;__codelineno-34-3&#34; name=&#34;__codelineno-34-3&#34; href=&#34;#__codelineno-34-3&#34;&gt;&lt;/a&gt;| fd = A | | size = 1072 | | size = 1072 | | size = 1040 |&lt;/span&gt;&lt;span id=&#34;__span-34-4&#34;&gt;&lt;a id=&#34;__codelineno-34-4&#34; name=&#34;__codelineno-34-4&#34; href=&#34;#__codelineno-34-4&#34;&gt;&lt;/a&gt;+----------+ +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-34-5&#34;&gt;&lt;a id=&#34;__codelineno-34-5&#34; name=&#34;__codelineno-34-5&#34; href=&#34;#__codelineno-34-5&#34;&gt;&lt;/a&gt;| bk = C | | fd = B | | fd = C | | fd = bins[id] |&lt;/span&gt;&lt;span id=&#34;__span-34-6&#34;&gt;&lt;a id=&#34;__codelineno-34-6&#34; name=&#34;__codelineno-34-6&#34; href=&#34;#__codelineno-34-6&#34;&gt;&lt;/a&gt;+----------+ +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-34-7&#34;&gt;&lt;a id=&#34;__codelineno-34-7&#34; name=&#34;__codelineno-34-7&#34; href=&#34;#__codelineno-34-7&#34;&gt;&lt;/a&gt; | bk = bins[id] | | bk = A | | bk = B |&lt;/span&gt;&lt;span id=&#34;__span-34-8&#34;&gt;&lt;a id=&#34;__codelineno-34-8&#34; name=&#34;__codelineno-34-8&#34; href=&#34;#__codelineno-34-8&#34;&gt;&lt;/a&gt; +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-34-9&#34;&gt;&lt;a id=&#34;__codelineno-34-9&#34; name=&#34;__codelineno-34-9&#34; href=&#34;#__codelineno-34-9&#34;&gt;&lt;/a&gt; | fd_nextsize = C | | fd_nextsize = A |&lt;/span&gt;&lt;span id=&#34;__span-34-10&#34;&gt;&lt;a id=&#34;__codelineno-34-10&#34; name=&#34;__codelineno-34-10&#34; href=&#34;#__codelineno-34-10&#34;&gt;&lt;/a&gt; +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-34-11&#34;&gt;&lt;a id=&#34;__codelineno-34-11&#34; name=&#34;__codelineno-34-11&#34; href=&#34;#__codelineno-34-11&#34;&gt;&lt;/a&gt; | bk_nextsize = C | | bk_nextsize = A |&lt;/span&gt;&lt;span id=&#34;__span-34-12&#34;&gt;&lt;a id=&#34;__codelineno-34-12&#34; name=&#34;__codelineno-34-12&#34; href=&#34;#__codelineno-34-12&#34;&gt;&lt;/a&gt; +-----------------+ +-----------------+&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即所有的空闲块加哨兵组成一个双向链表，从大到小按照 &lt;code&gt;A -&amp;gt; B -&amp;gt; C&lt;/code&gt; 的顺序连接；然后每种大小的第一个块 &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;C&lt;/code&gt; 单独在一个 nextsize 链表当中。&lt;/p&gt;&lt;p&gt;因此在插入 large bin 的时候，分如下几种情况：&lt;/p&gt;&lt;p&gt;第一种情况，如果新插入的空闲块的大小比目前已有空闲块都小，则直接插入到空闲块和 nextsize 链表的尾部。例如要插入一个 &lt;code&gt;size = 1024&lt;/code&gt; 的空闲块 D，插入后状态为：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-35-1&#34;&gt;&lt;a id=&#34;__codelineno-35-1&#34; name=&#34;__codelineno-35-1&#34; href=&#34;#__codelineno-35-1&#34;&gt;&lt;/a&gt; bins[id] chunk A chunk B chunk C chunk D &lt;/span&gt;&lt;span id=&#34;__span-35-2&#34;&gt;&lt;a id=&#34;__codelineno-35-2&#34; name=&#34;__codelineno-35-2&#34; href=&#34;#__codelineno-35-2&#34;&gt;&lt;/a&gt;+----------+ +-----------------+ +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-35-3&#34;&gt;&lt;a id=&#34;__codelineno-35-3&#34; name=&#34;__codelineno-35-3&#34; href=&#34;#__codelineno-35-3&#34;&gt;&lt;/a&gt;| fd = A | | size = 1072 | | size = 1072 | | size = 1040 | | size = 1024 |&lt;/span&gt;&lt;span id=&#34;__span-35-4&#34;&gt;&lt;a id=&#34;__codelineno-35-4&#34; name=&#34;__codelineno-35-4&#34; href=&#34;#__codelineno-35-4&#34;&gt;&lt;/a&gt;+----------+ +-----------------+ +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-35-5&#34;&gt;&lt;a id=&#34;__codelineno-35-5&#34; name=&#34;__codelineno-35-5&#34; href=&#34;#__codelineno-35-5&#34;&gt;&lt;/a&gt;| bk = D | | fd = B | | fd = C | | fd = D | | fd = bins[id] |&lt;/span&gt;&lt;span id=&#34;__span-35-6&#34;&gt;&lt;a id=&#34;__codelineno-35-6&#34; name=&#34;__codelineno-35-6&#34; href=&#34;#__codelineno-35-6&#34;&gt;&lt;/a&gt;+----------+ +-----------------+ +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-35-7&#34;&gt;&lt;a id=&#34;__codelineno-35-7&#34; name=&#34;__codelineno-35-7&#34; href=&#34;#__codelineno-35-7&#34;&gt;&lt;/a&gt; | bk = bins[id] | | bk = A | | bk = B | | bk = C |&lt;/span&gt;&lt;span id=&#34;__span-35-8&#34;&gt;&lt;a id=&#34;__codelineno-35-8&#34; name=&#34;__codelineno-35-8&#34; href=&#34;#__codelineno-35-8&#34;&gt;&lt;/a&gt; +-----------------+ +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-35-9&#34;&gt;&lt;a id=&#34;__codelineno-35-9&#34; name=&#34;__codelineno-35-9&#34; href=&#34;#__codelineno-35-9&#34;&gt;&lt;/a&gt; | fd_nextsize = C | | fd_nextsize = D | | fd_nextsize = A |&lt;/span&gt;&lt;span id=&#34;__span-35-10&#34;&gt;&lt;a id=&#34;__codelineno-35-10&#34; name=&#34;__codelineno-35-10&#34; href=&#34;#__codelineno-35-10&#34;&gt;&lt;/a&gt; +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-35-11&#34;&gt;&lt;a id=&#34;__codelineno-35-11&#34; name=&#34;__codelineno-35-11&#34; href=&#34;#__codelineno-35-11&#34;&gt;&lt;/a&gt; | bk_nextsize = D | | bk_nextsize = A | | bk_nextsize = C |&lt;/span&gt;&lt;span id=&#34;__span-35-12&#34;&gt;&lt;a id=&#34;__codelineno-35-12&#34; name=&#34;__codelineno-35-12&#34; href=&#34;#__codelineno-35-12&#34;&gt;&lt;/a&gt; +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二种情况，在遍历 nextsize 链表过程中，发现已经有大小相同的块，那就把新的块插入到它的后面。例如要插入一个 &lt;code&gt;size = 1072&lt;/code&gt; 的空闲块 D，通过遍历 nextsize 链表找到了 A，插入之后的状态为：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-36-1&#34;&gt;&lt;a id=&#34;__codelineno-36-1&#34; name=&#34;__codelineno-36-1&#34; href=&#34;#__codelineno-36-1&#34;&gt;&lt;/a&gt; bins[id] chunk A chunk D chunk B chunk C &lt;/span&gt;&lt;span id=&#34;__span-36-2&#34;&gt;&lt;a id=&#34;__codelineno-36-2&#34; name=&#34;__codelineno-36-2&#34; href=&#34;#__codelineno-36-2&#34;&gt;&lt;/a&gt;+----------+ +-----------------+ +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-36-3&#34;&gt;&lt;a id=&#34;__codelineno-36-3&#34; name=&#34;__codelineno-36-3&#34; href=&#34;#__codelineno-36-3&#34;&gt;&lt;/a&gt;| fd = A | | size = 1072 | | size = 1072 | | size = 1072 | | size = 1040 |&lt;/span&gt;&lt;span id=&#34;__span-36-4&#34;&gt;&lt;a id=&#34;__codelineno-36-4&#34; name=&#34;__codelineno-36-4&#34; href=&#34;#__codelineno-36-4&#34;&gt;&lt;/a&gt;+----------+ +-----------------+ +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-36-5&#34;&gt;&lt;a id=&#34;__codelineno-36-5&#34; name=&#34;__codelineno-36-5&#34; href=&#34;#__codelineno-36-5&#34;&gt;&lt;/a&gt;| bk = C | | fd = D | | fd = B | | fd = C | | fd = bins[id] |&lt;/span&gt;&lt;span id=&#34;__span-36-6&#34;&gt;&lt;a id=&#34;__codelineno-36-6&#34; name=&#34;__codelineno-36-6&#34; href=&#34;#__codelineno-36-6&#34;&gt;&lt;/a&gt;+----------+ +-----------------+ +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-36-7&#34;&gt;&lt;a id=&#34;__codelineno-36-7&#34; name=&#34;__codelineno-36-7&#34; href=&#34;#__codelineno-36-7&#34;&gt;&lt;/a&gt; | bk = bins[id] | | bk = A | | bk = D | | bk = C |&lt;/span&gt;&lt;span id=&#34;__span-36-8&#34;&gt;&lt;a id=&#34;__codelineno-36-8&#34; name=&#34;__codelineno-36-8&#34; href=&#34;#__codelineno-36-8&#34;&gt;&lt;/a&gt; +-----------------+ +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-36-9&#34;&gt;&lt;a id=&#34;__codelineno-36-9&#34; name=&#34;__codelineno-36-9&#34; href=&#34;#__codelineno-36-9&#34;&gt;&lt;/a&gt; | fd_nextsize = C | | fd_nextsize = A |&lt;/span&gt;&lt;span id=&#34;__span-36-10&#34;&gt;&lt;a id=&#34;__codelineno-36-10&#34; name=&#34;__codelineno-36-10&#34; href=&#34;#__codelineno-36-10&#34;&gt;&lt;/a&gt; +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-36-11&#34;&gt;&lt;a id=&#34;__codelineno-36-11&#34; name=&#34;__codelineno-36-11&#34; href=&#34;#__codelineno-36-11&#34;&gt;&lt;/a&gt; | bk_nextsize = C | | bk_nextsize = A |&lt;/span&gt;&lt;span id=&#34;__span-36-12&#34;&gt;&lt;a id=&#34;__codelineno-36-12&#34; name=&#34;__codelineno-36-12&#34; href=&#34;#__codelineno-36-12&#34;&gt;&lt;/a&gt; +-----------------+ +-----------------+&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第三种情况，在遍历 nextsize 链表过程中，没有大小相同的块，那就按照从大到小的顺序插入到合适的位置。例如要插入一个 &lt;code&gt;size = 1056&lt;/code&gt; 的空闲块 D，通过遍历 nextsize 链表找到了 A 和 C，插入之后的状态为：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-37-1&#34;&gt;&lt;a id=&#34;__codelineno-37-1&#34; name=&#34;__codelineno-37-1&#34; href=&#34;#__codelineno-37-1&#34;&gt;&lt;/a&gt; bins[id] chunk A chunk B chunk D chunk C &lt;/span&gt;&lt;span id=&#34;__span-37-2&#34;&gt;&lt;a id=&#34;__codelineno-37-2&#34; name=&#34;__codelineno-37-2&#34; href=&#34;#__codelineno-37-2&#34;&gt;&lt;/a&gt;+----------+ +-----------------+ +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-37-3&#34;&gt;&lt;a id=&#34;__codelineno-37-3&#34; name=&#34;__codelineno-37-3&#34; href=&#34;#__codelineno-37-3&#34;&gt;&lt;/a&gt;| fd = A | | size = 1072 | | size = 1072 | | size = 1056 | | size = 1040 |&lt;/span&gt;&lt;span id=&#34;__span-37-4&#34;&gt;&lt;a id=&#34;__codelineno-37-4&#34; name=&#34;__codelineno-37-4&#34; href=&#34;#__codelineno-37-4&#34;&gt;&lt;/a&gt;+----------+ +-----------------+ +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-37-5&#34;&gt;&lt;a id=&#34;__codelineno-37-5&#34; name=&#34;__codelineno-37-5&#34; href=&#34;#__codelineno-37-5&#34;&gt;&lt;/a&gt;| bk = D | | fd = B | | fd = D | | fd = C | | fd = bins[id] |&lt;/span&gt;&lt;span id=&#34;__span-37-6&#34;&gt;&lt;a id=&#34;__codelineno-37-6&#34; name=&#34;__codelineno-37-6&#34; href=&#34;#__codelineno-37-6&#34;&gt;&lt;/a&gt;+----------+ +-----------------+ +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-37-7&#34;&gt;&lt;a id=&#34;__codelineno-37-7&#34; name=&#34;__codelineno-37-7&#34; href=&#34;#__codelineno-37-7&#34;&gt;&lt;/a&gt; | bk = bins[id] | | bk = A | | bk = B | | bk = D |&lt;/span&gt;&lt;span id=&#34;__span-37-8&#34;&gt;&lt;a id=&#34;__codelineno-37-8&#34; name=&#34;__codelineno-37-8&#34; href=&#34;#__codelineno-37-8&#34;&gt;&lt;/a&gt; +-----------------+ +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-37-9&#34;&gt;&lt;a id=&#34;__codelineno-37-9&#34; name=&#34;__codelineno-37-9&#34; href=&#34;#__codelineno-37-9&#34;&gt;&lt;/a&gt; | fd_nextsize = D | | fd_nextsize = C | | fd_nextsize = A |&lt;/span&gt;&lt;span id=&#34;__span-37-10&#34;&gt;&lt;a id=&#34;__codelineno-37-10&#34; name=&#34;__codelineno-37-10&#34; href=&#34;#__codelineno-37-10&#34;&gt;&lt;/a&gt; +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;span id=&#34;__span-37-11&#34;&gt;&lt;a id=&#34;__codelineno-37-11&#34; name=&#34;__codelineno-37-11&#34; href=&#34;#__codelineno-37-11&#34;&gt;&lt;/a&gt; | bk_nextsize = C | | bk_nextsize = A | | bk_nextsize = D |&lt;/span&gt;&lt;span id=&#34;__span-37-12&#34;&gt;&lt;a id=&#34;__codelineno-37-12&#34; name=&#34;__codelineno-37-12&#34; href=&#34;#__codelineno-37-12&#34;&gt;&lt;/a&gt; +-----------------+ +-----------------+ +-----------------+&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就保证了插入以后的 large bin，依然满足从大到小排序，并且每种大小的第一个块组成 nextsize 链表的性质。&lt;/p&gt;&lt;h3 id=&#34;malloc_4&#34;&gt;malloc&lt;a class=&#34;headerlink&#34; href=&#34;#malloc_4&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;接着回到 &lt;code&gt;_libc_malloc&lt;/code&gt;。前面提到，unsorted bin 中空闲块已经被挪到了 small bin 或者 large bin，并在这个过程中把合适大小的空闲块直接分配。如果还是没有分配成功，接下来就要在 large bin 里寻找一个块来分配：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-38-1&#34;&gt;&lt;a id=&#34;__codelineno-38-1&#34; name=&#34;__codelineno-38-1&#34; href=&#34;#__codelineno-38-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in_smallbin_range&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-2&#34;&gt;&lt;a id=&#34;__codelineno-38-2&#34; name=&#34;__codelineno-38-2&#34; href=&#34;#__codelineno-38-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-3&#34;&gt;&lt;a id=&#34;__codelineno-38-3&#34; name=&#34;__codelineno-38-3&#34; href=&#34;#__codelineno-38-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin_at&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-4&#34;&gt;&lt;a id=&#34;__codelineno-38-4&#34; name=&#34;__codelineno-38-4&#34; href=&#34;#__codelineno-38-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-5&#34;&gt;&lt;a id=&#34;__codelineno-38-5&#34; name=&#34;__codelineno-38-5&#34; href=&#34;#__codelineno-38-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* skip scan if empty or largest chunk is too small */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-6&#34;&gt;&lt;a id=&#34;__codelineno-38-6&#34; name=&#34;__codelineno-38-6&#34; href=&#34;#__codelineno-38-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-7&#34;&gt;&lt;a id=&#34;__codelineno-38-7&#34; name=&#34;__codelineno-38-7&#34; href=&#34;#__codelineno-38-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunksize_nomask&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-8&#34;&gt;&lt;a id=&#34;__codelineno-38-8&#34; name=&#34;__codelineno-38-8&#34; href=&#34;#__codelineno-38-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-9&#34;&gt;&lt;a id=&#34;__codelineno-38-9&#34; name=&#34;__codelineno-38-9&#34; href=&#34;#__codelineno-38-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-10&#34;&gt;&lt;a id=&#34;__codelineno-38-10&#34; name=&#34;__codelineno-38-10&#34; href=&#34;#__codelineno-38-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-11&#34;&gt;&lt;a id=&#34;__codelineno-38-11&#34; name=&#34;__codelineno-38-11&#34; href=&#34;#__codelineno-38-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunksize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-12&#34;&gt;&lt;a id=&#34;__codelineno-38-12&#34; name=&#34;__codelineno-38-12&#34; href=&#34;#__codelineno-38-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-13&#34;&gt;&lt;a id=&#34;__codelineno-38-13&#34; name=&#34;__codelineno-38-13&#34; href=&#34;#__codelineno-38-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-14&#34;&gt;&lt;a id=&#34;__codelineno-38-14&#34; name=&#34;__codelineno-38-14&#34; href=&#34;#__codelineno-38-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-15&#34;&gt;&lt;a id=&#34;__codelineno-38-15&#34; name=&#34;__codelineno-38-15&#34; href=&#34;#__codelineno-38-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Avoid removing the first entry for a size so that the skip&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-16&#34;&gt;&lt;a id=&#34;__codelineno-38-16&#34; name=&#34;__codelineno-38-16&#34; href=&#34;#__codelineno-38-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; list does not have to be rerouted. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-17&#34;&gt;&lt;a id=&#34;__codelineno-38-17&#34; name=&#34;__codelineno-38-17&#34; href=&#34;#__codelineno-38-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-18&#34;&gt;&lt;a id=&#34;__codelineno-38-18&#34; name=&#34;__codelineno-38-18&#34; href=&#34;#__codelineno-38-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunksize_nomask&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-19&#34;&gt;&lt;a id=&#34;__codelineno-38-19&#34; name=&#34;__codelineno-38-19&#34; href=&#34;#__codelineno-38-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunksize_nomask&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-20&#34;&gt;&lt;a id=&#34;__codelineno-38-20&#34; name=&#34;__codelineno-38-20&#34; href=&#34;#__codelineno-38-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-21&#34;&gt;&lt;a id=&#34;__codelineno-38-21&#34; name=&#34;__codelineno-38-21&#34; href=&#34;#__codelineno-38-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-22&#34;&gt;&lt;a id=&#34;__codelineno-38-22&#34; name=&#34;__codelineno-38-22&#34; href=&#34;#__codelineno-38-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder_size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-23&#34;&gt;&lt;a id=&#34;__codelineno-38-23&#34; name=&#34;__codelineno-38-23&#34; href=&#34;#__codelineno-38-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unlink_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-24&#34;&gt;&lt;a id=&#34;__codelineno-38-24&#34; name=&#34;__codelineno-38-24&#34; href=&#34;#__codelineno-38-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-25&#34;&gt;&lt;a id=&#34;__codelineno-38-25&#34; name=&#34;__codelineno-38-25&#34; href=&#34;#__codelineno-38-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Exhaust */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-26&#34;&gt;&lt;a id=&#34;__codelineno-38-26&#34; name=&#34;__codelineno-38-26&#34; href=&#34;#__codelineno-38-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder_size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MINSIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-27&#34;&gt;&lt;a id=&#34;__codelineno-38-27&#34; name=&#34;__codelineno-38-27&#34; href=&#34;#__codelineno-38-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-28&#34;&gt;&lt;a id=&#34;__codelineno-38-28&#34; name=&#34;__codelineno-38-28&#34; href=&#34;#__codelineno-38-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_inuse_bit_at_offset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-29&#34;&gt;&lt;a id=&#34;__codelineno-38-29&#34; name=&#34;__codelineno-38-29&#34; href=&#34;#__codelineno-38-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main_arena&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-30&#34;&gt;&lt;a id=&#34;__codelineno-38-30&#34; name=&#34;__codelineno-38-30&#34; href=&#34;#__codelineno-38-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_non_main_arena&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-31&#34;&gt;&lt;a id=&#34;__codelineno-38-31&#34; name=&#34;__codelineno-38-31&#34; href=&#34;#__codelineno-38-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-32&#34;&gt;&lt;a id=&#34;__codelineno-38-32&#34; name=&#34;__codelineno-38-32&#34; href=&#34;#__codelineno-38-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Split */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-33&#34;&gt;&lt;a id=&#34;__codelineno-38-33&#34; name=&#34;__codelineno-38-33&#34; href=&#34;#__codelineno-38-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-34&#34;&gt;&lt;a id=&#34;__codelineno-38-34&#34; name=&#34;__codelineno-38-34&#34; href=&#34;#__codelineno-38-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-35&#34;&gt;&lt;a id=&#34;__codelineno-38-35&#34; name=&#34;__codelineno-38-35&#34; href=&#34;#__codelineno-38-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk_at_offset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-36&#34;&gt;&lt;a id=&#34;__codelineno-38-36&#34; name=&#34;__codelineno-38-36&#34; href=&#34;#__codelineno-38-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* We cannot assume the unsorted list is empty and therefore&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-37&#34;&gt;&lt;a id=&#34;__codelineno-38-37&#34; name=&#34;__codelineno-38-37&#34; href=&#34;#__codelineno-38-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; have to perform a complete insert here. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-38&#34;&gt;&lt;a id=&#34;__codelineno-38-38&#34; name=&#34;__codelineno-38-38&#34; href=&#34;#__codelineno-38-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsorted_chunks&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-39&#34;&gt;&lt;a id=&#34;__codelineno-38-39&#34; name=&#34;__codelineno-38-39&#34; href=&#34;#__codelineno-38-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-40&#34;&gt;&lt;a id=&#34;__codelineno-38-40&#34; name=&#34;__codelineno-38-40&#34; href=&#34;#__codelineno-38-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__glibc_unlikely&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-41&#34;&gt;&lt;a id=&#34;__codelineno-38-41&#34; name=&#34;__codelineno-38-41&#34; href=&#34;#__codelineno-38-41&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc_printerr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;malloc(): corrupted unsorted chunks&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-42&#34;&gt;&lt;a id=&#34;__codelineno-38-42&#34; name=&#34;__codelineno-38-42&#34; href=&#34;#__codelineno-38-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-43&#34;&gt;&lt;a id=&#34;__codelineno-38-43&#34; name=&#34;__codelineno-38-43&#34; href=&#34;#__codelineno-38-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-44&#34;&gt;&lt;a id=&#34;__codelineno-38-44&#34; name=&#34;__codelineno-38-44&#34; href=&#34;#__codelineno-38-44&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-45&#34;&gt;&lt;a id=&#34;__codelineno-38-45&#34; name=&#34;__codelineno-38-45&#34; href=&#34;#__codelineno-38-45&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-46&#34;&gt;&lt;a id=&#34;__codelineno-38-46&#34; name=&#34;__codelineno-38-46&#34; href=&#34;#__codelineno-38-46&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in_smallbin_range&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-47&#34;&gt;&lt;a id=&#34;__codelineno-38-47&#34; name=&#34;__codelineno-38-47&#34; href=&#34;#__codelineno-38-47&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-48&#34;&gt;&lt;a id=&#34;__codelineno-38-48&#34; name=&#34;__codelineno-38-48&#34; href=&#34;#__codelineno-38-48&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-49&#34;&gt;&lt;a id=&#34;__codelineno-38-49&#34; name=&#34;__codelineno-38-49&#34; href=&#34;#__codelineno-38-49&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-50&#34;&gt;&lt;a id=&#34;__codelineno-38-50&#34; name=&#34;__codelineno-38-50&#34; href=&#34;#__codelineno-38-50&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-51&#34;&gt;&lt;a id=&#34;__codelineno-38-51&#34; name=&#34;__codelineno-38-51&#34; href=&#34;#__codelineno-38-51&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_head&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PREV_INUSE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-52&#34;&gt;&lt;a id=&#34;__codelineno-38-52&#34; name=&#34;__codelineno-38-52&#34; href=&#34;#__codelineno-38-52&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main_arena&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NON_MAIN_ARENA&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-53&#34;&gt;&lt;a id=&#34;__codelineno-38-53&#34; name=&#34;__codelineno-38-53&#34; href=&#34;#__codelineno-38-53&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_head&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder_size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PREV_INUSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-54&#34;&gt;&lt;a id=&#34;__codelineno-38-54&#34; name=&#34;__codelineno-38-54&#34; href=&#34;#__codelineno-38-54&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_foot&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-55&#34;&gt;&lt;a id=&#34;__codelineno-38-55&#34; name=&#34;__codelineno-38-55&#34; href=&#34;#__codelineno-38-55&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-56&#34;&gt;&lt;a id=&#34;__codelineno-38-56&#34; name=&#34;__codelineno-38-56&#34; href=&#34;#__codelineno-38-56&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_malloced_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-57&#34;&gt;&lt;a id=&#34;__codelineno-38-57&#34; name=&#34;__codelineno-38-57&#34; href=&#34;#__codelineno-38-57&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk2mem&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-58&#34;&gt;&lt;a id=&#34;__codelineno-38-58&#34; name=&#34;__codelineno-38-58&#34; href=&#34;#__codelineno-38-58&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alloc_perturb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-59&#34;&gt;&lt;a id=&#34;__codelineno-38-59&#34; name=&#34;__codelineno-38-59&#34; href=&#34;#__codelineno-38-59&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-60&#34;&gt;&lt;a id=&#34;__codelineno-38-60&#34; name=&#34;__codelineno-38-60&#34; href=&#34;#__codelineno-38-60&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-38-61&#34;&gt;&lt;a id=&#34;__codelineno-38-61&#34; name=&#34;__codelineno-38-61&#34; href=&#34;#__codelineno-38-61&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从 large bin 分配空闲块的过程如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;根据大小找到对应的 large bin&lt;/li&gt;&lt;li&gt;如果 large bin 中最大的空闲块足够大，遍历 nextsize 链表，找到一个比要分配的大小更大的最小的空闲块&lt;/li&gt;&lt;li&gt;为了避免更新 nextsize 链表，如果当前块大小对应了不止一个空闲块，那就取第二个空闲块，这样就不用更新 nextsize 链表&lt;/li&gt;&lt;li&gt;计算空闲块大小和要分配的大小的差值，如果差值太小，多余的部分就直接浪费；如果差的空间还能放下一个 chunk，就进行拆分，把拆出来的剩下的部分放到 unsorted bin 中&lt;/li&gt;&lt;li&gt;计算 payload 地址，进行可选的 perturb，完成分配&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;寻找更大的-bin&#34;&gt;寻找更大的 bin&lt;a class=&#34;headerlink&#34; href=&#34;#寻找更大的-bin&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果在当前 bin 内还是找不到空闲块，那就只能从更大的 bin 里寻找空闲块了：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-39-1&#34;&gt;&lt;a id=&#34;__codelineno-39-1&#34; name=&#34;__codelineno-39-1&#34; href=&#34;#__codelineno-39-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-2&#34;&gt;&lt;a id=&#34;__codelineno-39-2&#34; name=&#34;__codelineno-39-2&#34; href=&#34;#__codelineno-39-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin_at&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-3&#34;&gt;&lt;a id=&#34;__codelineno-39-3&#34; name=&#34;__codelineno-39-3&#34; href=&#34;#__codelineno-39-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx2block&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-4&#34;&gt;&lt;a id=&#34;__codelineno-39-4&#34; name=&#34;__codelineno-39-4&#34; href=&#34;#__codelineno-39-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;binmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-5&#34;&gt;&lt;a id=&#34;__codelineno-39-5&#34; name=&#34;__codelineno-39-5&#34; href=&#34;#__codelineno-39-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx2bit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-6&#34;&gt;&lt;a id=&#34;__codelineno-39-6&#34; name=&#34;__codelineno-39-6&#34; href=&#34;#__codelineno-39-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-7&#34;&gt;&lt;a id=&#34;__codelineno-39-7&#34; name=&#34;__codelineno-39-7&#34; href=&#34;#__codelineno-39-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-8&#34;&gt;&lt;a id=&#34;__codelineno-39-8&#34; name=&#34;__codelineno-39-8&#34; href=&#34;#__codelineno-39-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-9&#34;&gt;&lt;a id=&#34;__codelineno-39-9&#34; name=&#34;__codelineno-39-9&#34; href=&#34;#__codelineno-39-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Skip rest of block if there are no more set bits in this block. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-10&#34;&gt;&lt;a id=&#34;__codelineno-39-10&#34; name=&#34;__codelineno-39-10&#34; href=&#34;#__codelineno-39-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-11&#34;&gt;&lt;a id=&#34;__codelineno-39-11&#34; name=&#34;__codelineno-39-11&#34; href=&#34;#__codelineno-39-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-12&#34;&gt;&lt;a id=&#34;__codelineno-39-12&#34; name=&#34;__codelineno-39-12&#34; href=&#34;#__codelineno-39-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-13&#34;&gt;&lt;a id=&#34;__codelineno-39-13&#34; name=&#34;__codelineno-39-13&#34; href=&#34;#__codelineno-39-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-14&#34;&gt;&lt;a id=&#34;__codelineno-39-14&#34; name=&#34;__codelineno-39-14&#34; href=&#34;#__codelineno-39-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BINMAPSIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* out of bins */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-15&#34;&gt;&lt;a id=&#34;__codelineno-39-15&#34; name=&#34;__codelineno-39-15&#34; href=&#34;#__codelineno-39-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;use_top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-16&#34;&gt;&lt;a id=&#34;__codelineno-39-16&#34; name=&#34;__codelineno-39-16&#34; href=&#34;#__codelineno-39-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-17&#34;&gt;&lt;a id=&#34;__codelineno-39-17&#34; name=&#34;__codelineno-39-17&#34; href=&#34;#__codelineno-39-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;binmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-18&#34;&gt;&lt;a id=&#34;__codelineno-39-18&#34; name=&#34;__codelineno-39-18&#34; href=&#34;#__codelineno-39-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-19&#34;&gt;&lt;a id=&#34;__codelineno-39-19&#34; name=&#34;__codelineno-39-19&#34; href=&#34;#__codelineno-39-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin_at&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BINMAPSHIFT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-20&#34;&gt;&lt;a id=&#34;__codelineno-39-20&#34; name=&#34;__codelineno-39-20&#34; href=&#34;#__codelineno-39-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-21&#34;&gt;&lt;a id=&#34;__codelineno-39-21&#34; name=&#34;__codelineno-39-21&#34; href=&#34;#__codelineno-39-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-22&#34;&gt;&lt;a id=&#34;__codelineno-39-22&#34; name=&#34;__codelineno-39-22&#34; href=&#34;#__codelineno-39-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-23&#34;&gt;&lt;a id=&#34;__codelineno-39-23&#34; name=&#34;__codelineno-39-23&#34; href=&#34;#__codelineno-39-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Advance to bin with set bit. There must be one. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-24&#34;&gt;&lt;a id=&#34;__codelineno-39-24&#34; name=&#34;__codelineno-39-24&#34; href=&#34;#__codelineno-39-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-25&#34;&gt;&lt;a id=&#34;__codelineno-39-25&#34; name=&#34;__codelineno-39-25&#34; href=&#34;#__codelineno-39-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-26&#34;&gt;&lt;a id=&#34;__codelineno-39-26&#34; name=&#34;__codelineno-39-26&#34; href=&#34;#__codelineno-39-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-27&#34;&gt;&lt;a id=&#34;__codelineno-39-27&#34; name=&#34;__codelineno-39-27&#34; href=&#34;#__codelineno-39-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-28&#34;&gt;&lt;a id=&#34;__codelineno-39-28&#34; name=&#34;__codelineno-39-28&#34; href=&#34;#__codelineno-39-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-29&#34;&gt;&lt;a id=&#34;__codelineno-39-29&#34; name=&#34;__codelineno-39-29&#34; href=&#34;#__codelineno-39-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-30&#34;&gt;&lt;a id=&#34;__codelineno-39-30&#34; name=&#34;__codelineno-39-30&#34; href=&#34;#__codelineno-39-30&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-31&#34;&gt;&lt;a id=&#34;__codelineno-39-31&#34; name=&#34;__codelineno-39-31&#34; href=&#34;#__codelineno-39-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Inspect the bin. It is likely to be non-empty */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-32&#34;&gt;&lt;a id=&#34;__codelineno-39-32&#34; name=&#34;__codelineno-39-32&#34; href=&#34;#__codelineno-39-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-33&#34;&gt;&lt;a id=&#34;__codelineno-39-33&#34; name=&#34;__codelineno-39-33&#34; href=&#34;#__codelineno-39-33&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-34&#34;&gt;&lt;a id=&#34;__codelineno-39-34&#34; name=&#34;__codelineno-39-34&#34; href=&#34;#__codelineno-39-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* If a false alarm (empty bin), clear the bit. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-35&#34;&gt;&lt;a id=&#34;__codelineno-39-35&#34; name=&#34;__codelineno-39-35&#34; href=&#34;#__codelineno-39-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-36&#34;&gt;&lt;a id=&#34;__codelineno-39-36&#34; name=&#34;__codelineno-39-36&#34; href=&#34;#__codelineno-39-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-37&#34;&gt;&lt;a id=&#34;__codelineno-39-37&#34; name=&#34;__codelineno-39-37&#34; href=&#34;#__codelineno-39-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;binmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Write through */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-38&#34;&gt;&lt;a id=&#34;__codelineno-39-38&#34; name=&#34;__codelineno-39-38&#34; href=&#34;#__codelineno-39-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-39&#34;&gt;&lt;a id=&#34;__codelineno-39-39&#34; name=&#34;__codelineno-39-39&#34; href=&#34;#__codelineno-39-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-40&#34;&gt;&lt;a id=&#34;__codelineno-39-40&#34; name=&#34;__codelineno-39-40&#34; href=&#34;#__codelineno-39-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-41&#34;&gt;&lt;a id=&#34;__codelineno-39-41&#34; name=&#34;__codelineno-39-41&#34; href=&#34;#__codelineno-39-41&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-42&#34;&gt;&lt;a id=&#34;__codelineno-39-42&#34; name=&#34;__codelineno-39-42&#34; href=&#34;#__codelineno-39-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-43&#34;&gt;&lt;a id=&#34;__codelineno-39-43&#34; name=&#34;__codelineno-39-43&#34; href=&#34;#__codelineno-39-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-44&#34;&gt;&lt;a id=&#34;__codelineno-39-44&#34; name=&#34;__codelineno-39-44&#34; href=&#34;#__codelineno-39-44&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunksize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-45&#34;&gt;&lt;a id=&#34;__codelineno-39-45&#34; name=&#34;__codelineno-39-45&#34; href=&#34;#__codelineno-39-45&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-46&#34;&gt;&lt;a id=&#34;__codelineno-39-46&#34; name=&#34;__codelineno-39-46&#34; href=&#34;#__codelineno-39-46&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* We know the first chunk in this bin is big enough to use. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-47&#34;&gt;&lt;a id=&#34;__codelineno-39-47&#34; name=&#34;__codelineno-39-47&#34; href=&#34;#__codelineno-39-47&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-48&#34;&gt;&lt;a id=&#34;__codelineno-39-48&#34; name=&#34;__codelineno-39-48&#34; href=&#34;#__codelineno-39-48&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-49&#34;&gt;&lt;a id=&#34;__codelineno-39-49&#34; name=&#34;__codelineno-39-49&#34; href=&#34;#__codelineno-39-49&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder_size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-50&#34;&gt;&lt;a id=&#34;__codelineno-39-50&#34; name=&#34;__codelineno-39-50&#34; href=&#34;#__codelineno-39-50&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-51&#34;&gt;&lt;a id=&#34;__codelineno-39-51&#34; name=&#34;__codelineno-39-51&#34; href=&#34;#__codelineno-39-51&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* unlink */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-52&#34;&gt;&lt;a id=&#34;__codelineno-39-52&#34; name=&#34;__codelineno-39-52&#34; href=&#34;#__codelineno-39-52&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unlink_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-53&#34;&gt;&lt;a id=&#34;__codelineno-39-53&#34; name=&#34;__codelineno-39-53&#34; href=&#34;#__codelineno-39-53&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-54&#34;&gt;&lt;a id=&#34;__codelineno-39-54&#34; name=&#34;__codelineno-39-54&#34; href=&#34;#__codelineno-39-54&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Exhaust */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-55&#34;&gt;&lt;a id=&#34;__codelineno-39-55&#34; name=&#34;__codelineno-39-55&#34; href=&#34;#__codelineno-39-55&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder_size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MINSIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-56&#34;&gt;&lt;a id=&#34;__codelineno-39-56&#34; name=&#34;__codelineno-39-56&#34; href=&#34;#__codelineno-39-56&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-57&#34;&gt;&lt;a id=&#34;__codelineno-39-57&#34; name=&#34;__codelineno-39-57&#34; href=&#34;#__codelineno-39-57&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_inuse_bit_at_offset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-58&#34;&gt;&lt;a id=&#34;__codelineno-39-58&#34; name=&#34;__codelineno-39-58&#34; href=&#34;#__codelineno-39-58&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main_arena&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-59&#34;&gt;&lt;a id=&#34;__codelineno-39-59&#34; name=&#34;__codelineno-39-59&#34; href=&#34;#__codelineno-39-59&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_non_main_arena&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-60&#34;&gt;&lt;a id=&#34;__codelineno-39-60&#34; name=&#34;__codelineno-39-60&#34; href=&#34;#__codelineno-39-60&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-61&#34;&gt;&lt;a id=&#34;__codelineno-39-61&#34; name=&#34;__codelineno-39-61&#34; href=&#34;#__codelineno-39-61&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-62&#34;&gt;&lt;a id=&#34;__codelineno-39-62&#34; name=&#34;__codelineno-39-62&#34; href=&#34;#__codelineno-39-62&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Split */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-63&#34;&gt;&lt;a id=&#34;__codelineno-39-63&#34; name=&#34;__codelineno-39-63&#34; href=&#34;#__codelineno-39-63&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-64&#34;&gt;&lt;a id=&#34;__codelineno-39-64&#34; name=&#34;__codelineno-39-64&#34; href=&#34;#__codelineno-39-64&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-65&#34;&gt;&lt;a id=&#34;__codelineno-39-65&#34; name=&#34;__codelineno-39-65&#34; href=&#34;#__codelineno-39-65&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk_at_offset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-66&#34;&gt;&lt;a id=&#34;__codelineno-39-66&#34; name=&#34;__codelineno-39-66&#34; href=&#34;#__codelineno-39-66&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-67&#34;&gt;&lt;a id=&#34;__codelineno-39-67&#34; name=&#34;__codelineno-39-67&#34; href=&#34;#__codelineno-39-67&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* We cannot assume the unsorted list is empty and therefore&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-68&#34;&gt;&lt;a id=&#34;__codelineno-39-68&#34; name=&#34;__codelineno-39-68&#34; href=&#34;#__codelineno-39-68&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; have to perform a complete insert here. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-69&#34;&gt;&lt;a id=&#34;__codelineno-39-69&#34; name=&#34;__codelineno-39-69&#34; href=&#34;#__codelineno-39-69&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsorted_chunks&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-70&#34;&gt;&lt;a id=&#34;__codelineno-39-70&#34; name=&#34;__codelineno-39-70&#34; href=&#34;#__codelineno-39-70&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-71&#34;&gt;&lt;a id=&#34;__codelineno-39-71&#34; name=&#34;__codelineno-39-71&#34; href=&#34;#__codelineno-39-71&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__glibc_unlikely&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-72&#34;&gt;&lt;a id=&#34;__codelineno-39-72&#34; name=&#34;__codelineno-39-72&#34; href=&#34;#__codelineno-39-72&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc_printerr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;malloc(): corrupted unsorted chunks 2&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-73&#34;&gt;&lt;a id=&#34;__codelineno-39-73&#34; name=&#34;__codelineno-39-73&#34; href=&#34;#__codelineno-39-73&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-74&#34;&gt;&lt;a id=&#34;__codelineno-39-74&#34; name=&#34;__codelineno-39-74&#34; href=&#34;#__codelineno-39-74&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-75&#34;&gt;&lt;a id=&#34;__codelineno-39-75&#34; name=&#34;__codelineno-39-75&#34; href=&#34;#__codelineno-39-75&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-76&#34;&gt;&lt;a id=&#34;__codelineno-39-76&#34; name=&#34;__codelineno-39-76&#34; href=&#34;#__codelineno-39-76&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-77&#34;&gt;&lt;a id=&#34;__codelineno-39-77&#34; name=&#34;__codelineno-39-77&#34; href=&#34;#__codelineno-39-77&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-78&#34;&gt;&lt;a id=&#34;__codelineno-39-78&#34; name=&#34;__codelineno-39-78&#34; href=&#34;#__codelineno-39-78&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* advertise as last remainder */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-79&#34;&gt;&lt;a id=&#34;__codelineno-39-79&#34; name=&#34;__codelineno-39-79&#34; href=&#34;#__codelineno-39-79&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in_smallbin_range&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-80&#34;&gt;&lt;a id=&#34;__codelineno-39-80&#34; name=&#34;__codelineno-39-80&#34; href=&#34;#__codelineno-39-80&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_remainder&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-81&#34;&gt;&lt;a id=&#34;__codelineno-39-81&#34; name=&#34;__codelineno-39-81&#34; href=&#34;#__codelineno-39-81&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in_smallbin_range&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-82&#34;&gt;&lt;a id=&#34;__codelineno-39-82&#34; name=&#34;__codelineno-39-82&#34; href=&#34;#__codelineno-39-82&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-83&#34;&gt;&lt;a id=&#34;__codelineno-39-83&#34; name=&#34;__codelineno-39-83&#34; href=&#34;#__codelineno-39-83&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-84&#34;&gt;&lt;a id=&#34;__codelineno-39-84&#34; name=&#34;__codelineno-39-84&#34; href=&#34;#__codelineno-39-84&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-85&#34;&gt;&lt;a id=&#34;__codelineno-39-85&#34; name=&#34;__codelineno-39-85&#34; href=&#34;#__codelineno-39-85&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-86&#34;&gt;&lt;a id=&#34;__codelineno-39-86&#34; name=&#34;__codelineno-39-86&#34; href=&#34;#__codelineno-39-86&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_head&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PREV_INUSE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-87&#34;&gt;&lt;a id=&#34;__codelineno-39-87&#34; name=&#34;__codelineno-39-87&#34; href=&#34;#__codelineno-39-87&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main_arena&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NON_MAIN_ARENA&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-88&#34;&gt;&lt;a id=&#34;__codelineno-39-88&#34; name=&#34;__codelineno-39-88&#34; href=&#34;#__codelineno-39-88&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_head&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder_size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PREV_INUSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-89&#34;&gt;&lt;a id=&#34;__codelineno-39-89&#34; name=&#34;__codelineno-39-89&#34; href=&#34;#__codelineno-39-89&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_foot&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-90&#34;&gt;&lt;a id=&#34;__codelineno-39-90&#34; name=&#34;__codelineno-39-90&#34; href=&#34;#__codelineno-39-90&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-91&#34;&gt;&lt;a id=&#34;__codelineno-39-91&#34; name=&#34;__codelineno-39-91&#34; href=&#34;#__codelineno-39-91&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_malloced_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-92&#34;&gt;&lt;a id=&#34;__codelineno-39-92&#34; name=&#34;__codelineno-39-92&#34; href=&#34;#__codelineno-39-92&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk2mem&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-93&#34;&gt;&lt;a id=&#34;__codelineno-39-93&#34; name=&#34;__codelineno-39-93&#34; href=&#34;#__codelineno-39-93&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alloc_perturb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-94&#34;&gt;&lt;a id=&#34;__codelineno-39-94&#34; name=&#34;__codelineno-39-94&#34; href=&#34;#__codelineno-39-94&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-95&#34;&gt;&lt;a id=&#34;__codelineno-39-95&#34; name=&#34;__codelineno-39-95&#34; href=&#34;#__codelineno-39-95&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-39-96&#34;&gt;&lt;a id=&#34;__codelineno-39-96&#34; name=&#34;__codelineno-39-96&#34; href=&#34;#__codelineno-39-96&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了跳过空的 bin，维护了一个 bitmap，记录哪些 bin 会有内容。找到一个非空的 bin 以后，它的大小肯定是足够分配的，接下来就和之前一样，要么舍弃多余的空间，要么把多余的空间做成一个 chunk，插入到 unsorted bin 当中。&lt;/p&gt;&lt;p&gt;如果所有 bin 都空了，说明没有可以分配的可能了，就跳转到 &lt;code&gt;use_top&lt;/code&gt; 逻辑。&lt;/p&gt;&lt;h2 id=&#34;top-chunk-分配&#34;&gt;top chunk 分配&lt;a class=&#34;headerlink&#34; href=&#34;#top-chunk-分配&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果已有的 bin 都无法分配了，就尝试拆分 top chunk 来进行分配。top chunk 指的是当前堆里地址最高的那个 chunk，也可以理解为未分配的部分。分配的逻辑如下：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-40-1&#34;&gt;&lt;a id=&#34;__codelineno-40-1&#34; name=&#34;__codelineno-40-1&#34; href=&#34;#__codelineno-40-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;use_top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-2&#34;&gt;&lt;a id=&#34;__codelineno-40-2&#34; name=&#34;__codelineno-40-2&#34; href=&#34;#__codelineno-40-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-3&#34;&gt;&lt;a id=&#34;__codelineno-40-3&#34; name=&#34;__codelineno-40-3&#34; href=&#34;#__codelineno-40-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunksize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-4&#34;&gt;&lt;a id=&#34;__codelineno-40-4&#34; name=&#34;__codelineno-40-4&#34; href=&#34;#__codelineno-40-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-5&#34;&gt;&lt;a id=&#34;__codelineno-40-5&#34; name=&#34;__codelineno-40-5&#34; href=&#34;#__codelineno-40-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__glibc_unlikely&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system_mem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-6&#34;&gt;&lt;a id=&#34;__codelineno-40-6&#34; name=&#34;__codelineno-40-6&#34; href=&#34;#__codelineno-40-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc_printerr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;malloc(): corrupted top size&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-7&#34;&gt;&lt;a id=&#34;__codelineno-40-7&#34; name=&#34;__codelineno-40-7&#34; href=&#34;#__codelineno-40-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-8&#34;&gt;&lt;a id=&#34;__codelineno-40-8&#34; name=&#34;__codelineno-40-8&#34; href=&#34;#__codelineno-40-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MINSIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-9&#34;&gt;&lt;a id=&#34;__codelineno-40-9&#34; name=&#34;__codelineno-40-9&#34; href=&#34;#__codelineno-40-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-10&#34;&gt;&lt;a id=&#34;__codelineno-40-10&#34; name=&#34;__codelineno-40-10&#34; href=&#34;#__codelineno-40-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder_size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-11&#34;&gt;&lt;a id=&#34;__codelineno-40-11&#34; name=&#34;__codelineno-40-11&#34; href=&#34;#__codelineno-40-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk_at_offset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-12&#34;&gt;&lt;a id=&#34;__codelineno-40-12&#34; name=&#34;__codelineno-40-12&#34; href=&#34;#__codelineno-40-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-13&#34;&gt;&lt;a id=&#34;__codelineno-40-13&#34; name=&#34;__codelineno-40-13&#34; href=&#34;#__codelineno-40-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_head&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PREV_INUSE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-14&#34;&gt;&lt;a id=&#34;__codelineno-40-14&#34; name=&#34;__codelineno-40-14&#34; href=&#34;#__codelineno-40-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main_arena&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NON_MAIN_ARENA&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-15&#34;&gt;&lt;a id=&#34;__codelineno-40-15&#34; name=&#34;__codelineno-40-15&#34; href=&#34;#__codelineno-40-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_head&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remainder_size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PREV_INUSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-16&#34;&gt;&lt;a id=&#34;__codelineno-40-16&#34; name=&#34;__codelineno-40-16&#34; href=&#34;#__codelineno-40-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-17&#34;&gt;&lt;a id=&#34;__codelineno-40-17&#34; name=&#34;__codelineno-40-17&#34; href=&#34;#__codelineno-40-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_malloced_chunk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-18&#34;&gt;&lt;a id=&#34;__codelineno-40-18&#34; name=&#34;__codelineno-40-18&#34; href=&#34;#__codelineno-40-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk2mem&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;victim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-19&#34;&gt;&lt;a id=&#34;__codelineno-40-19&#34; name=&#34;__codelineno-40-19&#34; href=&#34;#__codelineno-40-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alloc_perturb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-20&#34;&gt;&lt;a id=&#34;__codelineno-40-20&#34; name=&#34;__codelineno-40-20&#34; href=&#34;#__codelineno-40-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-21&#34;&gt;&lt;a id=&#34;__codelineno-40-21&#34; name=&#34;__codelineno-40-21&#34; href=&#34;#__codelineno-40-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-22&#34;&gt;&lt;a id=&#34;__codelineno-40-22&#34; name=&#34;__codelineno-40-22&#34; href=&#34;#__codelineno-40-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-23&#34;&gt;&lt;a id=&#34;__codelineno-40-23&#34; name=&#34;__codelineno-40-23&#34; href=&#34;#__codelineno-40-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/* When we are using atomic ops to free fast chunks we can get&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-24&#34;&gt;&lt;a id=&#34;__codelineno-40-24&#34; name=&#34;__codelineno-40-24&#34; href=&#34;#__codelineno-40-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; here for all block sizes. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-25&#34;&gt;&lt;a id=&#34;__codelineno-40-25&#34; name=&#34;__codelineno-40-25&#34; href=&#34;#__codelineno-40-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;atomic_load_relaxed&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;have_fastchunks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-26&#34;&gt;&lt;a id=&#34;__codelineno-40-26&#34; name=&#34;__codelineno-40-26&#34; href=&#34;#__codelineno-40-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-27&#34;&gt;&lt;a id=&#34;__codelineno-40-27&#34; name=&#34;__codelineno-40-27&#34; href=&#34;#__codelineno-40-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc_consolidate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-28&#34;&gt;&lt;a id=&#34;__codelineno-40-28&#34; name=&#34;__codelineno-40-28&#34; href=&#34;#__codelineno-40-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* restore original bin index */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-29&#34;&gt;&lt;a id=&#34;__codelineno-40-29&#34; name=&#34;__codelineno-40-29&#34; href=&#34;#__codelineno-40-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in_smallbin_range&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-30&#34;&gt;&lt;a id=&#34;__codelineno-40-30&#34; name=&#34;__codelineno-40-30&#34; href=&#34;#__codelineno-40-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;smallbin_index&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-31&#34;&gt;&lt;a id=&#34;__codelineno-40-31&#34; name=&#34;__codelineno-40-31&#34; href=&#34;#__codelineno-40-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-32&#34;&gt;&lt;a id=&#34;__codelineno-40-32&#34; name=&#34;__codelineno-40-32&#34; href=&#34;#__codelineno-40-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;largebin_index&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-33&#34;&gt;&lt;a id=&#34;__codelineno-40-33&#34; name=&#34;__codelineno-40-33&#34; href=&#34;#__codelineno-40-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-34&#34;&gt;&lt;a id=&#34;__codelineno-40-34&#34; name=&#34;__codelineno-40-34&#34; href=&#34;#__codelineno-40-34&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-35&#34;&gt;&lt;a id=&#34;__codelineno-40-35&#34; name=&#34;__codelineno-40-35&#34; href=&#34;#__codelineno-40-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-36&#34;&gt;&lt;a id=&#34;__codelineno-40-36&#34; name=&#34;__codelineno-40-36&#34; href=&#34;#__codelineno-40-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; Otherwise, relay to handle system-dependent cases&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-37&#34;&gt;&lt;a id=&#34;__codelineno-40-37&#34; name=&#34;__codelineno-40-37&#34; href=&#34;#__codelineno-40-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-38&#34;&gt;&lt;a id=&#34;__codelineno-40-38&#34; name=&#34;__codelineno-40-38&#34; href=&#34;#__codelineno-40-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-39&#34;&gt;&lt;a id=&#34;__codelineno-40-39&#34; name=&#34;__codelineno-40-39&#34; href=&#34;#__codelineno-40-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-40&#34;&gt;&lt;a id=&#34;__codelineno-40-40&#34; name=&#34;__codelineno-40-40&#34; href=&#34;#__codelineno-40-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sysmalloc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-41&#34;&gt;&lt;a id=&#34;__codelineno-40-41&#34; name=&#34;__codelineno-40-41&#34; href=&#34;#__codelineno-40-41&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-42&#34;&gt;&lt;a id=&#34;__codelineno-40-42&#34; name=&#34;__codelineno-40-42&#34; href=&#34;#__codelineno-40-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alloc_perturb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-43&#34;&gt;&lt;a id=&#34;__codelineno-40-43&#34; name=&#34;__codelineno-40-43&#34; href=&#34;#__codelineno-40-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-40-44&#34;&gt;&lt;a id=&#34;__codelineno-40-44&#34; name=&#34;__codelineno-40-44&#34; href=&#34;#__codelineno-40-44&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果 top chunk 的空间够大，那就对 top chunk 进行拆分，低地址的部分分配出去，剩下的部分成为新的 top chunk。如果 top chunk 不够大，并且 fast bin 还有空间，那就再挣扎一下，consolidate 一下，重新分配一次。如果这些方法都失败了，那就调用 sysmalloc，通过 mmap 或者 sbrk 等方式来分配新的空间。&lt;/p&gt;&lt;p&gt;前面在讨论 consolidate 的时候，跳过了对 top chunk 的特殊处理。其实，top chunk 的特殊处理也很简单，如果当前空闲块的下一个块就是 top chunk，那就把当前空闲块合并到 top chunk 即可。&lt;/p&gt;&lt;h2 id=&#34;free_3&#34;&gt;free&lt;a class=&#34;headerlink&#34; href=&#34;#free_3&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;前面把 malloc 的流程基本分析完了，接下来分析一下 free 的逻辑，它做的事情包括：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;前面已经分析过，如果 tcache 对应的 bin 存在且非满，则把空闲块插入到 tcache 的链表头&lt;/li&gt;&lt;li&gt;如果存在对应的 fast bin，则插入空闲块到 fast bin 对应链表的头部&lt;/li&gt;&lt;li&gt;尝试和它前后的空闲块进行合并，实现和前面 consolidate 类似，合并后进入 unsorted bin&lt;/li&gt;&lt;li&gt;如果释放的内存比较多，检查 top chunk 大小，如果剩余的空间比较多，则归还一部分内存给操作系统&lt;/li&gt;&lt;li&gt;对于 mmap 分配的内存，用 munmap 释放掉&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;由于 free 的实现相对简单，在这里就不详细解析了，比较详细的实现分析见后。&lt;/p&gt;&lt;h2 id=&#34;realloc&#34;&gt;realloc&lt;a class=&#34;headerlink&#34; href=&#34;#realloc&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;realloc 的实现在 &lt;code&gt;__libc_realloc&lt;/code&gt; 当中，它的实现比较简单：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;如果重新分配的大小是 0，realloc 等价为 free，就调用 free&lt;/li&gt;&lt;li&gt;如果旧指针是 NULL，realloc 等价为 malloc，就调用 malloc&lt;/li&gt;&lt;li&gt;如果直接是 mmap 出来的块，利用 mremap 来扩展空间&lt;/li&gt;&lt;li&gt;如果是要申请更少的内存，把多出来的部分拆成一个单独的块，然后 free 掉它&lt;/li&gt;&lt;li&gt;如果是要申请更多的内存，尝试从内存更高地址的相邻块获取空间，如果有的话，合并两个块，然后把多余的空间拆成一个单独的块，然后 free 掉它；如果内存更高地址的相邻块已经被占用，就重新 malloc 一个块，用 memcpy 把数据拷贝过去，再 free 掉旧的内存&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;calloc&#34;&gt;calloc&lt;a class=&#34;headerlink&#34; href=&#34;#calloc&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;calloc 的实现在 &lt;code&gt;__libc_calloc&lt;/code&gt; 当中，它的语义相比 malloc 多了一个清零，所以它的实现也不复杂：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;如果 top chunk 还有空间，并且 top chunk 的数据已经被清零，则优先从 top chunk 分配空间，避免了 memset 的开销&lt;/li&gt;&lt;li&gt;fallback 到 &lt;code&gt;_int_malloc&lt;/code&gt; 进行内存分配，分配成功后，再 memset 清零&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;arena-和-heap&#34;&gt;arena 和 heap&lt;a class=&#34;headerlink&#34; href=&#34;#arena-和-heap&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;前面讨论了各种 chunk 在内存分配器内部流转的情况，但并没有讨论这些空间是怎么从操作系统分配而来的，又是怎么维护的。glibc 内存分配器实际上设计了两个层次：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;arena 层次：对应锁的粒度，一个 arena 可以对应多个 heap，有一个特殊的 arena 是 main_arena；arena 的数量有限制，在 64 位系统下默认的数量限制是处理器核心数的 8 倍，避免出现太多的内存碎片&lt;/li&gt;&lt;li&gt;heap 层次：每个 heap 大小有上限：&lt;code&gt;1024 * 1024&lt;/code&gt; 字节，也就是 1MB；当 arena 需要更多空间的时候，可以分配新的 heap；arena 自身就保存在 arena 的第一个 heap 内部的空间，同一个 arena 的多个 heap 之间通单向链表连接起来；arena 的 top chunk 指向最后一个创建的 heap 的顶部的空闲块&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;arena 的结构就是前面看到的 &lt;code&gt;malloc_state&lt;/code&gt;，包括如下字段：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-41-1&#34;&gt;&lt;a id=&#34;__codelineno-41-1&#34; name=&#34;__codelineno-41-1&#34; href=&#34;#__codelineno-41-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_state&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-2&#34;&gt;&lt;a id=&#34;__codelineno-41-2&#34; name=&#34;__codelineno-41-2&#34; href=&#34;#__codelineno-41-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-3&#34;&gt;&lt;a id=&#34;__codelineno-41-3&#34; name=&#34;__codelineno-41-3&#34; href=&#34;#__codelineno-41-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Serialize access. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-4&#34;&gt;&lt;a id=&#34;__codelineno-41-4&#34; name=&#34;__codelineno-41-4&#34; href=&#34;#__codelineno-41-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__libc_lock_define&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-5&#34;&gt;&lt;a id=&#34;__codelineno-41-5&#34; name=&#34;__codelineno-41-5&#34; href=&#34;#__codelineno-41-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-6&#34;&gt;&lt;a id=&#34;__codelineno-41-6&#34; name=&#34;__codelineno-41-6&#34; href=&#34;#__codelineno-41-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Flags (formerly in max_fast). */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-7&#34;&gt;&lt;a id=&#34;__codelineno-41-7&#34; name=&#34;__codelineno-41-7&#34; href=&#34;#__codelineno-41-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-8&#34;&gt;&lt;a id=&#34;__codelineno-41-8&#34; name=&#34;__codelineno-41-8&#34; href=&#34;#__codelineno-41-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-9&#34;&gt;&lt;a id=&#34;__codelineno-41-9&#34; name=&#34;__codelineno-41-9&#34; href=&#34;#__codelineno-41-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Set if the fastbin chunks contain recently inserted free blocks. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-10&#34;&gt;&lt;a id=&#34;__codelineno-41-10&#34; name=&#34;__codelineno-41-10&#34; href=&#34;#__codelineno-41-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Note this is a bool but not all targets support atomics on booleans. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-11&#34;&gt;&lt;a id=&#34;__codelineno-41-11&#34; name=&#34;__codelineno-41-11&#34; href=&#34;#__codelineno-41-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;have_fastchunks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-12&#34;&gt;&lt;a id=&#34;__codelineno-41-12&#34; name=&#34;__codelineno-41-12&#34; href=&#34;#__codelineno-41-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-13&#34;&gt;&lt;a id=&#34;__codelineno-41-13&#34; name=&#34;__codelineno-41-13&#34; href=&#34;#__codelineno-41-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Fastbins */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-14&#34;&gt;&lt;a id=&#34;__codelineno-41-14&#34; name=&#34;__codelineno-41-14&#34; href=&#34;#__codelineno-41-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mfastbinptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fastbinsY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NFASTBINS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-15&#34;&gt;&lt;a id=&#34;__codelineno-41-15&#34; name=&#34;__codelineno-41-15&#34; href=&#34;#__codelineno-41-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-16&#34;&gt;&lt;a id=&#34;__codelineno-41-16&#34; name=&#34;__codelineno-41-16&#34; href=&#34;#__codelineno-41-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Base of the topmost chunk -- not otherwise kept in a bin */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-17&#34;&gt;&lt;a id=&#34;__codelineno-41-17&#34; name=&#34;__codelineno-41-17&#34; href=&#34;#__codelineno-41-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunkptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-18&#34;&gt;&lt;a id=&#34;__codelineno-41-18&#34; name=&#34;__codelineno-41-18&#34; href=&#34;#__codelineno-41-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-19&#34;&gt;&lt;a id=&#34;__codelineno-41-19&#34; name=&#34;__codelineno-41-19&#34; href=&#34;#__codelineno-41-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* The remainder from the most recent split of a small request */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-20&#34;&gt;&lt;a id=&#34;__codelineno-41-20&#34; name=&#34;__codelineno-41-20&#34; href=&#34;#__codelineno-41-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunkptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-21&#34;&gt;&lt;a id=&#34;__codelineno-41-21&#34; name=&#34;__codelineno-41-21&#34; href=&#34;#__codelineno-41-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-22&#34;&gt;&lt;a id=&#34;__codelineno-41-22&#34; name=&#34;__codelineno-41-22&#34; href=&#34;#__codelineno-41-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Normal bins packed as described above */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-23&#34;&gt;&lt;a id=&#34;__codelineno-41-23&#34; name=&#34;__codelineno-41-23&#34; href=&#34;#__codelineno-41-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mchunkptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NBINS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-24&#34;&gt;&lt;a id=&#34;__codelineno-41-24&#34; name=&#34;__codelineno-41-24&#34; href=&#34;#__codelineno-41-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-25&#34;&gt;&lt;a id=&#34;__codelineno-41-25&#34; name=&#34;__codelineno-41-25&#34; href=&#34;#__codelineno-41-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Bitmap of bins */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-26&#34;&gt;&lt;a id=&#34;__codelineno-41-26&#34; name=&#34;__codelineno-41-26&#34; href=&#34;#__codelineno-41-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;binmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BINMAPSIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-27&#34;&gt;&lt;a id=&#34;__codelineno-41-27&#34; name=&#34;__codelineno-41-27&#34; href=&#34;#__codelineno-41-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-28&#34;&gt;&lt;a id=&#34;__codelineno-41-28&#34; name=&#34;__codelineno-41-28&#34; href=&#34;#__codelineno-41-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Linked list */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-29&#34;&gt;&lt;a id=&#34;__codelineno-41-29&#34; name=&#34;__codelineno-41-29&#34; href=&#34;#__codelineno-41-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_state&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-30&#34;&gt;&lt;a id=&#34;__codelineno-41-30&#34; name=&#34;__codelineno-41-30&#34; href=&#34;#__codelineno-41-30&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-31&#34;&gt;&lt;a id=&#34;__codelineno-41-31&#34; name=&#34;__codelineno-41-31&#34; href=&#34;#__codelineno-41-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Linked list for free arenas. Access to this field is serialized&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-32&#34;&gt;&lt;a id=&#34;__codelineno-41-32&#34; name=&#34;__codelineno-41-32&#34; href=&#34;#__codelineno-41-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; by free_list_lock in arena.c. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-33&#34;&gt;&lt;a id=&#34;__codelineno-41-33&#34; name=&#34;__codelineno-41-33&#34; href=&#34;#__codelineno-41-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;malloc_state&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-34&#34;&gt;&lt;a id=&#34;__codelineno-41-34&#34; name=&#34;__codelineno-41-34&#34; href=&#34;#__codelineno-41-34&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-35&#34;&gt;&lt;a id=&#34;__codelineno-41-35&#34; name=&#34;__codelineno-41-35&#34; href=&#34;#__codelineno-41-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Number of threads attached to this arena. 0 if the arena is on&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-36&#34;&gt;&lt;a id=&#34;__codelineno-41-36&#34; name=&#34;__codelineno-41-36&#34; href=&#34;#__codelineno-41-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; the free list. Access to this field is serialized by&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-37&#34;&gt;&lt;a id=&#34;__codelineno-41-37&#34; name=&#34;__codelineno-41-37&#34; href=&#34;#__codelineno-41-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; free_list_lock in arena.c. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-38&#34;&gt;&lt;a id=&#34;__codelineno-41-38&#34; name=&#34;__codelineno-41-38&#34; href=&#34;#__codelineno-41-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INTERNAL_SIZE_T&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;attached_threads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-39&#34;&gt;&lt;a id=&#34;__codelineno-41-39&#34; name=&#34;__codelineno-41-39&#34; href=&#34;#__codelineno-41-39&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-40&#34;&gt;&lt;a id=&#34;__codelineno-41-40&#34; name=&#34;__codelineno-41-40&#34; href=&#34;#__codelineno-41-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Memory allocated from the system in this arena. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-41&#34;&gt;&lt;a id=&#34;__codelineno-41-41&#34; name=&#34;__codelineno-41-41&#34; href=&#34;#__codelineno-41-41&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INTERNAL_SIZE_T&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system_mem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-42&#34;&gt;&lt;a id=&#34;__codelineno-41-42&#34; name=&#34;__codelineno-41-42&#34; href=&#34;#__codelineno-41-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INTERNAL_SIZE_T&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_system_mem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-41-43&#34;&gt;&lt;a id=&#34;__codelineno-41-43&#34; name=&#34;__codelineno-41-43&#34; href=&#34;#__codelineno-41-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里很多字段在之前已经见过了，比如：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;mutex&lt;/code&gt;：arena 的互斥锁&lt;/li&gt;&lt;li&gt;&lt;code&gt;have_fastchunks&lt;/code&gt;：记录 fast bin 中是否还有空闲块，用于判断是否需要 consolidate&lt;/li&gt;&lt;li&gt;&lt;code&gt;fastbinsY&lt;/code&gt;：保存 fast bin 每个 bin 的头指针的数组&lt;/li&gt;&lt;li&gt;&lt;code&gt;top&lt;/code&gt;：指向 top chunk&lt;/li&gt;&lt;li&gt;&lt;code&gt;last_remainder&lt;/code&gt;：指向最近一次 split 出来的空闲块，用于访存局部性优化&lt;/li&gt;&lt;li&gt;&lt;code&gt;bins&lt;/code&gt;：保存 unsorted bin，small bin 和 large bin 各个双向链表的哨兵结点的 &lt;code&gt;fd&lt;/code&gt; 和 &lt;code&gt;bk&lt;/code&gt; 指针&lt;/li&gt;&lt;li&gt;&lt;code&gt;binmap&lt;/code&gt;：记录哪些 small 或 large bin 里面有空闲块，用于加速寻找下一个有空闲块的 bin&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;之前没有涉及到的字段包括：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;flags&lt;/code&gt;: 维护 &lt;code&gt;NONCONTIGUOUS_BIT&lt;/code&gt; 标记，即 arena 所使用的内存是否是连续的，例如用 sbrk 分配出来的内存是连续的，用 mmap 则不是&lt;/li&gt;&lt;li&gt;&lt;code&gt;next&lt;/code&gt;: 维护所有 arena 的单向链表，链表头就是 &lt;code&gt;main_arena&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;next_free&lt;/code&gt;: 维护所有空闲的 arena 的单向链表 free list，链表头保存在 &lt;code&gt;static mstate free_list&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;attached_threads&lt;/code&gt;: 记录有多少个线程会使用这个 arena，类似于一种引用计数，当它减到零的时候，意味着 arena 可以被释放到 free list 了&lt;/li&gt;&lt;li&gt;&lt;code&gt;system_mem&lt;/code&gt;: 记录它从操作系统分配了多少的内存的大小&lt;/li&gt;&lt;li&gt;&lt;code&gt;max_system_mem&lt;/code&gt;：记录它历史上从操作系统分配最多的内存的大小&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;可见 arena 的结构还是比较简单的，接下来分析 heap 的结构：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-42-1&#34;&gt;&lt;a id=&#34;__codelineno-42-1&#34; name=&#34;__codelineno-42-1&#34; href=&#34;#__codelineno-42-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;_heap_info&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-42-2&#34;&gt;&lt;a id=&#34;__codelineno-42-2&#34; name=&#34;__codelineno-42-2&#34; href=&#34;#__codelineno-42-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-42-3&#34;&gt;&lt;a id=&#34;__codelineno-42-3&#34; name=&#34;__codelineno-42-3&#34; href=&#34;#__codelineno-42-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mstate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ar_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Arena for this heap. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-42-4&#34;&gt;&lt;a id=&#34;__codelineno-42-4&#34; name=&#34;__codelineno-42-4&#34; href=&#34;#__codelineno-42-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;_heap_info&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Previous heap. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-42-5&#34;&gt;&lt;a id=&#34;__codelineno-42-5&#34; name=&#34;__codelineno-42-5&#34; href=&#34;#__codelineno-42-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Current size in bytes. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-42-6&#34;&gt;&lt;a id=&#34;__codelineno-42-6&#34; name=&#34;__codelineno-42-6&#34; href=&#34;#__codelineno-42-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mprotect_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Size in bytes that has been mprotected&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-42-7&#34;&gt;&lt;a id=&#34;__codelineno-42-7&#34; name=&#34;__codelineno-42-7&#34; href=&#34;#__codelineno-42-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; PROT_READ|PROT_WRITE. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-42-8&#34;&gt;&lt;a id=&#34;__codelineno-42-8&#34; name=&#34;__codelineno-42-8&#34; href=&#34;#__codelineno-42-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Make sure the following data is properly aligned, particularly&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-42-9&#34;&gt;&lt;a id=&#34;__codelineno-42-9&#34; name=&#34;__codelineno-42-9&#34; href=&#34;#__codelineno-42-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-42-10&#34;&gt;&lt;a id=&#34;__codelineno-42-10&#34; name=&#34;__codelineno-42-10&#34; href=&#34;#__codelineno-42-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; MALLOC_ALIGNMENT. */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-42-11&#34;&gt;&lt;a id=&#34;__codelineno-42-11&#34; name=&#34;__codelineno-42-11&#34; href=&#34;#__codelineno-42-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;-6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SIZE_SZ&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MALLOC_ALIGN_MASK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-42-12&#34;&gt;&lt;a id=&#34;__codelineno-42-12&#34; name=&#34;__codelineno-42-12&#34; href=&#34;#__codelineno-42-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heap_info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;字段如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;ar_ptr&lt;/code&gt;：指向 heap 所属的 arena&lt;/li&gt;&lt;li&gt;&lt;code&gt;prev&lt;/code&gt;：指向前一个 heap，组成一个 heap 的单向链表，新添加的 heap 放到链表的尾部&lt;/li&gt;&lt;li&gt;&lt;code&gt;size&lt;/code&gt;: heap 的大小&lt;/li&gt;&lt;li&gt;&lt;code&gt;mprotect_size&lt;/code&gt;: heap 被设置为可读写的部分的内存大小，也就是 heap 的活跃部分大小，对齐到页的边界；默认情况下，heap 的未分配空间被映射为不可读不可写不可执行的属性&lt;/li&gt;&lt;li&gt;&lt;code&gt;pad&lt;/code&gt;: 添加 padding，保证它的大小是 &lt;code&gt;MALLOC_ALIGNMENT&lt;/code&gt; 的倍数&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;前面提到过，arena 的空间会复用它的第一个 heap 的空间，紧接着放在 &lt;code&gt;heap_info&lt;/code&gt; 结构体的后面。这个 &lt;code&gt;heap_info&lt;/code&gt; 结构体就放在 heap 所用空间的开头。&lt;/p&gt;&lt;p&gt;heap 有一个特性，就是它的起始地址，一定是对齐到 &lt;code&gt;HEAP_MAX_SIZE&lt;/code&gt;（默认是 64MB）的整数倍数，并且它的大小也不会超过 &lt;code&gt;HEAP_MAX_SIZE&lt;/code&gt;，所以如果要知道某个 chunk 属于哪个 heap，只需要向下取整到 &lt;code&gt;HEAP_MAX_SIZE&lt;/code&gt; 的倍数即可。如果要知道某个 chunk 属于哪个 arena，就先找到 heap，再从 heap_info 获取 ar_ptr 就可以了。&lt;/p&gt;&lt;p&gt;比较有意思的一个点是，heap 保存了 arena 的指针，但是反过来，arena 并没有保存 heap 的指针，那么怎么从 arena 找到属于这个 arena 的所有 heap 呢？这会用到一个性质：arena 的 top 永远指向最新的一个 heap 的地址最高的空闲块，而这个最新的 heap 正好处于 heap 链表的尾部，所以如果要遍历 arena 里的 heap，只需要：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;获取 arena 的 top 指针&lt;/li&gt;&lt;li&gt;把 top 指针向下取整到 &lt;code&gt;HEAP_MAX_SIZE&lt;/code&gt; 的整倍数，得到 top 所在 heap 的 heap_info 指针&lt;/li&gt;&lt;li&gt;沿着 heap_info 的 prev 指针向前走，一直遍历，直到 prev 指针为 NULL 为止&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;所以 top 指针也充当了 heap 链表的尾指针的作用。&lt;/p&gt;&lt;p&gt;接下来观察 arena 和 heap 是怎么初始化的。&lt;/p&gt;&lt;p&gt;main arena 是特殊的，因为它直接保存在 glibc 的 data 段当中，所以不需要动态分配，并且 main arena 的数据是通过 sbrk 从系统分配的，它的维护逻辑在 &lt;code&gt;sysmalloc&lt;/code&gt; 函数中实现：当 malloc 尝试各种办法都找不到空间分配时，就会调用 &lt;code&gt;sysmalloc&lt;/code&gt; 来扩展 top chunk 并从 top chunk 中分配新的块。当 &lt;code&gt;sysmalloc&lt;/code&gt; 遇到 main arena 的时候，就会尝试用 sbrk 扩展堆的大小，从而扩大 top chunk。当然了，sbrk 可能会失败，这个时候 main arena 也会通过 mmap 来分配更多的内存。&lt;/p&gt;&lt;p&gt;其他的 arena 则是通过 &lt;code&gt;_int_new_arena&lt;/code&gt; 分配的，它的流程是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;调用 &lt;code&gt;new_heap&lt;/code&gt; 创建一个堆，至少能够放 &lt;code&gt;heap_info&lt;/code&gt; 和 &lt;code&gt;malloc_state&lt;/code&gt; 的空间&lt;/li&gt;&lt;li&gt;这段空间的开头就是 &lt;code&gt;heap_info&lt;/code&gt;，紧随其后就是 arena 自己的 &lt;code&gt;malloc_state&lt;/code&gt;，然后把 top chunk 指向 &lt;code&gt;malloc_state&lt;/code&gt; 后面的空闲空间&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;code&gt;new_heap&lt;/code&gt; 则是会通过 &lt;code&gt;mmap&lt;/code&gt; 向操作系统申请内存。因此除了 main_arena 以外，所有的 arena 的 heap 都会放在 mmap 出来的空间里。&lt;/p&gt;&lt;p&gt;于是 &lt;code&gt;sysmalloc&lt;/code&gt; 要做的事情也比较清晰了，它要做的就是，在 top chunk 不够大的时候，分配更多空间给 top chunk：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;如果要分配的块特别大，超出了阈值 &lt;code&gt;mmap_threshold&lt;/code&gt;，就直接用 mmap 申请内存&lt;/li&gt;&lt;li&gt;如果不是 main arena，就尝试扩大 top 所在的 heap：heap 在初始化的时候，虽然会 mmap 一个 &lt;code&gt;HEAP_MAX_SIZE&lt;/code&gt; 大小的内存，但大部分空间都被映射为不可读不可写不可执行；所以扩大 heap，实际上就是把要用的部分通过 mprotect 添加可读和可写的权限；如果 heap 达到了大小的上限，那就新建一个 heap，把 top chunk 放到新的 heap 上去&lt;/li&gt;&lt;li&gt;如果是 main arena，就用 sbrk 扩大 top chunk；如果扩大失败，那就用 mmap 来分配内存&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;小结&#34;&gt;小结&lt;a class=&#34;headerlink&#34; href=&#34;#小结&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;结构&#34;&gt;结构&lt;a class=&#34;headerlink&#34; href=&#34;#结构&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;到这里就基本把 glibc 的内存分配器分析得差不多了。glibc 把空闲块放在如下四种 bin 内：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;fast bin: 每个 bin 对应固定大小的空闲块，用单向链表维护，链表头指针保存在 &lt;code&gt;malloc_state&lt;/code&gt; 的 &lt;code&gt;fastbinsY&lt;/code&gt; 成员&lt;/li&gt;&lt;li&gt;unsorted bin: 一个双向链表，维护一些刚被 free 的空闲块，无大小要求，链表的哨兵结点保存在 &lt;code&gt;malloc_state&lt;/code&gt; 的 &lt;code&gt;bins&lt;/code&gt; 成员刚开头&lt;/li&gt;&lt;li&gt;small bin: 每个 bin 对应固定大小的空闲块，用双向链表维护，链表的哨兵结点保存在 &lt;code&gt;malloc_state&lt;/code&gt; 的 &lt;code&gt;bins&lt;/code&gt; 成员，紧接在 unsorted bin 后面&lt;/li&gt;&lt;li&gt;large bin: 每个 bin 对应一段大小范围的空闲块，用双向链表维护，按照块大小从大到小排序，每个大小的第一个空闲块在 nextsize 双向链表当中，链表的哨兵结点保存在 &lt;code&gt;malloc_state&lt;/code&gt; 的 &lt;code&gt;bins&lt;/code&gt; 成员中，紧接在 small bin 后面&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;除了这四种 bin 以外，还有一个 per thread 的 tcache 机制，结构和 fast bin 类似，每个 bin 对应固定大小的空闲块，用单向链表维护，链表头指针保存在 &lt;code&gt;tcache&lt;/code&gt; 的 &lt;code&gt;entries&lt;/code&gt; 成员。&lt;/p&gt;&lt;p&gt;内存在分配器中流转的过程大致如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;一开始从 top chunk 当中被分配出来&lt;/li&gt;&lt;li&gt;被 free 了以后，进入 tcache，或者 fast bin，或者合并后放到 unsorted bin，或者合并到 top chunk&lt;/li&gt;&lt;li&gt;在 malloc 的时候，从 tcache 或者 fast bin 分配，又或者从 unsorted bin 中取出，放到 small bin 或 large bin，中途可能被分配、拆分或者合并&lt;/li&gt;&lt;/ol&gt;&lt;pre class=&#34;mermaid&#34;&gt;&lt;code&gt;flowchart TD top_chunk[top chunk] user[user allocated] tcache fast_bin[fast bin] small_bin[small bin] large_bin[large bin] unsorted_bin[unsorted bin] top_chunk --&amp;gt;|malloc| user tcache --&amp;gt;|malloc| user fast_bin --&amp;gt;|malloc| user fast_bin --&amp;gt;|malloc| tcache fast_bin --&amp;gt;|consolidate| unsorted_bin fast_bin --&amp;gt;|consolidate| top_chunk small_bin --&amp;gt;|malloc| user small_bin --&amp;gt;|malloc| tcache large_bin --&amp;gt;|malloc| user large_bin --&amp;gt;|malloc| unsorted_bin unsorted_bin --&amp;gt;|malloc| user unsorted_bin --&amp;gt;|malloc| tcache unsorted_bin --&amp;gt;|malloc| small_bin unsorted_bin --&amp;gt;|malloc| large_bin user --&amp;gt;|free| tcache user --&amp;gt;|free| fast_bin user --&amp;gt;|free| unsorted_bin user --&amp;gt;|free| top_chunk small_bin --&amp;gt;|free| unsorted_bin large_bin --&amp;gt;|free| unsorted_bin&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;malloc_5&#34;&gt;malloc&lt;a class=&#34;headerlink&#34; href=&#34;#malloc_5&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;malloc 的完整流程图如下：&lt;/p&gt;&lt;pre class=&#34;mermaid&#34;&gt;&lt;code&gt;---config: theme: base themeVariables: fontSize: &#34;30px&#34;---flowchart TD malloc[malloc 入口（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3022&#34;&amp;gt;malloc.c:3022&amp;lt;/a&amp;gt;）] tcache[尝试从 tcache 中分配空闲块（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3047&#34;&amp;gt;malloc.c:3047&amp;lt;/a&amp;gt;）] fastbin[尝试从 fast bin 中分配空闲块（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3577&#34;&amp;gt;malloc.c:3577&amp;lt;/a&amp;gt;）] fastbin_migrate[如果 fast bin 还有空闲块且 tcache 没有满，则把空闲块从 fast bin 挪到 tcache（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3596&#34;&amp;gt;malloc.c:3596&amp;lt;/a&amp;gt;）] smallbin[尝试从 small bin 中分配空闲块（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3635&#34;&amp;gt;malloc.c:3635&amp;lt;/a&amp;gt;）] smallbin_migrate[如果 small bin 还有空闲块且 tcache 没有满，则把空闲块从 small bin 挪到 tcache（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3652&#34;&amp;gt;malloc.c:3652&amp;lt;/a&amp;gt;）] malloc_ret[malloc 结束] consolidate[consolidate：遍历 fast bin，把空闲块和相邻的空闲块合并，插入到 unsorted bin（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L4440&#34;&amp;gt;malloc.c:4440&amp;lt;/a&amp;gt;）] consolidate_2[consolidate：遍历 fast bin，把空闲块和相邻的空闲块合并，插入到 unsorted bin（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L4440&#34;&amp;gt;malloc.c:4440&amp;lt;/a&amp;gt;）] check_large[块大小是否对应 large bin（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3695&#34;&amp;gt;malloc.c:3695&amp;lt;/a&amp;gt;）] loop[开始循环（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3725&#34;&amp;gt;malloc.c:3725&amp;lt;/a&amp;gt;）] unsorted_bin[遍历 unsorted bin（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3728&#34;&amp;gt;malloc.c:3728&amp;lt;/a&amp;gt;）] remainder[内存局部性优化：最近一次 split 出来的 chunk 是否有足够的空间分配（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3756&#34;&amp;gt;malloc.c:3756&amp;lt;/a&amp;gt;）] remainder_success[拆分这个 chunk 以完成分配（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3761&#34;&amp;gt;malloc.c:3761&amp;lt;/a&amp;gt;）] remove_unsorted_bin[把当前 chunk 从 unsorted bin 中删除（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3784&#34;&amp;gt;malloc.c:3784&amp;lt;/a&amp;gt;）] check_same_size[当前空闲块大小和要分配的大小是否相同（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3792&#34;&amp;gt;malloc.c:3792&amp;lt;/a&amp;gt;）] check_tcache_full[tcache bin 是否已满（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3800&#34;&amp;gt;malloc.c:3800&amp;lt;/a&amp;gt;）] alloc_now[分配当前空闲块（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3807&#34;&amp;gt;malloc.c:3807&amp;lt;/a&amp;gt;）] move_to_tcache[把当前空闲块挪到 tcache（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3803&#34;&amp;gt;malloc.c:3803&amp;lt;/a&amp;gt;）] move_to_bin[根据当前空闲块的大小，挪到 small bin 或 large bin（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3821&#34;&amp;gt;malloc.c:3821&amp;lt;/a&amp;gt;）] check_tcache[检查 tcache 是否有空闲块（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3891&#34;&amp;gt;malloc.c:3891&amp;lt;/a&amp;gt;）] alloc_tcache[从 tcache 分配空闲块] unsorted_bin_exit[检查 tcache 是否有空闲块（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3906&#34;&amp;gt;malloc.c:3906&amp;lt;/a&amp;gt;）] check_large_alloc[块大小是否对应 large bin（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3917&#34;&amp;gt;malloc.c:3917&amp;lt;/a&amp;gt;）] alloc_large[尝试从 large bin 中分配空闲块（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3922&#34;&amp;gt;malloc.c:3922&amp;lt;/a&amp;gt;）] alloc_larger[遍历更大的 bin，尝试分配空闲块（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L3990&#34;&amp;gt;malloc.c:3990&amp;lt;/a&amp;gt;）] alloc_top[尝试从 top chunk 分配空闲块（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L4087&#34;&amp;gt;malloc.c:4087&amp;lt;/a&amp;gt;）] alloc_system[从系统请求更多内存来分配空闲块（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L4139&#34;&amp;gt;malloc.c:4139&amp;lt;/a&amp;gt;）] check_fast[fast bin 是否有空闲块（&amp;lt;a href=&#34;https://github.com/bminor/glibc/blob/glibc-2.31/malloc/malloc.c#L4126&#34;&amp;gt;malloc.c:4126&amp;lt;/a&amp;gt;）] malloc --&amp;gt; tcache tcache --&amp;gt;|分配成功| malloc_ret tcache --&amp;gt;|分配失败| fastbin fastbin --&amp;gt;|分配失败| smallbin fastbin --&amp;gt;|分配成功| fastbin_migrate  fastbin_migrate --&amp;gt; malloc_ret smallbin --&amp;gt;|分配成功| smallbin_migrate smallbin_migrate --&amp;gt; malloc_ret smallbin --&amp;gt;|分配失败| check_large check_large --&amp;gt;|是| consolidate check_large --&amp;gt;|否| loop consolidate --&amp;gt; loop loop --&amp;gt; unsorted_bin unsorted_bin --&amp;gt;|unsorted bin 非空，或者循环次数不足 10000 次| remainder remainder --&amp;gt;|是| remainder_success remainder_success --&amp;gt; malloc_ret remainder --&amp;gt;|否| remove_unsorted_bin remove_unsorted_bin --&amp;gt; check_same_size check_same_size --&amp;gt;|是| check_tcache_full check_tcache_full --&amp;gt;|否| move_to_tcache check_tcache_full --&amp;gt; |是| alloc_now alloc_now --&amp;gt; malloc_ret move_to_tcache --&amp;gt; unsorted_bin check_same_size --&amp;gt;|否| move_to_bin move_to_bin --&amp;gt; check_tcache check_tcache --&amp;gt;|是| alloc_tcache alloc_tcache --&amp;gt; malloc_ret check_tcache --&amp;gt;|否| unsorted_bin unsorted_bin --&amp;gt;|unsorted bin 已空，或者循环次数超过 10000 次| unsorted_bin_exit unsorted_bin_exit --&amp;gt;|是| alloc_tcache unsorted_bin_exit --&amp;gt;|否| check_large_alloc check_large_alloc --&amp;gt;|是| alloc_large alloc_large --&amp;gt;|分配成功| malloc_ret alloc_large --&amp;gt;|分配失败| alloc_larger check_large_alloc --&amp;gt;|否| alloc_larger alloc_larger --&amp;gt;|分配成功| malloc_ret alloc_larger --&amp;gt;|分配失败| alloc_top alloc_top --&amp;gt;|分配成功| malloc_ret alloc_top --&amp;gt;|分配失败| check_fast check_fast --&amp;gt;|是| consolidate_2 consolidate_2 --&amp;gt; loop check_fast --&amp;gt;|否| alloc_system alloc_system --&amp;gt; malloc_ret&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;前面分段整理了 malloc 的实现，在这里列出完整的 malloc 流程：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;malloc 的入口是 &lt;code&gt;__libc_malloc (size_t bytes)&lt;/code&gt; 函数&lt;/li&gt;&lt;li&gt;如果配置了 malloc hook，则调用 malloc hook，直接返回结果&lt;/li&gt;&lt;li&gt;根据用户传入的 malloc 的字节数（&lt;code&gt;bytes&lt;/code&gt;），用 &lt;code&gt;checked_request2size&lt;/code&gt; 计算出实际的 chunk 大小，算法是先加上 &lt;code&gt;sizeof(size_t)&lt;/code&gt;（给 &lt;code&gt;mchunk_size&lt;/code&gt; 预留空间），然后向上对齐到 &lt;code&gt;MALLOC_ALIGNMENT&lt;/code&gt;（通常是 &lt;code&gt;2 * sizeof(size_t)&lt;/code&gt;）的倍数，再和 &lt;code&gt;MINSIZE&lt;/code&gt; 取 max，其中 &lt;code&gt;MINSIZE&lt;/code&gt; 通常是 &lt;code&gt;4 * sizeof(size_t)&lt;/code&gt;，因为空闲块至少要保存两个 size 加上双向链表的 &lt;code&gt;fd&lt;/code&gt; 和 &lt;code&gt;bk&lt;/code&gt; 指针&lt;/li&gt;&lt;li&gt;如果 tcache 还没初始化，就初始化 tcache&lt;/li&gt;&lt;li&gt;根据 chunk 大小，计算 tcache index，检查对应的 bin 是否有空闲块；如果有，直接分配空闲块并返回&lt;/li&gt;&lt;li&gt;接着获取一个 arena，如有必要，获取 arena 的锁；在单线程情况下，只有一个 main_arena；多线程情况下，每个线程有一个默认的 arena 指针（&lt;code&gt;static __thread mstate thread_arena&lt;/code&gt;），在遇到 lock contention 的时候可以动态切换&lt;/li&gt;&lt;li&gt;进入 &lt;code&gt;_int_malloc&lt;/code&gt; 从 arena 中分配一个 chunk，分配完成后释放 arena 的锁&lt;/li&gt;&lt;li&gt;接着分析 &lt;code&gt;_int_malloc&lt;/code&gt; 的实现，除 tcache 以外的大部分逻辑都在 &lt;code&gt;_int_malloc&lt;/code&gt; 函数中&lt;/li&gt;&lt;li&gt;判断 chunk size 大小，如果对应 fast bin 的块大小，在对应的 fast bin 的单向链表中寻找空闲块；如果链表非空，则取出链表头的空闲块，作为分配给 malloc 调用者的块，接着把 fast bin 链表上剩余的空闲块挪到 tcache 当中，直到 fast bin 链表空或者 tcache 满为止，然后函数结束&lt;/li&gt;&lt;li&gt;判断 chunk size 大小，如果对应 small bin 的块大小，在对应的 small bin 的双向链表中寻找空闲块；如果链表非空，则取出链表尾的空闲块，作为分配给 malloc 调用者的块，接着把 small bin 链表上剩余的空闲块挪到 tcache 当中，直到 small bin 链表空或者 tcache 满为止，然后函数结束&lt;/li&gt;&lt;li&gt;判断 chunk size 大小，如果对应 large bin 的块大小，则进行一次 malloc_consolidate：遍历 fast bin 每一个 bin 的每一个空闲块，尝试把它和内存上相邻的前后空闲块合并，合并后的空闲块放入 unsorted bin；特别地，如果空闲块和 top chunk 相邻，就会直接合并到 top chunk，这样就不需要把空闲块放入 unsorted bin&lt;/li&gt;&lt;li&gt;开始一个大的无限循环 &lt;code&gt;for (;;)&lt;/code&gt;，如果后续尝试各种方式都分配不成功，但是 fast bin 还有空闲块，在 malloc_consolidate 后会从这里开始再尝试一次分配&lt;/li&gt;&lt;li&gt;遍历 unsorted bin，最多处理 10000 个空闲块：&lt;ol&gt;&lt;li&gt;如果空闲块的大小对应 small bin，并且它是最近刚 split 出来的空闲块，并且可以放得下要分配的块，就原地把这个空闲块进行拆分，前面的部分是分配给 malloc 调用者的块，后面的部分则放回到 unsorted bin，然后函数结束&lt;/li&gt;&lt;li&gt;把空闲块从 unsorted bin 链表中删除&lt;/li&gt;&lt;li&gt;如果空闲块的大小正好是要分配的块的大小，判断 tcache 是否还有空间；如果 tcache 已经满了，直接把这个空闲块作为分配给 malloc 调用者的块，然后函数结束；如果 tcache 还没满，则先把空闲块挪到 tcache 当中，继续处理 unsorted bin 的其他空闲块，这样做的目的是尽量把 tcache 填满&lt;/li&gt;&lt;li&gt;根据空闲块的大小，插入到对应的 small bin 或者 large bin 当中&lt;/li&gt;&lt;li&gt;记录插入到 small bin 或者 large bin 的空闲块个数，如果超过了阈值，并且之前已经找到一个空闲块的大小正好是要分配的块的大小，同时挪到了 tcache 当中，则立即把这个空闲块从 tcache 中取出并分配给 malloc 调用者，然后函数结束；这样做的目的是避免处理太多无关的 unsorted bin 中的空闲块，导致 malloc 调用时间过长&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;如果在遍历 unsorted bin 过程中找到了和要分配的块一样大的空闲块，那么这个空闲块已经在 tcache 当中了，则立即把这个空闲块从 tcache 中取出并分配给 malloc 调用者，然后函数结束&lt;/li&gt;&lt;li&gt;判断 chunk size 大小，如果属于 large bin 的块大小，则找到对应的 large bin，从小到大通过 nextsize 链表遍历 large bin 中的空闲块，找到一个足够大的空闲块，对它进行拆分，前面的部分是分配给 malloc 调用者的块，后面的部分则放回到 unsorted bin，然后函数结束&lt;/li&gt;&lt;li&gt;根据 chunk size 大小，找到对应的 small bin 或者 large bin，然后从小到大遍历各个 bin（可能从 small bin 一路遍历到 large bin），通过 bitmap 跳过那些空的 bin，找到第一个非空的 bin 的空闲块，对它进行拆分，前面的部分是分配给 malloc 调用者的块，后面的部分则放回到 unsorted bin，然后函数结束&lt;/li&gt;&lt;li&gt;如果 top chunk 足够大，则对它进行拆分，前面的部分是分配给 malloc 调用者的块，后面的部分成为新的 top chunk，然后函数结束&lt;/li&gt;&lt;li&gt;如果此时 fast bin 有空闲块，调用 malloc_consolidate，然后回到无限循环的开头再尝试一次分配&lt;/li&gt;&lt;li&gt;最后的兜底分配方法：调用 &lt;code&gt;sysmalloc&lt;/code&gt;，通过 mmap 或 sbrk 向操作系统申请更多的内存&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;free_4&#34;&gt;free&lt;a class=&#34;headerlink&#34; href=&#34;#free_4&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在这里列出完整的 free 流程：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;free 的入口是 &lt;code&gt;__libc_free (void *mem)&lt;/code&gt; 函数&lt;/li&gt;&lt;li&gt;如果配置了 free hook，则调用 free hook，直接返回&lt;/li&gt;&lt;li&gt;如果是调用 &lt;code&gt;free(NULL)&lt;/code&gt;，直接返回&lt;/li&gt;&lt;li&gt;检查 &lt;code&gt;mchunk_size&lt;/code&gt; 的 &lt;code&gt;IS_MAPPED&lt;/code&gt; 字段，如果它之前是通过 mmap 分配的，那么对它进行 munmap，然后返回&lt;/li&gt;&lt;li&gt;如果 tcache 还没初始化，就初始化 tcache&lt;/li&gt;&lt;li&gt;找到这个 chunk 从哪个 arena 分配的：检查 &lt;code&gt;mchunk_size&lt;/code&gt; 的 &lt;code&gt;NON_MAIN_ARENA&lt;/code&gt; 字段，如果它不是从 main arena 分配的，则根据 chunk 的地址，找到 heap 的地址（heap 的大小是有上限的，并且 heap 的起始地址是对齐到 &lt;code&gt;HEAP_MAX_SIZE&lt;/code&gt; 的整倍数边界的），再根据 heap 开头的 heap_info 找到 arena 的地址&lt;/li&gt;&lt;li&gt;进入 &lt;code&gt;_int_free&lt;/code&gt;，接着分析 &lt;code&gt;_int_free&lt;/code&gt; 的实现&lt;/li&gt;&lt;li&gt;根据 chunk size 找到对应的 tcache bin，如果它还没有满，则把空闲块放到 tcache 当中，然后返回&lt;/li&gt;&lt;li&gt;判断 chunk size 大小，如果对应 fast bin 的块大小，把空闲块放到对应的 fast bin 的单向链表中，然后返回；注意此时没有获取 arena 的锁，所以 fast bin 的操作会用到原子指令，同理 malloc 中对 fast bin 的操作也要用到原子指令，即使 malloc 持有了 arena 的锁&lt;/li&gt;&lt;li&gt;获取 arena 的锁，尝试把空闲块和在内存中相邻的前后空闲块进行合并，合并后的空闲块放入 unsorted bin；合并时，如果被合并的空闲块已经在 small bin 或者 large bin 当中，利用双向链表的特性，把它从双向链表中删除；如果和 top chunk 相邻，则可以直接合并到 top chunk 上，然后返回&lt;/li&gt;&lt;li&gt;如果释放的块比较大，超过了阈值，则触发一次 malloc_consolidate&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;各种常量的默认值&#34;&gt;各种常量的默认值&lt;a class=&#34;headerlink&#34; href=&#34;#各种常量的默认值&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;下面给出 glibc 内存分配器各常量在 64 位下的默认值：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;MALLOC_ALIGNMENT = max(2 * SIZE_SZ, __alignof__ (long double))&lt;/code&gt; 等于 16&lt;/li&gt;&lt;li&gt;&lt;code&gt;MIN_CHUNK_SIZE = offsetof(struct malloc_chunk, fd_nextsize)&lt;/code&gt; 等于 32&lt;/li&gt;&lt;li&gt;&lt;code&gt;MINSIZE = alignUp(MIN_CHUNK_SIZE, MALLOC_ALIGNMENT)&lt;/code&gt; 等于 32&lt;/li&gt;&lt;li&gt;&lt;code&gt;MAX_FAST_SIZE = 80 * SIZE_SZ / 4&lt;/code&gt; 等于 160&lt;/li&gt;&lt;li&gt;&lt;code&gt;NSMALLBINS = 64&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;MIN_LARGE_SIZE = (NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH&lt;/code&gt; 等于 1024&lt;/li&gt;&lt;li&gt;&lt;code&gt;DEFAULT_MMAP_THRESHOLD_MIN = 128 * 1024&lt;/code&gt; 即 128KB&lt;/li&gt;&lt;li&gt;&lt;code&gt;DEFAULT_MMAP_THRESHOLD_MAX = 4 * 1024 * 1024 * sizeof(long)&lt;/code&gt; 即 32MB&lt;/li&gt;&lt;li&gt;&lt;code&gt;HEAP_MIN_SIZE = 32 * 1024&lt;/code&gt; 即 32KB&lt;/li&gt;&lt;li&gt;&lt;code&gt;HEAP_MAX_SIZE = 2 * DEFAULT_MMAP_THRESHOLD_MAX&lt;/code&gt; 即 64MB&lt;/li&gt;&lt;li&gt;&lt;code&gt;TCACHE_MAX_BINS = 64&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;TCACHE_FILL_COUNT = 7&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;NFASTBINS = fastbin_index(request2size(MAX_FAST_SIZE)) + 1&lt;/code&gt; 即 10&lt;/li&gt;&lt;li&gt;&lt;code&gt;NBINS = 128&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;DEFAULT_MXFAST = 64 * sizeof(size_t) / 4&lt;/code&gt; 即 128&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;默认情况下各个 bin 负责的块大小范围：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;tcache: 块大小不超过 1040 字节，对应 &lt;code&gt;malloc(1032)&lt;/code&gt; 或更小&lt;/li&gt;&lt;li&gt;fast bin: 块大小不超过 128 字节，对应 &lt;code&gt;malloc(120)&lt;/code&gt; 或更小&lt;/li&gt;&lt;li&gt;small bin: 块大小不超过 1008 字节，对应 &lt;code&gt;malloc(1000)&lt;/code&gt; 或更小&lt;/li&gt;&lt;li&gt;large bin: 块大小不小于 1024 字节，不超过 131056 字节，对应 &lt;code&gt;malloc(1001)&lt;/code&gt; 到 &lt;code&gt;malloc(131048)&lt;/code&gt; 的范围，更大的内存分配会直接走 mmap&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;性能优化&#34;&gt;性能优化&lt;a class=&#34;headerlink&#34; href=&#34;#性能优化&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;简单总结一下 glibc 内存分配器的各种性能优化特性：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;tcache 作为一个 thread local 的结构，不需要锁，性能是最好的，所以尽量把空闲块都丢到 tcache 里面，无论是刚 free 的空闲块，还是在 malloc 过程中，顺带把一些空闲块从 fast bin 或者 small bin 丢到 tcache 里，这样也减少了 lock arena 的次数&lt;/li&gt;&lt;li&gt;fast bin 虽然不再是 thread local，但它在 free 路径上使用原子指令来代替锁，使得 free 在很多时候不需要获取 arena 的锁；而把 fast bin 的空闲块的合并操作挪到 malloc 中进行，此时 arena 的锁是 lock 状态，尽量在一次 lock 的临界区里做更多的事情，减少 lock 的次数&lt;/li&gt;&lt;li&gt;small bin 和 large bin 的区分，主要是考虑到了分配的块的大小分布，越大倾向于越稀疏；代价是 large bin 需要额外维护 nextsize 链表来快速地寻找不同大小的空闲块&lt;/li&gt;&lt;li&gt;在回收 unsorted bin 的时候，会进行一个内存局部性优化，即倾向于连续地从同一个块中切出小块用于分配，适合在循环中分配内存的场景&lt;/li&gt;&lt;li&gt;回收 unsorted bin 时，如果遇到了正好和要分配的块大小相同的空闲块时，先不急着分配，而是丢到 tcache 中，然后继续往前回收若干个空闲块，直到 tcache 满了或者遇到了足够多的大小不同的空闲块为止：这是利用了 unsorted bin 中空闲块大小的局部性，有机会把一系列连续的相同大小的空闲块拿到 tcache 当中，并且限制了搜索的长度，避免带来过多额外的延迟&lt;/li&gt;&lt;li&gt;如果尝试了 unsorted bin、small bin、large bin 和 top chunk 都无法分配，最后再检查一次 fast bin 是否为空，如果是空的，则进行一次 consolidate，把 fast bin 里的空闲块丢到 unsorted bin 中，再重新尝试分配一次：注意这整个过程 malloc 都是持有 arena 锁的，而 fast bin 在 free 中的写入是不需要持有 arena 锁的，而是直接用原子指令更新，所以这是考虑到其他线程在同时往同一个 arena free 的情况&lt;/li&gt;&lt;li&gt;在合并相邻空闲块的时候，被合并的空闲块可能已经在 unsorted bin、small bin 或者 large bin 当中，为了能够把空闲块从这些 bin 里删除，用双向链表来实现 O(1) 时间的删除&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;a class=&#34;headerlink&#34; href=&#34;#参考&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://sourceware.org/glibc/wiki/MallocInternals&#34;&gt;Malloc Internals&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/software/2025/03/30/glibc-allocator/</link> <pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2025/03/30/glibc-allocator/</guid> </item> <item> <title>Android Runtime 解释器的实现探究</title> <category>android</category> <category>art</category> <category>interpreter</category> <category>linux</category> <category>runtime</category> <category>software</category> <description>&lt;h1 id=&#34;android-runtime-解释器的实现探究&#34;&gt;Android Runtime 解释器的实现探究&lt;a class=&#34;headerlink&#34; href=&#34;#android-runtime-解释器的实现探究&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在 &lt;a href=&#34;../../01/v8-ignition-internals/&#34;&gt;V8 Ignition 解释器的内部实现探究&lt;/a&gt; 中探究了 JavaScript 引擎 V8 的解释器的实现，接下来分析一下 Android Runtime (ART) 的解释器，其原理也是类似的。本博客在 ARM64 Ubuntu 24.04 平台上针对 &lt;a href=&#34;https://android.googlesource.com/platform/art/+/refs/tags/android-15.0.0_r1/runtime/interpreter/&#34;&gt;Android Runtime (ART) 15.0.0 r1&lt;/a&gt; 版本进行分析。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;dalvik-bytecode&#34;&gt;Dalvik Bytecode&lt;a class=&#34;headerlink&#34; href=&#34;#dalvik-bytecode&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在分析解释器的代码前，需要先了解一下解释器的输入，也就是它执行的字节码格式是什么。Android Runtime 继承和发展了 &lt;a href=&#34;https://source.android.com/docs/core/runtime/dalvik-bytecode&#34;&gt;Dalvik VM 的字节码 Dalvik Bytecode&lt;/a&gt; 格式，因此在打包 Android 应用的时候，Java 代码最终会被翻译成 Dalvik Bytecode。&lt;/p&gt;&lt;p&gt;接下来来实践一下这个过程，从 Java 代码到 Dalvik Bytecode：&lt;/p&gt;&lt;p&gt;第一步是编写一个简单的 Java 程序如下，保存到 &lt;code&gt;MainActivity.java&lt;/code&gt;：&lt;/p&gt;&lt;div class=&#34;language-java highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MainActivity&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-6&#34;&gt;&lt;a id=&#34;__codelineno-0-6&#34; name=&#34;__codelineno-0-6&#34; href=&#34;#__codelineno-0-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-7&#34;&gt;&lt;a id=&#34;__codelineno-0-7&#34; name=&#34;__codelineno-0-7&#34; href=&#34;#__codelineno-0-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-8&#34;&gt;&lt;a id=&#34;__codelineno-0-8&#34; name=&#34;__codelineno-0-8&#34; href=&#34;#__codelineno-0-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-9&#34;&gt;&lt;a id=&#34;__codelineno-0-9&#34; name=&#34;__codelineno-0-9&#34; href=&#34;#__codelineno-0-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先用 &lt;code&gt;javac MainActivity.java&lt;/code&gt; 命令把源码编译到 Java Bytecode。可以用 &lt;code&gt;javap -c MainActivity.class&lt;/code&gt; 查看生成的 Java Bytecode：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;Compiled from &amp;quot;MainActivity.java&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;public class MainActivity {&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt; public MainActivity();&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt; Code:&lt;/span&gt;&lt;span id=&#34;__span-1-5&#34;&gt;&lt;a id=&#34;__codelineno-1-5&#34; name=&#34;__codelineno-1-5&#34; href=&#34;#__codelineno-1-5&#34;&gt;&lt;/a&gt; 0: aload_0&lt;/span&gt;&lt;span id=&#34;__span-1-6&#34;&gt;&lt;a id=&#34;__codelineno-1-6&#34; name=&#34;__codelineno-1-6&#34; href=&#34;#__codelineno-1-6&#34;&gt;&lt;/a&gt; 1: invokespecial #1 // Method java/lang/Object.&amp;quot;&amp;lt;init&amp;gt;&amp;quot;:()V&lt;/span&gt;&lt;span id=&#34;__span-1-7&#34;&gt;&lt;a id=&#34;__codelineno-1-7&#34; name=&#34;__codelineno-1-7&#34; href=&#34;#__codelineno-1-7&#34;&gt;&lt;/a&gt; 4: return&lt;/span&gt;&lt;span id=&#34;__span-1-8&#34;&gt;&lt;a id=&#34;__codelineno-1-8&#34; name=&#34;__codelineno-1-8&#34; href=&#34;#__codelineno-1-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-9&#34;&gt;&lt;a id=&#34;__codelineno-1-9&#34; name=&#34;__codelineno-1-9&#34; href=&#34;#__codelineno-1-9&#34;&gt;&lt;/a&gt; public static void main(java.lang.String[]);&lt;/span&gt;&lt;span id=&#34;__span-1-10&#34;&gt;&lt;a id=&#34;__codelineno-1-10&#34; name=&#34;__codelineno-1-10&#34; href=&#34;#__codelineno-1-10&#34;&gt;&lt;/a&gt; Code:&lt;/span&gt;&lt;span id=&#34;__span-1-11&#34;&gt;&lt;a id=&#34;__codelineno-1-11&#34; name=&#34;__codelineno-1-11&#34; href=&#34;#__codelineno-1-11&#34;&gt;&lt;/a&gt; 0: getstatic #7 // Field java/lang/System.out:Ljava/io/PrintStream;&lt;/span&gt;&lt;span id=&#34;__span-1-12&#34;&gt;&lt;a id=&#34;__codelineno-1-12&#34; name=&#34;__codelineno-1-12&#34; href=&#34;#__codelineno-1-12&#34;&gt;&lt;/a&gt; 3: ldc #13 // String Hello, world!&lt;/span&gt;&lt;span id=&#34;__span-1-13&#34;&gt;&lt;a id=&#34;__codelineno-1-13&#34; name=&#34;__codelineno-1-13&#34; href=&#34;#__codelineno-1-13&#34;&gt;&lt;/a&gt; 5: invokevirtual #15 // Method java/io/PrintStream.println:(Ljava/lang/String;)V&lt;/span&gt;&lt;span id=&#34;__span-1-14&#34;&gt;&lt;a id=&#34;__codelineno-1-14&#34; name=&#34;__codelineno-1-14&#34; href=&#34;#__codelineno-1-14&#34;&gt;&lt;/a&gt; 8: return&lt;/span&gt;&lt;span id=&#34;__span-1-15&#34;&gt;&lt;a id=&#34;__codelineno-1-15&#34; name=&#34;__codelineno-1-15&#34; href=&#34;#__codelineno-1-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-16&#34;&gt;&lt;a id=&#34;__codelineno-1-16&#34; name=&#34;__codelineno-1-16&#34; href=&#34;#__codelineno-1-16&#34;&gt;&lt;/a&gt; public static int add(int, int);&lt;/span&gt;&lt;span id=&#34;__span-1-17&#34;&gt;&lt;a id=&#34;__codelineno-1-17&#34; name=&#34;__codelineno-1-17&#34; href=&#34;#__codelineno-1-17&#34;&gt;&lt;/a&gt; Code:&lt;/span&gt;&lt;span id=&#34;__span-1-18&#34;&gt;&lt;a id=&#34;__codelineno-1-18&#34; name=&#34;__codelineno-1-18&#34; href=&#34;#__codelineno-1-18&#34;&gt;&lt;/a&gt; 0: iload_0&lt;/span&gt;&lt;span id=&#34;__span-1-19&#34;&gt;&lt;a id=&#34;__codelineno-1-19&#34; name=&#34;__codelineno-1-19&#34; href=&#34;#__codelineno-1-19&#34;&gt;&lt;/a&gt; 1: iload_1&lt;/span&gt;&lt;span id=&#34;__span-1-20&#34;&gt;&lt;a id=&#34;__codelineno-1-20&#34; name=&#34;__codelineno-1-20&#34; href=&#34;#__codelineno-1-20&#34;&gt;&lt;/a&gt; 2: iadd&lt;/span&gt;&lt;span id=&#34;__span-1-21&#34;&gt;&lt;a id=&#34;__codelineno-1-21&#34; name=&#34;__codelineno-1-21&#34; href=&#34;#__codelineno-1-21&#34;&gt;&lt;/a&gt; 3: ireturn&lt;/span&gt;&lt;span id=&#34;__span-1-22&#34;&gt;&lt;a id=&#34;__codelineno-1-22&#34; name=&#34;__codelineno-1-22&#34; href=&#34;#__codelineno-1-22&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Java Bytecode 是个典型的栈式字节码，因此从 &lt;code&gt;int add(int, int)&lt;/code&gt; 函数可以看到，它分别压栈第零个和第一个局部遍变量（即参数 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt;），然后用 &lt;code&gt;iadd&lt;/code&gt; 指令从栈顶弹出两个元素，求和后再把结果压栈。&lt;/p&gt;&lt;p&gt;接着，用 Android SDK 的 Build Tools 提供的命令 &lt;code&gt;d8&lt;/code&gt; 来把它转换为 Dalvik Bytecode。如果你还没有安装 Android SDK，可以按照 &lt;a href=&#34;https://developer.android.com/tools/sdkmanager&#34;&gt;sdkmanager 文档&lt;/a&gt; 来安装 sdkmanager，再用 sdkmanager 安装较新版本的 &lt;code&gt;build-tools&lt;/code&gt;。转换的命令为 &lt;code&gt;$ANDROID_HOME/build-tools/$VERSION/d8 MainActivity.class&lt;/code&gt;，结果会保存在当前目录的 &lt;code&gt;classes.dex&lt;/code&gt; 文件内。接着可以用 &lt;code&gt;$ANDROID_HOME/build-tools/$VERSION/dexdump -d classes.dex&lt;/code&gt; 来查看 Dalvik Bytecode：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;Processing &amp;#39;classes.dex&amp;#39;...&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;Opened &amp;#39;classes.dex&amp;#39;, DEX version &amp;#39;035&amp;#39;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;Class #0 -&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt; Class descriptor : &amp;#39;LMainActivity;&amp;#39;&lt;/span&gt;&lt;span id=&#34;__span-2-5&#34;&gt;&lt;a id=&#34;__codelineno-2-5&#34; name=&#34;__codelineno-2-5&#34; href=&#34;#__codelineno-2-5&#34;&gt;&lt;/a&gt; Access flags : 0x0001 (PUBLIC)&lt;/span&gt;&lt;span id=&#34;__span-2-6&#34;&gt;&lt;a id=&#34;__codelineno-2-6&#34; name=&#34;__codelineno-2-6&#34; href=&#34;#__codelineno-2-6&#34;&gt;&lt;/a&gt; Superclass : &amp;#39;Ljava/lang/Object;&amp;#39;&lt;/span&gt;&lt;span id=&#34;__span-2-7&#34;&gt;&lt;a id=&#34;__codelineno-2-7&#34; name=&#34;__codelineno-2-7&#34; href=&#34;#__codelineno-2-7&#34;&gt;&lt;/a&gt; Interfaces -&lt;/span&gt;&lt;span id=&#34;__span-2-8&#34;&gt;&lt;a id=&#34;__codelineno-2-8&#34; name=&#34;__codelineno-2-8&#34; href=&#34;#__codelineno-2-8&#34;&gt;&lt;/a&gt; Static fields -&lt;/span&gt;&lt;span id=&#34;__span-2-9&#34;&gt;&lt;a id=&#34;__codelineno-2-9&#34; name=&#34;__codelineno-2-9&#34; href=&#34;#__codelineno-2-9&#34;&gt;&lt;/a&gt; Instance fields -&lt;/span&gt;&lt;span id=&#34;__span-2-10&#34;&gt;&lt;a id=&#34;__codelineno-2-10&#34; name=&#34;__codelineno-2-10&#34; href=&#34;#__codelineno-2-10&#34;&gt;&lt;/a&gt; Direct methods -&lt;/span&gt;&lt;span id=&#34;__span-2-11&#34;&gt;&lt;a id=&#34;__codelineno-2-11&#34; name=&#34;__codelineno-2-11&#34; href=&#34;#__codelineno-2-11&#34;&gt;&lt;/a&gt; #0 : (in LMainActivity;)&lt;/span&gt;&lt;span id=&#34;__span-2-12&#34;&gt;&lt;a id=&#34;__codelineno-2-12&#34; name=&#34;__codelineno-2-12&#34; href=&#34;#__codelineno-2-12&#34;&gt;&lt;/a&gt; name : &amp;#39;&amp;lt;init&amp;gt;&amp;#39;&lt;/span&gt;&lt;span id=&#34;__span-2-13&#34;&gt;&lt;a id=&#34;__codelineno-2-13&#34; name=&#34;__codelineno-2-13&#34; href=&#34;#__codelineno-2-13&#34;&gt;&lt;/a&gt; type : &amp;#39;()V&amp;#39;&lt;/span&gt;&lt;span id=&#34;__span-2-14&#34;&gt;&lt;a id=&#34;__codelineno-2-14&#34; name=&#34;__codelineno-2-14&#34; href=&#34;#__codelineno-2-14&#34;&gt;&lt;/a&gt; access : 0x10001 (PUBLIC CONSTRUCTOR)&lt;/span&gt;&lt;span id=&#34;__span-2-15&#34;&gt;&lt;a id=&#34;__codelineno-2-15&#34; name=&#34;__codelineno-2-15&#34; href=&#34;#__codelineno-2-15&#34;&gt;&lt;/a&gt; code -&lt;/span&gt;&lt;span id=&#34;__span-2-16&#34;&gt;&lt;a id=&#34;__codelineno-2-16&#34; name=&#34;__codelineno-2-16&#34; href=&#34;#__codelineno-2-16&#34;&gt;&lt;/a&gt; registers : 1&lt;/span&gt;&lt;span id=&#34;__span-2-17&#34;&gt;&lt;a id=&#34;__codelineno-2-17&#34; name=&#34;__codelineno-2-17&#34; href=&#34;#__codelineno-2-17&#34;&gt;&lt;/a&gt; ins : 1&lt;/span&gt;&lt;span id=&#34;__span-2-18&#34;&gt;&lt;a id=&#34;__codelineno-2-18&#34; name=&#34;__codelineno-2-18&#34; href=&#34;#__codelineno-2-18&#34;&gt;&lt;/a&gt; outs : 1&lt;/span&gt;&lt;span id=&#34;__span-2-19&#34;&gt;&lt;a id=&#34;__codelineno-2-19&#34; name=&#34;__codelineno-2-19&#34; href=&#34;#__codelineno-2-19&#34;&gt;&lt;/a&gt; insns size : 4 16-bit code units&lt;/span&gt;&lt;span id=&#34;__span-2-20&#34;&gt;&lt;a id=&#34;__codelineno-2-20&#34; name=&#34;__codelineno-2-20&#34; href=&#34;#__codelineno-2-20&#34;&gt;&lt;/a&gt;00016c: |[00016c] MainActivity.&amp;lt;init&amp;gt;:()V&lt;/span&gt;&lt;span id=&#34;__span-2-21&#34;&gt;&lt;a id=&#34;__codelineno-2-21&#34; name=&#34;__codelineno-2-21&#34; href=&#34;#__codelineno-2-21&#34;&gt;&lt;/a&gt;00017c: 7010 0400 0000 |0000: invoke-direct {v0}, Ljava/lang/Object;.&amp;lt;init&amp;gt;:()V // method@0004&lt;/span&gt;&lt;span id=&#34;__span-2-22&#34;&gt;&lt;a id=&#34;__codelineno-2-22&#34; name=&#34;__codelineno-2-22&#34; href=&#34;#__codelineno-2-22&#34;&gt;&lt;/a&gt;000182: 0e00 |0003: return-void&lt;/span&gt;&lt;span id=&#34;__span-2-23&#34;&gt;&lt;a id=&#34;__codelineno-2-23&#34; name=&#34;__codelineno-2-23&#34; href=&#34;#__codelineno-2-23&#34;&gt;&lt;/a&gt; catches : (none)&lt;/span&gt;&lt;span id=&#34;__span-2-24&#34;&gt;&lt;a id=&#34;__codelineno-2-24&#34; name=&#34;__codelineno-2-24&#34; href=&#34;#__codelineno-2-24&#34;&gt;&lt;/a&gt; positions :&lt;/span&gt;&lt;span id=&#34;__span-2-25&#34;&gt;&lt;a id=&#34;__codelineno-2-25&#34; name=&#34;__codelineno-2-25&#34; href=&#34;#__codelineno-2-25&#34;&gt;&lt;/a&gt; 0x0000 line=1&lt;/span&gt;&lt;span id=&#34;__span-2-26&#34;&gt;&lt;a id=&#34;__codelineno-2-26&#34; name=&#34;__codelineno-2-26&#34; href=&#34;#__codelineno-2-26&#34;&gt;&lt;/a&gt; locals :&lt;/span&gt;&lt;span id=&#34;__span-2-27&#34;&gt;&lt;a id=&#34;__codelineno-2-27&#34; name=&#34;__codelineno-2-27&#34; href=&#34;#__codelineno-2-27&#34;&gt;&lt;/a&gt; 0x0000 - 0x0004 reg=0 this LMainActivity;&lt;/span&gt;&lt;span id=&#34;__span-2-28&#34;&gt;&lt;a id=&#34;__codelineno-2-28&#34; name=&#34;__codelineno-2-28&#34; href=&#34;#__codelineno-2-28&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-29&#34;&gt;&lt;a id=&#34;__codelineno-2-29&#34; name=&#34;__codelineno-2-29&#34; href=&#34;#__codelineno-2-29&#34;&gt;&lt;/a&gt; #1 : (in LMainActivity;)&lt;/span&gt;&lt;span id=&#34;__span-2-30&#34;&gt;&lt;a id=&#34;__codelineno-2-30&#34; name=&#34;__codelineno-2-30&#34; href=&#34;#__codelineno-2-30&#34;&gt;&lt;/a&gt; name : &amp;#39;add&amp;#39;&lt;/span&gt;&lt;span id=&#34;__span-2-31&#34;&gt;&lt;a id=&#34;__codelineno-2-31&#34; name=&#34;__codelineno-2-31&#34; href=&#34;#__codelineno-2-31&#34;&gt;&lt;/a&gt; type : &amp;#39;(II)I&amp;#39;&lt;/span&gt;&lt;span id=&#34;__span-2-32&#34;&gt;&lt;a id=&#34;__codelineno-2-32&#34; name=&#34;__codelineno-2-32&#34; href=&#34;#__codelineno-2-32&#34;&gt;&lt;/a&gt; access : 0x0009 (PUBLIC STATIC)&lt;/span&gt;&lt;span id=&#34;__span-2-33&#34;&gt;&lt;a id=&#34;__codelineno-2-33&#34; name=&#34;__codelineno-2-33&#34; href=&#34;#__codelineno-2-33&#34;&gt;&lt;/a&gt; code -&lt;/span&gt;&lt;span id=&#34;__span-2-34&#34;&gt;&lt;a id=&#34;__codelineno-2-34&#34; name=&#34;__codelineno-2-34&#34; href=&#34;#__codelineno-2-34&#34;&gt;&lt;/a&gt; registers : 2&lt;/span&gt;&lt;span id=&#34;__span-2-35&#34;&gt;&lt;a id=&#34;__codelineno-2-35&#34; name=&#34;__codelineno-2-35&#34; href=&#34;#__codelineno-2-35&#34;&gt;&lt;/a&gt; ins : 2&lt;/span&gt;&lt;span id=&#34;__span-2-36&#34;&gt;&lt;a id=&#34;__codelineno-2-36&#34; name=&#34;__codelineno-2-36&#34; href=&#34;#__codelineno-2-36&#34;&gt;&lt;/a&gt; outs : 0&lt;/span&gt;&lt;span id=&#34;__span-2-37&#34;&gt;&lt;a id=&#34;__codelineno-2-37&#34; name=&#34;__codelineno-2-37&#34; href=&#34;#__codelineno-2-37&#34;&gt;&lt;/a&gt; insns size : 2 16-bit code units&lt;/span&gt;&lt;span id=&#34;__span-2-38&#34;&gt;&lt;a id=&#34;__codelineno-2-38&#34; name=&#34;__codelineno-2-38&#34; href=&#34;#__codelineno-2-38&#34;&gt;&lt;/a&gt;000158: |[000158] MainActivity.add:(II)I&lt;/span&gt;&lt;span id=&#34;__span-2-39&#34;&gt;&lt;a id=&#34;__codelineno-2-39&#34; name=&#34;__codelineno-2-39&#34; href=&#34;#__codelineno-2-39&#34;&gt;&lt;/a&gt;000168: b010 |0000: add-int/2addr v0, v1&lt;/span&gt;&lt;span id=&#34;__span-2-40&#34;&gt;&lt;a id=&#34;__codelineno-2-40&#34; name=&#34;__codelineno-2-40&#34; href=&#34;#__codelineno-2-40&#34;&gt;&lt;/a&gt;00016a: 0f00 |0001: return v0&lt;/span&gt;&lt;span id=&#34;__span-2-41&#34;&gt;&lt;a id=&#34;__codelineno-2-41&#34; name=&#34;__codelineno-2-41&#34; href=&#34;#__codelineno-2-41&#34;&gt;&lt;/a&gt; catches : (none)&lt;/span&gt;&lt;span id=&#34;__span-2-42&#34;&gt;&lt;a id=&#34;__codelineno-2-42&#34; name=&#34;__codelineno-2-42&#34; href=&#34;#__codelineno-2-42&#34;&gt;&lt;/a&gt; positions :&lt;/span&gt;&lt;span id=&#34;__span-2-43&#34;&gt;&lt;a id=&#34;__codelineno-2-43&#34; name=&#34;__codelineno-2-43&#34; href=&#34;#__codelineno-2-43&#34;&gt;&lt;/a&gt; 0x0000 line=7&lt;/span&gt;&lt;span id=&#34;__span-2-44&#34;&gt;&lt;a id=&#34;__codelineno-2-44&#34; name=&#34;__codelineno-2-44&#34; href=&#34;#__codelineno-2-44&#34;&gt;&lt;/a&gt; locals :&lt;/span&gt;&lt;span id=&#34;__span-2-45&#34;&gt;&lt;a id=&#34;__codelineno-2-45&#34; name=&#34;__codelineno-2-45&#34; href=&#34;#__codelineno-2-45&#34;&gt;&lt;/a&gt; 0x0000 - 0x0002 reg=0 (null) I&lt;/span&gt;&lt;span id=&#34;__span-2-46&#34;&gt;&lt;a id=&#34;__codelineno-2-46&#34; name=&#34;__codelineno-2-46&#34; href=&#34;#__codelineno-2-46&#34;&gt;&lt;/a&gt; 0x0000 - 0x0002 reg=1 (null) I&lt;/span&gt;&lt;span id=&#34;__span-2-47&#34;&gt;&lt;a id=&#34;__codelineno-2-47&#34; name=&#34;__codelineno-2-47&#34; href=&#34;#__codelineno-2-47&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-48&#34;&gt;&lt;a id=&#34;__codelineno-2-48&#34; name=&#34;__codelineno-2-48&#34; href=&#34;#__codelineno-2-48&#34;&gt;&lt;/a&gt; #2 : (in LMainActivity;)&lt;/span&gt;&lt;span id=&#34;__span-2-49&#34;&gt;&lt;a id=&#34;__codelineno-2-49&#34; name=&#34;__codelineno-2-49&#34; href=&#34;#__codelineno-2-49&#34;&gt;&lt;/a&gt; name : &amp;#39;main&amp;#39;&lt;/span&gt;&lt;span id=&#34;__span-2-50&#34;&gt;&lt;a id=&#34;__codelineno-2-50&#34; name=&#34;__codelineno-2-50&#34; href=&#34;#__codelineno-2-50&#34;&gt;&lt;/a&gt; type : &amp;#39;([Ljava/lang/String;)V&amp;#39;&lt;/span&gt;&lt;span id=&#34;__span-2-51&#34;&gt;&lt;a id=&#34;__codelineno-2-51&#34; name=&#34;__codelineno-2-51&#34; href=&#34;#__codelineno-2-51&#34;&gt;&lt;/a&gt; access : 0x0009 (PUBLIC STATIC)&lt;/span&gt;&lt;span id=&#34;__span-2-52&#34;&gt;&lt;a id=&#34;__codelineno-2-52&#34; name=&#34;__codelineno-2-52&#34; href=&#34;#__codelineno-2-52&#34;&gt;&lt;/a&gt; code -&lt;/span&gt;&lt;span id=&#34;__span-2-53&#34;&gt;&lt;a id=&#34;__codelineno-2-53&#34; name=&#34;__codelineno-2-53&#34; href=&#34;#__codelineno-2-53&#34;&gt;&lt;/a&gt; registers : 2&lt;/span&gt;&lt;span id=&#34;__span-2-54&#34;&gt;&lt;a id=&#34;__codelineno-2-54&#34; name=&#34;__codelineno-2-54&#34; href=&#34;#__codelineno-2-54&#34;&gt;&lt;/a&gt; ins : 1&lt;/span&gt;&lt;span id=&#34;__span-2-55&#34;&gt;&lt;a id=&#34;__codelineno-2-55&#34; name=&#34;__codelineno-2-55&#34; href=&#34;#__codelineno-2-55&#34;&gt;&lt;/a&gt; outs : 2&lt;/span&gt;&lt;span id=&#34;__span-2-56&#34;&gt;&lt;a id=&#34;__codelineno-2-56&#34; name=&#34;__codelineno-2-56&#34; href=&#34;#__codelineno-2-56&#34;&gt;&lt;/a&gt; insns size : 8 16-bit code units&lt;/span&gt;&lt;span id=&#34;__span-2-57&#34;&gt;&lt;a id=&#34;__codelineno-2-57&#34; name=&#34;__codelineno-2-57&#34; href=&#34;#__codelineno-2-57&#34;&gt;&lt;/a&gt;000184: |[000184] MainActivity.main:([Ljava/lang/String;)V&lt;/span&gt;&lt;span id=&#34;__span-2-58&#34;&gt;&lt;a id=&#34;__codelineno-2-58&#34; name=&#34;__codelineno-2-58&#34; href=&#34;#__codelineno-2-58&#34;&gt;&lt;/a&gt;000194: 6201 0000 |0000: sget-object v1, Ljava/lang/System;.out:Ljava/io/PrintStream; // field@0000&lt;/span&gt;&lt;span id=&#34;__span-2-59&#34;&gt;&lt;a id=&#34;__codelineno-2-59&#34; name=&#34;__codelineno-2-59&#34; href=&#34;#__codelineno-2-59&#34;&gt;&lt;/a&gt;000198: 1a00 0100 |0002: const-string v0, &amp;quot;Hello, world!&amp;quot; // string@0001&lt;/span&gt;&lt;span id=&#34;__span-2-60&#34;&gt;&lt;a id=&#34;__codelineno-2-60&#34; name=&#34;__codelineno-2-60&#34; href=&#34;#__codelineno-2-60&#34;&gt;&lt;/a&gt;00019c: 6e20 0300 0100 |0004: invoke-virtual {v1, v0}, Ljava/io/PrintStream;.println:(Ljava/lang/String;)V // method@0003&lt;/span&gt;&lt;span id=&#34;__span-2-61&#34;&gt;&lt;a id=&#34;__codelineno-2-61&#34; name=&#34;__codelineno-2-61&#34; href=&#34;#__codelineno-2-61&#34;&gt;&lt;/a&gt;0001a2: 0e00 |0007: return-void&lt;/span&gt;&lt;span id=&#34;__span-2-62&#34;&gt;&lt;a id=&#34;__codelineno-2-62&#34; name=&#34;__codelineno-2-62&#34; href=&#34;#__codelineno-2-62&#34;&gt;&lt;/a&gt; catches : (none)&lt;/span&gt;&lt;span id=&#34;__span-2-63&#34;&gt;&lt;a id=&#34;__codelineno-2-63&#34; name=&#34;__codelineno-2-63&#34; href=&#34;#__codelineno-2-63&#34;&gt;&lt;/a&gt; positions :&lt;/span&gt;&lt;span id=&#34;__span-2-64&#34;&gt;&lt;a id=&#34;__codelineno-2-64&#34; name=&#34;__codelineno-2-64&#34; href=&#34;#__codelineno-2-64&#34;&gt;&lt;/a&gt; 0x0000 line=3&lt;/span&gt;&lt;span id=&#34;__span-2-65&#34;&gt;&lt;a id=&#34;__codelineno-2-65&#34; name=&#34;__codelineno-2-65&#34; href=&#34;#__codelineno-2-65&#34;&gt;&lt;/a&gt; 0x0007 line=4&lt;/span&gt;&lt;span id=&#34;__span-2-66&#34;&gt;&lt;a id=&#34;__codelineno-2-66&#34; name=&#34;__codelineno-2-66&#34; href=&#34;#__codelineno-2-66&#34;&gt;&lt;/a&gt; locals :&lt;/span&gt;&lt;span id=&#34;__span-2-67&#34;&gt;&lt;a id=&#34;__codelineno-2-67&#34; name=&#34;__codelineno-2-67&#34; href=&#34;#__codelineno-2-67&#34;&gt;&lt;/a&gt; 0x0000 - 0x0008 reg=1 (null) [Ljava/lang/String;&lt;/span&gt;&lt;span id=&#34;__span-2-68&#34;&gt;&lt;a id=&#34;__codelineno-2-68&#34; name=&#34;__codelineno-2-68&#34; href=&#34;#__codelineno-2-68&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-69&#34;&gt;&lt;a id=&#34;__codelineno-2-69&#34; name=&#34;__codelineno-2-69&#34; href=&#34;#__codelineno-2-69&#34;&gt;&lt;/a&gt; Virtual methods -&lt;/span&gt;&lt;span id=&#34;__span-2-70&#34;&gt;&lt;a id=&#34;__codelineno-2-70&#34; name=&#34;__codelineno-2-70&#34; href=&#34;#__codelineno-2-70&#34;&gt;&lt;/a&gt; source_file_idx : 9 (MainActivity.java)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对比 Java Bytecode，在 Dalvik Bytecode 里的 &lt;code&gt;add&lt;/code&gt; 函数的实现就大不相同了：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;add-int/2addr v0, v1&lt;/code&gt;: 求寄存器 &lt;code&gt;v1&lt;/code&gt; 和寄存器 &lt;code&gt;v0&lt;/code&gt; 之和，在这里就对应 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 两个参数，结果写到 &lt;code&gt;v0&lt;/code&gt; 寄存器当中&lt;/li&gt;&lt;li&gt;&lt;code&gt;return v0&lt;/code&gt;: 以寄存器 &lt;code&gt;v0&lt;/code&gt; 为返回值，结束当前函数&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;可见 Dalvik Bytecode 采用的是类似 V8 的基于寄存器的字节码，不过没有 V8 的 &lt;code&gt;accumulator&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;Dalvik Bytecode 的完整列表见 &lt;a href=&#34;https://source.android.com/docs/core/runtime/dalvik-bytecode&#34;&gt;Dalvik bytecode format&lt;/a&gt;，它的格式基本上是两个字节为一组，每组里第一个字节代表 Op 类型，第二个字节代表参数，有一些 Op 后面还会带有多组参数。&lt;/p&gt;&lt;p&gt;例如上面的 &lt;code&gt;add-int/2addr vA, vB&lt;/code&gt; 指令的编码是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第一个字节是 &lt;code&gt;0xb0&lt;/code&gt;，表示这是一个 &lt;code&gt;add-int/2addr&lt;/code&gt; Op&lt;/li&gt;&lt;li&gt;第二个字节共 8 位，低 4 位编码了 &lt;code&gt;vA&lt;/code&gt; 的寄存器编号 &lt;code&gt;A&lt;/code&gt;，高 4 位编码了 &lt;code&gt;vB&lt;/code&gt; 的寄存器编号 &lt;code&gt;B&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;所以 &lt;code&gt;add-int/2addr v0, v1&lt;/code&gt; 的编码就是 &lt;code&gt;0xb0, 0 | (1 &amp;lt;&amp;lt; 4)&lt;/code&gt; 即 &lt;code&gt;0xb0, 0x10&lt;/code&gt;。因为存得很紧凑，寄存器编号只有 4 位，所以这个 Op 的操作数不能访问 v16 或更高的寄存器。&lt;/p&gt;&lt;p&gt;&lt;code&gt;return vAA&lt;/code&gt; 指令的编码类似，不过因为只需要编码一个操作数，所以有 8 位可以编码返回值用哪个寄存器；为了区分是 4 位的编码还是 8 位的编码，这里用 &lt;code&gt;vAA&lt;/code&gt; 表示可以用 8 位来记录寄存器编号。&lt;code&gt;return vAA&lt;/code&gt; 的第一个字节是 &lt;code&gt;0x0f&lt;/code&gt; 表示 Op 类型，第二个字节就是寄存器编号 &lt;code&gt;A&lt;/code&gt;。上面出现的 &lt;code&gt;return v0&lt;/code&gt; 的编码就是 &lt;code&gt;0x0f, 0x00&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;一些比较复杂的 Op 会附带更多的参数，此时编码就可能涉及到更多的字节。比如 &lt;code&gt;invoke-virtual {vC, vD, vE, vF, vG}, meth@BBBB&lt;/code&gt;，可以携带可变个寄存器参数，在编码的时候，格式如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第一个字节 &lt;code&gt;0x6e&lt;/code&gt; 表示这是一个 &lt;code&gt;invoke-virtual&lt;/code&gt; Op&lt;/li&gt;&lt;li&gt;第二个字节的高 4 位记录了参数个数&lt;/li&gt;&lt;li&gt;第三和第四个字节共 16 位，记录了要调用的函数的 index，这个 index 会被拿来索引 DEX 的 method_ids 表&lt;/li&gt;&lt;li&gt;第五和第六个字节共 16 位，配合第二个字节的低 4 位，最多可以传递 5 个寄存器参数，每个寄存器参数 4 位&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;因此在上面的代码中，&lt;code&gt;invoke-virtual {v1, v0}, Ljava/io/PrintStream;.println:(Ljava/lang/String;)V // method@0003&lt;/code&gt; 被编码为：&lt;code&gt;0x6e, 0x20, 0x03, 0x00, 0x01, 0x00&lt;/code&gt;。另外构造了一个例子，把五个参数都用上：&lt;code&gt;invoke-virtual {v1, v4, v0, v2, v3}, LMainActivity;.add4:(IIII)I // method@0002&lt;/code&gt; 被编码为 &lt;code&gt;0x6e, 0x53, 0x02, 0x00, 0x41, 0x20&lt;/code&gt;，可以看到五个参数的编码顺序是第五个字节的低 4 位（&lt;code&gt;v1&lt;/code&gt;）和高 4 位（&lt;code&gt;v4&lt;/code&gt;），第六个字节的低 4 位（&lt;code&gt;v0&lt;/code&gt;）和高 4 位（&lt;code&gt;v2&lt;/code&gt;），最后是第二个字节的低 4 位（&lt;code&gt;v3&lt;/code&gt;）。&lt;/p&gt;&lt;p&gt;了解了 Dalvik Bytecode 的结构，接下来观察它是怎么被解释执行的。&lt;/p&gt;&lt;h2 id=&#34;解释器&#34;&gt;解释器&lt;a class=&#34;headerlink&#34; href=&#34;#解释器&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android Runtime (ART) 的解释器放在 &lt;code&gt;runtime/interpreter&lt;/code&gt; 目录下。如果进行一些&lt;a href=&#34;https://stackoverflow.com/questions/22187630/what-does-mterp-mean&#34;&gt;考古&lt;/a&gt;，可以看到这个解释器的实现是从更早的 Dalvik VM 来的。它有两种不同的解释器实现：&lt;/p&gt;&lt;p&gt;第一个解释器基于 switch-case 的 C++ 代码实现，其逐个遍历 Op，根据 Op 的类型 Opcode 执行相应的操作，类似下面的代码：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-2&#34;&gt;&lt;a id=&#34;__codelineno-3-2&#34; name=&#34;__codelineno-3-2&#34; href=&#34;#__codelineno-3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-3&#34;&gt;&lt;a id=&#34;__codelineno-3-3&#34; name=&#34;__codelineno-3-3&#34; href=&#34;#__codelineno-3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;op_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-4&#34;&gt;&lt;a id=&#34;__codelineno-3-4&#34; name=&#34;__codelineno-3-4&#34; href=&#34;#__codelineno-3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// implement add here&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-5&#34;&gt;&lt;a id=&#34;__codelineno-3-5&#34; name=&#34;__codelineno-3-5&#34; href=&#34;#__codelineno-3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-6&#34;&gt;&lt;a id=&#34;__codelineno-3-6&#34; name=&#34;__codelineno-3-6&#34; href=&#34;#__codelineno-3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ... other opcode handlers&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-7&#34;&gt;&lt;a id=&#34;__codelineno-3-7&#34; name=&#34;__codelineno-3-7&#34; href=&#34;#__codelineno-3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-8&#34;&gt;&lt;a id=&#34;__codelineno-3-8&#34; name=&#34;__codelineno-3-8&#34; href=&#34;#__codelineno-3-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二个解释器以 &lt;a href=&#34;https://en.wikipedia.org/wiki/Threaded_code#Token_threading&#34;&gt;Token threading&lt;/a&gt; 的方式实现，每种 Op 对应一段代码。这段代码在完成 Op 的操作后，读取下一个 Op，再间接跳转到下一个 Op 对应的代码。其工作原理类似下面的代码，这里 &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Labels-as-Values.html&#34;&gt;&lt;code&gt;goto *&lt;/code&gt;&lt;/a&gt; 是 GNU C 的扩展，对应间接跳转指令，其目的地址取决于 &lt;code&gt;handlers[next_opcode]&lt;/code&gt; 的值，意思是根据下一个 op 的 Opcode，找到对应的 handler，直接跳转过去：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// op handlers array&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-2&#34;&gt;&lt;a id=&#34;__codelineno-4-2&#34; name=&#34;__codelineno-4-2&#34; href=&#34;#__codelineno-4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;handlers&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op_sub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-3&#34;&gt;&lt;a id=&#34;__codelineno-4-3&#34; name=&#34;__codelineno-4-3&#34; href=&#34;#__codelineno-4-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-4&#34;&gt;&lt;a id=&#34;__codelineno-4-4&#34; name=&#34;__codelineno-4-4&#34; href=&#34;#__codelineno-4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;op_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-5&#34;&gt;&lt;a id=&#34;__codelineno-4-5&#34; name=&#34;__codelineno-4-5&#34; href=&#34;#__codelineno-4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// implement add here&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-6&#34;&gt;&lt;a id=&#34;__codelineno-4-6&#34; name=&#34;__codelineno-4-6&#34; href=&#34;#__codelineno-4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// read next opcode here&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-7&#34;&gt;&lt;a id=&#34;__codelineno-4-7&#34; name=&#34;__codelineno-4-7&#34; href=&#34;#__codelineno-4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;handlers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next_opcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际实现的时候更进一步，用汇编实现各个 op handler，并把 handler 放在了 128 字节对齐的位置，保证每个 handler 不超过 128 个字节，从而把读取 &lt;code&gt;handlers&lt;/code&gt; 数组再跳转的 &lt;code&gt;goto *&lt;/code&gt; 改成了用乘法和加法计算出 handler 的地址再跳转（computed goto）：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-5-1&#34;&gt;&lt;a id=&#34;__codelineno-5-1&#34; name=&#34;__codelineno-5-1&#34; href=&#34;#__codelineno-5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;handlers_begin:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-2&#34;&gt;&lt;a id=&#34;__codelineno-5-2&#34; name=&#34;__codelineno-5-2&#34; href=&#34;#__codelineno-5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;op_add:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-3&#34;&gt;&lt;a id=&#34;__codelineno-5-3&#34; name=&#34;__codelineno-5-3&#34; href=&#34;#__codelineno-5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.balign&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-4&#34;&gt;&lt;a id=&#34;__codelineno-5-4&#34; name=&#34;__codelineno-5-4&#34; href=&#34;#__codelineno-5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# implement add here&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-5&#34;&gt;&lt;a id=&#34;__codelineno-5-5&#34; name=&#34;__codelineno-5-5&#34; href=&#34;#__codelineno-5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# read next opcode here&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-6&#34;&gt;&lt;a id=&#34;__codelineno-5-6&#34; name=&#34;__codelineno-5-6&#34; href=&#34;#__codelineno-5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;handlers_begin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;next_opcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-7&#34;&gt;&lt;a id=&#34;__codelineno-5-7&#34; name=&#34;__codelineno-5-7&#34; href=&#34;#__codelineno-5-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-8&#34;&gt;&lt;a id=&#34;__codelineno-5-8&#34; name=&#34;__codelineno-5-8&#34; href=&#34;#__codelineno-5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;op_sub:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-9&#34;&gt;&lt;a id=&#34;__codelineno-5-9&#34; name=&#34;__codelineno-5-9&#34; href=&#34;#__codelineno-5-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.balign&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-10&#34;&gt;&lt;a id=&#34;__codelineno-5-10&#34; name=&#34;__codelineno-5-10&#34; href=&#34;#__codelineno-5-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# implement add here&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-11&#34;&gt;&lt;a id=&#34;__codelineno-5-11&#34; name=&#34;__codelineno-5-11&#34; href=&#34;#__codelineno-5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# read next opcode here&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-12&#34;&gt;&lt;a id=&#34;__codelineno-5-12&#34; name=&#34;__codelineno-5-12&#34; href=&#34;#__codelineno-5-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;handlers_begin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;next_opcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面结合源码来具体分析这两种解释器的实现。&lt;/p&gt;&lt;h3 id=&#34;基于-switch-case-的解释器&#34;&gt;基于 switch-case 的解释器&lt;a class=&#34;headerlink&#34; href=&#34;#基于-switch-case-的解释器&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;目前 Android Runtime 包括一个基于 switch-case 的解释器，实现在 &lt;code&gt;runtime/interpreter/interpreter_switch_impl-inl.h&lt;/code&gt; 文件当中，它的核心逻辑就是一个循环套 switch-case：&lt;/p&gt;&lt;div class=&#34;language-c++ highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-6-1&#34;&gt;&lt;a id=&#34;__codelineno-6-1&#34; name=&#34;__codelineno-6-1&#34; href=&#34;#__codelineno-6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-2&#34;&gt;&lt;a id=&#34;__codelineno-6-2&#34; name=&#34;__codelineno-6-2&#34; href=&#34;#__codelineno-6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-3&#34;&gt;&lt;a id=&#34;__codelineno-6-3&#34; name=&#34;__codelineno-6-3&#34; href=&#34;#__codelineno-6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dex_pc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetDexPc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;insns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-4&#34;&gt;&lt;a id=&#34;__codelineno-6-4&#34; name=&#34;__codelineno-6-4&#34; href=&#34;#__codelineno-6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shadow_frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SetDexPC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dex_pc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-5&#34;&gt;&lt;a id=&#34;__codelineno-6-5&#34; name=&#34;__codelineno-6-5&#34; href=&#34;#__codelineno-6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TraceExecution&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shadow_frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dex_pc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-6&#34;&gt;&lt;a id=&#34;__codelineno-6-6&#34; name=&#34;__codelineno-6-6&#34; href=&#34;#__codelineno-6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint16_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst_data&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Fetch16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-7&#34;&gt;&lt;a id=&#34;__codelineno-6-7&#34; name=&#34;__codelineno-6-7&#34; href=&#34;#__codelineno-6-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-8&#34;&gt;&lt;a id=&#34;__codelineno-6-8&#34; name=&#34;__codelineno-6-8&#34; href=&#34;#__codelineno-6-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;success&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Moved outside to keep frames small under asan.&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-9&#34;&gt;&lt;a id=&#34;__codelineno-6-9&#34; name=&#34;__codelineno-6-9&#34; href=&#34;#__codelineno-6-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InstructionHandler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transaction_active&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kInvalidFormat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-10&#34;&gt;&lt;a id=&#34;__codelineno-6-10&#34; name=&#34;__codelineno-6-10&#34; href=&#34;#__codelineno-6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instrumentation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shadow_frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dex_pc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-11&#34;&gt;&lt;a id=&#34;__codelineno-6-11&#34; name=&#34;__codelineno-6-11&#34; href=&#34;#__codelineno-6-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Preamble&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-12&#34;&gt;&lt;a id=&#34;__codelineno-6-12&#34; name=&#34;__codelineno-6-12&#34; href=&#34;#__codelineno-6-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DCHECK_EQ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IsExceptionPending&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Opcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MOVE_EXCEPTION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-13&#34;&gt;&lt;a id=&#34;__codelineno-6-13&#34; name=&#34;__codelineno-6-13&#34; href=&#34;#__codelineno-6-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Opcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-14&#34;&gt;&lt;a id=&#34;__codelineno-6-14&#34; name=&#34;__codelineno-6-14&#34; href=&#34;#__codelineno-6-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define OPCODE_CASE(OPCODE, OPCODE_NAME, NAME, FORMAT, i, a, e, v) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-15&#34;&gt;&lt;a id=&#34;__codelineno-6-15&#34; name=&#34;__codelineno-6-15&#34; href=&#34;#__codelineno-6-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; case OPCODE: { \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-16&#34;&gt;&lt;a id=&#34;__codelineno-6-16&#34; name=&#34;__codelineno-6-16&#34; href=&#34;#__codelineno-6-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; next = inst-&amp;gt;RelativeAt(Instruction::SizeInCodeUnits(Instruction::FORMAT)); \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-17&#34;&gt;&lt;a id=&#34;__codelineno-6-17&#34; name=&#34;__codelineno-6-17&#34; href=&#34;#__codelineno-6-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; success = OP_##OPCODE_NAME&amp;lt;transaction_active&amp;gt;( \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-18&#34;&gt;&lt;a id=&#34;__codelineno-6-18&#34; name=&#34;__codelineno-6-18&#34; href=&#34;#__codelineno-6-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; ctx, instrumentation, self, shadow_frame, dex_pc, inst, inst_data, next, exit); \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-19&#34;&gt;&lt;a id=&#34;__codelineno-6-19&#34; name=&#34;__codelineno-6-19&#34; href=&#34;#__codelineno-6-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; if (success &amp;amp;&amp;amp; LIKELY(!interpret_one_instruction)) { \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-20&#34;&gt;&lt;a id=&#34;__codelineno-6-20&#34; name=&#34;__codelineno-6-20&#34; href=&#34;#__codelineno-6-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; continue; \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-21&#34;&gt;&lt;a id=&#34;__codelineno-6-21&#34; name=&#34;__codelineno-6-21&#34; href=&#34;#__codelineno-6-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; } \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-22&#34;&gt;&lt;a id=&#34;__codelineno-6-22&#34; name=&#34;__codelineno-6-22&#34; href=&#34;#__codelineno-6-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; break; \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-23&#34;&gt;&lt;a id=&#34;__codelineno-6-23&#34; name=&#34;__codelineno-6-23&#34; href=&#34;#__codelineno-6-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; }&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-24&#34;&gt;&lt;a id=&#34;__codelineno-6-24&#34; name=&#34;__codelineno-6-24&#34; href=&#34;#__codelineno-6-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DEX_INSTRUCTION_LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OPCODE_CASE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-25&#34;&gt;&lt;a id=&#34;__codelineno-6-25&#34; name=&#34;__codelineno-6-25&#34; href=&#34;#__codelineno-6-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#undef OPCODE_CASE&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-26&#34;&gt;&lt;a id=&#34;__codelineno-6-26&#34; name=&#34;__codelineno-6-26&#34; href=&#34;#__codelineno-6-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-27&#34;&gt;&lt;a id=&#34;__codelineno-6-27&#34; name=&#34;__codelineno-6-27&#34; href=&#34;#__codelineno-6-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-28&#34;&gt;&lt;a id=&#34;__codelineno-6-28&#34; name=&#34;__codelineno-6-28&#34; href=&#34;#__codelineno-6-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// exit condition handling omitted&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-29&#34;&gt;&lt;a id=&#34;__codelineno-6-29&#34; name=&#34;__codelineno-6-29&#34; href=&#34;#__codelineno-6-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码中使用了 &lt;a href=&#34;https://en.wikipedia.org/wiki/X_macro&#34;&gt;X macro&lt;/a&gt; 的编程技巧：如果你需要在不同的地方重复出现同一个 list，比如在这里，就是所有可能的 Opcode 类型，你可以在一个头文件中用一个宏，以另一个宏为参数去列出来：&lt;/p&gt;&lt;div class=&#34;language-c++ highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-7-1&#34;&gt;&lt;a id=&#34;__codelineno-7-1&#34; name=&#34;__codelineno-7-1&#34; href=&#34;#__codelineno-7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;// V(opcode, instruction_code, name, format, index, flags, extended_flags, verifier_flags);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-2&#34;&gt;&lt;a id=&#34;__codelineno-7-2&#34; name=&#34;__codelineno-7-2&#34; href=&#34;#__codelineno-7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define DEX_INSTRUCTION_LIST(V) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-3&#34;&gt;&lt;a id=&#34;__codelineno-7-3&#34; name=&#34;__codelineno-7-3&#34; href=&#34;#__codelineno-7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; V(0x00, NOP, &amp;quot;nop&amp;quot;, k10x, kIndexNone, kContinue, 0, kVerifyNothing) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-4&#34;&gt;&lt;a id=&#34;__codelineno-7-4&#34; name=&#34;__codelineno-7-4&#34; href=&#34;#__codelineno-7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; V(0x01, MOVE, &amp;quot;move&amp;quot;, k12x, kIndexNone, kContinue, 0, kVerifyRegA | kVerifyRegB) \&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-5&#34;&gt;&lt;a id=&#34;__codelineno-7-5&#34; name=&#34;__codelineno-7-5&#34; href=&#34;#__codelineno-7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// omitted&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个宏定义在 &lt;code&gt;libdexfile/dex/dex_instruction_list.h&lt;/code&gt; 头文件当中。在使用的时候，临时定义一个宏，然后把新定义的宏传入 &lt;code&gt;DEX_INSTRUCTION_LIST&lt;/code&gt; 的参数即可。例如要生成一个数组，记录所有的 op 名字，可以：&lt;/p&gt;&lt;div class=&#34;language-cpp highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-8-1&#34;&gt;&lt;a id=&#34;__codelineno-8-1&#34; name=&#34;__codelineno-8-1&#34; href=&#34;#__codelineno-8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;// taken from libdexfile/dex/dex_instruction.cc&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-2&#34;&gt;&lt;a id=&#34;__codelineno-8-2&#34; name=&#34;__codelineno-8-2&#34; href=&#34;#__codelineno-8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kInstructionNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-3&#34;&gt;&lt;a id=&#34;__codelineno-8-3&#34; name=&#34;__codelineno-8-3&#34; href=&#34;#__codelineno-8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define INSTRUCTION_NAME(o, c, pname, f, i, a, e, v) pname,&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-4&#34;&gt;&lt;a id=&#34;__codelineno-8-4&#34; name=&#34;__codelineno-8-4&#34; href=&#34;#__codelineno-8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;quot;dex_instruction_list.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-5&#34;&gt;&lt;a id=&#34;__codelineno-8-5&#34; name=&#34;__codelineno-8-5&#34; href=&#34;#__codelineno-8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DEX_INSTRUCTION_LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INSTRUCTION_NAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-6&#34;&gt;&lt;a id=&#34;__codelineno-8-6&#34; name=&#34;__codelineno-8-6&#34; href=&#34;#__codelineno-8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#undef DEX_INSTRUCTION_LIST&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-7&#34;&gt;&lt;a id=&#34;__codelineno-8-7&#34; name=&#34;__codelineno-8-7&#34; href=&#34;#__codelineno-8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#undef INSTRUCTION_NAME&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-8&#34;&gt;&lt;a id=&#34;__codelineno-8-8&#34; name=&#34;__codelineno-8-8&#34; href=&#34;#__codelineno-8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码经过 C 预处理器，首先会被展开为：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-9-1&#34;&gt;&lt;a id=&#34;__codelineno-9-1&#34; name=&#34;__codelineno-9-1&#34; href=&#34;#__codelineno-9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kInstructionNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-2&#34;&gt;&lt;a id=&#34;__codelineno-9-2&#34; name=&#34;__codelineno-9-2&#34; href=&#34;#__codelineno-9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define INSTRUCTION_NAME(o, c, pname, f, i, a, e, v) pname,&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-3&#34;&gt;&lt;a id=&#34;__codelineno-9-3&#34; name=&#34;__codelineno-9-3&#34; href=&#34;#__codelineno-9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INSTRUCTION_NAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x00&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NOP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;nop&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k10x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kIndexNone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kContinue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kVerifyNothing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;\&lt;/span&gt;&lt;span id=&#34;__span-9-4&#34;&gt;&lt;a id=&#34;__codelineno-9-4&#34; name=&#34;__codelineno-9-4&#34; href=&#34;#__codelineno-9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INSTRUCTION_NAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MOVE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;move&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k12x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kIndexNone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kContinue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kVerifyRegA&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kVerifyRegB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;\&lt;/span&gt;&lt;span id=&#34;__span-9-5&#34;&gt;&lt;a id=&#34;__codelineno-9-5&#34; name=&#34;__codelineno-9-5&#34; href=&#34;#__codelineno-9-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// omitted&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-6&#34;&gt;&lt;a id=&#34;__codelineno-9-6&#34; name=&#34;__codelineno-9-6&#34; href=&#34;#__codelineno-9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#undef INSTRUCTION_NAME&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-7&#34;&gt;&lt;a id=&#34;__codelineno-9-7&#34; name=&#34;__codelineno-9-7&#34; href=&#34;#__codelineno-9-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;继续展开，就得到了想要留下的内容：&lt;/p&gt;&lt;div class=&#34;language-c++ highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-10-1&#34;&gt;&lt;a id=&#34;__codelineno-10-1&#34; name=&#34;__codelineno-10-1&#34; href=&#34;#__codelineno-10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kInstructionNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-2&#34;&gt;&lt;a id=&#34;__codelineno-10-2&#34; name=&#34;__codelineno-10-2&#34; href=&#34;#__codelineno-10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;nop&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-3&#34;&gt;&lt;a id=&#34;__codelineno-10-3&#34; name=&#34;__codelineno-10-3&#34; href=&#34;#__codelineno-10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;move&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-4&#34;&gt;&lt;a id=&#34;__codelineno-10-4&#34; name=&#34;__codelineno-10-4&#34; href=&#34;#__codelineno-10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// omitted&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-10-5&#34;&gt;&lt;a id=&#34;__codelineno-10-5&#34; name=&#34;__codelineno-10-5&#34; href=&#34;#__codelineno-10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;回到 switch-case 的地方，可以预见到，预处理会生成的代码大概是：&lt;/p&gt;&lt;div class=&#34;language-cpp highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-11-1&#34;&gt;&lt;a id=&#34;__codelineno-11-1&#34; name=&#34;__codelineno-11-1&#34; href=&#34;#__codelineno-11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Opcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-2&#34;&gt;&lt;a id=&#34;__codelineno-11-2&#34; name=&#34;__codelineno-11-2&#34; href=&#34;#__codelineno-11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x00&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;\&lt;/span&gt;&lt;span id=&#34;__span-11-3&#34;&gt;&lt;a id=&#34;__codelineno-11-3&#34; name=&#34;__codelineno-11-3&#34; href=&#34;#__codelineno-11-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RelativeAt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SizeInCodeUnits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k10x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;\&lt;/span&gt;&lt;span id=&#34;__span-11-4&#34;&gt;&lt;a id=&#34;__codelineno-11-4&#34; name=&#34;__codelineno-11-4&#34; href=&#34;#__codelineno-11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;success&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP_NOP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transaction_active&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;\&lt;/span&gt;&lt;span id=&#34;__span-11-5&#34;&gt;&lt;a id=&#34;__codelineno-11-5&#34; name=&#34;__codelineno-11-5&#34; href=&#34;#__codelineno-11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instrumentation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shadow_frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dex_pc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;\&lt;/span&gt;&lt;span id=&#34;__span-11-6&#34;&gt;&lt;a id=&#34;__codelineno-11-6&#34; name=&#34;__codelineno-11-6&#34; href=&#34;#__codelineno-11-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;success&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIKELY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interpret_one_instruction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;\&lt;/span&gt;&lt;span id=&#34;__span-11-7&#34;&gt;&lt;a id=&#34;__codelineno-11-7&#34; name=&#34;__codelineno-11-7&#34; href=&#34;#__codelineno-11-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;\&lt;/span&gt;&lt;span id=&#34;__span-11-8&#34;&gt;&lt;a id=&#34;__codelineno-11-8&#34; name=&#34;__codelineno-11-8&#34; href=&#34;#__codelineno-11-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;\&lt;/span&gt;&lt;span id=&#34;__span-11-9&#34;&gt;&lt;a id=&#34;__codelineno-11-9&#34; name=&#34;__codelineno-11-9&#34; href=&#34;#__codelineno-11-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;\&lt;/span&gt;&lt;span id=&#34;__span-11-10&#34;&gt;&lt;a id=&#34;__codelineno-11-10&#34; name=&#34;__codelineno-11-10&#34; href=&#34;#__codelineno-11-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-11&#34;&gt;&lt;a id=&#34;__codelineno-11-11&#34; name=&#34;__codelineno-11-11&#34; href=&#34;#__codelineno-11-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// omitted&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-11-12&#34;&gt;&lt;a id=&#34;__codelineno-11-12&#34; name=&#34;__codelineno-11-12&#34; href=&#34;#__codelineno-11-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;next = inst-&amp;gt;RelativeAt(Instruction::SizeInCodeUnits(Instruction::k10x));&lt;/code&gt; 语句根据当前 Op 类型计算出它会占用多少个字节，从而得到下一个 Op 的地址。之后就是调用 &lt;code&gt;OP_NOP&lt;/code&gt; 函数来进行实际的操作了。当然了，这个实际的操作，还是需要开发者去手动实现（&lt;code&gt;OP_NOP&lt;/code&gt; 函数会调用下面的 &lt;code&gt;NOP&lt;/code&gt; 函数）：&lt;/p&gt;&lt;div class=&#34;language-c++ highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-12-1&#34;&gt;&lt;a id=&#34;__codelineno-12-1&#34; name=&#34;__codelineno-12-1&#34; href=&#34;#__codelineno-12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;HANDLER_ATTRIBUTES&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NOP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-2&#34;&gt;&lt;a id=&#34;__codelineno-12-2&#34; name=&#34;__codelineno-12-2&#34; href=&#34;#__codelineno-12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-3&#34;&gt;&lt;a id=&#34;__codelineno-12-3&#34; name=&#34;__codelineno-12-3&#34; href=&#34;#__codelineno-12-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-4&#34;&gt;&lt;a id=&#34;__codelineno-12-4&#34; name=&#34;__codelineno-12-4&#34; href=&#34;#__codelineno-12-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-5&#34;&gt;&lt;a id=&#34;__codelineno-12-5&#34; name=&#34;__codelineno-12-5&#34; href=&#34;#__codelineno-12-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;HANDLER_ATTRIBUTES&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MOVE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-6&#34;&gt;&lt;a id=&#34;__codelineno-12-6&#34; name=&#34;__codelineno-12-6&#34; href=&#34;#__codelineno-12-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SetVReg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetVReg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()));&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-7&#34;&gt;&lt;a id=&#34;__codelineno-12-7&#34; name=&#34;__codelineno-12-7&#34; href=&#34;#__codelineno-12-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-8&#34;&gt;&lt;a id=&#34;__codelineno-12-8&#34; name=&#34;__codelineno-12-8&#34; href=&#34;#__codelineno-12-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-9&#34;&gt;&lt;a id=&#34;__codelineno-12-9&#34; name=&#34;__codelineno-12-9&#34; href=&#34;#__codelineno-12-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-10&#34;&gt;&lt;a id=&#34;__codelineno-12-10&#34; name=&#34;__codelineno-12-10&#34; href=&#34;#__codelineno-12-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;HANDLER_ATTRIBUTES&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ADD_INT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-11&#34;&gt;&lt;a id=&#34;__codelineno-12-11&#34; name=&#34;__codelineno-12-11&#34; href=&#34;#__codelineno-12-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SetVReg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SafeAdd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetVReg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetVReg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())));&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-12&#34;&gt;&lt;a id=&#34;__codelineno-12-12&#34; name=&#34;__codelineno-12-12&#34; href=&#34;#__codelineno-12-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-12-13&#34;&gt;&lt;a id=&#34;__codelineno-12-13&#34; name=&#34;__codelineno-12-13&#34; href=&#34;#__codelineno-12-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;基于-token-threading-的解释器-mterp-nterp&#34;&gt;基于 token threading 的解释器 mterp (nterp)&lt;a class=&#34;headerlink&#34; href=&#34;#基于-token-threading-的解释器-mterp-nterp&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;第二个解释器则是基于 token threading 的解释器，它的源码在 &lt;code&gt;runtime/interpreter/mterp&lt;/code&gt; 目录下。由于这些代码是用汇编写的，直接写会有很多重复的部分。为了避免重复的代码，目前的解释器 mterp (现在叫 nterp) 用 Python 脚本来生成最终的汇编代码。要生成它，也很简单：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-13-1&#34;&gt;&lt;a id=&#34;__codelineno-13-1&#34; name=&#34;__codelineno-13-1&#34; href=&#34;#__codelineno-13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;runtime/interpreter/mterp&lt;/span&gt;&lt;span id=&#34;__span-13-2&#34;&gt;&lt;a id=&#34;__codelineno-13-2&#34; name=&#34;__codelineno-13-2&#34; href=&#34;#__codelineno-13-2&#34;&gt;&lt;/a&gt;./gen_mterp.py&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mterp_arm64ng.S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;arm64ng/*.S&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个脚本是平台无关的，例如如果要生成 amd64 平台的汇编，只需要：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-14-1&#34;&gt;&lt;a id=&#34;__codelineno-14-1&#34; name=&#34;__codelineno-14-1&#34; href=&#34;#__codelineno-14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;runtime/interpreter/mterp&lt;/span&gt;&lt;span id=&#34;__span-14-2&#34;&gt;&lt;a id=&#34;__codelineno-14-2&#34; name=&#34;__codelineno-14-2&#34; href=&#34;#__codelineno-14-2&#34;&gt;&lt;/a&gt;./gen_mterp.py&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mterp_x86_64ng.S&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;x86_64ng/*.S&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以看到完整的汇编代码了，后续的分析都会基于这份汇编代码。如果读者对 amd64 汇编比较熟悉，也可以在本地生成一份 amd64 的汇编再结合本文进行理解。&lt;/p&gt;&lt;p&gt;上面提到过 &lt;code&gt;add-int/2addr vA, vB&lt;/code&gt; 这个做整数加法的 Op，直接在生成的汇编中，找到它对应的代码：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-15-1&#34;&gt;&lt;a id=&#34;__codelineno-15-1&#34; name=&#34;__codelineno-15-1&#34; href=&#34;#__codelineno-15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.balign&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NTERP_HANDLER_SIZE&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-2&#34;&gt;&lt;a id=&#34;__codelineno-15-2&#34; name=&#34;__codelineno-15-2&#34; href=&#34;#__codelineno-15-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;.L_op_add_int_2addr:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* 0xb0 */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-3&#34;&gt;&lt;a id=&#34;__codelineno-15-3&#34; name=&#34;__codelineno-15-3&#34; href=&#34;#__codelineno-15-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-4&#34;&gt;&lt;a id=&#34;__codelineno-15-4&#34; name=&#34;__codelineno-15-4&#34; href=&#34;#__codelineno-15-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* binop/2addr vA, vB */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-5&#34;&gt;&lt;a id=&#34;__codelineno-15-5&#34; name=&#34;__codelineno-15-5&#34; href=&#34;#__codelineno-15-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;lsr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;wINST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;#12&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// w3&amp;lt;- B&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-6&#34;&gt;&lt;a id=&#34;__codelineno-15-6&#34; name=&#34;__codelineno-15-6&#34; href=&#34;#__codelineno-15-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ubfx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;wINST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;#8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;#4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// w9&amp;lt;- A&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-7&#34;&gt;&lt;a id=&#34;__codelineno-15-7&#34; name=&#34;__codelineno-15-7&#34; href=&#34;#__codelineno-15-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GET_VREG&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// w1&amp;lt;- vB&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-8&#34;&gt;&lt;a id=&#34;__codelineno-15-8&#34; name=&#34;__codelineno-15-8&#34; href=&#34;#__codelineno-15-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GET_VREG&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w9&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// w0&amp;lt;- vA&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-9&#34;&gt;&lt;a id=&#34;__codelineno-15-9&#34; name=&#34;__codelineno-15-9&#34; href=&#34;#__codelineno-15-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;FETCH_ADVANCE_INST&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// advance rPC, load rINST&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-10&#34;&gt;&lt;a id=&#34;__codelineno-15-10&#34; name=&#34;__codelineno-15-10&#34; href=&#34;#__codelineno-15-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// w0&amp;lt;- op, w0-w3 changed&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-11&#34;&gt;&lt;a id=&#34;__codelineno-15-11&#34; name=&#34;__codelineno-15-11&#34; href=&#34;#__codelineno-15-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GET_INST_OPCODE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// extract opcode from rINST&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-12&#34;&gt;&lt;a id=&#34;__codelineno-15-12&#34; name=&#34;__codelineno-15-12&#34; href=&#34;#__codelineno-15-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SET_VREG&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w9&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// vAA&amp;lt;- w0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-13&#34;&gt;&lt;a id=&#34;__codelineno-15-13&#34; name=&#34;__codelineno-15-13&#34; href=&#34;#__codelineno-15-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GOTO_OPCODE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// jump to next instruction&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-15-14&#34;&gt;&lt;a id=&#34;__codelineno-15-14&#34; name=&#34;__codelineno-15-14&#34; href=&#34;#__codelineno-15-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* omitted */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;wINST&lt;/code&gt; 表示当前 Op 的前两个字节的内容，前面提到，&lt;code&gt;add-int/2addr vA, vB&lt;/code&gt; 编码为两个字节，第一个字节是固定的 &lt;code&gt;0xb0&lt;/code&gt;，第二个字节共 8 位，低 4 位编码了 &lt;code&gt;vA&lt;/code&gt; 的寄存器编号 &lt;code&gt;A&lt;/code&gt;，高 4 位编码了 &lt;code&gt;vB&lt;/code&gt; 的寄存器编号 &lt;code&gt;B&lt;/code&gt;。由于这是小端序的处理器，那么解释为 16 位整数，从高位到低位依次是：4 位的 &lt;code&gt;B&lt;/code&gt;，4 位的 &lt;code&gt;A&lt;/code&gt; 和 8 位的 &lt;code&gt;0xb0&lt;/code&gt;。知道这个背景以后，再来分析每条指令做的事情，就很清晰：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;lsr w3, wINST, #12&lt;/code&gt;：求 &lt;code&gt;wINST&lt;/code&gt; 右移动 12 位，得到了 &lt;code&gt;B&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;ubfx w9, wINST, #8, #4&lt;/code&gt;: &lt;code&gt;ubfx&lt;/code&gt; 是 Bit Extract 指令，这里的意思是从 &lt;code&gt;wINST&lt;/code&gt; 第 8 位开始取 4 位数据出来，也就是 &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;GET_VREG w1, w3&lt;/code&gt;: 读取寄存器编号为 &lt;code&gt;w3&lt;/code&gt; 的值，写到 &lt;code&gt;w1&lt;/code&gt; 当中，结合第一条指令，可知此时 &lt;code&gt;w1&lt;/code&gt; 等于 &lt;code&gt;B&lt;/code&gt; 寄存器的值&lt;/li&gt;&lt;li&gt;&lt;code&gt;GET_VREG w0, w9&lt;/code&gt;: 读取寄存器编号为 &lt;code&gt;w9&lt;/code&gt; 的值，写到 &lt;code&gt;w0&lt;/code&gt; 当中，结合第二条指令，可知此时 &lt;code&gt;w0&lt;/code&gt; 等于 &lt;code&gt;A&lt;/code&gt; 寄存器的值&lt;/li&gt;&lt;li&gt;&lt;code&gt;FETCH_ADVANCE_INST 1&lt;/code&gt;: 把 &#34;PC&#34; 往前移动 1 个单位的距离，也就是两个字节，并读取下一个 Op 到 &lt;code&gt;rINST&lt;/code&gt; 当中&lt;/li&gt;&lt;li&gt;&lt;code&gt;add w0, w0, w1&lt;/code&gt;: 进行实际的整数加法运算，结果保存在 &lt;code&gt;w0&lt;/code&gt; 当中&lt;/li&gt;&lt;li&gt;&lt;code&gt;GET_INST_OPCODE ip&lt;/code&gt;: 根据第五条指令读取的下一个 Op 的值 &lt;code&gt;rINST&lt;/code&gt;，解析出它的 Opcode&lt;/li&gt;&lt;li&gt;&lt;code&gt;SET_VREG w0, w9&lt;/code&gt;: 把整数加法的结果写回到寄存器编号为 &lt;code&gt;w9&lt;/code&gt; 的寄存器当中，结合第二条指令，可知写入的是 &lt;code&gt;A&lt;/code&gt; 寄存器&lt;/li&gt;&lt;li&gt;&lt;code&gt;GOTO_OPCODE ip&lt;/code&gt;: 跳转到下一个 Op 对应的 handler&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;整体代码还是比较清晰的，只是说把计算 &lt;code&gt;A + B&lt;/code&gt; 写入 &lt;code&gt;A&lt;/code&gt; 的过程和读取下一个 Op 并跳转的逻辑穿插了起来，手动做了一次寄存器调度。那么这些 &lt;code&gt;GET_REG&lt;/code&gt; 和 &lt;code&gt;FETCH_ADVANCE_INST&lt;/code&gt; 等等具体又是怎么实现的呢？下面把宏展开后的代码贴出来：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-16-1&#34;&gt;&lt;a id=&#34;__codelineno-16-1&#34; name=&#34;__codelineno-16-1&#34; href=&#34;#__codelineno-16-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.balign&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NTERP_HANDLER_SIZE&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-2&#34;&gt;&lt;a id=&#34;__codelineno-16-2&#34; name=&#34;__codelineno-16-2&#34; href=&#34;#__codelineno-16-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;.L_op_add_int_2addr:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* 0xb0 */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-3&#34;&gt;&lt;a id=&#34;__codelineno-16-3&#34; name=&#34;__codelineno-16-3&#34; href=&#34;#__codelineno-16-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* omitted */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-4&#34;&gt;&lt;a id=&#34;__codelineno-16-4&#34; name=&#34;__codelineno-16-4&#34; href=&#34;#__codelineno-16-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* binop/2addr vA, vB */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-5&#34;&gt;&lt;a id=&#34;__codelineno-16-5&#34; name=&#34;__codelineno-16-5&#34; href=&#34;#__codelineno-16-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-6&#34;&gt;&lt;a id=&#34;__codelineno-16-6&#34; name=&#34;__codelineno-16-6&#34; href=&#34;#__codelineno-16-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// wINST is w23, the first 16-bit code unit of current instruction&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-7&#34;&gt;&lt;a id=&#34;__codelineno-16-7&#34; name=&#34;__codelineno-16-7&#34; href=&#34;#__codelineno-16-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// lsr w3, wINST, #12 // w3&amp;lt;- B&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-8&#34;&gt;&lt;a id=&#34;__codelineno-16-8&#34; name=&#34;__codelineno-16-8&#34; href=&#34;#__codelineno-16-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;lsr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w23&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;#12&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-9&#34;&gt;&lt;a id=&#34;__codelineno-16-9&#34; name=&#34;__codelineno-16-9&#34; href=&#34;#__codelineno-16-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ubfx w9, wINST, #8, #4 // w9&amp;lt;- A&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-10&#34;&gt;&lt;a id=&#34;__codelineno-16-10&#34; name=&#34;__codelineno-16-10&#34; href=&#34;#__codelineno-16-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ubfx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w23&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;#8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;#4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-11&#34;&gt;&lt;a id=&#34;__codelineno-16-11&#34; name=&#34;__codelineno-16-11&#34; href=&#34;#__codelineno-16-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-12&#34;&gt;&lt;a id=&#34;__codelineno-16-12&#34; name=&#34;__codelineno-16-12&#34; href=&#34;#__codelineno-16-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// virtual registers are stored relative to xFP(x29), the interpreted frame pointer, used for accessing locals and args&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-13&#34;&gt;&lt;a id=&#34;__codelineno-16-13&#34; name=&#34;__codelineno-16-13&#34; href=&#34;#__codelineno-16-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// GET_VREG w1, w3 // w1&amp;lt;- vB&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-14&#34;&gt;&lt;a id=&#34;__codelineno-16-14&#34; name=&#34;__codelineno-16-14&#34; href=&#34;#__codelineno-16-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ldr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x29&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;uxtw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;#2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-15&#34;&gt;&lt;a id=&#34;__codelineno-16-15&#34; name=&#34;__codelineno-16-15&#34; href=&#34;#__codelineno-16-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// GET_VREG w0, w9 // w0&amp;lt;- vA&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-16&#34;&gt;&lt;a id=&#34;__codelineno-16-16&#34; name=&#34;__codelineno-16-16&#34; href=&#34;#__codelineno-16-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ldr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x29&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;uxtw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;#2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-17&#34;&gt;&lt;a id=&#34;__codelineno-16-17&#34; name=&#34;__codelineno-16-17&#34; href=&#34;#__codelineno-16-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-18&#34;&gt;&lt;a id=&#34;__codelineno-16-18&#34; name=&#34;__codelineno-16-18&#34; href=&#34;#__codelineno-16-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// xPC(x22) is the interpreted program counter, used for fetching instructions&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-19&#34;&gt;&lt;a id=&#34;__codelineno-16-19&#34; name=&#34;__codelineno-16-19&#34; href=&#34;#__codelineno-16-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// FETCH_ADVANCE_INST 1 // advance rPC, load rINST&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-20&#34;&gt;&lt;a id=&#34;__codelineno-16-20&#34; name=&#34;__codelineno-16-20&#34; href=&#34;#__codelineno-16-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// a pre-index load instruction that both reads wINST from memory and increments xPC(x22) by 2&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-21&#34;&gt;&lt;a id=&#34;__codelineno-16-21&#34; name=&#34;__codelineno-16-21&#34; href=&#34;#__codelineno-16-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ldrh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w23&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x22&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;#2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]!&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-22&#34;&gt;&lt;a id=&#34;__codelineno-16-22&#34; name=&#34;__codelineno-16-22&#34; href=&#34;#__codelineno-16-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-23&#34;&gt;&lt;a id=&#34;__codelineno-16-23&#34; name=&#34;__codelineno-16-23&#34; href=&#34;#__codelineno-16-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// add w0, w0, w1 // w0&amp;lt;- op, w0-w3 changed&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-24&#34;&gt;&lt;a id=&#34;__codelineno-16-24&#34; name=&#34;__codelineno-16-24&#34; href=&#34;#__codelineno-16-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-25&#34;&gt;&lt;a id=&#34;__codelineno-16-25&#34; name=&#34;__codelineno-16-25&#34; href=&#34;#__codelineno-16-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-26&#34;&gt;&lt;a id=&#34;__codelineno-16-26&#34; name=&#34;__codelineno-16-26&#34; href=&#34;#__codelineno-16-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ip(x16) is a scratch register, used to store the first byte (opcode) of wINST&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-27&#34;&gt;&lt;a id=&#34;__codelineno-16-27&#34; name=&#34;__codelineno-16-27&#34; href=&#34;#__codelineno-16-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// GET_INST_OPCODE ip // extract opcode from rINST&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-28&#34;&gt;&lt;a id=&#34;__codelineno-16-28&#34; name=&#34;__codelineno-16-28&#34; href=&#34;#__codelineno-16-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x23&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0xff&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-29&#34;&gt;&lt;a id=&#34;__codelineno-16-29&#34; name=&#34;__codelineno-16-29&#34; href=&#34;#__codelineno-16-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-30&#34;&gt;&lt;a id=&#34;__codelineno-16-30&#34; name=&#34;__codelineno-16-30&#34; href=&#34;#__codelineno-16-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// save addition result to virtual register, which is relative to xFP(x29)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-31&#34;&gt;&lt;a id=&#34;__codelineno-16-31&#34; name=&#34;__codelineno-16-31&#34; href=&#34;#__codelineno-16-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// also set its object references to zero, which is relative to xREFS(x25)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-32&#34;&gt;&lt;a id=&#34;__codelineno-16-32&#34; name=&#34;__codelineno-16-32&#34; href=&#34;#__codelineno-16-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// SET_VREG w0, w9 // vAA&amp;lt;- w0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-33&#34;&gt;&lt;a id=&#34;__codelineno-16-33&#34; name=&#34;__codelineno-16-33&#34; href=&#34;#__codelineno-16-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x29&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;uxtw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;#2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-34&#34;&gt;&lt;a id=&#34;__codelineno-16-34&#34; name=&#34;__codelineno-16-34&#34; href=&#34;#__codelineno-16-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;wzr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;w9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;uxtw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;#2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-35&#34;&gt;&lt;a id=&#34;__codelineno-16-35&#34; name=&#34;__codelineno-16-35&#34; href=&#34;#__codelineno-16-35&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-36&#34;&gt;&lt;a id=&#34;__codelineno-16-36&#34; name=&#34;__codelineno-16-36&#34; href=&#34;#__codelineno-16-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// now x16 saves the opcode, and xIBASE(x24) interpreted instruction base pointer, used for computed goto&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-37&#34;&gt;&lt;a id=&#34;__codelineno-16-37&#34; name=&#34;__codelineno-16-37&#34; href=&#34;#__codelineno-16-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// for opcode #k, the handler address of it would be `xIBASE + k * 128`&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-38&#34;&gt;&lt;a id=&#34;__codelineno-16-38&#34; name=&#34;__codelineno-16-38&#34; href=&#34;#__codelineno-16-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// GOTO_OPCODE ip // jump to next instruction&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-39&#34;&gt;&lt;a id=&#34;__codelineno-16-39&#34; name=&#34;__codelineno-16-39&#34; href=&#34;#__codelineno-16-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;lsl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;#7&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-40&#34;&gt;&lt;a id=&#34;__codelineno-16-40&#34; name=&#34;__codelineno-16-40&#34; href=&#34;#__codelineno-16-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;br&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x16&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-16-41&#34;&gt;&lt;a id=&#34;__codelineno-16-41&#34; name=&#34;__codelineno-16-41&#34; href=&#34;#__codelineno-16-41&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* omitted */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;各个寄存器的含义已经在上面的注释中写出，比如 &lt;code&gt;w23&lt;/code&gt; 记录了当前 Op 的前 16 位的内容，&lt;code&gt;x29&lt;/code&gt; 记录了当前的 frame pointer，通过它可以访问各个 virtual register；&lt;code&gt;x11&lt;/code&gt; 是 PC，记录了正在执行的 Op 的地址；&lt;code&gt;x24&lt;/code&gt; 记录了这些 op handler 的起始地址，由于每个 handler 都不超过 128 字节，且都对齐到 128 字节边界（&lt;code&gt;.balign NTERP_HANDLER_SIZE&lt;/code&gt;），所以只需要简单的运算 &lt;code&gt;xIBASE + opcode * 128&lt;/code&gt; 即可找到下一个 op 的 handler 地址，不需要再进行一次访存。&lt;/p&gt;&lt;p&gt;如果要比较一下 Android Runtime 的 mterp (nterp) 和 &lt;a href=&#34;../../01/v8-ignition-internals/&#34;&gt;V8 的 Ignition 解释器&lt;/a&gt;的实现，有如下几点相同与不同：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;两者都采用了 token threading 的方法，即在一个 Op 处理完成以后，计算出下一个 Op 的 handler 的地址，跳转过去&lt;/li&gt;&lt;li&gt;V8 的 op handler 是动态生成的（&lt;code&gt;mksnapshot&lt;/code&gt; 阶段），长度没有限制，允许生成比较复杂的汇编，但如果汇编比较短（比如 release 模式下），也可以节省一些内存；代价是需要一次额外的对 dispatch table 的访存，来找到 opcode 对应的 handler&lt;/li&gt;&lt;li&gt;mterp 的 op handler 对齐到 128B 边界，带来的好处是不需要访问 dispatch table，直接根据 opcode 计算地址即可，不过由于很多 handler 很短，可能只有十条指令左右，就会浪费了一些内存&lt;/li&gt;&lt;li&gt;V8 没有 handler 长度的限制，所以针对一些常见的 Op 做了优化（Short Star），可以减少一些跳转的开销&lt;/li&gt;&lt;li&gt;V8 在区分 Smi(Small integer) 和对象的时候，做法是在 LSB 上打标记：0 表示 Smi，1 表示对象；mterp 则不同，它给每个虚拟寄存器维护了两个 32 位的值：一个保存在 xFP 指向的数组当中，记录的是它的实际的值，比如 int 的值，或者对象的引用；另一个保存在 xREFS 指向的数组当中，记录的是它引用的对象，如果不是对象，则记录的是 0&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;除了以上列举的不同的地方以外，其实整体来看是十分类似的，下面是二者实现把整数加载到寄存器（&lt;code&gt;const/4 vA, #+B&lt;/code&gt; 和 &lt;code&gt;LdaSmi&lt;/code&gt;）的汇编的对比：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Operation&lt;/th&gt;&lt;th&gt;mterp (nterp)&lt;/th&gt;&lt;th&gt;Ignition&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Extract Dest Register&lt;/td&gt;&lt;td&gt;&lt;code&gt;ubfx w0, w23, #8, #4&lt;/code&gt;&lt;/td&gt;&lt;td&gt;N/A (destination is always the accumulator)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Extract Const Integer&lt;/td&gt;&lt;td&gt;&lt;code&gt;sbfx w1, w23, #12, #4&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;add x1, x19, #1; ldrsb w1, [x20, x1]&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Read Next Op&lt;/td&gt;&lt;td&gt;&lt;code&gt;ldrh w23, [x22, #2]!&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;add x19, x19, #2; ldrb w3, [x20, x19]&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Save Result&lt;/td&gt;&lt;td&gt;&lt;code&gt;str w1, [x29, w0, uxtw #2]; str wzr, [x25, w0, uxtw #2]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;add w0, w1, w1&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Computed Goto&lt;/td&gt;&lt;td&gt;&lt;code&gt;and x16, x23, 0xff; add x16, x24, x16, lsl #7; br x16&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;ldr x2, [x21, x3, lsl #3]; mov x17, x2; br x2&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;在寄存器的约定和使用上的区别：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Purpose&lt;/th&gt;&lt;th&gt;mterp (nterp)&lt;/th&gt;&lt;th&gt;Ignition&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Intepreter PC&lt;/td&gt;&lt;td&gt;base + offset in &lt;code&gt;x22&lt;/code&gt;&lt;/td&gt;&lt;td&gt;base in &lt;code&gt;x20&lt;/code&gt;, offset in &lt;code&gt;x19&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Virtual Register&lt;/td&gt;&lt;td&gt;relative to &lt;code&gt;x29&lt;/code&gt;&lt;/td&gt;&lt;td&gt;relative to &lt;code&gt;fp&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Dispatch Table&lt;/td&gt;&lt;td&gt;computed from &lt;code&gt;x24&lt;/code&gt;&lt;/td&gt;&lt;td&gt;saved in &lt;code&gt;x21&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&#34;lua-解释器&#34;&gt;Lua 解释器&lt;a class=&#34;headerlink&#34; href=&#34;#lua-解释器&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;既然已经分析了 &lt;a href=&#34;../../01/v8-ignition-internals/&#34;&gt;V8&lt;/a&gt; 和 Android Runtime 的解释器，也来简单看一下 &lt;a href=&#34;https://www.lua.org/&#34;&gt;Lua&lt;/a&gt; 的解释器实现。它写的非常简单，核心代码就在 &lt;code&gt;lvm.c&lt;/code&gt; 当中：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-17-1&#34;&gt;&lt;a id=&#34;__codelineno-17-1&#34; name=&#34;__codelineno-17-1&#34; href=&#34;#__codelineno-17-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;vmdispatch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GET_OPCODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-2&#34;&gt;&lt;a id=&#34;__codelineno-17-2&#34; name=&#34;__codelineno-17-2&#34; href=&#34;#__codelineno-17-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vmcase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP_MOVE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-3&#34;&gt;&lt;a id=&#34;__codelineno-17-3&#34; name=&#34;__codelineno-17-3&#34; href=&#34;#__codelineno-17-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StkId&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ra&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-4&#34;&gt;&lt;a id=&#34;__codelineno-17-4&#34; name=&#34;__codelineno-17-4&#34; href=&#34;#__codelineno-17-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setobjs2s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ra&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-5&#34;&gt;&lt;a id=&#34;__codelineno-17-5&#34; name=&#34;__codelineno-17-5&#34; href=&#34;#__codelineno-17-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vmbreak&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-6&#34;&gt;&lt;a id=&#34;__codelineno-17-6&#34; name=&#34;__codelineno-17-6&#34; href=&#34;#__codelineno-17-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-7&#34;&gt;&lt;a id=&#34;__codelineno-17-7&#34; name=&#34;__codelineno-17-7&#34; href=&#34;#__codelineno-17-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vmcase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP_LOADI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-8&#34;&gt;&lt;a id=&#34;__codelineno-17-8&#34; name=&#34;__codelineno-17-8&#34; href=&#34;#__codelineno-17-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StkId&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ra&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-9&#34;&gt;&lt;a id=&#34;__codelineno-17-9&#34; name=&#34;__codelineno-17-9&#34; href=&#34;#__codelineno-17-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lua_Integer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GETARG_sBx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-10&#34;&gt;&lt;a id=&#34;__codelineno-17-10&#34; name=&#34;__codelineno-17-10&#34; href=&#34;#__codelineno-17-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setivalue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ra&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-11&#34;&gt;&lt;a id=&#34;__codelineno-17-11&#34; name=&#34;__codelineno-17-11&#34; href=&#34;#__codelineno-17-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vmbreak&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-12&#34;&gt;&lt;a id=&#34;__codelineno-17-12&#34; name=&#34;__codelineno-17-12&#34; href=&#34;#__codelineno-17-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-13&#34;&gt;&lt;a id=&#34;__codelineno-17-13&#34; name=&#34;__codelineno-17-13&#34; href=&#34;#__codelineno-17-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-17-14&#34;&gt;&lt;a id=&#34;__codelineno-17-14&#34; name=&#34;__codelineno-17-14&#34; href=&#34;#__codelineno-17-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，它把 &lt;code&gt;switch&lt;/code&gt;、&lt;code&gt;case&lt;/code&gt; 和 &lt;code&gt;break&lt;/code&gt; 替换成了三个宏 &lt;code&gt;vmdispatch&lt;/code&gt;、&lt;code&gt;vmcase&lt;/code&gt; 和 &lt;code&gt;vmbreak&lt;/code&gt;。接下来看它可能的定义，第一种情况是编译器不支持 &lt;code&gt;goto *&lt;/code&gt; 语法，此时就直接展开：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-18-1&#34;&gt;&lt;a id=&#34;__codelineno-18-1&#34; name=&#34;__codelineno-18-1&#34; href=&#34;#__codelineno-18-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define vmdispatch(o) switch(o)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-18-2&#34;&gt;&lt;a id=&#34;__codelineno-18-2&#34; name=&#34;__codelineno-18-2&#34; href=&#34;#__codelineno-18-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define vmcase(l) case l:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-18-3&#34;&gt;&lt;a id=&#34;__codelineno-18-3&#34; name=&#34;__codelineno-18-3&#34; href=&#34;#__codelineno-18-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define vmbreak break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果编译器支持 &lt;code&gt;goto *&lt;/code&gt; 语法，则展开成对应的 &lt;code&gt;computed goto&lt;/code&gt; 形式：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-19-1&#34;&gt;&lt;a id=&#34;__codelineno-19-1&#34; name=&#34;__codelineno-19-1&#34; href=&#34;#__codelineno-19-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define vmdispatch(x) goto *disptab[x];&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-19-2&#34;&gt;&lt;a id=&#34;__codelineno-19-2&#34; name=&#34;__codelineno-19-2&#34; href=&#34;#__codelineno-19-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define vmcase(l) L_##l:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-19-3&#34;&gt;&lt;a id=&#34;__codelineno-19-3&#34; name=&#34;__codelineno-19-3&#34; href=&#34;#__codelineno-19-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cp&#34;&gt;#define vmbreak mfetch(); vmdispatch(GET_OPCODE(i));&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-19-4&#34;&gt;&lt;a id=&#34;__codelineno-19-4&#34; name=&#34;__codelineno-19-4&#34; href=&#34;#__codelineno-19-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-19-5&#34;&gt;&lt;a id=&#34;__codelineno-19-5&#34; name=&#34;__codelineno-19-5&#34; href=&#34;#__codelineno-19-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;disptab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NUM_OPCODES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-19-6&#34;&gt;&lt;a id=&#34;__codelineno-19-6&#34; name=&#34;__codelineno-19-6&#34; href=&#34;#__codelineno-19-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;L_OP_MOVE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-19-7&#34;&gt;&lt;a id=&#34;__codelineno-19-7&#34; name=&#34;__codelineno-19-7&#34; href=&#34;#__codelineno-19-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;L_OP_LOADI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-19-8&#34;&gt;&lt;a id=&#34;__codelineno-19-8&#34; name=&#34;__codelineno-19-8&#34; href=&#34;#__codelineno-19-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-19-9&#34;&gt;&lt;a id=&#34;__codelineno-19-9&#34; name=&#34;__codelineno-19-9&#34; href=&#34;#__codelineno-19-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和之前写的解释器的不同实现方法对应，就不多阐述了。&lt;/p&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;a class=&#34;headerlink&#34; href=&#34;#参考&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/22187630/what-does-mterp-mean&#34;&gt;What does mterp mean?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/523692715&#34;&gt;Android 11 新引入的 Dalvik 字节码解释器 Nterp&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/software/2025/03/06/android-runtime-interpreter/</link> <pubDate>Thu, 06 Mar 2025 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2025/03/06/android-runtime-interpreter/</guid> </item> <item> <title>V8 Ignition 解释器的内部实现探究</title> <category>aot</category> <category>javascript</category> <category>jit</category> <category>js</category> <category>linux</category> <category>software</category> <category>v8</category> <description>&lt;h1 id=&#34;v8-ignition-解释器的内部实现探究&#34;&gt;V8 Ignition 解释器的内部实现探究&lt;a class=&#34;headerlink&#34; href=&#34;#v8-ignition-解释器的内部实现探究&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;V8 是一个很常见的 JavaScript 引擎，运行在很多的设备上，因此想探究一下它内部的部分实现。本博客在 ARM64 Ubuntu 24.04 平台上针对 &lt;a href=&#34;https://chromium.googlesource.com/v8/v8.git/+/6f774f929205be0a49cf861b8d73a92655e1dd36&#34;&gt;V8 12.8.374.31&lt;/a&gt; 版本进行分析。本博客主要分析了 V8 的 Ignition 解释器的解释执行部分。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;编译-v8&#34;&gt;编译 V8&lt;a class=&#34;headerlink&#34; href=&#34;#编译-v8&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;首先简单过一下 v8 的源码获取以及编译流程，主要参考了 &lt;a href=&#34;https://v8.dev/docs/source-code&#34;&gt;Checking out the V8 source code&lt;/a&gt; 和 &lt;a href=&#34;https://v8.dev/docs/compile-arm64&#34;&gt;Compiling on Arm64 Linux&lt;/a&gt;:&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# setup depot_tools&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;~&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;git&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;clone&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;https://chromium.googlesource.com/chromium/tools/depot_tools.git&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/depot_tools:&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-6&#34;&gt;&lt;a id=&#34;__codelineno-0-6&#34; name=&#34;__codelineno-0-6&#34; href=&#34;#__codelineno-0-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# clone v8 repos&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-7&#34;&gt;&lt;a id=&#34;__codelineno-0-7&#34; name=&#34;__codelineno-0-7&#34; href=&#34;#__codelineno-0-7&#34;&gt;&lt;/a&gt;mkdir&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;~/v8&lt;/span&gt;&lt;span id=&#34;__span-0-8&#34;&gt;&lt;a id=&#34;__codelineno-0-8&#34; name=&#34;__codelineno-0-8&#34; href=&#34;#__codelineno-0-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;~/v8&lt;/span&gt;&lt;span id=&#34;__span-0-9&#34;&gt;&lt;a id=&#34;__codelineno-0-9&#34; name=&#34;__codelineno-0-9&#34; href=&#34;#__codelineno-0-9&#34;&gt;&lt;/a&gt;fetch&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;v8&lt;/span&gt;&lt;span id=&#34;__span-0-10&#34;&gt;&lt;a id=&#34;__codelineno-0-10&#34; name=&#34;__codelineno-0-10&#34; href=&#34;#__codelineno-0-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;v8&lt;/span&gt;&lt;span id=&#34;__span-0-11&#34;&gt;&lt;a id=&#34;__codelineno-0-11&#34; name=&#34;__codelineno-0-11&#34; href=&#34;#__codelineno-0-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-12&#34;&gt;&lt;a id=&#34;__codelineno-0-12&#34; name=&#34;__codelineno-0-12&#34; href=&#34;#__codelineno-0-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# switch to specified tag&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-13&#34;&gt;&lt;a id=&#34;__codelineno-0-13&#34; name=&#34;__codelineno-0-13&#34; href=&#34;#__codelineno-0-13&#34;&gt;&lt;/a&gt;git&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;checkout&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;.8.374.31&lt;/span&gt;&lt;span id=&#34;__span-0-14&#34;&gt;&lt;a id=&#34;__codelineno-0-14&#34; name=&#34;__codelineno-0-14&#34; href=&#34;#__codelineno-0-14&#34;&gt;&lt;/a&gt;gclient&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sync&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--verbose&lt;/span&gt;&lt;span id=&#34;__span-0-15&#34;&gt;&lt;a id=&#34;__codelineno-0-15&#34; name=&#34;__codelineno-0-15&#34; href=&#34;#__codelineno-0-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-16&#34;&gt;&lt;a id=&#34;__codelineno-0-16&#34; name=&#34;__codelineno-0-16&#34; href=&#34;#__codelineno-0-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# install dependencies&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-17&#34;&gt;&lt;a id=&#34;__codelineno-0-17&#34; name=&#34;__codelineno-0-17&#34; href=&#34;#__codelineno-0-17&#34;&gt;&lt;/a&gt;./build/install-build-deps.sh&lt;/span&gt;&lt;span id=&#34;__span-0-18&#34;&gt;&lt;a id=&#34;__codelineno-0-18&#34; name=&#34;__codelineno-0-18&#34; href=&#34;#__codelineno-0-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-19&#34;&gt;&lt;a id=&#34;__codelineno-0-19&#34; name=&#34;__codelineno-0-19&#34; href=&#34;#__codelineno-0-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# install llvm 19&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-20&#34;&gt;&lt;a id=&#34;__codelineno-0-20&#34; name=&#34;__codelineno-0-20&#34; href=&#34;#__codelineno-0-20&#34;&gt;&lt;/a&gt;wget&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;https://mirrors.tuna.tsinghua.edu.cn/llvm-apt/llvm.sh&lt;/span&gt;&lt;span id=&#34;__span-0-21&#34;&gt;&lt;a id=&#34;__codelineno-0-21&#34; name=&#34;__codelineno-0-21&#34; href=&#34;#__codelineno-0-21&#34;&gt;&lt;/a&gt;chmod&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;+x&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;llvm.sh&lt;/span&gt;&lt;span id=&#34;__span-0-22&#34;&gt;&lt;a id=&#34;__codelineno-0-22&#34; name=&#34;__codelineno-0-22&#34; href=&#34;#__codelineno-0-22&#34;&gt;&lt;/a&gt;sudo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./llvm.sh&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-m&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;https://mirrors.tuna.tsinghua.edu.cn/llvm-apt&lt;/span&gt;&lt;span id=&#34;__span-0-23&#34;&gt;&lt;a id=&#34;__codelineno-0-23&#34; name=&#34;__codelineno-0-23&#34; href=&#34;#__codelineno-0-23&#34;&gt;&lt;/a&gt;rm&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;llvm.sh&lt;/span&gt;&lt;span id=&#34;__span-0-24&#34;&gt;&lt;a id=&#34;__codelineno-0-24&#34; name=&#34;__codelineno-0-24&#34; href=&#34;#__codelineno-0-24&#34;&gt;&lt;/a&gt;sudo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;apt&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;install&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-y&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;lld&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;clang-19&lt;/span&gt;&lt;span id=&#34;__span-0-25&#34;&gt;&lt;a id=&#34;__codelineno-0-25&#34; name=&#34;__codelineno-0-25&#34; href=&#34;#__codelineno-0-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-26&#34;&gt;&lt;a id=&#34;__codelineno-0-26&#34; name=&#34;__codelineno-0-26&#34; href=&#34;#__codelineno-0-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# fix incompatibilities with system clang 19&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-27&#34;&gt;&lt;a id=&#34;__codelineno-0-27&#34; name=&#34;__codelineno-0-27&#34; href=&#34;#__codelineno-0-27&#34;&gt;&lt;/a&gt;sed&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-i&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;s/-Wno-missing-template-arg-list-after-template-kw//&amp;quot;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;build/config/compiler/BUILD.gn&lt;/span&gt;&lt;span id=&#34;__span-0-28&#34;&gt;&lt;a id=&#34;__codelineno-0-28&#34; name=&#34;__codelineno-0-28&#34; href=&#34;#__codelineno-0-28&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-29&#34;&gt;&lt;a id=&#34;__codelineno-0-29&#34; name=&#34;__codelineno-0-29&#34; href=&#34;#__codelineno-0-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# compile v8 using system clang 19&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-30&#34;&gt;&lt;a id=&#34;__codelineno-0-30&#34; name=&#34;__codelineno-0-30&#34; href=&#34;#__codelineno-0-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# for amd64: use x64.optdebug instead of arm64.optdebug&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-31&#34;&gt;&lt;a id=&#34;__codelineno-0-31&#34; name=&#34;__codelineno-0-31&#34; href=&#34;#__codelineno-0-31&#34;&gt;&lt;/a&gt;tools/dev/gm.py&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;arm64.optdebug&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--progress&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;verbose&lt;/span&gt;&lt;span id=&#34;__span-0-32&#34;&gt;&lt;a id=&#34;__codelineno-0-32&#34; name=&#34;__codelineno-0-32&#34; href=&#34;#__codelineno-0-32&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-33&#34;&gt;&lt;a id=&#34;__codelineno-0-33&#34; name=&#34;__codelineno-0-33&#34; href=&#34;#__codelineno-0-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# d8 is compiled successfully at&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-34&#34;&gt;&lt;a id=&#34;__codelineno-0-34&#34; name=&#34;__codelineno-0-34&#34; href=&#34;#__codelineno-0-34&#34;&gt;&lt;/a&gt;./out/arm64.optdebug/d8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果不想编译 V8，也可以直接用 Node.JS 来代替 &lt;code&gt;d8&lt;/code&gt;。不过 Node.JS 会加载很多 JS 代码，使得输出更加复杂，此时就需要手动过滤一些输出，或者通过命令行设置一些打印日志的过滤器。另外，后面有一些深入的调试信息，需要手动编译 V8 才能打开，因此还是建议读者上手自己编译一个 V8。&lt;/p&gt;&lt;p&gt;在 AMD64 上，默认会使用 V8 自带的 LLVM 版本来编译，此时就不需要额外安装 LLVM 19，也不需要修改 &lt;code&gt;v8/build/config/compiler/BUILD.gn&lt;/code&gt;。&lt;/p&gt;&lt;h2 id=&#34;解释器和编译器&#34;&gt;解释器和编译器&lt;a class=&#34;headerlink&#34; href=&#34;#解释器和编译器&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;通过 V8 的文档可以看到，V8 一共有这些解释器或编译器，按照其优化等级从小到大的顺序：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://v8.dev/docs/ignition&#34;&gt;Ignition&lt;/a&gt;: 解释器&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://v8.dev/blog/sparkplug&#34;&gt;SparkPlug&lt;/a&gt;: 不优化的快速编译器，追求快的编译速度&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://v8.dev/blog/maglev&#34;&gt;Maglev&lt;/a&gt;：做优化的编译器，寻求编译速度和编译质量的平衡&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://v8.dev/docs/turbofan&#34;&gt;TurboFan&lt;/a&gt;：做优化的编译器，寻求更好的编译质量&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;在 JS 的使用场景，不同代码被调用的次数以及对及时性的需求差别很大，为了适应不同的场景，V8 设计了这些解释器和编译器来提升整体的性能：执行次数少的代码，倾向于用更低优化等级的解释器或编译器，追求更低的优化开销；执行次数多的代码，当编译优化时间不再成为瓶颈，则倾向于用更高优化等级的编译器，追求更高的执行性能。&lt;/p&gt;&lt;h2 id=&#34;ignition-解释器&#34;&gt;Ignition 解释器&lt;a class=&#34;headerlink&#34; href=&#34;#ignition-解释器&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;分析样例-js-代码&#34;&gt;分析样例 JS 代码&lt;a class=&#34;headerlink&#34; href=&#34;#分析样例-js-代码&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;首先来观察一下 Ignition 解释器的工作流程。写一段简单的 JS 代码：&lt;/p&gt;&lt;div class=&#34;language-js highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-5&#34;&gt;&lt;a id=&#34;__codelineno-1-5&#34; name=&#34;__codelineno-1-5&#34; href=&#34;#__codelineno-1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;保存为 &lt;code&gt;test.js&lt;/code&gt;，运行 &lt;code&gt;./out/arm64.optdebug/d8 --print-ast --print-bytecode test.js&lt;/code&gt; 以打印它的 AST 以及 Bytecode:&lt;/p&gt;&lt;p&gt;首先开始的是 top level 的 AST 以及 Bytecode，它做的事情就是：声明一个函数 add，然后以参数 &lt;code&gt;(1, 2)&lt;/code&gt; 来调用它。&lt;/p&gt;&lt;p&gt;top level AST:&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;[generating bytecode for function: ]&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;--- AST ---&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;FUNC at 0&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;. KIND 0&lt;/span&gt;&lt;span id=&#34;__span-2-5&#34;&gt;&lt;a id=&#34;__codelineno-2-5&#34; name=&#34;__codelineno-2-5&#34; href=&#34;#__codelineno-2-5&#34;&gt;&lt;/a&gt;. LITERAL ID 0&lt;/span&gt;&lt;span id=&#34;__span-2-6&#34;&gt;&lt;a id=&#34;__codelineno-2-6&#34; name=&#34;__codelineno-2-6&#34; href=&#34;#__codelineno-2-6&#34;&gt;&lt;/a&gt;. SUSPEND COUNT 0&lt;/span&gt;&lt;span id=&#34;__span-2-7&#34;&gt;&lt;a id=&#34;__codelineno-2-7&#34; name=&#34;__codelineno-2-7&#34; href=&#34;#__codelineno-2-7&#34;&gt;&lt;/a&gt;. NAME &amp;quot;&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-2-8&#34;&gt;&lt;a id=&#34;__codelineno-2-8&#34; name=&#34;__codelineno-2-8&#34; href=&#34;#__codelineno-2-8&#34;&gt;&lt;/a&gt;. INFERRED NAME &amp;quot;&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-2-9&#34;&gt;&lt;a id=&#34;__codelineno-2-9&#34; name=&#34;__codelineno-2-9&#34; href=&#34;#__codelineno-2-9&#34;&gt;&lt;/a&gt;. DECLS&lt;/span&gt;&lt;span id=&#34;__span-2-10&#34;&gt;&lt;a id=&#34;__codelineno-2-10&#34; name=&#34;__codelineno-2-10&#34; href=&#34;#__codelineno-2-10&#34;&gt;&lt;/a&gt;. . FUNCTION &amp;quot;add&amp;quot; = function add&lt;/span&gt;&lt;span id=&#34;__span-2-11&#34;&gt;&lt;a id=&#34;__codelineno-2-11&#34; name=&#34;__codelineno-2-11&#34; href=&#34;#__codelineno-2-11&#34;&gt;&lt;/a&gt;. EXPRESSION STATEMENT at 42&lt;/span&gt;&lt;span id=&#34;__span-2-12&#34;&gt;&lt;a id=&#34;__codelineno-2-12&#34; name=&#34;__codelineno-2-12&#34; href=&#34;#__codelineno-2-12&#34;&gt;&lt;/a&gt;. . kAssign at -1&lt;/span&gt;&lt;span id=&#34;__span-2-13&#34;&gt;&lt;a id=&#34;__codelineno-2-13&#34; name=&#34;__codelineno-2-13&#34; href=&#34;#__codelineno-2-13&#34;&gt;&lt;/a&gt;. . . VAR PROXY local[0] (0xc28698556308) (mode = TEMPORARY, assigned = true) &amp;quot;.result&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-2-14&#34;&gt;&lt;a id=&#34;__codelineno-2-14&#34; name=&#34;__codelineno-2-14&#34; href=&#34;#__codelineno-2-14&#34;&gt;&lt;/a&gt;. . . CALL&lt;/span&gt;&lt;span id=&#34;__span-2-15&#34;&gt;&lt;a id=&#34;__codelineno-2-15&#34; name=&#34;__codelineno-2-15&#34; href=&#34;#__codelineno-2-15&#34;&gt;&lt;/a&gt;. . . . VAR PROXY unallocated (0xc28698556200) (mode = VAR, assigned = true) &amp;quot;add&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-2-16&#34;&gt;&lt;a id=&#34;__codelineno-2-16&#34; name=&#34;__codelineno-2-16&#34; href=&#34;#__codelineno-2-16&#34;&gt;&lt;/a&gt;. . . . LITERAL 1&lt;/span&gt;&lt;span id=&#34;__span-2-17&#34;&gt;&lt;a id=&#34;__codelineno-2-17&#34; name=&#34;__codelineno-2-17&#34; href=&#34;#__codelineno-2-17&#34;&gt;&lt;/a&gt;. . . . LITERAL 2&lt;/span&gt;&lt;span id=&#34;__span-2-18&#34;&gt;&lt;a id=&#34;__codelineno-2-18&#34; name=&#34;__codelineno-2-18&#34; href=&#34;#__codelineno-2-18&#34;&gt;&lt;/a&gt;. RETURN at -1&lt;/span&gt;&lt;span id=&#34;__span-2-19&#34;&gt;&lt;a id=&#34;__codelineno-2-19&#34; name=&#34;__codelineno-2-19&#34; href=&#34;#__codelineno-2-19&#34;&gt;&lt;/a&gt;. . VAR PROXY local[0] (0xc28698556308) (mode = TEMPORARY, assigned = true) &amp;quot;.result&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先声明了一个 &lt;code&gt;add&lt;/code&gt; 函数，然后以 &lt;code&gt;1&lt;/code&gt; 和 &lt;code&gt;2&lt;/code&gt; 两个参数调用 &lt;code&gt;add&lt;/code&gt; 函数，把结果绑定给局部变量 &lt;code&gt;.result&lt;/code&gt;，最后以 &lt;code&gt;.result&lt;/code&gt; 为结果返回。接下来看它会被翻译成什么字节码：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;[generated bytecode for function: (0x1f8e002988f5 &amp;lt;SharedFunctionInfo&amp;gt;)]&lt;/span&gt;&lt;span id=&#34;__span-3-2&#34;&gt;&lt;a id=&#34;__codelineno-3-2&#34; name=&#34;__codelineno-3-2&#34; href=&#34;#__codelineno-3-2&#34;&gt;&lt;/a&gt;Bytecode length: 28&lt;/span&gt;&lt;span id=&#34;__span-3-3&#34;&gt;&lt;a id=&#34;__codelineno-3-3&#34; name=&#34;__codelineno-3-3&#34; href=&#34;#__codelineno-3-3&#34;&gt;&lt;/a&gt;Parameter count 1&lt;/span&gt;&lt;span id=&#34;__span-3-4&#34;&gt;&lt;a id=&#34;__codelineno-3-4&#34; name=&#34;__codelineno-3-4&#34; href=&#34;#__codelineno-3-4&#34;&gt;&lt;/a&gt;Register count 4&lt;/span&gt;&lt;span id=&#34;__span-3-5&#34;&gt;&lt;a id=&#34;__codelineno-3-5&#34; name=&#34;__codelineno-3-5&#34; href=&#34;#__codelineno-3-5&#34;&gt;&lt;/a&gt;Frame size 32&lt;/span&gt;&lt;span id=&#34;__span-3-6&#34;&gt;&lt;a id=&#34;__codelineno-3-6&#34; name=&#34;__codelineno-3-6&#34; href=&#34;#__codelineno-3-6&#34;&gt;&lt;/a&gt; 0x304700040048 @ 0 : 13 00 LdaConstant [0]&lt;/span&gt;&lt;span id=&#34;__span-3-7&#34;&gt;&lt;a id=&#34;__codelineno-3-7&#34; name=&#34;__codelineno-3-7&#34; href=&#34;#__codelineno-3-7&#34;&gt;&lt;/a&gt; 0x30470004004a @ 2 : c9 Star1&lt;/span&gt;&lt;span id=&#34;__span-3-8&#34;&gt;&lt;a id=&#34;__codelineno-3-8&#34; name=&#34;__codelineno-3-8&#34; href=&#34;#__codelineno-3-8&#34;&gt;&lt;/a&gt; 0x30470004004b @ 3 : 19 fe f7 Mov &amp;lt;closure&amp;gt;, r2&lt;/span&gt;&lt;span id=&#34;__span-3-9&#34;&gt;&lt;a id=&#34;__codelineno-3-9&#34; name=&#34;__codelineno-3-9&#34; href=&#34;#__codelineno-3-9&#34;&gt;&lt;/a&gt; 0x30470004004e @ 6 : 68 63 01 f8 02 CallRuntime [DeclareGlobals], r1-r2&lt;/span&gt;&lt;span id=&#34;__span-3-10&#34;&gt;&lt;a id=&#34;__codelineno-3-10&#34; name=&#34;__codelineno-3-10&#34; href=&#34;#__codelineno-3-10&#34;&gt;&lt;/a&gt; 0x304700040053 @ 11 : 21 01 00 LdaGlobal [1], [0]&lt;/span&gt;&lt;span id=&#34;__span-3-11&#34;&gt;&lt;a id=&#34;__codelineno-3-11&#34; name=&#34;__codelineno-3-11&#34; href=&#34;#__codelineno-3-11&#34;&gt;&lt;/a&gt; 0x304700040056 @ 14 : c9 Star1&lt;/span&gt;&lt;span id=&#34;__span-3-12&#34;&gt;&lt;a id=&#34;__codelineno-3-12&#34; name=&#34;__codelineno-3-12&#34; href=&#34;#__codelineno-3-12&#34;&gt;&lt;/a&gt; 0x304700040057 @ 15 : 0d 01 LdaSmi [1]&lt;/span&gt;&lt;span id=&#34;__span-3-13&#34;&gt;&lt;a id=&#34;__codelineno-3-13&#34; name=&#34;__codelineno-3-13&#34; href=&#34;#__codelineno-3-13&#34;&gt;&lt;/a&gt; 0x304700040059 @ 17 : c8 Star2&lt;/span&gt;&lt;span id=&#34;__span-3-14&#34;&gt;&lt;a id=&#34;__codelineno-3-14&#34; name=&#34;__codelineno-3-14&#34; href=&#34;#__codelineno-3-14&#34;&gt;&lt;/a&gt; 0x30470004005a @ 18 : 0d 02 LdaSmi [2]&lt;/span&gt;&lt;span id=&#34;__span-3-15&#34;&gt;&lt;a id=&#34;__codelineno-3-15&#34; name=&#34;__codelineno-3-15&#34; href=&#34;#__codelineno-3-15&#34;&gt;&lt;/a&gt; 0x30470004005c @ 20 : c7 Star3&lt;/span&gt;&lt;span id=&#34;__span-3-16&#34;&gt;&lt;a id=&#34;__codelineno-3-16&#34; name=&#34;__codelineno-3-16&#34; href=&#34;#__codelineno-3-16&#34;&gt;&lt;/a&gt; 0x30470004005d @ 21 : 66 f8 f7 f6 02 CallUndefinedReceiver2 r1, r2, r3, [2]&lt;/span&gt;&lt;span id=&#34;__span-3-17&#34;&gt;&lt;a id=&#34;__codelineno-3-17&#34; name=&#34;__codelineno-3-17&#34; href=&#34;#__codelineno-3-17&#34;&gt;&lt;/a&gt; 0x304700040062 @ 26 : ca Star0&lt;/span&gt;&lt;span id=&#34;__span-3-18&#34;&gt;&lt;a id=&#34;__codelineno-3-18&#34; name=&#34;__codelineno-3-18&#34; href=&#34;#__codelineno-3-18&#34;&gt;&lt;/a&gt; 0x304700040063 @ 27 : af Return&lt;/span&gt;&lt;span id=&#34;__span-3-19&#34;&gt;&lt;a id=&#34;__codelineno-3-19&#34; name=&#34;__codelineno-3-19&#34; href=&#34;#__codelineno-3-19&#34;&gt;&lt;/a&gt;Constant pool (size = 2)&lt;/span&gt;&lt;span id=&#34;__span-3-20&#34;&gt;&lt;a id=&#34;__codelineno-3-20&#34; name=&#34;__codelineno-3-20&#34; href=&#34;#__codelineno-3-20&#34;&gt;&lt;/a&gt;0x304700040011: [TrustedFixedArray]&lt;/span&gt;&lt;span id=&#34;__span-3-21&#34;&gt;&lt;a id=&#34;__codelineno-3-21&#34; name=&#34;__codelineno-3-21&#34; href=&#34;#__codelineno-3-21&#34;&gt;&lt;/a&gt; - map: 0x1f8e00000595 &amp;lt;Map(TRUSTED_FIXED_ARRAY_TYPE)&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-3-22&#34;&gt;&lt;a id=&#34;__codelineno-3-22&#34; name=&#34;__codelineno-3-22&#34; href=&#34;#__codelineno-3-22&#34;&gt;&lt;/a&gt; - length: 2&lt;/span&gt;&lt;span id=&#34;__span-3-23&#34;&gt;&lt;a id=&#34;__codelineno-3-23&#34; name=&#34;__codelineno-3-23&#34; href=&#34;#__codelineno-3-23&#34;&gt;&lt;/a&gt; 0: 0x1f8e00298945 &amp;lt;FixedArray[2]&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-3-24&#34;&gt;&lt;a id=&#34;__codelineno-3-24&#34; name=&#34;__codelineno-3-24&#34; href=&#34;#__codelineno-3-24&#34;&gt;&lt;/a&gt; 1: 0x1f8e000041dd &amp;lt;String[3]: #add&amp;gt;&lt;/span&gt;&lt;span id=&#34;__span-3-25&#34;&gt;&lt;a id=&#34;__codelineno-3-25&#34; name=&#34;__codelineno-3-25&#34; href=&#34;#__codelineno-3-25&#34;&gt;&lt;/a&gt;Handler Table (size = 0)&lt;/span&gt;&lt;span id=&#34;__span-3-26&#34;&gt;&lt;a id=&#34;__codelineno-3-26&#34; name=&#34;__codelineno-3-26&#34; href=&#34;#__codelineno-3-26&#34;&gt;&lt;/a&gt;Source Position Table (size = 0)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;V8 的字节码采用的是基于寄存器的执行模型，而非其他很多字节码会采用的栈式。换句话说，每个函数有自己的若干个寄存器可供操作。每条字节码分为 Opcode（表示这条字节码要进行的操作）和操作数两部分。函数开头的 &lt;code&gt;Register count 4&lt;/code&gt; 表明该函数有四个寄存器：&lt;code&gt;r0-r3&lt;/code&gt;，此外还有一个特殊的 &lt;code&gt;accumulator&lt;/code&gt; 寄存器，它一般不会出现在操作数列表中，而是隐含在 Opcode 内（&lt;code&gt;Lda/Sta&lt;/code&gt;）。&lt;/p&gt;&lt;p&gt;完整的 Opcode 列表可以在 &lt;code&gt;v8/src/interpreter/bytecodes.h&lt;/code&gt; 中找到，对应的实现可以在 &lt;code&gt;v8/src/interpreter/interpreter-generator.cc&lt;/code&gt; 中找到。&lt;/p&gt;&lt;p&gt;上述字节码分为两部分，第一部分是声明 &lt;code&gt;add&lt;/code&gt; 函数：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;LdaConstant [0]&lt;/code&gt;: 把 Constant Pool 的第 0 项也就是 &lt;code&gt;FixedArray[2]&lt;/code&gt; 写入 &lt;code&gt;accumulator&lt;/code&gt; 寄存器当中&lt;/li&gt;&lt;li&gt;&lt;code&gt;Star1&lt;/code&gt;: 把 &lt;code&gt;accumulator&lt;/code&gt; 寄存器的值拷贝到 &lt;code&gt;r1&lt;/code&gt; 寄存器，结合上一条字节码，就是设置 &lt;code&gt;r1 = FixedArray[2]&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Mov &amp;lt;closure&amp;gt;, r2&lt;/code&gt;: 把 &lt;code&gt;&amp;lt;closure&amp;gt;&lt;/code&gt; 拷贝到 &lt;code&gt;r2&lt;/code&gt; 寄存器，猜测这里的 &lt;code&gt;&amp;lt;closure&amp;gt;&lt;/code&gt; 对应的是 &lt;code&gt;add&lt;/code&gt; 函数&lt;/li&gt;&lt;li&gt;&lt;code&gt;CallRuntime [DeclareGlobals], r1-r2&lt;/code&gt;: 调用运行时的 &lt;code&gt;DeclareGlobals&lt;/code&gt; 函数，并传递两个参数，分别是 &lt;code&gt;r1&lt;/code&gt; 和 &lt;code&gt;r2&lt;/code&gt;；有意思的是，&lt;code&gt;CallRuntime&lt;/code&gt; 的参数必须保存在连续的寄存器当中，猜测是为了节省编码空间&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;至此，&lt;code&gt;add&lt;/code&gt; 函数就声明完成了。接下来，就要实现 &lt;code&gt;add(1, 2)&lt;/code&gt; 的调用：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;LdaGlobal [1], [0]&lt;/code&gt;: 把 Constant Pool 的第 1 项也就是 &lt;code&gt;&#34;add&#34;&lt;/code&gt; 这个字符串写入 &lt;code&gt;accumulator&lt;/code&gt;，最后的 &lt;code&gt;[0]&lt;/code&gt; 和 FeedBackVector 有关，目前先忽略&lt;/li&gt;&lt;li&gt;&lt;code&gt;Star1&lt;/code&gt;: 把 &lt;code&gt;accumulator&lt;/code&gt; 寄存器的值拷贝到 &lt;code&gt;r1&lt;/code&gt; 寄存器，结合上一条字节码，就是设置 &lt;code&gt;r1 = &#34;add&#34;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;LdaSmi [1]&lt;/code&gt;: 把小整数（Small integer, Smi）&lt;code&gt;1&lt;/code&gt; 写入 &lt;code&gt;accumulator&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Star2&lt;/code&gt;: 把 &lt;code&gt;accumulator&lt;/code&gt; 寄存器的值拷贝到 &lt;code&gt;r2&lt;/code&gt; 寄存器，结合上一条字节码，就是设置 &lt;code&gt;r2 = 1&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;LdaSmi [2]&lt;/code&gt;: 把小整数（Small integer, Smi）&lt;code&gt;2&lt;/code&gt; 写入 &lt;code&gt;accumulator&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Star3&lt;/code&gt;: 把 &lt;code&gt;accumulator&lt;/code&gt; 寄存器的值拷贝到 &lt;code&gt;r3&lt;/code&gt; 寄存器，结合上一条字节码，就是设置 &lt;code&gt;r3 = 2&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;CallUndefinedReceiver2 r1, r2, r3, [2]&lt;/code&gt;: 根据 &lt;code&gt;r1&lt;/code&gt; 调用一个函数，并传递两个参数 &lt;code&gt;r2, r3&lt;/code&gt;（函数名称最后的 &lt;code&gt;2&lt;/code&gt; 表示有两个参数），最后的 &lt;code&gt;[2]&lt;/code&gt; 也和 FeedBackVector 有关&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这样就完成了函数调用。&lt;/p&gt;&lt;p&gt;接下来观察 &lt;code&gt;add&lt;/code&gt; 函数的 AST：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;[generating bytecode for function: add]&lt;/span&gt;&lt;span id=&#34;__span-4-2&#34;&gt;&lt;a id=&#34;__codelineno-4-2&#34; name=&#34;__codelineno-4-2&#34; href=&#34;#__codelineno-4-2&#34;&gt;&lt;/a&gt;--- AST ---&lt;/span&gt;&lt;span id=&#34;__span-4-3&#34;&gt;&lt;a id=&#34;__codelineno-4-3&#34; name=&#34;__codelineno-4-3&#34; href=&#34;#__codelineno-4-3&#34;&gt;&lt;/a&gt;FUNC at 12&lt;/span&gt;&lt;span id=&#34;__span-4-4&#34;&gt;&lt;a id=&#34;__codelineno-4-4&#34; name=&#34;__codelineno-4-4&#34; href=&#34;#__codelineno-4-4&#34;&gt;&lt;/a&gt;. KIND 0&lt;/span&gt;&lt;span id=&#34;__span-4-5&#34;&gt;&lt;a id=&#34;__codelineno-4-5&#34; name=&#34;__codelineno-4-5&#34; href=&#34;#__codelineno-4-5&#34;&gt;&lt;/a&gt;. LITERAL ID 1&lt;/span&gt;&lt;span id=&#34;__span-4-6&#34;&gt;&lt;a id=&#34;__codelineno-4-6&#34; name=&#34;__codelineno-4-6&#34; href=&#34;#__codelineno-4-6&#34;&gt;&lt;/a&gt;. SUSPEND COUNT 0&lt;/span&gt;&lt;span id=&#34;__span-4-7&#34;&gt;&lt;a id=&#34;__codelineno-4-7&#34; name=&#34;__codelineno-4-7&#34; href=&#34;#__codelineno-4-7&#34;&gt;&lt;/a&gt;. NAME &amp;quot;add&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-4-8&#34;&gt;&lt;a id=&#34;__codelineno-4-8&#34; name=&#34;__codelineno-4-8&#34; href=&#34;#__codelineno-4-8&#34;&gt;&lt;/a&gt;. INFERRED NAME &amp;quot;&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-4-9&#34;&gt;&lt;a id=&#34;__codelineno-4-9&#34; name=&#34;__codelineno-4-9&#34; href=&#34;#__codelineno-4-9&#34;&gt;&lt;/a&gt;. PARAMS&lt;/span&gt;&lt;span id=&#34;__span-4-10&#34;&gt;&lt;a id=&#34;__codelineno-4-10&#34; name=&#34;__codelineno-4-10&#34; href=&#34;#__codelineno-4-10&#34;&gt;&lt;/a&gt;. . VAR (0xc50512445280) (mode = VAR, assigned = false) &amp;quot;a&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-4-11&#34;&gt;&lt;a id=&#34;__codelineno-4-11&#34; name=&#34;__codelineno-4-11&#34; href=&#34;#__codelineno-4-11&#34;&gt;&lt;/a&gt;. . VAR (0xc50512445300) (mode = VAR, assigned = false) &amp;quot;b&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-4-12&#34;&gt;&lt;a id=&#34;__codelineno-4-12&#34; name=&#34;__codelineno-4-12&#34; href=&#34;#__codelineno-4-12&#34;&gt;&lt;/a&gt;. DECLS&lt;/span&gt;&lt;span id=&#34;__span-4-13&#34;&gt;&lt;a id=&#34;__codelineno-4-13&#34; name=&#34;__codelineno-4-13&#34; href=&#34;#__codelineno-4-13&#34;&gt;&lt;/a&gt;. . VARIABLE (0xc50512445280) (mode = VAR, assigned = false) &amp;quot;a&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-4-14&#34;&gt;&lt;a id=&#34;__codelineno-4-14&#34; name=&#34;__codelineno-4-14&#34; href=&#34;#__codelineno-4-14&#34;&gt;&lt;/a&gt;. . VARIABLE (0xc50512445300) (mode = VAR, assigned = false) &amp;quot;b&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-4-15&#34;&gt;&lt;a id=&#34;__codelineno-4-15&#34; name=&#34;__codelineno-4-15&#34; href=&#34;#__codelineno-4-15&#34;&gt;&lt;/a&gt;. RETURN at 25&lt;/span&gt;&lt;span id=&#34;__span-4-16&#34;&gt;&lt;a id=&#34;__codelineno-4-16&#34; name=&#34;__codelineno-4-16&#34; href=&#34;#__codelineno-4-16&#34;&gt;&lt;/a&gt;. . kAdd at 34&lt;/span&gt;&lt;span id=&#34;__span-4-17&#34;&gt;&lt;a id=&#34;__codelineno-4-17&#34; name=&#34;__codelineno-4-17&#34; href=&#34;#__codelineno-4-17&#34;&gt;&lt;/a&gt;. . . VAR PROXY parameter[0] (0xc50512445280) (mode = VAR, assigned = false) &amp;quot;a&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-4-18&#34;&gt;&lt;a id=&#34;__codelineno-4-18&#34; name=&#34;__codelineno-4-18&#34; href=&#34;#__codelineno-4-18&#34;&gt;&lt;/a&gt;. . . VAR PROXY parameter[1] (0xc50512445300) (mode = VAR, assigned = false) &amp;quot;b&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;add&lt;/code&gt; 函数的 AST 比较直接，&lt;code&gt;a + b&lt;/code&gt; 直接对应了 &lt;code&gt;kAdd&lt;/code&gt; 结点，直接作为返回值。&lt;/p&gt;&lt;p&gt;接下来观察 &lt;code&gt;add&lt;/code&gt; 的 Bytecode：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-5-1&#34;&gt;&lt;a id=&#34;__codelineno-5-1&#34; name=&#34;__codelineno-5-1&#34; href=&#34;#__codelineno-5-1&#34;&gt;&lt;/a&gt;[generated bytecode for function: add (0x10c700298955 &amp;lt;SharedFunctionInfo add&amp;gt;)]&lt;/span&gt;&lt;span id=&#34;__span-5-2&#34;&gt;&lt;a id=&#34;__codelineno-5-2&#34; name=&#34;__codelineno-5-2&#34; href=&#34;#__codelineno-5-2&#34;&gt;&lt;/a&gt;Bytecode length: 6&lt;/span&gt;&lt;span id=&#34;__span-5-3&#34;&gt;&lt;a id=&#34;__codelineno-5-3&#34; name=&#34;__codelineno-5-3&#34; href=&#34;#__codelineno-5-3&#34;&gt;&lt;/a&gt;Parameter count 3&lt;/span&gt;&lt;span id=&#34;__span-5-4&#34;&gt;&lt;a id=&#34;__codelineno-5-4&#34; name=&#34;__codelineno-5-4&#34; href=&#34;#__codelineno-5-4&#34;&gt;&lt;/a&gt;Register count 0&lt;/span&gt;&lt;span id=&#34;__span-5-5&#34;&gt;&lt;a id=&#34;__codelineno-5-5&#34; name=&#34;__codelineno-5-5&#34; href=&#34;#__codelineno-5-5&#34;&gt;&lt;/a&gt;Frame size 0&lt;/span&gt;&lt;span id=&#34;__span-5-6&#34;&gt;&lt;a id=&#34;__codelineno-5-6&#34; name=&#34;__codelineno-5-6&#34; href=&#34;#__codelineno-5-6&#34;&gt;&lt;/a&gt; 0x6ed0004008c @ 0 : 0b 04 Ldar a1&lt;/span&gt;&lt;span id=&#34;__span-5-7&#34;&gt;&lt;a id=&#34;__codelineno-5-7&#34; name=&#34;__codelineno-5-7&#34; href=&#34;#__codelineno-5-7&#34;&gt;&lt;/a&gt; 0x6ed0004008e @ 2 : 3b 03 00 Add a0, [0]&lt;/span&gt;&lt;span id=&#34;__span-5-8&#34;&gt;&lt;a id=&#34;__codelineno-5-8&#34; name=&#34;__codelineno-5-8&#34; href=&#34;#__codelineno-5-8&#34;&gt;&lt;/a&gt; 0x6ed00040091 @ 5 : af Return&lt;/span&gt;&lt;span id=&#34;__span-5-9&#34;&gt;&lt;a id=&#34;__codelineno-5-9&#34; name=&#34;__codelineno-5-9&#34; href=&#34;#__codelineno-5-9&#34;&gt;&lt;/a&gt;Constant pool (size = 0)&lt;/span&gt;&lt;span id=&#34;__span-5-10&#34;&gt;&lt;a id=&#34;__codelineno-5-10&#34; name=&#34;__codelineno-5-10&#34; href=&#34;#__codelineno-5-10&#34;&gt;&lt;/a&gt;Handler Table (size = 0)&lt;/span&gt;&lt;span id=&#34;__span-5-11&#34;&gt;&lt;a id=&#34;__codelineno-5-11&#34; name=&#34;__codelineno-5-11&#34; href=&#34;#__codelineno-5-11&#34;&gt;&lt;/a&gt;Source Position Table (size = 0)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;Ldar a1&lt;/code&gt;: 把第二个参数 &lt;code&gt;a1&lt;/code&gt; 也就是 &lt;code&gt;b&lt;/code&gt; 写入 &lt;code&gt;accumulator&lt;/code&gt; 寄存器&lt;/li&gt;&lt;li&gt;&lt;code&gt;Add a0, [0]&lt;/code&gt;: 求第一个参数 &lt;code&gt;a0&lt;/code&gt; 也就是 &lt;code&gt;a&lt;/code&gt; 与 &lt;code&gt;accumulator&lt;/code&gt; 寄存器的和，写入到 &lt;code&gt;accumulator&lt;/code&gt; 寄存器当中，结合上一条 Bytecode，就是 &lt;code&gt;accumulator = a0 + a1&lt;/code&gt;；&lt;code&gt;[0]&lt;/code&gt; 和 FeedBackVector 有关&lt;/li&gt;&lt;li&gt;&lt;code&gt;Return&lt;/code&gt;: 把 &lt;code&gt;accumulator&lt;/code&gt; 中的值作为返回值，结束函数调用&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;简单小结一下 V8 的字节码：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;有若干个局部的寄存器，在操作数中以 &lt;code&gt;rn&lt;/code&gt; 的形式出现，&lt;code&gt;n&lt;/code&gt; 是寄存器编号&lt;/li&gt;&lt;li&gt;有 &lt;code&gt;accumulator&lt;/code&gt; 局部寄存器，作为部分字节码的隐含输入或输出（&lt;code&gt;Add&lt;/code&gt;）&lt;/li&gt;&lt;li&gt;有若干个参数，在操作数中以 &lt;code&gt;an&lt;/code&gt; 的形式出现，&lt;code&gt;n&lt;/code&gt; 是参数编号&lt;/li&gt;&lt;li&gt;操作数还可以出现立即数参数 &lt;code&gt;[imm]&lt;/code&gt;，可能是整数字面量（&lt;code&gt;LdaSmi&lt;/code&gt;），可能是下标（&lt;code&gt;LdaConstant&lt;/code&gt;），也可能是 FeedBackVector 的 slot&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;有了字节码以后，接下来观察 Ignition 具体是怎么解释执行这些字节码的。&lt;/p&gt;&lt;h3 id=&#34;解释执行&#34;&gt;解释执行&lt;a class=&#34;headerlink&#34; href=&#34;#解释执行&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;为了实际执行这些字节码，Ignition 的做法是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;给每种可能的 Opcode 生成一段二进制代码，这段代码会实现这个 Opcode 的功能&lt;/li&gt;&lt;li&gt;在运行时维护一个 dispatch table，维护了 Opcode 到二进制代码地址的映射关系&lt;/li&gt;&lt;li&gt;在每段代码的结尾，找到下一个 Opcode 对应的代码的地址，然后跳转过去&lt;/li&gt;&lt;li&gt;调用函数时，先做一系列的准备，找到函数第一个字节码的 Opcode 对应的代码的地址，跳转过去&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;由于 Opcode 的种类是固定的，所以实际运行 V8 的时候，这些代码已经编译好了，只需要在运行时初始化对应的数据结构即可。这个代码的生成和编译过程，也不是由 C++ 编译器做的，而是有一个 &lt;code&gt;mksnapshot&lt;/code&gt; 命令来完成初始化，你可以认为它把这些 Opcode 对应的汇编指令都预先生成好，运行时直接加载即可。&lt;/p&gt;&lt;p&gt;首先来看 Ignition 的怎么实现各种 Opcode 的，以 &lt;code&gt;LdaSmi&lt;/code&gt; 为例，它的作用是小的把立即数（Smi=Small integer）写入到 &lt;code&gt;accumulator&lt;/code&gt; 当中，这段在 &lt;code&gt;v8/src/interpreter/interpreter-generator.cc&lt;/code&gt; 的代码实现了这个逻辑：&lt;/p&gt;&lt;div class=&#34;language-cpp highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-6-1&#34;&gt;&lt;a id=&#34;__codelineno-6-1&#34; name=&#34;__codelineno-6-1&#34; href=&#34;#__codelineno-6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;// LdaSmi &amp;lt;imm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-2&#34;&gt;&lt;a id=&#34;__codelineno-6-2&#34; name=&#34;__codelineno-6-2&#34; href=&#34;#__codelineno-6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-3&#34;&gt;&lt;a id=&#34;__codelineno-6-3&#34; name=&#34;__codelineno-6-3&#34; href=&#34;#__codelineno-6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;// Load an integer literal into the accumulator as a Smi.&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-4&#34;&gt;&lt;a id=&#34;__codelineno-6-4&#34; name=&#34;__codelineno-6-4&#34; href=&#34;#__codelineno-6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;IGNITION_HANDLER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LdaSmi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InterpreterAssembler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-5&#34;&gt;&lt;a id=&#34;__codelineno-6-5&#34; name=&#34;__codelineno-6-5&#34; href=&#34;#__codelineno-6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Smi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;smi_int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BytecodeOperandImmSmi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-6&#34;&gt;&lt;a id=&#34;__codelineno-6-6&#34; name=&#34;__codelineno-6-6&#34; href=&#34;#__codelineno-6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SetAccumulator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;smi_int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-7&#34;&gt;&lt;a id=&#34;__codelineno-6-7&#34; name=&#34;__codelineno-6-7&#34; href=&#34;#__codelineno-6-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dispatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-8&#34;&gt;&lt;a id=&#34;__codelineno-6-8&#34; name=&#34;__codelineno-6-8&#34; href=&#34;#__codelineno-6-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，逻辑并不复杂，就是取了第一个立即数操作数，设置到了 &lt;code&gt;accumulator&lt;/code&gt;，最后调用 &lt;code&gt;Dispatch&lt;/code&gt;，也就是读取下一个 Opcode 对应的汇编指令然后跳转。接下来看这几个步骤在汇编上是怎么实现的。&lt;/p&gt;&lt;p&gt;为了查看 Ignition 对各种 Opcode 具体生成了什么样的汇编指令，可以用 &lt;code&gt;./out/arm64.optdebug/mksnapshot --trace-ignition-codegen --code-comments&lt;/code&gt; 命令查看，下面列出了 &lt;code&gt;LdaSmi&lt;/code&gt; 这个 Opcode 对应的汇编，由于这段汇编有点长，具体做的事情和对应的源码已经通过注释标注出来：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-7-1&#34;&gt;&lt;a id=&#34;__codelineno-7-1&#34; name=&#34;__codelineno-7-1&#34; href=&#34;#__codelineno-7-1&#34;&gt;&lt;/a&gt;kind = BYTECODE_HANDLER&lt;/span&gt;&lt;span id=&#34;__span-7-2&#34;&gt;&lt;a id=&#34;__codelineno-7-2&#34; name=&#34;__codelineno-7-2&#34; href=&#34;#__codelineno-7-2&#34;&gt;&lt;/a&gt;name = LdaSmi&lt;/span&gt;&lt;span id=&#34;__span-7-3&#34;&gt;&lt;a id=&#34;__codelineno-7-3&#34; name=&#34;__codelineno-7-3&#34; href=&#34;#__codelineno-7-3&#34;&gt;&lt;/a&gt;compiler = turbofan&lt;/span&gt;&lt;span id=&#34;__span-7-4&#34;&gt;&lt;a id=&#34;__codelineno-7-4&#34; name=&#34;__codelineno-7-4&#34; href=&#34;#__codelineno-7-4&#34;&gt;&lt;/a&gt;address = 0x31a000906fd&lt;/span&gt;&lt;span id=&#34;__span-7-5&#34;&gt;&lt;a id=&#34;__codelineno-7-5&#34; name=&#34;__codelineno-7-5&#34; href=&#34;#__codelineno-7-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-6&#34;&gt;&lt;a id=&#34;__codelineno-7-6&#34; name=&#34;__codelineno-7-6&#34; href=&#34;#__codelineno-7-6&#34;&gt;&lt;/a&gt;Instructions (size = 324)&lt;/span&gt;&lt;span id=&#34;__span-7-7&#34;&gt;&lt;a id=&#34;__codelineno-7-7&#34; name=&#34;__codelineno-7-7&#34; href=&#34;#__codelineno-7-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-8&#34;&gt;&lt;a id=&#34;__codelineno-7-8&#34; name=&#34;__codelineno-7-8&#34; href=&#34;#__codelineno-7-8&#34;&gt;&lt;/a&gt;# 在代码的开头，检查寄存器是否正确，即 x2 是否保存了当前代码段的开始地址，对应的源码：&lt;/span&gt;&lt;span id=&#34;__span-7-9&#34;&gt;&lt;a id=&#34;__codelineno-7-9&#34; name=&#34;__codelineno-7-9&#34; href=&#34;#__codelineno-7-9&#34;&gt;&lt;/a&gt;# v8/src/compiler/backend/arm64/code-generator-arm64.cc CodeGenerator::AssembleCodeStartRegisterCheck():&lt;/span&gt;&lt;span id=&#34;__span-7-10&#34;&gt;&lt;a id=&#34;__codelineno-7-10&#34; name=&#34;__codelineno-7-10&#34; href=&#34;#__codelineno-7-10&#34;&gt;&lt;/a&gt;# UseScratchRegisterScope temps(masm());&lt;/span&gt;&lt;span id=&#34;__span-7-11&#34;&gt;&lt;a id=&#34;__codelineno-7-11&#34; name=&#34;__codelineno-7-11&#34; href=&#34;#__codelineno-7-11&#34;&gt;&lt;/a&gt;# Register scratch = temps.AcquireX();&lt;/span&gt;&lt;span id=&#34;__span-7-12&#34;&gt;&lt;a id=&#34;__codelineno-7-12&#34; name=&#34;__codelineno-7-12&#34; href=&#34;#__codelineno-7-12&#34;&gt;&lt;/a&gt;# __ ComputeCodeStartAddress(scratch); // becomes x16 in the following code&lt;/span&gt;&lt;span id=&#34;__span-7-13&#34;&gt;&lt;a id=&#34;__codelineno-7-13&#34; name=&#34;__codelineno-7-13&#34; href=&#34;#__codelineno-7-13&#34;&gt;&lt;/a&gt;# __ cmp(scratch, kJavaScriptCallCodeStartRegister);&lt;/span&gt;&lt;span id=&#34;__span-7-14&#34;&gt;&lt;a id=&#34;__codelineno-7-14&#34; name=&#34;__codelineno-7-14&#34; href=&#34;#__codelineno-7-14&#34;&gt;&lt;/a&gt;# __ Assert(eq, AbortReason::kWrongFunctionCodeStart);&lt;/span&gt;&lt;span id=&#34;__span-7-15&#34;&gt;&lt;a id=&#34;__codelineno-7-15&#34; name=&#34;__codelineno-7-15&#34; href=&#34;#__codelineno-7-15&#34;&gt;&lt;/a&gt;# 其中 kJavaScriptCallCodeStartRegister 定义在 v8/src/codegen/arm64/register-arm64.h：&lt;/span&gt;&lt;span id=&#34;__span-7-16&#34;&gt;&lt;a id=&#34;__codelineno-7-16&#34; name=&#34;__codelineno-7-16&#34; href=&#34;#__codelineno-7-16&#34;&gt;&lt;/a&gt;# constexpr Register kJavaScriptCallCodeStartRegister = x2;&lt;/span&gt;&lt;span id=&#34;__span-7-17&#34;&gt;&lt;a id=&#34;__codelineno-7-17&#34; name=&#34;__codelineno-7-17&#34; href=&#34;#__codelineno-7-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-18&#34;&gt;&lt;a id=&#34;__codelineno-7-18&#34; name=&#34;__codelineno-7-18&#34; href=&#34;#__codelineno-7-18&#34;&gt;&lt;/a&gt; [ Frame: MANUAL&lt;/span&gt;&lt;span id=&#34;__span-7-19&#34;&gt;&lt;a id=&#34;__codelineno-7-19&#34; name=&#34;__codelineno-7-19&#34; href=&#34;#__codelineno-7-19&#34;&gt;&lt;/a&gt; -- Prologue: check code start register -- - AssembleCode@../../src/compiler/backend/code-generator.cc:232&lt;/span&gt;&lt;span id=&#34;__span-7-20&#34;&gt;&lt;a id=&#34;__codelineno-7-20&#34; name=&#34;__codelineno-7-20&#34; href=&#34;#__codelineno-7-20&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b00 0 10000010 adr x16, #+0x0 (addr 0xc6ccfe4a8b00)&lt;/span&gt;&lt;span id=&#34;__span-7-21&#34;&gt;&lt;a id=&#34;__codelineno-7-21&#34; name=&#34;__codelineno-7-21&#34; href=&#34;#__codelineno-7-21&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b04 4 eb02021f cmp x16, x2&lt;/span&gt;&lt;span id=&#34;__span-7-22&#34;&gt;&lt;a id=&#34;__codelineno-7-22&#34; name=&#34;__codelineno-7-22&#34; href=&#34;#__codelineno-7-22&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b08 8 54000080 b.eq #+0x10 (addr 0xc6ccfe4a8b18)&lt;/span&gt;&lt;span id=&#34;__span-7-23&#34;&gt;&lt;a id=&#34;__codelineno-7-23&#34; name=&#34;__codelineno-7-23&#34; href=&#34;#__codelineno-7-23&#34;&gt;&lt;/a&gt; [ - Abort@../../src/codegen/arm64/macro-assembler-arm64.cc:4008&lt;/span&gt;&lt;span id=&#34;__span-7-24&#34;&gt;&lt;a id=&#34;__codelineno-7-24&#34; name=&#34;__codelineno-7-24&#34; href=&#34;#__codelineno-7-24&#34;&gt;&lt;/a&gt; Abort message: - Abort@../../src/codegen/arm64/macro-assembler-arm64.cc:4010&lt;/span&gt;&lt;span id=&#34;__span-7-25&#34;&gt;&lt;a id=&#34;__codelineno-7-25&#34; name=&#34;__codelineno-7-25&#34; href=&#34;#__codelineno-7-25&#34;&gt;&lt;/a&gt; Wrong value in code start register passed - Abort@../../src/codegen/arm64/macro-assembler-arm64.cc:4011&lt;/span&gt;&lt;span id=&#34;__span-7-26&#34;&gt;&lt;a id=&#34;__codelineno-7-26&#34; name=&#34;__codelineno-7-26&#34; href=&#34;#__codelineno-7-26&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b0c c d2801081 movz x1, #0x84&lt;/span&gt;&lt;span id=&#34;__span-7-27&#34;&gt;&lt;a id=&#34;__codelineno-7-27&#34; name=&#34;__codelineno-7-27&#34; href=&#34;#__codelineno-7-27&#34;&gt;&lt;/a&gt; [ Frame: NO_FRAME_TYPE&lt;/span&gt;&lt;span id=&#34;__span-7-28&#34;&gt;&lt;a id=&#34;__codelineno-7-28&#34; name=&#34;__codelineno-7-28&#34; href=&#34;#__codelineno-7-28&#34;&gt;&lt;/a&gt; [ - EntryFromBuiltinAsOperand@../../src/codegen/arm64/macro-assembler-arm64.cc:2377&lt;/span&gt;&lt;span id=&#34;__span-7-29&#34;&gt;&lt;a id=&#34;__codelineno-7-29&#34; name=&#34;__codelineno-7-29&#34; href=&#34;#__codelineno-7-29&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-30&#34;&gt;&lt;a id=&#34;__codelineno-7-30&#34; name=&#34;__codelineno-7-30&#34; href=&#34;#__codelineno-7-30&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b10 10 f96a3750 ldr x16, [x26, #21608]&lt;/span&gt;&lt;span id=&#34;__span-7-31&#34;&gt;&lt;a id=&#34;__codelineno-7-31&#34; name=&#34;__codelineno-7-31&#34; href=&#34;#__codelineno-7-31&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b14 14 d63f0200 blr x16&lt;/span&gt;&lt;span id=&#34;__span-7-32&#34;&gt;&lt;a id=&#34;__codelineno-7-32&#34; name=&#34;__codelineno-7-32&#34; href=&#34;#__codelineno-7-32&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-33&#34;&gt;&lt;a id=&#34;__codelineno-7-33&#34; name=&#34;__codelineno-7-33&#34; href=&#34;#__codelineno-7-33&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-34&#34;&gt;&lt;a id=&#34;__codelineno-7-34&#34; name=&#34;__codelineno-7-34&#34; href=&#34;#__codelineno-7-34&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-35&#34;&gt;&lt;a id=&#34;__codelineno-7-35&#34; name=&#34;__codelineno-7-35&#34; href=&#34;#__codelineno-7-35&#34;&gt;&lt;/a&gt;# 栈对齐检查，定义在：&lt;/span&gt;&lt;span id=&#34;__span-7-36&#34;&gt;&lt;a id=&#34;__codelineno-7-36&#34; name=&#34;__codelineno-7-36&#34; href=&#34;#__codelineno-7-36&#34;&gt;&lt;/a&gt;# v8/src/codegen/arm64/macro-assembler-arm64.cc MacroAssembler::AssertSpAligned():&lt;/span&gt;&lt;span id=&#34;__span-7-37&#34;&gt;&lt;a id=&#34;__codelineno-7-37&#34; name=&#34;__codelineno-7-37&#34; href=&#34;#__codelineno-7-37&#34;&gt;&lt;/a&gt;# if (!v8_flags.debug_code) return;&lt;/span&gt;&lt;span id=&#34;__span-7-38&#34;&gt;&lt;a id=&#34;__codelineno-7-38&#34; name=&#34;__codelineno-7-38&#34; href=&#34;#__codelineno-7-38&#34;&gt;&lt;/a&gt;# ASM_CODE_COMMENT(this);&lt;/span&gt;&lt;span id=&#34;__span-7-39&#34;&gt;&lt;a id=&#34;__codelineno-7-39&#34; name=&#34;__codelineno-7-39&#34; href=&#34;#__codelineno-7-39&#34;&gt;&lt;/a&gt;# HardAbortScope hard_abort(this); // Avoid calls to Abort.&lt;/span&gt;&lt;span id=&#34;__span-7-40&#34;&gt;&lt;a id=&#34;__codelineno-7-40&#34; name=&#34;__codelineno-7-40&#34; href=&#34;#__codelineno-7-40&#34;&gt;&lt;/a&gt;# // Arm64 requires the stack pointer to be 16-byte aligned prior to address&lt;/span&gt;&lt;span id=&#34;__span-7-41&#34;&gt;&lt;a id=&#34;__codelineno-7-41&#34; name=&#34;__codelineno-7-41&#34; href=&#34;#__codelineno-7-41&#34;&gt;&lt;/a&gt;# // calculation.&lt;/span&gt;&lt;span id=&#34;__span-7-42&#34;&gt;&lt;a id=&#34;__codelineno-7-42&#34; name=&#34;__codelineno-7-42&#34; href=&#34;#__codelineno-7-42&#34;&gt;&lt;/a&gt;# UseScratchRegisterScope scope(this);&lt;/span&gt;&lt;span id=&#34;__span-7-43&#34;&gt;&lt;a id=&#34;__codelineno-7-43&#34; name=&#34;__codelineno-7-43&#34; href=&#34;#__codelineno-7-43&#34;&gt;&lt;/a&gt;# Register temp = scope.AcquireX(); // becomes x16 in the following code&lt;/span&gt;&lt;span id=&#34;__span-7-44&#34;&gt;&lt;a id=&#34;__codelineno-7-44&#34; name=&#34;__codelineno-7-44&#34; href=&#34;#__codelineno-7-44&#34;&gt;&lt;/a&gt;# Mov(temp, sp);&lt;/span&gt;&lt;span id=&#34;__span-7-45&#34;&gt;&lt;a id=&#34;__codelineno-7-45&#34; name=&#34;__codelineno-7-45&#34; href=&#34;#__codelineno-7-45&#34;&gt;&lt;/a&gt;# Tst(temp, 15);&lt;/span&gt;&lt;span id=&#34;__span-7-46&#34;&gt;&lt;a id=&#34;__codelineno-7-46&#34; name=&#34;__codelineno-7-46&#34; href=&#34;#__codelineno-7-46&#34;&gt;&lt;/a&gt;# Check(eq, AbortReason::kUnexpectedStackPointer);&lt;/span&gt;&lt;span id=&#34;__span-7-47&#34;&gt;&lt;a id=&#34;__codelineno-7-47&#34; name=&#34;__codelineno-7-47&#34; href=&#34;#__codelineno-7-47&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-48&#34;&gt;&lt;a id=&#34;__codelineno-7-48&#34; name=&#34;__codelineno-7-48&#34; href=&#34;#__codelineno-7-48&#34;&gt;&lt;/a&gt; -- B0 start (construct frame) --&lt;/span&gt;&lt;span id=&#34;__span-7-49&#34;&gt;&lt;a id=&#34;__codelineno-7-49&#34; name=&#34;__codelineno-7-49&#34; href=&#34;#__codelineno-7-49&#34;&gt;&lt;/a&gt; [ - AssertSpAligned@../../src/codegen/arm64/macro-assembler-arm64.cc:1590&lt;/span&gt;&lt;span id=&#34;__span-7-50&#34;&gt;&lt;a id=&#34;__codelineno-7-50&#34; name=&#34;__codelineno-7-50&#34; href=&#34;#__codelineno-7-50&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b18 18 910003f0 mov x16, sp&lt;/span&gt;&lt;span id=&#34;__span-7-51&#34;&gt;&lt;a id=&#34;__codelineno-7-51&#34; name=&#34;__codelineno-7-51&#34; href=&#34;#__codelineno-7-51&#34;&gt;&lt;/a&gt; [ - LogicalMacro@../../src/codegen/arm64/macro-assembler-arm64.cc:197&lt;/span&gt;&lt;span id=&#34;__span-7-52&#34;&gt;&lt;a id=&#34;__codelineno-7-52&#34; name=&#34;__codelineno-7-52&#34; href=&#34;#__codelineno-7-52&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b1c 1c f2400e1f tst x16, #0xf&lt;/span&gt;&lt;span id=&#34;__span-7-53&#34;&gt;&lt;a id=&#34;__codelineno-7-53&#34; name=&#34;__codelineno-7-53&#34; href=&#34;#__codelineno-7-53&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-54&#34;&gt;&lt;a id=&#34;__codelineno-7-54&#34; name=&#34;__codelineno-7-54&#34; href=&#34;#__codelineno-7-54&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b20 20 54000080 b.eq #+0x10 (addr 0xc6ccfe4a8b30)&lt;/span&gt;&lt;span id=&#34;__span-7-55&#34;&gt;&lt;a id=&#34;__codelineno-7-55&#34; name=&#34;__codelineno-7-55&#34; href=&#34;#__codelineno-7-55&#34;&gt;&lt;/a&gt; [ - Abort@../../src/codegen/arm64/macro-assembler-arm64.cc:4008&lt;/span&gt;&lt;span id=&#34;__span-7-56&#34;&gt;&lt;a id=&#34;__codelineno-7-56&#34; name=&#34;__codelineno-7-56&#34; href=&#34;#__codelineno-7-56&#34;&gt;&lt;/a&gt; Abort message: - Abort@../../src/codegen/arm64/macro-assembler-arm64.cc:4010&lt;/span&gt;&lt;span id=&#34;__span-7-57&#34;&gt;&lt;a id=&#34;__codelineno-7-57&#34; name=&#34;__codelineno-7-57&#34; href=&#34;#__codelineno-7-57&#34;&gt;&lt;/a&gt; The stack pointer is not the expected value - Abort@../../src/codegen/arm64/macro-assembler-arm64.cc:4011&lt;/span&gt;&lt;span id=&#34;__span-7-58&#34;&gt;&lt;a id=&#34;__codelineno-7-58&#34; name=&#34;__codelineno-7-58&#34; href=&#34;#__codelineno-7-58&#34;&gt;&lt;/a&gt; [ Frame: NO_FRAME_TYPE&lt;/span&gt;&lt;span id=&#34;__span-7-59&#34;&gt;&lt;a id=&#34;__codelineno-7-59&#34; name=&#34;__codelineno-7-59&#34; href=&#34;#__codelineno-7-59&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b24 24 52800780 movz w0, #0x3c&lt;/span&gt;&lt;span id=&#34;__span-7-60&#34;&gt;&lt;a id=&#34;__codelineno-7-60&#34; name=&#34;__codelineno-7-60&#34; href=&#34;#__codelineno-7-60&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b28 28 f94e7750 ldr x16, [x26, #7400]&lt;/span&gt;&lt;span id=&#34;__span-7-61&#34;&gt;&lt;a id=&#34;__codelineno-7-61&#34; name=&#34;__codelineno-7-61&#34; href=&#34;#__codelineno-7-61&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b2c 2c d63f0200 blr x16&lt;/span&gt;&lt;span id=&#34;__span-7-62&#34;&gt;&lt;a id=&#34;__codelineno-7-62&#34; name=&#34;__codelineno-7-62&#34; href=&#34;#__codelineno-7-62&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-63&#34;&gt;&lt;a id=&#34;__codelineno-7-63&#34; name=&#34;__codelineno-7-63&#34; href=&#34;#__codelineno-7-63&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-64&#34;&gt;&lt;a id=&#34;__codelineno-7-64&#34; name=&#34;__codelineno-7-64&#34; href=&#34;#__codelineno-7-64&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-65&#34;&gt;&lt;a id=&#34;__codelineno-7-65&#34; name=&#34;__codelineno-7-65&#34; href=&#34;#__codelineno-7-65&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-66&#34;&gt;&lt;a id=&#34;__codelineno-7-66&#34; name=&#34;__codelineno-7-66&#34; href=&#34;#__codelineno-7-66&#34;&gt;&lt;/a&gt;# 构建栈帧&lt;/span&gt;&lt;span id=&#34;__span-7-67&#34;&gt;&lt;a id=&#34;__codelineno-7-67&#34; name=&#34;__codelineno-7-67&#34; href=&#34;#__codelineno-7-67&#34;&gt;&lt;/a&gt;# 构建完成后会得到：sp = prev sp - 64, fp = sp + 48&lt;/span&gt;&lt;span id=&#34;__span-7-68&#34;&gt;&lt;a id=&#34;__codelineno-7-68&#34; name=&#34;__codelineno-7-68&#34; href=&#34;#__codelineno-7-68&#34;&gt;&lt;/a&gt;#&lt;/span&gt;&lt;span id=&#34;__span-7-69&#34;&gt;&lt;a id=&#34;__codelineno-7-69&#34; name=&#34;__codelineno-7-69&#34; href=&#34;#__codelineno-7-69&#34;&gt;&lt;/a&gt;# 栈帧的示意图, 每一个方框表示 8 字节的内存:&lt;/span&gt;&lt;span id=&#34;__span-7-70&#34;&gt;&lt;a id=&#34;__codelineno-7-70&#34; name=&#34;__codelineno-7-70&#34; href=&#34;#__codelineno-7-70&#34;&gt;&lt;/a&gt;# sp + 64 +------------+&lt;/span&gt;&lt;span id=&#34;__span-7-71&#34;&gt;&lt;a id=&#34;__codelineno-7-71&#34; name=&#34;__codelineno-7-71&#34; href=&#34;#__codelineno-7-71&#34;&gt;&lt;/a&gt;# | lr | &amp;lt;= lr 是 link register 的缩写，表示返回地址&lt;/span&gt;&lt;span id=&#34;__span-7-72&#34;&gt;&lt;a id=&#34;__codelineno-7-72&#34; name=&#34;__codelineno-7-72&#34; href=&#34;#__codelineno-7-72&#34;&gt;&lt;/a&gt;# sp + 56 +------------+&lt;/span&gt;&lt;span id=&#34;__span-7-73&#34;&gt;&lt;a id=&#34;__codelineno-7-73&#34; name=&#34;__codelineno-7-73&#34; href=&#34;#__codelineno-7-73&#34;&gt;&lt;/a&gt;# | prev fp | &amp;lt;= 保存了调用前的 fp (frame pointer)&lt;/span&gt;&lt;span id=&#34;__span-7-74&#34;&gt;&lt;a id=&#34;__codelineno-7-74&#34; name=&#34;__codelineno-7-74&#34; href=&#34;#__codelineno-7-74&#34;&gt;&lt;/a&gt;# sp + 48 +------------+ &amp;lt;= 新的 fp (frame pointer) 指向这里&lt;/span&gt;&lt;span id=&#34;__span-7-75&#34;&gt;&lt;a id=&#34;__codelineno-7-75&#34; name=&#34;__codelineno-7-75&#34; href=&#34;#__codelineno-7-75&#34;&gt;&lt;/a&gt;# | x16 (0x22) |&lt;/span&gt;&lt;span id=&#34;__span-7-76&#34;&gt;&lt;a id=&#34;__codelineno-7-76&#34; name=&#34;__codelineno-7-76&#34; href=&#34;#__codelineno-7-76&#34;&gt;&lt;/a&gt;# sp + 40 +------------+&lt;/span&gt;&lt;span id=&#34;__span-7-77&#34;&gt;&lt;a id=&#34;__codelineno-7-77&#34; name=&#34;__codelineno-7-77&#34; href=&#34;#__codelineno-7-77&#34;&gt;&lt;/a&gt;# | x20 | &amp;lt;= bytecode array register&lt;/span&gt;&lt;span id=&#34;__span-7-78&#34;&gt;&lt;a id=&#34;__codelineno-7-78&#34; name=&#34;__codelineno-7-78&#34; href=&#34;#__codelineno-7-78&#34;&gt;&lt;/a&gt;# sp + 32 +------------+&lt;/span&gt;&lt;span id=&#34;__span-7-79&#34;&gt;&lt;a id=&#34;__codelineno-7-79&#34; name=&#34;__codelineno-7-79&#34; href=&#34;#__codelineno-7-79&#34;&gt;&lt;/a&gt;# | x21 | &amp;lt;= dispatch table register&lt;/span&gt;&lt;span id=&#34;__span-7-80&#34;&gt;&lt;a id=&#34;__codelineno-7-80&#34; name=&#34;__codelineno-7-80&#34; href=&#34;#__codelineno-7-80&#34;&gt;&lt;/a&gt;# sp + 24 +------------+&lt;/span&gt;&lt;span id=&#34;__span-7-81&#34;&gt;&lt;a id=&#34;__codelineno-7-81&#34; name=&#34;__codelineno-7-81&#34; href=&#34;#__codelineno-7-81&#34;&gt;&lt;/a&gt;# | x19 | &amp;lt;= bytecode offset register，记录当前正在执行的 bytecode 在 bytecode array 中的偏移&lt;/span&gt;&lt;span id=&#34;__span-7-82&#34;&gt;&lt;a id=&#34;__codelineno-7-82&#34; name=&#34;__codelineno-7-82&#34; href=&#34;#__codelineno-7-82&#34;&gt;&lt;/a&gt;# sp + 16 +------------+&lt;/span&gt;&lt;span id=&#34;__span-7-83&#34;&gt;&lt;a id=&#34;__codelineno-7-83&#34; name=&#34;__codelineno-7-83&#34; href=&#34;#__codelineno-7-83&#34;&gt;&lt;/a&gt;# | x0 | &amp;lt;= accumulator register&lt;/span&gt;&lt;span id=&#34;__span-7-84&#34;&gt;&lt;a id=&#34;__codelineno-7-84&#34; name=&#34;__codelineno-7-84&#34; href=&#34;#__codelineno-7-84&#34;&gt;&lt;/a&gt;# sp + 8 +------------+&lt;/span&gt;&lt;span id=&#34;__span-7-85&#34;&gt;&lt;a id=&#34;__codelineno-7-85&#34; name=&#34;__codelineno-7-85&#34; href=&#34;#__codelineno-7-85&#34;&gt;&lt;/a&gt;# | |&lt;/span&gt;&lt;span id=&#34;__span-7-86&#34;&gt;&lt;a id=&#34;__codelineno-7-86&#34; name=&#34;__codelineno-7-86&#34; href=&#34;#__codelineno-7-86&#34;&gt;&lt;/a&gt;# sp +------------+ &amp;lt;= 新的 sp (stack pointer) 指向这里&lt;/span&gt;&lt;span id=&#34;__span-7-87&#34;&gt;&lt;a id=&#34;__codelineno-7-87&#34; name=&#34;__codelineno-7-87&#34; href=&#34;#__codelineno-7-87&#34;&gt;&lt;/a&gt;#&lt;/span&gt;&lt;span id=&#34;__span-7-88&#34;&gt;&lt;a id=&#34;__codelineno-7-88&#34; name=&#34;__codelineno-7-88&#34; href=&#34;#__codelineno-7-88&#34;&gt;&lt;/a&gt;# 这些寄存器定义在 v8/src/codegen/arm64/register-arm64.h 当中：&lt;/span&gt;&lt;span id=&#34;__span-7-89&#34;&gt;&lt;a id=&#34;__codelineno-7-89&#34; name=&#34;__codelineno-7-89&#34; href=&#34;#__codelineno-7-89&#34;&gt;&lt;/a&gt;# constexpr Register kInterpreterAccumulatorRegister = x0;&lt;/span&gt;&lt;span id=&#34;__span-7-90&#34;&gt;&lt;a id=&#34;__codelineno-7-90&#34; name=&#34;__codelineno-7-90&#34; href=&#34;#__codelineno-7-90&#34;&gt;&lt;/a&gt;# constexpr Register kInterpreterBytecodeOffsetRegister = x19;&lt;/span&gt;&lt;span id=&#34;__span-7-91&#34;&gt;&lt;a id=&#34;__codelineno-7-91&#34; name=&#34;__codelineno-7-91&#34; href=&#34;#__codelineno-7-91&#34;&gt;&lt;/a&gt;# constexpr Register kInterpreterBytecodeArrayRegister = x20;&lt;/span&gt;&lt;span id=&#34;__span-7-92&#34;&gt;&lt;a id=&#34;__codelineno-7-92&#34; name=&#34;__codelineno-7-92&#34; href=&#34;#__codelineno-7-92&#34;&gt;&lt;/a&gt;# constexpr Register kInterpreterDispatchTableRegister = x21;&lt;/span&gt;&lt;span id=&#34;__span-7-93&#34;&gt;&lt;a id=&#34;__codelineno-7-93&#34; name=&#34;__codelineno-7-93&#34; href=&#34;#__codelineno-7-93&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-94&#34;&gt;&lt;a id=&#34;__codelineno-7-94&#34; name=&#34;__codelineno-7-94&#34; href=&#34;#__codelineno-7-94&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b30 30 d2800450 movz x16, #0x22&lt;/span&gt;&lt;span id=&#34;__span-7-95&#34;&gt;&lt;a id=&#34;__codelineno-7-95&#34; name=&#34;__codelineno-7-95&#34; href=&#34;#__codelineno-7-95&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b34 34 a9be43ff stp xzr, x16, [sp, #-32]!&lt;/span&gt;&lt;span id=&#34;__span-7-96&#34;&gt;&lt;a id=&#34;__codelineno-7-96&#34; name=&#34;__codelineno-7-96&#34; href=&#34;#__codelineno-7-96&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b38 38 a9017bfd stp fp, lr, [sp, #16]&lt;/span&gt;&lt;span id=&#34;__span-7-97&#34;&gt;&lt;a id=&#34;__codelineno-7-97&#34; name=&#34;__codelineno-7-97&#34; href=&#34;#__codelineno-7-97&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b3c 3c 910043fd add fp, sp, #0x10 (16)&lt;/span&gt;&lt;span id=&#34;__span-7-98&#34;&gt;&lt;a id=&#34;__codelineno-7-98&#34; name=&#34;__codelineno-7-98&#34; href=&#34;#__codelineno-7-98&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b40 40 d10083ff sub sp, sp, #0x20 (32)&lt;/span&gt;&lt;span id=&#34;__span-7-99&#34;&gt;&lt;a id=&#34;__codelineno-7-99&#34; name=&#34;__codelineno-7-99&#34; href=&#34;#__codelineno-7-99&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b44 44 f90013f4 str x20, [sp, #32]&lt;/span&gt;&lt;span id=&#34;__span-7-100&#34;&gt;&lt;a id=&#34;__codelineno-7-100&#34; name=&#34;__codelineno-7-100&#34; href=&#34;#__codelineno-7-100&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b48 48 f9000ff5 str x21, [sp, #24]&lt;/span&gt;&lt;span id=&#34;__span-7-101&#34;&gt;&lt;a id=&#34;__codelineno-7-101&#34; name=&#34;__codelineno-7-101&#34; href=&#34;#__codelineno-7-101&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b4c 4c f90007e0 str x0, [sp, #8]&lt;/span&gt;&lt;span id=&#34;__span-7-102&#34;&gt;&lt;a id=&#34;__codelineno-7-102&#34; name=&#34;__codelineno-7-102&#34; href=&#34;#__codelineno-7-102&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b50 50 f9000bf3 str x19, [sp, #16]&lt;/span&gt;&lt;span id=&#34;__span-7-103&#34;&gt;&lt;a id=&#34;__codelineno-7-103&#34; name=&#34;__codelineno-7-103&#34; href=&#34;#__codelineno-7-103&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-104&#34;&gt;&lt;a id=&#34;__codelineno-7-104&#34; name=&#34;__codelineno-7-104&#34; href=&#34;#__codelineno-7-104&#34;&gt;&lt;/a&gt;# 调用了未知的 C 函数&lt;/span&gt;&lt;span id=&#34;__span-7-105&#34;&gt;&lt;a id=&#34;__codelineno-7-105&#34; name=&#34;__codelineno-7-105&#34; href=&#34;#__codelineno-7-105&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b54 54 d28042c1 movz x1, #0x216&lt;/span&gt;&lt;span id=&#34;__span-7-106&#34;&gt;&lt;a id=&#34;__codelineno-7-106&#34; name=&#34;__codelineno-7-106&#34; href=&#34;#__codelineno-7-106&#34;&gt;&lt;/a&gt; [ - LoadFromConstantsTable@../../src/codegen/arm64/macro-assembler-arm64.cc:2166&lt;/span&gt;&lt;span id=&#34;__span-7-107&#34;&gt;&lt;a id=&#34;__codelineno-7-107&#34; name=&#34;__codelineno-7-107&#34; href=&#34;#__codelineno-7-107&#34;&gt;&lt;/a&gt; [ - LoadRoot@../../src/codegen/arm64/macro-assembler-arm64.cc:1954&lt;/span&gt;&lt;span id=&#34;__span-7-108&#34;&gt;&lt;a id=&#34;__codelineno-7-108&#34; name=&#34;__codelineno-7-108&#34; href=&#34;#__codelineno-7-108&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b58 58 f94d5f42 ldr x2, [x26, #6840]&lt;/span&gt;&lt;span id=&#34;__span-7-109&#34;&gt;&lt;a id=&#34;__codelineno-7-109&#34; name=&#34;__codelineno-7-109&#34; href=&#34;#__codelineno-7-109&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-110&#34;&gt;&lt;a id=&#34;__codelineno-7-110&#34; name=&#34;__codelineno-7-110&#34; href=&#34;#__codelineno-7-110&#34;&gt;&lt;/a&gt; [ - DecompressTagged@../../src/codegen/arm64/macro-assembler-arm64.cc:3448&lt;/span&gt;&lt;span id=&#34;__span-7-111&#34;&gt;&lt;a id=&#34;__codelineno-7-111&#34; name=&#34;__codelineno-7-111&#34; href=&#34;#__codelineno-7-111&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b5c 5c d28bcef0 movz x16, #0x5e77&lt;/span&gt;&lt;span id=&#34;__span-7-112&#34;&gt;&lt;a id=&#34;__codelineno-7-112&#34; name=&#34;__codelineno-7-112&#34; href=&#34;#__codelineno-7-112&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b60 60 b8706842 ldr w2, [x2, x16]&lt;/span&gt;&lt;span id=&#34;__span-7-113&#34;&gt;&lt;a id=&#34;__codelineno-7-113&#34; name=&#34;__codelineno-7-113&#34; href=&#34;#__codelineno-7-113&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b64 64 8b020382 add x2, x28, x2&lt;/span&gt;&lt;span id=&#34;__span-7-114&#34;&gt;&lt;a id=&#34;__codelineno-7-114&#34; name=&#34;__codelineno-7-114&#34; href=&#34;#__codelineno-7-114&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-115&#34;&gt;&lt;a id=&#34;__codelineno-7-115&#34; name=&#34;__codelineno-7-115&#34; href=&#34;#__codelineno-7-115&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-116&#34;&gt;&lt;a id=&#34;__codelineno-7-116&#34; name=&#34;__codelineno-7-116&#34; href=&#34;#__codelineno-7-116&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b68 68 aa1403e0 mov x0, x20&lt;/span&gt;&lt;span id=&#34;__span-7-117&#34;&gt;&lt;a id=&#34;__codelineno-7-117&#34; name=&#34;__codelineno-7-117&#34; href=&#34;#__codelineno-7-117&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b6c 6c f94ecf50 ldr x16, [x26, #7576]&lt;/span&gt;&lt;span id=&#34;__span-7-118&#34;&gt;&lt;a id=&#34;__codelineno-7-118&#34; name=&#34;__codelineno-7-118&#34; href=&#34;#__codelineno-7-118&#34;&gt;&lt;/a&gt; [ - CallCFunction@../../src/codegen/arm64/macro-assembler-arm64.cc:2106&lt;/span&gt;&lt;span id=&#34;__span-7-119&#34;&gt;&lt;a id=&#34;__codelineno-7-119&#34; name=&#34;__codelineno-7-119&#34; href=&#34;#__codelineno-7-119&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b70 70 10000068 adr x8, #+0xc (addr 0xc6ccfe4a8b7c)&lt;/span&gt;&lt;span id=&#34;__span-7-120&#34;&gt;&lt;a id=&#34;__codelineno-7-120&#34; name=&#34;__codelineno-7-120&#34; href=&#34;#__codelineno-7-120&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b74 74 a93f235d stp fp, x8, [x26, #-16]&lt;/span&gt;&lt;span id=&#34;__span-7-121&#34;&gt;&lt;a id=&#34;__codelineno-7-121&#34; name=&#34;__codelineno-7-121&#34; href=&#34;#__codelineno-7-121&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b78 78 d63f0200 blr x16&lt;/span&gt;&lt;span id=&#34;__span-7-122&#34;&gt;&lt;a id=&#34;__codelineno-7-122&#34; name=&#34;__codelineno-7-122&#34; href=&#34;#__codelineno-7-122&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b7c 7c f81f035f stur xzr, [x26, #-16]&lt;/span&gt;&lt;span id=&#34;__span-7-123&#34;&gt;&lt;a id=&#34;__codelineno-7-123&#34; name=&#34;__codelineno-7-123&#34; href=&#34;#__codelineno-7-123&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-124&#34;&gt;&lt;a id=&#34;__codelineno-7-124&#34; name=&#34;__codelineno-7-124&#34; href=&#34;#__codelineno-7-124&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b80 80 d2800001 movz x1, #0x0&lt;/span&gt;&lt;span id=&#34;__span-7-125&#34;&gt;&lt;a id=&#34;__codelineno-7-125&#34; name=&#34;__codelineno-7-125&#34; href=&#34;#__codelineno-7-125&#34;&gt;&lt;/a&gt; [ - LoadFromConstantsTable@../../src/codegen/arm64/macro-assembler-arm64.cc:2166&lt;/span&gt;&lt;span id=&#34;__span-7-126&#34;&gt;&lt;a id=&#34;__codelineno-7-126&#34; name=&#34;__codelineno-7-126&#34; href=&#34;#__codelineno-7-126&#34;&gt;&lt;/a&gt; [ - LoadRoot@../../src/codegen/arm64/macro-assembler-arm64.cc:1954&lt;/span&gt;&lt;span id=&#34;__span-7-127&#34;&gt;&lt;a id=&#34;__codelineno-7-127&#34; name=&#34;__codelineno-7-127&#34; href=&#34;#__codelineno-7-127&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b84 84 f94d5f42 ldr x2, [x26, #6840]&lt;/span&gt;&lt;span id=&#34;__span-7-128&#34;&gt;&lt;a id=&#34;__codelineno-7-128&#34; name=&#34;__codelineno-7-128&#34; href=&#34;#__codelineno-7-128&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-129&#34;&gt;&lt;a id=&#34;__codelineno-7-129&#34; name=&#34;__codelineno-7-129&#34; href=&#34;#__codelineno-7-129&#34;&gt;&lt;/a&gt; [ - DecompressTagged@../../src/codegen/arm64/macro-assembler-arm64.cc:3448&lt;/span&gt;&lt;span id=&#34;__span-7-130&#34;&gt;&lt;a id=&#34;__codelineno-7-130&#34; name=&#34;__codelineno-7-130&#34; href=&#34;#__codelineno-7-130&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b88 88 d28bcf70 movz x16, #0x5e7b&lt;/span&gt;&lt;span id=&#34;__span-7-131&#34;&gt;&lt;a id=&#34;__codelineno-7-131&#34; name=&#34;__codelineno-7-131&#34; href=&#34;#__codelineno-7-131&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b8c 8c b8706842 ldr w2, [x2, x16]&lt;/span&gt;&lt;span id=&#34;__span-7-132&#34;&gt;&lt;a id=&#34;__codelineno-7-132&#34; name=&#34;__codelineno-7-132&#34; href=&#34;#__codelineno-7-132&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b90 90 8b020382 add x2, x28, x2&lt;/span&gt;&lt;span id=&#34;__span-7-133&#34;&gt;&lt;a id=&#34;__codelineno-7-133&#34; name=&#34;__codelineno-7-133&#34; href=&#34;#__codelineno-7-133&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-134&#34;&gt;&lt;a id=&#34;__codelineno-7-134&#34; name=&#34;__codelineno-7-134&#34; href=&#34;#__codelineno-7-134&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-135&#34;&gt;&lt;a id=&#34;__codelineno-7-135&#34; name=&#34;__codelineno-7-135&#34; href=&#34;#__codelineno-7-135&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b94 94 f94007e0 ldr x0, [sp, #8]&lt;/span&gt;&lt;span id=&#34;__span-7-136&#34;&gt;&lt;a id=&#34;__codelineno-7-136&#34; name=&#34;__codelineno-7-136&#34; href=&#34;#__codelineno-7-136&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b98 98 f94ecf50 ldr x16, [x26, #7576]&lt;/span&gt;&lt;span id=&#34;__span-7-137&#34;&gt;&lt;a id=&#34;__codelineno-7-137&#34; name=&#34;__codelineno-7-137&#34; href=&#34;#__codelineno-7-137&#34;&gt;&lt;/a&gt; [ - CallCFunction@../../src/codegen/arm64/macro-assembler-arm64.cc:2106&lt;/span&gt;&lt;span id=&#34;__span-7-138&#34;&gt;&lt;a id=&#34;__codelineno-7-138&#34; name=&#34;__codelineno-7-138&#34; href=&#34;#__codelineno-7-138&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b9c 9c 10000068 adr x8, #+0xc (addr 0xc6ccfe4a8ba8)&lt;/span&gt;&lt;span id=&#34;__span-7-139&#34;&gt;&lt;a id=&#34;__codelineno-7-139&#34; name=&#34;__codelineno-7-139&#34; href=&#34;#__codelineno-7-139&#34;&gt;&lt;/a&gt;0xc6ccfe4a8ba0 a0 a93f235d stp fp, x8, [x26, #-16]&lt;/span&gt;&lt;span id=&#34;__span-7-140&#34;&gt;&lt;a id=&#34;__codelineno-7-140&#34; name=&#34;__codelineno-7-140&#34; href=&#34;#__codelineno-7-140&#34;&gt;&lt;/a&gt;0xc6ccfe4a8ba4 a4 d63f0200 blr x16&lt;/span&gt;&lt;span id=&#34;__span-7-141&#34;&gt;&lt;a id=&#34;__codelineno-7-141&#34; name=&#34;__codelineno-7-141&#34; href=&#34;#__codelineno-7-141&#34;&gt;&lt;/a&gt;0xc6ccfe4a8ba8 a8 f81f035f stur xzr, [x26, #-16]&lt;/span&gt;&lt;span id=&#34;__span-7-142&#34;&gt;&lt;a id=&#34;__codelineno-7-142&#34; name=&#34;__codelineno-7-142&#34; href=&#34;#__codelineno-7-142&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-143&#34;&gt;&lt;a id=&#34;__codelineno-7-143&#34; name=&#34;__codelineno-7-143&#34; href=&#34;#__codelineno-7-143&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-144&#34;&gt;&lt;a id=&#34;__codelineno-7-144&#34; name=&#34;__codelineno-7-144&#34; href=&#34;#__codelineno-7-144&#34;&gt;&lt;/a&gt;# 从这里开始实现 LdaSmi 的语义&lt;/span&gt;&lt;span id=&#34;__span-7-145&#34;&gt;&lt;a id=&#34;__codelineno-7-145&#34; name=&#34;__codelineno-7-145&#34; href=&#34;#__codelineno-7-145&#34;&gt;&lt;/a&gt;# 从前面的分析可以看到 LdaSmi 由两个字节组成：&lt;/span&gt;&lt;span id=&#34;__span-7-146&#34;&gt;&lt;a id=&#34;__codelineno-7-146&#34; name=&#34;__codelineno-7-146&#34; href=&#34;#__codelineno-7-146&#34;&gt;&lt;/a&gt;# 1. 第一个字节是 0x0d，表示这是一条 LdaSmi&lt;/span&gt;&lt;span id=&#34;__span-7-147&#34;&gt;&lt;a id=&#34;__codelineno-7-147&#34; name=&#34;__codelineno-7-147&#34; href=&#34;#__codelineno-7-147&#34;&gt;&lt;/a&gt;# 2. 第二个字节就是要加载到 `accumulator` 的小整数&lt;/span&gt;&lt;span id=&#34;__span-7-148&#34;&gt;&lt;a id=&#34;__codelineno-7-148&#34; name=&#34;__codelineno-7-148&#34; href=&#34;#__codelineno-7-148&#34;&gt;&lt;/a&gt;# 如：0d 01 对应 LdaSmi [1]，0d 02 对应 LdaSmi [2]&lt;/span&gt;&lt;span id=&#34;__span-7-149&#34;&gt;&lt;a id=&#34;__codelineno-7-149&#34; name=&#34;__codelineno-7-149&#34; href=&#34;#__codelineno-7-149&#34;&gt;&lt;/a&gt;# 所以，为了实现 LdaSmi，需要从 bytecode array 中读取 LdaSmi 字节码的第二个字节，&lt;/span&gt;&lt;span id=&#34;__span-7-150&#34;&gt;&lt;a id=&#34;__codelineno-7-150&#34; name=&#34;__codelineno-7-150&#34; href=&#34;#__codelineno-7-150&#34;&gt;&lt;/a&gt;# 保存到 `accumulator` 寄存器当中&lt;/span&gt;&lt;span id=&#34;__span-7-151&#34;&gt;&lt;a id=&#34;__codelineno-7-151&#34; name=&#34;__codelineno-7-151&#34; href=&#34;#__codelineno-7-151&#34;&gt;&lt;/a&gt;# 下面一条一条地分析指令在做的事情：&lt;/span&gt;&lt;span id=&#34;__span-7-152&#34;&gt;&lt;a id=&#34;__codelineno-7-152&#34; name=&#34;__codelineno-7-152&#34; href=&#34;#__codelineno-7-152&#34;&gt;&lt;/a&gt;# 1. 从 sp + 16 地址读取 bytecode offset 寄存器的值到 x3，&lt;/span&gt;&lt;span id=&#34;__span-7-153&#34;&gt;&lt;a id=&#34;__codelineno-7-153&#34; name=&#34;__codelineno-7-153&#34; href=&#34;#__codelineno-7-153&#34;&gt;&lt;/a&gt;# 它记录了 LdaSmi 相对 bytecode array 的偏移&lt;/span&gt;&lt;span id=&#34;__span-7-154&#34;&gt;&lt;a id=&#34;__codelineno-7-154&#34; name=&#34;__codelineno-7-154&#34; href=&#34;#__codelineno-7-154&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bac ac f9400be3 ldr x3, [sp, #16]&lt;/span&gt;&lt;span id=&#34;__span-7-155&#34;&gt;&lt;a id=&#34;__codelineno-7-155&#34; name=&#34;__codelineno-7-155&#34; href=&#34;#__codelineno-7-155&#34;&gt;&lt;/a&gt;# 2. 计算 x3 + 1 的值并写入 x4，得到 LdaSmi 的第二个字节相对 bytecode array 的偏移&lt;/span&gt;&lt;span id=&#34;__span-7-156&#34;&gt;&lt;a id=&#34;__codelineno-7-156&#34; name=&#34;__codelineno-7-156&#34; href=&#34;#__codelineno-7-156&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bb0 b0 91000464 add x4, x3, #0x1 (1)&lt;/span&gt;&lt;span id=&#34;__span-7-157&#34;&gt;&lt;a id=&#34;__codelineno-7-157&#34; name=&#34;__codelineno-7-157&#34; href=&#34;#__codelineno-7-157&#34;&gt;&lt;/a&gt;# 3. 从 sp + 32 地址读取 bytecode array 寄存器的值到 x20&lt;/span&gt;&lt;span id=&#34;__span-7-158&#34;&gt;&lt;a id=&#34;__codelineno-7-158&#34; name=&#34;__codelineno-7-158&#34; href=&#34;#__codelineno-7-158&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bb4 b4 f94013f4 ldr x20, [sp, #32]&lt;/span&gt;&lt;span id=&#34;__span-7-159&#34;&gt;&lt;a id=&#34;__codelineno-7-159&#34; name=&#34;__codelineno-7-159&#34; href=&#34;#__codelineno-7-159&#34;&gt;&lt;/a&gt;# 4. 从 x20 + x4 地址读取 LdaSmi 的第二个字节到 x4，也就是要加载到 `accumulator` 的值，&lt;/span&gt;&lt;span id=&#34;__span-7-160&#34;&gt;&lt;a id=&#34;__codelineno-7-160&#34; name=&#34;__codelineno-7-160&#34; href=&#34;#__codelineno-7-160&#34;&gt;&lt;/a&gt;# 之后 x4 的值会写入到 x0，也就是 `accumulator` 对应的寄存器&lt;/span&gt;&lt;span id=&#34;__span-7-161&#34;&gt;&lt;a id=&#34;__codelineno-7-161&#34; name=&#34;__codelineno-7-161&#34; href=&#34;#__codelineno-7-161&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bb8 b8 38e46a84 ldrsb w4, [x20, x4]&lt;/span&gt;&lt;span id=&#34;__span-7-162&#34;&gt;&lt;a id=&#34;__codelineno-7-162&#34; name=&#34;__codelineno-7-162&#34; href=&#34;#__codelineno-7-162&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-163&#34;&gt;&lt;a id=&#34;__codelineno-7-163&#34; name=&#34;__codelineno-7-163&#34; href=&#34;#__codelineno-7-163&#34;&gt;&lt;/a&gt;# Dispatch: 找到下一个 Opcode 对应的代码的入口，然后跳转过去&lt;/span&gt;&lt;span id=&#34;__span-7-164&#34;&gt;&lt;a id=&#34;__codelineno-7-164&#34; name=&#34;__codelineno-7-164&#34; href=&#34;#__codelineno-7-164&#34;&gt;&lt;/a&gt; ========= Dispatch - Dispatch@../../src/interpreter/interpreter-assembler.cc:1278 - AssembleArchInstruction@../../src/compiler/backend/arm64/code-generator-arm64.cc:978&lt;/span&gt;&lt;span id=&#34;__span-7-165&#34;&gt;&lt;a id=&#34;__codelineno-7-165&#34; name=&#34;__codelineno-7-165&#34; href=&#34;#__codelineno-7-165&#34;&gt;&lt;/a&gt;# x3 是 LdaSmi 当前所在的 bytecode offset，加 2 是因为 LdaSmi 占用了两个字节&lt;/span&gt;&lt;span id=&#34;__span-7-166&#34;&gt;&lt;a id=&#34;__codelineno-7-166&#34; name=&#34;__codelineno-7-166&#34; href=&#34;#__codelineno-7-166&#34;&gt;&lt;/a&gt;# x19 = x3 + 2，就是 bytecode offset 前进两个字节，指向下一个字节码&lt;/span&gt;&lt;span id=&#34;__span-7-167&#34;&gt;&lt;a id=&#34;__codelineno-7-167&#34; name=&#34;__codelineno-7-167&#34; href=&#34;#__codelineno-7-167&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bbc bc 91000873 add x19, x3, #0x2 (2)&lt;/span&gt;&lt;span id=&#34;__span-7-168&#34;&gt;&lt;a id=&#34;__codelineno-7-168&#34; name=&#34;__codelineno-7-168&#34; href=&#34;#__codelineno-7-168&#34;&gt;&lt;/a&gt;# x20 是 bytecode array，从 bytecode array 读取下一个字节码的第一个字节到 x3 寄存器&lt;/span&gt;&lt;span id=&#34;__span-7-169&#34;&gt;&lt;a id=&#34;__codelineno-7-169&#34; name=&#34;__codelineno-7-169&#34; href=&#34;#__codelineno-7-169&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bc0 c0 38736a83 ldrb w3, [x20, x19]&lt;/span&gt;&lt;span id=&#34;__span-7-170&#34;&gt;&lt;a id=&#34;__codelineno-7-170&#34; name=&#34;__codelineno-7-170&#34; href=&#34;#__codelineno-7-170&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-171&#34;&gt;&lt;a id=&#34;__codelineno-7-171&#34; name=&#34;__codelineno-7-171&#34; href=&#34;#__codelineno-7-171&#34;&gt;&lt;/a&gt;# 接下来检查在 x3 寄存器当中的字节码的第一个字节（Opcode），如果它：&lt;/span&gt;&lt;span id=&#34;__span-7-172&#34;&gt;&lt;a id=&#34;__codelineno-7-172&#34; name=&#34;__codelineno-7-172&#34; href=&#34;#__codelineno-7-172&#34;&gt;&lt;/a&gt;# 1. 小于 187(kFirstShortStar)，说明它不是特殊的 Short Star (Star0-Star15) 字节码&lt;/span&gt;&lt;span id=&#34;__span-7-173&#34;&gt;&lt;a id=&#34;__codelineno-7-173&#34; name=&#34;__codelineno-7-173&#34; href=&#34;#__codelineno-7-173&#34;&gt;&lt;/a&gt;# 2. 介于 187(kFirstShortStar) 和 202(kLastShortStar) 之间，说明它是特殊的 Short Star (Star0-Star15) 字节码&lt;/span&gt;&lt;span id=&#34;__span-7-174&#34;&gt;&lt;a id=&#34;__codelineno-7-174&#34; name=&#34;__codelineno-7-174&#34; href=&#34;#__codelineno-7-174&#34;&gt;&lt;/a&gt;# 3. 如果大于 202(kLastShortStar)，说明它是非法的字节码&lt;/span&gt;&lt;span id=&#34;__span-7-175&#34;&gt;&lt;a id=&#34;__codelineno-7-175&#34; name=&#34;__codelineno-7-175&#34; href=&#34;#__codelineno-7-175&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-176&#34;&gt;&lt;a id=&#34;__codelineno-7-176&#34; name=&#34;__codelineno-7-176&#34; href=&#34;#__codelineno-7-176&#34;&gt;&lt;/a&gt;# 如果 x3 寄存器大于或等于 187，说明这个字节码可能是 Short Star 字节码，就跳转到后面的 B2&lt;/span&gt;&lt;span id=&#34;__span-7-177&#34;&gt;&lt;a id=&#34;__codelineno-7-177&#34; name=&#34;__codelineno-7-177&#34; href=&#34;#__codelineno-7-177&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bc4 c4 7102ec7f cmp w3, #0xbb (187)&lt;/span&gt;&lt;span id=&#34;__span-7-178&#34;&gt;&lt;a id=&#34;__codelineno-7-178&#34; name=&#34;__codelineno-7-178&#34; href=&#34;#__codelineno-7-178&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bc8 c8 54000102 b.hs #+0x20 (addr 0xc6ccfe4a8be8)&lt;/span&gt;&lt;span id=&#34;__span-7-179&#34;&gt;&lt;a id=&#34;__codelineno-7-179&#34; name=&#34;__codelineno-7-179&#34; href=&#34;#__codelineno-7-179&#34;&gt;&lt;/a&gt; -- B1 start --&lt;/span&gt;&lt;span id=&#34;__span-7-180&#34;&gt;&lt;a id=&#34;__codelineno-7-180&#34; name=&#34;__codelineno-7-180&#34; href=&#34;#__codelineno-7-180&#34;&gt;&lt;/a&gt;# 此时 x3 小于 187&lt;/span&gt;&lt;span id=&#34;__span-7-181&#34;&gt;&lt;a id=&#34;__codelineno-7-181&#34; name=&#34;__codelineno-7-181&#34; href=&#34;#__codelineno-7-181&#34;&gt;&lt;/a&gt;# 从栈上读取 x21 即 dispatch table register&lt;/span&gt;&lt;span id=&#34;__span-7-182&#34;&gt;&lt;a id=&#34;__codelineno-7-182&#34; name=&#34;__codelineno-7-182&#34; href=&#34;#__codelineno-7-182&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bcc cc f9400ff5 ldr x21, [sp, #24]&lt;/span&gt;&lt;span id=&#34;__span-7-183&#34;&gt;&lt;a id=&#34;__codelineno-7-183&#34; name=&#34;__codelineno-7-183&#34; href=&#34;#__codelineno-7-183&#34;&gt;&lt;/a&gt;# 从 dispatch table，以 x3 为下标，读取下一个字节码对应的代码的地址&lt;/span&gt;&lt;span id=&#34;__span-7-184&#34;&gt;&lt;a id=&#34;__codelineno-7-184&#34; name=&#34;__codelineno-7-184&#34; href=&#34;#__codelineno-7-184&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bd0 d0 f8637aa2 ldr x2, [x21, x3, lsl #3]&lt;/span&gt;&lt;span id=&#34;__span-7-185&#34;&gt;&lt;a id=&#34;__codelineno-7-185&#34; name=&#34;__codelineno-7-185&#34; href=&#34;#__codelineno-7-185&#34;&gt;&lt;/a&gt;# 把之前 LdaSmi 计算得到的 x4 寄存器写到 `accumulator` 即 x0 寄存器当中&lt;/span&gt;&lt;span id=&#34;__span-7-186&#34;&gt;&lt;a id=&#34;__codelineno-7-186&#34; name=&#34;__codelineno-7-186&#34; href=&#34;#__codelineno-7-186&#34;&gt;&lt;/a&gt;# 这里 x0 = 2 * x4，是因为 v8 用最低位表示这是一个 Smi（用 0 表示）还是一个指针（用 1 表示）&lt;/span&gt;&lt;span id=&#34;__span-7-187&#34;&gt;&lt;a id=&#34;__codelineno-7-187&#34; name=&#34;__codelineno-7-187&#34; href=&#34;#__codelineno-7-187&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bd4 d4 0b040080 add w0, w4, w4&lt;/span&gt;&lt;span id=&#34;__span-7-188&#34;&gt;&lt;a id=&#34;__codelineno-7-188&#34; name=&#34;__codelineno-7-188&#34; href=&#34;#__codelineno-7-188&#34;&gt;&lt;/a&gt;# 恢复调用函数前的旧 fp 和 lr&lt;/span&gt;&lt;span id=&#34;__span-7-189&#34;&gt;&lt;a id=&#34;__codelineno-7-189&#34; name=&#34;__codelineno-7-189&#34; href=&#34;#__codelineno-7-189&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bd8 d8 a9407bbd ldp fp, lr, [fp]&lt;/span&gt;&lt;span id=&#34;__span-7-190&#34;&gt;&lt;a id=&#34;__codelineno-7-190&#34; name=&#34;__codelineno-7-190&#34; href=&#34;#__codelineno-7-190&#34;&gt;&lt;/a&gt;# 恢复调用函数前的旧 sp&lt;/span&gt;&lt;span id=&#34;__span-7-191&#34;&gt;&lt;a id=&#34;__codelineno-7-191&#34; name=&#34;__codelineno-7-191&#34; href=&#34;#__codelineno-7-191&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bdc dc 910103ff add sp, sp, #0x40 (64)&lt;/span&gt;&lt;span id=&#34;__span-7-192&#34;&gt;&lt;a id=&#34;__codelineno-7-192&#34; name=&#34;__codelineno-7-192&#34; href=&#34;#__codelineno-7-192&#34;&gt;&lt;/a&gt;# 下一个字节码对应的代码的地址已经保存在 x2 寄存器当中，跳转过去&lt;/span&gt;&lt;span id=&#34;__span-7-193&#34;&gt;&lt;a id=&#34;__codelineno-7-193&#34; name=&#34;__codelineno-7-193&#34; href=&#34;#__codelineno-7-193&#34;&gt;&lt;/a&gt;0xc6ccfe4a8be0 e0 aa0203f1 mov x17, x2&lt;/span&gt;&lt;span id=&#34;__span-7-194&#34;&gt;&lt;a id=&#34;__codelineno-7-194&#34; name=&#34;__codelineno-7-194&#34; href=&#34;#__codelineno-7-194&#34;&gt;&lt;/a&gt;0xc6ccfe4a8be4 e4 d61f0220 br x17&lt;/span&gt;&lt;span id=&#34;__span-7-195&#34;&gt;&lt;a id=&#34;__codelineno-7-195&#34; name=&#34;__codelineno-7-195&#34; href=&#34;#__codelineno-7-195&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-196&#34;&gt;&lt;a id=&#34;__codelineno-7-196&#34; name=&#34;__codelineno-7-196&#34; href=&#34;#__codelineno-7-196&#34;&gt;&lt;/a&gt; -- B2 start --&lt;/span&gt;&lt;span id=&#34;__span-7-197&#34;&gt;&lt;a id=&#34;__codelineno-7-197&#34; name=&#34;__codelineno-7-197&#34; href=&#34;#__codelineno-7-197&#34;&gt;&lt;/a&gt; [ Assert: UintPtrGreaterThanOrEqual(opcode, UintPtrConstant(static_cast&amp;lt;int&amp;gt;( Bytecode::kFirstShortStar))) - StoreRegisterForShortStar@../../src/interpreter/interpreter-assembler.cc:310 - AssembleArchInstruction@../../src/compiler/backend/arm64/code-generator-arm64.cc:978&lt;/span&gt;&lt;span id=&#34;__span-7-198&#34;&gt;&lt;a id=&#34;__codelineno-7-198&#34; name=&#34;__codelineno-7-198&#34; href=&#34;#__codelineno-7-198&#34;&gt;&lt;/a&gt; ] Assert - AssembleArchInstruction@../../src/compiler/backend/arm64/code-generator-arm64.cc:978&lt;/span&gt;&lt;span id=&#34;__span-7-199&#34;&gt;&lt;a id=&#34;__codelineno-7-199&#34; name=&#34;__codelineno-7-199&#34; href=&#34;#__codelineno-7-199&#34;&gt;&lt;/a&gt; [ Assert: UintPtrLessThanOrEqual( opcode, UintPtrConstant(static_cast&amp;lt;int&amp;gt;(Bytecode::kLastShortStar))) - StoreRegisterForShortStar@../../src/interpreter/interpreter-assembler.cc:314 - AssembleArchInstruction@../../src/compiler/backend/arm64/code-generator-arm64.cc:978&lt;/span&gt;&lt;span id=&#34;__span-7-200&#34;&gt;&lt;a id=&#34;__codelineno-7-200&#34; name=&#34;__codelineno-7-200&#34; href=&#34;#__codelineno-7-200&#34;&gt;&lt;/a&gt;# 此时 x3 大于或等于 187&lt;/span&gt;&lt;span id=&#34;__span-7-201&#34;&gt;&lt;a id=&#34;__codelineno-7-201&#34; name=&#34;__codelineno-7-201&#34; href=&#34;#__codelineno-7-201&#34;&gt;&lt;/a&gt;# 进一步判断 x3 是否大于 202，如果大于，则跳转到后面的 B3&lt;/span&gt;&lt;span id=&#34;__span-7-202&#34;&gt;&lt;a id=&#34;__codelineno-7-202&#34; name=&#34;__codelineno-7-202&#34; href=&#34;#__codelineno-7-202&#34;&gt;&lt;/a&gt;0xc6ccfe4a8be8 e8 7103287f cmp w3, #0xca (202)&lt;/span&gt;&lt;span id=&#34;__span-7-203&#34;&gt;&lt;a id=&#34;__codelineno-7-203&#34; name=&#34;__codelineno-7-203&#34; href=&#34;#__codelineno-7-203&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bec ec 540001c8 b.hi #+0x38 (addr 0xc6ccfe4a8c24)&lt;/span&gt;&lt;span id=&#34;__span-7-204&#34;&gt;&lt;a id=&#34;__codelineno-7-204&#34; name=&#34;__codelineno-7-204&#34; href=&#34;#__codelineno-7-204&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-205&#34;&gt;&lt;a id=&#34;__codelineno-7-205&#34; name=&#34;__codelineno-7-205&#34; href=&#34;#__codelineno-7-205&#34;&gt;&lt;/a&gt; -- B4 start --&lt;/span&gt;&lt;span id=&#34;__span-7-206&#34;&gt;&lt;a id=&#34;__codelineno-7-206&#34; name=&#34;__codelineno-7-206&#34; href=&#34;#__codelineno-7-206&#34;&gt;&lt;/a&gt;# 此时 x3 介于 187 和 202 之间，是一个 Short Star&lt;/span&gt;&lt;span id=&#34;__span-7-207&#34;&gt;&lt;a id=&#34;__codelineno-7-207&#34; name=&#34;__codelineno-7-207&#34; href=&#34;#__codelineno-7-207&#34;&gt;&lt;/a&gt;# Short Star 做的事情就是把 `accumulator` 寄存器的值复制到 r0-r15 当中指定的寄存器&lt;/span&gt;&lt;span id=&#34;__span-7-208&#34;&gt;&lt;a id=&#34;__codelineno-7-208&#34; name=&#34;__codelineno-7-208&#34; href=&#34;#__codelineno-7-208&#34;&gt;&lt;/a&gt;# 所以直接在这里实现了 Short Star 的语义，而不是单独跑一段代码去执行它&lt;/span&gt;&lt;span id=&#34;__span-7-209&#34;&gt;&lt;a id=&#34;__codelineno-7-209&#34; name=&#34;__codelineno-7-209&#34; href=&#34;#__codelineno-7-209&#34;&gt;&lt;/a&gt;# 由于 r0-r15 寄存器保存在栈上，所以通过 x3 计算出 Short Star 要写到哪个寄存器&lt;/span&gt;&lt;span id=&#34;__span-7-210&#34;&gt;&lt;a id=&#34;__codelineno-7-210&#34; name=&#34;__codelineno-7-210&#34; href=&#34;#__codelineno-7-210&#34;&gt;&lt;/a&gt;# 进而直接计算要写到的栈的地址的偏移&lt;/span&gt;&lt;span id=&#34;__span-7-211&#34;&gt;&lt;a id=&#34;__codelineno-7-211&#34; name=&#34;__codelineno-7-211&#34; href=&#34;#__codelineno-7-211&#34;&gt;&lt;/a&gt;# 寻找一个通项公式，找到 Star0-Star15 要写入的地址：&lt;/span&gt;&lt;span id=&#34;__span-7-212&#34;&gt;&lt;a id=&#34;__codelineno-7-212&#34; name=&#34;__codelineno-7-212&#34; href=&#34;#__codelineno-7-212&#34;&gt;&lt;/a&gt;# Star0(202): r0 的位置在栈顶再往下的 8 字节，即 fp 减去 56&lt;/span&gt;&lt;span id=&#34;__span-7-213&#34;&gt;&lt;a id=&#34;__codelineno-7-213&#34; name=&#34;__codelineno-7-213&#34; href=&#34;#__codelineno-7-213&#34;&gt;&lt;/a&gt;# Star0(187): r15 的位置在栈顶再往下的 8*16 字节，即 fp 减去 176&lt;/span&gt;&lt;span id=&#34;__span-7-214&#34;&gt;&lt;a id=&#34;__codelineno-7-214&#34; name=&#34;__codelineno-7-214&#34; href=&#34;#__codelineno-7-214&#34;&gt;&lt;/a&gt;# 相对 fp 的偏移量就等于 x3 * 8 - 1672&lt;/span&gt;&lt;span id=&#34;__span-7-215&#34;&gt;&lt;a id=&#34;__codelineno-7-215&#34; name=&#34;__codelineno-7-215&#34; href=&#34;#__codelineno-7-215&#34;&gt;&lt;/a&gt;# 从而得到下面的代码：&lt;/span&gt;&lt;span id=&#34;__span-7-216&#34;&gt;&lt;a id=&#34;__codelineno-7-216&#34; name=&#34;__codelineno-7-216&#34; href=&#34;#__codelineno-7-216&#34;&gt;&lt;/a&gt;# 计算 x3 = x3 * 8&lt;/span&gt;&lt;span id=&#34;__span-7-217&#34;&gt;&lt;a id=&#34;__codelineno-7-217&#34; name=&#34;__codelineno-7-217&#34; href=&#34;#__codelineno-7-217&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bf0 f0 d37df063 lsl x3, x3, #3&lt;/span&gt;&lt;span id=&#34;__span-7-218&#34;&gt;&lt;a id=&#34;__codelineno-7-218&#34; name=&#34;__codelineno-7-218&#34; href=&#34;#__codelineno-7-218&#34;&gt;&lt;/a&gt;# 把之前 LdaSmi 计算得到的 x4 寄存器写到 `accumulator` 即 x0 寄存器当中&lt;/span&gt;&lt;span id=&#34;__span-7-219&#34;&gt;&lt;a id=&#34;__codelineno-7-219&#34; name=&#34;__codelineno-7-219&#34; href=&#34;#__codelineno-7-219&#34;&gt;&lt;/a&gt;# 这里 x0 = 2 * x4，是因为 v8 用最低位表示这是一个 Smi（用 0 表示）还是一个指针（用 1 表示）&lt;/span&gt;&lt;span id=&#34;__span-7-220&#34;&gt;&lt;a id=&#34;__codelineno-7-220&#34; name=&#34;__codelineno-7-220&#34; href=&#34;#__codelineno-7-220&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bf4 f4 0b040080 add w0, w4, w4&lt;/span&gt;&lt;span id=&#34;__span-7-221&#34;&gt;&lt;a id=&#34;__codelineno-7-221&#34; name=&#34;__codelineno-7-221&#34; href=&#34;#__codelineno-7-221&#34;&gt;&lt;/a&gt; ] Assert - AssembleArchInstruction@../../src/compiler/backend/arm64/code-generator-arm64.cc:978&lt;/span&gt;&lt;span id=&#34;__span-7-222&#34;&gt;&lt;a id=&#34;__codelineno-7-222&#34; name=&#34;__codelineno-7-222&#34; href=&#34;#__codelineno-7-222&#34;&gt;&lt;/a&gt;# 计算 x3 = x3 - 1672，就得到了相对 fp 的偏移量&lt;/span&gt;&lt;span id=&#34;__span-7-223&#34;&gt;&lt;a id=&#34;__codelineno-7-223&#34; name=&#34;__codelineno-7-223&#34; href=&#34;#__codelineno-7-223&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bf8 f8 d11a2063 sub x3, x3, #0x688 (1672)&lt;/span&gt;&lt;span id=&#34;__span-7-224&#34;&gt;&lt;a id=&#34;__codelineno-7-224&#34; name=&#34;__codelineno-7-224&#34; href=&#34;#__codelineno-7-224&#34;&gt;&lt;/a&gt;# 从 fp 的地址读取函数调用前的 fp&lt;/span&gt;&lt;span id=&#34;__span-7-225&#34;&gt;&lt;a id=&#34;__codelineno-7-225&#34; name=&#34;__codelineno-7-225&#34; href=&#34;#__codelineno-7-225&#34;&gt;&lt;/a&gt;0xc6ccfe4a8bfc fc f94003a4 ldr x4, [fp]&lt;/span&gt;&lt;span id=&#34;__span-7-226&#34;&gt;&lt;a id=&#34;__codelineno-7-226&#34; name=&#34;__codelineno-7-226&#34; href=&#34;#__codelineno-7-226&#34;&gt;&lt;/a&gt;# 把 `accumulator` 写入到相对函数调用前的 fp 的对应位置&lt;/span&gt;&lt;span id=&#34;__span-7-227&#34;&gt;&lt;a id=&#34;__codelineno-7-227&#34; name=&#34;__codelineno-7-227&#34; href=&#34;#__codelineno-7-227&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c00 100 f8236880 str x0, [x4, x3]&lt;/span&gt;&lt;span id=&#34;__span-7-228&#34;&gt;&lt;a id=&#34;__codelineno-7-228&#34; name=&#34;__codelineno-7-228&#34; href=&#34;#__codelineno-7-228&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-229&#34;&gt;&lt;a id=&#34;__codelineno-7-229&#34; name=&#34;__codelineno-7-229&#34; href=&#34;#__codelineno-7-229&#34;&gt;&lt;/a&gt;# 下面就是 Dispatch 逻辑，只不过这次是执行完 Short Star 字节码后的 Dispatch&lt;/span&gt;&lt;span id=&#34;__span-7-230&#34;&gt;&lt;a id=&#34;__codelineno-7-230&#34; name=&#34;__codelineno-7-230&#34; href=&#34;#__codelineno-7-230&#34;&gt;&lt;/a&gt;# x19 = x3 + 1，就是 bytecode offset 前进一个字节，指向下一个字节码&lt;/span&gt;&lt;span id=&#34;__span-7-231&#34;&gt;&lt;a id=&#34;__codelineno-7-231&#34; name=&#34;__codelineno-7-231&#34; href=&#34;#__codelineno-7-231&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c04 104 91000673 add x19, x19, #0x1 (1)&lt;/span&gt;&lt;span id=&#34;__span-7-232&#34;&gt;&lt;a id=&#34;__codelineno-7-232&#34; name=&#34;__codelineno-7-232&#34; href=&#34;#__codelineno-7-232&#34;&gt;&lt;/a&gt;# x20 是 bytecode array，从 bytecode array 读取下一个字节码的第一个字节到 x3 寄存器&lt;/span&gt;&lt;span id=&#34;__span-7-233&#34;&gt;&lt;a id=&#34;__codelineno-7-233&#34; name=&#34;__codelineno-7-233&#34; href=&#34;#__codelineno-7-233&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c08 108 38736a83 ldrb w3, [x20, x19]&lt;/span&gt;&lt;span id=&#34;__span-7-234&#34;&gt;&lt;a id=&#34;__codelineno-7-234&#34; name=&#34;__codelineno-7-234&#34; href=&#34;#__codelineno-7-234&#34;&gt;&lt;/a&gt;# 从栈上读取 x21 即 dispatch table register&lt;/span&gt;&lt;span id=&#34;__span-7-235&#34;&gt;&lt;a id=&#34;__codelineno-7-235&#34; name=&#34;__codelineno-7-235&#34; href=&#34;#__codelineno-7-235&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c0c 10c f9400ff5 ldr x21, [sp, #24]&lt;/span&gt;&lt;span id=&#34;__span-7-236&#34;&gt;&lt;a id=&#34;__codelineno-7-236&#34; name=&#34;__codelineno-7-236&#34; href=&#34;#__codelineno-7-236&#34;&gt;&lt;/a&gt;# 从 dispatch table，以 x3 为下标，读取下一个字节码对应的代码的地址&lt;/span&gt;&lt;span id=&#34;__span-7-237&#34;&gt;&lt;a id=&#34;__codelineno-7-237&#34; name=&#34;__codelineno-7-237&#34; href=&#34;#__codelineno-7-237&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c10 110 f8637aa2 ldr x2, [x21, x3, lsl #3]&lt;/span&gt;&lt;span id=&#34;__span-7-238&#34;&gt;&lt;a id=&#34;__codelineno-7-238&#34; name=&#34;__codelineno-7-238&#34; href=&#34;#__codelineno-7-238&#34;&gt;&lt;/a&gt;# 恢复调用函数前的旧 fp 和 lr&lt;/span&gt;&lt;span id=&#34;__span-7-239&#34;&gt;&lt;a id=&#34;__codelineno-7-239&#34; name=&#34;__codelineno-7-239&#34; href=&#34;#__codelineno-7-239&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c14 114 a9407bbd ldp fp, lr, [fp]&lt;/span&gt;&lt;span id=&#34;__span-7-240&#34;&gt;&lt;a id=&#34;__codelineno-7-240&#34; name=&#34;__codelineno-7-240&#34; href=&#34;#__codelineno-7-240&#34;&gt;&lt;/a&gt;# 恢复调用函数前的旧 sp&lt;/span&gt;&lt;span id=&#34;__span-7-241&#34;&gt;&lt;a id=&#34;__codelineno-7-241&#34; name=&#34;__codelineno-7-241&#34; href=&#34;#__codelineno-7-241&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c18 118 910103ff add sp, sp, #0x40 (64)&lt;/span&gt;&lt;span id=&#34;__span-7-242&#34;&gt;&lt;a id=&#34;__codelineno-7-242&#34; name=&#34;__codelineno-7-242&#34; href=&#34;#__codelineno-7-242&#34;&gt;&lt;/a&gt;# 下一个字节码对应的代码的地址已经保存在 x2 寄存器当中，跳转过去&lt;/span&gt;&lt;span id=&#34;__span-7-243&#34;&gt;&lt;a id=&#34;__codelineno-7-243&#34; name=&#34;__codelineno-7-243&#34; href=&#34;#__codelineno-7-243&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c1c 11c aa0203f1 mov x17, x2&lt;/span&gt;&lt;span id=&#34;__span-7-244&#34;&gt;&lt;a id=&#34;__codelineno-7-244&#34; name=&#34;__codelineno-7-244&#34; href=&#34;#__codelineno-7-244&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c20 120 d61f0220 br x17&lt;/span&gt;&lt;span id=&#34;__span-7-245&#34;&gt;&lt;a id=&#34;__codelineno-7-245&#34; name=&#34;__codelineno-7-245&#34; href=&#34;#__codelineno-7-245&#34;&gt;&lt;/a&gt; -- B5 start (no frame) --&lt;/span&gt;&lt;span id=&#34;__span-7-246&#34;&gt;&lt;a id=&#34;__codelineno-7-246&#34; name=&#34;__codelineno-7-246&#34; href=&#34;#__codelineno-7-246&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-247&#34;&gt;&lt;a id=&#34;__codelineno-7-247&#34; name=&#34;__codelineno-7-247&#34; href=&#34;#__codelineno-7-247&#34;&gt;&lt;/a&gt; -- B3 start (deferred) --&lt;/span&gt;&lt;span id=&#34;__span-7-248&#34;&gt;&lt;a id=&#34;__codelineno-7-248&#34; name=&#34;__codelineno-7-248&#34; href=&#34;#__codelineno-7-248&#34;&gt;&lt;/a&gt;# 此时 x3 大于 202，为非法字节码，跳转到错误处理的逻辑&lt;/span&gt;&lt;span id=&#34;__span-7-249&#34;&gt;&lt;a id=&#34;__codelineno-7-249&#34; name=&#34;__codelineno-7-249&#34; href=&#34;#__codelineno-7-249&#34;&gt;&lt;/a&gt; [ - LoadFromConstantsTable@../../src/codegen/arm64/macro-assembler-arm64.cc:2166&lt;/span&gt;&lt;span id=&#34;__span-7-250&#34;&gt;&lt;a id=&#34;__codelineno-7-250&#34; name=&#34;__codelineno-7-250&#34; href=&#34;#__codelineno-7-250&#34;&gt;&lt;/a&gt; [ - LoadRoot@../../src/codegen/arm64/macro-assembler-arm64.cc:1954&lt;/span&gt;&lt;span id=&#34;__span-7-251&#34;&gt;&lt;a id=&#34;__codelineno-7-251&#34; name=&#34;__codelineno-7-251&#34; href=&#34;#__codelineno-7-251&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c24 124 f94d5f41 ldr x1, [x26, #6840]&lt;/span&gt;&lt;span id=&#34;__span-7-252&#34;&gt;&lt;a id=&#34;__codelineno-7-252&#34; name=&#34;__codelineno-7-252&#34; href=&#34;#__codelineno-7-252&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-253&#34;&gt;&lt;a id=&#34;__codelineno-7-253&#34; name=&#34;__codelineno-7-253&#34; href=&#34;#__codelineno-7-253&#34;&gt;&lt;/a&gt; [ - DecompressTagged@../../src/codegen/arm64/macro-assembler-arm64.cc:3448&lt;/span&gt;&lt;span id=&#34;__span-7-254&#34;&gt;&lt;a id=&#34;__codelineno-7-254&#34; name=&#34;__codelineno-7-254&#34; href=&#34;#__codelineno-7-254&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c28 128 d28bd170 movz x16, #0x5e8b&lt;/span&gt;&lt;span id=&#34;__span-7-255&#34;&gt;&lt;a id=&#34;__codelineno-7-255&#34; name=&#34;__codelineno-7-255&#34; href=&#34;#__codelineno-7-255&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c2c 12c b8706821 ldr w1, [x1, x16]&lt;/span&gt;&lt;span id=&#34;__span-7-256&#34;&gt;&lt;a id=&#34;__codelineno-7-256&#34; name=&#34;__codelineno-7-256&#34; href=&#34;#__codelineno-7-256&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c30 130 8b010381 add x1, x28, x1&lt;/span&gt;&lt;span id=&#34;__span-7-257&#34;&gt;&lt;a id=&#34;__codelineno-7-257&#34; name=&#34;__codelineno-7-257&#34; href=&#34;#__codelineno-7-257&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-258&#34;&gt;&lt;a id=&#34;__codelineno-7-258&#34; name=&#34;__codelineno-7-258&#34; href=&#34;#__codelineno-7-258&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-259&#34;&gt;&lt;a id=&#34;__codelineno-7-259&#34; name=&#34;__codelineno-7-259&#34; href=&#34;#__codelineno-7-259&#34;&gt;&lt;/a&gt; [ Frame: NO_FRAME_TYPE&lt;/span&gt;&lt;span id=&#34;__span-7-260&#34;&gt;&lt;a id=&#34;__codelineno-7-260&#34; name=&#34;__codelineno-7-260&#34; href=&#34;#__codelineno-7-260&#34;&gt;&lt;/a&gt; [ Inlined Trampoline for call to AbortCSADcheck - CallBuiltin@../../src/codegen/arm64/macro-assembler-arm64.cc:2391&lt;/span&gt;&lt;span id=&#34;__span-7-261&#34;&gt;&lt;a id=&#34;__codelineno-7-261&#34; name=&#34;__codelineno-7-261&#34; href=&#34;#__codelineno-7-261&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c34 134 96a4e10b bl #-0x56c7bd4 (addr 0xc6ccf8de1060) ;; code: Builtin::AbortCSADcheck&lt;/span&gt;&lt;span id=&#34;__span-7-262&#34;&gt;&lt;a id=&#34;__codelineno-7-262&#34; name=&#34;__codelineno-7-262&#34; href=&#34;#__codelineno-7-262&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-263&#34;&gt;&lt;a id=&#34;__codelineno-7-263&#34; name=&#34;__codelineno-7-263&#34; href=&#34;#__codelineno-7-263&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-264&#34;&gt;&lt;a id=&#34;__codelineno-7-264&#34; name=&#34;__codelineno-7-264&#34; href=&#34;#__codelineno-7-264&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c38 138 d4200000 brk #0x0&lt;/span&gt;&lt;span id=&#34;__span-7-265&#34;&gt;&lt;a id=&#34;__codelineno-7-265&#34; name=&#34;__codelineno-7-265&#34; href=&#34;#__codelineno-7-265&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c3c 13c d4200000 brk #0x0&lt;/span&gt;&lt;span id=&#34;__span-7-266&#34;&gt;&lt;a id=&#34;__codelineno-7-266&#34; name=&#34;__codelineno-7-266&#34; href=&#34;#__codelineno-7-266&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c40 140 d503201f nop&lt;/span&gt;&lt;span id=&#34;__span-7-267&#34;&gt;&lt;a id=&#34;__codelineno-7-267&#34; name=&#34;__codelineno-7-267&#34; href=&#34;#__codelineno-7-267&#34;&gt;&lt;/a&gt; ;;; Safepoint table. - Emit@../../src/codegen/safepoint-table.cc:187&lt;/span&gt;&lt;span id=&#34;__span-7-268&#34;&gt;&lt;a id=&#34;__codelineno-7-268&#34; name=&#34;__codelineno-7-268&#34; href=&#34;#__codelineno-7-268&#34;&gt;&lt;/a&gt; ]&lt;/span&gt;&lt;span id=&#34;__span-7-269&#34;&gt;&lt;a id=&#34;__codelineno-7-269&#34; name=&#34;__codelineno-7-269&#34; href=&#34;#__codelineno-7-269&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-270&#34;&gt;&lt;a id=&#34;__codelineno-7-270&#34; name=&#34;__codelineno-7-270&#34; href=&#34;#__codelineno-7-270&#34;&gt;&lt;/a&gt;External Source positions:&lt;/span&gt;&lt;span id=&#34;__span-7-271&#34;&gt;&lt;a id=&#34;__codelineno-7-271&#34; name=&#34;__codelineno-7-271&#34; href=&#34;#__codelineno-7-271&#34;&gt;&lt;/a&gt; pc offset fileid line&lt;/span&gt;&lt;span id=&#34;__span-7-272&#34;&gt;&lt;a id=&#34;__codelineno-7-272&#34; name=&#34;__codelineno-7-272&#34; href=&#34;#__codelineno-7-272&#34;&gt;&lt;/a&gt; b4 380 72&lt;/span&gt;&lt;span id=&#34;__span-7-273&#34;&gt;&lt;a id=&#34;__codelineno-7-273&#34; name=&#34;__codelineno-7-273&#34; href=&#34;#__codelineno-7-273&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-274&#34;&gt;&lt;a id=&#34;__codelineno-7-274&#34; name=&#34;__codelineno-7-274&#34; href=&#34;#__codelineno-7-274&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-275&#34;&gt;&lt;a id=&#34;__codelineno-7-275&#34; name=&#34;__codelineno-7-275&#34; href=&#34;#__codelineno-7-275&#34;&gt;&lt;/a&gt;Safepoints (entries = 2, byte size = 12)&lt;/span&gt;&lt;span id=&#34;__span-7-276&#34;&gt;&lt;a id=&#34;__codelineno-7-276&#34; name=&#34;__codelineno-7-276&#34; href=&#34;#__codelineno-7-276&#34;&gt;&lt;/a&gt;0xc6ccfe4a8b7c 7c slots (sp-&amp;gt;fp): 01001000&lt;/span&gt;&lt;span id=&#34;__span-7-277&#34;&gt;&lt;a id=&#34;__codelineno-7-277&#34; name=&#34;__codelineno-7-277&#34; href=&#34;#__codelineno-7-277&#34;&gt;&lt;/a&gt;0xc6ccfe4a8ba8 a8 slots (sp-&amp;gt;fp): 00001000&lt;/span&gt;&lt;span id=&#34;__span-7-278&#34;&gt;&lt;a id=&#34;__codelineno-7-278&#34; name=&#34;__codelineno-7-278&#34; href=&#34;#__codelineno-7-278&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-279&#34;&gt;&lt;a id=&#34;__codelineno-7-279&#34; name=&#34;__codelineno-7-279&#34; href=&#34;#__codelineno-7-279&#34;&gt;&lt;/a&gt;RelocInfo (size = 3)&lt;/span&gt;&lt;span id=&#34;__span-7-280&#34;&gt;&lt;a id=&#34;__codelineno-7-280&#34; name=&#34;__codelineno-7-280&#34; href=&#34;#__codelineno-7-280&#34;&gt;&lt;/a&gt;0xc6ccfe4a8c34 code target (BUILTIN AbortCSADcheck) (0xc6ccf8de1060)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了简化代码，关闭了 control flow integrity 相关的代码生成，具体方法是运行 &lt;code&gt;gn args out/arm64.optdebug&lt;/code&gt;，追加一行 &lt;code&gt;v8_control_flow_integrity = false&lt;/code&gt;，再重新 &lt;code&gt;autoninja -C out/arm64.optdebug d8&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;以上是 debug 模式下生成的代码，多了很多检查；如果在 release 模式下，可以观察到更优的指令：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-8-1&#34;&gt;&lt;a id=&#34;__codelineno-8-1&#34; name=&#34;__codelineno-8-1&#34; href=&#34;#__codelineno-8-1&#34;&gt;&lt;/a&gt;kind = BYTECODE_HANDLER&lt;/span&gt;&lt;span id=&#34;__span-8-2&#34;&gt;&lt;a id=&#34;__codelineno-8-2&#34; name=&#34;__codelineno-8-2&#34; href=&#34;#__codelineno-8-2&#34;&gt;&lt;/a&gt;name = LdaSmi&lt;/span&gt;&lt;span id=&#34;__span-8-3&#34;&gt;&lt;a id=&#34;__codelineno-8-3&#34; name=&#34;__codelineno-8-3&#34; href=&#34;#__codelineno-8-3&#34;&gt;&lt;/a&gt;compiler = turbofan&lt;/span&gt;&lt;span id=&#34;__span-8-4&#34;&gt;&lt;a id=&#34;__codelineno-8-4&#34; name=&#34;__codelineno-8-4&#34; href=&#34;#__codelineno-8-4&#34;&gt;&lt;/a&gt;address = 0x31a000462bd&lt;/span&gt;&lt;span id=&#34;__span-8-5&#34;&gt;&lt;a id=&#34;__codelineno-8-5&#34; name=&#34;__codelineno-8-5&#34; href=&#34;#__codelineno-8-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-6&#34;&gt;&lt;a id=&#34;__codelineno-8-6&#34; name=&#34;__codelineno-8-6&#34; href=&#34;#__codelineno-8-6&#34;&gt;&lt;/a&gt;Instructions (size = 80)&lt;/span&gt;&lt;span id=&#34;__span-8-7&#34;&gt;&lt;a id=&#34;__codelineno-8-7&#34; name=&#34;__codelineno-8-7&#34; href=&#34;#__codelineno-8-7&#34;&gt;&lt;/a&gt;# 从这里开始实现 LdaSmi 的语义&lt;/span&gt;&lt;span id=&#34;__span-8-8&#34;&gt;&lt;a id=&#34;__codelineno-8-8&#34; name=&#34;__codelineno-8-8&#34; href=&#34;#__codelineno-8-8&#34;&gt;&lt;/a&gt;# 计算 x19 + 1 的值并写入 x1，得到 LdaSmi 的第二个字节相对 bytecode array 的偏移&lt;/span&gt;&lt;span id=&#34;__span-8-9&#34;&gt;&lt;a id=&#34;__codelineno-8-9&#34; name=&#34;__codelineno-8-9&#34; href=&#34;#__codelineno-8-9&#34;&gt;&lt;/a&gt;0xc903f8193400 0 91000661 add x1, x19, #0x1 (1)&lt;/span&gt;&lt;span id=&#34;__span-8-10&#34;&gt;&lt;a id=&#34;__codelineno-8-10&#34; name=&#34;__codelineno-8-10&#34; href=&#34;#__codelineno-8-10&#34;&gt;&lt;/a&gt;# 从 x20 + x1 地址读取 LdaSmi 的第二个字节到 x1，也就是要加载到 `accumulator` 的值，&lt;/span&gt;&lt;span id=&#34;__span-8-11&#34;&gt;&lt;a id=&#34;__codelineno-8-11&#34; name=&#34;__codelineno-8-11&#34; href=&#34;#__codelineno-8-11&#34;&gt;&lt;/a&gt;# 之后 x1 的值会写入到 x0，也就是 `accumulator` 对应的寄存器&lt;/span&gt;&lt;span id=&#34;__span-8-12&#34;&gt;&lt;a id=&#34;__codelineno-8-12&#34; name=&#34;__codelineno-8-12&#34; href=&#34;#__codelineno-8-12&#34;&gt;&lt;/a&gt;0xc903f8193404 4 38e16a81 ldrsb w1, [x20, x1]&lt;/span&gt;&lt;span id=&#34;__span-8-13&#34;&gt;&lt;a id=&#34;__codelineno-8-13&#34; name=&#34;__codelineno-8-13&#34; href=&#34;#__codelineno-8-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-14&#34;&gt;&lt;a id=&#34;__codelineno-8-14&#34; name=&#34;__codelineno-8-14&#34; href=&#34;#__codelineno-8-14&#34;&gt;&lt;/a&gt;# Dispatch: 找到下一个 Opcode 对应的代码的入口，然后跳转过去&lt;/span&gt;&lt;span id=&#34;__span-8-15&#34;&gt;&lt;a id=&#34;__codelineno-8-15&#34; name=&#34;__codelineno-8-15&#34; href=&#34;#__codelineno-8-15&#34;&gt;&lt;/a&gt;# x19 = x19 + 2，就是 bytecode offset 前进两个字节，指向下一个字节码&lt;/span&gt;&lt;span id=&#34;__span-8-16&#34;&gt;&lt;a id=&#34;__codelineno-8-16&#34; name=&#34;__codelineno-8-16&#34; href=&#34;#__codelineno-8-16&#34;&gt;&lt;/a&gt;0xc903f8193408 8 91000a73 add x19, x19, #0x2 (2)&lt;/span&gt;&lt;span id=&#34;__span-8-17&#34;&gt;&lt;a id=&#34;__codelineno-8-17&#34; name=&#34;__codelineno-8-17&#34; href=&#34;#__codelineno-8-17&#34;&gt;&lt;/a&gt;# x20 是 bytecode array，从 bytecode array 读取下一个字节码的第一个字节到 x3 寄存器&lt;/span&gt;&lt;span id=&#34;__span-8-18&#34;&gt;&lt;a id=&#34;__codelineno-8-18&#34; name=&#34;__codelineno-8-18&#34; href=&#34;#__codelineno-8-18&#34;&gt;&lt;/a&gt;0xc903f819340c c 38736a83 ldrb w3, [x20, x19]&lt;/span&gt;&lt;span id=&#34;__span-8-19&#34;&gt;&lt;a id=&#34;__codelineno-8-19&#34; name=&#34;__codelineno-8-19&#34; href=&#34;#__codelineno-8-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-20&#34;&gt;&lt;a id=&#34;__codelineno-8-20&#34; name=&#34;__codelineno-8-20&#34; href=&#34;#__codelineno-8-20&#34;&gt;&lt;/a&gt;# 计算 x4 = x3 * 8，也就是 dispatch table 中下一个字节码对应的代码地址的字节偏移&lt;/span&gt;&lt;span id=&#34;__span-8-21&#34;&gt;&lt;a id=&#34;__codelineno-8-21&#34; name=&#34;__codelineno-8-21&#34; href=&#34;#__codelineno-8-21&#34;&gt;&lt;/a&gt;0xc903f8193410 10 d37df064 lsl x4, x3, #3&lt;/span&gt;&lt;span id=&#34;__span-8-22&#34;&gt;&lt;a id=&#34;__codelineno-8-22&#34; name=&#34;__codelineno-8-22&#34; href=&#34;#__codelineno-8-22&#34;&gt;&lt;/a&gt;# 把之前 LdaSmi 计算得到的 x1 寄存器写到 `accumulator` 即 x0 寄存器当中&lt;/span&gt;&lt;span id=&#34;__span-8-23&#34;&gt;&lt;a id=&#34;__codelineno-8-23&#34; name=&#34;__codelineno-8-23&#34; href=&#34;#__codelineno-8-23&#34;&gt;&lt;/a&gt;# 这里 x0 = 2 * x1，是因为 v8 用最低位表示这是一个 Smi（用 0 表示）还是一个指针（用 1 表示）&lt;/span&gt;&lt;span id=&#34;__span-8-24&#34;&gt;&lt;a id=&#34;__codelineno-8-24&#34; name=&#34;__codelineno-8-24&#34; href=&#34;#__codelineno-8-24&#34;&gt;&lt;/a&gt;0xc903f8193414 14 0b010020 add w0, w1, w1&lt;/span&gt;&lt;span id=&#34;__span-8-25&#34;&gt;&lt;a id=&#34;__codelineno-8-25&#34; name=&#34;__codelineno-8-25&#34; href=&#34;#__codelineno-8-25&#34;&gt;&lt;/a&gt;# 如果 x3 寄存器大于或等于 187，说明这个字节码可能是 Short Star 字节码，就跳转到后面的 0xc903f819342c 地址&lt;/span&gt;&lt;span id=&#34;__span-8-26&#34;&gt;&lt;a id=&#34;__codelineno-8-26&#34; name=&#34;__codelineno-8-26&#34; href=&#34;#__codelineno-8-26&#34;&gt;&lt;/a&gt;0xc903f8193418 18 7102ec7f cmp w3, #0xbb (187)&lt;/span&gt;&lt;span id=&#34;__span-8-27&#34;&gt;&lt;a id=&#34;__codelineno-8-27&#34; name=&#34;__codelineno-8-27&#34; href=&#34;#__codelineno-8-27&#34;&gt;&lt;/a&gt;0xc903f819341c 1c 54000082 b.hs #+0x10 (addr 0xc903f819342c)&lt;/span&gt;&lt;span id=&#34;__span-8-28&#34;&gt;&lt;a id=&#34;__codelineno-8-28&#34; name=&#34;__codelineno-8-28&#34; href=&#34;#__codelineno-8-28&#34;&gt;&lt;/a&gt;# 如果没有跳转，此时 x3 寄存器小于 187&lt;/span&gt;&lt;span id=&#34;__span-8-29&#34;&gt;&lt;a id=&#34;__codelineno-8-29&#34; name=&#34;__codelineno-8-29&#34; href=&#34;#__codelineno-8-29&#34;&gt;&lt;/a&gt;# 从 dispatch table，以 x3 为下标（x4 = x3 * 8），读取下一个字节码对应的代码的地址&lt;/span&gt;&lt;span id=&#34;__span-8-30&#34;&gt;&lt;a id=&#34;__codelineno-8-30&#34; name=&#34;__codelineno-8-30&#34; href=&#34;#__codelineno-8-30&#34;&gt;&lt;/a&gt;0xc903f8193420 20 f8646aa2 ldr x2, [x21, x4]&lt;/span&gt;&lt;span id=&#34;__span-8-31&#34;&gt;&lt;a id=&#34;__codelineno-8-31&#34; name=&#34;__codelineno-8-31&#34; href=&#34;#__codelineno-8-31&#34;&gt;&lt;/a&gt;# 跳转到下一个字节码对应的代码的地址&lt;/span&gt;&lt;span id=&#34;__span-8-32&#34;&gt;&lt;a id=&#34;__codelineno-8-32&#34; name=&#34;__codelineno-8-32&#34; href=&#34;#__codelineno-8-32&#34;&gt;&lt;/a&gt;0xc903f8193424 24 aa0203f1 mov x17, x2&lt;/span&gt;&lt;span id=&#34;__span-8-33&#34;&gt;&lt;a id=&#34;__codelineno-8-33&#34; name=&#34;__codelineno-8-33&#34; href=&#34;#__codelineno-8-33&#34;&gt;&lt;/a&gt;0xc903f8193428 28 d61f0220 br x17&lt;/span&gt;&lt;span id=&#34;__span-8-34&#34;&gt;&lt;a id=&#34;__codelineno-8-34&#34; name=&#34;__codelineno-8-34&#34; href=&#34;#__codelineno-8-34&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-35&#34;&gt;&lt;a id=&#34;__codelineno-8-35&#34; name=&#34;__codelineno-8-35&#34; href=&#34;#__codelineno-8-35&#34;&gt;&lt;/a&gt;# 实现 Short Star 字节码&lt;/span&gt;&lt;span id=&#34;__span-8-36&#34;&gt;&lt;a id=&#34;__codelineno-8-36&#34; name=&#34;__codelineno-8-36&#34; href=&#34;#__codelineno-8-36&#34;&gt;&lt;/a&gt;# 计算出要写入的 r0-r15 寄存器相对 fp 的偏移量 x3 * 8 - 1672&lt;/span&gt;&lt;span id=&#34;__span-8-37&#34;&gt;&lt;a id=&#34;__codelineno-8-37&#34; name=&#34;__codelineno-8-37&#34; href=&#34;#__codelineno-8-37&#34;&gt;&lt;/a&gt;# 这个偏移量的计算公式在前面推导过，此时 x4 等于 x3 * 8&lt;/span&gt;&lt;span id=&#34;__span-8-38&#34;&gt;&lt;a id=&#34;__codelineno-8-38&#34; name=&#34;__codelineno-8-38&#34; href=&#34;#__codelineno-8-38&#34;&gt;&lt;/a&gt;0xc903f819342c 2c d11a2081 sub x1, x4, #0x688 (1672)&lt;/span&gt;&lt;span id=&#34;__span-8-39&#34;&gt;&lt;a id=&#34;__codelineno-8-39&#34; name=&#34;__codelineno-8-39&#34; href=&#34;#__codelineno-8-39&#34;&gt;&lt;/a&gt;0xc903f8193430 30 aa1d03e3 mov x3, fp&lt;/span&gt;&lt;span id=&#34;__span-8-40&#34;&gt;&lt;a id=&#34;__codelineno-8-40&#34; name=&#34;__codelineno-8-40&#34; href=&#34;#__codelineno-8-40&#34;&gt;&lt;/a&gt;# 把 `accumulator` 写入到相对 fp 的对应位置&lt;/span&gt;&lt;span id=&#34;__span-8-41&#34;&gt;&lt;a id=&#34;__codelineno-8-41&#34; name=&#34;__codelineno-8-41&#34; href=&#34;#__codelineno-8-41&#34;&gt;&lt;/a&gt;0xc903f8193434 34 f8216860 str x0, [x3, x1]&lt;/span&gt;&lt;span id=&#34;__span-8-42&#34;&gt;&lt;a id=&#34;__codelineno-8-42&#34; name=&#34;__codelineno-8-42&#34; href=&#34;#__codelineno-8-42&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-8-43&#34;&gt;&lt;a id=&#34;__codelineno-8-43&#34; name=&#34;__codelineno-8-43&#34; href=&#34;#__codelineno-8-43&#34;&gt;&lt;/a&gt;# 下面就是 Dispatch 逻辑，只不过这次是执行完 Short Star 字节码后的 Dispatch&lt;/span&gt;&lt;span id=&#34;__span-8-44&#34;&gt;&lt;a id=&#34;__codelineno-8-44&#34; name=&#34;__codelineno-8-44&#34; href=&#34;#__codelineno-8-44&#34;&gt;&lt;/a&gt;# x19 = x19 + 1，就是 bytecode offset 前进一个字节，指向下一个字节码&lt;/span&gt;&lt;span id=&#34;__span-8-45&#34;&gt;&lt;a id=&#34;__codelineno-8-45&#34; name=&#34;__codelineno-8-45&#34; href=&#34;#__codelineno-8-45&#34;&gt;&lt;/a&gt;0xc903f8193438 38 91000673 add x19, x19, #0x1 (1)&lt;/span&gt;&lt;span id=&#34;__span-8-46&#34;&gt;&lt;a id=&#34;__codelineno-8-46&#34; name=&#34;__codelineno-8-46&#34; href=&#34;#__codelineno-8-46&#34;&gt;&lt;/a&gt;# x20 是 bytecode array，从 bytecode array 读取下一个字节码的第一个字节到 x1 寄存器&lt;/span&gt;&lt;span id=&#34;__span-8-47&#34;&gt;&lt;a id=&#34;__codelineno-8-47&#34; name=&#34;__codelineno-8-47&#34; href=&#34;#__codelineno-8-47&#34;&gt;&lt;/a&gt;0xc903f819343c 3c 38736a81 ldrb w1, [x20, x19]&lt;/span&gt;&lt;span id=&#34;__span-8-48&#34;&gt;&lt;a id=&#34;__codelineno-8-48&#34; name=&#34;__codelineno-8-48&#34; href=&#34;#__codelineno-8-48&#34;&gt;&lt;/a&gt;# 从 dispatch table，以 x1 为下标，读取下一个字节码对应的代码的地址&lt;/span&gt;&lt;span id=&#34;__span-8-49&#34;&gt;&lt;a id=&#34;__codelineno-8-49&#34; name=&#34;__codelineno-8-49&#34; href=&#34;#__codelineno-8-49&#34;&gt;&lt;/a&gt;0xc903f8193440 40 f8617aa2 ldr x2, [x21, x1, lsl #3]&lt;/span&gt;&lt;span id=&#34;__span-8-50&#34;&gt;&lt;a id=&#34;__codelineno-8-50&#34; name=&#34;__codelineno-8-50&#34; href=&#34;#__codelineno-8-50&#34;&gt;&lt;/a&gt;# 跳转到下一个字节码对应的代码的地址&lt;/span&gt;&lt;span id=&#34;__span-8-51&#34;&gt;&lt;a id=&#34;__codelineno-8-51&#34; name=&#34;__codelineno-8-51&#34; href=&#34;#__codelineno-8-51&#34;&gt;&lt;/a&gt;0xc903f8193444 44 aa0203f1 mov x17, x2&lt;/span&gt;&lt;span id=&#34;__span-8-52&#34;&gt;&lt;a id=&#34;__codelineno-8-52&#34; name=&#34;__codelineno-8-52&#34; href=&#34;#__codelineno-8-52&#34;&gt;&lt;/a&gt;0xc903f8193448 48 d61f0220 br x17&lt;/span&gt;&lt;span id=&#34;__span-8-53&#34;&gt;&lt;a id=&#34;__codelineno-8-53&#34; name=&#34;__codelineno-8-53&#34; href=&#34;#__codelineno-8-53&#34;&gt;&lt;/a&gt;0xc903f819344c 4c d503201f nop&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可见 release 模式下的代码还是简单了许多，保证了性能。&lt;/p&gt;&lt;p&gt;有的 Opcode 后面不会紧接着出现 Short Star，此时 Dispatch 会减少一次特判，代码更加简单，以 &lt;code&gt;Ldar&lt;/code&gt; 为例：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-9-1&#34;&gt;&lt;a id=&#34;__codelineno-9-1&#34; name=&#34;__codelineno-9-1&#34; href=&#34;#__codelineno-9-1&#34;&gt;&lt;/a&gt;kind = BYTECODE_HANDLER&lt;/span&gt;&lt;span id=&#34;__span-9-2&#34;&gt;&lt;a id=&#34;__codelineno-9-2&#34; name=&#34;__codelineno-9-2&#34; href=&#34;#__codelineno-9-2&#34;&gt;&lt;/a&gt;name = Ldar&lt;/span&gt;&lt;span id=&#34;__span-9-3&#34;&gt;&lt;a id=&#34;__codelineno-9-3&#34; name=&#34;__codelineno-9-3&#34; href=&#34;#__codelineno-9-3&#34;&gt;&lt;/a&gt;compiler = turbofan&lt;/span&gt;&lt;span id=&#34;__span-9-4&#34;&gt;&lt;a id=&#34;__codelineno-9-4&#34; name=&#34;__codelineno-9-4&#34; href=&#34;#__codelineno-9-4&#34;&gt;&lt;/a&gt;address = 0x31a00046245&lt;/span&gt;&lt;span id=&#34;__span-9-5&#34;&gt;&lt;a id=&#34;__codelineno-9-5&#34; name=&#34;__codelineno-9-5&#34; href=&#34;#__codelineno-9-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-6&#34;&gt;&lt;a id=&#34;__codelineno-9-6&#34; name=&#34;__codelineno-9-6&#34; href=&#34;#__codelineno-9-6&#34;&gt;&lt;/a&gt;Instructions (size = 44)&lt;/span&gt;&lt;span id=&#34;__span-9-7&#34;&gt;&lt;a id=&#34;__codelineno-9-7&#34; name=&#34;__codelineno-9-7&#34; href=&#34;#__codelineno-9-7&#34;&gt;&lt;/a&gt;# Ldar 的语义是，把指定参数寄存器的值写入到 `accumulator` 当中&lt;/span&gt;&lt;span id=&#34;__span-9-8&#34;&gt;&lt;a id=&#34;__codelineno-9-8&#34; name=&#34;__codelineno-9-8&#34; href=&#34;#__codelineno-9-8&#34;&gt;&lt;/a&gt;# 参数寄存器的位置记录在 Ldar 字节码的第二个字节中&lt;/span&gt;&lt;span id=&#34;__span-9-9&#34;&gt;&lt;a id=&#34;__codelineno-9-9&#34; name=&#34;__codelineno-9-9&#34; href=&#34;#__codelineno-9-9&#34;&gt;&lt;/a&gt;# 如：0b 04 对应 Ldar a1&lt;/span&gt;&lt;span id=&#34;__span-9-10&#34;&gt;&lt;a id=&#34;__codelineno-9-10&#34; name=&#34;__codelineno-9-10&#34; href=&#34;#__codelineno-9-10&#34;&gt;&lt;/a&gt;# 计算 x19 + 1 的值并写入 x1，得到 Ldar 的第二个字节相对 bytecode array 的偏移&lt;/span&gt;&lt;span id=&#34;__span-9-11&#34;&gt;&lt;a id=&#34;__codelineno-9-11&#34; name=&#34;__codelineno-9-11&#34; href=&#34;#__codelineno-9-11&#34;&gt;&lt;/a&gt;0xc903f8193320 0 91000661 add x1, x19, #0x1 (1)&lt;/span&gt;&lt;span id=&#34;__span-9-12&#34;&gt;&lt;a id=&#34;__codelineno-9-12&#34; name=&#34;__codelineno-9-12&#34; href=&#34;#__codelineno-9-12&#34;&gt;&lt;/a&gt;# 从 x20 + x1 地址读取 Ldar 的第二个字节到 x1，也就是参数寄存器相对 fp 的下标&lt;/span&gt;&lt;span id=&#34;__span-9-13&#34;&gt;&lt;a id=&#34;__codelineno-9-13&#34; name=&#34;__codelineno-9-13&#34; href=&#34;#__codelineno-9-13&#34;&gt;&lt;/a&gt;0xc903f8193324 4 38a16a81 ldrsb x1, [x20, x1]&lt;/span&gt;&lt;span id=&#34;__span-9-14&#34;&gt;&lt;a id=&#34;__codelineno-9-14&#34; name=&#34;__codelineno-9-14&#34; href=&#34;#__codelineno-9-14&#34;&gt;&lt;/a&gt;# 相对 fp 以 x1 为下标，读取参数寄存器的值到 x1 寄存器&lt;/span&gt;&lt;span id=&#34;__span-9-15&#34;&gt;&lt;a id=&#34;__codelineno-9-15&#34; name=&#34;__codelineno-9-15&#34; href=&#34;#__codelineno-9-15&#34;&gt;&lt;/a&gt;0xc903f8193328 8 aa1d03e3 mov x3, fp&lt;/span&gt;&lt;span id=&#34;__span-9-16&#34;&gt;&lt;a id=&#34;__codelineno-9-16&#34; name=&#34;__codelineno-9-16&#34; href=&#34;#__codelineno-9-16&#34;&gt;&lt;/a&gt;0xc903f819332c c f8617861 ldr x1, [x3, x1, lsl #3]&lt;/span&gt;&lt;span id=&#34;__span-9-17&#34;&gt;&lt;a id=&#34;__codelineno-9-17&#34; name=&#34;__codelineno-9-17&#34; href=&#34;#__codelineno-9-17&#34;&gt;&lt;/a&gt;# Dispatch: 找到下一个 Opcode 对应的代码的入口，然后跳转过去&lt;/span&gt;&lt;span id=&#34;__span-9-18&#34;&gt;&lt;a id=&#34;__codelineno-9-18&#34; name=&#34;__codelineno-9-18&#34; href=&#34;#__codelineno-9-18&#34;&gt;&lt;/a&gt;# x19 = x19 + 2，就是 bytecode offset 前进两个字节，指向下一个字节码&lt;/span&gt;&lt;span id=&#34;__span-9-19&#34;&gt;&lt;a id=&#34;__codelineno-9-19&#34; name=&#34;__codelineno-9-19&#34; href=&#34;#__codelineno-9-19&#34;&gt;&lt;/a&gt;0xc903f8193330 10 91000a73 add x19, x19, #0x2 (2)&lt;/span&gt;&lt;span id=&#34;__span-9-20&#34;&gt;&lt;a id=&#34;__codelineno-9-20&#34; name=&#34;__codelineno-9-20&#34; href=&#34;#__codelineno-9-20&#34;&gt;&lt;/a&gt;# x20 是 bytecode array，从 bytecode array 读取下一个字节码的第一个字节到 x3 寄存器&lt;/span&gt;&lt;span id=&#34;__span-9-21&#34;&gt;&lt;a id=&#34;__codelineno-9-21&#34; name=&#34;__codelineno-9-21&#34; href=&#34;#__codelineno-9-21&#34;&gt;&lt;/a&gt;0xc903f8193334 14 38736a83 ldrb w3, [x20, x19]&lt;/span&gt;&lt;span id=&#34;__span-9-22&#34;&gt;&lt;a id=&#34;__codelineno-9-22&#34; name=&#34;__codelineno-9-22&#34; href=&#34;#__codelineno-9-22&#34;&gt;&lt;/a&gt;# 从 dispatch table，以 x3 为下标，读取下一个字节码对应的代码的地址&lt;/span&gt;&lt;span id=&#34;__span-9-23&#34;&gt;&lt;a id=&#34;__codelineno-9-23&#34; name=&#34;__codelineno-9-23&#34; href=&#34;#__codelineno-9-23&#34;&gt;&lt;/a&gt;0xc903f8193338 18 f8637aa2 ldr x2, [x21, x3, lsl #3]&lt;/span&gt;&lt;span id=&#34;__span-9-24&#34;&gt;&lt;a id=&#34;__codelineno-9-24&#34; name=&#34;__codelineno-9-24&#34; href=&#34;#__codelineno-9-24&#34;&gt;&lt;/a&gt;# 把参数寄存器的值写入到 `accumulator` 也就是 x0 当中&lt;/span&gt;&lt;span id=&#34;__span-9-25&#34;&gt;&lt;a id=&#34;__codelineno-9-25&#34; name=&#34;__codelineno-9-25&#34; href=&#34;#__codelineno-9-25&#34;&gt;&lt;/a&gt;0xc903f819333c 1c aa0103e0 mov x0, x1&lt;/span&gt;&lt;span id=&#34;__span-9-26&#34;&gt;&lt;a id=&#34;__codelineno-9-26&#34; name=&#34;__codelineno-9-26&#34; href=&#34;#__codelineno-9-26&#34;&gt;&lt;/a&gt;# 跳转到下一个字节码对应的代码的地址&lt;/span&gt;&lt;span id=&#34;__span-9-27&#34;&gt;&lt;a id=&#34;__codelineno-9-27&#34; name=&#34;__codelineno-9-27&#34; href=&#34;#__codelineno-9-27&#34;&gt;&lt;/a&gt;0xc903f8193340 20 aa0203f1 mov x17, x2&lt;/span&gt;&lt;span id=&#34;__span-9-28&#34;&gt;&lt;a id=&#34;__codelineno-9-28&#34; name=&#34;__codelineno-9-28&#34; href=&#34;#__codelineno-9-28&#34;&gt;&lt;/a&gt;0xc903f8193344 24 d61f0220 br x17&lt;/span&gt;&lt;span id=&#34;__span-9-29&#34;&gt;&lt;a id=&#34;__codelineno-9-29&#34; name=&#34;__codelineno-9-29&#34; href=&#34;#__codelineno-9-29&#34;&gt;&lt;/a&gt;0xc903f8193348 28 d503201f nop&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;小结一下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ignition 给每种可能的 Opcode 类型生成一段代码&lt;/li&gt;&lt;li&gt;这段代码会进行一些检查（仅 Debug 模式下），然后在汇编里实现这个字节码的功能&lt;/li&gt;&lt;li&gt;执行完字节码后，进入 Dispatch 逻辑，寻找下一个字节码对应的代码的地址&lt;/li&gt;&lt;li&gt;特别地，如果下一个字节码是 Short Star (Star0-Star15)，因为它比较简单和常见，就直接执行它，执行完再重新寻找再下一个字节码对应的代码的地址&lt;/li&gt;&lt;li&gt;这些 Opcode 对应的代码会在 v8 编译过程中通过 &lt;code&gt;mksnapshot&lt;/code&gt; 命令一次性生成好，运行时直接复用，不用重新生成&lt;/li&gt;&lt;li&gt;V8 的值的最低位标识了它的类型：0 表示 Smi，1 表示指针，因此在存储 Smi 的时候，寄存器里保存的是实际值的两倍，这样最低位就是 0&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;a class=&#34;headerlink&#34; href=&#34;#参考&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://v8.dev/blog/ignition-interpreter&#34;&gt;Firing up the Ignition interpreter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/73337772/how-to-get-node-js-to-trace-ignition-within-v8-with-trace-ignition&#34;&gt;How to get Node.js to trace ignition within v8? with --trace-ignition&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://dynamic-languages-symposium.org/dls-16/program/media/McIlroy_2016_IgnitionJumpStartingAnInterpreterForV8_Dls.pdf&#34;&gt;Ignition: Jump-starting an Interpreter for V8&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/11T2CRex9hXxoJwbYqVQ32yIPMh0uouUZLdyrtmMoL44&#34;&gt;Ignition: V8 Interpreter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://doar-e.github.io/blog/2019/01/28/introduction-to-turbofan/&#34;&gt;Introduction to TurboFan&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.alibabacloud.com/blog/javascript-bytecode-v8-ignition-instructions_599188&#34;&gt;JavaScript Bytecode – v8 Ignition Instructions&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://medium.com/dailyjs/understanding-v8s-bytecode-317d46c94775&#34;&gt;Understanding V8’s Bytecode&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;Documentation&#34;&gt;V8 Documentation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://v8.dev/docs/ignition&#34;&gt;V8 Ignition&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://v8.dev/docs/turbofan&#34;&gt;V8 TurboFan&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://v8.github.io/tools/v13.4/turbolizer/index.html&#34;&gt;V8 Turbolizer v13.4&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://benediktmeurer.de/2017/03/01/v8-behind-the-scenes-february-edition&#34;&gt;V8: Behind the Scenes (February Edition feat. A tale of TurboFan)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/danbev/learning-v8&#34;&gt;danbev/learning-v8&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://medium.com/fhinkel/v8-internals-how-small-is-a-small-integer-e0badc18b6da&#34;&gt;V8 Internals: How Small is a “Small Integer?”&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/software/2025/03/01/v8-ignition-internals/</link> <pubDate>Sat, 01 Mar 2025 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2025/03/01/v8-ignition-internals/</guid> </item> <item> <title>导出飞书日历为 iCalendar 格式</title> <category>calendar</category> <category>feishu</category> <category>software</category> <description>&lt;h1 id=&#34;导出飞书日历为-icalendar-格式&#34;&gt;导出飞书日历为 iCalendar 格式&lt;a class=&#34;headerlink&#34; href=&#34;#导出飞书日历为-icalendar-格式&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;之前用了一段时间飞书日历，想要把日历里的事件导出来备份，但是发现飞书自己的导出功能太弱，因此参考 &lt;a href=&#34;https://xuanwo.io/reports/2023-35/&#34;&gt;从飞书导出日历到 Fastmail - Xuanwo&#39;s Blog&lt;/a&gt; 进行了导出的尝试。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;导出方法&#34;&gt;导出方法&lt;a class=&#34;headerlink&#34; href=&#34;#导出方法&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;上面提到的文章，是通过 CalDAV 的方式进行的日历同步。因此我第一步也是配置飞书的 CalDAV 服务：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;打开飞书客户端&lt;/li&gt;&lt;li&gt;点击设置&lt;/li&gt;&lt;li&gt;点击日历&lt;/li&gt;&lt;li&gt;设置 CalDAV 同步&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;按照界面所示，配置 CalDAV 同步，就可以得到用于 CalDAV 的域名、用户名和密码了。如果只是要订阅，那么到这一步，就可以直接用 CalDAV 客户端来同步了。但我想进一步得到 iCalendar 格式的日历文件。&lt;/p&gt;&lt;p&gt;于是我参考了上述文章的评论区的做法：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;@jason5ng32 jason5ng32&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;Oct 28, 2024&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;分享一下我的方法：&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-6&#34;&gt;&lt;a id=&#34;__codelineno-0-6&#34; name=&#34;__codelineno-0-6&#34; href=&#34;#__codelineno-0-6&#34;&gt;&lt;/a&gt;1. 在服务器上安装 vdirsyncer ，这个工具可以同步 CalDAV 的内容，在同步设置里，不需要先找到 UUID，可以直接用飞书提供的 URL。&lt;/span&gt;&lt;span id=&#34;__span-0-7&#34;&gt;&lt;a id=&#34;__codelineno-0-7&#34; name=&#34;__codelineno-0-7&#34; href=&#34;#__codelineno-0-7&#34;&gt;&lt;/a&gt;2. 写一个 Python 脚本，将 vdirsyncer 同步的内容合并成单一的 ics 文件。&lt;/span&gt;&lt;span id=&#34;__span-0-8&#34;&gt;&lt;a id=&#34;__codelineno-0-8&#34; name=&#34;__codelineno-0-8&#34; href=&#34;#__codelineno-0-8&#34;&gt;&lt;/a&gt;3. 将 ics 文件放到一个地址稍微复杂一点的 http 目录里，可以外部访问。&lt;/span&gt;&lt;span id=&#34;__span-0-9&#34;&gt;&lt;a id=&#34;__codelineno-0-9&#34; name=&#34;__codelineno-0-9&#34; href=&#34;#__codelineno-0-9&#34;&gt;&lt;/a&gt;4. 写一个 run.sh 脚本，通过 crontab 每 10 分钟执行一次 vdirsyncer 同步和日历文件合成。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也就是说，用 vdirsyncer 把日历同步到本地，再转换为 iCalendar 格式的日历文件。参考 &lt;a href=&#34;https://vdirsyncer.pimutils.org/en/stable/installation.html#installation&#34;&gt;vdirsyncer&lt;/a&gt; 文档，这件事情并不复杂：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;按照 vdirsyncer: &lt;code&gt;pip3 install vdirsyncer&lt;/code&gt;&lt;/li&gt;&lt;li&gt;编辑 &lt;code&gt;~/.vdirsyncer/config&lt;/code&gt;，填入在飞书处得到的用户密码： &lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;[general]&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;status_path = &amp;quot;~/.vdirsyncer/status/&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt;[pair my_contacts]&lt;/span&gt;&lt;span id=&#34;__span-1-5&#34;&gt;&lt;a id=&#34;__codelineno-1-5&#34; name=&#34;__codelineno-1-5&#34; href=&#34;#__codelineno-1-5&#34;&gt;&lt;/a&gt;a = &amp;quot;my_contacts_local&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-1-6&#34;&gt;&lt;a id=&#34;__codelineno-1-6&#34; name=&#34;__codelineno-1-6&#34; href=&#34;#__codelineno-1-6&#34;&gt;&lt;/a&gt;b = &amp;quot;my_contacts_remote&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-1-7&#34;&gt;&lt;a id=&#34;__codelineno-1-7&#34; name=&#34;__codelineno-1-7&#34; href=&#34;#__codelineno-1-7&#34;&gt;&lt;/a&gt;collections = [&amp;quot;from a&amp;quot;, &amp;quot;from b&amp;quot;]&lt;/span&gt;&lt;span id=&#34;__span-1-8&#34;&gt;&lt;a id=&#34;__codelineno-1-8&#34; name=&#34;__codelineno-1-8&#34; href=&#34;#__codelineno-1-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-9&#34;&gt;&lt;a id=&#34;__codelineno-1-9&#34; name=&#34;__codelineno-1-9&#34; href=&#34;#__codelineno-1-9&#34;&gt;&lt;/a&gt;[storage my_contacts_local]&lt;/span&gt;&lt;span id=&#34;__span-1-10&#34;&gt;&lt;a id=&#34;__codelineno-1-10&#34; name=&#34;__codelineno-1-10&#34; href=&#34;#__codelineno-1-10&#34;&gt;&lt;/a&gt;type = &amp;quot;filesystem&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-1-11&#34;&gt;&lt;a id=&#34;__codelineno-1-11&#34; name=&#34;__codelineno-1-11&#34; href=&#34;#__codelineno-1-11&#34;&gt;&lt;/a&gt;path = &amp;quot;~/.contacts/&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-1-12&#34;&gt;&lt;a id=&#34;__codelineno-1-12&#34; name=&#34;__codelineno-1-12&#34; href=&#34;#__codelineno-1-12&#34;&gt;&lt;/a&gt;fileext = &amp;quot;.ics&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-1-13&#34;&gt;&lt;a id=&#34;__codelineno-1-13&#34; name=&#34;__codelineno-1-13&#34; href=&#34;#__codelineno-1-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-14&#34;&gt;&lt;a id=&#34;__codelineno-1-14&#34; name=&#34;__codelineno-1-14&#34; href=&#34;#__codelineno-1-14&#34;&gt;&lt;/a&gt;[storage my_contacts_remote]&lt;/span&gt;&lt;span id=&#34;__span-1-15&#34;&gt;&lt;a id=&#34;__codelineno-1-15&#34; name=&#34;__codelineno-1-15&#34; href=&#34;#__codelineno-1-15&#34;&gt;&lt;/a&gt;type = &amp;quot;caldav&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-1-16&#34;&gt;&lt;a id=&#34;__codelineno-1-16&#34; name=&#34;__codelineno-1-16&#34; href=&#34;#__codelineno-1-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-17&#34;&gt;&lt;a id=&#34;__codelineno-1-17&#34; name=&#34;__codelineno-1-17&#34; href=&#34;#__codelineno-1-17&#34;&gt;&lt;/a&gt;url = &amp;quot;https://caldav.feishu.cn&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-1-18&#34;&gt;&lt;a id=&#34;__codelineno-1-18&#34; name=&#34;__codelineno-1-18&#34; href=&#34;#__codelineno-1-18&#34;&gt;&lt;/a&gt;username = &amp;quot;REDACTED&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-1-19&#34;&gt;&lt;a id=&#34;__codelineno-1-19&#34; name=&#34;__codelineno-1-19&#34; href=&#34;#__codelineno-1-19&#34;&gt;&lt;/a&gt;password = &amp;quot;REDACTED&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;配置好以后，进行同步：&lt;code&gt;vdirsyncer discover &amp;amp;&amp;amp; vdirsyncer sync&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;此时在 &lt;code&gt;~/.contacts&lt;/code&gt; 目录下，已经能看到很多个 ics 文件了，每个 ics 文件对应了日历中的一个事件。实际上，这些文件就已经是 iCalendar 格式了，只不过每个文件只有一个事件。&lt;/p&gt;&lt;p&gt;为了让一个 &lt;code&gt;.ics&lt;/code&gt; 文件包括日历的所有事件，写了一个脚本，实际上就是处理每个 ics 文件，去掉每个文件开头结尾的 &lt;code&gt;BEGIN:VCALENDAR&lt;/code&gt; 和 &lt;code&gt;END:VCALENDAR&lt;/code&gt;，把中间的部分拼起来，最后再加上开头结尾：&lt;/p&gt;&lt;div class=&#34;language-python highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;all_lines&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;all_lines&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;BEGIN:VCALENDAR&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-5&#34;&gt;&lt;a id=&#34;__codelineno-2-5&#34; name=&#34;__codelineno-2-5&#34; href=&#34;#__codelineno-2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-6&#34;&gt;&lt;a id=&#34;__codelineno-2-6&#34; name=&#34;__codelineno-2-6&#34; href=&#34;#__codelineno-2-6&#34;&gt;&lt;/a&gt; &lt;span class=&#34;n&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-7&#34;&gt;&lt;a id=&#34;__codelineno-2-7&#34; name=&#34;__codelineno-2-7&#34; href=&#34;#__codelineno-2-7&#34;&gt;&lt;/a&gt; &lt;span class=&#34;n&#34;&gt;lines&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;splitlines&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-8&#34;&gt;&lt;a id=&#34;__codelineno-2-8&#34; name=&#34;__codelineno-2-8&#34; href=&#34;#__codelineno-2-8&#34;&gt;&lt;/a&gt; &lt;span class=&#34;n&#34;&gt;all_lines&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lines&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-9&#34;&gt;&lt;a id=&#34;__codelineno-2-9&#34; name=&#34;__codelineno-2-9&#34; href=&#34;#__codelineno-2-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;all_lines&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;END:VCALENDAR&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-10&#34;&gt;&lt;a id=&#34;__codelineno-2-10&#34; name=&#34;__codelineno-2-10&#34; href=&#34;#__codelineno-2-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all_lines&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行上述脚本：&lt;code&gt;python3 dump.py ~/.contacts/*/*.ics &amp;gt; dump.ics&lt;/code&gt;，这样得到的 &lt;code&gt;.ics&lt;/code&gt; 文件就可以直接导入到日历软件了。&lt;/p&gt;&lt;p&gt;UPDATE: 我在之前写的飞书文档备份工具 &lt;a href=&#34;https://github.com/jiegec/feishu-backup&#34;&gt;feishu-backup&lt;/a&gt; 的基础上，添加了飞书日历的导出功能，把原始的 json 保存下来，并转换得到 iCalendar 格式的 &lt;code&gt;.ics&lt;/code&gt; 文件。&lt;/p&gt;&lt;h2 id=&#34;导出-icloud-国区的日历和联系人&#34;&gt;导出 iCloud 国区的日历和联系人&lt;a class=&#34;headerlink&#34; href=&#34;#导出-icloud-国区的日历和联系人&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;除了导出飞书的日历，也可以用类似的方法导出 iCloud 国区的日历：把 url 改成 &lt;code&gt;&#34;https://caldav.icloud.com.cn&#34;&lt;/code&gt;，在 Apple ID 上生成 App 密码，填入上面的 password，再把邮箱写到 username 即可。&lt;/p&gt;&lt;p&gt;更进一步，也可以导出 iCloud 国区的联系人：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;把配置中 &lt;code&gt;fileext = &#34;.ics&#34;&lt;/code&gt; 改成 &lt;code&gt;fileext = &#34;.vcf&#34;&lt;/code&gt;，因为联系人的格式是 &lt;a href=&#34;https://en.wikipedia.org/wiki/VCard&#34;&gt;vCard&lt;/a&gt;，其文件名后缀是 &lt;code&gt;.vcf&lt;/code&gt;&lt;/li&gt;&lt;li&gt;把 &lt;code&gt;type = &#34;caldav&#34;&lt;/code&gt; 改成 &lt;code&gt;type = &#34;carddav&#34;&lt;/code&gt;，把 &lt;code&gt;url = &#34;https://caldav.icloud.com.cn&lt;/code&gt; 改成 &lt;code&gt;url = &#34;https://contacts.icloud.com.cn&#34;&lt;/code&gt;，表示同步联系人而不是日历&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果既要同步日历，又要同步联系人，或者需要同步来自不同来源的日历，建议把 status 和 storage local 放到不同的目录下，避免出现冲突。&lt;/p&gt;</description><link>https://jia.je/software/2025/02/04/feishu-dump-calendar/</link> <pubDate>Tue, 04 Feb 2025 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2025/02/04/feishu-dump-calendar/</guid> </item> <item> <title>Intel Gracemont 微架构评测</title> <category>alderlake</category> <category>cpu</category> <category>gracemont</category> <category>hardware</category> <category>intel</category> <category>performance</category> <category>uarch-review</category> <description>&lt;h1 id=&#34;intel-gracemont-微架构评测&#34;&gt;Intel Gracemont 微架构评测&lt;a class=&#34;headerlink&#34; href=&#34;#intel-gracemont-微架构评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;../../10/intel_golden_cove/&#34;&gt;之前&lt;/a&gt; 测试了 Intel Alder Lake 的 P 核微架构，这次就来测一下 Alder Lake 的 E 核微架构 Gracemont。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;官方信息&#34;&gt;官方信息&lt;a class=&#34;headerlink&#34; href=&#34;#官方信息&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Intel 关于 Gracemont 微架构有这些官方的信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/document/9747991&#34;&gt;Intel Alder Lake CPU Architectures&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://hc33.hotchips.org/assets/program/conference/day1/HC2021.C1.1%20Intel%20Efraim%20Rotem.pdf&#34;&gt;Alder Lake Architecture on Hot Chips 33&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/content-details/671488/intel-64-and-ia-32-architectures-optimization-reference-manual-volume-1.html&#34;&gt;Intel 64 and IA-32 Architectures Optimization Reference Manual Volume 1&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;现有评测&#34;&gt;现有评测&lt;a class=&#34;headerlink&#34; href=&#34;#现有评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;网上已经有较多针对 Gracemont 微架构的评测和分析，建议阅读：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2021/12/21/gracemont-revenge-of-the-atom-cores/&#34;&gt;Gracemont: Revenge of the Atom Cores&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://fuse.wikichip.org/news/6102/intels-gracemont-small-core-eclipses-last-gen-big-core-performance/&#34;&gt;Intel’s Gracemont Small Core Eclipses Last-Gen Big Core Performance&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面分各个模块分别记录官方提供的信息，以及实测的结果。读者可以对照已有的第三方评测理解。官方信息与实测结果一致的数据会加粗。&lt;/p&gt;&lt;h2 id=&#34;benchmark&#34;&gt;Benchmark&lt;a class=&#34;headerlink&#34; href=&#34;#benchmark&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Intel Gracemont 的性能测试结果见 &lt;a href=&#34;../../../../../benchmark/&#34;&gt;SPEC&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&#34;前端&#34;&gt;前端&lt;a class=&#34;headerlink&#34; href=&#34;#前端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;fetch&#34;&gt;Fetch&lt;a class=&#34;headerlink&#34; href=&#34;#fetch&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2x 32B/cycle&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Gracemont 的 Clustered Decode 架构比较特别，目前没有找到方法去证实它的 Fetch 带宽，后续如果找到了更好的方法，再测这个特性。&lt;/p&gt;&lt;h3 id=&#34;decode&#34;&gt;Decode&lt;a class=&#34;headerlink&#34; href=&#34;#decode&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2x 3-wide&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Gracemont 的 Clustered Decode 架构比较特别，目前没有找到方法去确认它 2x 3-wide 的 Decode 带宽，后续如果找到了更好的方法，再测这个特性。&lt;/p&gt;&lt;h3 id=&#34;l1-icache&#34;&gt;L1 ICache&lt;a class=&#34;headerlink&#34; href=&#34;#l1-icache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;64KB&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为了测试 L1 ICache 容量，构造一个具有巨大指令 footprint 的循环，由大量的 4 字节 nop 和最后的分支指令组成。观察在不同 footprint 大小下的 IPC：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_gracemont_fetch_bandwidth.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 footprint 在 64 KB 之前时可以达到 5 IPC，之后则降到 3.25 IPC，这里的 64 KB 就对应了 L1 ICache 的容量。&lt;/p&gt;&lt;h3 id=&#34;l1-itlb&#34;&gt;L1 ITLB&lt;a class=&#34;headerlink&#34; href=&#34;#l1-itlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;64 entries&lt;/strong&gt;, fully associative&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;构造一系列的 jmp 指令，使得 jmp 指令分布在不同的 page 上，使得 ITLB 成为瓶颈：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_gracemont_itlb_size.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 64 个 Page 出现了明显的拐点，对应的就是 64 的 L1 ITLB 容量。过了拐点后，每次 jmp 的时间延长到了 16 个周期左右，包括了 L2 TLB 到 L1 ITLB 的 refill 时间。&lt;/p&gt;&lt;h3 id=&#34;return-stack&#34;&gt;Return Stack&lt;a class=&#34;headerlink&#34; href=&#34;#return-stack&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;用之前设计的 Return Stack 测试代码来测试 Gracemont，它的 call/ret 是成对的，也就是 ret 的返回地址不变，称这个版本为 A。此时发现不同调用深度下，都能做到 2 cycle 每 call/ret 对，没有观察到性能的下降，说明此时 Return Stack 并没有介入，应该是由 BTB 提供了预测。下面是 A 版本代码在 Gracemont 上的测试结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_gracemont_rs_size_1.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;为了解决这个问题，修改代码，在函数里构造两个 call 去调用同一个函数，这样 ret 的返回地址就会变化了，称这个版本为 B。这时候跑出来的结果比较奇怪，周期数快速上升：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_gracemont_rs_size_2.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;同样的 B 版本代码在 AMD Zen3 和 Apple Firestorm 的处理器上，可以观察到在符合预期的 Return Stack 大小处出现性能拐点，和 A 版本代码得到的结论一致。而 B 版本代码在 Golden Cove 上，会观察到在 6 的附近有一个性能下降如下图，但之前用 &lt;a href=&#34;../../10/intel_golden_cove/&#34;&gt;A 版本代码测得的拐点为 20&lt;/a&gt;:&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_gracemont_rs_size_golden_cove.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;这个区别背后的原因还需要进一步的分析。下面是两个版本的汇编代码的对比：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# version A&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;func_n:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;func_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;n-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-6&#34;&gt;&lt;a id=&#34;__codelineno-0-6&#34; name=&#34;__codelineno-0-6&#34; href=&#34;#__codelineno-0-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# version B, generate two alternating call sites&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-7&#34;&gt;&lt;a id=&#34;__codelineno-0-7&#34; name=&#34;__codelineno-0-7&#34; href=&#34;#__codelineno-0-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;func_n:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-8&#34;&gt;&lt;a id=&#34;__codelineno-0-8&#34; name=&#34;__codelineno-0-8&#34; href=&#34;#__codelineno-0-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-9&#34;&gt;&lt;a id=&#34;__codelineno-0-9&#34; name=&#34;__codelineno-0-9&#34; href=&#34;#__codelineno-0-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-10&#34;&gt;&lt;a id=&#34;__codelineno-0-10&#34; name=&#34;__codelineno-0-10&#34; href=&#34;#__codelineno-0-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;je&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-11&#34;&gt;&lt;a id=&#34;__codelineno-0-11&#34; name=&#34;__codelineno-0-11&#34; href=&#34;#__codelineno-0-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-12&#34;&gt;&lt;a id=&#34;__codelineno-0-12&#34; name=&#34;__codelineno-0-12&#34; href=&#34;#__codelineno-0-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;func_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;n-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-13&#34;&gt;&lt;a id=&#34;__codelineno-0-13&#34; name=&#34;__codelineno-0-13&#34; href=&#34;#__codelineno-0-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-14&#34;&gt;&lt;a id=&#34;__codelineno-0-14&#34; name=&#34;__codelineno-0-14&#34; href=&#34;#__codelineno-0-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-15&#34;&gt;&lt;a id=&#34;__codelineno-0-15&#34; name=&#34;__codelineno-0-15&#34; href=&#34;#__codelineno-0-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;err&#34;&gt;2:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-16&#34;&gt;&lt;a id=&#34;__codelineno-0-16&#34; name=&#34;__codelineno-0-16&#34; href=&#34;#__codelineno-0-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;func_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;n-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-17&#34;&gt;&lt;a id=&#34;__codelineno-0-17&#34; name=&#34;__codelineno-0-17&#34; href=&#34;#__codelineno-0-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-18&#34;&gt;&lt;a id=&#34;__codelineno-0-18&#34; name=&#34;__codelineno-0-18&#34; href=&#34;#__codelineno-0-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-19&#34;&gt;&lt;a id=&#34;__codelineno-0-19&#34; name=&#34;__codelineno-0-19&#34; href=&#34;#__codelineno-0-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;err&#34;&gt;3:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-20&#34;&gt;&lt;a id=&#34;__codelineno-0-20&#34; name=&#34;__codelineno-0-20&#34; href=&#34;#__codelineno-0-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;后端&#34;&gt;后端&lt;a class=&#34;headerlink&#34; href=&#34;#后端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;rename&#34;&gt;Rename&lt;a class=&#34;headerlink&#34; href=&#34;#rename&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;5-wide&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在先前测试 L1 ICache 容量的时候，观察到的最大的 IPC 就是 5，此时测得的瓶颈在于 Rename 宽度，对应 5-wide Rename。&lt;/p&gt;&lt;h3 id=&#34;execution-units&#34;&gt;Execution Units&lt;a class=&#34;headerlink&#34; href=&#34;#execution-units&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;6 alu ports: 0/1/2/3/30/31&lt;ul&gt;&lt;li&gt;P0: ALU/SHIFT&lt;/li&gt;&lt;li&gt;P1: ALU/SHIFT/MUL/DIV&lt;/li&gt;&lt;li&gt;P2: ALU/SHIFT/MUL/DIV&lt;/li&gt;&lt;li&gt;P3: ALU/SHIFT&lt;/li&gt;&lt;li&gt;P30: JMP&lt;/li&gt;&lt;li&gt;P31: JMP&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;3 simd ports: 20/21/22&lt;ul&gt;&lt;li&gt;P20: SALU/SIMUL/FMUL/FADD/FDIV/AES/SHA&lt;/li&gt;&lt;li&gt;P21: SALU/FMUL/FADD/AES&lt;/li&gt;&lt;li&gt;P22: SALU&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;2 load ports: 10/11&lt;/li&gt;&lt;li&gt;2 store address ports: 12/13&lt;/li&gt;&lt;li&gt;2 store data ports: 8/9&lt;/li&gt;&lt;li&gt;2 simd store data ports: 28/29&lt;/li&gt;&lt;li&gt;ports 10/11/12/13 shares a reservation station&lt;/li&gt;&lt;li&gt;ports 8/9/30/31 shares a reservation station&lt;/li&gt;&lt;li&gt;ports 28/29 shares a reservation station&lt;/li&gt;&lt;li&gt;ports 20/21/22 shares a reservation station&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;实测各类指令的吞吐：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;NOP: 5 IPC&lt;/li&gt;&lt;li&gt;ALU: 4 IPC&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;lsu&#34;&gt;LSU&lt;a class=&#34;headerlink&#34; href=&#34;#lsu&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;2x 16B Load/cycle, 2x 16B Store/cycle&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Load latency 3-4 cycle&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;load-store-带宽&#34;&gt;Load Store 带宽&lt;a class=&#34;headerlink&#34; href=&#34;#load-store-带宽&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;针对 Load Store 带宽，实测每个周期可以完成：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2x 128b Load&lt;/li&gt;&lt;li&gt;2x 128b Load + 2x 128b Store&lt;/li&gt;&lt;li&gt;2x 128b Store&lt;/li&gt;&lt;li&gt;1x 256b Load&lt;/li&gt;&lt;li&gt;1x 256b Load + 1x 256b Store&lt;/li&gt;&lt;li&gt;1x 256b Store&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;最大的读带宽是 32B/cyc，最大的写带宽是 32B/cyc，二者可以同时达到。&lt;/p&gt;&lt;h4 id=&#34;store-to-load-forwarding&#34;&gt;Store to Load Forwarding&lt;a class=&#34;headerlink&#34; href=&#34;#store-to-load-forwarding&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Loads that forward from stores can do so in the same load to use latency as cache hits forcases where the store&#39;s address is known, and the store data is available.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;经过实际测试，Gracemont 上如下的情况可以成功转发，对地址 x 的 Store 转发到对地址 y 的 Load 成功时 y-x 的取值范围：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Store\Load&lt;/th&gt;&lt;th&gt;8b Load&lt;/th&gt;&lt;th&gt;16b Load&lt;/th&gt;&lt;th&gt;32b Load&lt;/th&gt;&lt;th&gt;64b Load&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;8b Store&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16b Store&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;32b Store&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;64b Store&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{0,4}&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;可以看到，Gracemont 在 Store 包含 Load 且地址相同时可以转发。特别地，针对 64b Store 到 32b Load 转发还允许 y-x=4。各种情况下的 CPI：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;转发成功时，CPI 比较复杂，有的情况是介于 0.5 到 2 之间，有时候又是介于 2 到 4 之间，有时候是 6&lt;/li&gt;&lt;li&gt;重合但不能转发时，CPI 等于 11，特殊情况下还出现了 28.5&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;不支持多个 Store 对同一个 Load 的转发。跨缓存行时不能转发。&lt;/p&gt;&lt;p&gt;即使 Load 和 Store 不重合，但在一定情况下，也会出现 CPI 等于 11 的情况，例如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;对地址 3 的 16b Store 转发到地址 0 的 8b Load&lt;/li&gt;&lt;li&gt;对地址 1 的 64b Store 转发到地址 9/10/11 的 64b Load&lt;/li&gt;&lt;li&gt;对地址 0 的 8b Store 转发到地址 1/2/3 的 64b Load&lt;/li&gt;&lt;li&gt;对地址 0 的 8b Store 转发到地址 3 的 16b Load&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在以上几种情况下，Load 和 Store 访问范围并不重合，但性能和访问范围重合且转发失败时相同（CPI 等于 11），由此猜测 Gracemont 判断是否重合是以对齐的 4B 为粒度，如果 Load 和 Store 访问了相同的对齐的 4B 块，即使不重合，一定情况下也可能会被当成重合的情况来处理，但由于实际上并没有重合，就没法转发，性能就比较差。&lt;/p&gt;&lt;p&gt;小结：Gracemont 的 Store to Load Forwarding：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;1 ld + 1 st: 要求 st 完全包含 ld 且地址相同且不能跨缓存行；特别地，64b Store 到 32b Load 转发允许 y-x=4&lt;/li&gt;&lt;li&gt;1 ld + 2+ st: 不支持&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;load-to-use-latency&#34;&gt;Load to Use Latency&lt;a class=&#34;headerlink&#34; href=&#34;#load-to-use-latency&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;测试不同场景下的 Load to Use Latency：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;mov 0(%rsi), %rsi&lt;/code&gt;: 3 cycle，但在跨越 64B 缓存行边界时退化到 11 cycle&lt;/li&gt;&lt;li&gt;&lt;code&gt;mov 8(%rsi), %rsi&lt;/code&gt;: 3 cycle&lt;/li&gt;&lt;li&gt;&lt;code&gt;mov 0(%rsp, %rsi, 8), %rsi&lt;/code&gt;: 4 cycle&lt;/li&gt;&lt;li&gt;&lt;code&gt;mov 0(%rsi, %rdx, 8), %rsi&lt;/code&gt;: 4 cycle&lt;/li&gt;&lt;li&gt;Load to ALU Latency: 4 cycle&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;l1-dcache&#34;&gt;L1 DCache&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dcache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;32KB&lt;/li&gt;&lt;li&gt;dual ported&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;l1-dtlb&#34;&gt;L1 DTLB&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dtlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;32 entries, fully associative&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;用类似测 L1 DCache 的方法测试 L1 DTLB 容量，只不过把 pointer chasing 链的指针分布在不同的 page 上，使得 DTLB 成为瓶颈。奇怪的是，虽然官方信息写的是 32-entry 的 L1 DTLB，但是实测它有 48-entry：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_gracemont_dtlb_size.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;这个观察和 &lt;a href=&#34;https://chipsandcheese.com/p/meteor-lakes-e-cores-crestmont-makes-incremental-progress&#34;&gt;Meteor Lake’s E-Cores: Crestmont Makes Incremental Progress&lt;/a&gt; 是一致的，怀疑是 Intel 写错了数据。&lt;/p&gt;&lt;h3 id=&#34;l2-tlb&#34;&gt;L2 TLB&lt;a class=&#34;headerlink&#34; href=&#34;#l2-tlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;4-way &lt;strong&gt;2048&lt;/strong&gt; entries for 4K/2M pages&lt;/li&gt;&lt;li&gt;fully associative 8 entries for 1GB pages&lt;/li&gt;&lt;li&gt;4 page walkers&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;使用类似 L1 DTLB 的方式去测试 L2 TLB，在 2048 附近观察到了拐点：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_gracemont_l2_dtlb_size.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;这个结果和官方数据是吻合的。&lt;/p&gt;&lt;h3 id=&#34;l2-cache&#34;&gt;L2 Cache&lt;a class=&#34;headerlink&#34; href=&#34;#l2-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2MB/4MB Shared among 4 cores&lt;/li&gt;&lt;li&gt;64 B/cycle shared among 4 cores&lt;/li&gt;&lt;li&gt;17 cycle latency&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;reorder-buffer&#34;&gt;ReOrder Buffer&lt;a class=&#34;headerlink&#34; href=&#34;#reorder-buffer&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;256 entries&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;8 wide retirement&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为了测试 ROB 的大小，设计了一个循环，循环开始和结束是长延迟的 long latency load。中间是若干条 NOP 指令，当 NOP 指令比较少时，循环的时候取决于 load 指令的时间；当 NOP 指令数量过多，填满了 ROB 以后，就会导致 ROB 无法保存循环末尾的 load 指令，性能出现下降。测试结果如下：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_gracemont_rob_size.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;当 NOP 数量达到 256 时，性能开始急剧下滑，说明 Golden Cove 的 ROB 大小是 256。&lt;/p&gt;</description><link>https://jia.je/hardware/2025/01/12/intel_gracemont/</link> <pubDate>Sun, 12 Jan 2025 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2025/01/12/intel_gracemont/</guid> </item> <item> <title>Intel Golden Cove 微架构评测</title> <category>alderlake</category> <category>cpu</category> <category>goldencove</category> <category>hardware</category> <category>intel</category> <category>performance</category> <category>uarch-review</category> <description>&lt;h1 id=&#34;intel-golden-cove-微架构评测&#34;&gt;Intel Golden Cove 微架构评测&lt;a class=&#34;headerlink&#34; href=&#34;#intel-golden-cove-微架构评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;前段时间测试了 AMD/Apple/Qualcomm/ARM 的处理器的微架构，自然不能漏了 Intel。虽然 Intel 已经出了 Redwood Cove 和 Lion Cove，但手上没有设备，而且 Golden Cove 也是“相对比较成功”（“缩缸的是 Raptor Cove，和我 Golden Cove 有什么关系，虽然其实 Raptor Cove 是 Golden Cove Refresh”）的一代微架构，用在了 Alder Lake 和 Sapphire Rapids 上，因此就来分析它，后续有机会也会分析一下对应的 E 核架构 Gracemont。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;官方信息&#34;&gt;官方信息&lt;a class=&#34;headerlink&#34; href=&#34;#官方信息&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Intel 关于 Golden Cove 微架构有这些官方的信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/document/9747991&#34;&gt;Intel Alder Lake CPU Architectures&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://hc33.hotchips.org/assets/program/conference/day1/HC2021.C1.1%20Intel%20Efraim%20Rotem.pdf&#34;&gt;Alder Lake Architecture on Hot Chips 33&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://hc33.hotchips.org/assets/program/conference/day1/HC2021.C1.4%20Intel%20Arijit.pdf&#34;&gt;Sapphire Rapids on Hot Chips 33&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/content-details/671488/intel-64-and-ia-32-architectures-optimization-reference-manual-volume-1.html&#34;&gt;Intel 64 and IA-32 Architectures Optimization Reference Manual Volume 1&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;现有评测&#34;&gt;现有评测&lt;a class=&#34;headerlink&#34; href=&#34;#现有评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;网上已经有较多针对 Golden Cove 微架构的评测和分析，建议阅读：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2021/12/02/popping-the-hood-on-golden-cove/&#34;&gt;Popping the Hood on Golden Cove&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Golden_Cove&#34;&gt;Golden Cove&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2023/01/15/golden-coves-vector-register-file-checking-with-official-spr-data/&#34;&gt;Golden Cove’s Vector Register File: Checking with Official (SPR) Data&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.servethehome.com/4th-gen-intel-xeon-scalable-sapphire-rapids-leaps-forward/7/&#34;&gt;4th Gen Intel Xeon Scalable Sapphire Rapids Leaps Forward&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://fuse.wikichip.org/news/6111/intel-details-golden-cove-next-generation-big-core-for-client-and-server-socs/&#34;&gt;Intel Details Golden Cove: Next-Generation Big Core For Client and Server SoCs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2023/03/12/a-peek-at-sapphire-rapids/&#34;&gt;Sapphire Rapids: Golden Cove Hits Servers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2022/12/25/golden-coves-lopsided-vector-register-file/&#34;&gt;Golden Cove’s Lopsided Vector Register File&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://indirector.cpusec.org/&#34;&gt;Indirector: High-Precision Branch Target Injection Attacks Exploiting the Indirect Branch Predictor&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面分各个模块分别记录官方提供的信息，以及实测的结果。读者可以对照已有的第三方评测理解。官方信息与实测结果一致的数据会加粗。&lt;/p&gt;&lt;h2 id=&#34;benchmark&#34;&gt;Benchmark&lt;a class=&#34;headerlink&#34; href=&#34;#benchmark&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Intel Golden Cove 的性能测试结果见 &lt;a href=&#34;../../../../../benchmark/&#34;&gt;SPEC&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&#34;前端&#34;&gt;前端&lt;a class=&#34;headerlink&#34; href=&#34;#前端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;fetch&#34;&gt;Fetch&lt;a class=&#34;headerlink&#34; href=&#34;#fetch&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Legacy decode pipeline fetch bandwidth is increased from 16 to 32 bytes/cycle&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;decode&#34;&gt;Decode&lt;a class=&#34;headerlink&#34; href=&#34;#decode&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The number of decoders is increased from 4 to 6&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;dsbuop-cache&#34;&gt;DSB/uOP Cache&lt;a class=&#34;headerlink&#34; href=&#34;#dsbuop-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The micro-op cache size is increased to hold 4,000 (注：应该是 4096) micro-ops,&lt;/li&gt;&lt;li&gt;and its bandwidth is increased to deliver up to 8 micro-ops per cycle.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Intel 的 uOP(Micro-OP) Cache 称为 Decode Stream Buffer (DSB): &lt;code&gt;Decode Stream Buffer (DSB) is a Uop-cache that holds translations of previously fetched instructions that were decoded by the legacy x86 decode pipeline (MITE).&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;uOP Cache 的组织方式通常是组相连，每个 entry 保存了几条 uOP，这些 uOP 对应了原来指令流中连续的几条指令。&lt;/p&gt;&lt;p&gt;为了测试 uOP Cache 的大小，构造不同大小的循环，循环体是复制若干份的 &lt;code&gt;add %%rsi, %%rdx&lt;/code&gt; 指令，最后是 &lt;code&gt;dec + jnz&lt;/code&gt; 作为循环结尾，通过 &lt;a href=&#34;https://perfmon-events.intel.com/index.html?pltfrm=ahybrid.html&amp;amp;evnt=IDQ.DSB_UOPS&#34;&gt;IDQ.DSB_UOPS&lt;/a&gt; 性能计数器统计每次循环有多少个 uOP 来自于 DSB 也就是 uOP Cache，发现其最大值为 2800 左右，距离 4K 还有一定的距离。目前还没有找到一个可以稳定跑出 4K uOP 的指令模式，不知道遇到了什么瓶颈。&lt;/p&gt;&lt;p&gt;考虑到 taken branch 在典型的 uOP Cache 设计中会结束一个 entry，把循环体改成若干条 &lt;code&gt;jmp&lt;/code&gt; 指令，并且每个 64B 缓存行只有一条 &lt;code&gt;jmp&lt;/code&gt; 指令，此时每个 uOP entry 只记录一条 &lt;code&gt;jmp&lt;/code&gt; 指令。观察到每次循环最多 512 个 uOP 来自 uOP Cache，那么 Golden Cove 的 uOP Cache 大概就是 512 个 entry。如果改成每 128B 缓存行只有一条 &lt;code&gt;jmp&lt;/code&gt; 指令，uOP Cache 容量减少到 256 个 entry；继续增加间距，256B 间距对应 128 个 entry，512B 间距对应 64 个 entry，1024B 间距对应 32 个 entry，2048B 间距对应 16 个 entry，4096B 间距对应 8 个 entry，继续增大间距后，entry 数维持中 8 不再减少，意味着 Golden Cove 的 uOP Cache 是 8 Way 64 Set 一共 512 Entry，Index 是 PC[11:6]。&lt;/p&gt;&lt;p&gt;那么按照官方信息所说的 4K 容量，一共 512 个 Entry，那么每个 Entry 应该能够记录最多 8 个 uOP，这正好也对应上了 8 uOP 的吞吐。&lt;/p&gt;&lt;p&gt;根据前人在 Intel 比较老的微架构上的测试结果（见 &lt;a href=&#34;https://agner.org/optimize/microarchitecture.pdf&#34;&gt;The microarchitecture of Intel, AMD, and VIA CPUs&lt;/a&gt;）以及 Intel 的官方文档 Software Optimization Manual（这个文档把 uOP Cache 叫做 Decoded ICache），Intel 之前很多代微架构的 uOP Cache Entry 的构造条件是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;每个 Entry 能记录的 uOP 个数有上限，最多 6 uOP/Entry&lt;/li&gt;&lt;li&gt;Entry 不能跨越 32B 边界，反过来，一个对齐的 32B 区间只能对应最多 3 个 Entry，结合第一条，就是对齐的 32B 块中不能超过 &lt;code&gt;3*6=18&lt;/code&gt; 个 uOP（&lt;code&gt;The Decoded ICache can hold only up to 18 micro-ops per each 32 byte aligned memory chunk&lt;/code&gt;）；如果指令跨了 32B 边界，它被算在后面那个 32B 里面&lt;/li&gt;&lt;li&gt;指令需要完整地出现在一个 Entry 中：如果一条指令需要的空间太多，在当前 Entry 的剩余空间内放不下，就需要另起一个 Entry&lt;/li&gt;&lt;li&gt;无条件跳转（或者被预测为要跳转）的指令会结束一个 Entry（&lt;code&gt;each unconditional branch is the last micro-op occupying a Decoded ICache Way&lt;/code&gt;）&lt;/li&gt;&lt;li&gt;比较大的立即数也会占用 uOP 空间，减少了实际能存放的 uOP 数量&lt;/li&gt;&lt;li&gt;比较复杂的需要微码（Microcoded uops）的指令会占用一整个 Entry&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;下面来分析 Golden Cove 上这些构造条件是否有变化。参考 &lt;a href=&#34;https://ieeexplore.ieee.org/document/9499837&#34;&gt;I See Dead µops: Leaking Secrets via Intel/AMD Micro-Op Caches&lt;/a&gt; 的方法，构造了一个循环，循环体由 &lt;code&gt;4x 15-byte-nop + 1x 4-byte-nop&lt;/code&gt; 组成，这样的 5 条指令填满了对齐的 64B。在 Golden Cove 上测试，发现依然可以用满 512 个 Entry，假如 Entry 不能跨越 32B 边界，那么这 5 条指令至少就要 2 个 Entry，但实际上只用了 1 个 Entry。这说明 Golden Cove 上 uOP Cache Entry 的第一条限制中，Entry 不能跨越的边界，从 32B 扩大到了 64B，毕竟每个 Entry 能存的 uOP 数量也增多了，如果继续限制 32B，每个 Entry 就很难存满 8 个 uOP 了。接下来测试对齐的 64B 内可以最多有多少个 entry。&lt;/p&gt;&lt;p&gt;把循环体改成每对齐的 64B 就有四条 jmp 指令，前一条 jmp 指令跳转到后一条 jmp 指令，模拟每 64B 有四个 Entry 的情况：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第 1 个 jmp 放在 64B 内的 0B 偏移处，跳转到 64B 内 16B 偏移处&lt;/li&gt;&lt;li&gt;第 2 个 jmp 放在 64B 内的 16B 偏移处，跳转到 64B 内 32B 偏移处&lt;/li&gt;&lt;li&gt;第 3 个 jmp 放在 64B 内的 32B 偏移处，跳转到 64B 内 48B 偏移处&lt;/li&gt;&lt;li&gt;第 4 个 jmp 放在 64B 内的 48B 偏移处，跳转到下一个 64B 的开头&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;测试发现这个情况下能达到 512 个 Entry。说明对齐的 64B 内至少可以存 4 个 Entry。&lt;/p&gt;&lt;p&gt;进一步测试，如果每对齐的 64B 有五条 jmp 指令，模拟每 64B 有五个 Entry 的情况：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第 1 个 jmp 放在 64B 内的 0B 偏移处，跳转到 64B 内 8B 偏移处&lt;/li&gt;&lt;li&gt;第 2 个 jmp 放在 64B 内的 8B 偏移处，跳转到 64B 内 16B 偏移处&lt;/li&gt;&lt;li&gt;第 3 个 jmp 放在 64B 内的 16B 偏移处，跳转到 64B 内 24B 偏移处&lt;/li&gt;&lt;li&gt;第 4 个 jmp 放在 64B 内的 24B 偏移处，跳转到 64B 内 32B 偏移处&lt;/li&gt;&lt;li&gt;第 5 个 jmp 放在 64B 内的 32B 偏移处，跳转到下一个 64B 的开头&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;发现最高的 Entry 数只有 480 左右，不确定是遇到了什么限制，如果对齐的 64B 内不能存 5 个 Entry，也不应该得到 480 这个结果。&lt;/p&gt;&lt;p&gt;如果单独去测试每个对齐的 64B 能缓存多少个 uOP，比如每个对齐的 64B 里由若干条 nop 加最后一条跳到下一个 64B 开头的 jmp 指令组成，会发现当对齐的 64B 内的 uOP 个数从 36 个变成 37 个时，uOP Cache 命中率急剧下降。这意味着，每对齐的 64B 内依然不能存超过 36 个 uOP。这类似于原来的每对齐的 32B 内不能存超过 18 个 uOP，但粒度更粗，实际上更加宽松，比如对齐的 64B 内的前 32B 可以全是 NOP 指令，只要 64B 内总数不超过 36 就可以。但比较奇怪的是，36 uOP per 64B 不能整除 8 uOP/Entry，不像原来的 18 per 32B 可以整除 6 uOP/Entry。&lt;/p&gt;&lt;h3 id=&#34;l1-itlb&#34;&gt;L1 ITLB&lt;a class=&#34;headerlink&#34; href=&#34;#l1-itlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;the iTLBs is doubled to hold &lt;strong&gt;256&lt;/strong&gt; entries for 4-KB pages and 32 entries for 2/4 million pages&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;构造一系列的 jmp 指令，使得 jmp 指令分布在不同的 page 上，使得 ITLB 成为瓶颈：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_golden_cove_itlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 256 个 Page 出现了明显的拐点，对应的就是 256 的 L1 ITLB 容量。注意要避免 ICache 和 BTB 的容量成为瓶颈，把 jmp 指令分布在不同的 Cache Line 和 BTB entry 上。&lt;/p&gt;&lt;p&gt;超过 256 个 Page 以后，如图有周期数突然下降后缓慢上升的情况（例如横坐标 288-&amp;gt;289、320-&amp;gt;321、352-&amp;gt;353、384-&amp;gt;385 等，以 32 为周期），背后的原理需要进一步分析。&lt;/p&gt;&lt;p&gt;扩大 jmp 指令的距离再测试：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果每 2/4 个 page 放一条 jmp 指令，容量不变还是 256 个 Page&lt;/li&gt;&lt;li&gt;如果改成每 8 个 page 一条 jmp 指令，容量下降到 32 个 Page&lt;/li&gt;&lt;li&gt;每 16 个 page 一条 jmp，容量下降到 16 个 Page&lt;/li&gt;&lt;li&gt;每 32/64/128 个 page 一条 jmp 指令，容量是 8 个 Page&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;从这个结果来看，L1 ITLB 对于 4K 页应该是 32 Set 8 Way。&lt;/p&gt;&lt;h3 id=&#34;l1-icache&#34;&gt;L1 ICache&lt;a class=&#34;headerlink&#34; href=&#34;#l1-icache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;32KB&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为了测试 L1 ICache 容量，构造一个具有巨大指令 footprint 的循环，由大量的 4 字节 nop 和最后的分支指令组成。观察在不同 footprint 大小下的 IPC：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_golden_cove_fetch_bandwidth.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 footprint 在 32 KB 之前时可以达到 6 IPC，之后则降到 4 IPC，这里的 32 KB 就对应了 L1 ICache 的容量。&lt;/p&gt;&lt;h3 id=&#34;return-stack&#34;&gt;Return Stack&lt;a class=&#34;headerlink&#34; href=&#34;#return-stack&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;构造不同深度的调用链，测试每次调用花费的平均时间，得到下面的图：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_golden_cove_rs.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到调用链深度为 20 时性能突然变差，因此 Return Stack 深度为 20。&lt;/p&gt;&lt;h3 id=&#34;instruction-decode-queue-idq--loop-stream-detector-lsd&#34;&gt;Instruction Decode Queue (IDQ) + Loop Stream Detector (LSD)&lt;a class=&#34;headerlink&#34; href=&#34;#instruction-decode-queue-idq--loop-stream-detector-lsd&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The IDQ can hold 144 uops per logical processor in single thread mode, or 72 uops per thread when SMT is active.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Golden Cove 架构针对循环做了优化，Loop Stream Detector（简称 LSD）会检测当前指令流是否在一个循环当中，并且循环的 uop 不超出 Instruction Decode Queue(IDQ) 的容量，那么 LSD 会把 Legacy decode pipeline(MITE) 和 Decode stream buffer(DSB) 关掉，不再让 IDQ 的指令出队，而是直接在 IDQ 的内部循环提供指令，这个时候就节省了很多处理器前端的功耗。&lt;/p&gt;&lt;p&gt;为了测试 Instruction Decode Queue 的大小，构造不同大小的循环，循环体是复制若干份的 &lt;code&gt;inc %rsi&lt;/code&gt; 指令，最后是 &lt;code&gt;dec + jnz&lt;/code&gt; 作为循环结尾，通过 &lt;a href=&#34;https://perfmon-events.intel.com/index.html?pltfrm=ahybrid.html&amp;amp;evnt=LSD.UOPS&#34;&gt;LSD.UOPS&lt;/a&gt; 性能计数器统计每次循环有多少个 UOP 来自于 Loop Stream Detector 机制，发现其最大值为 144，说明 Golden Cove 的 Loop Stream Detector 可以识别最多 144 个 uop 的循环。此时每个循环要执行 145 条指令，最后的 &lt;code&gt;dec + jnz&lt;/code&gt; 被融合成了一个 uop。&lt;/p&gt;&lt;p&gt;循环体中，如果用 &lt;code&gt;nop&lt;/code&gt; 指令来填充，会得到 40 左右的小得多的容量，猜测是进入了低功耗模式。&lt;/p&gt;&lt;h2 id=&#34;后端&#34;&gt;后端&lt;a class=&#34;headerlink&#34; href=&#34;#后端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;rename&#34;&gt;Rename&lt;a class=&#34;headerlink&#34; href=&#34;#rename&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rename/allocation width grows from 5 to 6 wide&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;execution-units&#34;&gt;Execution Units&lt;a class=&#34;headerlink&#34; href=&#34;#execution-units&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The number of execution ports goes from 10 to 12&lt;/li&gt;&lt;li&gt;five LEA units as well as five integer ALUs&lt;/li&gt;&lt;li&gt;three-cycle fast adders, with two cycles bypass between back-to-back floating-point ADD operations&lt;/li&gt;&lt;li&gt;five alu/simd ports: 0/1/5/6/10&lt;ul&gt;&lt;li&gt;P0: ALU/LEA/Shift/JMP/FMA/ALU/Shift/fpDIV&lt;/li&gt;&lt;li&gt;P1: ALU/LEA/Mul/iDIV/FMA/ALU/Shift/Shuffle/FADD&lt;/li&gt;&lt;li&gt;P5: ALU/LEA/MulHi/FMA512/ALU/AMX/Shuffle/FADD&lt;/li&gt;&lt;li&gt;P6: ALU/LEA/Shift/JMP&lt;/li&gt;&lt;li&gt;P10: ALU/LEA&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;3 load ports: 2/3/11&lt;/li&gt;&lt;li&gt;2 store address ports: 7/8&lt;/li&gt;&lt;li&gt;2 store data ports: 4/9&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;lsu&#34;&gt;LSU&lt;a class=&#34;headerlink&#34; href=&#34;#lsu&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Port 11 provides a third load port with a dedicated address-generation unit&lt;/li&gt;&lt;li&gt;Load 64Bx2 or &lt;strong&gt;32Bx3&lt;/strong&gt; per cycle&lt;/li&gt;&lt;li&gt;Store 64Bx2 or 32Bx3 per cycle&lt;/li&gt;&lt;li&gt;The L1 load to use latency is &lt;strong&gt;5&lt;/strong&gt; cycles&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;load-store-带宽&#34;&gt;Load Store 带宽&lt;a class=&#34;headerlink&#34; href=&#34;#load-store-带宽&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;针对 Load Store 带宽，实测每个周期可以完成：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;3x 256b Load&lt;/li&gt;&lt;li&gt;2x 256b Load + 2x 256b Store&lt;/li&gt;&lt;li&gt;1x 256b Load + 2x 256b Store&lt;/li&gt;&lt;li&gt;2x 256b Store&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因为测试环境是 Client 而非 Server，所以 AVX512 被屏蔽了，无法测试 AVX512 的读写带宽。此时最大的读带宽是 96B/cyc，最大的写带宽是 64B/cyc，二者不能同时达到。&lt;/p&gt;&lt;h4 id=&#34;store-to-load-forwarding&#34;&gt;Store to Load Forwarding&lt;a class=&#34;headerlink&#34; href=&#34;#store-to-load-forwarding&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Partial store forwarding allowing forwarding data from store to load also when only part of the load was covered by the store (in case the load&#39;s offset matches the store&#39;s offset)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;经过实际测试，Golden Cove 上如下的情况可以成功转发，对地址 x 的 Store 转发到对地址 y 的 Load 成功时 y-x 的取值范围：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Store\Load&lt;/th&gt;&lt;th&gt;8b Load&lt;/th&gt;&lt;th&gt;16b Load&lt;/th&gt;&lt;th&gt;32b Load&lt;/th&gt;&lt;th&gt;64b Load&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;8b Store&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16b Store&lt;/td&gt;&lt;td&gt;[0,1]&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;32b Store&lt;/td&gt;&lt;td&gt;[0,3]&lt;/td&gt;&lt;td&gt;[0,2]&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;64b Store&lt;/td&gt;&lt;td&gt;[0,7]&lt;/td&gt;&lt;td&gt;[0,6]&lt;/td&gt;&lt;td&gt;[0,4]&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;可以看到，Golden Cove 在 Store 完全包含 Load 的情况下都可以转发，没有额外的对齐要求。但当 Load 和 Store 只有部分重合时，就无法转发，这和官方信息有所冲突。两个连续的 32 位的 Store 和一个 64 位的 Load 重合也不能转发。&lt;/p&gt;&lt;p&gt;比较有意思的是，在 y=x 且不跨越缓存行边界且满足下列要求的情况下，Store Forwarding 不会带来性能损失，就好像 Load Store 访问的是不同的没有 Overlap 的地址一样：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;8b Store -&amp;gt; 8b Load&lt;/li&gt;&lt;li&gt;32b Store -&amp;gt; 8b Load&lt;/li&gt;&lt;li&gt;64b Store -&amp;gt; 8b Load&lt;/li&gt;&lt;li&gt;16b Store -&amp;gt; 16b Load&lt;/li&gt;&lt;li&gt;32b Store -&amp;gt; 32b Load&lt;/li&gt;&lt;li&gt;64b Store -&amp;gt; 32b Load&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;考虑到 y 必须等于 x，也就是地址要一样，并且没有带来性能损失，猜测 Golden Cove 使用了类似 Memory Renaming 的技术来实现这个效果。如果是连续两个对同一个地址的 Store 对一个 Load 的转发，效果和只有一个 Store 是一样的。&lt;/p&gt;&lt;p&gt;除了上述情况以外，Store Forwarding 成功时的延迟在 5 个周期，失败则要 19 个周期。&lt;/p&gt;&lt;p&gt;小结：Golden Cove 的 Store to Load Forwarding：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;1 ld + 1 st: 要求 st 包含 ld，特别地，地址相同时，性能最好&lt;/li&gt;&lt;li&gt;1 ld + 2+ st: 不支持&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;l1-dcache&#34;&gt;L1 DCache&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dcache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;48KB&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;构造不同大小 footprint 的 pointer chasing 链，测试不同 footprint 下每条 load 指令耗费的时间：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_golden_cove_l1dc.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 48KB 出现了明显的拐点，对应的就是 48KB 的 L1 DCache 容量。第二个拐点在 384KB，对应的是 L1 DTLB 的容量。&lt;/p&gt;&lt;h3 id=&#34;l1-dtlb&#34;&gt;L1 DTLB&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dtlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;96-entry&lt;/strong&gt; 6-way 4-KB-page TLB&lt;/li&gt;&lt;li&gt;32-entry 4-way 2-MB/4-MB-page TLB&lt;/li&gt;&lt;li&gt;8-entry 1-GB-page TLB for loads&lt;/li&gt;&lt;li&gt;A 16-entry TLB for stores serves all page sizes&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;用类似测 L1 DCache 的方法测试 L1 DTLB 容量，只不过这次 pointer chasing 链的指针分布在不同的 page 上，使得 DTLB 成为瓶颈：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_golden_cove_dtlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 96 Page 出现了明显的拐点，对应的就是 96 的 L1 DTLB 容量。没有超出 L1 DTLB 容量前，Load to use latency 是 5 cycle；超出 L1 DTLB 容量后，Load to use latency 是 12 cycle，说明 L1 DTLB miss 带来了 7 cycle 的损失。&lt;/p&gt;&lt;h3 id=&#34;l2-tlb&#34;&gt;L2 TLB&lt;a class=&#34;headerlink&#34; href=&#34;#l2-tlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2,048-entry second level TLB (STLB)&lt;/li&gt;&lt;li&gt;4 page table walkers&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;沿用之前测试 L1 DTLB 的方法，把规模扩大到 L2 Unified TLB 的范围，就可以测出来 L2 Unified TLB 的容量，下面是 Golden Cove 上的测试结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_golden_cove_l2tlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;第一个拐点是 96 个 Page，对应 L1 DTLB，此时 CPI 从 5 提升到 12；第二个拐点是 768，对应 L1 DCache，此时 CPI 从 12 提升到 23；第三个拐点是 1600 左右，而没有到 2048，猜测有 QoS 限制了数据对 L2 TLB 的占用。&lt;/p&gt;&lt;h3 id=&#34;l2-cache&#34;&gt;L2 Cache&lt;a class=&#34;headerlink&#34; href=&#34;#l2-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;1.25MB(Client)/2MB(Server)&lt;/li&gt;&lt;li&gt;64 bytes/cycle&lt;/li&gt;&lt;li&gt;15 cycle latency&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;构造不同大小 footprint 的 pointer chasing 链，测试不同 footprint 下每条 load 指令耗费的时间：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_golden_cove_l2c.png&#34; /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;第一个拐点在 48KB，对应 L1 DCache 的容量，CPI 从 5 提升到 16&lt;/li&gt;&lt;li&gt;第二个拐点在 384KB，对应 L1 DTLB 的容量，CPI 从 16 提升到 23&lt;/li&gt;&lt;li&gt;第三个拐点在 1280KB，对应 L2 Cache 的容量&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;prefetcher&#34;&gt;Prefetcher&lt;a class=&#34;headerlink&#34; href=&#34;#prefetcher&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;官方信息_1&#34;&gt;官方信息&lt;a class=&#34;headerlink&#34; href=&#34;#官方信息_1&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Intel Golden Cove 的处理器通过 MSR 1A4H 可以配置各个预取器（来源：Software Developers Manual，MSRs Supported by 12th and 13th Generation Intel® Core™ Processor P-core）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;MSR_1A4H[0]: the L2 hardware prefetcher, which fetches additional lines of code or data into the L2 cache.&lt;/li&gt;&lt;li&gt;MSR_1A4H[1]: the L2 adjacent cache line prefetcher, which fetches the cache line that comprises a cache line pair (128 bytes). 这和 AMD 的 Up/Down Prefetcher 应该是一个意思&lt;/li&gt;&lt;li&gt;MSR_1A4H[5]: the L2 Adaptive Multipath Probability (AMP) prefetcher. 这个应该属于 Spatial Prefetcher&lt;/li&gt;&lt;li&gt;MSR_1A4H[2]: the L1 data cache prefetcher, which fetches the next cache line into L1 data cache. 这个应该属于 Next Line Prefetcher&lt;/li&gt;&lt;li&gt;MSR_1A4H[3]: the L1 data cache IP prefetcher, which uses sequential load history (based on instruction pointer of previous loads) to determine whether to prefetch additional lines.&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;预取延迟&#34;&gt;预取延迟&lt;a class=&#34;headerlink&#34; href=&#34;#预取延迟&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;在 Golden Cove 上按 64B 的跳步进行访存，测量每次访存的延迟，得到如下结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_golden_cove_prefetcher_64b_stride.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以观察到在 48KB 之内是 5 cycle latency，在 L2 Cache 范围内是 5-8 cycle latency。&lt;/p&gt;&lt;p&gt;如果通过 &lt;code&gt;wrmsr -p 0 0x1a4 0x8&lt;/code&gt; 把 &lt;code&gt;DCU_IP_PREFETCHER_DISABLE&lt;/code&gt; 设为 1，即关闭 L1 data cache IP prefetcher，再在 0 号核心上重新跑上面的测试，得到如下结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_golden_cove_prefetcher_64b_stride_disable_prefetcher.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;就可以看到 L2 Cache 的范围内的性能退化到了 16 Cycle，和随机 pointer chasing 一样。关闭其他的 prefetcher 则没有这个现象，说明正是 L1 data cache IP prefetcher 实现了针对 L1 的 Stride Prefetcher。&lt;/p&gt;&lt;h4 id=&#34;预取距离&#34;&gt;预取距离&lt;a class=&#34;headerlink&#34; href=&#34;#预取距离&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;更进一步，参考 &lt;a href=&#34;https://abertschi.ch/blog/2022/prefetching/&#34;&gt;Battling the Prefetcher: Exploring Coffee Lake (Part 1)&lt;/a&gt; 的方式，研究 Stride 预取器的行为：分配一片内存，把数据从缓存中 flush 掉，再按照特定的访存模式访问，触发预取器，最后测量访问每个缓存行的时间，从而得到预取器预取了哪些缓存行的信息。&lt;/p&gt;&lt;p&gt;首先是只访问一个 cache line 的时候，可以看到，除了已经访问过的 cache line，其他 cache line 都出现了缓存缺失，说明此时预取器没有在工作：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_golden_cove_prefetcher_1.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;接下来，按照固定的 stride 访问各个缓存行，发现当访问了五个 cache line 时，预取器会比较稳定地预取第六个 cache line：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_golden_cove_prefetcher_5.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;继续增加访问次数，可以看到预取器总是会预取将要访问的下一个 cache line：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_golden_cove_prefetcher_13.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;如果通过 &lt;code&gt;wrmsr -p 0 0x1a4 0x8&lt;/code&gt; 把 &lt;code&gt;DCU_IP_PREFETCHER_DISABLE&lt;/code&gt; 设为 1，即关闭 L1 data cache IP prefetcher，就会观察到上述 Stride 预取的行为消失，不会预取将要访问的下一个 cache line。&lt;/p&gt;&lt;p&gt;把相同的代码放到 Gracemont 上运行，会看到它的预取器会预取将要访问的未来两个 cache line：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_golden_cove_prefetcher_gracemont_comparison.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可见不同微架构的预取器的策略是不同的。&lt;/p&gt;&lt;h3 id=&#34;reorder-buffer&#34;&gt;ReOrder Buffer&lt;a class=&#34;headerlink&#34; href=&#34;#reorder-buffer&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;512-entry&lt;/strong&gt; reorder buffer&lt;/li&gt;&lt;li&gt;8 wide retirement&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为了测试 ROB 的大小，设计了一个循环，循环开始和结束是长延迟的 long latency load。中间是若干条 NOP 指令，当 NOP 指令比较少时，循环的时候取决于 load 指令的时间；当 NOP 指令数量过多，填满了 ROB 以后，就会导致 ROB 无法保存循环末尾的 load 指令，性能出现下降。测试结果如下：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../intel_golden_cove_rob.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;当 NOP 数量达到 512 时，性能开始急剧下滑，说明 Golden Cove 的 ROB 大小是 512。&lt;/p&gt;</description><link>https://jia.je/hardware/2025/01/10/intel_golden_cove/</link> <pubDate>Fri, 10 Jan 2025 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2025/01/10/intel_golden_cove/</guid> </item> <item> <title>CPU 微架构逆向方法学</title> <category>cpu</category> <category>hardware</category> <category>uarch-review</category> <description>&lt;h1 id=&#34;cpu-微架构逆向方法学&#34;&gt;CPU 微架构逆向方法学&lt;a class=&#34;headerlink&#34; href=&#34;#cpu-微架构逆向方法学&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;最近做了不少微架构的评测，其中涉及到了很多的 CPU 微架构的逆向：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;../../26/apple_m1/&#34;&gt;Apple M1 微架构评测&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;../../../09/01/qualcomm_oryon/&#34;&gt;Qualcomm Oryon 微架构评测&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;../../../11/11/amd_zen5/&#34;&gt;AMD Zen 5 微架构评测&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;../../../11/07/arm_neoverse_v2/&#34;&gt;ARM Neoverse V2 微架构评测&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;../../../../2025/01/10/intel_golden_cove/&#34;&gt;Intel Golden Cove 微架构评测&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;../../../../2025/01/12/intel_gracemont/&#34;&gt;Intel Gracemont 微架构评测&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因此总结一下 CPU 微架构逆向方法学。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;定义&#34;&gt;定义&lt;a class=&#34;headerlink&#34; href=&#34;#定义&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;首先定义一下：什么是 CPU 微架构逆向，我认为 CPU 微架构逆向包括两部分含义：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在已经知道某 CPU 微架构采用某种设计，只是不知道其设计参数时，通过逆向，得到它的设计参数&lt;/li&gt;&lt;li&gt;在不确定某 CPU 微架构采用的是什么设计，给出一些可能的设计，通过逆向，排除或确认其设计，再进一步找到它的设计参数&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;举一个例子，已经知道某 CPU 微架构有一个组相连的 L1 DCache，但不知道它的容量，几路组相连，此时通过微架构逆向的方法，可以得到它的容量，具体是几路组相连，进一步可能把它的 Index 函数也逆向出来。这是第一部分含义。&lt;/p&gt;&lt;p&gt;再举一个例子，已经知道某 CPU 微架构有一个分支预测器，但不知道它使用了什么信息来做预测，可能用了分支的地址，可能用了分支要跳转的目的地址，可能用了分支的方向，这时候通过微架构逆向的方法，对不同的可能性做排除，找到真正的那一个。如果不能排除到只剩一个可能，或者全部可能都被排除掉，说明实际的微架构设计和预期不相符。&lt;/p&gt;&lt;p&gt;第一部分含义，目前已经有大量的成熟的 Microbenchmark（针对微架构 Microarchitecture 设计的 Benchmark，叫做 Microbenchmark）来解决，它们针对常见的微架构设计，实现了对相应设计参数的逆向的 Microbenchmark，可以在很多平台上直接使用。第二部分含义，目前还只能逐个分析，去猜测背后的设计，再根据设计去构造对应该设计的 Microbenchmark。&lt;/p&gt;&lt;p&gt;下面主要来介绍，设计和实现 Microbenchmark 的方法学。&lt;/p&gt;&lt;h2 id=&#34;原理&#34;&gt;原理&lt;a class=&#34;headerlink&#34; href=&#34;#原理&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;首先要了解 Microbenchmark 的原理，它的核心思路就是，通过构造程序，让某个微架构部件成为瓶颈，接着在想要逆向的设计参数的维度上进行扫描，通过某种指标来反映是否出现了瓶颈，通过瓶颈对应的设计参数，就可以逆向出来设计参数的取值。这一段有点难理解，下面给一个例子：&lt;/p&gt;&lt;p&gt;比如要测试的是 L1 DCache 的容量，那就希望 L1 DCache 的容量变成瓶颈。为了让它成为瓶颈，那就需要不断地访问一片内存，它的大小比 L1 DCache 要更大，让 L1 DCache 无法完整保存下来，出现缓存缺失。为了判断缓存缺失是否出现，可以通过时间或周期，因为缓存缺失肯定会带来性能损失，也可以直接通过缓存缺失的性能计数器。既然要逆向的设计参数是 L1 DCache 的容量，那就在容量上进行一个扫描：在内存中开辟不同大小的数组，比如一个是 32KB，另一个是 64KB，每次测试的时候只访问其中一个数组。每个数组扫描访问若干次，然后统计总时间或周期数或缓存缺失次数。假如实际 L1 DCache 容量介于 32KB 和 64KB 之间，那么应该可以观察到 64KB 数组大小测得的性能相比 32KB 有明显下降。如果把测试粒度变细，每 1KB 设置一个数组大小，最终就可以确定实际的 L1 DCache 容量。&lt;/p&gt;&lt;p&gt;在上面这个例子里，成为瓶颈的微架构部件是 L1 DCache，想要逆向的设计参数是它的容量，反映是否出现瓶颈的指标是性能或缓存缺失次数，构造的程序做的事情是不断地访问一个可变大小的数组，其中数组大小和想要逆向的设计参数是挂钩的。&lt;/p&gt;&lt;p&gt;因此可以总结出 Microbenchmark 设计的几个要素：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;针对什么微架构部件&lt;/li&gt;&lt;li&gt;针对该部件的什么设计参数&lt;/li&gt;&lt;li&gt;反映出现瓶颈的指标是什么&lt;/li&gt;&lt;li&gt;如何构造程序来导致瓶颈出现&lt;/li&gt;&lt;li&gt;程序在什么情况下会导致瓶颈出现&lt;/li&gt;&lt;li&gt;程序的参数如何对应到设计参数上&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;比如上面的 L1 DCache 容量的测试上，这几个要素的回答是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;针对什么微架构部件：L1 DCache&lt;/li&gt;&lt;li&gt;针对该部件的什么设计参数：L1 DCache 的容量&lt;/li&gt;&lt;li&gt;反映出现瓶颈的指标是什么：时间，周期数，缓存缺失次数&lt;/li&gt;&lt;li&gt;如何构造程序来导致瓶颈出现：在内存中开辟数组，然后不断地扫描访问&lt;/li&gt;&lt;li&gt;程序在什么情况下会导致瓶颈出现：数组大小超过 L1 DCache 容量&lt;/li&gt;&lt;li&gt;程序的参数如何对应到设计参数上：数组的大小对应到 L1 DCache 的容量&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;假如要设计一个针对 ROB(ReOrder Buffer) 容量的测试，思考同样的要素：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;针对什么微架构部件：ROB&lt;/li&gt;&lt;li&gt;针对该部件的什么设计参数：ROB 能容纳多少条指令&lt;/li&gt;&lt;li&gt;反映出现瓶颈的指标是什么：时间，周期数&lt;/li&gt;&lt;li&gt;如何构造程序来导致瓶颈出现：在 ROB 开头和结尾各放一条长延迟指令，中间填充若干条指令&lt;/li&gt;&lt;li&gt;程序在什么情况下会导致瓶颈出现：如果指令填充得足够多，导致结尾的长延迟指令不能进入 ROB，那么它无法被预测执行&lt;/li&gt;&lt;li&gt;程序的参数如何对应到设计参数上：把结尾的长延迟指令阻拦在 ROB 之外时，在 ROB 中的指令数&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;思考明白这些要素，就可以知道怎么设计出一个 Microbenchmark 了。&lt;/p&gt;&lt;p&gt;原理介绍完了，下面介绍一些常用的方法。&lt;/p&gt;&lt;h2 id=&#34;指标的获取&#34;&gt;指标的获取&lt;a class=&#34;headerlink&#34; href=&#34;#指标的获取&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;上面提到，为了反映出瓶颈，需要有一个指标，它最好能够精确地反映出瓶颈的发生与否，同时也尽量要减少噪声。能用的指标不多，只有两类：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;时间：最通用，所有平台都可以用，在程序前后各记一次时间，取差&lt;/li&gt;&lt;li&gt;性能计数器：使用起来比较麻烦，有时需要 root 权限，或者硬件相关信息不公开，又或者硬件就没有实现对应的性能计数器。各平台性能计数器可用情况：&lt;ol&gt;&lt;li&gt;Windows：可用，有现成 &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/perfctrs/performance-counters-portal&#34;&gt;API&lt;/a&gt;&lt;/li&gt;&lt;li&gt;macOS：可用，&lt;a href=&#34;https://gist.github.com/ibireme/173517c208c7dc333ba962c1f0d67d12&#34;&gt;有逆向出来的私有框架 API&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Linux：可用，&lt;a href=&#34;https://man7.org/linux/man-pages/man2/perf_event_open.2.html&#34;&gt;有现成 API&lt;/a&gt;&lt;/li&gt;&lt;li&gt;iOS：在 iOS 外可以通过 Xcode Instruments 访问所有 PMU，但不方便自动化；在 iOS 内只能通过 &lt;a href=&#34;https://github.com/Androp0v/PowerMetricsKit/blob/3be0fd2d61785d848a32b6f5ea59aacad7739909/Sources/SampleThreads/sample_threads.c#L23&#34;&gt;PROC_PIDTHREADCOUNTS&lt;/a&gt; 获得周期数和指令数&lt;/li&gt;&lt;li&gt;Android：需要 root 或通过 adb shell 使用，比较麻烦，&lt;a href=&#34;https://man7.org/linux/man-pages/man2/perf_event_open.2.html&#34;&gt;API&lt;/a&gt; 和 Linux 一样&lt;/li&gt;&lt;li&gt;HarmonyOS NEXT：没找到方案&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;虽然测时间最简单也最通用，但它会受到频率波动的限制，如果在运行测试的时候，频率剧烈变化（特别是手机平台），引入了大量噪声，就会导致有效信息被淹没在噪声当中。&lt;/p&gt;&lt;p&gt;其中性能计数器是最为精确的，虽然使用起来较为麻烦，但也确实支撑了很多更深入的 CPU 微架构的逆向。希望硬件厂商看到这篇文章，不要为了避免逆向把性能计数器藏起来：因为它对于应用的性能分析真的很有用。具体怎么用性能计数器，可以参考一些现成的 Microbenchmark 框架。&lt;/p&gt;&lt;p&gt;在有异构核的处理器上，为了保证测试的是预期微架构的核心，一般还会配合绑核，绑核在除了 macOS 和 iOS 以外的系统都可以直接指定绑哪个核心，而 macOS 和 iOS 只能通过指定 QoS 来建议调度器调度到 P 核还是 E 核，首先是不能确定是哪个 P 核或哪个 E 核，其次这只是个建议，并非强制。&lt;/p&gt;&lt;h2 id=&#34;套路&#34;&gt;套路&lt;a class=&#34;headerlink&#34; href=&#34;#套路&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;接下来介绍一些构造瓶颈的一些常见套路：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;测试容量（比如各级 I/D Cache 和 TLB）：构造一个程序，去把容量用满，当容量被用满的时候，就可以观察到性能下降&lt;/li&gt;&lt;li&gt;测试微架构队列或 Buffer 深度（比如 ROB，寄存器堆，调度队列）：在队列开头通过指令堵住队列的出队，接着不断地向队列中入队新的指令，当队列满的时候，不再能够入队新的指令，此时再引入一些原来不会被堵住的指令，现在因为队列被堵住了而进不去，导致性能下降&lt;/li&gt;&lt;li&gt;测试组相连结构（比如 BTB，Cache 等组相连结构）：组相连结构下，每个 Index 内的容量是固定的，通过测试容量，可以得到有多少 Index 被覆盖了，如果通过修改 Index 函数的输入（比如 PC），使得某些 Index 无法被访问到，就可以观察到容量上的减少，并且实际容量也反馈出了还有多少 Index 能够被访问到的信息&lt;/li&gt;&lt;li&gt;构造 pointer chasing：以 8B(对应 64 位指针)、缓存行大小或页大小为粒度，进行随机打乱，然后把它们用指针串联起来，前一个指针指向的内存中保存后一个指针的地址&lt;/li&gt;&lt;li&gt;构造长延迟指令：在测试指令队列相关的场景下常用，通常可以用 pointer chasing long latency load 或者一段具有串行依赖的浮点除法或开根指令来实现&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;再介绍一些常见的坑：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;尽量用汇编来构造测例，C/C++ 编译器可能会带来不期望的行为&lt;/li&gt;&lt;li&gt;链接器有一些行为可能是需要避免的，例如它可能会修改一些指令&lt;/li&gt;&lt;li&gt;链接器还可能有一些局限性，例如它不支持巨大的对齐&lt;/li&gt;&lt;li&gt;Linux 内核会做优化，例如 Copy-on-Write 和 Transparent Huge Page&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;现成-microbenchmark&#34;&gt;现成 Microbenchmark&lt;a class=&#34;headerlink&#34; href=&#34;#现成-microbenchmark&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;实际上，现在已经有很多现成的 Microbenchmark，以及一些记录了 Microbenchmark 的文档：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.agner.org/optimize/&#34;&gt;https://www.agner.org/optimize/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/clamchowder/Microbenchmarks/&#34;&gt;https://github.com/clamchowder/Microbenchmarks/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/JamesAslan/MicroArchBench&#34;&gt;https://github.com/JamesAslan/MicroArchBench&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/name99-org/AArch64-Explore&#34;&gt;https://github.com/name99-org/AArch64-Explore&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/jiegec/cpu-micro-benchmarks&#34;&gt;https://github.com/jiegec/cpu-micro-benchmarks&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以及一些用 Microbenchmark 做逆向并公开的网站：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com&#34;&gt;https://chipsandcheese.com&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.anandtech.com&#34;&gt;https://www.anandtech.com&lt;/a&gt;（可惜不再更新）&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://blog.hjc.im/&#34;&gt;https://blog.hjc.im/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/people/jamesaslan&#34;&gt;https://www.zhihu.com/people/jamesaslan&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://uops.info&#34;&gt;https://uops.info&lt;/a&gt;&lt;/li&gt;&lt;li&gt;本博客&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果你想要去逆向某个微架构的某个部件，但不知道怎么做，不妨在上面这些网站上寻找一下，是不是已经有现成的实现了。&lt;/p&gt;&lt;p&gt;如果你对如何编写这些 Microbenchmark 不感兴趣，也可以试试在自己电脑上运行这些程序，或者直接阅读已有的分析。&lt;/p&gt;</description><link>https://jia.je/hardware/2024/12/27/cpu_uarch_reverse_engineering_methodology/</link> <pubDate>Fri, 27 Dec 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/12/27/cpu_uarch_reverse_engineering_methodology/</guid> </item> <item> <title>Apple M1 (Firestorm &amp;amp; Icestorm) 微架构评测</title> <category>apple</category> <category>cpu</category> <category>firestorm</category> <category>hardware</category> <category>icestorm</category> <category>m1</category> <category>performance</category> <category>uarch-review</category> <description>&lt;h1 id=&#34;apple-m1-firestorm--icestorm-微架构评测&#34;&gt;Apple M1 (Firestorm &amp;amp; Icestorm) 微架构评测&lt;a class=&#34;headerlink&#34; href=&#34;#apple-m1-firestorm--icestorm-微架构评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;虽然 Apple M1 已经是 2020 年的处理器，但它对苹果自研芯片来说是一个里程碑，考虑到 X Elite 处理器的 Oryon 微架构和 Apple M1 性能核 Firestorm 微架构的相似性，还是测试一下这个 Firestorm + Icestorm 微架构在各个方面的表现。Apple A14 采用了和 Apple M1 一样的微架构。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;官方信息&#34;&gt;官方信息&lt;a class=&#34;headerlink&#34; href=&#34;#官方信息&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Apple M1 的官方信息乏善可陈，关于微架构的信息几乎为零，但能从操作系统汇报的硬件信息中找到一些内容。&lt;/p&gt;&lt;h2 id=&#34;现有评测&#34;&gt;现有评测&lt;a class=&#34;headerlink&#34; href=&#34;#现有评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;网上已经有较多针对 Apple M1 微架构的评测和分析，建议阅读：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://dougallj.github.io/applecpu/firestorm.html&#34;&gt;Apple Microarchitecture Research by Dougall Johnson&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.anandtech.com/show/16226/apple-silicon-m1-a14-deep-dive&#34;&gt;Apple Announces The Apple Silicon M1: Ditching x86 - What to Expect, Based on A14 - Anandtech&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/name99-org/AArch64-Explore&#34;&gt;Exploration of Apple CPUs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/611213899&#34;&gt;Apple M1 Icestorm 微架构评测（上）:重铸小核荣光&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/613097964&#34;&gt;Apple M1 Icestorm 微架构（下）:重铸小核荣光&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/595582920&#34;&gt;苹果的黑魔法？Apple M1 的栈操作消除（上）&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/600349467&#34;&gt;苹果的黑魔法？（下）Apple M1 的栈操作消除&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/dougallj/applecpu&#34;&gt;Apple Firestorm/Icestorm CPU microarchitecture docs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.anandtech.com/show/16252/mac-mini-apple-m1-tested&#34;&gt;The 2020 Mac Mini Unleashed: Putting Apple Silicon M1 To The Test&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/name99-org/AArch64-Explore&#34;&gt;Exploration of Apple CPUs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面分各个模块分别记录官方提供的信息，以及实测的结果。读者可以对照已有的第三方评测理解。官方信息与实测结果一致的数据会加粗。&lt;/p&gt;&lt;h2 id=&#34;benchmark&#34;&gt;Benchmark&lt;a class=&#34;headerlink&#34; href=&#34;#benchmark&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Apple Firestorm 的性能测试结果见 &lt;a href=&#34;../../../../../benchmark/&#34;&gt;SPEC&lt;/a&gt;。Apple Icestorm 尚未进行性能测试。&lt;/p&gt;&lt;h2 id=&#34;环境准备&#34;&gt;环境准备&lt;a class=&#34;headerlink&#34; href=&#34;#环境准备&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Apple M1 预装的是 macOS，macOS 的绑核只能绑到 P 或者 E，不能具体到某一个核上；在 macOS 上可以读取 PMU，需要使用 kpep 的私有框架，代码可以在&lt;a href=&#34;https://github.com/jiegec/cpu-micro-benchmarks&#34;&gt;这里&lt;/a&gt;找到。&lt;/p&gt;&lt;p&gt;如果想更方便地进行测试，建议安装 Asahi Linux 的各种发行版，此时可以在 Linux 下自由地绑核，也可以用标准的方式使用 PMU。&lt;/p&gt;&lt;h2 id=&#34;前端&#34;&gt;前端&lt;a class=&#34;headerlink&#34; href=&#34;#前端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;取指&#34;&gt;取指&lt;a class=&#34;headerlink&#34; href=&#34;#取指&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;为了测试实际的 Fetch 宽度，参考 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/720136752&#34;&gt;如何测量真正的取指带宽（I-fetch width） - JamesAslan&lt;/a&gt; 构造了测试。其原理是当 Fetch 要跨页的时候，由于两个相邻页可能映射到不同的物理地址，如果要支持单周期跨页取指，需要查询两次 ITLB，或者 ITLB 需要把相邻两个页的映射存在一起。这个场景一般比较少，处理器很少会针对这种特殊情况做优化，但也不是没有。经过测试，把循环放在两个页的边界上，发现 Firestorm 微架构遇到跨页的取指时确实会拆成两个周期来进行。在此基础上，构造一个循环，循环的第一条指令放在第一个页的最后四个字节，其余指令放第二个页上，那么每次循环的取指时间，就是一个周期（读取第一个页内的指令）加上第二个页内指令需要 Fetch 的周期数，多的这一个周期就足以把 Fetch 宽度从后端限制中区分开，实验结果如下：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_firestorm_if_width.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;图中蓝线（cross-page）表示的就是上面所述的第一条指令放一个页，其余指令放第二个页的情况，横坐标是第二个页内的指令数，那么一次循环的指令数等于横坐标 +1。纵坐标是运行很多次循环的总 cycle 数除以循环次数，也就是平均每次循环耗费的周期数。可以看到每 16 条指令会多一个周期，因此 Firestorm 的前端取指宽度确实是 16 条指令。为了确认这个瓶颈是由取指造成的，又构造了一组实验，把循环的所有指令都放到一个页中，这个时候 Fetch 不再成为瓶颈（图中 aligned），两个曲线的对比可以明确地得出上述结论。&lt;/p&gt;&lt;p&gt;用相同的方式测试 Icestorm，结果如下：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_icestorm_if_width.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到每 8 条指令会多一个周期，意味着 Icestorm 的前端取指宽度为 8 条指令。&lt;/p&gt;&lt;h3 id=&#34;l1-icache&#34;&gt;L1 ICache&lt;a class=&#34;headerlink&#34; href=&#34;#l1-icache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：通过 sysctl 可以看到，Firestorm 具有 192KB L1 ICache，Icestorm 具有 128KB L1 ICache：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;hw.perflevel0.l1icachesize: 196608&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;hw.perflevel1.l1icachesize: 131072&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了测试 L1 ICache 容量，构造一个具有巨大指令 footprint 的循环，由大量的 nop 和最后的分支指令组成。观察在不同 footprint 大小下 Firestorm 的 IPC：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_firestorm_fetch_bandwidth.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 footprint 在 192 KB 之前时可以达到 8 IPC，之后则快速降到 2.22 IPC，这里的 192 KB 就对应了 Firestorm 的 L1 ICache 的容量。虽然 Fetch 可以每周期 16 条指令，也就是一条 64B 的缓存行，由于后端的限制，只能观察到 8 的 IPC。&lt;/p&gt;&lt;p&gt;用相同的方式测试 Icestorm，结果如下：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_icestorm_fetch_bandwidth.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 footprint 在 128 KB 之前时可以达到 4 IPC，之后则快速降到 2.10 IPC，这里的 128 KB 就对应了 Icestorm 的 L1 ICache 的容量。虽然 Fetch 可以每周期 8 条指令，由于后端的限制，只能观察到 4 的 IPC。&lt;/p&gt;&lt;h3 id=&#34;btb&#34;&gt;BTB&lt;a class=&#34;headerlink&#34; href=&#34;#btb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;firestorm&#34;&gt;Firestorm&lt;a class=&#34;headerlink&#34; href=&#34;#firestorm&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;构造大量的无条件分支指令（B 指令），BTB 需要记录这些指令的目的地址，那么如果分支数量超过了 BTB 的容量，性能会出现明显下降。当把大量 B 指令紧密放置，也就是每 4 字节一条 B 指令时：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_firestorm_btb_4b.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可见在 1024 个分支之内可以达到 1 的 CPI，超过 1024 个分支，出现了 3 CPI 的平台，一直延续到 49152 个分支。超出 BTB 容量以后，分支预测时，无法从 BTB 中得到哪些指令是分支指令的信息，只能等到取指甚至译码后才能后知后觉地发现这是一条分支指令，这样就出现了性能损失，出现了 3 CPI 的情况。第二个拐点 49152，对应的是指令 footprint 超出 L1 ICache 的情况：L1 ICache 是 192KB，按照每 4 字节一个 B 指令计算，最多可以存放 49152 条 B 指令。&lt;/p&gt;&lt;p&gt;降低分支指令的密度，在 B 指令之间插入 NOP 指令，使得每 8 个字节有一条 B 指令，得到如下结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_firestorm_btb_8b.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 CPI=1 的拐点前移到 1024 个分支，同时 CPI=3 的平台的拐点也前移到了 24576。拐点的前移，意味着 BTB 采用了组相连的结构，当 B 指令的 PC 的部分低位总是为 0 时，组相连的 Index 可能无法取到所有的 Set，导致表现出来的 BTB 容量只有部分 Set，例如此处容量减半，说明只有一半的 Set 被用到了。&lt;/p&gt;&lt;p&gt;如果进一步降低 B 指令的密度，使得它的低若干位都等于 0，最终 CPI=1 的拐点定格在 2 条分支，此时分支的间距大于或等于 2048B；CPI=3 的拐点定格在 6 条分支，此时分支的间距大于或等于 32KB。根据这个信息，可以认为 Firestorm 的 BTB 是 512 Set 2 Way 的结构，Index 是 PC[10:2]；同时也侧面佐证了 192KB L1 ICache 是 512 Set 6 Way，Index 是 PC[14:6]。&lt;/p&gt;&lt;h4 id=&#34;icestorm&#34;&gt;Icestorm&lt;a class=&#34;headerlink&#34; href=&#34;#icestorm&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;用相同的方式测试 Icestorm，首先用 4B 的间距：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_icestorm_btb_4b.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 1024 的拐点，1024 之前是 1 IPC，之后增加到 3 IPC。比较奇怪的是，没有看到第二个拐点，第二个拐点在 8B 的间距下显现：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_icestorm_btb_8b.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;第一个拐点前移到 512，第二个拐点出现在 16384，而 Icestorm 的 L1 ICache 容量是 128KB，8B 间距下正好可以保存 16384 个分支。&lt;/p&gt;&lt;p&gt;用 16B 间距测试：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_icestorm_btb_16b.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;第一个拐点前移到 256，然后出现了一个 2 CPI 的新平台，2 CPI 的平台的拐点出现在 2048，第三个拐点出现在 8192，对应 L1 ICache 容量。&lt;/p&gt;&lt;p&gt;用 32B 间距测试：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_icestorm_btb_32b.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;第一个拐点在 1024，第二个拐点出现在 4096，对应 L1 ICache 容量，没有观察到 2 CPI。&lt;/p&gt;&lt;p&gt;用 64B 间距测试：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_icestorm_btb_64b.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;第一个拐点在 512，第二个拐点出现在 2048，对应 L1 ICache 容量。&lt;/p&gt;&lt;p&gt;Icestorm 的 BTB 测试结果并不像 Firestorm 那样有规律，根据这个现象，给出一些猜测：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;可能只有一级 BTB，但它的 Index 函数进行了一些 Hash 而非直接取 PC 某几位，使得随着分支的间距增大，CPI=1 的拐点并非单调递减；但这无法解释为何 16B 间距时会出现 2 CPI 的平台&lt;/li&gt;&lt;li&gt;可能有两级 BTB，它们并非简单地级联，而是通过不同的组织方式，在不同的区间内发挥作用&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;针对 4B 间距没有出现 CPI&amp;gt;3 的情况，给出一些猜测：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;测试规模不够大，把分支数量继续增大，才能出现 CPI&amp;gt;3 的情况&lt;/li&gt;&lt;li&gt;指令预取器在工作，当 footprint 大于 128KB L1 ICache 时，能提前把指令取进来&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;l1-itlb&#34;&gt;L1 ITLB&lt;a class=&#34;headerlink&#34; href=&#34;#l1-itlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;构造一系列的 B 指令，使得 B 指令分布在不同的 page 上，使得 ITLB 成为瓶颈，在 Firestorm 上进行测试：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_firestorm_itlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;从 1 Cycle 到 3 Cycle 的增加是由于 L1 BTB 的冲突缺失，之后在 192 个页时从 3 Cycle 快速增加到 13 Cycle，则对应了 192 项的 L1 ITLB 容量。&lt;/p&gt;&lt;p&gt;在 Icestorm 上重复实验：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_icestorm_itlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;只有一个拐点，在 128 个页时，性能从 1 Cycle 下降到 8 Cycle，意味 L1 ITLB 容量是 128 项。&lt;/p&gt;&lt;h3 id=&#34;decode&#34;&gt;Decode&lt;a class=&#34;headerlink&#34; href=&#34;#decode&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;从前面的测试来看，Firestorm 最大观察到 8 IPC，Icestorm 最大观察到 4 IPC，那么 Decode 宽度也至少是这么多，暂时也不能排除有更大的 Decode 宽度。&lt;/p&gt;&lt;h3 id=&#34;return-stack&#34;&gt;Return Stack&lt;a class=&#34;headerlink&#34; href=&#34;#return-stack&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;构造不同深度的调用链，测试每次调用花费的平均时间，在 Firestorm 上得到下面的图：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_firestorm_rs.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到调用链深度为 50 时性能突然变差，因此 Firestorm 的 Return Stack 深度为 50。在 Icestorm 上测试：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_icestorm_rs.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到调用链深度为 32 时性能突然变差，因此 Icestorm 的 Return Stack 深度为 32。&lt;/p&gt;&lt;h2 id=&#34;后端&#34;&gt;后端&lt;a class=&#34;headerlink&#34; href=&#34;#后端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;物理寄存器堆&#34;&gt;物理寄存器堆&lt;a class=&#34;headerlink&#34; href=&#34;#物理寄存器堆&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;为了测试物理寄存器堆的大小，一般会用两个依赖链很长的操作放在开头和结尾，中间填入若干个无关的指令，并且用这些指令来耗费物理寄存器堆。Firestorm 测试结果见下图：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_firestorm_prf.png&#34; /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;32b/64b int：测试 speculative 32/64 位整数寄存器的数量，拐点在 362&lt;/li&gt;&lt;li&gt;32b fp：测试 speculative 32 位浮点寄存器的数量，拐点在 382&lt;/li&gt;&lt;li&gt;flags：测试 speculative NZCV 寄存器的数量，拐点在 123&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Icestorm 测试结果如下：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_icestorm_prf.png&#34; /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;32b/64b int：测试 speculative 32/64 位整数寄存器的数量，拐点在 78&lt;/li&gt;&lt;li&gt;32b fp：测试 speculative 32 位浮点寄存器的数量，拐点在 382&lt;/li&gt;&lt;li&gt;flags：测试 speculative NZCV 寄存器的数量，拐点在 75&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;注意这里测试的都是能够用于预测执行的寄存器数量，实际的物理寄存器堆还需要保存架构寄存器。但具体保存多少个架构寄存器不确定，但至少 32 个整数通用寄存器和浮点寄存器是一定有的，但可能还有一些额外的需要重命名的状态也要算进来。&lt;/p&gt;&lt;h3 id=&#34;load-store-unit--l1-dcache&#34;&gt;Load Store Unit + L1 DCache&lt;a class=&#34;headerlink&#34; href=&#34;#load-store-unit--l1-dcache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;l1-dcache-容量&#34;&gt;L1 DCache 容量&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dcache-容量&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;官方信息：通过 sysctl 可以看到，Firestorm 具有 128KB L1 DCache，Icestorm 具有 64KB L1 DCache：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;hw.perflevel0.l1dcachesize: 131072&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;hw.perflevel1.l1dcachesize: 65536&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;构造不同大小 footprint 的 pointer chasing 链，测试不同 footprint 下每条 load 指令耗费的时间，Firestorm 上的结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_firestorm_l1dc.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 128KB 出现了明显的拐点，对应的就是 128KB 的 L1 DCache 容量。L1 DCache 范围内延迟是 3 cycle，之后提升到 16 cycle。&lt;/p&gt;&lt;p&gt;Icestorm 上的结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_icestorm_l1dc.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 64KB 出现了明显的拐点，对应的就是 64KB 的 L1 DCache 容量。L1 DCache 范围内延迟是 3 cycle，之后提升到 14 cycle。&lt;/p&gt;&lt;h4 id=&#34;l1-dtlb-容量&#34;&gt;L1 DTLB 容量&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dtlb-容量&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;用类似的方法测试 L1 DTLB 容量，只不过这次 pointer chasing 链的指针分布在不同的 page 上，使得 DTLB 成为瓶颈，在 Firestorm 上：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_firestorm_l1dtlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;从 160 个页开始性能下降，到 250 个页时性能稳定在 9 CPI，认为 Firestorm 的 L1 DTLB 有 160 项。9 CPI 包括了 L1 DTLB miss L2 TLB hit 带来的额外延迟。&lt;/p&gt;&lt;p&gt;如果每两个页放一个指针，则拐点前移到 80；每四个页放一个指针，拐点变成 40；每八个页放一个指针，拐点变成 20；每 16 个页一个指针，拐点是 10；每 32 个页一个指针，拐点变成 5；每 64 个页一个指针，拐点依然是 5。说明 Firestorm 的 L1 DTLB 是 5 路组相连，32 个 Set，Index 是 VA[18:14]，注意页表大小是 16KB。&lt;/p&gt;&lt;p&gt;Icestorm:&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_icestorm_l1dtlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;从 128 个页开始性能下降，到 160 个页时性能稳定在 10 CPI，认为 Icestorm 的 L1 DTLB 有 128 项。10 CPI 包括了 L1 DTLB miss L2 TLB hit 带来的额外延迟。&lt;/p&gt;&lt;p&gt;如果每两个页放一个指针，则拐点前移到 64；每四个页放一个指针，拐点变成 32；每八个页放一个指针，拐点变成 16；每 16 个页一个指针，拐点是 8；每 32 个页一个指针，拐点变成 4；每 64 个页一个指针，拐点依然是 4。说明 Icestorm 的 L1 DTLB 是 4 路组相连，32 个 Set，Index 是 VA[18:14]。&lt;/p&gt;&lt;h4 id=&#34;loadstore-带宽&#34;&gt;Load/Store 带宽&lt;a class=&#34;headerlink&#34; href=&#34;#loadstore-带宽&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;针对 Load Store 带宽，实测 Firestorm 每个周期可以完成：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;3x 128b Load + 1x 128b Store&lt;/li&gt;&lt;li&gt;2x 128b Load + 2x 128b Store&lt;/li&gt;&lt;li&gt;1x 128b Load + 2x 128b Store&lt;/li&gt;&lt;li&gt;2x 128b Store&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果把每条指令的访存位宽从 128b 改成 256b，读写带宽不变，指令吞吐减半。也就是说最大的读带宽是 48B/cyc，最大的写带宽是 32B/cyc，二者不能同时达到。&lt;/p&gt;&lt;p&gt;实测 Icestorm 每个周期可以完成：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2x 128b Load&lt;/li&gt;&lt;li&gt;1x 128b Load + 1x 128b Store&lt;/li&gt;&lt;li&gt;1x 128b Store&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果把每条指令的访存位宽从 128b 改成 256b，读写带宽不变，指令吞吐减半。也就是说最大的读带宽是 32B/cyc，最大的写带宽是 16B/cyc，二者不能同时达到。&lt;/p&gt;&lt;h4 id=&#34;memory-dependency-predictor&#34;&gt;Memory Dependency Predictor&lt;a class=&#34;headerlink&#34; href=&#34;#memory-dependency-predictor&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;为了预测执行 Load，需要保证 Load 和之前的 Store 访问的内存没有 Overlap，那么就需要有一个预测器来预测 Load 和 Store 之前在内存上的依赖。参考 &lt;a href=&#34;https://blog.stuffedcow.net/2014/01/x86-memory-disambiguation/&#34;&gt;Store-to-Load Forwarding and Memory Disambiguation in x86 Processors&lt;/a&gt; 的方法，构造两个指令模式，分别在地址和数据上有依赖：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;数据依赖，地址无依赖：&lt;code&gt;str x3, [x1]&lt;/code&gt; 和 &lt;code&gt;ldr x3, [x2]&lt;/code&gt;&lt;/li&gt;&lt;li&gt;地址依赖，数据无依赖：&lt;code&gt;str x2, [x1]&lt;/code&gt; 和 &lt;code&gt;ldr x1, [x2]&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;初始化时，&lt;code&gt;x1&lt;/code&gt; 和 &lt;code&gt;x2&lt;/code&gt; 指向同一个地址，重复如上的指令模式，观察到多少条 &lt;code&gt;ldr&lt;/code&gt; 指令时会出现性能下降，在 Firestorm 上测试：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_firestorm_memory_dependency_predictor.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;数据依赖没有明显的阈值，但从 84 开始出现了一个小的增长，且斜率不为零；地址依赖的阈值是 70。&lt;/p&gt;&lt;p&gt;Icestorm:&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_icestorm_memory_dependency_predictor.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;数据依赖和地址依赖的阈值都是 13。&lt;/p&gt;&lt;h4 id=&#34;store-to-load-forwarding&#34;&gt;Store to Load Forwarding&lt;a class=&#34;headerlink&#34; href=&#34;#store-to-load-forwarding&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;h5 id=&#34;firestorm_1&#34;&gt;Firestorm&lt;a class=&#34;headerlink&#34; href=&#34;#firestorm_1&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;经过实际测试，Firestorm 上如下的情况可以成功转发，对地址 x 的 Store 转发到对地址 y 的 Load 成功时 y-x 的取值范围：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Store\Load&lt;/th&gt;&lt;th&gt;8b Load&lt;/th&gt;&lt;th&gt;16b Load&lt;/th&gt;&lt;th&gt;32b Load&lt;/th&gt;&lt;th&gt;64b Load&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;8b Store&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;[-1,0]&lt;/td&gt;&lt;td&gt;[-3,0]&lt;/td&gt;&lt;td&gt;[-7,0]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16b Store&lt;/td&gt;&lt;td&gt;[0,1]&lt;/td&gt;&lt;td&gt;[-1,1]&lt;/td&gt;&lt;td&gt;[-3,1]&lt;/td&gt;&lt;td&gt;[-7,1]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;32b Store&lt;/td&gt;&lt;td&gt;[0,3]&lt;/td&gt;&lt;td&gt;[-1,3]&lt;/td&gt;&lt;td&gt;[-3,3]&lt;/td&gt;&lt;td&gt;[-7,3]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;64b Store&lt;/td&gt;&lt;td&gt;[0,7]&lt;/td&gt;&lt;td&gt;[-1,7]&lt;/td&gt;&lt;td&gt;[-3,7]&lt;/td&gt;&lt;td&gt;[-7,7]&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;从上表可以看到，所有 Store 和 Load Overlap 的情况，无论地址偏移，都能成功转发。甚至在 Load 或 Store 跨越 64B 缓存行边界时，也可以成功转发，代价是多一个周期。&lt;/p&gt;&lt;p&gt;一个 Load 需要转发两个、四个甚至八个 Store 的数据时，如果数据跨越缓存行，则不能转发，但其他情况下，无论地址偏移，都可以转发，只是比从单个 Store 转发需要多耗费 1-4 个周期。&lt;/p&gt;&lt;p&gt;成功转发时 7.5 cycle，跨缓存行且转发失败时 28+ cycle。&lt;/p&gt;&lt;p&gt;小结：Apple Firestorm 的 Store to Load Forwarding：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;1 ld + 1 st: 支持&lt;/li&gt;&lt;li&gt;1 ld + 2 st: 支持，要求不跨越 64B 边界&lt;/li&gt;&lt;li&gt;1 ld + 4 st: 支持，要求不跨越 64B 边界&lt;/li&gt;&lt;li&gt;1 ld + 8 st: 支持，要求不跨越 64B 边界&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;icestorm_1&#34;&gt;Icestorm&lt;a class=&#34;headerlink&#34; href=&#34;#icestorm_1&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;在 Icestorm 上，如果 Load 和 Store 访问范围出现重叠，则需要 10 Cycle，无论是和几个 Store 重叠，也无论是否跨缓存行。&lt;/p&gt;&lt;h4 id=&#34;load-to-use-latency&#34;&gt;Load to use latency&lt;a class=&#34;headerlink&#34; href=&#34;#load-to-use-latency&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;h5 id=&#34;firestorm_2&#34;&gt;Firestorm&lt;a class=&#34;headerlink&#34; href=&#34;#firestorm_2&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;实测 Firestorm 的 Load to use latency 针对 pointer chasing 场景做了优化，在下列的场景下可以达到 3 cycle:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;ldr x0, [x0]&lt;/code&gt;: load 结果转发到基地址，无偏移&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldr x0, [x0, 8]&lt;/code&gt;：load 结果转发到基地址，有立即数偏移&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldr x0, [x0, x1]&lt;/code&gt;：load 结果转发到基地址，有寄存器偏移&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldp x0, x1, [x0]&lt;/code&gt;：load pair 的第一个目的寄存器转发到基地址，无偏移&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果访存跨越了 8B 边界，则退化到 4 cycle。&lt;/p&gt;&lt;p&gt;在下列场景下 Load to use latency 则是 4 cycle：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;load 的目的寄存器作为 alu 的源寄存器（下称 load to alu latency）&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldr x0, [sp, x0, lsl #3]&lt;/code&gt;：load 结果转发到 index&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldp x1, x0, [x0]&lt;/code&gt;：load pair 的第二个目的寄存器转发到基地址，无偏移&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;icestorm_2&#34;&gt;Icestorm&lt;a class=&#34;headerlink&#34; href=&#34;#icestorm_2&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;实测 Icestorm 的 Load to use latency 针对 pointer chasing 场景做了优化，在下列的场景下可以达到 3 cycle:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;ldr x0, [x0]&lt;/code&gt;: load 结果转发到基地址，无偏移&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldr x0, [x0, 8]&lt;/code&gt;：load 结果转发到基地址，有立即数偏移&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldr x0, [x0, x1]&lt;/code&gt;：load 结果转发到基地址，有寄存器偏移&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldp x0, x1, [x0]&lt;/code&gt;：load pair 的第一个目的寄存器转发到基地址，无偏移&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果访存跨越了 8B/16B/32B 边界，依然是 3 cycle；跨越了 64B 边界则退化到 7 cycle。&lt;/p&gt;&lt;p&gt;在下列场景下 Load to use latency 则是 4 cycle：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;load 的目的寄存器作为 alu 的源寄存器（下称 load to alu latency）&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldr x0, [sp, x0, lsl #3]&lt;/code&gt;：load 结果转发到 index&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldp x1, x0, [x0]&lt;/code&gt;：load pair 的第二个目的寄存器转发到基地址，无偏移&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;virtual-address-utagway-predictor&#34;&gt;Virtual Address UTag/Way-Predictor&lt;a class=&#34;headerlink&#34; href=&#34;#virtual-address-utagway-predictor&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Linear Address UTag/Way-Predictor 是 AMD 的叫法，但使用相同的测试方法，也可以在 Apple M1 上观察到类似的现象，猜想它也用了类似的基于虚拟地址的 UTag/Way Predictor 方案，并测出来它的 UTag 也有 8 bit，Firestorm 和 Icestorm 都是相同的：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;VA[14] xor VA[22] xor VA[30] xor VA[38] xor VA[46]&lt;/li&gt;&lt;li&gt;VA[15] xor VA[23] xor VA[31] xor VA[39] xor VA[47]&lt;/li&gt;&lt;li&gt;VA[16] xor VA[24] xor VA[32] xor VA[40]&lt;/li&gt;&lt;li&gt;VA[17] xor VA[25] xor VA[33] xor VA[41]&lt;/li&gt;&lt;li&gt;VA[18] xor VA[26] xor VA[34] xor VA[42]&lt;/li&gt;&lt;li&gt;VA[19] xor VA[27] xor VA[35] xor VA[43]&lt;/li&gt;&lt;li&gt;VA[20] xor VA[28] xor VA[36] xor VA[44]&lt;/li&gt;&lt;li&gt;VA[21] xor VA[29] xor VA[37] xor VA[45]&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;一共有 8 bit，由 VA[47:14] 折叠而来。&lt;/p&gt;&lt;h3 id=&#34;执行单元&#34;&gt;执行单元&lt;a class=&#34;headerlink&#34; href=&#34;#执行单元&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;想要测试有多少个执行单元，每个执行单元可以运行哪些指令，首先要测试各类指令在无依赖情况下的的 IPC，通过 IPC 来推断有多少个能够执行这类指令的执行单元；但由于一个执行单元可能可以执行多类指令，于是进一步需要观察在混合不同类的指令时的 IPC，从而推断出完整的结果。&lt;/p&gt;&lt;h4 id=&#34;firestorm_3&#34;&gt;Firestorm&lt;a class=&#34;headerlink&#34; href=&#34;#firestorm_3&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;在 Firestorm 上测试如下各类指令的延迟和每周期吞吐：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;指令&lt;/th&gt;&lt;th&gt;延迟&lt;/th&gt;&lt;th&gt;吞吐&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;asimd int add&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd aesd/aese&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd aesimc/aesmc&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fabs&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fadd&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fdiv 64b&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fdiv 32b&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fmax&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fmin&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fmla&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fmul&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fneg&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd frecpe&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd frsqrte&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fsqrt 64b&lt;/td&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fsqrt 32b&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp cvtf2i (fcvtzs)&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp cvti2f (scvtf)&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fabs&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fadd&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv 64b&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv 32b&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fjcvtzs&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fmax&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fmin&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fmov f2i&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fmov i2f&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fmul&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fneg&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp frecpe&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp frecpx&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp frsqrte&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fsqrt 64b&lt;/td&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fsqrt 32b&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int add&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;4.6&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int addi&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int bfm&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int crc&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int csel&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int madd (addend)&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int madd (others)&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int mrs nzcv&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int mul&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int nop&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int sbfm&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;4.7&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int sdiv&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int smull&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int ubfm&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;4.7&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int udiv&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;not taken branch&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;taken branch&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;mem asimd load&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;mem asimd store&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;mem int load&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;mem int store&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;从上面的结果可以初步得到的信息：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;标量浮点和 ASIMD 吞吐最大都是 4，意味着有 4 个浮点/ASIMD 执行单元，但并非完全对称，例如 fdiv/frecpe/frecpx/frsqrte/fsqrt/fjcvtzs 由于吞吐不超过 1，大概率只能在一个执行单元内执行。但这些指令是不是都只能在同一个执行单元内执行，还需要进一步的测试&lt;/li&gt;&lt;li&gt;浮点和整数之间的 move 或 convert 指令，fmov i2f/cvti2f 吞吐是 3，fmov f2i/cvtf2i 吞吐是 2，那么这些指令是在哪个执行单元里实现的，是否需要同时占用整数执行单元和浮点执行单元，需要进一步测试&lt;/li&gt;&lt;li&gt;整数方面，根据吞吐，推断出如下几类指令对应的执行单元数量：&lt;ol&gt;&lt;li&gt;ALU: 6&lt;/li&gt;&lt;li&gt;CSEL: 3&lt;/li&gt;&lt;li&gt;Mul/Br/MRS NZCV: 2&lt;/li&gt;&lt;li&gt;CRC/BFM/MAdd/Div: 1&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;虽然 Br 的吞吐可以达到 2，但是每周期只能有一个 taken branch；目前一些架构可以做到每周期超过一个 taken branch，此时 Br 的吞吐一般会给到 3&lt;/li&gt;&lt;li&gt;访存方面，每周期最多 3 Load 或者 2 Store&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;首先来看浮点和 ASIMD 单元，根据上面的信息，认为至少有 4 个执行单元，每个执行单元都可以做这些操作：asimd int add/aes/fabs/fadd/fmax/fmin/fmla/fmul/fneg，下面把这些指令称为 basic fp/asimd ops + aes。接下来要判断，fmov f2i/fmov i2f/fdiv/frecpe/frecpx/frsqrte/fsqrt 由哪些执行单元负责执行，方法是把这些指令混合起来测试吞吐（此处的吞吐不代表 CPI，而是每周能够执行多少次指令组合，例如用 2 条指令的组合测试，那么吞吐等于 CPI 除以 2）：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;指令&lt;/th&gt;&lt;th&gt;吞吐&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;fp fdiv + fp frecpe&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv + fp frecpx&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv + fp frsqrte&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv + fp fsqrt&lt;/td&gt;&lt;td&gt;0.32=3/3.12&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv + fmov f2i&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv + 2x fmov f2i&lt;/td&gt;&lt;td&gt;0.67=1/1.50&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv + 3x fmov i2f&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv + 4x fmov i2f&lt;/td&gt;&lt;td&gt;0.75=1/1.33&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fmov i2f + 4x fp fadd&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fmov f2i + 4x fp fadd&lt;/td&gt;&lt;td&gt;0.67=1/1.50&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;根据以上测试结果，可以得到如下的推论：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;fp fdiv/frecpe/frecpx/frsqrte 混合的时候，吞吐只有一半，IPC 不变，说明这些指令在同一个执行单元中，混合并不能带来更高的 IPC&lt;/li&gt;&lt;li&gt;fp fdiv 和 fp fsqrt 混合时，吞吐下降到 0.32 一个不太整的数字，猜测是因为它们属于同一个执行单元内的不同流水线，抢占寄存器堆写口&lt;/li&gt;&lt;li&gt;fp fdiv + fmov f2i 的时候吞吐是 1，而 fdiv + 2x fmov f2i 时吞吐下降到 0.67，IPC 维持在 2，说明有两个执行单元，都可以执行 fmov f2i，但只有其中一个可以执行 fp fdiv，导致 fdiv + 2x fmov f2i 的时候会抢执行单元&lt;/li&gt;&lt;li&gt;fp fdiv + 3x fmov i2f 的时候吞吐是 1，而 fdiv + 4x fmov i2f 时吞吐下降到 0.75，此时每周期还是执行 3 条 fmov i2f 指令，意味着 fdiv 没有抢占 fmov i2f 的执行单元，它们用的执行单元是独立的&lt;/li&gt;&lt;li&gt;fmov i2f + 4x fp fadd 的时候吞吐是 1，说明 fmov i2f 没有抢占 fp fadd 的执行单元&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;推断这四个执行单元支持的操作：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;basic fp/asimd ops + aes + fdiv + frecpe + frecpx + frsqrte + fsqrt + fmov f2i + cvtf2i&lt;/li&gt;&lt;li&gt;basic fp/asimd ops + aes + fmov f2i + cvtf2i&lt;/li&gt;&lt;li&gt;basic fp/asimd ops + aes&lt;/li&gt;&lt;li&gt;basic fp/asimd ops + aes&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;当然还有很多指令没有测，不过原理是一样的。&lt;/p&gt;&lt;p&gt;访存部分，前面已经在测 LSU 的时候测过了，每周期 Load + Store 不超过 4 个，其中 Load 不超过 3 个，Store 不超过 2 个。虽然从 IPC 的角度来看 LSU 的 Load/Store Pipe 未必准确，比如可能它发射和提交的带宽是不同的，但先暂时简化为如下的执行单元：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;load + store&lt;/li&gt;&lt;li&gt;load&lt;/li&gt;&lt;li&gt;load&lt;/li&gt;&lt;li&gt;store&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;最后是整数部分。从 addi 的指令来看，有 6 个 ALU，能够执行基本的整数指令（add/ubfm/sbfm 的吞吐有时候测出来 4.6-4.7，有时候测出来 6，怀疑是进入了什么低功耗模式）。但其他很多指令可能只有一部分执行单元可以执行：bfm/crc/csel/madd/mrs nzcv/mul/div/branch/fmov i2f。为了测试这些指令使用的执行单元是否重合，进行一系列的混合指令测试，吞吐的定义和上面相同：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;指令&lt;/th&gt;&lt;th&gt;吞吐&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;3x int csel + 3x fmov i2f&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3x int csel + 2x fmov f2i&lt;/td&gt;&lt;td&gt;0.75=1/1.33&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3x int csel + int bfm&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3x int csel + int crc&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3x int csel + int madd&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3x int csel + int mul&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3x int csel + int sdiv&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3x int csel + mrs nzcv&lt;/td&gt;&lt;td&gt;0.75=1/1.33&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3x int csel + not taken branch&lt;/td&gt;&lt;td&gt;0.75=1/1.33&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;mrs nzcv + not taken branch&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;mrs nzcv + 2x not taken branch&lt;/td&gt;&lt;td&gt;0.67=1/1.50&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2x fmov f2i + 2x not taken branch&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2x fmov f2i + 2x int mul&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int madd + 2x int mul&lt;/td&gt;&lt;td&gt;0.67=1/1.50&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int madd + int sdiv&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int madd + int crc&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;根据上述结果分析：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;吞吐与不混合时相同，代表混合的指令对应的执行单元不重合&lt;/li&gt;&lt;li&gt;3x int csel + 2x fmov f2i 的 IPC 等于 4，意味着有四个执行单元，其中有三个可以执行 int csel，两个可以执行 fmov f2i，也就意味着其中有一个执行单元可以执行 int csel 和 fmov f2i，即有这样的四个执行单元：&lt;ol&gt;&lt;li&gt;alu + csel&lt;/li&gt;&lt;li&gt;alu + csel&lt;/li&gt;&lt;li&gt;alu + csel + fmov f2i&lt;/li&gt;&lt;li&gt;alu + fmov f2i&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;3x int csel + mrs nzcv/not taken branch 的 IPC 等于 3，说明它们的执行单元是重合的；又因为 2x fmov f2i + 2x not taken branch 的吞吐是 1，说明它们的执行单元不重合，那么上述四个执行单元只能是：&lt;ol&gt;&lt;li&gt;alu + csel + branch&lt;/li&gt;&lt;li&gt;alu + csel + branch&lt;/li&gt;&lt;li&gt;alu + csel + fmov f2i&lt;/li&gt;&lt;li&gt;alu + fmov f2i&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;mrs nzcv + 2x not taken branch 的 IPC 等于 2，说明它们的执行单元是重合的，那么上述四个执行单元是：&lt;ol&gt;&lt;li&gt;alu + csel + branch + mrs nzcv&lt;/li&gt;&lt;li&gt;alu + csel + branch + mrs nzcv&lt;/li&gt;&lt;li&gt;alu + csel + fmov f2i&lt;/li&gt;&lt;li&gt;alu + fmov f2i&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;csel 和 mul 不重合，f2i 和 mul 也不重合，说明 mul 在剩下的两个执行单元内：&lt;ol&gt;&lt;li&gt;alu + csel + branch + mrs nzcv&lt;/li&gt;&lt;li&gt;alu + csel + branch + mrs nzcv&lt;/li&gt;&lt;li&gt;alu + csel + fmov f2i&lt;/li&gt;&lt;li&gt;alu + fmov f2i&lt;/li&gt;&lt;li&gt;alu + mul&lt;/li&gt;&lt;li&gt;alu + mul&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;madd 和 mul 重合，madd 和 crc 重合，那么：&lt;ol&gt;&lt;li&gt;alu + csel + branch + mrs nzcv&lt;/li&gt;&lt;li&gt;alu + csel + branch + mrs nzcv&lt;/li&gt;&lt;li&gt;alu + csel + fmov f2i&lt;/li&gt;&lt;li&gt;alu + fmov f2i&lt;/li&gt;&lt;li&gt;alu + mul + madd + crc&lt;/li&gt;&lt;li&gt;alu + mul&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;得到初步的结果：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;alu + csel + branch + mrs nzcv&lt;/li&gt;&lt;li&gt;alu + csel + branch + mrs nzcv&lt;/li&gt;&lt;li&gt;alu + csel + fmov f2i&lt;/li&gt;&lt;li&gt;alu + fmov f2i&lt;/li&gt;&lt;li&gt;alu + mul + madd + crc&lt;/li&gt;&lt;li&gt;alu + mul&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;还有很多其他的指令没有测试，不过方法是类似的。从上面的结果里，可以看到一些值得一提的点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;fmov f2i 同时占用了两个浮点执行单元和两个整数执行单元，这主要是为了复用寄存器堆读写口：fmov f2i 需要读浮点寄存器堆，又需要写整数寄存器堆，那就在浮点侧读寄存器，在整数侧写寄存器。&lt;/li&gt;&lt;li&gt;fmov i2f 既不在浮点，也不在整数，那只能在访存了：而正好访存执行单元需要读整数，写整数或浮点，那就可以复用它的寄存器堆写口来实现 fmov i2f 的功能。&lt;/li&gt;&lt;li&gt;可见整数/浮点/访存执行单元并不是完全隔离的，例如一些微架构，整数和浮点是直接放在一起的。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;小结：Firestorm 的执行单元如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;alu + csel + branch + mrs nzcv&lt;/li&gt;&lt;li&gt;alu + csel + branch + mrs nzcv&lt;/li&gt;&lt;li&gt;alu + csel + fmov f2i&lt;/li&gt;&lt;li&gt;alu + fmov f2i&lt;/li&gt;&lt;li&gt;alu + mul + madd + crc&lt;/li&gt;&lt;li&gt;alu + mul&lt;/li&gt;&lt;li&gt;load + store&lt;/li&gt;&lt;li&gt;load&lt;/li&gt;&lt;li&gt;load&lt;/li&gt;&lt;li&gt;store&lt;/li&gt;&lt;li&gt;basic fp/asimd ops + aes + fdiv + frecpe + frecpx + frsqrte + fsqrt + fmov f2i + cvtf2i&lt;/li&gt;&lt;li&gt;basic fp/asimd ops + aes + fmov f2i + cvtf2i&lt;/li&gt;&lt;li&gt;basic fp/asimd ops + aes&lt;/li&gt;&lt;li&gt;basic fp/asimd ops + aes&lt;/li&gt;&lt;/ol&gt;&lt;h4 id=&#34;icestorm_3&#34;&gt;Icestorm&lt;a class=&#34;headerlink&#34; href=&#34;#icestorm_3&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;接下来用类似的方法测试 Icestorm：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;指令&lt;/th&gt;&lt;th&gt;延迟&lt;/th&gt;&lt;th&gt;吞吐&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;asimd int add&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd aesd/aese&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd aesimc/aesmc&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fabs&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fadd&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fdiv 64b&lt;/td&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fdiv 32b&lt;/td&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fmax&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fmin&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fmla&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fmul&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fneg&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd frecpe&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd frsqrte&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fsqrt 64b&lt;/td&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;asimd fsqrt 32b&lt;/td&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp cvtf2i (fcvtzs)&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp cvti2f (scvtf)&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fabs&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fadd&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv 64b&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv 32b&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fjcvtzs&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fmax&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fmin&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fmov f2i&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fmov i2f&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fmul&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fneg&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp frecpe&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp frecpx&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp frsqrte&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fsqrt 64b&lt;/td&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fsqrt 32b&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int add&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int addi&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int bfm&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int crc&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int csel&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int madd (addend)&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int madd (others)&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int mrs nzcv&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int mul&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int nop&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int sbfm&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int sdiv&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;0.125=1/8&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int smull&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int ubfm&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int udiv&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;0.125=1/8&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;not taken branch&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;taken branch&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;mem asimd load&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;mem asimd store&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;mem int load&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;mem int store&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;从上面的结果可以初步得到的信息：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;标量浮点和 ASIMD 吞吐最大都是 2，意味着有 2 个浮点/ASIMD 执行单元，但并非完全对称，例如 fdiv/frecpe/frecpx/frsqrte/fsqrt/fjcvtzs 由于吞吐不超过 1，大概率只能在一个执行单元内执行。但这些指令是不是都只能在同一个执行单元内执行，还需要进一步的测试&lt;/li&gt;&lt;li&gt;整数方面，根据吞吐，推断出如下几类指令对应的执行单元数量：&lt;ol&gt;&lt;li&gt;ALU/CSEL/MRS NZCV/SBFM/UBFM: 3&lt;/li&gt;&lt;li&gt;Br: 2&lt;/li&gt;&lt;li&gt;Mul/CRC/BFM/MAdd/Div: 1&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;虽然 Br 的吞吐可以达到 2，但是每周期只能有一个 taken branch&lt;/li&gt;&lt;li&gt;访存方面，每周期最多 2 Load 或者 1 Store&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;还是先看浮点，基本指令 add/aes/fabs/fadd/fmax/fmin/fmla/fmul/fneg 都能做到 2 的吞吐，也就是这两个指定单元都能执行这些基本指令。接下来测其余指令的混合吞吐（吞吐定义见上）：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;指令&lt;/th&gt;&lt;th&gt;吞吐&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;fp fdiv + fp frecpe&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv + fp frecpx&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv + fp frsqrte&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv + fp fsqrt&lt;/td&gt;&lt;td&gt;0.31=3/3.25&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv + fmov f2i&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv + 2x fmov i2f&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp fdiv + 3x fmov i2f&lt;/td&gt;&lt;td&gt;0.67/1/1.50&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;可见 fdiv/frecpe/frecpx/frsqrte/fsqrt/fmov f2i 都在同一个执行单元内：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;basic fp/asimd ops + aes + fdiv + frecpe + frecpx + frsqrte + fsqrt + fmov f2i&lt;/li&gt;&lt;li&gt;basic fp/asimd ops + aes&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;还有很多指令没有测，不过原理是一样的。访存在前面测 LSU 的时候已经测过了：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;load + store&lt;/li&gt;&lt;li&gt;load&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;最后是整数部分。从 addi 的指令来看，有 3 个 ALU，能够执行基本的整数指令。但其他很多指令可能只有一部分执行单元可以执行：bfm/crc/csel/madd/mul/div/branch。为了测试这些指令使用的执行单元是否重合，进行一系列的混合指令测试，吞吐的定义和上面相同：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;指令&lt;/th&gt;&lt;th&gt;吞吐&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;int madd + int mul&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int madd + int crc&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int madd + 2x not taken branch&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;由此可见，madd/mul/crc 是一个执行单元，和 branch 的两个执行单元不重合，因此整数侧的执行单元有：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;alu + csel + mrs nzcv + branch&lt;/li&gt;&lt;li&gt;alu + csel + mrs nzcv + branch&lt;/li&gt;&lt;li&gt;alu + csel + mrs nzcv + madd + mul + crc&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;小结：Icestorm 的执行单元如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;alu + csel + mrs nzcv + branch&lt;/li&gt;&lt;li&gt;alu + csel + mrs nzcv + branch&lt;/li&gt;&lt;li&gt;alu + csel + mrs nzcv + madd + mul + crc&lt;/li&gt;&lt;li&gt;load + store&lt;/li&gt;&lt;li&gt;load&lt;/li&gt;&lt;li&gt;basic fp/asimd ops + aes + fdiv + frecpe + frecpx + frsqrte + fsqrt + fmov f2i&lt;/li&gt;&lt;li&gt;basic fp/asimd ops + aes&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;scheduler&#34;&gt;Scheduler&lt;a class=&#34;headerlink&#34; href=&#34;#scheduler&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;为了测试 Scheduler 的大小和组织方式（分布式还是集中式），测试方法是：首先用长延迟的操作堵住 ROB，接着用若干条依赖长延迟操作的指令堵住 Scheduler，当指令塞不进去的时候，就说明 Scheduler 满了。更进一步，由于现在很多处理器会引入 Non Scheduling Queue，里面的指令不会直接调度进执行单元，也不检查它依赖的操作数是否已经准备好，此时为了区分可调度部分和不可调度部分，在依赖长延迟操作的指令后面，添加若干条不依赖长延迟操作的指令，这样测出来的就是可调度部分的深度。&lt;/p&gt;&lt;h4 id=&#34;firestorm_4&#34;&gt;Firestorm&lt;a class=&#34;headerlink&#34; href=&#34;#firestorm_4&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;在 Firestorm 上测试，结果如下：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;指令&lt;/th&gt;&lt;th&gt;可调度 + 不可调度&lt;/th&gt;&lt;th&gt;可调度&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;ld&lt;/td&gt;&lt;td&gt;58&lt;/td&gt;&lt;td&gt;48&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;st&lt;/td&gt;&lt;td&gt;58&lt;/td&gt;&lt;td&gt;43&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;alu&lt;/td&gt;&lt;td&gt;158&lt;/td&gt;&lt;td&gt;134&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fp&lt;/td&gt;&lt;td&gt;156&lt;/td&gt;&lt;td&gt;144&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;crc&lt;/td&gt;&lt;td&gt;40&lt;/td&gt;&lt;td&gt;28&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;idiv&lt;/td&gt;&lt;td&gt;40&lt;/td&gt;&lt;td&gt;28&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;bfm&lt;/td&gt;&lt;td&gt;40&lt;/td&gt;&lt;td&gt;28&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fjcvtzs&lt;/td&gt;&lt;td&gt;42&lt;/td&gt;&lt;td&gt;36&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fmov f2i&lt;/td&gt;&lt;td&gt;84&lt;/td&gt;&lt;td&gt;72&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;csel&lt;/td&gt;&lt;td&gt;76&lt;/td&gt;&lt;td&gt;64&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;mrs nzcv&lt;/td&gt;&lt;td&gt;62&lt;/td&gt;&lt;td&gt;50&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;首先看浮点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;可调度部分 fp 是 144，fmov f2i 是 72，fjcvtzs 是 36，有明显的 4:2:1 的关系&lt;/li&gt;&lt;li&gt;fp/fmov f2i/fjcvtzs 吞吐刚好也是 4:2:1 的关系&lt;/li&gt;&lt;li&gt;因此四个执行单元前面各有一个独立的 36 entry 的 Scheduler&lt;/li&gt;&lt;li&gt;不可调度部分，156-144=12，84-72=12，42-36=6，猜测有两个 Non Scheduling Queue，每个 Non Scheduling Queue 6 entry，分别对应两个 Scheduler&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;下面是访存部分，load 和 store 总数一样但 Scheduler 差了 5，不确定是测试误差还是什么问题，暂且考虑为一个统一的 Scheduler 和同一个 Non Scheduling Queue。&lt;/p&gt;&lt;p&gt;最后是整数部分，由于有 6 个整数执行单元，情况会比较复杂：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;可调度部分 alu 一共是 134，其中 csel 是 64，crc/idiv/bfm 都是 28，mrs nzcv 是 50，结合六个整数执行单元，可以得到这六个执行单元对应的 Scheduler 大小关系：&lt;ol&gt;&lt;li&gt;alu + csel + branch + mrs nzcv: x entries&lt;/li&gt;&lt;li&gt;alu + csel + branch + mrs nzcv: 50-x entries&lt;/li&gt;&lt;li&gt;alu + csel + fmov f2i: 14 entries&lt;/li&gt;&lt;li&gt;alu + fmov f2i: y entries&lt;/li&gt;&lt;li&gt;alu + mul + madd + crc: 28 entries&lt;/li&gt;&lt;li&gt;alu + mul: 42-y entries&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;alu 不可调度部分是 158-134=24，crc/idiv/bfm/csel/mrs nzcv 不可调度部分都是 12，考虑到 csel 对应前三个执行单元，并且和 mrs nzcv 一样多，说明前三个执行单元共享一个 12 entry 的 Non Scheduling Queue；剩下三个执行单元共享剩下的 12 entry 的 Non Scheduling Queue&lt;/li&gt;&lt;li&gt;最后只差 x 和 y 的取值没有求出来，可以通过进一步测试来更加精确地求出&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;reorder-buffer&#34;&gt;Reorder Buffer&lt;a class=&#34;headerlink&#34; href=&#34;#reorder-buffer&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;firestorm_5&#34;&gt;Firestorm&lt;a class=&#34;headerlink&#34; href=&#34;#firestorm_5&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Firestorm 的 ROB 采用的是比较特别的方案，它的 entry 地位不是等同的，而是若干个 entry 组合在一起，成为一个 group，每个 group 有若干个 entry，一个 group 对 group 内指令的类型和数量有要求，这就导致用传统方法测 Firestorm 的 ROB，可能会测到特别巨大的数：2200+，也可能测到比较小的数：320+，这就和指令类型有关系。为什么对指令的类型和位置有要求呢，这是为了方便处理有副作用的指令。很多指令是没有副作用的，也不会抛异常，这些指令可以比较随意地放置；但是对于有副作用的指令，retire 时是需要特殊处理的，因此一个合理的设计就是，让这些指令只能放在 group 的开头。&lt;/p&gt;&lt;p&gt;经过测试，发现 Firestorm 上 pointer chasing 的延迟波动比较大，目测是 prefetcher 做了针对性的优化，因此用 fsqrt chain 来做延迟，Firestorm 上一条双精度 fsqrt 的延迟是 13 个周期。构造一个循环，循环包括 M 个串行的 sqrt 和 N 个 nop，如果没有触碰到 ROB 的瓶颈，那么当 N 比较小的时候，瓶颈在串行 fsqrt 上，每次循环的周期数应该为 &lt;code&gt;M*13&lt;/code&gt;；当 N 比较大的时候，瓶颈在每个周期执行 8 个 NOP 上（NOP 被 eliminate 了，不用进 ALU，可以打满 8 的发射宽度），每次循环的周期数应该为 &lt;code&gt;N/8&lt;/code&gt; 再加上一个常数。&lt;/p&gt;&lt;p&gt;但当 N 很大的时候，可能会撞上 ROB 大小的限制。下面给出了不同的 M 取值情况下，可以保证循环周期数在 &lt;code&gt;M*13&lt;/code&gt; 左右的最大的 N 取值：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;M=21, N &amp;lt;= 2109, cycle=273.74, M*13=273&lt;/li&gt;&lt;li&gt;M=22, N &amp;lt;= 2205, cycle=286.75, M*13=286&lt;/li&gt;&lt;li&gt;M=23, N &amp;lt;= 2269, cycle=299.76, M*13=299&lt;/li&gt;&lt;li&gt;M=24, N &amp;lt;= 2277, cycle=312.77, M*13=312&lt;/li&gt;&lt;li&gt;M=25, N &amp;lt;= 2275, cycle=325.77, M*13=325&lt;/li&gt;&lt;li&gt;M=26, N &amp;lt;= 2274, cycle=338.77, M*13=338&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可以看到 N 最大在 2277 附近就不能再增加了，说明遇到了 ROB 的瓶颈，预计 ROB 的所有 group 的 entry 个数加起来大概是 2277 左右。&lt;/p&gt;&lt;p&gt;而如果把填充的指令改成 load/store，inflight 的 load 和 store 最多都是 325 个，并且这和 load/store queue 大小无关，而 load/store 又是有副作用的，很可能是因为它们只能在 ROB 每个 group 里只能放一条，于是看起来 ROB 的容量比 2277 小了很多，只表现出 325。按照这个猜想，对二者进行除法，发现商和 7 十分接近，这大概率意味着 Firestorm 的 ROB 有 325 左右个 group，每个 group 内有 7 个 entry，每个 entry 可以放一条指令（uop）。测试里开头的 20 个 sqrt 也要占用 ROB，实际的 ROB group 数量可能比 325 略多。&lt;/p&gt;&lt;p&gt;结论：Firestorm 的 ROB 有大约 330 个 group，每个 group 最多保存 7 个 uop。&lt;/p&gt;&lt;h3 id=&#34;l2-cache&#34;&gt;L2 Cache&lt;a class=&#34;headerlink&#34; href=&#34;#l2-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：通过 sysctl 可以看到，4 个 Firestorm 核心共享一个 12MB L2 Cache，4 个 Icestorm 核心共享一个 4MB L2 Cache：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;hw.perflevel0.l2cachesize: 12582912&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;hw.perflevel0.cpusperl2: 4&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;hw.perflevel1.l2cachesize: 4194304&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;hw.perflevel1.cpusperl2: 4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;l2-tlb&#34;&gt;L2 TLB&lt;a class=&#34;headerlink&#34; href=&#34;#l2-tlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;firestorm_6&#34;&gt;Firestorm&lt;a class=&#34;headerlink&#34; href=&#34;#firestorm_6&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;从苹果提供的性能计数器来看，L1 TLB 分为指令和数据，而 L2 TLB 是 Unified，不区分指令和数据。沿用之前测试 L1 DTLB 的方法，把规模扩大到 L2 Unified TLB 的范围，就可以测出来 L2 Unified TLB 的容量，下面是 Firestorm 上的测试结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_firestorm_l2tlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到拐点是 3072 个 Page，说明 Firestorm 的 L2 TLB 容量是 3072 项。&lt;/p&gt;&lt;p&gt;把指针的跨度增大：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果每 32 个页一个指针，L2 TLB 拐点前移到 96，L2 TLB 缺失时 CPI 为 36.5&lt;/li&gt;&lt;li&gt;如果每 64 个页一个指针，L2 TLB 拐点前移到 48，L2 TLB 缺失时 CPI 为 36.5&lt;/li&gt;&lt;li&gt;如果每 128 个页一个指针，L2 TLB 拐点前移到 24，L2 TLB 缺失时 CPI 为 36.5&lt;/li&gt;&lt;li&gt;如果每 256 个页一个指针，L2 TLB 拐点前移到 12，L2 TLB 缺失时 CPI 为 35&lt;/li&gt;&lt;li&gt;如果每 512 个页一个指针，L2 TLB 拐点依然在 12，L2 TLB 缺失时 CPI 为 35&lt;/li&gt;&lt;li&gt;观察到命中 L1 DTLB 时 CPI 是 3，命中 L2 TLB 时 CPI 是 9，L2 TLB 缺失时 CPI 是 35-36.5，此时缓存缺失率为 0&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;认为 Firestorm 的 L2 TLB 是 12 Way，256 Set，Index 位是 VA[21:14]。&lt;/p&gt;&lt;h4 id=&#34;icestorm_4&#34;&gt;Icestorm&lt;a class=&#34;headerlink&#34; href=&#34;#icestorm_4&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;在 Icestorm 上测试：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../apple_m1_icestorm_l2tlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到拐点是 1024 个 Page，说明 Icestorm 的 L2 TLB 容量是 1024 项。&lt;/p&gt;&lt;p&gt;把指针的跨度增大：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果每 32 个页一个指针，L2 TLB 拐点前移到 32，L2 TLB 缺失时 CPI 为 33&lt;/li&gt;&lt;li&gt;如果每 64 个页一个指针，L2 TLB 拐点前移到 16，L2 TLB 缺失时 CPI 为 32&lt;/li&gt;&lt;li&gt;如果每 128 个页一个指针，L2 TLB 拐点前移到 8，L2 TLB 缺失时 CPI 为 32&lt;/li&gt;&lt;li&gt;如果每 256 个页一个指针，L2 TLB 拐点前移到 4 和 L1 DTLB 拐点重合，一旦 L1 DTLB 缺失，L2 TLB 也缺失，L2 TLB 缺失时 CPI 为 32&lt;/li&gt;&lt;li&gt;观察到命中 L1 DTLB 时 CPI 是 3，命中 L2 TLB 时 CPI 是 10，L2 TLB 缺失时 CPI 是 32-33，此时缓存缺失率为 0&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;由于 Icestorm 的 L1 DTLB 就是 4 Way，不确定 Icestorm 的 L2 TLB 组相连是 1/2/4 Way 的哪一种，假如是 4 Way，那么 Icestorm 的 L2 TLB 是 4 Way，256 Set，Index 位是 VA[21:14]。&lt;/p&gt;</description><link>https://jia.je/hardware/2024/12/26/apple_m1/</link> <pubDate>Thu, 26 Dec 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/12/26/apple_m1/</guid> </item> <item> <title>Linux 的性能分析（Perf）实现探究</title> <category>aarch64</category> <category>arm</category> <category>linux</category> <category>perf</category> <category>pmu</category> <category>software</category> <description>&lt;h1 id=&#34;linux-的性能分析perf实现探究&#34;&gt;Linux 的性能分析（Perf）实现探究&lt;a class=&#34;headerlink&#34; href=&#34;#linux-的性能分析perf实现探究&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;最近使用 Linux 的性能分析功能比较多，但是很少去探究背后的原理，例如硬件的 PMU 是怎么配置的，每个进程乃至每个线程级别的 PMU 是怎么采样的。这篇博客尝试探究这背后的原理。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;pmu&#34;&gt;PMU&lt;a class=&#34;headerlink&#34; href=&#34;#pmu&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;硬件&#34;&gt;硬件&lt;a class=&#34;headerlink&#34; href=&#34;#硬件&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;支撑性能分析的背后是硬件提供的机制，最常用的就是性能计数器：硬件会提供一些可以配置的性能计数器，在对应的硬件事件触发是，更新这些计数器，然后再由程序读取计数器的值并统计。下面以 ARM 为例，分析一下硬件提供的性能计数的接口：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Cycle 计数器：Cycle Counter Register(PMCCNTR_EL0) 和 Cycle Count Filter Register(PMCCFILTR_EL0)，其中后者控制前者在什么特权态下会进行计数&lt;/li&gt;&lt;li&gt;最多 31 个通用性能计数器：&lt;ol&gt;&lt;li&gt;该性能计数器记录的硬件事件以及计数的条件：PMEVTYPER&lt;n&gt;_EL0，n 取 0 到 31&lt;/li&gt;&lt;li&gt;该性能计数器当前的值：PMEVCNTR&lt;n&gt;_EL0，n 取 0 到 31&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;控制 Cycle 计数器和通用性能计数器的状态：PMCNTENCLR_EL0/PMCNTENSET_EL0/PMCR_EL0&lt;/li&gt;&lt;li&gt;各计数器是否溢出：PMOVSCLR_EL0/PMOVSSET_EL0&lt;/li&gt;&lt;li&gt;当计数器溢出时，PMU 会拉起中断，针对这些中断的配置：PMINTENCLR_EL1/PMINTENSET_EL1&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;注：实际上，由于经常会对指令数进行采样，ARM v9.4/8.9 允许硬件实现一个额外的指令计数器，和 Cycle 计数器类似。&lt;/p&gt;&lt;p&gt;如果想要在用户态频繁地读取性能计数器（cap_user_rdpmc），避免频繁进入内核的开销，也可以在用户态中直接读取性能计数器 PMCCNTR_EL0/PMEVCNTR&lt;n&gt;_EL0：内核在 PMUSERENR_EL0 中进行相应的权限配置即可。v3.9 或更高版本的 PMU 实现允许按照每个 counter 的粒度来控制用户态是否允许访问（PMUACR）。&lt;/p&gt;&lt;p&gt;LoongArch 也是类似的，其接口更简单：它只有通用性能计数器，有如下的 csr 来配置各个性能计数器：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;性能计数器的值：perfcntr&lt;n&gt;&lt;/li&gt;&lt;li&gt;性能计数器的配置：perfctrl&lt;n&gt;，有如下字段：&lt;ol&gt;&lt;li&gt;EVENT: 事件编号&lt;/li&gt;&lt;li&gt;PLV{0,1,2,3}: 特权态过滤，对应四个特权态下是否采样&lt;/li&gt;&lt;li&gt;IE：是否启用溢出中断&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;misc.rpcntl3：允许用户态程序读取性能计数器&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;内核驱动&#34;&gt;内核驱动&lt;a class=&#34;headerlink&#34; href=&#34;#内核驱动&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在 Linux 内核中，负责控制 ARM 性能计数接口的代码在 &lt;a href=&#34;https://github.com/torvalds/linux/blob/master/drivers/perf/arm_pmuv3.c&#34;&gt;arm_pmuv3.c&lt;/a&gt; 当中。根据这个硬件接口，可以预想到，如果要对一段程序观察它在某个计数器上的取值，需要：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;分配一个性能计数器，可能是 Cycle 计数器或者通用性能计数器：对应 &lt;a href=&#34;https://github.com/torvalds/linux/blob/7cb1b466315004af98f6ba6c2546bb713ca3c237/drivers/perf/arm_pmuv3.c#L938&#34;&gt;armv8pmu_get_event_idx&lt;/a&gt; 函数，先分配 Cycle 计数器，再从剩下的通用性能计数器中找到一个空闲的&lt;/li&gt;&lt;li&gt;配置并启用该性能计数器，对应 &lt;a href=&#34;https://github.com/torvalds/linux/blob/7cb1b466315004af98f6ba6c2546bb713ca3c237/drivers/perf/arm_pmuv3.c#L796&#34;&gt;armv8pmu_enable_event&lt;/a&gt; 函数：&lt;ol&gt;&lt;li&gt;把事件类型写入到 PMEVTYPER&lt;n&gt;_EL0 中，对应 &lt;a href=&#34;https://github.com/torvalds/linux/blob/7cb1b466315004af98f6ba6c2546bb713ca3c237/drivers/perf/arm_pmuv3.c#L629&#34;&gt;armv8pmu_write_event_type&lt;/a&gt; 函数&lt;/li&gt;&lt;li&gt;启用事件对应的溢出中断，写入 PMINTENSET_EL1，对应 &lt;a href=&#34;https://github.com/torvalds/linux/blob/7cb1b466315004af98f6ba6c2546bb713ca3c237/drivers/perf/arm_pmuv3.c#L714&#34;&gt;armv8pmu_enable_event_irq&lt;/a&gt; 函数&lt;/li&gt;&lt;li&gt;事件开始计数，写入 PMCNTENSET_EL0，对应 &lt;a href=&#34;https://github.com/torvalds/linux/blob/7cb1b466315004af98f6ba6c2546bb713ca3c237/drivers/perf/arm_pmuv3.c#L675&#34;&gt;armv8pmu_enable_event_counter&lt;/a&gt; 函数&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;在程序开始前，从 PMEVCNTR&lt;n&gt;_EL0 读取一次计数器的当前取值，对应 &lt;a href=&#34;https://github.com/torvalds/linux/blob/7cb1b466315004af98f6ba6c2546bb713ca3c237/drivers/perf/arm_pmuv3.c#L566&#34;&gt;armv8pmu_read_counter&lt;/a&gt; 函数&lt;/li&gt;&lt;li&gt;在程序结束时，再读取一次计数器的当前取值，和程序开始时的值求差&lt;/li&gt;&lt;li&gt;为了解决溢出的问题：配置中断，在溢出时会进入中断处理代码，统计溢出次数，计入差值的高位，对应 &lt;a href=&#34;https://github.com/torvalds/linux/blob/7cb1b466315004af98f6ba6c2546bb713ca3c237/drivers/perf/arm_pmuv3.c#L840&#34;&gt;armv8pmu_handle_irq&lt;/a&gt; 函数&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;perf-子系统&#34;&gt;Perf 子系统&lt;a class=&#34;headerlink&#34; href=&#34;#perf-子系统&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;除了由单独的架构相关的内核驱动负责配置硬件以外，还需要由 Perf 子系统来处理来自用户的 perf 使用。具体地，内核驱动会注册一个 &lt;code&gt;struct pmu&lt;/code&gt; 给 Perf 子系统，实现这些函数：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;// Fully disable/enable this PMU&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pmu_enable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;pmu&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pmu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* optional */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pmu_disable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;pmu&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pmu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* optional */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;// Try and initialize the event for this PMU.&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event_init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;perf_event&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-6&#34;&gt;&lt;a id=&#34;__codelineno-0-6&#34; name=&#34;__codelineno-0-6&#34; href=&#34;#__codelineno-0-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;// Adds/Removes a counter to/from the PMU&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-7&#34;&gt;&lt;a id=&#34;__codelineno-0-7&#34; name=&#34;__codelineno-0-7&#34; href=&#34;#__codelineno-0-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;perf_event&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-8&#34;&gt;&lt;a id=&#34;__codelineno-0-8&#34; name=&#34;__codelineno-0-8&#34; href=&#34;#__codelineno-0-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;del&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;perf_event&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-9&#34;&gt;&lt;a id=&#34;__codelineno-0-9&#34; name=&#34;__codelineno-0-9&#34; href=&#34;#__codelineno-0-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;// Starts/Stops a counter present on the PMU.&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-10&#34;&gt;&lt;a id=&#34;__codelineno-0-10&#34; name=&#34;__codelineno-0-10&#34; href=&#34;#__codelineno-0-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;perf_event&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-11&#34;&gt;&lt;a id=&#34;__codelineno-0-11&#34; name=&#34;__codelineno-0-11&#34; href=&#34;#__codelineno-0-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;perf_event&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-12&#34;&gt;&lt;a id=&#34;__codelineno-0-12&#34; name=&#34;__codelineno-0-12&#34; href=&#34;#__codelineno-0-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;// Updates the counter value of the event.&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-13&#34;&gt;&lt;a id=&#34;__codelineno-0-13&#34; name=&#34;__codelineno-0-13&#34; href=&#34;#__codelineno-0-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;perf_event&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可见在内核里，PMU 计数器的抽象是 &lt;code&gt;struct perf_event&lt;/code&gt;，这个是架构无关的，根据用户态程序通过 &lt;code&gt;perf_event_open&lt;/code&gt; 构造出来的；内核驱动就会根据这个 &lt;code&gt;struct perf_event&lt;/code&gt; 去进行实际的硬件计数器的配置。例如用户程序在 &lt;code&gt;struct perf_event_attr&lt;/code&gt; 里设置 &lt;code&gt;exclude_kernel = 1&lt;/code&gt;，就会传到 &lt;code&gt;struct perf_event&lt;/code&gt; 当中，最后在相应的内核驱动中，变成硬件性能计数器配置里，计数时忽略内核所在特权态的配置。&lt;/p&gt;&lt;p&gt;&lt;code&gt;perf record&lt;/code&gt; 是基于采样实现的：当性能计数器溢出（一般是 Cycle 计数器）的时候，触发中断进入内核，此时由软件来收集被打断的程序的上下文信息，收集完成后再回到被打断的程序继续执行。&lt;/p&gt;&lt;h3 id=&#34;虚拟化&#34;&gt;虚拟化&lt;a class=&#34;headerlink&#34; href=&#34;#虚拟化&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在虚拟化场景下，依然希望虚拟机内的 OS 可以有性能计数器可以用，同时宿主机上也可能希望获取虚拟机的性能计数器信息。&lt;/p&gt;&lt;p&gt;一种方法是以纯软件的方法去实现性能计数器，比如 &lt;a href=&#34;https://github.com/qemu/qemu/blob/1cf9bc6eba7506ab6d9de635f224259225f63466/target/arm/helper.c#L996&#34;&gt;QEMU 的 TCG 模式&lt;/a&gt;，可以模拟出一个以固定频率运行的处理器的 Cycle 计数器，但实际上就是拿时间除以频率，是假的性能计数器；此外还能模拟出 Instruction 计数器，因为 QEMU 在做指令翻译的时候，可以顺带记录下执行的指令数；而微架构相关的性能计数器就没法靠这个来实现了。&lt;/p&gt;&lt;p&gt;另一种方法则是在硬件虚拟化的基础上，让虚拟机享受到性能计数器。不过为了安全性，宿主机可以获取虚拟机的性能计数器，但反过来，虚拟机的性能计数器不应该得到宿主机的信息。&lt;/p&gt;&lt;p&gt;目前 LoongArch KVM 已经支持性能计数器的虚拟化，下面来看它是怎么做的：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;给宿主机（host）维护一份性能计数器的上下文，用 &lt;a href=&#34;https://github.com/torvalds/linux/blob/7cb1b466315004af98f6ba6c2546bb713ca3c237/arch/loongarch/kvm/vcpu.c#L35&#34;&gt;kvm_save_host_pmu&lt;/a&gt; 保存，用 &lt;a href=&#34;https://github.com/torvalds/linux/blob/7cb1b466315004af98f6ba6c2546bb713ca3c237/arch/loongarch/kvm/vcpu.c#L50&#34;&gt;kvm_restore_host_pmu&lt;/a&gt; 恢复&lt;/li&gt;&lt;li&gt;再给每个虚拟机（guest）维护一份性能计数器的上下文，此时为了访问虚拟机的 csr，要访问 gcsr(guest csr)：用 &lt;a href=&#34;https://github.com/torvalds/linux/blob/7cb1b466315004af98f6ba6c2546bb713ca3c237/arch/loongarch/kvm/vcpu.c#L66&#34;&gt;kvm_save_guest_pmu&lt;/a&gt; 保存，用 &lt;a href=&#34;https://github.com/torvalds/linux/blob/7cb1b466315004af98f6ba6c2546bb713ca3c237/arch/loongarch/kvm/vcpu.c#L80&#34;&gt;kvm_restore_guest_pmu&lt;/a&gt;&lt;/li&gt;&lt;li&gt;当虚拟机（guest）因为各种原因回到了 VMM，就要进行&lt;a href=&#34;https://github.com/torvalds/linux/blob/7cb1b466315004af98f6ba6c2546bb713ca3c237/arch/loongarch/kvm/vcpu.c#L94&#34;&gt;上下文切换&lt;/a&gt;，保存虚拟机的性能计数器，恢复宿主机的性能计数器；同理，进入虚拟机时，再次进行&lt;a href=&#34;https://github.com/torvalds/linux/blob/7cb1b466315004af98f6ba6c2546bb713ca3c237/arch/loongarch/kvm/vcpu.c#L113&#34;&gt;上下文切换&lt;/a&gt;，保存宿主机的性能计数器，恢复虚拟机的性能计数器&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;intel-pt&#34;&gt;Intel PT&lt;a class=&#34;headerlink&#34; href=&#34;#intel-pt&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Intel PT 是 Intel 平台上跟踪指令流的机制，它可以记录这些信息：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;页表的修改&lt;/li&gt;&lt;li&gt;时钟周期&lt;/li&gt;&lt;li&gt;分支跳转&lt;/li&gt;&lt;li&gt;功耗状态变化&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;perf 工具也是支持用 Intel PT 进行跟踪的：&lt;a href=&#34;https://www.man7.org/linux/man-pages/man1/perf-intel-pt.1.html&#34;&gt;perf-intel-pt(1) — Linux manual page&lt;/a&gt;，下面的命令用 Intel PT 跟踪一条命令的执行过程，并显示出它生成的跟踪信息：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;perf&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;record&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;intel_pt//u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ls&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# itrace: instruction trace&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# i: instructions events&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# y: cycles events&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-5&#34;&gt;&lt;a id=&#34;__codelineno-1-5&#34; name=&#34;__codelineno-1-5&#34; href=&#34;#__codelineno-1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# b: branches events&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-6&#34;&gt;&lt;a id=&#34;__codelineno-1-6&#34; name=&#34;__codelineno-1-6&#34; href=&#34;#__codelineno-1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# x: transactions events&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-7&#34;&gt;&lt;a id=&#34;__codelineno-1-7&#34; name=&#34;__codelineno-1-7&#34; href=&#34;#__codelineno-1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# w: ptwrite events&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-8&#34;&gt;&lt;a id=&#34;__codelineno-1-8&#34; name=&#34;__codelineno-1-8&#34; href=&#34;#__codelineno-1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# p: power events&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-9&#34;&gt;&lt;a id=&#34;__codelineno-1-9&#34; name=&#34;__codelineno-1-9&#34; href=&#34;#__codelineno-1-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# e: error events&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-10&#34;&gt;&lt;a id=&#34;__codelineno-1-10&#34; name=&#34;__codelineno-1-10&#34; href=&#34;#__codelineno-1-10&#34;&gt;&lt;/a&gt;perf&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;script&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--itrace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;iybxwpe&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比如写一个循环 10 次的代码：&lt;/p&gt;&lt;div class=&#34;language-cpp highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对应的汇编：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;err&#34;&gt;0000000000001129&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-2&#34;&gt;&lt;a id=&#34;__codelineno-3-2&#34; name=&#34;__codelineno-3-2&#34; href=&#34;#__codelineno-3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;1129:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-3&#34;&gt;&lt;a id=&#34;__codelineno-3-3&#34; name=&#34;__codelineno-3-3&#34; href=&#34;#__codelineno-3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;112&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;a:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;89&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;e5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-4&#34;&gt;&lt;a id=&#34;__codelineno-3-4&#34; name=&#34;__codelineno-3-4&#34; href=&#34;#__codelineno-3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;112&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;d:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;fc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;movl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$0x0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-5&#34;&gt;&lt;a id=&#34;__codelineno-3-5&#34; name=&#34;__codelineno-3-5&#34; href=&#34;#__codelineno-3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;1134:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;eb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;jmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;113a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-6&#34;&gt;&lt;a id=&#34;__codelineno-3-6&#34; name=&#34;__codelineno-3-6&#34; href=&#34;#__codelineno-3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;1136:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;addl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$0x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-7&#34;&gt;&lt;a id=&#34;__codelineno-3-7&#34; name=&#34;__codelineno-3-7&#34; href=&#34;#__codelineno-3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;113&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;a:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;fc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;09&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;cmpl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$0x9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0x4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-8&#34;&gt;&lt;a id=&#34;__codelineno-3-8&#34; name=&#34;__codelineno-3-8&#34; href=&#34;#__codelineno-3-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;113&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;e:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;jle&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1136&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0xd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-9&#34;&gt;&lt;a id=&#34;__codelineno-3-9&#34; name=&#34;__codelineno-3-9&#34; href=&#34;#__codelineno-3-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;1140:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;b8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$0x0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-10&#34;&gt;&lt;a id=&#34;__codelineno-3-10&#34; name=&#34;__codelineno-3-10&#34; href=&#34;#__codelineno-3-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;1145:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-11&#34;&gt;&lt;a id=&#34;__codelineno-3-11&#34; name=&#34;__codelineno-3-11&#34; href=&#34;#__codelineno-3-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;1146:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;按照上述方法，可以看到它生成了各个分支跳转的信息：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;test1 3772291 [006] 1693209.504363: 1 branches:u: 7311943d6248 __libc_start_call_main+0x78 (/usr/lib/x86_64-linux-gnu/libc.so.6) =&amp;gt; 5b4f1df51129 main+0x0 (/home/jiegec/test1)&lt;/span&gt;&lt;span id=&#34;__span-4-2&#34;&gt;&lt;a id=&#34;__codelineno-4-2&#34; name=&#34;__codelineno-4-2&#34; href=&#34;#__codelineno-4-2&#34;&gt;&lt;/a&gt;test1 3772291 [006] 1693209.504363: 1 branches:u: 5b4f1df51134 main+0xb (/home/jiegec/test1) =&amp;gt; 5b4f1df5113a main+0x11 (/home/jiegec/test1)&lt;/span&gt;&lt;span id=&#34;__span-4-3&#34;&gt;&lt;a id=&#34;__codelineno-4-3&#34; name=&#34;__codelineno-4-3&#34; href=&#34;#__codelineno-4-3&#34;&gt;&lt;/a&gt;test1 3772291 [006] 1693209.504363: 1 branches:u: 5b4f1df5113e main+0x15 (/home/jiegec/test1) =&amp;gt; 5b4f1df51136 main+0xd (/home/jiegec/test1)&lt;/span&gt;&lt;span id=&#34;__span-4-4&#34;&gt;&lt;a id=&#34;__codelineno-4-4&#34; name=&#34;__codelineno-4-4&#34; href=&#34;#__codelineno-4-4&#34;&gt;&lt;/a&gt;test1 3772291 [006] 1693209.504363: 1 branches:u: 5b4f1df5113e main+0x15 (/home/jiegec/test1) =&amp;gt; 5b4f1df51136 main+0xd (/home/jiegec/test1)&lt;/span&gt;&lt;span id=&#34;__span-4-5&#34;&gt;&lt;a id=&#34;__codelineno-4-5&#34; name=&#34;__codelineno-4-5&#34; href=&#34;#__codelineno-4-5&#34;&gt;&lt;/a&gt;test1 3772291 [006] 1693209.504363: 1 branches:u: 5b4f1df5113e main+0x15 (/home/jiegec/test1) =&amp;gt; 5b4f1df51136 main+0xd (/home/jiegec/test1)&lt;/span&gt;&lt;span id=&#34;__span-4-6&#34;&gt;&lt;a id=&#34;__codelineno-4-6&#34; name=&#34;__codelineno-4-6&#34; href=&#34;#__codelineno-4-6&#34;&gt;&lt;/a&gt;test1 3772291 [006] 1693209.504363: 1 branches:u: 5b4f1df5113e main+0x15 (/home/jiegec/test1) =&amp;gt; 5b4f1df51136 main+0xd (/home/jiegec/test1)&lt;/span&gt;&lt;span id=&#34;__span-4-7&#34;&gt;&lt;a id=&#34;__codelineno-4-7&#34; name=&#34;__codelineno-4-7&#34; href=&#34;#__codelineno-4-7&#34;&gt;&lt;/a&gt;test1 3772291 [006] 1693209.504363: 1 branches:u: 5b4f1df5113e main+0x15 (/home/jiegec/test1) =&amp;gt; 5b4f1df51136 main+0xd (/home/jiegec/test1)&lt;/span&gt;&lt;span id=&#34;__span-4-8&#34;&gt;&lt;a id=&#34;__codelineno-4-8&#34; name=&#34;__codelineno-4-8&#34; href=&#34;#__codelineno-4-8&#34;&gt;&lt;/a&gt;test1 3772291 [006] 1693209.504363: 1 branches:u: 5b4f1df5113e main+0x15 (/home/jiegec/test1) =&amp;gt; 5b4f1df51136 main+0xd (/home/jiegec/test1)&lt;/span&gt;&lt;span id=&#34;__span-4-9&#34;&gt;&lt;a id=&#34;__codelineno-4-9&#34; name=&#34;__codelineno-4-9&#34; href=&#34;#__codelineno-4-9&#34;&gt;&lt;/a&gt;test1 3772291 [006] 1693209.504363: 1 branches:u: 5b4f1df5113e main+0x15 (/home/jiegec/test1) =&amp;gt; 5b4f1df51136 main+0xd (/home/jiegec/test1)&lt;/span&gt;&lt;span id=&#34;__span-4-10&#34;&gt;&lt;a id=&#34;__codelineno-4-10&#34; name=&#34;__codelineno-4-10&#34; href=&#34;#__codelineno-4-10&#34;&gt;&lt;/a&gt;test1 3772291 [006] 1693209.504363: 1 branches:u: 5b4f1df5113e main+0x15 (/home/jiegec/test1) =&amp;gt; 5b4f1df51136 main+0xd (/home/jiegec/test1)&lt;/span&gt;&lt;span id=&#34;__span-4-11&#34;&gt;&lt;a id=&#34;__codelineno-4-11&#34; name=&#34;__codelineno-4-11&#34; href=&#34;#__codelineno-4-11&#34;&gt;&lt;/a&gt;test1 3772291 [006] 1693209.504363: 1 branches:u: 5b4f1df5113e main+0x15 (/home/jiegec/test1) =&amp;gt; 5b4f1df51136 main+0xd (/home/jiegec/test1)&lt;/span&gt;&lt;span id=&#34;__span-4-12&#34;&gt;&lt;a id=&#34;__codelineno-4-12&#34; name=&#34;__codelineno-4-12&#34; href=&#34;#__codelineno-4-12&#34;&gt;&lt;/a&gt;test1 3772291 [006] 1693209.504363: 1 branches:u: 5b4f1df5113e main+0x15 (/home/jiegec/test1) =&amp;gt; 5b4f1df51136 main+0xd (/home/jiegec/test1)&lt;/span&gt;&lt;span id=&#34;__span-4-13&#34;&gt;&lt;a id=&#34;__codelineno-4-13&#34; name=&#34;__codelineno-4-13&#34; href=&#34;#__codelineno-4-13&#34;&gt;&lt;/a&gt;test1 3772291 [006] 1693209.504363: 1 branches:u: 5b4f1df51146 main+0x1d (/home/jiegec/test1) =&amp;gt; 7311943d624a __libc_start_call_main+0x7a (/usr/lib/x86_64-linux-gnu/libc.so.6)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过这个信息，就可以还原出程序执行了哪些代码：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;__libc_start_call_main 调用 main 函数，到入口 0x1129(main+0x0)&lt;/li&gt;&lt;li&gt;从 0x1134(main+0xb) 跳转到 0x113a(main+0x11)&lt;/li&gt;&lt;li&gt;循环 10 次：0x113e(main+0x15) 跳转到 0x1136(main+0xd)&lt;/li&gt;&lt;li&gt;最终 在 0x1146(main+0x1d) return 回到 __libc_start_call_main 函数&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果要看 Intel PT 到底生成了什么数据，可以用 &lt;code&gt;perf script -D&lt;/code&gt; 显示。例如要记录分支跳转还是不跳转的历史，用的是如下的 TNT(Taken/Not Taken) packet：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../linux-perf-pmu-intel-pt-dump.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;TNT packet 的定义在 &lt;a href=&#34;https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html&#34;&gt;Intel® 64 and IA-32 Architectures Software Developer Manuals&lt;/a&gt; 中给出：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../linux-perf-pmu-intel-tnt.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;由于 Intel PT 的数据量很大，它和 SPE 类似，也是在内存中保存 trace 信息。&lt;/p&gt;&lt;h2 id=&#34;intel-lbr&#34;&gt;Intel LBR&lt;a class=&#34;headerlink&#34; href=&#34;#intel-lbr&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Intel LBR(Last Branch Record) 机制记录了处理器最近若干次控制流转移，比如 taken branch。它记录的数量很小，信息直接保存在 MSR 当中，而不是像前面的 SPE 和 Intel PT 那样，需要在内存中记录信息。&lt;/p&gt;&lt;p&gt;LBR 在 perf 中，主要用来跟踪 call stack：设置 LBR，只记录 call 指令，并且打开 call-stack 模式，那么 LBR 记录的就是当前的 call stack，perf 可以利用这个信息来找到当前函数的调用链，虽然有长度限制。除了 lbr 以外，perf 还支持利用 fp(frame pointer) 或 dwarf(调试信息) 来&lt;a href=&#34;https://man7.org/linux/man-pages/man1/perf-record.1.html&#34;&gt;寻找调用链&lt;/a&gt;：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-5-1&#34;&gt;&lt;a id=&#34;__codelineno-5-1&#34; name=&#34;__codelineno-5-1&#34; href=&#34;#__codelineno-5-1&#34;&gt;&lt;/a&gt;--call-graph&lt;/span&gt;&lt;span id=&#34;__span-5-2&#34;&gt;&lt;a id=&#34;__codelineno-5-2&#34; name=&#34;__codelineno-5-2&#34; href=&#34;#__codelineno-5-2&#34;&gt;&lt;/a&gt; Setup and enable call-graph (stack chain/backtrace)&lt;/span&gt;&lt;span id=&#34;__span-5-3&#34;&gt;&lt;a id=&#34;__codelineno-5-3&#34; name=&#34;__codelineno-5-3&#34; href=&#34;#__codelineno-5-3&#34;&gt;&lt;/a&gt; recording, implies -g. Default is &amp;quot;fp&amp;quot; (for user space).&lt;/span&gt;&lt;span id=&#34;__span-5-4&#34;&gt;&lt;a id=&#34;__codelineno-5-4&#34; name=&#34;__codelineno-5-4&#34; href=&#34;#__codelineno-5-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-5&#34;&gt;&lt;a id=&#34;__codelineno-5-5&#34; name=&#34;__codelineno-5-5&#34; href=&#34;#__codelineno-5-5&#34;&gt;&lt;/a&gt; Valid options are &amp;quot;fp&amp;quot; (frame pointer), &amp;quot;dwarf&amp;quot; (DWARF&amp;#39;s CFI -&lt;/span&gt;&lt;span id=&#34;__span-5-6&#34;&gt;&lt;a id=&#34;__codelineno-5-6&#34; name=&#34;__codelineno-5-6&#34; href=&#34;#__codelineno-5-6&#34;&gt;&lt;/a&gt; Call Frame Information) or &amp;quot;lbr&amp;quot; (Hardware Last Branch Record&lt;/span&gt;&lt;span id=&#34;__span-5-7&#34;&gt;&lt;a id=&#34;__codelineno-5-7&#34; name=&#34;__codelineno-5-7&#34; href=&#34;#__codelineno-5-7&#34;&gt;&lt;/a&gt; facility).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和 Intel PT 相比，它记录的信息较少，但实现上也更简单，开销更小。而且 LBR 只会记录跳转的分支，不会记录没跳转的分支，此外就是记录的分支数有上限。&lt;/p&gt;&lt;h2 id=&#34;intel-bts&#34;&gt;Intel BTS&lt;a class=&#34;headerlink&#34; href=&#34;#intel-bts&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;较早的 Intel 处理器没有实现 Intel PT，但考虑到 LBR 记录的历史长度限制，基于 LBR 做了一个把 LBR 信息保存到内存里的技术，叫做 Branch Trace Store。perf 也支持&lt;a href=&#34;https://github.com/torvalds/linux/blob/master/tools/perf/Documentation/intel-bts.txt&#34;&gt;基于 BTS&lt;/a&gt; 来记录分支历史：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-6-1&#34;&gt;&lt;a id=&#34;__codelineno-6-1&#34; name=&#34;__codelineno-6-1&#34; href=&#34;#__codelineno-6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# record&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-2&#34;&gt;&lt;a id=&#34;__codelineno-6-2&#34; name=&#34;__codelineno-6-2&#34; href=&#34;#__codelineno-6-2&#34;&gt;&lt;/a&gt;sudo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;perf&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;record&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--per-thread&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;intel_bts//u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ls&lt;/span&gt;&lt;span id=&#34;__span-6-3&#34;&gt;&lt;a id=&#34;__codelineno-6-3&#34; name=&#34;__codelineno-6-3&#34; href=&#34;#__codelineno-6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# display trace&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-4&#34;&gt;&lt;a id=&#34;__codelineno-6-4&#34; name=&#34;__codelineno-6-4&#34; href=&#34;#__codelineno-6-4&#34;&gt;&lt;/a&gt;sudo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;perf&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;script&lt;/span&gt;&lt;span id=&#34;__span-6-5&#34;&gt;&lt;a id=&#34;__codelineno-6-5&#34; name=&#34;__codelineno-6-5&#34; href=&#34;#__codelineno-6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# dump raw data&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-6-6&#34;&gt;&lt;a id=&#34;__codelineno-6-6&#34; name=&#34;__codelineno-6-6&#34; href=&#34;#__codelineno-6-6&#34;&gt;&lt;/a&gt;sudo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;perf&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;script&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-D&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;BTS 每个 entry 占用 24 字节，包括 8 字节的 Last Branch From 和 8 字节的 Last Branch To，还有 8 字节记录了分支预测正确还是错误（图源 &lt;a href=&#34;https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html&#34;&gt;Intel® 64 and IA-32 Architectures Software Developer Manuals&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../linux-perf-pmu-intel-bts.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;和 LBR 一样，BTS 只记录跳转的分支，不记录没跳转的分支。&lt;/p&gt;&lt;h2 id=&#34;intel-pebs&#34;&gt;Intel PEBS&lt;a class=&#34;headerlink&#34; href=&#34;#intel-pebs&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Intel PEBS(Processor Event Based Sampling) 是一种硬件的采样方法，顾名思义，当处理器触发某些事件时，自动进行一次采样。这个事件，实际上就是某个性能计数器溢出。本来，性能计数器溢出的时候，应该触发中断，让内核维护性能计数器的真实值（例如硬件实现了 32 位计数器，但内核维护的是 64 位）；但在 PEBS 中，这个性能计数器的溢出事件被用来触发硬件的采样：计数溢出的时候，会捕捉当前的处理器状态（PC、访存地址和延迟、通用寄存器和浮点寄存器的值、时钟周期计数和 LBR 信息），把状态写入到内存中的缓冲区，并自动把性能计数器设为指定的复位值。当内存中的缓冲区满的时候，才会触发中断，让内核来处理 PEBS 生成的数据，并分配新的空间。&lt;/p&gt;&lt;p&gt;PEBS 可以精细地根据性能计数器来决定采样的频率，例如每 1000 条指令采样一次，每 1000 个周期采样一次，甚至每 1000 次缓存缺失采样一次。具体做法是，把对应的性能计数器的复位值设置为最大值减 1000，那么每次溢出触发 PEBS 采样以后，性能计数器会被设置为最大值减 1000，等性能计数器增加 1000 以后，再次溢出，触发 PEBS 采样，如此循环。&lt;/p&gt;&lt;p&gt;AMD 也有类似的机制，叫做 IBS(Instruction Based Sampling)。IBS 没有和 PMU 绑定起来，而是数指令数或数周期。推荐阅读论文 &lt;a href=&#34;https://ieeexplore.ieee.org/document/10068807&#34;&gt;Precise Event Sampling on AMD Versus Intel: Quantitative and Qualitative Comparison&lt;/a&gt;，它深入比较了 AMD IBS 和 Intel PEBS 的差异。&lt;/p&gt;&lt;p&gt;如果要启用 PEBS 或 IBS，在 &lt;code&gt;perf record&lt;/code&gt; 指令事件时，追加 &lt;code&gt;:p&lt;/code&gt;：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-7-1&#34;&gt;&lt;a id=&#34;__codelineno-7-1&#34; name=&#34;__codelineno-7-1&#34; href=&#34;#__codelineno-7-1&#34;&gt;&lt;/a&gt;The p modifier can be used for specifying how precise the instruction address should be. The p modifier can be specified&lt;/span&gt;&lt;span id=&#34;__span-7-2&#34;&gt;&lt;a id=&#34;__codelineno-7-2&#34; name=&#34;__codelineno-7-2&#34; href=&#34;#__codelineno-7-2&#34;&gt;&lt;/a&gt;multiple times:&lt;/span&gt;&lt;span id=&#34;__span-7-3&#34;&gt;&lt;a id=&#34;__codelineno-7-3&#34; name=&#34;__codelineno-7-3&#34; href=&#34;#__codelineno-7-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-4&#34;&gt;&lt;a id=&#34;__codelineno-7-4&#34; name=&#34;__codelineno-7-4&#34; href=&#34;#__codelineno-7-4&#34;&gt;&lt;/a&gt; 0 - SAMPLE_IP can have arbitrary skid&lt;/span&gt;&lt;span id=&#34;__span-7-5&#34;&gt;&lt;a id=&#34;__codelineno-7-5&#34; name=&#34;__codelineno-7-5&#34; href=&#34;#__codelineno-7-5&#34;&gt;&lt;/a&gt; 1 - SAMPLE_IP must have constant skid&lt;/span&gt;&lt;span id=&#34;__span-7-6&#34;&gt;&lt;a id=&#34;__codelineno-7-6&#34; name=&#34;__codelineno-7-6&#34; href=&#34;#__codelineno-7-6&#34;&gt;&lt;/a&gt; 2 - SAMPLE_IP requested to have 0 skid&lt;/span&gt;&lt;span id=&#34;__span-7-7&#34;&gt;&lt;a id=&#34;__codelineno-7-7&#34; name=&#34;__codelineno-7-7&#34; href=&#34;#__codelineno-7-7&#34;&gt;&lt;/a&gt; 3 - SAMPLE_IP must have 0 skid, or uses randomization to avoid&lt;/span&gt;&lt;span id=&#34;__span-7-8&#34;&gt;&lt;a id=&#34;__codelineno-7-8&#34; name=&#34;__codelineno-7-8&#34; href=&#34;#__codelineno-7-8&#34;&gt;&lt;/a&gt; sample shadowing effects.&lt;/span&gt;&lt;span id=&#34;__span-7-9&#34;&gt;&lt;a id=&#34;__codelineno-7-9&#34; name=&#34;__codelineno-7-9&#34; href=&#34;#__codelineno-7-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-10&#34;&gt;&lt;a id=&#34;__codelineno-7-10&#34; name=&#34;__codelineno-7-10&#34; href=&#34;#__codelineno-7-10&#34;&gt;&lt;/a&gt;For Intel systems precise event sampling is implemented with PEBS which supports up to precise-level 2, and precise level 3 for some special cases.&lt;/span&gt;&lt;span id=&#34;__span-7-11&#34;&gt;&lt;a id=&#34;__codelineno-7-11&#34; name=&#34;__codelineno-7-11&#34; href=&#34;#__codelineno-7-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-12&#34;&gt;&lt;a id=&#34;__codelineno-7-12&#34; name=&#34;__codelineno-7-12&#34; href=&#34;#__codelineno-7-12&#34;&gt;&lt;/a&gt;On AMD systems it is implemented using IBS OP (up to precise-level 2).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;详细信息见 &lt;a href=&#34;https://man7.org/linux/man-pages/man1/perf-list.1.html&#34;&gt;perf-list(1) — Linux manual page&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&#34;arm-brbe&#34;&gt;ARM BRBE&lt;a class=&#34;headerlink&#34; href=&#34;#arm-brbe&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ARM 平台定义了 BRBE(Branch Record Buffer Extension)，它和 Intel LBR 类似，也是在 System Register 中记录最近若干条跳转的分支的信息。它会记录 taken branch 的这些信息：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;源地址&lt;/li&gt;&lt;li&gt;目的地址&lt;/li&gt;&lt;li&gt;距离上一次 taken branch 的周期数&lt;/li&gt;&lt;li&gt;分支类型&lt;/li&gt;&lt;li&gt;特权态（EL）&lt;/li&gt;&lt;li&gt;分支预测结果&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;不跳转的条件分支指令就不记录。和 LBR 类似，它也支持根据分支类型过滤，因此也可以用于 call graph 的抓取。&lt;/p&gt;&lt;h2 id=&#34;arm-spe&#34;&gt;ARM SPE&lt;a class=&#34;headerlink&#34; href=&#34;#arm-spe&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ARM 平台定义了 SPE(Statistical Profiling Extension)，它的做法是基于采样的：硬件上每过一段时间，采样一个操作，比如正在执行的指令；采样得到的操作的详细信息会写入到内存当中，由内核驱动准备好的一段空间。空间满的时候，会发中断通知内核并让内核重新分配空间。&lt;/p&gt;&lt;p&gt;&lt;code&gt;perf record&lt;/code&gt; 在默认参数下的工作原理和 SPE 有点像，都是定时打断程序并采样：但 &lt;code&gt;perf record&lt;/code&gt; 是在程序被打断后，由软件来收集信息；而 SPE 是由硬件采样，可以提供更多的微架构信息（延迟，访存地址，是否命中 TLB，分支跳转与否等等）。&lt;/p&gt;&lt;p&gt;SPE 的内核驱动实现在 &lt;a href=&#34;https://github.com/torvalds/linux/blob/f92f4749861b06fed908d336b4dee1326003291b/drivers/perf/arm_spe_pmu.c#L754&#34;&gt;arm_spe_pmu.c&lt;/a&gt; 当中；它做的事情是，在内存中分配好缓冲区，启动 SPE，并且在 SPE 触发中断时，进行缓冲区的维护；同时缓冲区中的数据会通过 &lt;a href=&#34;https://docs.kernel.org/userspace-api/perf_ring_buffer.html&#34;&gt;perf ring buffer (aka perf aux)&lt;/a&gt; 传递给用户态的程序，具体数据的解析是由用户态的程序完成的。如果用 perf 工具，那么这个解析和展示的工作就是由 perf 完成的。&lt;/p&gt;&lt;p&gt;SPE 和 AMD IBS 类似，也是数指令数；和 Intel PEBS 不同，它没有和性能计数器耦合起来。&lt;/p&gt;&lt;h2 id=&#34;arm-amu&#34;&gt;ARM AMU&lt;a class=&#34;headerlink&#34; href=&#34;#arm-amu&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ARM 除了提供性能计数单元（PMU）以外，还提供了 AMU（Activity Monitor Unit）。它和 PMU 很类似，也是有一些性能计数器，但 AMU 在计数器溢出的时候不会触发中断，所以它并不是拿来观察某个程序的性能怎么样，而是观察系统整体的状态，比如时钟频率，IPC 等等。&lt;/p&gt;&lt;p&gt;目前 AMU 的主要用途是在内核的调度器上：调度器需要估计一段时间内做了多少单位的任务，需要知道 CPU 的频率，比如频率高，就认为它做了更多的任务。之前的做法是让调度器通过 cpufreq 读取当前的 CPU 频率，但由于 CPU 的频率会不断变化，这样读取到的频率是一个瞬时功率，不能代表一段时间的平均值，就会带来误差。&lt;/p&gt;&lt;p&gt;为了获取一段时间内的平均频率，&lt;a href=&#34;https://github.com/torvalds/linux/blob/f92f4749861b06fed908d336b4dee1326003291b/arch/arm64/kernel/topology.c#L153&#34;&gt;amu_scale_freq_tick&lt;/a&gt; 函数就使用了 AMU 的两个计数器：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Processor Cycle 计数器：记录核心的周期数，也就是以 CPU 频率自增的计数器&lt;/li&gt;&lt;li&gt;Constant Cycle 计数器：以固定频率（而非 CPU 频率）自增的计数器&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;通过记录一段时间内两个计数器的变化量，将两个变化量做除法，就可以得到一个正比于这段时间内 CPU 的平均频率的值，交给调度器。&lt;/p&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;a class=&#34;headerlink&#34; href=&#34;#参考&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://developer.arm.com/documentation/ddi0487/latest/&#34;&gt;Arm Architecture Reference Manual for A-profile architecture&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://loongson.github.io/LoongArch-Documentation/LoongArch-Vol1-EN.html&#34;&gt;LoongArch Reference Manual Volume 1: Basic Architecture&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://perfwiki.github.io/main/&#34;&gt;perf: Linux profiling with performance counters&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://perfwiki.github.io/main/perf-tools-support-for-intel-processor-trace/&#34;&gt;Perf tools support for Intel® Processor Trace&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/document/10068807&#34;&gt;Precise Event Sampling on AMD Versus Intel: Quantitative and Qualitative Comparison&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/software/2024/12/10/linux-perf-pmu/</link> <pubDate>Tue, 10 Dec 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2024/12/10/linux-perf-pmu/</guid> </item> <item> <title>AMD Zen 5 微架构评测</title> <category>amd</category> <category>cpu</category> <category>hardware</category> <category>performance</category> <category>ryzen</category> <category>uarch-review</category> <category>zen5</category> <description>&lt;h1 id=&#34;amd-zen-5-微架构评测&#34;&gt;AMD Zen 5 微架构评测&lt;a class=&#34;headerlink&#34; href=&#34;#amd-zen-5-微架构评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Zen 5 是 AMD 最新的一代微架构，在很多地方和之前不同，因此测试一下这个微架构在各个方面的表现。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;官方信息&#34;&gt;官方信息&lt;a class=&#34;headerlink&#34; href=&#34;#官方信息&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;AMD 一向公开得比较大方，关于 Zen 5 的信息有：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.amd.com/content/dam/amd/en/documents/processor-tech-docs/software-optimization-guides/58455.zip&#34;&gt;Software Optimization Guide for the AMD Zen5 Microarchitecture&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.amd.com/content/dam/amd/en/documents/epyc-business-docs/white-papers/5th-gen-amd-epyc-processor-architecture-white-paper.pdf&#34;&gt;5TH GEN AMD EPYC™ PROCESSOR ARCHITECTURE&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;现有评测&#34;&gt;现有评测&lt;a class=&#34;headerlink&#34; href=&#34;#现有评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;网上已经有较多针对 Zen 5 微架构的评测和分析，建议阅读：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.phoronix.com/review/amd-zen-5-core&#34;&gt;AMD Reveals More Zen 5 CPU Core Details&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2024/07/26/zen-5s-2-ahead-branch-predictor-unit-how-30-year-old-idea-allows-for-new-tricks/&#34;&gt;Zen 5’s 2-Ahead Branch Predictor Unit: How a 30 Year Old Idea Allows for New Tricks&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2023/10/08/zen-5s-leaked-slides/&#34;&gt;Zen 5’s Leaked Slides&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2024/08/10/amds-strix-point-zen-5-hits-mobile/&#34;&gt;AMD’s Strix Point: Zen 5 Hits Mobile&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2024/08/14/amds-ryzen-9950x-zen-5-on-desktop/&#34;&gt;AMD’s Ryzen 9950X: Zen 5 on Desktop&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2024/09/15/discussing-amds-zen-5-at-hot-chips-2024/&#34;&gt;Discussing AMD’s Zen 5 at Hot Chips 2024&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://blog.hjc.im/zen-5-more-details-1.html&#34;&gt;Zen 5 补充测试 (1/2): 更多微架构细节&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/&#34;&gt;Zen5&#39;s AVX512 Teardown + More...&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/p/disabling-zen-5s-op-cache-and-exploring&#34;&gt;Disabling Zen 5’s Op Cache and Exploring its Clustered Decoder&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/p/zen-5s-avx-512-frequency-behavior&#34;&gt;Zen 5&#39;s AVX-512 Frequency Behavior&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面分各个模块分别记录官方提供的信息，以及实测的结果。读者可以对照已有的第三方评测理解。官方信息与实测结果一致的数据会加粗。&lt;/p&gt;&lt;h2 id=&#34;benchmark&#34;&gt;Benchmark&lt;a class=&#34;headerlink&#34; href=&#34;#benchmark&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;AMD Zen 5 的性能测试结果见 &lt;a href=&#34;../../../../../benchmark/&#34;&gt;SPEC&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&#34;mop-vs-uop&#34;&gt;MOP vs uOP&lt;a class=&#34;headerlink&#34; href=&#34;#mop-vs-uop&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;MOP = Macro operation, uOP = Micro operation&lt;/p&gt;&lt;p&gt;AMD 的文档里是这么说的：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The processor implements AMD64 instruction set by means of macro-ops (the primary units ofwork managed by the processor) and micro-ops (the primitive operations executed in theprocessor&#39;s execution units).Instructions are marked as fast path single (one macro-op), fast path double (two macro-ops), ormicrocode (greater than two macro-ops). Macro ops can normally contain up to two micro-ops.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;一条指令可以分成若干个 MOP（比如 REP MOVS 会拆成很多个 MOP），一个 MOP 可以继续细分为 uOP（比如 store 拆分成 store data 和 store address；把内存的值加到寄存器上的 add 指令拆分成 load 和 add）。Dispatch 的单位是 MOP，ROB 保存的也是 MOP。与 Zen3/Zen4 不同，Op Cache 保存的不是 MOP，而是 Fused Instructions，这个 Fusion 来自于 Branch Fusion 或 MOV + ALU Fusion。Fusion 相当于把多条指令合成了一个，减少了 MOP 的数量。&lt;/p&gt;&lt;p&gt;MOP 到 uOP 的拆分需要等到 Scheduler 中才进行，Scheduler 输入 MOP，输出 uOP，也就是说最终给到执行单元的是 uOP。&lt;/p&gt;&lt;p&gt;和 ARM 公版核的 MOP/uOP 对比，其实是很类似的：uOP 是执行单元看到的指令粒度，MOP 是维护精确异常的指令粒度。&lt;/p&gt;&lt;h2 id=&#34;前端&#34;&gt;前端&lt;a class=&#34;headerlink&#34; href=&#34;#前端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;op-cache&#34;&gt;Op Cache&lt;a class=&#34;headerlink&#34; href=&#34;#op-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：64 set, 16 way, &lt;strong&gt;1024 entry&lt;/strong&gt;, &lt;strong&gt;6 (fused) inst/entry&lt;/strong&gt;, 供指 &lt;strong&gt;2 entry/cycle&lt;/strong&gt;&lt;/p&gt;&lt;h4 id=&#34;开启关闭&#34;&gt;开启/关闭&lt;a class=&#34;headerlink&#34; href=&#34;#开启关闭&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;AMD 在 UEFI 固件中提供了关闭 Op Cache 的设置，因此我们可以测试在 Op Cache 开启/关闭不同情况下的性能。通过进一步研究，发现固件的 Op Cache 关闭设置，实际上对应了 MSR[0xc0011021] 的 bit 5：初始情况下，MSR[0xc0011021] 的值为 0x20000000000040，如果进入固件关闭 Op Cache，可以观察到 MSR[0xc0011021] 变成了 0x20000000000060。实际上，Op Cache 可以在进入 Linux 后动态开启/关闭（感谢 David Huang 在博客中提供的信息）：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;sudo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;modprobe&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;msr&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Disable Op Cache for Core 0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;sudo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;wrmsr&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-p&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0xc0011021&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x20000000000060&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Enable Op Cache for Core 0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-5&#34;&gt;&lt;a id=&#34;__codelineno-0-5&#34; name=&#34;__codelineno-0-5&#34; href=&#34;#__codelineno-0-5&#34;&gt;&lt;/a&gt;sudo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;wrmsr&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-p&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0xc0011021&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;0x20000000000040&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此开关 Op Cache 不需要重启进固件了。&lt;/p&gt;&lt;h4 id=&#34;容量&#34;&gt;容量&lt;a class=&#34;headerlink&#34; href=&#34;#容量&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Zen 5 的 Op Cache 每个 entry 是 6 (fused) inst，为了测出 Op Cache 的容量，以及确认保存的是 fused inst，利用 MOV + ALU Fusion 来构造指令序列：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# rsi = rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# rsi += rdx&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两条指令满足 Zen 5 的 MOV + ALU Fusion 要求，硬件上融合成一个 &lt;code&gt;rsi = rdx + rdi&lt;/code&gt; 的操作。做这个融合也是因为 x86 指令集缺少 3 地址指令，当然未来 APX 会补上这个缺失。实测发现，这样的指令序列可以达到 12 的 IPC，正好 Zen 5 的 ALU 有 6 个，也就是每周期执行 6 条融合后的指令，和 12 IPC 是吻合的。12 的 IPC 可以一直维持到 36KB 的 footprint，这里的 mov 和 add 指令都是 3 字节，换算下来 36KB 对应 &lt;code&gt;36*1024/6=6144&lt;/code&gt; 个 fused instruction，正好 &lt;code&gt;64*16*6=6144&lt;/code&gt;，对上了。关掉 Op Cache 后，性能下降到 4 IPC，对应了 Decode 宽度，同时也说明 Decode 的 4 Wide 对应的是指令，而不是融合后的指令。&lt;/p&gt;&lt;h4 id=&#34;吞吐&#34;&gt;吞吐&lt;a class=&#34;headerlink&#34; href=&#34;#吞吐&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;接下来要测试 Op Cache 能否单周期给单个线程提供 2 个 entry 的吞吐。由于每个 entry 最多可以有 6 (fused) inst，加起来是 12，而 dispatch 只有 8 MOP/cycle，因此退而求其次，不要求用完 entry 的 6 条指令，而是用 jmp 指令来提前结束 entry：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# rsi = rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;err&#34;&gt;2:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重复上述指令，发现在 5KB 之前都可以达到 4 的 IPC，之后则下降到 2 IPC，说明 5KB 时用满了 Op Cache。这里的 mov 指令是 3 字节，jmp 指令是 2 字节，也就是说 5KB 对应上述指令模式重复了 1024 次，此时 Op Cache 用满了容量，正好 Op Cache 也是 &lt;code&gt;64*16=1024&lt;/code&gt; 个 entry，印证了 Op Cache 的 entry 会被 jmp 提前结束，在上述的指令模式下，entry 不会跨越 jmp 指令记录后面的指令，每个 entry 只有两条指令。那么 4 IPC 证明了 Op Cache 可以每周期提供 2 entry，相比 Decode 只能每周期给单线程提供 4 条指令明显要快。&lt;/p&gt;&lt;h3 id=&#34;取指&#34;&gt;取指&lt;a class=&#34;headerlink&#34; href=&#34;#取指&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：每周期共 64B，可以取&lt;strong&gt;两个&lt;/strong&gt; 32B 对齐的指令块&lt;/p&gt;&lt;p&gt;为了测试取指，需要关掉 Op Cache，但由于 Decode 瓶颈太明显，不容易测出取指的性能，例如是否一个周期可以给单线程取两个 32B 对齐的指令块。目前通过实测可以知道，在关闭 Op Cache 的情况下，测试循环体跨越 64B 缓存行边界的情况，指令模式见下：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;err&#34;&gt;1:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-2&#34;&gt;&lt;a id=&#34;__codelineno-3-2&#34; name=&#34;__codelineno-3-2&#34; href=&#34;#__codelineno-3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;dec&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-3&#34;&gt;&lt;a id=&#34;__codelineno-3-3&#34; name=&#34;__codelineno-3-3&#34; href=&#34;#__codelineno-3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# 64B cache line boundary here&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-4&#34;&gt;&lt;a id=&#34;__codelineno-3-4&#34; name=&#34;__codelineno-3-4&#34; href=&#34;#__codelineno-3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;循环一次需要 1.5 个周期。如果 Fetch 每周期只能取一个 32B/64B 对齐的指令块，那么一次循环需要 2 个周期来取指，但如果 Fetch 每周期可以取两个 32B 对齐的指令块，那么一次循环只需要 1 个周期取指，但实际测出来又是 1.5 个周期，目前还没有找到合理的解释，但大概率 Fetch 还是可以给单线程每周期提供两个 32B 指令块。&lt;/p&gt;&lt;h3 id=&#34;decode&#34;&gt;Decode&lt;a class=&#34;headerlink&#34; href=&#34;#decode&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：2x &lt;strong&gt;4-wide&lt;/strong&gt; decode pipeline, &lt;strong&gt;one pipeline per thread&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;AMD Zen 5 的 Decode 虽然有两个 Pipe，但是每个逻辑线程只能用一个，意味着单线程情况下，无法做到 8-wide Decode，而 4-wide Decode 又太窄了点，因此 Op Cache 的命中率就显得很重要。&lt;/p&gt;&lt;p&gt;为了测试 Decode，需要首先按照上面的方法关闭 Op Cache，然后构造不同的指令序列以观察 IPC，得到的结果如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;重复 1-4 字节 nop：4 IPC&lt;/li&gt;&lt;li&gt;重复 5 字节 nop：3.2 IPC&lt;/li&gt;&lt;li&gt;重复 6 字节 nop：2.67 IPC&lt;/li&gt;&lt;li&gt;重复 7 字节 nop：2.3 IPC&lt;/li&gt;&lt;li&gt;重复 8 字节 nop：2 IPC&lt;/li&gt;&lt;li&gt;重复 9 字节 nop：1.78 IPC&lt;/li&gt;&lt;li&gt;重复 10 字节 nop：1.6 IPC&lt;/li&gt;&lt;li&gt;重复 11-15 字节 nop：1 IPC&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;上述 nop 的编码取自 Software Optimization Guide 的 Encodings for NOP Instructions 1 to 15 表格。&lt;/p&gt;&lt;p&gt;首先可以看到 Zen5 4-wide Decode 的限制，其次可以发现重复 5-10 字节的 nop，每周期的 Decode 吞吐都是 16B。11 字节以上则是撞到了 Decode 的限制：&lt;code&gt;Only the first decode slot (of four) can decode instructions greater than 10 bytes in length&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;比较有意思的是这个 16B 的限制，考虑移动窗口的译码设计，每周期可以对两个连续 16B 的窗口译码（&lt;code&gt;IBQ entries hold 16 byte-aligned fetch windows of the instruction byte stream. The decode pipes each scan two IBQ entries.&lt;/code&gt;），在 5 字节的 nop 模式下，每个周期的 Decode 应该是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Cycle 0: Window 0-31, Decode 0, 5, 10, 15&lt;/li&gt;&lt;li&gt;Cycle 1: Window 16-47, Decode 20, 25, 30, 35&lt;/li&gt;&lt;li&gt;Cycle 2: Window 32-63, Decode 40, 45, 50, 55&lt;/li&gt;&lt;li&gt;Cycle 3: Window 48-79, Decode 60, 65, 70, 75&lt;/li&gt;&lt;li&gt;Cycle 4: Window 80-111, Decode 80, 85, 90, 95&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;按这个理想的方法来看，应该可以做到 4 的 IPC，但实际上没有。一个猜测是，滑动窗口每次只能移动 1 个 16B，而不能从 48 跳到 80，那么从 Cycle 4 开始会出现性能损失：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Cycle 4: Window 64-95, Decode 80, 85, 90&lt;/li&gt;&lt;li&gt;Cycle 5: Window 80-111, Decode 95, 100, 105&lt;/li&gt;&lt;li&gt;Cycle 6: Window 96-127, Decode 110, 115, 120&lt;/li&gt;&lt;li&gt;Cycle 7: Window 112-143, Decode 125, 130, 135&lt;/li&gt;&lt;li&gt;Cycle 8: Window 128-159, Decode 140, 145, 150, 155&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这个规律延续下去，平均下来就是 3.2 IPC。&lt;/p&gt;&lt;p&gt;根据这个猜想，Decode 从两个连续的 IBQ entry 译码最多四条指令，是没有 16B 的限制的，但 IBQ 在一些情况下，每周期只能弹出一个 entry，而不能每周期弹出两个，这才导致了 16B 的吞吐。总之，4-wide 以及 16B 的限制，应该说是很小的。&lt;/p&gt;&lt;h3 id=&#34;l1-icache&#34;&gt;L1 ICache&lt;a class=&#34;headerlink&#34; href=&#34;#l1-icache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;32KB&lt;/strong&gt;, 8-way set associative&lt;/p&gt;&lt;p&gt;为了测试 L1 ICache 的容量，需要关闭 Op Cache，但由于 Decode 的限制，即使 footprint 大于 L1 ICache 容量，IPC 依然没有变化，针对这个现象，猜测 L1 ICache 的预取在起作用，并且 L2 Cache 到 L1 ICache 的 Refill 带宽不小于 Decode 带宽，导致瓶颈在 Decode。&lt;/p&gt;&lt;p&gt;因此，为了测试 L1 ICache 的容量，构造一个 jmp 序列，以 4B 位间距排布，观察到在关闭 Op Cache 的情况下，在 8192 条 jmp 指令之前可以做到 1 CPI，之后逐渐提升到 1.5 CPI，正好 8192 对应了 &lt;code&gt;8192*4=32768&lt;/code&gt; 也就是 32KB L1 ICache 的容量限制。&lt;/p&gt;&lt;h3 id=&#34;l1-itlb&#34;&gt;L1 ITLB&lt;a class=&#34;headerlink&#34; href=&#34;#l1-itlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;64-entry&lt;/strong&gt;, fully associative&lt;/p&gt;&lt;p&gt;为了测试 L1 ITLB 的容量，构造 jmp 序列，每个 jmp 在一个单独的页中，在关闭 Op Cache 的情况下观察 jmp 的性能：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../amd_zen5_itlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到明显的 64 pages 的拐点，对应了 64 entry 的 L1 ITLB。&lt;/p&gt;&lt;h3 id=&#34;l2-itlb&#34;&gt;L2 ITLB&lt;a class=&#34;headerlink&#34; href=&#34;#l2-itlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;2048-entry&lt;/strong&gt;, 8-way set associative L2 ITLB&lt;/p&gt;&lt;p&gt;继续沿用测试 L1 ITLB 的方式，把页的数量提高到 2000+，在关闭 Op Cache 的情况下得到以下测试结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../amd_zen5_l2itlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到明显的 2048 pages 的拐点，对应了 2048 entry 的 L2 ITLB。&lt;/p&gt;&lt;h3 id=&#34;btb&#34;&gt;BTB&lt;a class=&#34;headerlink&#34; href=&#34;#btb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：16K-entry L1 BTB, 8K-entry L2 BTB&lt;/p&gt;&lt;p&gt;因为 L1 ICache 只有 32KB，而 L1 BTB 有 16K entry，每个 entry 最多能保存两条分支指令，因此多数情况下，首先遇到的是 L1 ICache 的瓶颈，而不是 L1 BTB 的瓶颈。&lt;/p&gt;&lt;h3 id=&#34;return-address-stack&#34;&gt;Return Address Stack&lt;a class=&#34;headerlink&#34; href=&#34;#return-address-stack&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;52-entry&lt;/strong&gt; per thread&lt;/p&gt;&lt;p&gt;构造不同深度的调用链，测试每次调用花费的时间，在关闭 Op Cache 的情况下得到如下测试结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../amd_zen5_ras.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 52 的拐点，对应的就是 Return Address Stack 的大小。&lt;/p&gt;&lt;h3 id=&#34;indirect-target-predictor&#34;&gt;Indirect Target Predictor&lt;a class=&#34;headerlink&#34; href=&#34;#indirect-target-predictor&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：3072-entry Indirect Target Array&lt;/p&gt;&lt;h3 id=&#34;move-elimination-zero-cycle-move-and-zeroingones-idiom&#34;&gt;Move Elimination (Zero Cycle Move) and Zeroing/Ones Idiom&lt;a class=&#34;headerlink&#34; href=&#34;#move-elimination-zero-cycle-move-and-zeroingones-idiom&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：支持 xor/sub/cmp/sbb/vxorp/vandnp/vpcmpgt/vpandn/vpxor/vpsub 的 Zeroing Idiom，支持 pcmpeq/vpcmpeq 的 Ones Idiom，支持 mov/movsxd/xchg/(v)vmovap/(v)movdp/(v)movup 的 Zero Cycle Move。&lt;/p&gt;&lt;p&gt;实测下来，以下指令序列的 IPC 为：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;有依赖链的 mov r, r：7 IPC&lt;/li&gt;&lt;li&gt;没有依赖的 mov r, r：7 IPC&lt;/li&gt;&lt;li&gt;xor r, r, r：7 IPC&lt;/li&gt;&lt;li&gt;sub r, r, r：7 IPC&lt;/li&gt;&lt;li&gt;有依赖链的 mov vr, vr：6 IPC&lt;/li&gt;&lt;li&gt;没有依赖的 mov vr, vr：6 IPC&lt;/li&gt;&lt;li&gt;xor vr, vr, vr：6 IPC&lt;/li&gt;&lt;li&gt;mov r, imm：6 IPC&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;其中 r 表示整数寄存器，vr 表示浮点/向量寄存器。总体来说还是做的比较完善的。&lt;/p&gt;&lt;h3 id=&#34;dispatch&#34;&gt;Dispatch&lt;a class=&#34;headerlink&#34; href=&#34;#dispatch&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：8 MOP/cycle, up to 2 taken branches/cycle&lt;/p&gt;&lt;h2 id=&#34;后端&#34;&gt;后端&lt;a class=&#34;headerlink&#34; href=&#34;#后端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;rob&#34;&gt;ROB&lt;a class=&#34;headerlink&#34; href=&#34;#rob&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;224-entry per thread&lt;/strong&gt;, 1-2 MOP per entry&lt;/p&gt;&lt;p&gt;把两个独立的 long latency pointer chasing load 放在循环的头和尾，中间用 NOP 填充，当 NOP 填满了 ROB，第二个 pointer chasing load 无法提前执行，导致性能下降。测试结果如下：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../amd_zen5_rob.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;当 NOP 指令达到 446 条时出现性能突变，此时应该是触发了 Zen 5 的每个 entry 保存两个 MOP 的条件，因此 446 条 NOP 指令对应 223 个 entry，加上循环开头的 load 指令，正好把循环尾部的 load 拦在了 ROB 外面，导致性能下降。&lt;/p&gt;&lt;p&gt;说明单线程可以访问到的 ROB 容量是 224 entry。&lt;/p&gt;&lt;h3 id=&#34;register-file&#34;&gt;Register File&lt;a class=&#34;headerlink&#34; href=&#34;#register-file&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：240-entry(40 per thread for architectural) integer physical register file, 192-entry flag physical register file, 384-entry 512b vector register file&lt;/p&gt;&lt;p&gt;为了测试物理寄存器堆大小，构造一个循环，循环开头和结尾各是一个长延迟的操作，由于 Zen 5 没有实现 temporal prefetcher，使用的是 pointer chasing load。然后在两个长延迟的操作中间穿插不同的指令类型，从而测出对应的物理寄存器堆可供预测执行的寄存器数量：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../amd_zen5_rf.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;整数方面使用 lea 指令来消耗整数物理寄存器而不消耗 flags 寄存器，此时无论是 32 位还是 64 位寄存器，供预测执行的寄存器数都有 200 个，和官方的信息吻合：&lt;code&gt;200+40=240&lt;/code&gt;，说明超线程在没有负载的时候，不会占用整数物理寄存器堆，这在 AMD 的文档中叫做 Watermarked：&lt;code&gt;Resource entries are assigned on demand&lt;/code&gt;。356 个 flags 寄存器超过了官方宣传的 192 的大小，猜测做了一些优化，测到的并非 flags 寄存器堆大小。&lt;/p&gt;&lt;p&gt;浮点方面，测得 430 个供预测执行的浮点寄存器，超过了官方宣传的 384 个 512 位浮点寄存器。考虑到 Zen5 引入了在 Rename 之前的 96-entry Non-Scheduling Queue(NSQ)，在 NSQ 中的指令还没有经过重命名，因此不消耗物理寄存器：&lt;code&gt;384+96=480&lt;/code&gt;，再去掉至少 32 个架构寄存器 zmm0-zmm31，和观察到的 430 是比较接近的。&lt;/p&gt;&lt;p&gt;针对浮点寄存器，Zen5 的不同平台的设计不完全一样，上面的测试是在 9950X 上进行的，其他平台的测试以及分析见 &lt;a href=&#34;http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/#vector_register_file&#34;&gt;Zen5&#39;s AVX512 Teardown + More...&lt;/a&gt;。&lt;/p&gt;&lt;h3 id=&#34;l1-dcache&#34;&gt;L1 DCache&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dcache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;48KB&lt;/strong&gt;, 12-way set associative, index 是 VA[11:6]&lt;/p&gt;&lt;p&gt;使用不同 footprint 的随机的 pointer chasing load，测试性能，得到如下结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../amd_zen5_l1dc.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以观察到明显的 48KB 的拐点，命中 L1 DCache 时 load to use latency 是 4 cycle，命中 L2 时增大到了 14 cycle。&lt;/p&gt;&lt;h4 id=&#34;linear-address-utagway-predictor&#34;&gt;Linear Address UTAG/Way-Predictor&lt;a class=&#34;headerlink&#34; href=&#34;#linear-address-utagway-predictor&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;复现论文 &lt;a href=&#34;https://dl.acm.org/doi/10.1145/3320269.3384746&#34;&gt;Take A Way: Exploring the Security Implications of AMD&#39;s Cache Way Predictors&lt;/a&gt;，可以看到 Zen 5 的 UTAG 哈希函数和 Zen 2 一样也是如下 8 bit：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;VA[12] xor VA[27]&lt;/li&gt;&lt;li&gt;VA[13] xor VA[26]&lt;/li&gt;&lt;li&gt;VA[14] xor VA[25]&lt;/li&gt;&lt;li&gt;VA[15] xor VA[20]&lt;/li&gt;&lt;li&gt;VA[16] xor VA[21]&lt;/li&gt;&lt;li&gt;VA[17] xor VA[22]&lt;/li&gt;&lt;li&gt;VA[18] xor VA[23]&lt;/li&gt;&lt;li&gt;VA[19] xor VA[24]&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果两个虚拟地址映射到同一个 DCache Set 上的不同 Way（Set 根据 VA[11:6] 唯一确定），并且它们的 uTag 出现冲突，那么访问一个虚拟地址会把另一个虚拟地址从 L1 DCache 中清掉。&lt;/p&gt;&lt;h3 id=&#34;load-store-unit&#34;&gt;Load Store Unit&lt;a class=&#34;headerlink&#34; href=&#34;#load-store-unit&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：每周期最多四个内存操作。每周期最多四个读，其中最多两个 128b/256b/512b 读；每周期最多两个写，其中最多一个 512b 写。load to use latency，整数是 4-5 个周期，浮点是 7-8 个周期。跨越 64B 边界的读会有额外的一个周期的延迟。支持 Store to load forwarding，要求先前的 store 包括了 load 的所有字节，不要求对齐。&lt;/p&gt;&lt;h4 id=&#34;吞吐_1&#34;&gt;吞吐&lt;a class=&#34;headerlink&#34; href=&#34;#吞吐_1&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;实测 Zen 5 每个周期可以完成如下的访存操作：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;4x 32b Load: 1 cycle&lt;/li&gt;&lt;li&gt;4x 64b Load: 1 cycle&lt;/li&gt;&lt;li&gt;2x 128b Load: 1 cycle&lt;/li&gt;&lt;li&gt;2x 256b Load: 1 cycle&lt;/li&gt;&lt;li&gt;2x 32b Store: 1 cycle&lt;/li&gt;&lt;li&gt;2x 64b Store: 1 cycle&lt;/li&gt;&lt;li&gt;2x 128b Store: 1 cycle&lt;/li&gt;&lt;li&gt;2x 256b Store: 1 cycle&lt;/li&gt;&lt;li&gt;1x 64b Load + 2x 64b Store: 1 cycle&lt;/li&gt;&lt;li&gt;2x 64b Load + 2x 64b Store: 1 cycle&lt;/li&gt;&lt;li&gt;3x 64b Load + 1x 64b Store: 1 cycle&lt;/li&gt;&lt;li&gt;1x 128b Load + 2x 128b Store: 1 cycle&lt;/li&gt;&lt;li&gt;2x 128b Load + 1x 128b Store: 1 cycle&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;简单来说，每周期支持 4 个 64b 的 Load/Store，其中 Store 最多两条。一个 128b 的 Load 相当于两个 64b，对应 IPC 减半。&lt;/p&gt;&lt;h4 id=&#34;延迟&#34;&gt;延迟&lt;a class=&#34;headerlink&#34; href=&#34;#延迟&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;构造串行的 load 链，观察到多数情况下 load to use latency 是 4 个周期，在跨越 64B 边界时，会增加一个周期变成 5 个周期。此外，如果涉及到 index 计算（即 &lt;code&gt;offset(base, index, shift)&lt;/code&gt;），也会增加一个周期。&lt;/p&gt;&lt;h4 id=&#34;store-to-load-forwarding&#34;&gt;Store to Load Forwarding&lt;a class=&#34;headerlink&#34; href=&#34;#store-to-load-forwarding&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;经过实际测试，如下的情况可以成功转发：&lt;/p&gt;&lt;p&gt;对地址 x 的 Store 转发到对地址 y 的 Load 成功时 y-x 的取值范围：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Store\Load&lt;/th&gt;&lt;th&gt;8b Load&lt;/th&gt;&lt;th&gt;16b Load&lt;/th&gt;&lt;th&gt;32b Load&lt;/th&gt;&lt;th&gt;64b Load&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;8b Store&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16b Store&lt;/td&gt;&lt;td&gt;[0,1]&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;32b Store&lt;/td&gt;&lt;td&gt;[0,3]&lt;/td&gt;&lt;td&gt;[0,2]&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;64b Store&lt;/td&gt;&lt;td&gt;[0,7]&lt;/td&gt;&lt;td&gt;[0,6]&lt;/td&gt;&lt;td&gt;[0,4]&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;可以看到，Zen 5 在 Store 完全包含 Load 的情况下都可以转发，没有额外的对齐要求。但当 Load 和 Store 只有部分重合时，就无法转发。两个连续的 32 位的 Store 和一个 64 位的 Load 重合也不能转发。&lt;/p&gt;&lt;p&gt;可见 Zen 5 的 Store to Load Forwarding 实现比较粗暴，只允许 Load 从单个完全包含 Load 的 Store 中转发数据。和 &lt;a href=&#34;../../07/arm_neoverse_v2/&#34;&gt;Neoverse V2&lt;/a&gt; 相比，Zen 5 对 Load 在 Store 内的偏移没有要求，但也不允许 Load 和 Store 只有一部分覆盖，也不支持一个 Load 从两个或更多的 Store 中获取数据。&lt;/p&gt;&lt;p&gt;成功转发时 8 cycle，有 Overlap 但转发失败时 14-15 cycle。&lt;/p&gt;&lt;p&gt;小结：Zen 5 的 Store to Load Forwarding：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;1 ld + 1 st: 要求 st 包含 ld&lt;/li&gt;&lt;li&gt;1 ld + 2+ st: 不支持&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;l1-dtlb&#34;&gt;L1 DTLB&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dtlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;96-entry&lt;/strong&gt;, fully associative&lt;/p&gt;&lt;p&gt;使用不同 footprint 的随机的 pointer chasing load 且每次 load 都在单独的页内，测试性能，得到如下结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../amd_zen5_l1dtlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以观察到明显的 96 page 的拐点，命中 L1 DTLB 时 load to use latency 是 4 cycle，命中 L2 DTLB 时增大到了 11 cycle。&lt;/p&gt;&lt;p&gt;这个拐点也可以从性能计数器中看出，Zen 5 针对 L1 DTLB 有性能计数器 &lt;code&gt;PMCx045 [L1 DTLB Misses] (Core::X86::Pmc::Core::LsL1DTlbMiss)&lt;/code&gt;，根据这个事件记录 L1 DTLB Miss 次数，可以看到在 96 个页内时 Miss 次数为 0，之后开始增加，到 100 个页的时候 Miss 次数和访问次数相同，即 100% Miss Rate。&lt;/p&gt;&lt;h3 id=&#34;l2-dtlb&#34;&gt;L2 DTLB&lt;a class=&#34;headerlink&#34; href=&#34;#l2-dtlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：4096-entry, 16-way set associative&lt;/p&gt;&lt;h3 id=&#34;l2-cache&#34;&gt;L2 Cache&lt;a class=&#34;headerlink&#34; href=&#34;#l2-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：16-way set associative, inclusive, 1MB, &lt;strong&gt;&amp;gt;= 14 cycle load to use latency&lt;/strong&gt;&lt;/p&gt;&lt;h3 id=&#34;l3-cache&#34;&gt;L3 Cache&lt;a class=&#34;headerlink&#34; href=&#34;#l3-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：16-way set associative, exclusive&lt;/p&gt;&lt;h3 id=&#34;执行单元&#34;&gt;执行单元&lt;a class=&#34;headerlink&#34; href=&#34;#执行单元&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：Zen 5 的后端有 6 条 ALU 流水线，4 条访存流水线，4 条 512 位宽向量流水线（其中 2 条支持 FMA），2 条向量访存流水线&lt;/p&gt;&lt;p&gt;实测发现 Zen 5 每周期最多可以执行 2 条 AVX512 的浮点 FMA 指令，也就是说，每周期浮点峰值性能：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;单精度：&lt;code&gt;512/32*2*2=64&lt;/code&gt; FLOP per cycle&lt;/li&gt;&lt;li&gt;双精度：&lt;code&gt;512/64*2*2=32&lt;/code&gt; FLOP per cycle&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;通过 512 位的浮点 datapath，终于达到了第一梯队的浮点峰值性能。注意移动端的 Zen 5 的浮点 datapath 砍半，只有 256 位。&lt;/p&gt;</description><link>https://jia.je/hardware/2024/11/11/amd_zen5/</link> <pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/11/11/amd_zen5/</guid> </item> <item> <title>把评论系统从 Disqus 迁移到 Giscus</title> <category>meta</category> <category>site</category> <description>&lt;h1 id=&#34;把评论系统从-disqus-迁移到-giscus&#34;&gt;把评论系统从 Disqus 迁移到 Giscus&lt;a class=&#34;headerlink&#34; href=&#34;#把评论系统从-disqus-迁移到-giscus&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Disqus 要加广告了，于是本博客的评论系统迁移到了 Giscus。&lt;/p&gt;</description><link>https://jia.je/meta/2024/11/10/migrate-from-disqus-to-giscus/</link> <pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/meta/2024/11/10/migrate-from-disqus-to-giscus/</guid> </item> <item> <title>ARM Neoverse V2 (代号 Demeter) 微架构评测</title> <category>arm</category> <category>cpu</category> <category>hardware</category> <category>neoverse</category> <category>performance</category> <category>uarch-review</category> <description>&lt;h1 id=&#34;arm-neoverse-v2-代号-demeter-微架构评测&#34;&gt;ARM Neoverse V2 (代号 Demeter) 微架构评测&lt;a class=&#34;headerlink&#34; href=&#34;#arm-neoverse-v2-代号-demeter-微架构评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ARM Neoverse V2 是目前（2024 年）在服务器上能用到的最新的 ARM 公版核平台（AWS Graviton 4），测试一下这个微架构在各个方面的表现。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;官方信息&#34;&gt;官方信息&lt;a class=&#34;headerlink&#34; href=&#34;#官方信息&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ARM 关于 Neoverse V2 微架构有如下公开信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://hc2023.hotchips.org/assets/program/conference/day1/CPU1/HC2023.Arm.MagnusBruce.v04.FINAL.pdf&#34;&gt;Arm Neoverse V2 platform: Leadership Performance and Power Efficiency for Next-Generation Cloud Computing, ML and HPC Workloads&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://developer.arm.com/documentation/102375/latest/&#34;&gt;Arm® Neoverse™ V2 Core Technical Reference Manual&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://developer.arm.com/documentation/109898/latest/&#34;&gt;Arm Neoverse V2 Software Optimization Guide&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;考虑到 Neoverse V2 与 Cortex X3 的高度相似性，这里也列出 Cortex X3 的相关信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://fuse.wikichip.org/news/6855/arm-unveils-next-gen-flagship-core-cortex-x3/&#34;&gt;Arm Unveils Next-Gen Flagship Core: Cortex-X3&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://developer.arm.com/documentation/101593/latest/&#34;&gt;Arm® Cortex‑X3 Core Technical Reference Manual&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;现有评测&#34;&gt;现有评测&lt;a class=&#34;headerlink&#34; href=&#34;#现有评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;网上已经有 Neoverse V2 微架构的评测和分析，建议阅读：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/p/hot-chips-2023-arms-neoverse-v2&#34;&gt;Hot Chips 2023: Arm’s Neoverse V2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面分各个模块分别记录官方提供的信息，以及实测的结果。读者可以对照已有的第三方评测理解。官方信息与实测结果一致的数据会加粗。&lt;/p&gt;&lt;h2 id=&#34;benchmark&#34;&gt;Benchmark&lt;a class=&#34;headerlink&#34; href=&#34;#benchmark&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Neoverse V2 (AWS Graviton 4) 的性能测试结果见 &lt;a href=&#34;../../../../../benchmark/&#34;&gt;SPEC&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&#34;mop-vs-uop&#34;&gt;MOP vs uOP&lt;a class=&#34;headerlink&#34; href=&#34;#mop-vs-uop&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;MOP = Macro operation, uOP = Micro operation&lt;/p&gt;&lt;p&gt;ARM 公版核微架构既有 MOP 的概念，又有 uOP 的概念。uOP 主要是针对后端，执行单元处理的是 uOP。MOP 出现在 MOP Cache 以及 ROB 当中。他们和指令都并不是一一对应的关系。&lt;/p&gt;&lt;p&gt;例如 Instruction Fusion 特性，可以把多条指令合并到一条 uOP 当中，例如 CMP + CSET，合并成一个 uOP 以后，只需要一个 ALU 就可以完成整个操作。另一方面，一条指令也可能拆成多个 uOP，例如 128b Load Pair 指令，一条指令被拆成两个 uOP，可以独立执行，但为了保证精确异常，在 ROB 中还是同一个 MOP。&lt;/p&gt;&lt;p&gt;当然了，如果不考虑这些细节，大多数情况下，一条指令对应一个 MOP 对应一个 uOP 也是成立的。&lt;/p&gt;&lt;h2 id=&#34;前端&#34;&gt;前端&lt;a class=&#34;headerlink&#34; href=&#34;#前端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;branch-predictor&#34;&gt;Branch Predictor&lt;a class=&#34;headerlink&#34; href=&#34;#branch-predictor&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：Two predicted branches per cycle, nanoBTB + two level main BTB, 8 table 2 way TAGE direction predictor&lt;/p&gt;&lt;h3 id=&#34;l1-icache&#34;&gt;L1 ICache&lt;a class=&#34;headerlink&#34; href=&#34;#l1-icache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;64KB&lt;/strong&gt;, 4-way set associative, VIPT behaving as PIPT, 64B cacheline, PLRU replacement policy&lt;/p&gt;&lt;p&gt;为了测试 L1 ICache 容量，构造一个具有巨大指令 footprint 的循环，由大量的 nop 和最后的分支指令组成。观察在不同 footprint 大小下的 IPC：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../arm_neoverse_v2_fetch_bandwidth.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;开始有一段 IPC 接近 12，此时指令由 MOP Cache 提供，由于连续的两条 NOP 可以被融合成一个 uOP，因此可以突破 8 的限制，但为什么是 12 还需要进一步研究。&lt;/p&gt;&lt;p&gt;当指令超出 MOP Cache 容量后，指令走 ICache + Decode，此时可以达到 6 的 IPC，与 6-wide 的 Decode Width 吻合。当 footprint 超出 64 KB 时，IPC 下降，对应了 64KB 的 L1 ICache 容量。&lt;/p&gt;&lt;p&gt;超出 L1 ICache 容量后，可以达到 4 的 IPC，说明 L2 Cache 可以提供每周期 16 字节的取指带宽。&lt;/p&gt;&lt;h3 id=&#34;mop-cache&#34;&gt;MOP Cache&lt;a class=&#34;headerlink&#34; href=&#34;#mop-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;1536 macro-operations&lt;/strong&gt;, 4-way skewed associative, VIVT behaving as PIPT, NRU replacement policy, &lt;strong&gt;8 MOP/cycle&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;因为 MOP Cache 的带宽比 Decode 高，为了测试出 MOP Cache 的规格，需要构造指令序列，使其可以达到 8 MOP/cycle 的 IPC，如果走的是 Instruction Fetch + Decode，则达不到这个 IPC。但是 Neoverse V2 的 Dispatch 有比较明确的限制：&lt;/p&gt;&lt;p&gt;The dispatch stage can process up to 8 MOPs per cycle and dispatch up to 16 µOPs per cycle, with the following limitations on the number of µOPs of each type that may be simultaneously dispatched.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Up to 4 µOPs utilizing the S（单周期整数）or B（分支）pipelines&lt;/li&gt;&lt;li&gt;Up to 4 µOPs utilizing the M（多周期整数）pipelines&lt;/li&gt;&lt;li&gt;Up to 2 µOPs utilizing the M0（多周期整数）pipelines&lt;/li&gt;&lt;li&gt;Up to 2 µOPs utilizing the V0（浮点/向量）pipeline&lt;/li&gt;&lt;li&gt;Up to 2 µOPs utilizing the V1（浮点/向量）pipeline&lt;/li&gt;&lt;li&gt;Up to 6 µOPs utilizing the L（访存）pipelines&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;考虑到这个限制，使用 4 条 add 指令，4 条 fadd 指令为一组，不断重复。通过测试，这样的指令序列确实可以达到 8 的 IPC。当指令个数增加到超出 MOP Cache 容量时，将会观察到性能的下降：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../arm_neoverse_v2_mop_cache.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;拐点出现在 192 个指令组，此时达到 MOP Cache 的容量瓶颈，&lt;code&gt;192*8=1536&lt;/code&gt;，正好是 MOP Cache 的容量。&lt;/p&gt;&lt;h3 id=&#34;l1-itlb&#34;&gt;L1 ITLB&lt;a class=&#34;headerlink&#34; href=&#34;#l1-itlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：Caches entries at the 4KB, 16KB, 64KB, or 2MB granularity, Fully associative, 48 entries&lt;/p&gt;&lt;p&gt;构造一系列的 B 指令，使得 B 指令分布在不同的 page 上，使得 ITLB 成为瓶颈：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../arm_neoverse_v2_itlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 48 Page 出现了明显的拐点，对应的就是 48 的 L1 ITLB 容量。此后性能降低到 7 CPI，此时对应了 L2 Unified TLB 的延迟。&lt;/p&gt;&lt;p&gt;进一步增加 Page 数量，发现在大约 1000 个页的时候，时间从 7 cycle 逐渐上升：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../arm_neoverse_v2_itlb_l2.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;考虑到 L2 Unified TLB 一共有 2048 个 Entry，猜测它限制了 ITLB 能使用的 L2 TLB 的容量只有 2048 的一半，也就是 1024 项。超出 1024 项以后，需要 Page Table Walker 进行地址翻译。&lt;/p&gt;&lt;h3 id=&#34;decode&#34;&gt;Decode&lt;a class=&#34;headerlink&#34; href=&#34;#decode&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：6-wide Decode&lt;/p&gt;&lt;h3 id=&#34;return-stack&#34;&gt;Return Stack&lt;a class=&#34;headerlink&#34; href=&#34;#return-stack&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Return Stack 记录了最近的函数调用链，call 时压栈，return 时弹栈，从而实现 return 指令的目的地址的预测。构造不同深度的调用链，发现 Neoverse V2 的 Return Stack 深度为 32：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../arm_neoverse_v2_return_stack.png&#34; /&gt;&lt;/p&gt;&lt;h2 id=&#34;后端&#34;&gt;后端&lt;a class=&#34;headerlink&#34; href=&#34;#后端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;dispatch&#34;&gt;Dispatch&lt;a class=&#34;headerlink&#34; href=&#34;#dispatch&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：up to 8 MOPs per cycle and up to 16 uOPs per cycle&lt;/p&gt;&lt;h3 id=&#34;store-to-load-forwarding&#34;&gt;Store to Load Forwarding&lt;a class=&#34;headerlink&#34; href=&#34;#store-to-load-forwarding&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;p&gt;The Neoverse V2 core allows data to be forwarded from store instructions to a load instruction with the restrictions mentioned below:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Load start address should align with the start or middle address of the older store&lt;/li&gt;&lt;li&gt;Loads of size greater than or equal to 8 bytes can get the data forwarded from a maximum of 2 stores. If there are 2 stores, then each store should forward to either first or second half of the load&lt;/li&gt;&lt;li&gt;Loads of size less than or equal to 4 bytes can get their data forwarded from only 1 store&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;经过实际测试，如下的情况可以成功转发：&lt;/p&gt;&lt;p&gt;对地址 x 的 Store 转发到对地址 y 的 Load 成功时 y-x 的取值范围：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Store\Load&lt;/th&gt;&lt;th&gt;8b Load&lt;/th&gt;&lt;th&gt;16b Load&lt;/th&gt;&lt;th&gt;32b Load&lt;/th&gt;&lt;th&gt;64b Load&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;8b Store&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16b Store&lt;/td&gt;&lt;td&gt;{0,1}&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;32b Store&lt;/td&gt;&lt;td&gt;{0,2}&lt;/td&gt;&lt;td&gt;{0,2}&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{-4,0}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;64b Store&lt;/td&gt;&lt;td&gt;{0,4}&lt;/td&gt;&lt;td&gt;{0,4}&lt;/td&gt;&lt;td&gt;{0,4}&lt;/td&gt;&lt;td&gt;{-4,0,4}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;一个 Load 需要转发两个 Store 的数据的情况：对地址 x 的 32b Store 和对地址 x+4 的 32b Store 转发到对地址 y 的 64b Load，在 Overlap 的情况下，要求 y=x，也就是恰好前半来自第一个 Store，后半来自第二个 Store。&lt;/p&gt;&lt;p&gt;和官方的描述是比较符合的，只考虑了全部转发、转发前半和转发后半的三种场景。特别地，针对常见的 64b Load，支持 y-x=-4。同时也支持前半和后半来自两个不同的 Store。对地址本身的对齐没有要求，甚至在跨缓存行边界时也可以转发，只是对 Load 和 Store 的相对位置有要求。&lt;/p&gt;&lt;p&gt;和 &lt;a href=&#34;../../11/amd_zen5/&#34;&gt;Zen 5&lt;/a&gt; 相比，Neoverse V2 对 Store 和 Load 的相对位置有额外的要求（开头或正中央），但支持了 Store 和 Load 只有一部分覆盖的情况，也允许一个 Load 从两个 Store 中取得数据。&lt;/p&gt;&lt;p&gt;从性能上，可以转发时 5 Cycle，有 Overlap 但无法转发时 10.5 Cycle。&lt;/p&gt;&lt;p&gt;小结：ARM Neoverse V2 的 Store to Load Forwarding：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;1 ld + 1 st: 要求 ld 和 st 地址相同或差出半个 st 宽度&lt;/li&gt;&lt;li&gt;1 ld + 2 st: 要求 ld 和 st 地址相同&lt;/li&gt;&lt;li&gt;1 ld + 4 st: 不支持&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;计算单元&#34;&gt;计算单元&lt;a class=&#34;headerlink&#34; href=&#34;#计算单元&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：6x ALU, &lt;strong&gt;2x Branch&lt;/strong&gt;, &lt;strong&gt;4x 128b SIMD&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;实测以下指令的吞吐：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;int add: 4 IPC，受到 Dispatch 限制：&lt;code&gt;Up to 4 µOPs utilizing the S（单周期整数）or B（分支）pipelines&lt;/code&gt;&lt;/li&gt;&lt;li&gt;int mul: 2 IPC，对应两个 Multi Cycle 单元&lt;/li&gt;&lt;li&gt;int not taken branch: 2 IPC，对应两个 Branch 单元&lt;/li&gt;&lt;li&gt;asimd fadd double: 4 IPC，对应四个 FP/ASIMD 单元&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;load-store-unit&#34;&gt;Load Store Unit&lt;a class=&#34;headerlink&#34; href=&#34;#load-store-unit&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;2 Load/Store Pipe + 1 Load Pipe&lt;/strong&gt;, Reduce bandwidth or &lt;strong&gt;incur additional latency&lt;/strong&gt; for:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Load operations that cross a cache-line (64-byte) boundary.&lt;/li&gt;&lt;li&gt;Quad-word load operations that are not 4B aligned.&lt;/li&gt;&lt;li&gt;Store operations that cross a 32B boundary.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;经过测试，一个周期内可以最多完成如下的 Load/Store 指令：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;3x 64b Load&lt;/li&gt;&lt;li&gt;2x 64b Load + 1x 64b Store&lt;/li&gt;&lt;li&gt;1x 64b Load + 2x 64b Store&lt;/li&gt;&lt;li&gt;2x 64b Store&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这个性能符合 2 LS + 1 LD pipe 的设计。&lt;/p&gt;&lt;p&gt;经过测试，当 Load 指令没有跨越缓存行时，load to use 延迟是 4 cycle；当 Load 指令跨过 64B 缓存行边界时，load to use 延迟增加到 5 cycle。&lt;/p&gt;&lt;h3 id=&#34;memory-dependency-predictor&#34;&gt;Memory Dependency Predictor&lt;a class=&#34;headerlink&#34; href=&#34;#memory-dependency-predictor&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;为了预测执行 Load，需要保证 Load 和之前的 Store 访问的内存没有 Overlap，那么就需要有一个预测器来预测 Load 和 Store 之前在内存上的依赖。参考 &lt;a href=&#34;https://blog.stuffedcow.net/2014/01/x86-memory-disambiguation/&#34;&gt;Store-to-Load Forwarding and Memory Disambiguation in x86 Processors&lt;/a&gt; 的方法，构造两个指令模式，分别在地址和数据上有依赖：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;数据依赖，地址无依赖：&lt;code&gt;str x3, [x1]&lt;/code&gt; 和 &lt;code&gt;ldr x3, [x2]&lt;/code&gt;&lt;/li&gt;&lt;li&gt;地址依赖，数据无依赖：&lt;code&gt;str x2, [x1]&lt;/code&gt; 和 &lt;code&gt;ldr x1, [x2]&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;初始化时，&lt;code&gt;x1&lt;/code&gt; 和 &lt;code&gt;x2&lt;/code&gt; 指向同一个地址，重复如上的指令模式，观察到多少条 &lt;code&gt;ldr&lt;/code&gt; 指令时会出现性能下降：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../arm_neoverse_v2_memory_dependency_predictor.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;有意思的是，地址依赖的阈值是 40，而数据依赖没有阈值。&lt;/p&gt;&lt;h3 id=&#34;move-elimination&#34;&gt;Move Elimination&lt;a class=&#34;headerlink&#34; href=&#34;#move-elimination&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：特定情况下这些指令可以被优化：mov reg, 0; mov reg, zero; mov vreg, 0; mov reg, reg;mov vreg, vreg&lt;/p&gt;&lt;p&gt;实际测试，各种模式的 IPC 如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;mov reg, 0: IPC 6&lt;/li&gt;&lt;li&gt;mov vreg, 0: IPC 6&lt;/li&gt;&lt;li&gt;mov reg, reg: 无依赖链时 IPC 4&lt;/li&gt;&lt;li&gt;mov vreg, vreg: 无依赖链时 IPC 3.6&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;虽然做了优化，但算不上很快。&lt;/p&gt;&lt;h3 id=&#34;reorder-buffer&#34;&gt;Reorder Buffer&lt;a class=&#34;headerlink&#34; href=&#34;#reorder-buffer&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;320 MOP&lt;/strong&gt; ROB, 8-wide retire&lt;/p&gt;&lt;p&gt;把两个串行的 fsqrt 序列放在循环的头和尾，中间用 NOP 填充，如果 ROB 足够大，可以在执行开头串行的 fsqrt 序列时，同时执行结尾串行的 fsqrt 序列，此时性能是最优的。如果 ROB 不够大，那么会观察到性能下降。由于 Neoverse V2 执行 NOP 可以达到接近 12 的 IPC，所以只需要很少的 fsqrt 就足够生成足够的延迟。&lt;/p&gt;&lt;p&gt;通过测试，发现在大约 640 条 NOP 时出现性能下降，而 Neoverse V2 实现了 Instruction Fusion，两条 NOP 指令算做一条 uOP，同时也是一条 MOP，因此 640 条 NOP 对应 320 MOP 的 ROB 大小。极限情况下，320 MOP 可以存 640 uOP，但是实际上比较难达到，很容易受限于其他结构。&lt;/p&gt;&lt;h3 id=&#34;l1-dcache&#34;&gt;L1 DCache&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dcache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;64KB&lt;/strong&gt;, 4-way set associative, &lt;strong&gt;VIPT behaving as PIPT&lt;/strong&gt;, 64B cacheline, ECC protected, RRIP replacement policy, &lt;strong&gt;4×64-bit read paths&lt;/strong&gt; and &lt;strong&gt;4×64-bit write&lt;/strong&gt; paths for the integer execute pipeline, &lt;strong&gt;3×128-bit read paths&lt;/strong&gt; and &lt;strong&gt;2×128-bit&lt;/strong&gt; write paths for the vector execute pipeline&lt;/p&gt;&lt;h4 id=&#34;容量&#34;&gt;容量&lt;a class=&#34;headerlink&#34; href=&#34;#容量&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;构造不同大小 footprint 的 pointer chasing 链，测试不同 footprint 下每条 load 指令耗费的时间：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../arm_neoverse_v2_l1dc.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 64KB 出现了明显的拐点，对应的就是 64KB 的 L1 DCache 容量。之后延迟先上升后下降，与 ARM 采用的 Correlated Miss Caching(CMC) 预取器记住了 pointer chasing 的历史有关，详细可以阅读 &lt;a href=&#34;https://hc33.hotchips.org/assets/program/conference/day1/20210818_Hotchips_NeoverseN2.pdf&#34;&gt;Arm Neoverse N2: Arm’s 2nd generation high performance infrastructure CPUs and system IPs&lt;/a&gt;。&lt;/p&gt;&lt;h4 id=&#34;延迟&#34;&gt;延迟&lt;a class=&#34;headerlink&#34; href=&#34;#延迟&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;经过测试，L1 DCache 的 load to use latency 是 4 cycle，没有针对 pointer chasing 做 3 cycle 的优化。&lt;/p&gt;&lt;h4 id=&#34;吞吐&#34;&gt;吞吐&lt;a class=&#34;headerlink&#34; href=&#34;#吞吐&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;使用 FP/ASIMD 128b Load 可以达到 3 IPC，对应了 3x128b read paths；而如果使用 2x64b 整数 LDP，则只能达到 2 IPC，对应 4x64b read paths。也就是说，要达到峰值的读取性能，必须用 FP/ASIMD 指令。写入方面，向量 128b Store 可以达到 2 IPC，对应了 2x128b write paths；类似地，2x64b 整数 STP 能达到 2 IPC，对应 4x64b write paths。&lt;/p&gt;&lt;h4 id=&#34;vipt&#34;&gt;VIPT&lt;a class=&#34;headerlink&#34; href=&#34;#vipt&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;在 4KB page 的情况下，64KB 4-way 的 L1 DCache 不满足 VIPT 的 Index 全在页内偏移的条件（详见 &lt;a href=&#34;../../../../2023/12/08/vipt-l1-cache-page-size/&#34;&gt;VIPT 与缓存大小和页表大小的关系&lt;/a&gt;），此时要么改用 PIPT，要么在 VIPT 的基础上处理 alias 的问题。为了测试这一点，参考 &lt;a href=&#34;https://blog.cyyself.name/why-the-big-l1-cache-is-so-hard/&#34;&gt;浅谈现代处理器实现超大 L1 Cache 的方式&lt;/a&gt; 的测试方法，用 shm 构造出两个 4KB 虚拟页映射到同一个物理页的情况，然后在两个虚拟页之间 copy，发现相比在同一个虚拟页内 copy 有显著的性能下降，并且产生了大量的 L1 DCache Refill：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;copy from aliased page = 3261121467 cycles, 285103870 refills&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;baseline = 1520692165 cycles, 1200 refills&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;slowdown = 2.14x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此验证了 L1 DCache 采用的是 VIPT，并做了针对 alias 的正确性处理。如果是 PIPT，那么 L1 DCache 会发现这两个页对应的是相同的物理地址，性能不会下降，也不需要频繁的 refill。&lt;/p&gt;&lt;h4 id=&#34;构造&#34;&gt;构造&lt;a class=&#34;headerlink&#34; href=&#34;#构造&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;进一步尝试研究 Neoverse V2 的 L1 DCache 的构造，为了支持每周期 3 条 Load 指令，L1 DCache 通常会分 Bank，每个 Bank 都有自己的读口。如果 Load 分布到不同的 Bank 上，各 Bank 可以同时读取，获得更高的性能；如果 Load 命中相同的 Bank，但是访问的 Bank 内地址不同，就只能等到下一个周期再读取。为了测试 Bank 的构造，设计一系列以不同的固定 stride 间隔的 Load 指令，观察 Load 的 IPC：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Stride=1B/2B/4B/8B/16B/32B: IPC=3&lt;/li&gt;&lt;li&gt;Stride=64B: IPC=2&lt;/li&gt;&lt;li&gt;Stride=128B/256B/512B: IPC=1&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Stride=64B 时出现性能下降，说明此时出现了 Bank Conflict，进一步到 Stride=128B 时，只能达到 1 的 IPC，说明此时所有的 Load 都命中了同一个 Bank，并且是串行读取。根据这个现象，认为 Neoverse V2 的 L1 DCache 组织方式和限制是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;一共有两个 Bank，Bank Index 是 VA[6]&lt;/li&gt;&lt;li&gt;每个 Bank 每周期可以从一个缓存行读取数据&lt;/li&gt;&lt;li&gt;支持多个 Load 访问同一个缓存行&lt;/li&gt;&lt;li&gt;如果多个 Load 访问同一个 Bank 的不同缓存行，只能一个周期完成一个 Load&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这里讨论的是缓存行级别的 Bank，实际上通常缓存行内部也会进行 Bank 划分，但主要是为了功耗，比如从一个 64B 缓存行里读取 8B 数据，不需要把整个 64B 都读出来。&lt;/p&gt;&lt;h3 id=&#34;l1-dtlb&#34;&gt;L1 DTLB&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dtlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：Caches entries at the 4KB, 16KB, 64KB, 2MB or 512MB granularity, Fully associative, &lt;strong&gt;48&lt;/strong&gt; entries. A miss in the L1 data TLB and a hit in the L2 TLB has a 6-cycle penalty compared to a hit in the L1 data TLB.&lt;/p&gt;&lt;p&gt;用 pointer chasing 的方法测试 L1 DTLB 容量，指针分布在不同的 page 上，使得 DTLB 成为瓶颈：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../arm_neoverse_v2_l1dtlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 48 Page 出现了明显的拐点，对应的就是 48 的 L1 DTLB 容量。超出容量后，需要额外的 5 cycle 的 latency 访问 L2 Unified TLB。&lt;/p&gt;&lt;h3 id=&#34;l2-unified-tlb&#34;&gt;L2 Unified TLB&lt;a class=&#34;headerlink&#34; href=&#34;#l2-unified-tlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：Shared by instructions and data, 8-way set associative, 2048 entries&lt;/p&gt;&lt;h3 id=&#34;l2-cache&#34;&gt;L2 Cache&lt;a class=&#34;headerlink&#34; href=&#34;#l2-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：1MB or 2MB, 8-way set associative, 4 banks, PIPT, ECC protected, 64B cacheline, 10 cycle load-to-use, 128 B/cycle&lt;/p&gt;&lt;h3 id=&#34;sve&#34;&gt;SVE&lt;a class=&#34;headerlink&#34; href=&#34;#sve&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：128b SVE vector length&lt;/p&gt;&lt;p&gt;在 Linux 下查看 &lt;code&gt;/proc/sys/abi/sve_default_vector_length&lt;/code&gt; 的内容，得到 SVE 宽度为 16 字节，也就是 128b。&lt;/p&gt;&lt;p&gt;实测发现 Neoverse V2 每周期最多可以执行 4 条 ASIMD 或 SVE 的浮点 FMA 指令，也就是说，每周期浮点峰值性能：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;单精度：&lt;code&gt;128/32*2*4=32&lt;/code&gt; FLOP per cycle&lt;/li&gt;&lt;li&gt;双精度：&lt;code&gt;128/64*2*4=16&lt;/code&gt; FLOP per cycle&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;与 Zen 2-4、Oryon、Firestorm、LA464、Haswell 等微架构看齐，但不及 Zen 5、Skylake 等通过 AVX512 提供的峰值浮点性能。&lt;/p&gt;</description><link>https://jia.je/hardware/2024/11/07/arm_neoverse_v2/</link> <pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/11/07/arm_neoverse_v2/</guid> </item> <item> <title>Linux 大小核的调度算法探究</title> <category>cpu</category> <category>intel</category> <category>linux</category> <category>qualcomm</category> <category>scheduler</category> <category>software</category> <description>&lt;h1 id=&#34;linux-大小核的调度算法探究&#34;&gt;Linux 大小核的调度算法探究&lt;a class=&#34;headerlink&#34; href=&#34;#linux-大小核的调度算法探究&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;最近看到一些关于 Linux 大小核调度算法的一些博客，考虑到大小核目前已经比较常见了，因此做一些现状的探究。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;现象&#34;&gt;现象&lt;a class=&#34;headerlink&#34; href=&#34;#现象&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;intel&#34;&gt;Intel&lt;a class=&#34;headerlink&#34; href=&#34;#intel&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;首先可以做一下实验，用 &lt;code&gt;stress --cpu N&lt;/code&gt; 启动 N 个计算负载，看看这些线程都会被分配到哪些核上。在 Intel Core i9-14900K 上实验，这个 CPU 是 8P+16E，8P 对应 0-15 核，超线程的核的 ID 是连号的，16E 对应 16-31 核，观察到下面的结果：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;N=1&lt;/code&gt; 时，主要调度到 12-15 核里其中一个，这对应的是 8P 中的最后 2P&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=2&lt;/code&gt; 时，主要调度到 12-13 核里其中一个，以及 14-15 核里其中一个，同样也是 8P 中的最后 2P，每个 P 上分配一个任务&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=3&lt;/code&gt; 时，在 &lt;code&gt;N=2&lt;/code&gt; 的基础上，在 0-11 核里再调度一个&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=4..=8&lt;/code&gt; 时，在 &lt;code&gt;N=2&lt;/code&gt; 的基础上，在 0-11 核里调度剩下的任务，但不会分配到一个 P 核的两个逻辑核上&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=9..=24&lt;/code&gt; 时，在 &lt;code&gt;N=8&lt;/code&gt; 的基础上，在 16-31 核里调度剩下的任务&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=25..=32&lt;/code&gt; 时，在 &lt;code&gt;N=24&lt;/code&gt; 的基础上，把任务分配到 P 核的第二个逻辑核上&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可见在调度时，按照如下的优先级：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;最后 2 个 P 核&lt;/li&gt;&lt;li&gt;其余 6 个 P 核&lt;/li&gt;&lt;li&gt;E 核&lt;/li&gt;&lt;li&gt;P 核的超线程&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;可见 P 核内部也有优先级不同，最后 2 个 P 核具有更高的优先级，而它们的 Boost 频率确实也更高：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cat&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/sys/devices/system/cpu/cpufreq/policy0/scaling_max_freq&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;5700000&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cat&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/sys/devices/system/cpu/cpufreq/policy12/scaling_max_freq&lt;/span&gt;&lt;span id=&#34;__span-0-4&#34;&gt;&lt;a id=&#34;__codelineno-0-4&#34; name=&#34;__codelineno-0-4&#34; href=&#34;#__codelineno-0-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;6000000&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;6 个 P 核的最大频率设定为 5.7 GHz，2 个 P 核的最大频率设定为 6.0 GHz。因此这两个 6.0 GHz 的 P 核会被优先调度。此时再来看 &lt;a href=&#34;https://www.intel.com/content/www/us/en/products/sku/236773/intel-core-i9-processor-14900k-36m-cache-up-to-6-00-ghz/specifications.html&#34;&gt;Intel® Core™ i9 processor 14900K Spec&lt;/a&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Max Turbo Frequency: 6 GHz&lt;/li&gt;&lt;li&gt;Intel® Thermal Velocity Boost Frequency: 6 GHz&lt;/li&gt;&lt;li&gt;Intel® Turbo Boost Max Technology 3.0 Frequency: 5.8 GHz&lt;/li&gt;&lt;li&gt;Performance-core Max Turbo Frequency: 5.6 GHz&lt;/li&gt;&lt;li&gt;Performance-core Base Frequency: 3.2 GHz&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可以看到，官方宣传的最高 Turbo 频率是 6 GHz，但实际上只有两个 P 核可以达到。&lt;/p&gt;&lt;p&gt;但并非所有平台在默认情况下都能达到宣称的最高频率的。例如在 Dell R730 上，Xeon E5-2680 v4 默认情况下只能达到 2.9 GHz 的 Boost 频率，但按照 Intel 官网，这个 CPU 的 Boost 最高可以达到 3.3 GHz。当然了，2.9 GHz 是全核能够达到的 Boost，3.3 GHz 只能少数的核达到，而服务器场景下，大多时间是跑多核负载，限制到 2.9 GHz 也可以理解。如果想要 3.3 GHz，就需要进 BIOS 设置，把调频交给 OS，C-State 也全部放开，这样就可以实现 3.3 GHz 了。这里比较重要的是要打开 C6，因为把空闲的核放到 C6 以后，才能把单核跑到最高的频率。&lt;/p&gt;&lt;h3 id=&#34;amd&#34;&gt;AMD&lt;a class=&#34;headerlink&#34; href=&#34;#amd&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在 AMD Ryzen 9 9950X 上进行类似的实验，这个 CPU 有 16 个核，0 核和 16 核对应一个物理核，其他依此类推，0-7 是一个 CCD，8-15 是另一个 CCD，得到的结果如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;N=1&lt;/code&gt; 时，主要调度到 4，9 和 20 核里其中一个&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=2&lt;/code&gt; 时，主要调度到 0 和 16 核里其中一个，9 和 25 核里其中一个&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=3&lt;/code&gt; 时，在 &lt;code&gt;N=2&lt;/code&gt; 的基础上，调度到 4 和 20 核里其中一个&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=4&lt;/code&gt; 时，在 &lt;code&gt;N=3&lt;/code&gt; 的基础上，调度到 11 和 27 核里其中一个&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=5&lt;/code&gt; 时，在 &lt;code&gt;N=4&lt;/code&gt; 的基础上，调度到 5 和 21 核里其中一个&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=6&lt;/code&gt; 时，在 &lt;code&gt;N=5&lt;/code&gt; 的基础上，调度到 8 和 24 核里其中一个&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=7&lt;/code&gt; 时，在 &lt;code&gt;N=6&lt;/code&gt; 的基础上，调度到 3 和 19 核里其中一个&lt;/li&gt;&lt;li&gt;&lt;code&gt;N=8&lt;/code&gt; 时，在 &lt;code&gt;N=7&lt;/code&gt; 的基础上，调度到 10 和 26 核里其中一个&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;查看它们的 &lt;code&gt;scaling_max_freq&lt;/code&gt;，会发现都是相同的 5.752 GHz。查看它们的 &lt;code&gt;amd_pstate_prefcore_ranking&lt;/code&gt;，发现取值和逻辑核的映射关系：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;236: 0,4,16,20&lt;/li&gt;&lt;li&gt;231: 5,21&lt;/li&gt;&lt;li&gt;226: 3,19&lt;/li&gt;&lt;li&gt;221: 1,17&lt;/li&gt;&lt;li&gt;216: 2,18&lt;/li&gt;&lt;li&gt;211: 7,23&lt;/li&gt;&lt;li&gt;206: 6,22&lt;/li&gt;&lt;li&gt;201: 9,25&lt;/li&gt;&lt;li&gt;196: 11,27&lt;/li&gt;&lt;li&gt;191: 8,24&lt;/li&gt;&lt;li&gt;186: 10,26&lt;/li&gt;&lt;li&gt;181: 12,28&lt;/li&gt;&lt;li&gt;176: 13,29&lt;/li&gt;&lt;li&gt;171: 15,31&lt;/li&gt;&lt;li&gt;166: 14,30&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;按理说值越大的，越应该先被调度，应该按 0-&amp;gt;4-&amp;gt;5-&amp;gt;3 的顺序分配，但实际上观察的结果并不是这样。寻找规律，发现它先从第一个 CCD 找到分数最高的，再从第二个 CCD 找，再回到第一个 CCD 找分数第二高的，依此类推：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;找第一个 CCD 分数最高的核：0&lt;/li&gt;&lt;li&gt;找第二个 CCD 分数最高的核：9&lt;/li&gt;&lt;li&gt;找第一个 CCD 分数第二高的核：4&lt;/li&gt;&lt;li&gt;找第二个 CCD 分数第二高的核：11&lt;/li&gt;&lt;li&gt;找第一个 CCD 分数第三高的核：5&lt;/li&gt;&lt;li&gt;找第二个 CCD 分数第三高的核：8&lt;/li&gt;&lt;li&gt;找第一个 CCD 分数第四高的核：3&lt;/li&gt;&lt;li&gt;找第二个 CCD 分数第四高的核：10&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;说明它的逻辑是，轮流从两个 CCD 中取出一个分数尽量高的核去分配负载。实际测下来，分数高的核也确实能够 Boost 到更高的频率：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;seq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-n&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;:&amp;quot;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;numactl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-C&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;perf&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;stat&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-e&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles,task-clock&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;stress&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--cpu&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--timeout&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1s&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;grep&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GHz&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sleep&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,700,258,748&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.717 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,642,814,521&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.659 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,648,004,395&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.665 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-5&#34;&gt;&lt;a id=&#34;__codelineno-1-5&#34; name=&#34;__codelineno-1-5&#34; href=&#34;#__codelineno-1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,663,175,321&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.680 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-6&#34;&gt;&lt;a id=&#34;__codelineno-1-6&#34; name=&#34;__codelineno-1-6&#34; href=&#34;#__codelineno-1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,687,251,660&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.704 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-7&#34;&gt;&lt;a id=&#34;__codelineno-1-7&#34; name=&#34;__codelineno-1-7&#34; href=&#34;#__codelineno-1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,667,947,179&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.685 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-8&#34;&gt;&lt;a id=&#34;__codelineno-1-8&#34; name=&#34;__codelineno-1-8&#34; href=&#34;#__codelineno-1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,595,919,881&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.613 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-9&#34;&gt;&lt;a id=&#34;__codelineno-1-9&#34; name=&#34;__codelineno-1-9&#34; href=&#34;#__codelineno-1-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,599,885,078&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.617 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-10&#34;&gt;&lt;a id=&#34;__codelineno-1-10&#34; name=&#34;__codelineno-1-10&#34; href=&#34;#__codelineno-1-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,424,861,894&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.441 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-11&#34;&gt;&lt;a id=&#34;__codelineno-1-11&#34; name=&#34;__codelineno-1-11&#34; href=&#34;#__codelineno-1-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;9&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,427,318,403&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.443 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-12&#34;&gt;&lt;a id=&#34;__codelineno-1-12&#34; name=&#34;__codelineno-1-12&#34; href=&#34;#__codelineno-1-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,422,689,654&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.439 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-13&#34;&gt;&lt;a id=&#34;__codelineno-1-13&#34; name=&#34;__codelineno-1-13&#34; href=&#34;#__codelineno-1-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,425,760,950&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.442 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-14&#34;&gt;&lt;a id=&#34;__codelineno-1-14&#34; name=&#34;__codelineno-1-14&#34; href=&#34;#__codelineno-1-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,418,583,254&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.435 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-15&#34;&gt;&lt;a id=&#34;__codelineno-1-15&#34; name=&#34;__codelineno-1-15&#34; href=&#34;#__codelineno-1-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,425,842,189&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.442 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-16&#34;&gt;&lt;a id=&#34;__codelineno-1-16&#34; name=&#34;__codelineno-1-16&#34; href=&#34;#__codelineno-1-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,375,985,781&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.392 GHz&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-1-17&#34;&gt;&lt;a id=&#34;__codelineno-1-17&#34; name=&#34;__codelineno-1-17&#34; href=&#34;#__codelineno-1-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;:&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;,377,887,646&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cycles:u&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 5.394 GHz&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;分数高的可以冲到 5.7 GHz，分数低一些的就只能到 5.4 GHz 了。&lt;/p&gt;&lt;p&gt;注：根据 David Huang 提供的信息，AMD 的 Linux 内核维护者已经提交 &lt;a href=&#34;https://lore.kernel.org/lkml/20241203201129.31957-1-mario.limonciello@amd.com/&#34;&gt;Patch&lt;/a&gt; 来修改这个行为，使得进程尽量调度到分数更高的核，无论它在哪个 CCD。这样一来，即使不绑核，也可以保证单核负载会稳定跑在频率最高的核上。&lt;/p&gt;&lt;h3 id=&#34;qualcomm&#34;&gt;Qualcomm&lt;a class=&#34;headerlink&#34; href=&#34;#qualcomm&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;最后再看一下 Qualcomm X1E80100 平台，这个平台有三个 Cluster：0-3，4-7 和 8-11 是三个 Cluster。其中后两个 Cluster 的每个 Cluster 可以支持其中一个核心从 3.4 GHz Boost 到 4.0 GHz，加起来就是最多两个核心 Boost 到 4.0 GHz。打上 &lt;a href=&#34;https://patchew.org/linux/20240612124056.39230-1-quic._5Fsibis@quicinc.com/&#34;&gt;cpufreq&lt;/a&gt; 的补丁后，内核通过 scmi 接口得到了这些信息：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;$&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cat&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/sys/devices/system/cpu/cpufreq/policy*/scaling_max_freq&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;3417600&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;4012800&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;m&#34;&gt;4012800&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但实际调度起来，各个核心乱跑，而 3.4 GHz 距离 4.0 GHz 差距不小，性能差接近 15%，可见目前 Linux 内核并没有很好地适配，目前还是需要手动绑核。高通目前还提交了 &lt;a href=&#34;https://patchwork.kernel.org/project/linux-arm-msm/list/?series=867688&amp;amp;state=*&#34;&gt;memlat govenor&lt;/a&gt; 补丁来对 LLC/DDR 来进行 DVFS，但对这个问题应该没有改进。&lt;/p&gt;&lt;h2 id=&#34;分析&#34;&gt;分析&lt;a class=&#34;headerlink&#34; href=&#34;#分析&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;接下来就要进入到 Linux 源码，找到 Linux 是如何处理这些调度优先级的，这些优先级是谁确定的，又是怎么传递到 Linux 内核，又是怎么参与到调度的呢？&lt;/p&gt;&lt;h3 id=&#34;intel-itmt&#34;&gt;Intel ITMT&lt;a class=&#34;headerlink&#34; href=&#34;#intel-itmt&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;首先来看一下 Intel 的补丁：&lt;a href=&#34;https://lore.kernel.org/lkml/cover.1479844244.git.tim.c.chen@linux.intel.com/&#34;&gt;Support Intel Turbo Boost Max Technology 3.0&lt;/a&gt;，这个 patch 做了这些事情：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://lore.kernel.org/lkml/0998b98943bcdec7d1ddd4ff27358da555ea8e92.1479844244.git.tim.c.chen@linux.intel.com/&#34;&gt;PATCH v8 8/8&lt;/a&gt;: 读取 ACPI 的 CPPC 信息，得到每个核心的 highest_perf，根据 highest_perf，设置逻辑核的调度优先级：&lt;code&gt;sched_set_itmt_core_prio(cppc_perf.highest_perf, cpu);&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://lore.kernel.org/lkml/0e73ae12737dfaafa46c07066cc7c5d3f1675e46.1479844244.git.tim.c.chen@linux.intel.com/&#34;&gt;PATCH v8 1/8&lt;/a&gt;: 修改调度器，让它尊重 arch_asym_cpu_priority 函数计算出来的优先级，而不是按照核心编号从小到大&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://lore.kernel.org/lkml/cd401ccdff88f88c8349314febdc25d51f7c48f7.1479844244.git.tim.c.chen@linux.intel.com/&#34;&gt;PATCH v8 3/8&lt;/a&gt;: 实现 arch_asym_cpu_priority，如果一个物理核对应 n 个逻辑核，那么第一个逻辑核的优先级乘以 n/1，第二个逻辑核的优先级乘以 n/2，依次类推。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;简而言之，从 ACPI 中获取 CPPC 信息，把 CPPC 的 Highest Perf 设置为对应物理核的优先级，再根据物理核的优先级计算每个逻辑核的优先级，如果是 2-SMT，那就是第一个逻辑核的优先级翻倍，第二个逻辑核的优先级不变。但这个方法有局限性，就是要求 E 核的优先级介于 P 核的两个优先级之间，设置起来比较别扭。后来针对 SMT 的处理被集成到了调度器当中，因此从 itmt 的视角来看，不需要针对 SMT 进行特殊处理，SMT 的核设置为同一个优先级即可：&lt;a href=&#34;https://github.com/torvalds/linux/commit/046a5a95c3b0425cfe79e43021d8ee90c1c4f8c9&#34;&gt;x86/sched/itmt: Give all SMT siblings of a core the same priority&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;在 Intel i9-14900K 平台上，无论大小核，Highest Perf 都等于 255，此时无法通过 Highest Perf 来区分核心的体质，此时会触发下面的&lt;a href=&#34;https://github.com/torvalds/linux/blob/c2ee9f594da826bea183ed14f2cc029c719bf4da/drivers/cpufreq/intel_pstate.c#L363-L371&#34;&gt;代码&lt;/a&gt;：&lt;/p&gt;&lt;div class=&#34;language-cpp highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-2&#34;&gt;&lt;a id=&#34;__codelineno-3-2&#34; name=&#34;__codelineno-3-2&#34; href=&#34;#__codelineno-3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; * If CPPC is not available, fall back to MSR_HWP_CAPABILITIES bits [8:0].&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-3&#34;&gt;&lt;a id=&#34;__codelineno-3-3&#34; name=&#34;__codelineno-3-3&#34; href=&#34;#__codelineno-3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-4&#34;&gt;&lt;a id=&#34;__codelineno-3-4&#34; name=&#34;__codelineno-3-4&#34; href=&#34;#__codelineno-3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; * Also, on some systems with overclocking enabled, CPPC.highest_perf is&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-5&#34;&gt;&lt;a id=&#34;__codelineno-3-5&#34; name=&#34;__codelineno-3-5&#34; href=&#34;#__codelineno-3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; * hardcoded to 0xff, so CPPC.highest_perf cannot be used to enable ITMT.&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-6&#34;&gt;&lt;a id=&#34;__codelineno-3-6&#34; name=&#34;__codelineno-3-6&#34; href=&#34;#__codelineno-3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; * Fall back to MSR_HWP_CAPABILITIES then too.&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-7&#34;&gt;&lt;a id=&#34;__codelineno-3-7&#34; name=&#34;__codelineno-3-7&#34; href=&#34;#__codelineno-3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-8&#34;&gt;&lt;a id=&#34;__codelineno-3-8&#34; name=&#34;__codelineno-3-8&#34; href=&#34;#__codelineno-3-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cppc_perf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;highest_perf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CPPC_MAX_PERF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-9&#34;&gt;&lt;a id=&#34;__codelineno-3-9&#34; name=&#34;__codelineno-3-9&#34; href=&#34;#__codelineno-3-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cppc_perf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;highest_perf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HWP_HIGHEST_PERF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;READ_ONCE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all_cpu_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hwp_cap_cached&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看各个核心上 MSR_HWP_CAPABILITIES MSR 记录的 Highest Perf 值：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;seq&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sudo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;turbostat&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-n&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--interval&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;grep&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;MSR_HWP_CAPABILITIES&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现后两个 P 核的 highest perf 是 77，其他 P 核的 highest perf 是 73，E 核的 highest perf 是 44。因此 Linux 的调度策略就出来了：先是后两个 P 核，再是其他 P 核，然后是 E 核，最后是 SMT 出来的逻辑核。&lt;/p&gt;&lt;h3 id=&#34;acpi-cppc&#34;&gt;ACPI CPPC&lt;a class=&#34;headerlink&#34; href=&#34;#acpi-cppc&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;接下来，查看 ACPI 的 CPPC 信息保存了什么。&lt;a href=&#34;https://uefi.org/specs/ACPI/6.5/08_Processor_Configuration_and_Control.html?highlight=cppc#collaborative-processor-performance-control&#34;&gt;CPPC&lt;/a&gt; 全称是 Collaborative Processor Performance Control，是对已有的 P State 的改进，原来的 P State 是分立的几个配置，可选项比较少，CPPC 对性能做了抽象，每个核心可以有 Highest Performance，Nominal Performance，Lowest Nonlinear Performance 和 Lowest Performance 这几个值，性能可以在这些值之间浮动。简单来说，Highest 对应单核 Boost 到的最高性能，Nominal 对应全核能达到的性能，Lowest 对应最低频下的性能，Lowest Nonlinear 代表性能功耗比线性的界限，往下性能核功耗是线性的，往上性能功耗比会下降。OS 可以设定想要的性能范围：Minimum 和 Maximum Perf，也可以指定一个想要的性能 Desired Performance。当然了，硬件也不一定能够达到 Highest Perf，当前能保证达到的最高性能叫做 Guaranteed Perf。此外还有 Energy Performance Preference (EPP)，OS 告诉硬件，我想要能效还是性能，最小的 0 表示性能，最大的 255 表示能效。&lt;/p&gt;&lt;p&gt;简单来说，硬件告诉 OS 五个值：Highest Perf，Nominal Perf，Lowest Nonlinear Perf，Lowest Perf 和 Guaranteed Perf，OS 通过三个值告诉硬件，我想要什么样的性能：Min Perf，Max Perf，Desired Perf，以及性能和功耗哪个更看重：EPP。&lt;/p&gt;&lt;h3 id=&#34;amd-cppc&#34;&gt;AMD CPPC&lt;a class=&#34;headerlink&#34; href=&#34;#amd-cppc&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在 AMD 平台上，CPPC 的这些性能值既可以通过 ACPI 获取，又可以通过 MSR 来读写（来源：&lt;a href=&#34;https://www.amd.com/content/dam/amd/en/documents/processor-tech-docs/software-optimization-guides/57254-PUB_3.00.zip&#34;&gt;Processor Programming Reference (PPR) for AMD Family 1Ah Model 24h, Revision B0 Processors&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../linux-core-scheduling-cppc-1.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../linux-core-scheduling-cppc-2.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;在更早的 AMD 处理器中，没有这些 MSR，而是通过 MMIO 来控制，这些信息记录在 ACPI CPPC 当中。&lt;/p&gt;&lt;p&gt;通过比对 &lt;code&gt;/sys/devices/system/cpu/cpu*/acpi_cppc/highest_perf&lt;/code&gt; 和 &lt;code&gt;/sys/devices/system/cpu/cpu*/cpufreq/amd_pstate_prefcore_ranking&lt;/code&gt;，我们会发现它们是一样的，说明 amd-pstate 驱动做的事情和 itmt 类似，根据 ACPI 的 Highest Perf 信息（或者从 MSR 0xC001_02B0 读出 Highest Perf），设置 Preferred Core Ranking 以及调度器的优先级。阅读代码，可以看到它确实是这么做的：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;初始化中，设置优先级为 &lt;code&gt;highest_perf&lt;/code&gt;：&lt;a href=&#34;https://github.com/torvalds/linux/blob/c2ee9f594da826bea183ed14f2cc029c719bf4da/drivers/cpufreq/amd-pstate.c#L796&#34;&gt;&lt;code&gt;sched_set_itmt_core_prio((int)READ_ONCE(cpudata-&amp;gt;highest_perf), cpudata-&amp;gt;cpu);&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;设置 &lt;code&gt;prefcore_ranking&lt;/code&gt; 为 &lt;code&gt;highest_perf&lt;/code&gt;: &lt;a href=&#34;https://github.com/torvalds/linux/blob/c2ee9f594da826bea183ed14f2cc029c719bf4da/drivers/cpufreq/amd-pstate.c#L402&#34;&gt;&lt;code&gt;WRITE_ONCE(cpudata-&amp;gt;prefcore_ranking, cppc_perf.highest_perf)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;运行过程中，如果发现 &lt;code&gt;highest_perf&lt;/code&gt; 出现变化，也更新到调度器的优先级当中：&lt;a href=&#34;https://github.com/torvalds/linux/blob/master/drivers/cpufreq/amd-pstate.c#L822&#34;&gt;&lt;code&gt;sched_set_itmt_core_prio((int)cur_high, cpu);&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;剩下的就和 Intel 一样了。至于为什么调度器轮流从两个 CCD 取优先级最高的核心调度，应该是调度器考虑了这些核心的拓扑，进行了负载均衡，尽量保证每个 CCD 上的负载相当。这样的设计在 9950X 这种对称的架构上没啥问题，但如果是 Strix Point 这种混合 Zen5 和 Zen5c 的情况，如果还像这样，就会在 Zen5 和 Zen5c 之间来回调度，这样就不太合适了：应该先调度 Zen5，再调度 Zen5c。完整的讨论见 &lt;a href=&#34;https://blog.hjc.im/thoughts-on-linux-preferred-cores-and-multi-ccx.html&#34;&gt;谈谈 Linux 与 ITMT 调度器与多簇处理器&lt;/a&gt;。最近 Linux 也上游化了相关的 Patch，使得 P 核优先被调度：&lt;a href=&#34;https://www.phoronix.com/news/AMD-Hetero-Topo-Linux-6.13&#34;&gt;AMD Heterogeneous CPU Design Topology Patches Coming For Linux 6.13&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;而我们知道 Linux 的 cpufreq 设置了不同的 governor，例如 performance 和 powersave。那么它们是怎么映射到 Min/Max/Desired Perf 的呢？通过阅读代码，可以发现：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;powersave 对应的配置是：Min Perf 设置为 Lowest/Lowest Nonlinear Perf，Max Perf 设置为 Highest/Nominal Perf&lt;/li&gt;&lt;li&gt;performance 对应的配置是：Min Perf 和 Max Perf 都设置为 Highest/Nominal Perf&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果启用 boost（&lt;code&gt;echo 1 &amp;gt; /sys/devices/system/cpu/cpufreq/policy0/boost&lt;/code&gt;），那就把 Max Perf 设置到 Highest Perf；如果不启用 Boost，就设置到 Nominal Perf。&lt;/p&gt;&lt;p&gt;下面给出几个例子，其中 Highest Perf 为 166，Nominal Perf 为 124，Lowest Perf 为 18：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;performance + boost=1: Min = 166, Max = 166&lt;/li&gt;&lt;li&gt;performance + boost=0: Min = 124, Max = 124&lt;/li&gt;&lt;li&gt;powersave + boost=1: Min = 18, Max = 166&lt;/li&gt;&lt;li&gt;powersave + boost=0: Min = 18, Max = 124&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;而其他由 Linux 实现变频的 governor：schedutil 和 ondemand，会通过 Desired Perf 来实现。&lt;/p&gt;&lt;p&gt;amd-pstate 支持三个&lt;a href=&#34;https://www.phoronix.com/news/AMD-P-State-Guided-Auto&#34;&gt;运行模式&lt;/a&gt;：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;active(默认): 软件就设置一下要性能还是能耗（通过 performance/powersave governor 和 EPP &lt;code&gt;/sys/devices/system/cpu/cpufreq/policy0/energy_performance_preference&lt;/code&gt;），其他的都交给硬件自动调整&lt;/li&gt;&lt;li&gt;guided：软件设置一个最低和最高的性能，其他都交给硬件&lt;/li&gt;&lt;li&gt;passive：软件来负责调频，结果通过 Desired Perf 告诉硬件&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这里说的 active 和 passive 是从硬件的角度出发的，而不是 OS。&lt;/p&gt;&lt;p&gt;注：虽然这里说是硬件调整，实际上大概率是由在一个片上的小 CPU 运行的固件（PMFW，Power Management Firmware）负责调整。&lt;/p&gt;&lt;h3 id=&#34;qualcomm_1&#34;&gt;Qualcomm&lt;a class=&#34;headerlink&#34; href=&#34;#qualcomm_1&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;arm64 架构没有实现 arch_asym_cpu_priority 函数，因此用的不是上述 Intel/AMD 的机制，而是在 Device Tree 中用 &lt;a href=&#34;https://www.kernel.org/doc/Documentation/devicetree/bindings/arm/cpu-capacity.txt&#34;&gt;capacity-dmips-mhz&lt;/a&gt; 标记每个核心的性能，但是 X Elite 的 DTS 没有记录这个信息，因此 Linux 内核也就无法合理地调度了。因此一个可能的解决办法是，给后两个 Cluster 的一个核设置更高的 capacity-dmips-mhz，其他的核心都设置成一样。但其实通常来说，对于同一个核来说，提高频率以后，DMIPS/MHz 反而是下降的，内核用 DMIPS/MHz 这个指标，主要是用来区分大小核，而不是用来判断有没有 Boost。&lt;/p&gt;&lt;p&gt;实际尝试了一下，给 4 和 8 这两个核标记更高的 capacity-dmips-mhz，现在跑单核或双核负载可以自动跑到 4.0 GHz 上了。表现在 Geekbench 6 上，就是单核性能 2452 分到 2892 分的区别。修改的内容已经提交：&lt;a href=&#34;https://lore.kernel.org/lkml/20241025031257.6284-2-c@jia.je/&#34;&gt;[PATCH] arm64: dts: qcom: x1e80100: Add performance hint for boost clock&lt;/a&gt;，不过合并的概率不大，毕竟不是什么优雅的解决办法。&lt;/p&gt;&lt;h2 id=&#34;小结&#34;&gt;小结&lt;a class=&#34;headerlink&#34; href=&#34;#小结&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;针对不同核心的不同性能以及 SMT，Linux 的调度器需要知道各个逻辑核心的调度优先级。在 Intel/AMD 平台上，这个信息目前主要是通过 CPPC 的 Highest Perf 来获取，也可能 Fallback 到 MSR_HWP_CAPABILITIES 上。在 ARM64 平台上，则需要 DTS 标记各核心的性能。&lt;/p&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;a class=&#34;headerlink&#34; href=&#34;#参考&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://blog.hjc.im/thoughts-on-linux-preferred-cores-and-multi-ccx.html&#34;&gt;谈谈 Linux 与 ITMT 调度器与多簇处理器&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://zhiwei-lii.github.io/intel-cpu%E4%B8%8A%E9%9D%A2%E7%9A%84linux%E5%A4%A7%E5%B0%8F%E6%A0%B8%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98/&#34;&gt;Intel CPU 上面的 Linux 大小核调度问题&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/software/2024/10/23/linux-core-scheduling/</link> <pubDate>Wed, 23 Oct 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/software/2024/10/23/linux-core-scheduling/</guid> </item> <item> <title>IBM z15 Mainframe CPU 分支预测器学习笔记</title> <category>bp</category> <category>cpu</category> <category>hardware</category> <category>ibm</category> <category>microarchitecture</category> <description>&lt;h1 id=&#34;ibm-z15-mainframe-cpu-分支预测器学习笔记&#34;&gt;IBM z15 Mainframe CPU 分支预测器学习笔记&lt;a class=&#34;headerlink&#34; href=&#34;#ibm-z15-mainframe-cpu-分支预测器学习笔记&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ISCA 2020 的一篇文章 &lt;a href=&#34;https://ieeexplore.ieee.org/document/9138999&#34;&gt;The IBM z15 High Frequency Mainframe Branch Predictor Industrial Product&lt;/a&gt; 非常详细地解析了 IBM z15 Mainframe CPU 的分支预测器设计。本文是对这篇论文的学习和整理的笔记。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;设计思路&#34;&gt;设计思路&lt;a class=&#34;headerlink&#34; href=&#34;#设计思路&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;论文的第二节 Branch Prediction Design Considerations 提到了它设计分支预测器时需要考虑的事情。z15 处理器面向的是具有很大指令 footprint 的程序，为此准备了 128KB 的 L1 ICache，以及 4MB 的 L2 Private ICache。为了支撑 MB 级别的指令，BTB 也要相应增大。&lt;/p&gt;&lt;p&gt;IBM z 系列用的是变长指令集，指令长度可能是 2 或 4 或 6 字节，平均长度是 5 字节。考虑到每 5 条指令有一条分支指令，那就是每 25 个字节有一条分支指令，那么 4MB 的 L2 ICache 平均下来可能有 164K 条分支。因此，z15 设计了可以保存 128K 条分支的 L2 BTB。z15 的流水线很长，分支预测错误会带来 26 个周期的开销，因此分支预测的正确率就很重要。z15 处理器设计了两级的 BTB，L1 BTB（论文中称 BTB1）容量是 16K=2K x 8 way，L2 BTB（论文中称 BTB2）容量是 128K=32K x 4-way。为了加速 L1 BTB 的预测，z15 有 Column Predictor（CPRED，1K x 8）。为了预测分支的方向，z15 还引入了 PHT（short 和 long 两个 PHT，都是 512 x 8），Perceptron（16 x 2）。为了预测间接分支和返回指令的目的地址，z15 设计了 Changing Target Buffer（CTB，2K x 1）和 Call/Return Stack（CRS）。&lt;/p&gt;&lt;h2 id=&#34;具体实现&#34;&gt;具体实现&lt;a class=&#34;headerlink&#34; href=&#34;#具体实现&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;z15 采用的是分离式前端，分支预测器有 6 级的流水线，每一级分别记为 b0-b5。各级的功能如下：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Indexing into the BTB arrays occurs inthe b0 cycle, which when superimposed over the z15 corepipeline in figure 1 coincides with the very stage after arestart, but deviates away from the core pipeline after that.An array access cycle is in b1. Metadata from the arrays isobtained in b2, and hit detection and direction applicationon a per branch basis performed across the b2 and b3cycles. Ordering of the branches based on their low-orderinstruction address bits is also done in b3. In b4, the finalprediction is prepared, including selection of theappropriate target address provider. The prediction ispresented to the consumers, namely the IDU and ICM, inthe b5 cycle.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果等到 b5 才出预测结果就比较慢了，因此它还可以在 b2 周期出结果，利用的是 CPRED 预测器。在 CPRED 工作的情况下，每两个周期可以预测一个 taken branch，如果 CPRED 没有预测，那就需要每 5 个周期预测一个 taken branch，而在 SMT2 模式下，两个线程轮流访问 BTB，此时每个线程需要每 6 个周期预测一个 taken branch。&lt;/p&gt;&lt;p&gt;z15 的 L1 BTB 的 8-way 意味着在一个周期可以进行 8 条分支的预测，从 64B 的指令中，识别最多 8 条指令，从中找到第一条跳转的分支。为了优化性能和功耗，在面对连续的无分支指令的代码时，可以快速跳过，这里用的是 SKOOT（Skip Over OffseT）预测器，在 BTB 的分支记录了到下一次分支的距离，如果这个距离很长，那就可以快速跳过若干个 64B 指令块。&lt;/p&gt;&lt;p&gt;为了预测分支的方向，在 L1 BTB 里，也保存了 2 bit saturating counter，也就是 BTB 也充当了通常说的 BHT。除了 BHT 以外，为了预测分支方向，z15 记录了 Global Path Vector，也就是常说的 PHR，记录最近的 n 条 taken branch 的历史。z14 之前，GPV 记录了最近 9 条 taken branch 的历史，z14 和 z15，GPV 记录了最近 17 条 taken branch 的历史。GPV 中每个 taken branch 提供 2 bit 的信息。&lt;/p&gt;&lt;p&gt;GPV 和 PC 作为 TAGE 的输入，进行方向预测。z15 采用了两个 TAGE PHT，都是 512 x 8 way，一共是 8K 分支的容量，历史短的 TAGE PHT 只用最近 9 条 taken branch 的历史，历史长的 TAGE PHT 则会用完整的 17 条 taken branch 的历史。论文里比较详细地描述了 TAGE 的实现，基本和 A. Seznec 的设计是一样的，也做了 USE_ALT_ON_NA 的改进。除了 TAGE 以外，z15 还有 Perceptron 预测器，有 32 个 entry，16 x 2 way，把系数和 GPV 进行点积（GPV 的每个 bit 映射为 1 和 -1），根据结果的符号决定跳转的方向。&lt;/p&gt;&lt;p&gt;因此一共有 BHT、TAGE 和 Perceptron 可以提供方向预测。为了判断用哪个预测器来提供最终的方向，规则是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;对于条件分支，记录它是否曾经跳和不跳过（Bidirectional），如果只往一个方向跳，就查 BHT&lt;/li&gt;&lt;li&gt;如果两个方向都跳过，此时 Perceptron 优先级更高，如果 Perceptron 命中且置信度高，则用 Perceptron 的结果&lt;/li&gt;&lt;li&gt;否则考察 TAGE 的预测结果，如果 TAGE 命中且置信度高，则用 TAGE 的结果&lt;/li&gt;&lt;li&gt;如果 Perceptron 和 TAGE 都没有命中，再用 BHT 的结果&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;简单来说，优先级是 Perceptron &amp;gt; TAGE &amp;gt; BHT。&lt;/p&gt;&lt;p&gt;为了预测间接分支的目的地址，z15 上 PC 和 GPV 通过哈希映射到 CTB（Changing Target Buffer）的表项上，每个表项记录了分支的目的地址。&lt;/p&gt;&lt;p&gt;有意思的是，z15 指令集里没有单独的 call 和 return 指令，因此硬件需要识别间接分支里的 call 和 return 模式。论文里介绍了具体的识别方法，但目前主流指令集都做了区分（要么是单独的指令，要么建议编译器用特定的寄存器，标记 call 和 return），所以这个方法也没啥参考价值。&lt;/p&gt;</description><link>https://jia.je/hardware/2024/09/21/ibm-z15-branch-predictor/</link> <pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/09/21/ibm-z15-branch-predictor/</guid> </item> <item> <title>浅谈乱序执行 CPU（三：前端）</title> <category>bp</category> <category>brief-into-ooo</category> <category>cpu</category> <category>frontend</category> <category>hardware</category> <category>ooo</category> <category>prediction</category> <description>&lt;h1 id=&#34;浅谈乱序执行-cpu三前端&#34;&gt;浅谈乱序执行 CPU（三：前端）&lt;a class=&#34;headerlink&#34; href=&#34;#浅谈乱序执行-cpu三前端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本文的内容已经整合到&lt;a href=&#34;/kb/hardware/ooo_cpu.html&#34;&gt;知识库&lt;/a&gt;中。&lt;/p&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这是 &lt;a href=&#34;../../../../2021/09/14/brief-into-ooo/&#34;&gt;浅谈乱序执行 CPU&lt;/a&gt; 系列博客的第三篇。&lt;/p&gt;&lt;p&gt;本文主要讨论处理器前端的部分。&lt;/p&gt;&lt;p&gt;本系列的所有文章：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;../../../../2021/09/14/brief-into-ooo/&#34;&gt;浅谈乱序执行 CPU（一：乱序）&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;../../../../2022/03/31/brief-into-ooo-2/&#34;&gt;浅谈乱序执行 CPU（二：访存）&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;./&#34;&gt;浅谈乱序执行 CPU（三：前端）&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;处理器前端&#34;&gt;处理器前端&lt;a class=&#34;headerlink&#34; href=&#34;#处理器前端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;再来分析一下乱序执行 CPU 的前端部分。以 RISC-V 为例，指令长度有 4 字节或者 2 字节两种，其中 2 字节属于压缩指令集。如何正确并高效地进行取指令译码？&lt;/p&gt;&lt;p&gt;首先，我们希望前端能够尽可能快地取指令，前端的取指能力要和后端匹配，比如对于一个四发射的 CPU，前端对应地需要一个周期取 &lt;code&gt;4*4=16&lt;/code&gt; 字节的指令。但是，这 16 字节可能是 4 条非压缩指令，也可能是 8 条压缩指令，也可能是混合的情况。所以，这里会出现一个可能出现指令条数不匹配的情况，所以中间可以添加一个 Fetch Buffer，比如 &lt;a href=&#34;https://github.com/riscv-boom/riscv-boom&#34;&gt;BOOM&lt;/a&gt; 的实现中，L1 ICache 每周期读取 16 字节，然后进行预译码，出来 8 条指令，保存到 Fetch Buffer 中。这里需要考虑以下几点：首先从 ICache 读取的数据是对齐的，但是 PC 可能不是，比如中间的地址。其次，可能一个 4 字节的非压缩指令跨越了两次 Fetch，比如前 2 个字节在前一个 Fetch Bundle，后 2 个字节在后一个 Fetch Bundle；此外，每个 2 字节的边界都需要判断一下是压缩指令还是非压缩指令。一个非常特殊的情况就是，一个 4 字节的指令跨越了两个页，所以两个页都需要查询页表；如果恰好在第二个页处发生了页缺失，此时 epc 是指令的起始地址，但 tval 是第二个页的地址，这样内核才知道是哪个页发生了缺失。&lt;/p&gt;&lt;p&gt;其次，需要配合分支预测。如果需要保证分支预测正确的情况下，能够在循环中达到接近 100% 的性能，那么，在 Fetch 分支结尾的分支指令的同时，需要保证下一次 Fetch 已经得到了分支预测的目的地址。这个就是 BOOM 里面的 L0 BTB (1-cycle redirect)。但是，一个周期内完成的分支预测，它的面积肯定不能大，否则时序无法满足，所以 BOOM 里面还设计了 2-cycle 和 3-cycle 的比较高级的分支预测器，还有针对函数调用的 RAS（Return Address Stack）。&lt;/p&gt;&lt;p&gt;分支预测也有很多方法。比较简单的方法是实现一个 BHT，每个项是一个 2 位的饱和计数器，超过一半的时候增加，少于一半时减少。但是，如果遇到了跳转/不跳转/跳转/不跳转这种来回切换的情况，准确率就很低。一个复杂一些的设计，就是用 BHR，记录这个分支指令最近几次的历史，对于每种可能的历史，都对应一个 2 位的饱和计数器。这样，遇到刚才所说的情况就会很好地预测。但实践中会遇到问题：如果在写回之前，又进行了一次预测，因为预测是在取指的时候做的，但是更新 BPU 是在写回的时候完成的，这时候预测就是基于旧的状态进行预测，这时候 BHR 就会出现不准确的问题；而且写回 BPU 的时候，会按照原来的状态进行更新，这个状态可能也是错误的，导致丢失一次更新，识别的模式从跳转/不跳转/跳转/不跳转变成了跳转/跳转/跳转/不跳转，这样又会预测错误。一个解决办法是，在取指阶段，BPU 预测完就立即按照预测的结果更新 BHR，之后写回阶段会恢复到实际的 BHR 取值。论文 &lt;a href=&#34;https://dl.acm.org/doi/10.1145/192724.192756&#34;&gt;The effect of speculatively updating branch history on branch prediction accuracy, revisited&lt;/a&gt; 和 &lt;a href=&#34;https://jilp.org/vol2/v2paper1.pdf&#34;&gt;Speculative Updates of Local and Global Branch History: A Quantitative Analysis&lt;/a&gt; 讨论了这个实现方式对性能的影响。&lt;/p&gt;&lt;p&gt;比较容易做预测更新和恢复的是全局分支历史，可以维护两个 GHR（Global History Register），一个是目前取指令最新的，一个是提交的最新的。在预测的时候，用 GHR 去找对应的 2-bit 状态，然后把预测结果更新到 GHR 上。在预测失败的时候，把 GHR 恢复为提交的状态。如果要支持一个 Fetch Packet 中有多个分支，可以让 GHR 对应若干个 2-bit 状态，分别对应相应位置上的分支的状态，当然这样面积也会增加很多。&lt;/p&gt;&lt;p&gt;除了记录条件分支的跳与不跳以外，通常还可以维护 taken branch 的地址，记录这样的分支历史的 GHR 就叫做 PHR（Path History Register）。&lt;/p&gt;&lt;p&gt;目前比较主流的分支预测算法就是 &lt;a href=&#34;https://inria.hal.science/hal-03408381/document&#34;&gt;TAGE&lt;/a&gt; 了：维护多个表，每个表采取的历史长度不同，呈几何级数，使得需要比较短的历史就可以预测的分支可以更快的预热，需要比较长的历史才能预测的分支也可以有较好的准确度。比较有意思的是 TAGE 的表项分配和替换的算法，useful counter 和 altpred 的设计，以及 USE_ALT_ON_NA 的优化。为了预测间接分支，可以把目的地址放到 TAGE 的表项里，把预测方向变为预测目的地址，这种预测间接分支的 TAGE 就叫做 ITTAGE。部分实现还会给 TAGE 添加 Statistical Corrector 或者 Loop Predictor。这些算法基本统治了当今高性能的处理器设计。&lt;/p&gt;&lt;p&gt;我在博客 &lt;a href=&#34;../../10/samsung-exynos-cpu/&#34;&gt;三星 Exynos CPU 微架构学习笔记&lt;/a&gt; 中详细分析了 Exynos 微架构的前端设计，建议感兴趣的读者阅读。&lt;/p&gt;&lt;h2 id=&#34;short-forward-branch&#34;&gt;Short Forward Branch&lt;a class=&#34;headerlink&#34; href=&#34;#short-forward-branch&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;论文 &lt;a href=&#34;https://carrv.github.io/2020/papers/CARRV2020_paper_15_Zhao.pdf&#34;&gt;SonicBOOM: The 3rd Generation Berkeley Out-of-Order Machine&lt;/a&gt; 提到了一个有意思的优化：Short Forward Branch。它面对的场景是一些小的 if 语句，在 if 的条件满足时，执行少量的指令。正常来说，这样的代码会被编译成一个 Forward 的分支，被跳过的就是 if 条件满足时要执行的代码对应的指令。如果分支比较好预测，那现有的分支预测器就可以得到很好的性能，但如果分支不好预测，例如它会依赖数据的值，并且具有一定的随机性，这时候性能就会下降。为了解决这个问题，可以用条件执行来代替分支：把分支指令替换为比较指令，然后根据比较的结果来条件执行本来可能会被跳过的指令。下面是论文中给的例子，说的比较的清晰：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../brief-into-ooo-3-sfb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;比较有意思的是，这个优化是完全由硬件来做的，而不是编译器。当然了，如果编译器要做的前提是硬件支持这类标量的条件执行指令，虽然 Zicond 扩展确实提供了类似的功能，很多 RISC-V 实现还没有实现 Zicond。硬件上做的话，就不需要扩展指令集，直接在前端进行识别，当发现这种 Short Forward Branch 时，把分支指令本身改成一条 set-flag 指令，然后把分支到跳转目的地这一段的指令改为条件执行。这样就不需要进行分支预测了，无论原来的分支是否跳转，后续的这些指令都会进入流水线，看起来做了更多的事情，但很多时候反而比错误的分支预测还要快。&lt;/p&gt;&lt;p&gt;这个优化思路在 Intel 的专利 &lt;a href=&#34;https://patents.google.com/patent/US9367314B2/en&#34;&gt;Converting conditional short forward branches to computationally equivalent predicated instructions&lt;/a&gt; 也有阐述，不知道这个优化有没有实际加到 Intel 的处理器当中。专利的图 6 很好地用 X86 的指令阐述了这个优化：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../brief-into-ooo-3-intel.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;Intel 在 &lt;a href=&#34;https://ieeexplore.ieee.org/document/9138936&#34;&gt;ISCA 2020 的论文 Auto-Predication of Critical Branches&lt;/a&gt; 中提供了一些硬件的实现思路，讨论了怎样去检测这样的化分支指令为条件执行指令的情况，如何在硬件中实现高效的条件执行，怎么避免负优化（例如去掉分支指令以后，分支预测器眼里就丢失了分支的历史；转化为条件执行以后，本来可能没有依赖的指令也变得强制有依赖了），建议有兴趣的读者阅读。&lt;/p&gt;&lt;p&gt;那么这样的指令序列在实际的程序里出现的多吗？论文 &lt;a href=&#34;http://ieeexplore.ieee.org/document/717459/&#34;&gt;The Effects of Predicated Execution on Branch Prediction&lt;/a&gt; 分析了这个问题，结论是还真不少。当然了，这篇论文主要的论点是，指令集应该引入各种条件执行指令，这样编译器就可以利用现有处理器的条件执行指令来优化，没有去讨论纯硬件的实现方法。&lt;/p&gt;&lt;p&gt;从 SiFive 提交给 GCC 的 &lt;a href=&#34;https://patchwork.ozlabs.org/project/gcc/patch/20190430234741.8120-1-jimw@sifive.com/#2163277&#34;&gt;patch&lt;/a&gt; 也可以看到，类似的优化被实装到了 SiFive 的 CPU 当中，不过这里做的会更加简单，只考虑了分支跳过一条指令的情况，这种也比较好实现，可以在现有的指令融合机制的基础上，把两条指令合成一条：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The SiFive 7 series cores have macro fusion support to convert a branch over asingle instruction into a conditionally executed instruction. This adds aconditional move pattern, enabled only for the SiFive 7 series cores, thatimplements the initial optimization support for this feature. This gives usabout a 10% increase in coremark scores for this core.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;SiFive 的专利 &lt;a href=&#34;https://patents.google.com/patent/US10996952B2/en&#34;&gt;Macro-op fusion&lt;/a&gt; 也提到了很多在 RISC-V 上实现的指令融合的优化，下面举几个例子：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;bne&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;target&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;target:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以转化为：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ifeqz_addi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就是上面所说的 SiFive 实现的只跳过单条指令的 Short Forward Branch，把 bne + add 指令变成了条件 add 指令，并且自带和 0 比较的逻辑：如果 x1 == 0（ifeqz，if equals to zero），就设置 x3 = x3 + 1，否则 x3 保持不变。类似地，把 add 换成 sub 也可以类似地做融合，甚至连函数调用 jal 指令也可以。&lt;/p&gt;&lt;p&gt;还有一个有趣的指令融合场景：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;beq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;skip&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;target&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;skip:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-2-5&#34;&gt;&lt;a id=&#34;__codelineno-2-5&#34; name=&#34;__codelineno-2-5&#34; href=&#34;#__codelineno-2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nl&#34;&gt;target:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以融合为：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;target&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可能会觉得，为什么编译器要多此一举，不直接生成一个 bne？答案是 RISC-V 的 bne 的立即数范围太小，要想跳到更大的范围，就需要用 j 指令，于是编译器只好用 beq + j 的组合来实现大范围的 bne。然后 SiFive 的处理器会识别这种模式，把它转换成一条 jne：条件分支，但又有 j 指令的 imm 跳转范围。这也挺有意思的，指令在设计的时候，不好做太多的 imm 位数，编译器因此生成了更复杂的代码，硬件再翻译回来。&lt;/p&gt;&lt;p&gt;苹果申请了 &lt;a href=&#34;https://patents.google.com/patent/US20240028339A1/en&#34;&gt;Using a Next Fetch Predictor Circuit with Short Branches and Return Fetch Groups&lt;/a&gt; 专利，它和上面提到的优化不太一样，但是有些类似。专利里提到了这么几种情况：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果 Fetch Group 内有一个要跳转的分支指令会 Forward 跳转到同一个 Fetch Group 内部，原来的做法是从分支指令的目的地址再 Fetch 一次，但既然是同一个 Fetch Group，Fetch 分支指令的同时，已经把从分支的目的地址开始的指令取进来了，跳过中间的指令，把两段指令拼接起来，可以省下重新 Fetch 一次的时间。&lt;/li&gt;&lt;li&gt;如果 Fetch Group 内有一条 call 指令，在原来的做法里，call 指令之后的指令就被丢弃了，等到未来 return 回来的时候，再重新 Fetch 一次；专利里的做法是，在 call 的时候，把 call 指令之后的指令保存下来，当未来 return 回来的时候，不再重新 Fetch，而是取出保存下来的 call 指令之后的指令，这样就节省了重新 Fetch 一次的时间。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因此它的目的主要是解决重复 Fetch 的能耗问题，而不是分支预测错误率高的问题。&lt;/p&gt;&lt;h2 id=&#34;clustered-decode&#34;&gt;Clustered Decode&lt;a class=&#34;headerlink&#34; href=&#34;#clustered-decode&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;推荐阅读：&lt;a href=&#34;https://zhuanlan.zhihu.com/p/720301269&#34;&gt;解码簇二三事（一）：为什么？&amp;amp;加料！&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Intel 的 E 核从 Tremont 微架构开始实现了 Clustered Decode，从 Goldmont Plus 微架构的传统的 3-wide decode，变成了两条 3-wide decode 的流水线，加起来实现 6-wide decode 的效果。但是这两个流水线怎么协同工作呢？&lt;/p&gt;&lt;p&gt;Intel 在 &lt;a href=&#34;https://cdrdv2-public.intel.com/671488/248966-046A-software-optimization-manual.pdf&#34;&gt;Software Optimization Manual&lt;/a&gt; 中是这么描述的：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Tremont microarchitecture has a 32B predict pipeline that feeds dual 3-wide decode clusters capable of 6 instruction decode per cycle. Each cluster can access a banked 32KB instruction cache at 16B/cycle for a maximum of 32B/cycle.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;ICache 分成两个 bank，两个 bank 可以同时访问，每个 bank 提供 16B/cycle 的带宽，对应两个 decode pipeline。由于不同的 bank 可以用不同的地址的访问，这意味着这两次访问可以访问不同 cacheline 内的指令，这正好对应了指令流里有跳转的情况：&lt;/p&gt;&lt;p&gt;假如有一段指令（下面的指令流 A），最后一条指令会跳转到另一个地址（下面的 1: label），分支预测器在看到这个模式后，就可以让两个 decode cluster 分别处理跳转前的代码（指令流 A 内的 &lt;code&gt;dec + jne&lt;/code&gt;）和跳转后的代码（指令流 B 内的 &lt;code&gt;mov&lt;/code&gt;）：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# instruction stream A&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-2&#34;&gt;&lt;a id=&#34;__codelineno-4-2&#34; name=&#34;__codelineno-4-2&#34; href=&#34;#__codelineno-4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;dec&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsi&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-3&#34;&gt;&lt;a id=&#34;__codelineno-4-3&#34; name=&#34;__codelineno-4-3&#34; href=&#34;#__codelineno-4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-4&#34;&gt;&lt;a id=&#34;__codelineno-4-4&#34; name=&#34;__codelineno-4-4&#34; href=&#34;#__codelineno-4-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-5&#34;&gt;&lt;a id=&#34;__codelineno-4-5&#34; name=&#34;__codelineno-4-5&#34; href=&#34;#__codelineno-4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# instruction stream B&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-6&#34;&gt;&lt;a id=&#34;__codelineno-4-6&#34; name=&#34;__codelineno-4-6&#34; href=&#34;#__codelineno-4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;err&#34;&gt;1:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-4-7&#34;&gt;&lt;a id=&#34;__codelineno-4-7&#34; name=&#34;__codelineno-4-7&#34; href=&#34;#__codelineno-4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rsp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rdi&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就在保持硬件实现比较简单的前提下，实现了比较宽的 decode width（Intel 原文：&lt;code&gt;Whereas increasing decode width in a traditional fashion for x86 requires exponential resources and triggers efficiency loss, clustering allows for x86 decode to be built with linear resources and little efficiency loss.&lt;/code&gt;）。这对于 x86 来说是比较难提升的，因为指令是变长的，如果不知道指令从哪里开始，译码将会十分复杂而且串行。可以看到 ARM 阵营的高性能处理器在 decode width 上有一定的领先，也是因为 ARMv8 是定长指令集。&lt;/p&gt;&lt;p&gt;不过，这个方法也有一个问题：假如没有跳转的分支，怎么办？如果遇到一大段没有分支的指令，似乎就只能用上 3-wide decode，那么这很容易成为一个瓶颈。Tremont 没有解决这个问题，建议用户在这种情况下插入一些 jmp 指令。&lt;/p&gt;&lt;p&gt;Intel 在 Tremont 的下一代 Gracemont 微架构中缓解了这个瓶颈。既然插入一些 jmp 指令可以解决这个问题，如果由硬件自动插入一些伪 jmp 指令，也解决了同样的问题，这就是 Gracemont 的解决思路：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Gracemont microarchitecture addresses this bottleneck by introducing a hardware load-balancer. When the hardware detects long basic blocks, additional toggle points can be created based on internal heuristics. These toggle points are added to the predictors, thus guiding the machine to toggle within the basic block.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;也就是说，硬件会检测这种长的连续指令块（例如连续 32 条指令都没有一个跳转的指令），适时插入一些 toggle point（例如插到第 24 条指令后面），也就是前面说的伪 jmp 指令，这条指令并不存在，而是在分支预测器中做标记，那么未来执行的时候，就可以利用上两条 Decode Pipeline 了：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If there are no natural toggle points (i.e., taken branches) within 32 uops, the hardware will insert a toggle point on the instruction after or corresponding to the 24th uop of the stream. As inserted toggle points consume resources in the predictor, it typically doesn&#39;t insert immediately but rather marks the location of the instruction in a table of addresses. If the same inserted toggle point is marked a second time, it allocates this location into the predictor.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;此外，为了解决变长指令集的译码问题，还有一个优化：在 ICache 中标记每条指令的边界，这样译码的时候，就可以快速寻找到指令边界，从指令边界并行地进行译码，而不用先判断第一条指令有多长，再找到第二条指令在哪，再判断第二条指令有多长，再去找第三条指令。不过这个信息怎么来呢？&lt;/p&gt;&lt;p&gt;一种方法是在 ICache 中进行预译码（Pre-decode），当 ICache 在 refill 的时候，就进行一定的译码，把指令边界标记出来。但 x86 的指令从不同位置开始译码，得到的结果是不一样的，也因为这一点 ROP 攻击在 x86 上比较容易实现。这对于预译码也带来了困难，不知道从哪个字节开始执行。&lt;/p&gt;&lt;p&gt;另一种方法是等到译码的时候，先检查一下有没有指令边界的信息，如果没有，临时耗费两个周期来进行预译码的操作，把指令边界标记出来，把结果写入 ICache 中。由于此时已经从分支预测器知道了指令执行的起始地址，所以得到的结果更加精确。这个方法在 Gracemont 中采用，叫做 On Demand Instruction Length Decoder（OD-ILD），顾名思义，它的译码结果是指令的长度，也就得到了指令的边界信息：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Instead of a second level predecode cache, the Gracemont microarchitecture introduces an “on-demand” instruction length decoder (OD-ILD). This block is typically only active when new instruction bytes are brought into the instruction cache from a miss. When this happens, two extra cycles are added to the fetch pipeline in order to generate predecode bits on the fly.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这个方法在 Intel 的专利 &lt;a href=&#34;https://patents.google.com/patent/US20220100516A1/en&#34;&gt;Circuitry and methods for power efficient generation of length markers for a variable length instruction set&lt;/a&gt; 有比较详细的描述。&lt;/p&gt;&lt;p&gt;Intel 在 Skymont 这一代 E-core 微架构在大大拓宽后端的同时，把 Decode 从两条 3-wide pipeline 改成了三条 3-wide pipeline，那么怎么把这三条 Decode pipeline 喂满，是继续延续上面的思路，只不过插入更多的 toggle point，还是有一些新的设计，让我们拭目以待。&lt;/p&gt;&lt;h2 id=&#34;btb-organization&#34;&gt;BTB Organization&lt;a class=&#34;headerlink&#34; href=&#34;#btb-organization&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;BTB 的目的是在分支预测阶段，提供哪些指令是分支指令，以及这些分支指令的目的地址的信息。那么 BTB 是怎么保存这些信息的呢？论文 &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/3613424.3623774&#34;&gt;Branch Target Buffer Organizations&lt;/a&gt; 总结了几种常见的 BTB 组织方法：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第一种方法：I-BTB，Instruction BTB，对于每个可能出现分支指令的地址，都进行一次 BTB 查询，看看这个地址是不是有分支指令。此时 BTB entry 只需要记录 tag（用于组相连的 Way 匹配）、branch type 和 branch target。以 ARMv8 为例，指令都是 4 字节，假如要对 32 字节的块进行预测，那么就要对这 32 字节的 8 个 4 字节都进行一次 BTB 查询，得到每一个位置上的分支信息。x86 的话每个字节都可能是一条分支指令，用这样的方法需要查询的次数过多。&lt;/li&gt;&lt;li&gt;第二种方法：R-BTB，Region BTB，对于每个对齐的块，记录这个块内的有限条分支的信息，例如对每个对齐到 32 字节的块，记录最多 4 条分支。此时 BTB entry 需要记录 tag（用于组相连的 Way 匹配）、每条分支的 offset、类型 和 target。这样 BTB 查询的次数会比较少，但如果一个块内分支太多，会出现存不下的情况。&lt;/li&gt;&lt;li&gt;第三种方法：B-BTB，Block BTB，记录的是从某个 PC 开始连续的一段指令，这段指令不能有多于 n 条分支，并且不能多于 m 条指令或 m 个字节。此时 BTB entry 需要记录 tag（用于组相连的 Way 匹配）、每条分支的 offset、类型 和 target。这种方法在分支很密集的情况下，会用多个 BTB entry 保存这些分支。此外也比较方便做 2 predictions/cycle：同时预测两个条件分支，如果第一个分支不跳转，那就用第二个分支的结果。但同一个分支可能重复保存在多个 BTB entry 中，因为入口 PC 可能不同。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;下面看一些例子，例如 AMD 在 &lt;a href=&#34;https://www.amd.com/content/dam/amd/en/documents/epyc-technical-docs/software-optimization-guides/56665.zip&#34;&gt;Software Optimization Guide for AMD EPYC™ 7003 Processors&lt;/a&gt; 中有如下表述：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Each BTB entry includes information for branches and their targets. Each BTBentry can hold up to two branches if the last bytes of the branches reside in the same 64-byte alignedcache line and the first branch is a conditional branch.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这和上面所说的 B-BTB 是类似的，如果两条分支在同一个 64B 对齐的 cacheline 内，并且第一条分支是条件分支，就可以保存在同一个 BTB entry 内。换句话说，一个 BTB entry 可以保存 1 到 2 条分支。&lt;/p&gt;&lt;p&gt;香山&lt;a href=&#34;https://raw.githubusercontent.com/OpenXiangShan/XiangShan-doc/main/slides/20220825-RVSC-%E9%A6%99%E5%B1%B1%E5%A4%84%E7%90%86%E5%99%A8%E5%89%8D%E7%AB%AF%E5%8F%96%E6%8C%87%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B.pdf&#34;&gt;南湖微架构&lt;/a&gt;也采用了类似的&lt;a href=&#34;https://docs.xiangshan.cc/zh-cn/latest/frontend/bp/&#34;&gt;B-BTB 设计&lt;/a&gt;，下面是香山微架构文档的截图：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../brief-into-ooo-3-ftb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;如果程序里有很多经常或者总是跳转的分支，那么上面这种 B-BTB 设计就有一些浪费，因为找不到很多条件分支 + 分支的组合，即使找到了，如果条件分支总是跳转，那么第二条分支就浪费了。为了解决这个问题，AMD 在 &lt;a href=&#34;https://www.amd.com/content/dam/amd/en/documents/processor-tech-docs/software-optimization-guides/57647.zip&#34;&gt;Software Optimization Guide for the AMD Zen4 Microarchitecture&lt;/a&gt; 中提到一种解决方案：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Each BTB entry can hold up to two branches, and two pair cases are supported:• A conditional branch followed by another branch with both branches having their last byte in thesame 64 byte aligned cacheline.• A direct branch (excluding CALLs) followed by a branch ending within the 64 byte alignedcacheline containing the target of the first branch.Predicting with BTB pairs allows two fetches to be predicted in one prediction cycle.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;可以看到第一种情况就是前面 Zen 3 的模式，一个 cacheline 内，条件分支 + 分支；第二种情况就是新的设计，它可以记录两条分支指令，第二条分支指令和第一条分支指令的目的地址在同一个 cacheline 中，也就是一个 BTB 记录两条分支指令，第一条跳到第二条，第二条再跳转，在这种情况下，可以一个周期给出两个 Fetch Bundle，也就是 2 taken predictions/cycle。论文中这种设计叫做 MB-BTB。&lt;/p&gt;&lt;p&gt;推荐阅读：&lt;a href=&#34;https://blog.eastonman.com/blog/2023/12/modern-branch-prediction-from-academy-to-industry/&#34;&gt;现代分支预测：从学术界到工业界&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;instruction-prefetcher&#34;&gt;Instruction Prefetcher&lt;a class=&#34;headerlink&#34; href=&#34;#instruction-prefetcher&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;随着程序的指令 footprint 增大，除了增大 L1 ICache 容量，也需要实现合理的 Instruction Prefetcher，把指令预取到 L1 ICache 当中。对于 Decoupled Frontend，目前比较常见的方法是使用 &lt;a href=&#34;https://ieeexplore.ieee.org/document/809439&#34;&gt;Fetch Directed Intruction Prefetching(FDIP)&lt;/a&gt;，利用 Decoupled Frontend 里分支预测可以在取指之前跑得更远的特性，使用分支预测的地址来进行预取。具体地，Decoupled Frontend 会把分支预测得到的地址写入 Fetch Target Queue(FTQ)，这些地址由 ICache 来消费。与此同时，FTQ 中的地址也会用于指令预取，结构如论文中的图 1：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../brief-into-ooo-3-fdip.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;对于 Coupled Frontend，预测和取指紧密相连，FDIP 的方法就不好用了，需要寻找其他的方法。&lt;/p&gt;&lt;p&gt;一种方法是 Call Graph Prefetching(CGP)，来自论文 &lt;a href=&#34;https://ieeexplore.ieee.org/abstract/document/903270&#34;&gt;Call graph prefetching for database applications&lt;/a&gt;。从名字也可以看出，它针对的是数据库场景，而这个场景下，代码的规模很大，更加容易出现 ICache Miss。&lt;/p&gt;&lt;p&gt;它的核心思路是，维护一个 Call Graph History Cache(CGHC) 来记录程序执行的调用图，根据历史信息来预取未来可能会执行的函数的指令，这针对的是频繁的函数调用；针对函数体比较大的情况，函数调用的比例比较小，利用 Next N-Line Prefetching，也就是在 miss 的时候把连续的几条缓存行预取进来。&lt;/p&gt;&lt;p&gt;那么这个 Call Graph History Cache 是怎么维护函数调用的呢？它记录了两个 Array：Tag Array 和 Data Array。Tag Array 记录的是函数的入口地址，以及在这个函数内执行到了第几个函数（Index）；Data Array 则记录了被该函数调用的函数的入口地址，最多八个。例如函数 A 会调用函数 B 和 C，那么 CGHC 会保存这么一条记录：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Tag Array：记录函数 A 的入口地址以及 Index，Index 初始化为 1&lt;/li&gt;&lt;li&gt;Data Array：记录函数 B 和 C 的地址&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;当前端通过分支预测，预测到要执行函数 A，那么就通过 A 的地址去查询 Tag Array，找到匹配，并且发现其 Index 等于 1；那么接着用 Index 访问 Data Array，取出第一个函数的地址，也就是 B，那就预取 B。当函数 B 被调用的时候，更新 Index 为 2，表示函数 B 已经被调用，下一个要被调用的是 C。当函数 B 返回的时候，用 Index 访问 Data Array，得到函数 C 的地址，预取 C。如果说 Call Graph 是个图，那么 Tag Array 和 Data Array 就组成了邻接表。&lt;/p&gt;&lt;p&gt;苹果的专利 &lt;a href=&#34;https://patentimages.storage.googleapis.com/4d/f2/31/acf69ce6f289ff/US10642618.pdf&#34;&gt;Callgraph Signature Prefetch&lt;/a&gt; 使用了类似的思想，不过在维护 Call Graph 的方式上不同：上面的论文是通过显式的方法记录 Call Graph，每个函数调用了哪些函数，而专利中，参考了分支预测记录分支历史的方法，把最近的 call 和 return 地址压缩记录下来，通过 hash 得到 Signature，再用 Signature 去查询 Prefetch Table，相当于在拿最近若干次调用和返回的历史来预测下一次 call 的地址。Prefetch Table 的每个 Entry 记录了这些信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Signature：记录了这个 Entry 对应的 Signature，即最近函数调用的压缩表示；实际可能实现为全相连，也可能是组相连，通过 tag 匹配&lt;/li&gt;&lt;li&gt;Address：要预取的指令地址；专利中还谈到了 Address 的压缩，即把 Address 的高位单独存放在一个 Address Table 中，那么 Prefetch Table 的 Entry 记录了 Address Table 的 Index 以及低位 Offset，需要预取时，再从 Address Table 读取高位，拼接起来&lt;/li&gt;&lt;li&gt;Counter：给从 Address 开始的若干个缓存行维护 Saturating Counter，用来判断是否要进行预取&lt;/li&gt;&lt;li&gt;Order：用来维护 Replacement Policy 所需要的信息&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;那么前端要做的事情就是，根据分支预测去更新 Signature，根据 Signature 查询 Prefetch Table，如果有命中，根据 Counter 的大小决定是否要预取，从 Address 开始预取哪些数据。&lt;/p&gt;&lt;h2 id=&#34;championship-branch-prediction&#34;&gt;Championship Branch Prediction&lt;a class=&#34;headerlink&#34; href=&#34;#championship-branch-prediction&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;针对分支方向预测，曾经办过 5 届的 Championship Branch Prediction 竞赛，最后一次是 2016 年的 CBP-5，网站是 &lt;a href=&#34;https://jilp.org/cbp2016/&#34;&gt;Championship Branch Prediction (CBP-5)&lt;/a&gt;。其文件可以从下列地址得到：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;https://web.archive.org/web/20220814115014/http://hpca23.cse.tamu.edu/cbp2016/cbp2016.final.tar.gz&lt;/li&gt;&lt;li&gt;https://web.archive.org/web/20190907061905/http://hpca23.cse.tamu.edu/cbp2016/MD5SUM.txt&lt;/li&gt;&lt;li&gt;https://drive.google.com/drive/folders/1VAdmqdOEFLvnRKkQQidxvGJA_C6S2RWo 来自 https://github.com/craymichael/CBP-16-Simulation&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;后续还有一些论文也是在 CBP2016 的环境下进行的测试。&lt;/p&gt;</description><link>https://jia.je/hardware/2024/09/12/brief-into-ooo-3/</link> <pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/09/12/brief-into-ooo-3/</guid> </item> <item> <title>三星 Exynos CPU 微架构学习笔记</title> <category>arm</category> <category>cpu</category> <category>exynos</category> <category>hardware</category> <category>microarchitecture</category> <category>samsung</category> <description>&lt;h1 id=&#34;三星-exynos-cpu-微架构学习笔记&#34;&gt;三星 Exynos CPU 微架构学习笔记&lt;a class=&#34;headerlink&#34; href=&#34;#三星-exynos-cpu-微架构学习笔记&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ISCA 2020 的一篇文章 &lt;a href=&#34;https://ieeexplore.ieee.org/document/9138988&#34;&gt;Evolution of the Samsung Exynos CPU Microarchitecture&lt;/a&gt; 非常详细地解析了三星 Exynos 自研 CPU 微架构的演进历史。本文是对这篇论文的学习和整理的笔记。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;分支预测器&#34;&gt;分支预测器&lt;a class=&#34;headerlink&#34; href=&#34;#分支预测器&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;文章 Chapter IV 讲述了 Exynos 系列微架构的分支预测器实现。Exynos 微架构用的是 &lt;a href=&#34;https://ieeexplore.ieee.org/document/903263&#34;&gt;Scaled Hashed Perceptron&lt;/a&gt; 分支方向预测器，这个分支预测器的提出者 Daniel A. Jiménez 也在这篇论文的作者列表中。现在采用基于 Perceptron 的分支预测器的处理器不多，AMD 的 Zen 1 用了，Zen 2 是 Perceptron 加 TAGE，Zen 3 以后就只有 TAGE 了。&lt;/p&gt;&lt;p&gt;除了方向预测器，还需要有 BTB 来识别分支以及记录分支的目的地址。为了性能，每个周期都要预测至少一个分支，所以一般会有一个 0-bubble 的 BTB，在这里叫 uBTB（microBTB，用 u 代替希腊字母 μ）。但也因为时序的限制，不会做的太大。为了支持有更大的容量，通常还会有更大的，延迟也更长的 BTB，在这里叫 mBTB（Main BTB），最大的是 L2 BTB，还有后面会讲到处理边界情况的 vBTB。同理，分支预测器也有容量和延迟的双重考虑，设置不同大小和容量的分支预测器，也可能会分多级，和 0-bubble uBTB 配对的 LHP（Local History Perception）以及 1-2 bubble mBTB 配对的完整的 SHP（Scaled Hashed Perception）。此外还有 RAS（Return Address Stack）负责函数返回地址的预测。&lt;/p&gt;&lt;p&gt;首先从 Exynos 最早的分支预测器设计开始。一开始设计的时候，就考虑到要支持 2 prediction/clock 的场景，前提是第一个分支是 not taken 的。例如有两条分支指令，第一条是条件分支指令，如果第一条分支 taken，那就以第一条分支的结果为准；如果第一条分支 not taken，那就应该以第二条分支的结果为准。这样可以在比较低的开销的前提下，一个周期预测两条分支指令，提高分支预测的性能，如果不做这个优化的话，需要先预测第一条分支，预测完，再去预测第二条分支。论文中指出，对于这种需要预测 2 个分支的场景，有 60% 的情况是第一条分支 taken，24% 情况是第一条分支 not taken 并且第二条分支 taken，两个都 not taken 的情况占 16%。那么后 40% 的情况就可以得到性能提升。这个优化还是挺常见的，例如&lt;a href=&#34;https://raw.githubusercontent.com/OpenXiangShan/XiangShan-doc/main/slides/20220825-RVSC-%E9%A6%99%E5%B1%B1%E5%A4%84%E7%90%86%E5%99%A8%E5%89%8D%E7%AB%AF%E5%8F%96%E6%8C%87%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B.pdf&#34;&gt;香山南湖架构&lt;/a&gt;做了这个优化，而且虽然可以 2 predictions/cycle，但实际上只有一个 Fetch Packet，也最多 1 taken prediction/cycle。&lt;/p&gt;&lt;p&gt;SHP，也就是那个最大的 Perceptron 预测器，包含了 8 个表，每个表有 1024 个权重，每个 BTB 表项还给每个分支记录了一个 bias。预测的时候，根据 GHR（根据分支 taken/not taken 历史）和 PHR（根据 taken branch 地址）以及分支的 PC 经过哈希，得到 table 的 index，根据 index 去访问权重。把从 8 个表里读出来的权重加起来，再加上 bias 的两倍，得到最早的计算结果，如果是非负数，则预测为 taken；负数则预测为 not taken。&lt;/p&gt;&lt;p&gt;知道分支的实际跳转方向后，如果预测错误了，或者预测对了，但是计算结果太接近 0，就需要更新 weight。更新时，会更新参与到计算的来自各个表的 weight，如果是 taken，那就增加 weight；如果是 not taken，就减少 weight。Exynos M1 采用了 165 位的 GHR，也就是最近 165 条条件分支的跳转方向，以及 80 位的 PHR，每个 taken branch 会向 PHR 贡献 3 个 bit（B[4:2]），但是没说移位多少。这样就构成了一个 Perceptron 预测器。&lt;/p&gt;&lt;p&gt;特别地，针对总是跳转的分支，例如无条件跳转分支，或者总是跳转的条件分支，就不用更新 SHP 了，他们只需要在 BTB 中标记一下即可，避免污染 SHP，干扰其他分支的预测。类似的思路也挺常见的，AMD 的做法是，对于从来没有跳转过的条件分支指令，不分配 BTB 表项，并且预测为不跳转；当条件分支了跳转第一次，那就会在 BTB 中分配表项，标记为 always taken，表示预测为总是跳转；当条件分支跳转和不跳转各至少一次，才启用分支方向预测器。&lt;/p&gt;&lt;p&gt;接下来是 BTB。mBTB，也就是上面提到的有 1-2 bubble 的略微大一些的 BTB，可以给 128B 大小的 cacheline 保存 8 条分支指令。统计数据表示，平均每 5 条指令有一条是分支指令，那么 128B 在 4 字节定长指令的情况下，可以存 32 条指令，估算得到大约有 6-7 条分支指令，所以设计了可以存 8 条。但也有可能分支密度很高，128B 全是分支指令，那就会有 32 条分支指令了。&lt;/p&gt;&lt;p&gt;为了解决这个问题，设计了 vBTB（virtual indexed BTB），可以把 128B 的 cacheline 里超过 8 个 branch 的多余部分保存下来，当然了，会有额外的开销。&lt;/p&gt;&lt;p&gt;比较特别的是，没有设计单独的例如 ITTAGE 那样的 Indirect Predictor，而是采用了叫做 VPC（Virtual PC）的方案，它的思路是，复用方向预测器和 BTB 的能力，把一条 Indirect Branch 映射为多条 Conditional Branch，每个 Conditional Branch 的 Target 对应一个可能的 Indirect Branch Target，这个 Target 就存在 BTB 当中。预测的时候，按照顺序遍历每个虚拟的 Conditional Branch，如果预测为 taken，那就跳转到这个虚拟的分支的目的地址；如果预测为 not taken，那就遍历到下一个虚拟的分支。如果所有的虚拟条件分支都被预测为不跳转，那就需要等到后端计算出实际的目的地址，再跳转。对于每个 Indirect Branch，这样的虚拟条件分支最多生成 16 个。&lt;/p&gt;&lt;p&gt;这些虚拟的条件分支既然要利用 BTB 的空间，自然也会抢占 128B cacheline 最多 8 条分支的限制，多余的分支或者 Indirect Branch 生成的虚拟条件分支也会溢出到 vBTB 内。这种设计还是第一次见。&lt;/p&gt;&lt;p&gt;由于这个初始的分支预测器设计只有一个 main BTB，需要 2 bubble 才能出一个 taken branch，在 taken branch 很密集的时候，就需要三个周期一个 taken branch 了，这性能肯定不够好。所以 Exynos M1 引入了 0-bubble 的 uBTB，容量比较小，好处是快，一般这种 0-bubble BTB 也可以叫做 Next Line Predictor，预测下一个周期的 Fetch 地址。&lt;/p&gt;&lt;p&gt;为了实现 0-bubble 的 uBTB，Exynos M1 用了一个基于图的结构来记录分支之间的跳转关系，配合一个记录分支局部历史的 Hashed Perceptron 算法来预测方向。这个预测算法也是第一次见，在三星的专利 &lt;a href=&#34;https://patents.google.com/patent/US20170068539A1/en&#34;&gt;High performance zero bubble conditional branch prediction using micro branch target buffer &lt;/a&gt; 中提出，大题思路其实就是把基本块学习出来，找到分支之间 taken 和 not taken 的关系，以每个分支为一个结点，如果一个分支 taken 以后会到另一个分支，那就在这两个分支对应的结点之间连一条 taken 的有向边，类似地，not taken 也会连 not taken 的有向边。&lt;/p&gt;&lt;p&gt;有了图以后，就可以直接从图中知道下一个会到达的分支在哪里，即使这个分支可能距离很远；而常规的 BTB 设计里，则是拿到地址以后，用地址去寻找匹配的 BTB entry，这个过程中可能会扫描到一些不存在分支指令的代码块。这里也支持前面说的连续两个分支同时预测的情况，在同一个周期内预测两个分支，如果第一个分支不跳，就用第二个分支的结果，在树上转移。为了省电，当 uBTB 预测准确率较高，图记录了最近执行的所有分支，那么 uBTB 就可以火力全开，保持 0-bubble 的预测，这个预测在后面的流水线中会被 mBTB 和 SHP 进行进一步的确认。如果准确率特别高，认为 mBTB 和 SHP 大概率也会得到相同的预测结果，就会进一步停止 mBTB 和 SHP 的使用，降低功耗，这时候就要靠后端的 Branch Unit 来检查预测是否正确。&lt;/p&gt;&lt;p&gt;这就是 Exynos M1 和 M2 的分支预测器设计。上面的专利&lt;a href=&#34;https://patents.google.com/patent/US20170068539A1/en&#34;&gt;High performance zero bubble conditional branch prediction using micro branch target buffer&lt;/a&gt;还给出了前端的流水线各级的功能：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../samsung-exynos-cpu-frontend-1.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;这个图中没有绘制 uBTB 内部的结构，uBTB 负责给出初始的预测，到 B1 阶段，从 B1 开始，会经过两条流水线，上面的流水线是 mBTB + SHP 负责更精确的预测，下面的流水线是查询 ITLB + 读取 ICache。上面说 2-bubble 的 mBTB，实际上就是从 B1 得到 Fetch Window，B2 读取 mBTB 和 SHP 的权重，等到 B3 完成之后才可以计算出结果，判断是 taken 还是 not taken，如果预测的结果和 uBTB 预测不一致，就需要刷流水，从 B1 重新开始：B1 B2 B3 B1 B2 B3，三个周期一个 taken branch。&lt;/p&gt;&lt;p&gt;图中也可以看到 vBTB 在 B4，所以如果一个 cacheline 有超过 8 个 branch，那么在预测这些溢出到 vBTB 中的分支时，需要额外的两个周期：B1 B2 B3 B4 B3，五个周期一个 taken branch。&lt;/p&gt;&lt;p&gt;Exynos M3 继续改进了分支预测器。首先是 uBTB 的图的容量翻倍，添加了针对无条件分支的容量。为了加速总是跳转的条件分支指令，当 mBTB 检测到总是跳转的条件分支指令时，提前一个周期得到结果，也就是上图中 B3 到 B1 的连线，没有经过权重计算，直接刷 B1：B1 B2 B1 B2，两个周期一个 taken branch，1-bubble，在论文里叫做 1AT（1-bubble Always Taken）。Exynos M3 还翻倍了 SHP 的行的个数，也翻倍了 L2 BTB 容量。&lt;/p&gt;&lt;p&gt;Exynos M4 继续翻倍了 L2 BTB 容量，减少了 L2 BTB refill 到 mBTB 的延迟，带宽翻倍。这个优化主要是针对分支比较多，mBTB 存不下的程序。&lt;/p&gt;&lt;p&gt;Exynos M5 增加了 Empty Line Optimization 优化：检测没有分支的缓存行，如果确认缓存行没有分支，那就不用预测里面的分支了，可以节省功耗。&lt;/p&gt;&lt;p&gt;为了进一步优化 taken branch 的吞吐，在 mBTB 中记录分支的目的地址时，不仅记录在分支本身所在的 mBTB entry 中，还要记录在这条分支的前序分支的 mBTB entry 中：例如 A 跳转到 B，B 跳转到 C，经典的实现是用 A 的地址找到 A 的 BTB entry，entry 中记录了 A 目的地址是 B，接着用 B 的地址找到 B 的 BTB entry，entry 中记录了 B 的目的地址是 C；而 Exynos M5 的设计是，C 的目的地址，不仅要记录在 B 的 BTB entry 中，还要记录在 A 的 BTB entry 中。不过这里要求 B 的跳转是 always-taken 或者 often-taken，因为并没有对第二条分支做预测，而是预测它一定会跳。通过这样的方法，可以在 2-bubble 的预测器的实现下，实现 1 taken branch/cycle 的吞吐，等效于一个 0-bubble 的预测器。下面是论文中对 mBTB 从 2-bubble 到 1-bubble 最终到 0-bubble 的变化的对比图：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../samsung-exynos-cpu-mbtb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;最左边的 SHP 2-bubble 就是最初的实现，它需要在 B3 得到分支是 taken 还是 not taken 的信息，如果和之前预测的不一样，那就需要 flush 掉流水线，B1 重新从正确的地址开始，然后重复这个过程，由于每次都需要到 B3 才能得到正确的地址，所以三个周期一个 taken branch。&lt;/p&gt;&lt;p&gt;中间是改进的 1AT 1-bubble 实现，它在 mBTB 中记录了这个分支是否是 Always Taken。因为 mBTB 在 B2 中读取，所以这个信息在 B2 就可以得知，例如图中 A 分支到达 B2 时，检测到它是 Always Taken，下个周期的 B1 直接就从正确的地址 B 开始，同理 B 到达 B2 时，又发现它是 Always Taken，下一个周期的 B1 又从 C 开始，所以两周期一个 taken branch，前提是分支是 Always Taken，通过避免分支预测来减少一个周期的 bubble。&lt;/p&gt;&lt;p&gt;右边是最后的 ZAT/ZOT 0-bubble 实现，它在 mBTB 中记录了后续两个分支的地址，例如 X 在 mBTB 中记录了 A 和 B 的地址。当 B3 发现 X 要跳转的时候，刷流水线，在接下来的两个周期里分别给 B1 提供了 A 和 B 的地址。当 A 到达 B2 时，A 在 mBTB 里记录了 B 和 C 的地址，于是把 C 的地址转发到下一个周期的 B1，依此类推，B2 的 B 得到了 D 的地址，B2 的 C 得到了 E 的地址，这样实现了每个周期一个 taken branch。通过记录两跳的地址和避免分支预测（把 Always Taken 和 Often Taken 都预测为 Taken），两个周期给出两个地址，减少两个周期的 bubble。&lt;/p&gt;&lt;p&gt;这时候就相当于有两个 0-bubble 预测器了，mBTB 有 0-bubble 能力，uBTB 也有，所以 Exynos M5 减少了 uBTB 的容量，换取更大的 mBTB 的预测器容量：SHP 的表数量翻倍，GHR 历史长度增加。&lt;/p&gt;&lt;p&gt;虽然 mBTB 在特定情况下可以做到 0-bubble，但是如果总是需要纠正预测错误，就会回退到三个周期一条分支的性能。为了解决这个问题，Exynos M5 引入了 Mispredict Recovery Buffer（MRB）：针对比较难预测的分支，记录它后续最可能执行的三次 fetch 的地址，如果命中了 MRB，那就直接从 MRB 中按顺序用三个周期把这三次 fetch 的地址放到 B1，然后流水线去验证这三个 fetch 地址是否正确，节省了重复的 B3 到 B1 的重定向时间。这个思路有点像大模型的推测生成：用比较短的时间预测（在这里是直接用 MRB 记下来了）出一个本来是串行的过程的结果，然后再用流水线或者并行的方式去验证结果是否正确。利用的性质都是，串行生成慢，但是验证结果却比较快。&lt;/p&gt;&lt;p&gt;Exynos M6 扩大了 mBTB 容量，针对间接跳转指令做了更多的优化，主要是考虑应用程序会出现一个间接跳转会跳转到上百个不同的目的地址这种模式，之前的 VPC 方法是 O(n) 的，n 是可能的目的地址的个数，n 小的时候比较好，n 大了就很慢了。&lt;/p&gt;&lt;p&gt;Exynos M6 的办法是，针对这些目的地址特别多的间接跳转指令，设计单独的存储，不去占用 vBTB 的空间，这个空间是 Indirect target storage，采用 4 路组相连，一共 256 个 set。经常出现的目的地址还是和之前一样，放在 mBTB 中，但是对于剩下的目的地址，则是放到 Indirect target storage 中，根据最近的 indirect branch target 计算出 Index 和 Tag，去 Indirect target storage 中寻找，其实这个就和 ITTAGE 里的一个 table 有点类似了。&lt;/p&gt;&lt;p&gt;最后论文总结了 Exynos 从 M1 到 M6 的各级分支预测器的存储面积开销，基本每一代都有所增加，既有 MPKI 的减少（M6 相比 M1 在 SPECint2006 上 MPKI 减少 25.6%），又有预测性能的提升。&lt;/p&gt;&lt;h2 id=&#34;分支预测安全&#34;&gt;分支预测安全&lt;a class=&#34;headerlink&#34; href=&#34;#分支预测安全&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;有意思的，论文也提到了分支预测的安全问题，主要是避免跨上下文的分支预测器注入攻击。核心思路是，给每个上下文生成一个随机数（&lt;code&gt;CONTEXT_HASH&lt;/code&gt;），然后把随机数异或到 BTB 保存的目的地址里面去，在从 BTB 读出来目的地址使用之前，要再次异或同一个随机数。那么如果是读取了来自同一个上下文的 BTB entry，通过两次异或可以得到正确的原始数据；如果是读取了来自不同上下文的 BTB entry，由于随机数不同，最后会得到随机的数据。当然了，前提是这些随机数不能被攻击者得到，对软件是不可见的。&lt;/p&gt;&lt;h2 id=&#34;uop-cache&#34;&gt;uOP Cache&lt;a class=&#34;headerlink&#34; href=&#34;#uop-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Exynos M1 到 M4 没有 uOP Cache，所有指令都需要经过取指和译码，得到 uOP。从 Exynos M5 开始引入了 uOP Cache，会缓存译码后的 uOP。Exynos M5 的 uOP Cache 最多可以保存 384 个 uOP，每个 entry 可以保存 6 个 uOP，一个周期提供一个 entry。一个 uOP Cache Entry 中的 uOP 来自连续的指令，以分支指令作为结尾。下面是论文给出的一个例子：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../samsung-exynos-cpu-uop.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;这段指令的入口在第一个缓存行的最后，从 I0 开始，执行 I0 I1 I2 I3，I3 是一条分支指令，因此 uOP 的 entry 到此结束，记录了 I0-I3 译码后的 uOP，这里 I2 指令被译码成了两条 uOP，于是这个 entry 就是 U0 U1 U2A U2B U3 这五个 uOP。I3 跳转到了 I4，I4 紧接着又是一条分支指令 I5，所以 uOP 的 entry 到这里结束，记录 I4 和 I5 译码后的 uOP：U4 和 U5。后面依此类推。&lt;/p&gt;&lt;p&gt;那么什么时候 uOP Cache 启用呢？论文中提到了一个状态机：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;FilterMode：当 uBTB 在学习分支之间的关系时，也在检查这段代码能否放到 uOP Cache 里，如果可以的话，转移到 BuildMode&lt;/li&gt;&lt;li&gt;BuildMode：开始把译码得到的 uOP 保存到 uOP Cache 内部，同时和 uBTB 学习到的图进行比对，当图中大部分的边对应的指令都已经被 uOP Cache 学习到，说明 uOP Cache 已经捕捉了大部分需要的指令，进入 FetchMode&lt;/li&gt;&lt;li&gt;FetchMode：指令缓存和译码部件被关闭，节省功耗，所有指令都从 uOP Cache 提供；此时如果 uBTB 的准确率很高，mBTB 也可以关掉，进一步节省功耗。当 uOP Cache 命中率降低，切换回 FilterMode&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这种设计还是比较常见的，uOP Cache 和 Decoder 不会同时工作，而是二选一，根据 uOP Cache 的命中率来决定谁来工作。然后进一步为了避免 uOP Cache 填充的功耗，如果 uBTB 发现这些代码放不下 uOP Cache 中，就不填充 uOP Cache 了，这就是 FilterMode 的设计的意义。&lt;/p&gt;&lt;h2 id=&#34;l1-数据预取&#34;&gt;L1 数据预取&lt;a class=&#34;headerlink&#34; href=&#34;#l1-数据预取&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;L1 数据预取器会检测不同的 stride，在虚拟地址上，跟踪访存的历史，为了方便识别访存的序列，由于访存是可以乱序执行的，它会进行重排，使得访存模式的识别看到就是程序的顺序。为了验证预取是否正确，在预取的同时，也会把这些预取的地址记录下来，放在 Confirmation Queue 中，和未来的 load 地址做比对。如果预取器和未来的 load 匹配的比例很高，说明预取器很准确，可以继续让他预取。如果准确率较低，为了避免浪费内存带宽，就会停止预取。&lt;/p&gt;&lt;p&gt;除了 strided 访存模式，Exynos M3 还引入了 Spatial Memory Stream 预取器，它会跟踪一个区间的第一次 cache miss 和后续的 miss，当再次遇到第一次 cache miss 的地址时，预取后续可能会出现 miss 的地址。&lt;/p&gt;&lt;h2 id=&#34;l2l3-缓存&#34;&gt;L2/L3 缓存&lt;a class=&#34;headerlink&#34; href=&#34;#l2l3-缓存&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;为了减少数据的重复，L3 缓存和 L1/L2 是 exclusive 的关系，数据是互斥的，要么存在 L3 里，要么存在 L1/L2 里，要么都不存。&lt;/p&gt;&lt;p&gt;Exynos M4 针对 L2 缓存引入了 Buddy Prefetcher：如果一个缓存行缺失了，那就把它相邻的下一个缓存行也预取进来。&lt;/p&gt;&lt;h2 id=&#34;访存延迟&#34;&gt;访存延迟&lt;a class=&#34;headerlink&#34; href=&#34;#访存延迟&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Exynos 系列的 load to use latency 通常情况下是 4 cycle，但针对 load to load 的情况，也就是前一个 load 的结果，作为后一个 load 的基地址的情况，从 Exynos M4 开始可以做到 3 cycle 的 load to use latency，这在论文中叫做 cascading load。这个 4 cycle 减到 3 cycle 的特性在苹果，高通和 Intel（E-core）的 CPU 中都有看到。&lt;/p&gt;&lt;h2 id=&#34;小结&#34;&gt;小结&lt;a class=&#34;headerlink&#34; href=&#34;#小结&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;虽然 Exynos 系列微架构的芯片没有新的演进了，但是也非常感谢这些作者慷慨地介绍了他们这些年优化微架构的努力，提供了很多有价值的信息。从作者信息也可以看到，当时开发 Exynos 的团队成员，在团队解散以后，去的基本也是有自研核的公司：Sifive，Centaur，ARM，AMD，Nuvia。&lt;/p&gt;&lt;p&gt;由于本人对 DCache 以及 Prefetch 部分缺乏深入了解，所以这部分的介绍比较少，有兴趣的读者建议参考原文。&lt;/p&gt;</description><link>https://jia.je/hardware/2024/09/10/samsung-exynos-cpu/</link> <pubDate>Tue, 10 Sep 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/09/10/samsung-exynos-cpu/</guid> </item> <item> <title>内存模型和内存序</title> <category>acquire</category> <category>arm64</category> <category>cpu</category> <category>hardware</category> <category>lock</category> <category>mca</category> <category>ordering</category> <category>release</category> <category>tso</category> <category>x86</category> <description>&lt;h1 id=&#34;内存模型和内存序&#34;&gt;内存模型和内存序&lt;a class=&#34;headerlink&#34; href=&#34;#内存模型和内存序&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;内存模型和内存序是一个贯穿软硬件实现的概念，你可以在 CPU 微架构，总线，到汇编指令，编译器和编程语言中看到它们。本文主要来探讨这些问题。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;内存模型&#34;&gt;内存模型&lt;a class=&#34;headerlink&#34; href=&#34;#内存模型&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;对于处理器核心来说，如何实现访存指令，对性能的影响是十分显著的。最基础的硬件实现方法，就是串行地完成每一条 Load 和 Store 指令，每一条访存指令执行完，才能开始执行下一条访存指令。但如果正在执行的访存指令 A 遇到了缓存缺失，需要等待缓存的回填，由于硬件只实现了串行执行，在 A 之后未来要执行的访存指令 B 又必须等待 A 的完成，耗费的时间就会比较长。&lt;/p&gt;&lt;p&gt;但很多时候，B 指令并不依赖 A 指令，可能访问的是不同的内存地址，可能 B 要访问的数据就在缓存中，如果能够在 A 等待缓存回填的时间同时执行 B，性能可以得到提升。但并非所有的 B 都可以提前执行的，比如&lt;/p&gt;&lt;ul&gt;&lt;li&gt;从核内的视角来看，A 和 B 访问的内存范围有重合，那么它们的执行顺序就很重要：&lt;ul&gt;&lt;li&gt;如果 A 是 Store 指令，B 是 Load 指令，B 在 A 之前执行，B 提早从 Cache 读取数据，得到的是 A 写入之前的结果，数据就错了。不过好在这可以通过 Store to Load Forwarding 解决，把 A 要写入的数据以及 Cache 中的数据拼接出，可以得到正确的 B 要读取的数据。&lt;/li&gt;&lt;li&gt;如果 A 是 Load 指令，B 是 Store 指令，B 在 A 之前执行，提早向 Cache 写入数据，那么 A 都出来的就是 B 写入之后的结果，数据就错了。&lt;/li&gt;&lt;li&gt;如果 A 和 B 都是 Store 指令，B 在 A 之前执行，那么最终内存中的值是 A 覆盖了 B，而不是预期的 B 覆盖了 A&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;从核外的视角来看，假如目前正在一个被锁保护的临界区，A 是对被保护的数据的修改，B 是释放锁，如果 B 在 A 之前执行，就会导致锁释放了，但还在修改被保护的数据的情况。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可能还有其他类似的场景，简单总结一下，决定访存的是否乱序，如何乱序，需要考虑：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;从核内的视角来看，乱序执行不能修改程序的一样。实现乱序的性能，又要表现出类似串行的行为&lt;/li&gt;&lt;li&gt;从核间的视角来看，有一些指令不能乱序，否则会影响核间同步互斥的正确性&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;除了 CPU 核之间，如果一些外设（例如显卡，网卡）也要访问内存，那么 CPU 和外设之间，也可能有类似的顺序问题。&lt;/p&gt;&lt;p&gt;因此就需要明确规定硬件乱序执行的模式和边界，使得软件开发者一方面可以根据需要在软件中插入指令来阻止不期望发生的乱序，从而保证正确性；另一方面在大多数时间，硬件提供的乱序可以在保证正确性的情况下，提供更好的性能。&lt;/p&gt;&lt;p&gt;但这个模式和边界不是一天建成的。硬件厂商希望能够不断推出性能更好的新处理器，这些新处理器可能为了性能去做更多的优化，这些优化可能会涉及到更多的乱序情况，这时候兼容性就成了一个问题：旧软件假设了硬件不会做某种乱序，结果新硬件做了，那旧软件在新硬件上就会出现兼容性问题。于是软件开发者很希望有一个标准或者说模型出来，硬件保证按照这个模型实现乱序，软件按照这个模型来开发，这样软件硬件分别发展，也不会出错。&lt;/p&gt;&lt;p&gt;但硬件厂商对这个事情也扭扭捏捏，生怕今天做了什么规定，明天发现这个规定会浪费了一个巨大的性能提升机会，但竞争对手没有做这个承诺，竞争对手就得到了优势。但是不做承诺呢，软件生态又成了一个问题：在今年的处理器上写代码，只能保证在今年的处理器上可以正常跑，明年出了新的处理器，出现了不兼容的地方，又要重新改一遍，这会把软件开发者给赶跑的。在这种别扭的心态下，很长时间以来，硬件厂商对此都写的有些语焉不详，相关的争论在零几年都一直能看到。&lt;/p&gt;&lt;p&gt;不过好在现在是 2024 年，大多数处理器的内存模型和内存序都已经比较明确，虽然很多时候硬件厂商做的是比较宽松的保证，实际实现的时候会更加严格，例如声称 A 和 B 是允许乱序执行的，但实际上目前的所有硬件都没有这么做，软件也只能按照最保守的方式来做假设。但有总比没有好，可能也是硬件厂商研究了很多年，没发现什么可以继续优化的余地了，不如死了心把规矩给定下来，把软件生态给打好。&lt;/p&gt;&lt;p&gt;现在开始讲实际的内存模型和内存序。为什么这两个概念总是放在一起讲？什么是模型？什么是序？&lt;/p&gt;&lt;p&gt;CPU 核心的实现是很复杂的，不同代的 CPU 架构的实现也有很多不同，屏蔽这些微架构的细节，把它们对软件暴露出来的行为，抽象出一个统一的硬件模型，这个模型展现了硬件针对内存访问的工作方式，就是内存模型。根据内存模型，定义哪些情况下，哪些指令可以和哪些指令乱序，为了避免乱序，又可以添加哪些指令来避免乱序，这就是内存序。通过对硬件的建模，把复杂的微架构实现剥离出来，得到一个抽象的模型，以分布式系统的理论去研究它的行为。&lt;/p&gt;&lt;h3 id=&#34;sc&#34;&gt;SC&lt;a class=&#34;headerlink&#34; href=&#34;#sc&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;下面来看一个简单的内存模型的例子：假如 CPU 不做任何的乱序，严格按照指令的顺序进行访存；从多核的角度来看，来自不同核心的访存都会到达内存子系统，每个访存都是原子的。那么最后在内存子系统上进行的访存序列，就是各个核心的程序的访存序列交错的结果。举个例子：&lt;/p&gt;&lt;p&gt;A 核心上的程序要进行 Read a（表示读取 a 地址的数据，下面简称 Ra）和 Write a 操作（表示把数据写入 a 地址，下面简称 Wa）；B 核心上的程序要进行 Read b 和 Write b 操作。由于每个核心内部不会对访存进行重排，所以这些访存操作在内存子系统上执行时，会保持它在程序里的执行顺序，这个叫做 program order。由于不同核心发起访存的时间不同，最后在内存子系统上执行的访存可能有这些情况：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ra Wa Rb Wb&lt;/li&gt;&lt;li&gt;Ra Rb Wa Wb&lt;/li&gt;&lt;li&gt;Ra Rb Wb Wa&lt;/li&gt;&lt;li&gt;Rb Ra Wa Wb&lt;/li&gt;&lt;li&gt;Rb Ra Wb Wa&lt;/li&gt;&lt;li&gt;Rb Wb Ra Wa&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可以看到，可能是先完成所有 A 核心上的访存，再完成 B 核心上的访存（Ra Wa Rb Wb），也可能反过来，先完成 B 核心上的访存，再完成 A 核心上的访存（Rb Wb Ra Wa），也可能两个核心的访存交错进行（例如 Ra Rb Wa Wb）。它们都满足一个条件：Ra 一定在 Wa 之前，Rb 一定在 Wb 之前，也就是说，Ra 一定在 Wa 之前的这种 program order 在内存子系统上的执行顺序 memory order 里也一定会保证。&lt;/p&gt;&lt;p&gt;这种内存模型就是 Sequential Consistency (简称 SC)，它的性质就是遵循 program order，从每个核心来看，代码怎么写的就怎么跑，不做重排，而来自不同核心的访存之间的顺序不做要求。下面是 SC 模型的图示（图源 &lt;a href=&#34;https://www.cl.cam.ac.uk/~pes20/ppc-supplemental/test7.pdf&#34;&gt;A Tutorial Introduction to the ARM and POWER Relaxed Memory Model&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../memory_model_and_memory_ordering_sc.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;根据这个性质，我们就可以分析软件的行为，判断它是否可能出现特定的结果。下面举一个例子：&lt;/p&gt;&lt;p&gt;假如有两个线程，A 线程要给 B 线程传输数据，两个线程分别跑在两个核心上。为了传输数据，A 把数据放在内存地址 x 里，为了标记数据准备完成，另外在内存地址 y 放了一个标记，0 表示数据还没准备好，1 表示数据准备好了。那么 A 要传输数据的时候，要做的事情就是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;初始化的时候，往 y 地址写入 0&lt;/li&gt;&lt;li&gt;要传输数据时，先往 x 地址写入要传输的数据，再往 y 地址写入 1&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;另一边，B 线程要等待 A 线程发送的数据，那么它应该：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;读取 y 地址的内容，检查是否为 1&lt;/li&gt;&lt;li&gt;如果是 1，说明传输的数据已经在 x 地址中了，再从 x 地址读取要传输的数据&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;现在问题来了：以上的写法，它可以正常工作吗？我当然可以去各个硬件平台上都测试测试，看看到底能不能工作。但是既然我们已经知道了硬件是按照一定的内存模型实现的，那我们可以尝试，是否可以从内存模型的角度来判断它到底是否可行。&lt;/p&gt;&lt;p&gt;这里我们采用反证法：如果上面的传输数据方法不可行，会出现什么样的结果？那就是 B 读取到了错误的数据，也就是 B 从 x 地址读取数据时，A 还没有来得及往 x 地址写入数据。这可能吗？我们来进行推导：&lt;/p&gt;&lt;p&gt;首先简化一下 A 线程做的操作：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;向 x 地址写入数据，不妨设这个数据是 1，也就是 &lt;code&gt;*x = 1&lt;/code&gt;，记为 Wx1（W 表示 write，后面跟随地址以及写入的数据）&lt;/li&gt;&lt;li&gt;向 y 地址写入 1，表示数据准备完成，也就是 &lt;code&gt;*y = 1&lt;/code&gt;，记为 Wy1&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;接着是 B 线程做的操作，假设出现了错误情况，也就是在 &lt;code&gt;y = 1&lt;/code&gt; 的时候，从 x 读取了错误的数据：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;从 y 地址读取数据，得到了 1，表示数据准备完成，也就是 &lt;code&gt;r1 = *y&lt;/code&gt;，r1 等于 1，记为 Ry1（R 表示 read，后面跟随地址以及读取到的数据）&lt;/li&gt;&lt;li&gt;从 x 地址读取数据，因为前面假设了读取了错误的数据，正确的数据是 1，不妨设错误的数据是 0，也就是 &lt;code&gt;r2 = *x&lt;/code&gt;，r2 等于 0，记为 Rx0&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;接下来证明：在 SC 内存模型下，这种可能性不存在：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在 SC 内存模型下，program order 得到保持，也就是 A 和 B 线程各自的执行顺序是保证的，可知 Wx1 必须出现在 Wy1 之前，Ry1 必须出现在 Rx0 之前，记作 Wx1 -&amp;gt; Wy1，Ry1 -&amp;gt; Rx0&lt;/li&gt;&lt;li&gt;对于 x 地址来说，Wx1 写入了 1，Rx0 读出了 0，说明 Rx0 必须在 Wx1 之前执行，才可能读到 0，即 Rx0 -&amp;gt; Wx1；对于 y 地址来说，Wy1 写入了 1，Ry1 读出了 1，由于 y 地址的初始值是 0，说明 Ry1 必须在 Wy1 之后执行，才可能读到 0，即 Wy1 -&amp;gt; Ry1&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这样我们就得到了四组顺序关系：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Wx1 -&amp;gt; Wy1&lt;/li&gt;&lt;li&gt;Wy1 -&amp;gt; Ry1&lt;/li&gt;&lt;li&gt;Ry1 -&amp;gt; Rx0&lt;/li&gt;&lt;li&gt;Rx0 -&amp;gt; Wx1&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;你会发现这四个操作的顺序关系出现了环，说明不存在一个执行序列，可以同时满足这四组顺序关系。也就说明 SC 内存模型下，不可能得到这个执行结果。通过内存模型，我可以从理论上证明这段代码在 SC 内存模型下是没有问题的，那么这段代码在所有实现了 SC 内存模型的处理器上可以正常工作。&lt;/p&gt;&lt;h3 id=&#34;litmus&#34;&gt;Litmus&lt;a class=&#34;headerlink&#34; href=&#34;#litmus&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;像上面这种来自多线程编程的一个小片段，我们可以从内存模型的角度分析它可能的执行结果，也可以在实际的处理器上运行，这种小片段就叫做 Litmus test，上面看到的这个例子，其实是 Litmus test 当中的 Message Passing 测试（MP）。利用 &lt;a href=&#34;https://github.com/herd/herdtools7&#34;&gt;herd/herdtools7 on GitHub&lt;/a&gt; 工具，我们可以在电脑上实际去运行 Litmus test，观察它的实际运行结果。herdtools7 的安装流程：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;安装 OCaml 工具链（包括 opam），配置 opam&lt;/li&gt;&lt;li&gt;用 opam 安装 herdtools7: &lt;code&gt;opam install herdtools7&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;有了 herdtools7 以后，如果要执行上面的 Message Passing 测试，只需要按照运行如下的命令（以 x86 为例）：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;diycross7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-arch&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;X86&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-name&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;MP-X86&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PodWW&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Rfe&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PodRR&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Fre&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;litmus7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;MP-X86.litmus&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它就会在 x86 机器上运行 MP 测试，运行 1000000 次后，发现没有出现前面所述的读出来 y 等于 1 但是 x 等于 0 的情况。那么上面出现的 &lt;code&gt;PodWW Rfe PodRR Fre&lt;/code&gt; 是什么意思？我们首先来看看生成的 &lt;code&gt;MP-X86.litmus&lt;/code&gt; 文件的内容：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;X86 MP-X86&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;&amp;quot;PodWW Rfe PodRR Fre&amp;quot;&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt;Cycle=Rfe PodRR Fre PodWW&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt;Generator=diycross7 (version 7.56+03)&lt;/span&gt;&lt;span id=&#34;__span-1-5&#34;&gt;&lt;a id=&#34;__codelineno-1-5&#34; name=&#34;__codelineno-1-5&#34; href=&#34;#__codelineno-1-5&#34;&gt;&lt;/a&gt;Prefetch=0:x=F,0:y=W,1:y=F,1:x=T&lt;/span&gt;&lt;span id=&#34;__span-1-6&#34;&gt;&lt;a id=&#34;__codelineno-1-6&#34; name=&#34;__codelineno-1-6&#34; href=&#34;#__codelineno-1-6&#34;&gt;&lt;/a&gt;Com=Rf Fr&lt;/span&gt;&lt;span id=&#34;__span-1-7&#34;&gt;&lt;a id=&#34;__codelineno-1-7&#34; name=&#34;__codelineno-1-7&#34; href=&#34;#__codelineno-1-7&#34;&gt;&lt;/a&gt;Orig=PodWW Rfe PodRR Fre&lt;/span&gt;&lt;span id=&#34;__span-1-8&#34;&gt;&lt;a id=&#34;__codelineno-1-8&#34; name=&#34;__codelineno-1-8&#34; href=&#34;#__codelineno-1-8&#34;&gt;&lt;/a&gt;{&lt;/span&gt;&lt;span id=&#34;__span-1-9&#34;&gt;&lt;a id=&#34;__codelineno-1-9&#34; name=&#34;__codelineno-1-9&#34; href=&#34;#__codelineno-1-9&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;span id=&#34;__span-1-10&#34;&gt;&lt;a id=&#34;__codelineno-1-10&#34; name=&#34;__codelineno-1-10&#34; href=&#34;#__codelineno-1-10&#34;&gt;&lt;/a&gt; P0 | P1 ;&lt;/span&gt;&lt;span id=&#34;__span-1-11&#34;&gt;&lt;a id=&#34;__codelineno-1-11&#34; name=&#34;__codelineno-1-11&#34; href=&#34;#__codelineno-1-11&#34;&gt;&lt;/a&gt; MOV [x],$1 | MOV EAX,[y] ;&lt;/span&gt;&lt;span id=&#34;__span-1-12&#34;&gt;&lt;a id=&#34;__codelineno-1-12&#34; name=&#34;__codelineno-1-12&#34; href=&#34;#__codelineno-1-12&#34;&gt;&lt;/a&gt; MOV [y],$1 | MOV EBX,[x] ;&lt;/span&gt;&lt;span id=&#34;__span-1-13&#34;&gt;&lt;a id=&#34;__codelineno-1-13&#34; name=&#34;__codelineno-1-13&#34; href=&#34;#__codelineno-1-13&#34;&gt;&lt;/a&gt;exists (1:EAX=1 /\ 1:EBX=0)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;忽略开头的部分，直接从 P0 P1 这一行开始看：P0 和 P1 对应两个处理器核心，下面是在这两个核心上要运行的汇编指令：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;P0 上运行：&lt;ul&gt;&lt;li&gt;MOV [x], $1：往 x 地址写入 1，也就是前面说的 &lt;code&gt;*x = 1&lt;/code&gt;, Wx1&lt;/li&gt;&lt;li&gt;MOV [y], $1：往 y 地址写入 1，也就是前面说的 &lt;code&gt;*y = 1&lt;/code&gt;, Wy1&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;P1 上运行：&lt;ul&gt;&lt;li&gt;MOV EAX, [y]：从 y 地址读取数据，保存在 EAX 寄存器，也就是前面说的 &lt;code&gt;r1 = *y&lt;/code&gt;&lt;/li&gt;&lt;li&gt;MOV EBX, [x]：从 x 地址读取数据，保存在 EAX 寄存器，也就是前面说的 &lt;code&gt;r2 = *x&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;正好就是 Message Passing 测试的内容，只不过用汇编完成了实现。最后，它提问：&lt;code&gt;exists (1:EAX=1 /\ 1:EBX=0)&lt;/code&gt;，即是否存在一种可能，P1 的 EAX 寄存器（&lt;code&gt;1:EAX&lt;/code&gt;）等于 1，同时（&lt;code&gt;/\&lt;/code&gt; 表示逻辑与）P1 的 EBX 寄存器（&lt;code&gt;1:EBX&lt;/code&gt;）等于 0？这就是上面提到的错误情况，y 等于 1 但是 x 等于 0。&lt;/p&gt;&lt;p&gt;接下来的 &lt;code&gt;litmus7 MP-X86.litmus&lt;/code&gt; 命令就会在两个核心上运行这段汇编，并且统计最终的执行结果，发现：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-2-1&#34;&gt;&lt;a id=&#34;__codelineno-2-1&#34; name=&#34;__codelineno-2-1&#34; href=&#34;#__codelineno-2-1&#34;&gt;&lt;/a&gt;Histogram (3 states)&lt;/span&gt;&lt;span id=&#34;__span-2-2&#34;&gt;&lt;a id=&#34;__codelineno-2-2&#34; name=&#34;__codelineno-2-2&#34; href=&#34;#__codelineno-2-2&#34;&gt;&lt;/a&gt;500087:&amp;gt;1:EAX=0; 1:EBX=0;&lt;/span&gt;&lt;span id=&#34;__span-2-3&#34;&gt;&lt;a id=&#34;__codelineno-2-3&#34; name=&#34;__codelineno-2-3&#34; href=&#34;#__codelineno-2-3&#34;&gt;&lt;/a&gt;1281 :&amp;gt;1:EAX=0; 1:EBX=1;&lt;/span&gt;&lt;span id=&#34;__span-2-4&#34;&gt;&lt;a id=&#34;__codelineno-2-4&#34; name=&#34;__codelineno-2-4&#34; href=&#34;#__codelineno-2-4&#34;&gt;&lt;/a&gt;498632:&amp;gt;1:EAX=1; 1:EBX=1;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行了 1000000 次，观察到 500087 次 y=1, x=0；1281 次 y=0, x=1；498632 次 y=1, x=1；没有观察到 y=1 &amp;amp;&amp;amp; x=0。也就是没有找到反例。&lt;/p&gt;&lt;p&gt;那么 diycross7 命令是怎么生成这段汇编的呢？答案就在 &lt;code&gt;PodWW Rfe PodRR Fre&lt;/code&gt; 参数当中。它描述的就是我们前面提到的四组顺序关系：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Wx1 -&amp;gt; Wy1: P0 上的 program order&lt;/li&gt;&lt;li&gt;Wy1 -&amp;gt; Ry1: memory 上的写后读&lt;/li&gt;&lt;li&gt;Ry1 -&amp;gt; Rx0: P1 上的 program order&lt;/li&gt;&lt;li&gt;Rx0 -&amp;gt; Wx1: memory 上的读后写&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果这四组顺序关系都得到保证，那么就不存在一个执行序列可以同时满足这四组顺序关系。在 diycross7 的语言里面，我们把这四组顺序关系描述出来：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Wx1 -&amp;gt; Wy1: P0 上的 program order，并且是两个 Write 之间的 program order，所以是 PodWW（Pod = program order，WW = write to write）&lt;/li&gt;&lt;li&gt;Wy1 -&amp;gt; Ry1: memory 上的写后读，并且分别在 P0 和 P1 上执行，所以是 Rfe（Rf = read from，后面的 read 的数据来自前面的 write，箭头从 W 指向 R，e = external，表示读和写在两个核上）&lt;/li&gt;&lt;li&gt;Ry1 -&amp;gt; Rx0: P1 上的 program order，并且是两个 Read 之间的 program order，所以是 PodRR（Pod = program order，RR = read to read）&lt;/li&gt;&lt;li&gt;Rx0 -&amp;gt; Wx1: memory 上的读后写，并且分别在 P1 和 P0 上执行，所以是 Fre（Fr = from read，读在前，写在后，箭头从 R 指向 W，e = external，表示读和写在两个核上）&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;于是我们就用 &lt;code&gt;PodWW Rfe PodRR Fre&lt;/code&gt; 描述了这四组顺序关系，diycross7 工具就根据这四组顺序关系，生成了汇编程序，这个汇编程序会用到这些顺序关系，那么在处理器上执行，就可以判断在处理器的内存模型下，这个环是否可能打破，反例是否可能存在。通过这种描述方法，我们可以设计出各种各样的 Litmus test，测试和分析不同的代码在各种处理器的内存模型下，会有怎样的表现。&lt;/p&gt;&lt;h3 id=&#34;store-buffer&#34;&gt;Store Buffer&lt;a class=&#34;headerlink&#34; href=&#34;#store-buffer&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;暂时先不讲内存模型，先讲讲处理器在访存上的一个重要的优化：Store Buffer。对于乱序执行处理器来说，预测执行是有限度的，因为如果预测错误了，需要回滚到正确的状态，这也意味着，有副作用的指令不能简单地预测执行：例如在一段操作系统内核的代码里，需要根据用户的输入决定电脑要关机还是重启：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-3-1&#34;&gt;&lt;a id=&#34;__codelineno-3-1&#34; name=&#34;__codelineno-3-1&#34; href=&#34;#__codelineno-3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shutdown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-2&#34;&gt;&lt;a id=&#34;__codelineno-3-2&#34; name=&#34;__codelineno-3-2&#34; href=&#34;#__codelineno-3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;do_shutdown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-3&#34;&gt;&lt;a id=&#34;__codelineno-3-3&#34; name=&#34;__codelineno-3-3&#34; href=&#34;#__codelineno-3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-4&#34;&gt;&lt;a id=&#34;__codelineno-3-4&#34; name=&#34;__codelineno-3-4&#34; href=&#34;#__codelineno-3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;do_reboot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-3-5&#34;&gt;&lt;a id=&#34;__codelineno-3-5&#34; name=&#34;__codelineno-3-5&#34; href=&#34;#__codelineno-3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假如处理器实现了分支预测，预测 &lt;code&gt;shutdown == true&lt;/code&gt;，接着预测执行了 &lt;code&gt;do_shutdown&lt;/code&gt;，如果处理器真的预测执行了关机操作，那么电脑就直接关机了，都没有来得及确认是不是要关机。例如实际上可能 &lt;code&gt;shutdown == false&lt;/code&gt;，应该执行的是 &lt;code&gt;do_reboot&lt;/code&gt;，本来是重启的，却变成了关机。所以预测执行遇到这种带有副作用（side effect）的指令，需要单独处理。&lt;/p&gt;&lt;p&gt;一个简单的办法就是要求所有带有副作用的指令顺序执行，只有前面的所有指令执行完了，有副作用的指令才可以执行，因为此时不可能回滚到更早的指令了。但是有副作用的指令很多，通常认为 Store 指令都有副作用，如果考虑到侧信道攻击和安全性，可能连 Load 指令都有副作用，因为它会改变 Cache 的状态；如果要访问外设，那么 Load 和 Store 都有副作用。在乱序处理器上，就是只允许有副作用的指令在 Reorder Buffer（ROB）头部，才可以执行。但如果遇到了缓存缺失，这个时间就会很长，一直堵住 ROB，影响性能。&lt;/p&gt;&lt;p&gt;为了解决这个问题，针对写入内存的 Store 指令，虽然它有副作用，但通常认为缓存写入是不会失败的，所以不用担心写入失败的问题，所以可以把这些 Store 指令放在一个队列里面，这个队列称为 Store Buffer。从 ROB 提交的 Store 指令会放到 Store Buffer 里面，此时可以认为 Store 指令完成了提交，Store 指令从 ROB 中删除，不再堵塞后面的其他指令。Store Buffer 队列里的 Store 指令会按顺序把数据写入缓存，这时候再遇到缓存缺失，影响也比较小。&lt;/p&gt;&lt;p&gt;当然了，由于 Store Buffer 里的数据还没写入缓存，缓存里的数据不一定是最新的，所以后续 Load 指令读取数据时，不仅要从缓存中读取，还要查询 Store Buffer，如果缓存和 Store Buffer 都有数据，要以 Store Buffer 为准。这样实现以后，从单线程程序的角度来看，行为没有变化。但是多线程程序就遇到了一个新问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A 核心向 x 地址写入 1，从 y 地址读取数据&lt;/li&gt;&lt;li&gt;B 核心向 y 地址写入 1，从 x 地址读取数据&lt;/li&gt;&lt;li&gt;A 核心从 y 地址读取数据，因为 A 没有写入 y 地址，所以 A 从缓存中读取 y 地址的数据；同时 B 核心从 x 地址读取数据，同理 B 也从缓存中读取 x 地址的数据&lt;/li&gt;&lt;li&gt;两个核心写入数据的指令进入了各自核心的 Store Buffer，但是还没写入缓存；因此 A 和 B 从缓存中读取的数据都是 0&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;用程序来表达，就是：&lt;/p&gt;&lt;p&gt;A 核心：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Wx1: *x = 1&lt;/li&gt;&lt;li&gt;Ry0: r1 = *y&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;B 核心：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Wy1: *y = 1&lt;/li&gt;&lt;li&gt;Rx0: r2 = *x&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;你可能会想，这怎么可能？明明两边都是先写后读，怎么结果却好像是先读后写？如果我们继续按照 SC 模型的规定来寻找顺序关系：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;program order: Wx1 -&amp;gt; Ry0, Wy1 -&amp;gt; Rx0&lt;/li&gt;&lt;li&gt;coherence：Ry0 -&amp;gt; Wy1，Rx0 -&amp;gt; Wx1&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;出现了环：Wx1 -&amp;gt; Ry0 -&amp;gt; Wy1 -&amp;gt; Rx0 -&amp;gt; Wx1，说明这个结果在 SC 模型下不可能成立。但如果我们在 x86 机器上真的跑一下这个测试：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-4-1&#34;&gt;&lt;a id=&#34;__codelineno-4-1&#34; name=&#34;__codelineno-4-1&#34; href=&#34;#__codelineno-4-1&#34;&gt;&lt;/a&gt;diycross7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-arch&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;X86&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-name&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;SB-X86&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PodWR&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Fre&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PodWR&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Fre&lt;/span&gt;&lt;span id=&#34;__span-4-2&#34;&gt;&lt;a id=&#34;__codelineno-4-2&#34; name=&#34;__codelineno-4-2&#34; href=&#34;#__codelineno-4-2&#34;&gt;&lt;/a&gt;litmus7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;SB-X86.litmus&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;PodWR Fre PodWR Fre&lt;/code&gt; 是这么来的：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Wx1 -&amp;gt; Ry0: PodWR, program order, write to read&lt;/li&gt;&lt;li&gt;Ry0 -&amp;gt; Wy1: Fre, from-read, external&lt;/li&gt;&lt;li&gt;Wy1 -&amp;gt; Rx0: PodWR, program order, write to read&lt;/li&gt;&lt;li&gt;Rx0 -&amp;gt; Wx1: Fre, from-read, external&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;diycross7 命令生成了下面的汇编：&lt;/p&gt;&lt;div class=&#34;language-asm highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-5-1&#34;&gt;&lt;a id=&#34;__codelineno-5-1&#34; name=&#34;__codelineno-5-1&#34; href=&#34;#__codelineno-5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;P0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;P1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-2&#34;&gt;&lt;a id=&#34;__codelineno-5-2&#34; name=&#34;__codelineno-5-2&#34; href=&#34;#__codelineno-5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;MOV&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;MOV&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-3&#34;&gt;&lt;a id=&#34;__codelineno-5-3&#34; name=&#34;__codelineno-5-3&#34; href=&#34;#__codelineno-5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;MOV&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;EAX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;MOV&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;EAX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-5-4&#34;&gt;&lt;a id=&#34;__codelineno-5-4&#34; name=&#34;__codelineno-5-4&#34; href=&#34;#__codelineno-5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;nf&#34;&gt;exists&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;EAX&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/\&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;EAX&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行 litmus7 得到如下的结果：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-6-1&#34;&gt;&lt;a id=&#34;__codelineno-6-1&#34; name=&#34;__codelineno-6-1&#34; href=&#34;#__codelineno-6-1&#34;&gt;&lt;/a&gt;Histogram (4 states)&lt;/span&gt;&lt;span id=&#34;__span-6-2&#34;&gt;&lt;a id=&#34;__codelineno-6-2&#34; name=&#34;__codelineno-6-2&#34; href=&#34;#__codelineno-6-2&#34;&gt;&lt;/a&gt;540 *&amp;gt;0:EAX=0; 1:EAX=0;&lt;/span&gt;&lt;span id=&#34;__span-6-3&#34;&gt;&lt;a id=&#34;__codelineno-6-3&#34; name=&#34;__codelineno-6-3&#34; href=&#34;#__codelineno-6-3&#34;&gt;&lt;/a&gt;499697:&amp;gt;0:EAX=1; 1:EAX=0;&lt;/span&gt;&lt;span id=&#34;__span-6-4&#34;&gt;&lt;a id=&#34;__codelineno-6-4&#34; name=&#34;__codelineno-6-4&#34; href=&#34;#__codelineno-6-4&#34;&gt;&lt;/a&gt;499760:&amp;gt;0:EAX=0; 1:EAX=1;&lt;/span&gt;&lt;span id=&#34;__span-6-5&#34;&gt;&lt;a id=&#34;__codelineno-6-5&#34; name=&#34;__codelineno-6-5&#34; href=&#34;#__codelineno-6-5&#34;&gt;&lt;/a&gt;3 :&amp;gt;0:EAX=1; 1:EAX=1;&lt;/span&gt;&lt;span id=&#34;__span-6-6&#34;&gt;&lt;a id=&#34;__codelineno-6-6&#34; name=&#34;__codelineno-6-6&#34; href=&#34;#__codelineno-6-6&#34;&gt;&lt;/a&gt;Ok&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你会发现在 x86 机器上真的出现了这个结果：从 x 和 y 读出来的数据都是 0。这就说明 x86 机器实现的并不是 SC 的内存模型。在 SC 模型下，这段代码的四个顺序关系成环，使得不存在 x 和 y 读出来都为 0 的情况；现在确实观察到了读出来 x 和 y 都为 0 的情况，说明这个环被断开了，有的边不再成立。&lt;/p&gt;&lt;p&gt;回想前面提到的 Store Buffer 的硬件实现，问题出现在，x 和 y 处于不同的地址，A 核心读取 y 时，直接通过缓存读取数据，此时从缓存的视角来看，先看到了 A 核心读取 y，后看到了 A 核心写入了 x，这和指令的顺序不同。也就是 PodWR（Program order write to read）这条边不再成立了，这种情况下，从核外的视角看，程序的先 Store 后 Load，可能被重排为先 Load 后 Store。这也说明 x86 的处理器做了 Store Buffer 的硬件实现。在优化性能的同时，也切实改变了内存模型。&lt;/p&gt;&lt;h3 id=&#34;x86-tso&#34;&gt;X86-TSO&lt;a class=&#34;headerlink&#34; href=&#34;#x86-tso&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;依托 Store Buffer，我们可以构建出一个新的内存模型：在每个核心和内存子系统之间，多了一个 Store Buffer，Store 指令会先进入 Store Buffer，再进入内存子系统。当 Load 指令和 Store Buffer 中的 Store 指令有数据相关时，会从 Store Buffer 中取数据，如果不相关，或者不完全相关（例如只有一部分重合），则会从内存子系统中取数据，此时从内存子系统的角度来看，就发生了 Load 提前于 Store 执行的重排。这个模型被称为 &lt;a href=&#34;https://dl.acm.org/doi/10.1145/1785414.1785443&#34;&gt;X86-TSO&lt;/a&gt;（图源 &lt;a href=&#34;https://link.springer.com/book/10.1007/978-3-031-01764-3&#34;&gt;A Primer on Memory Consistency and Cache Coherence, Second Edition&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../memory_model_and_memory_ordering_x86_tso.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;需要注意的是，X86-TSO 模型是在 &lt;a href=&#34;https://dl.acm.org/doi/10.1145/1785414.1785443&#34;&gt;2010 年的论文 x86-TSO: a rigorous and usable programmer&#39;s model for x86 multiprocessors&lt;/a&gt;中由学术界对现有 x86 处理器的内存模型的总结，但 Intel 和 AMD 在他们的文档中没有直接采用这个模型，而是给出了各种各样的规则。但实践中，可以认为 x86 处理器用的就是这个模型，从各自 litmus 测试中，也没有发现理论和实际不一致的地方。&lt;/p&gt;&lt;p&gt;这里的 TSO 的全称是 Total Store Order，意思是针对 Store 指令（只有离开 Store Buffer 进入缓存的才算），有一个全局的顺序。内存子系统会处理来自不同核心的 Store，但会保证 Store 有一个先后顺序，并且所有核心会看到同一个顺序。这个概念有些时候还会被称为 Multi-copy Atomic，字面意思是当一个 Store 被其他核心看到时，所有核心都会“同时”看到，不会说一部分核先看到，另一部分核后看到。&lt;/p&gt;&lt;p&gt;从 TSO 的字面意思来说，并没有提到 Load 可以被重排到 Store 之前，是 X86 的 TSO 实现了这种重排。不过平常也不会专门去区分这件事情，提到 TSO，大家想到的都是 X86 的 TSO，也就是 X86-TSO 模型。&lt;/p&gt;&lt;p&gt;总结一下，X86-TSO 模型的规定就是如下几点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Total Store Order：所有核心会观察到相同的全局的 Store 顺序&lt;/li&gt;&lt;li&gt;Load 可以被重排到 Store 之前&lt;/li&gt;&lt;li&gt;Load 会从 Store Buffer 和缓存两个地方取数据&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;对比 SC 和 X86-TSO 模型：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;X86-TSO 模型允许 Load 被重排到 Store 之前&lt;/li&gt;&lt;li&gt;Store Buffer 测试下，SC 禁止重排，X86-TSO 允许重排&lt;/li&gt;&lt;li&gt;Message Passing 测试下，SC 和 X86-TSO 都禁止重排&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;weakrelaxed-memory-model&#34;&gt;Weak/Relaxed Memory Model&lt;a class=&#34;headerlink&#34; href=&#34;#weakrelaxed-memory-model&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在 X86 以外的指令集架构，经常可以看到另外一种内存模型，一般称为 Weak Memory Model 或者 Relaxed Memory Model。怎么个 Weak 法呢？就是硬件想重排就重排，当然了，是在保证核内视角正确的前提下。回想前面 SC 模型和 X86-TSO 模型，它们对于 Load 和 Store 之间重排的要求是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;先 Load 后 Load：SC 和 X86-TSO 不允许重排&lt;/li&gt;&lt;li&gt;先 Load 后 Store：SC 和 X86-TSO 不允许重排&lt;/li&gt;&lt;li&gt;先 Store 后 Load：SC 不允许重排，X86-TSO 允许重排&lt;/li&gt;&lt;li&gt;先 Store 后 Store：SC 和 X86-TSO 不允许重排&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;既然 Weak 了，那就自由到底：全都允许重排。如果用户不想重排，那再加合适的 fence 或 barrier 指令，阻止不想要的重排。在这个内存模型下，每个核心可以在向内存子系统读写前，对自己的读写进行重排（图源 &lt;a href=&#34;https://link.springer.com/book/10.1007/978-3-031-01764-3&#34;&gt;A Primer on Memory Consistency and Cache Coherence, Second Edition&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../memory_model_and_memory_ordering_weak.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;这意味着什么呢？前面出现过 Message Passing 的例子，结论是 MP 测试的情况在 SC 和 X86-TSO 场景下都被禁止。但如果我们在一个具有 Weak Memory Model 的机器上运行：&lt;/p&gt;&lt;div class=&#34;language-shell highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-7-1&#34;&gt;&lt;a id=&#34;__codelineno-7-1&#34; name=&#34;__codelineno-7-1&#34; href=&#34;#__codelineno-7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# P0:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-2&#34;&gt;&lt;a id=&#34;__codelineno-7-2&#34; name=&#34;__codelineno-7-2&#34; href=&#34;#__codelineno-7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# 1. Wx1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-3&#34;&gt;&lt;a id=&#34;__codelineno-7-3&#34; name=&#34;__codelineno-7-3&#34; href=&#34;#__codelineno-7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# 2. Wy1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-4&#34;&gt;&lt;a id=&#34;__codelineno-7-4&#34; name=&#34;__codelineno-7-4&#34; href=&#34;#__codelineno-7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# P1:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-5&#34;&gt;&lt;a id=&#34;__codelineno-7-5&#34; name=&#34;__codelineno-7-5&#34; href=&#34;#__codelineno-7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# 1. Ry1&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-6&#34;&gt;&lt;a id=&#34;__codelineno-7-6&#34; name=&#34;__codelineno-7-6&#34; href=&#34;#__codelineno-7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# 2. Rx0&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-7&#34;&gt;&lt;a id=&#34;__codelineno-7-7&#34; name=&#34;__codelineno-7-7&#34; href=&#34;#__codelineno-7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# orders:&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-8&#34;&gt;&lt;a id=&#34;__codelineno-7-8&#34; name=&#34;__codelineno-7-8&#34; href=&#34;#__codelineno-7-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Wx1 -&amp;gt; Wy1: PodWW&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-9&#34;&gt;&lt;a id=&#34;__codelineno-7-9&#34; name=&#34;__codelineno-7-9&#34; href=&#34;#__codelineno-7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Wy1 -&amp;gt; Ry1: Rfe&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-10&#34;&gt;&lt;a id=&#34;__codelineno-7-10&#34; name=&#34;__codelineno-7-10&#34; href=&#34;#__codelineno-7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Ry1 -&amp;gt; Rx0: PodRR&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-11&#34;&gt;&lt;a id=&#34;__codelineno-7-11&#34; name=&#34;__codelineno-7-11&#34; href=&#34;#__codelineno-7-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;c1&#34;&gt;# Rx0 -&amp;gt; Wx1: Fre&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-7-12&#34;&gt;&lt;a id=&#34;__codelineno-7-12&#34; name=&#34;__codelineno-7-12&#34; href=&#34;#__codelineno-7-12&#34;&gt;&lt;/a&gt;diycross7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-arch&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;AArch64&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-name&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;MP-AArch64&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PodWW&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Rfe&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;PodRR&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Fre&lt;/span&gt;&lt;span id=&#34;__span-7-13&#34;&gt;&lt;a id=&#34;__codelineno-7-13&#34; name=&#34;__codelineno-7-13&#34; href=&#34;#__codelineno-7-13&#34;&gt;&lt;/a&gt;litmus7&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;MP-AArch64.litmus&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# MP = Message Passing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会发现虽然概率比较低，但确实会出现 y=1，x=0 的情况：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-8-1&#34;&gt;&lt;a id=&#34;__codelineno-8-1&#34; name=&#34;__codelineno-8-1&#34; href=&#34;#__codelineno-8-1&#34;&gt;&lt;/a&gt;Histogram (4 states)&lt;/span&gt;&lt;span id=&#34;__span-8-2&#34;&gt;&lt;a id=&#34;__codelineno-8-2&#34; name=&#34;__codelineno-8-2&#34; href=&#34;#__codelineno-8-2&#34;&gt;&lt;/a&gt;500000:&amp;gt;1:X1=0; 1:X3=0;&lt;/span&gt;&lt;span id=&#34;__span-8-3&#34;&gt;&lt;a id=&#34;__codelineno-8-3&#34; name=&#34;__codelineno-8-3&#34; href=&#34;#__codelineno-8-3&#34;&gt;&lt;/a&gt;1 *&amp;gt;1:X1=1; 1:X3=0;&lt;/span&gt;&lt;span id=&#34;__span-8-4&#34;&gt;&lt;a id=&#34;__codelineno-8-4&#34; name=&#34;__codelineno-8-4&#34; href=&#34;#__codelineno-8-4&#34;&gt;&lt;/a&gt;1 :&amp;gt;1:X1=0; 1:X3=1;&lt;/span&gt;&lt;span id=&#34;__span-8-5&#34;&gt;&lt;a id=&#34;__codelineno-8-5&#34; name=&#34;__codelineno-8-5&#34; href=&#34;#__codelineno-8-5&#34;&gt;&lt;/a&gt;499998:&amp;gt;1:X1=1; 1:X3=1;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;既然在实际的 ARM 机器上测出来这种情况，说明 PodWW 或者 PodRR 至少有一个出现了重排，打破了环。&lt;/p&gt;&lt;p&gt;更进一步，SC 和 X86-TSO 都要求有 Total Store Order（Multi-copy Atomic）：所有核心会看到统一的 Store 顺序。有要求，就可以舍弃，部分 Weak Memory Model 也不要求这一点，这个时候，内存模型就好像每个核心都有自己的一份内存，这些内存之间会互相传播 Store 以保证缓存一致性，但是有的核心可能先看到，有的核心可能后看到（图源 &lt;a href=&#34;https://www.cl.cam.ac.uk/~pes20/ppc-supplemental/test7.pdf&#34;&gt;A Tutorial Introduction to the ARM and POWER Relaxed Memory Model&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../memory_model_and_memory_ordering_weak_2.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;这一点可以在 IRIW（全称 Independent Read of Independent Write；准确地说，为了排除 PodRR 重排的情况，要用 IRIW+addrs 或者加 barrier）Litmus 测试中看到。简单来说，IRIW 测试中，有两个核心负责写入，另外两个核心负责读，如果这两个负责读的核心观察到了不同的写入顺序，说明没有 Total Store Order（Multi-copy Atomic）：写入传播到不同核心的顺序可能打乱。&lt;/p&gt;&lt;h2 id=&#34;内存序&#34;&gt;内存序&lt;a class=&#34;headerlink&#34; href=&#34;#内存序&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;指令集&#34;&gt;指令集&lt;a class=&#34;headerlink&#34; href=&#34;#指令集&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;既然 X86-TSO 已经出现了一种可能的重排情况：Load 被重排到 Store 之前，假如我们不希望出现这种重排，怎么办？各个指令集都提供了一些 fence 或者 barrier 指令，可以阻止各种类型的重排。以 x86 为例：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;sfence: store fence，保证 sfence 之前的 store 都完成（globally visible，得写到缓存里才算）之后，才开始 sfence 之后的 store&lt;/li&gt;&lt;li&gt;lfence: load fence，保证 lfence 之前的 load 都完成（globally visible）之后，才开始 lfence 之后的 load&lt;/li&gt;&lt;li&gt;mfence: memory fence, 保证 mfence 之前的 load 和 store 都完成（globally visible）之后，才开始 mfence 之后的 load 和 store&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这其中常用的其实就是 mfence：前面提到 X86-TSO 允许 Load 被重排到 Store 之前，为了阻止这一点，lfence 和 sfence 都不够，因为 lfence 管的是 Load 被重排到 Load 之前，sfence 管的是 Store 被重排到 Store 之前。mfence 则可以：在 Store 后面紧挨着一条 mfence 指令，那么 mfence 之后的 Load 指令就无法被重排到 Store 之前：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;store&lt;/li&gt;&lt;li&gt;mfence&lt;/li&gt;&lt;li&gt;load&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;所以如果要在 x86 上运行按照 SC 内存模型编写的程序，为了保证正确性，需要在每个 Store 后面加一条 mfence 指令。&lt;/p&gt;&lt;p&gt;再来看看对于 ARMv8 这种具有 Weak/Relaxed Memory Model 的架构，指令集提供了哪些指令来避免重排：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;DMB：相当于 x86 的 mfence，保证 DMB 后的 Load 和 Store 不会重排到 DMB 之前，DMB 前的 Load 和 Store 也不会重排到 DMB 之后&lt;/li&gt;&lt;li&gt;Load Acquire：对 Load 指令添加 Acquire 语义，保证 Load Acquire 之后的 Load/Store 不会被重排到 Load Acquire 之前&lt;/li&gt;&lt;li&gt;Store Release：对 Release 指令添加 Release 语义，保证 Store Release 之前的 Load/Store 不会被重排到 Store Release 之后&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;看到 Acquire 和 Release，你可能会觉得这个说法有点熟悉：在锁里面，获得锁可以说 Lock 或者说 Acquire；释放锁可以说 Unlock 或者说 Release。事实上，Load Acquire 和 Store Release 正好就可以用在 Lock 和 Unlock 的场合：&lt;/p&gt;&lt;div class=&#34;language-c highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-9-1&#34;&gt;&lt;a id=&#34;__codelineno-9-1&#34; name=&#34;__codelineno-9-1&#34; href=&#34;#__codelineno-9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Load Acquire&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-2&#34;&gt;&lt;a id=&#34;__codelineno-9-2&#34; name=&#34;__codelineno-9-2&#34; href=&#34;#__codelineno-9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span id=&#34;__span-9-3&#34;&gt;&lt;a id=&#34;__codelineno-9-3&#34; name=&#34;__codelineno-9-3&#34; href=&#34;#__codelineno-9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;n&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Store Release&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在临界区中读取 x，肯定希望是在持有锁的前提下进行 Load，也就是说 Load x 不能被重排到 &lt;code&gt;lock()&lt;/code&gt; 之前，也不能被重排到 &lt;code&gt;unlock()&lt;/code&gt; 之后；同理在临界区中写入 y，肯定也是希望在持有锁的前提下进行 Store，也就是说 Store y 不能被重排到 &lt;code&gt;lock()&lt;/code&gt; 之前或 &lt;code&gt;unlock()&lt;/code&gt; 之后。为了避免这个重排，在一头一尾分别加上 Acquire 和 Release 标记，就可以保证临界区内的 Load/Store 都是在持有锁的情况下进行。&lt;/p&gt;&lt;p&gt;除了锁以外，这个模式也可以用来实现正确的 Message Passing，原来的 Message Passing 实现是：&lt;/p&gt;&lt;p&gt;P0:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;*x = 1&lt;/li&gt;&lt;li&gt;*y = 1&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;P1:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;r1 = *y&lt;/li&gt;&lt;li&gt;r2 = *x&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这里会有 Store-Store 重排以及 Load-Load 重排的风险，加上 Load Acquire 和 Store Release 以后：&lt;/p&gt;&lt;p&gt;P0:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;*x = 1&lt;/li&gt;&lt;li&gt;*y = 1 (Store Release)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;P1:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;r1 = *y (Load Acquire)&lt;/li&gt;&lt;li&gt;r2 = *x&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这样就避免了重排，P1 可以观察到正确的结果。&lt;/p&gt;&lt;p&gt;此外，Acquire 和 Release 标记也可以添加到原子指令上，毕竟原子指令其实就是 Load + Store。相比 Fence，Acquire 和 Release 是单向的，只影响前面的指令，或者只影响后面的指令，而 Fence 通常是两个方向都阻止，不许前面的排到后面，也不许后面的排到前面。&lt;/p&gt;&lt;h3 id=&#34;软件&#34;&gt;软件&lt;a class=&#34;headerlink&#34; href=&#34;#软件&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;从上面的分析可见，不同的处理器和指令集使用了不同的内存模型，提供了不同的指令来控制乱序重排，但是对于软件开发者来说，会希望尽量用一套通用的 API 来控制乱序重排，可以兼容各种指令集，不用去记忆每个处理器用的是什么内存模型，不用去知道哪些指令可以用来解决哪些重排。&lt;/p&gt;&lt;p&gt;这个 API 在很多编程语言中都有，C 的 stdatomic.h，C++ 的 std::memory_order，Rust 的 std::sync::atomic::Ordering 等等。它们对各种处理器的内存序进行了进一步的抽象，并且在编译的时候，由编译器或标准库把这些抽象的内存序翻译成实际的指令。以 C++ 的抽象为例，有如下几种内存序（图源 &lt;a href=&#34;https://en.cppreference.com/w/cpp/atomic/memory_order&#34;&gt;cppreference&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../memory_model_and_memory_ordering_order.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;其中比较重要的 acquire 和 release，其实就是上面提到的 Load Acquire 和 Store Release。最后的 seq_cst，就对应了 Sequential Consistency（SC）模型，要模拟 SC 模型的行为。&lt;/p&gt;&lt;p&gt;由于 C++ 可以被编译到不同的指令集架构，所以这些 memory order 在编译的时候，会变成对应的指令，也可能由于内存模型保证了不出现对应的乱序，不需要生成额外的指令。以 X86 为例子：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Load Acquire：防止 Load 之后的 Load/Store 指令被重排到 Load 之前，因为 X86-TSO 阻止了 Load-Load 和 Load-Store（先 Load 后 Store）重排，所以不需要额外的指令&lt;/li&gt;&lt;li&gt;Store Release：防止 Store 之前的 Load/Store 指令被重排到 Store 之后，因为 X86-TSO 阻止了 Load-Store 和 Store-Store 重排，所以不需要额外的指令&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;完整的对应关系，建议阅读 &lt;a href=&#34;https://www.cl.cam.ac.uk/~pes20/cpp/cpp0xmappings.html&#34;&gt;C/C++11 mappings to processors&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;编译器的优化可能会对内存序产生一些意料之外的影响，推荐阅读 Linux 内核的 &lt;a href=&#34;https://www.kernel.org/doc/Documentation/memory-barriers.txt&#34;&gt;LINUX KERNEL MEMORY BARRIERS&lt;/a&gt; 文档。&lt;/p&gt;&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;a class=&#34;headerlink&#34; href=&#34;#参考文献&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.cl.cam.ac.uk/~pes20/ppc-supplemental/test7.pdf&#34;&gt;A Tutorial Introduction to the ARM and POWER Relaxed Memory Model&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.cl.cam.ac.uk/~pes20/weakmemory/x86tso-paper.tphols.pdf&#34;&gt;A Better x86 Memory Model: x86-TSO&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/hwmm&#34;&gt;Hardware Memory Models - Russ Cox&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/herd/herdtools7&#34;&gt;herd/herdtools7 on GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://link.springer.com/book/10.1007/978-3-031-01764-3&#34;&gt;A Primer on Memory Consistency and Cache Coherence, Second Edition&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/generate-litmus-tests-automatically-diy7-tool&#34;&gt;How to generate litmus tests automatically with the diy7 tool&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/hardware/2024/09/04/memory_model_and_memory_ordering/</link> <pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/09/04/memory_model_and_memory_ordering/</guid> </item> <item> <title>Qualcomm Oryon 微架构评测</title> <category>cpu</category> <category>hardware</category> <category>oryon</category> <category>performance</category> <category>qualcomm</category> <category>uarch-review</category> <category>xelite</category> <description>&lt;h1 id=&#34;qualcomm-oryon-微架构评测&#34;&gt;Qualcomm Oryon 微架构评测&lt;a class=&#34;headerlink&#34; href=&#34;#qualcomm-oryon-微架构评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;a class=&#34;headerlink&#34; href=&#34;#背景&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;最近借到一台 Surface Laptop 7 可以拿来折腾，它用的是高通 Snapdragon X Elite 处理器，借此机会测试一下这个微架构在各个方面的表现。&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;官方信息&#34;&gt;官方信息&lt;a class=&#34;headerlink&#34; href=&#34;#官方信息&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;高通关于 Oryon 微架构有两个 slides，内容可以在以下的链接中看到：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.anandtech.com/show/21445/qualcomm-snapdragon-x-architecture-deep-dive/2&#34;&gt;The Qualcomm Snapdragon X Architecture Deep Dive: Getting To Know Oryon and Adreno X1 - Anandtech&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://hc2024.hotchips.org/assets/program/conference/day1/25_HC2024.Qualcomm.GWilliams.pdf&#34;&gt;Hot Chips 2024: Qualcomm’s Oryon Core&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2024/08/26/hot-chips-2024-qualcomms-oryon-core/&#34;&gt;Hot Chips 2024: Qualcomm’s Oryon Core - Chips and Cheese&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;两次内容大体一致，Hot Chips 2024 的内容更加详细，但也出现了一些前后矛盾的地方。&lt;/p&gt;&lt;h2 id=&#34;现有评测&#34;&gt;现有评测&lt;a class=&#34;headerlink&#34; href=&#34;#现有评测&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;网上已经有较多针对 Oryon 微架构的评测和分析，建议阅读：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/704707254&#34;&gt;高通 X Elite Oryon 微架构评测：走走停停&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2024/07/09/qualcomms-oryon-core-a-long-time-in-the-making/&#34;&gt;Qualcomm’s Oryon Core: A Long Time in the Making&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://chipsandcheese.com/2024/05/15/qualcomms-oryon-llvm-patches/&#34;&gt;Qualcomm’s Oryon LLVM Patches&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Ue41197Qb/&#34;&gt;高通自研 PC 芯片 X Elite 实测：真能干翻苹果英特尔？&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1z1421r7dZ/&#34;&gt;太贵了，它没你想的那么美好！高通骁龙 X Elite 78-100 笔记本详细评测&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.qualcomm.com/products/mobile/snapdragon/laptops-and-tablets/snapdragon-x-elite&#34;&gt;Snapdragon X Elite&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.qualcomm.com/products/technology/processors/oryon&#34;&gt;Qualcomm Oryon CPU&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面分各个模块分别记录官方提供的信息，以及实测的结果。读者可以对照已有的第三方评测理解。官方信息与实测结果一致的数据会加粗。&lt;/p&gt;&lt;h2 id=&#34;benchmark&#34;&gt;Benchmark&lt;a class=&#34;headerlink&#34; href=&#34;#benchmark&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Qualcomm Oryon 的性能测试结果见 &lt;a href=&#34;../../../../../benchmark/&#34;&gt;SPEC&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&#34;环境准备&#34;&gt;环境准备&lt;a class=&#34;headerlink&#34; href=&#34;#环境准备&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Surface Laptop 7 预装的是 Windows on ARM，并不适合进行测试。因此，我在它上面自己装了一个裸机的 Linux 系统，目前网上已经有比较多相关的教程以及安装镜像了。&lt;/p&gt;&lt;h2 id=&#34;前端&#34;&gt;前端&lt;a class=&#34;headerlink&#34; href=&#34;#前端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;取指&#34;&gt;取指&lt;a class=&#34;headerlink&#34; href=&#34;#取指&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：取指可以达到每周期最多 &lt;strong&gt;16&lt;/strong&gt; 指令&lt;/p&gt;&lt;p&gt;为了测试实际的 Fetch 宽度，参考 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/720136752&#34;&gt;如何测量真正的取指带宽（I-fetch width） - JamesAslan&lt;/a&gt; 构造了测试。&lt;/p&gt;&lt;p&gt;其原理是当 Fetch 要跨页的时候，由于两个相邻页可能映射到不同的物理地址，如果要支持单周期跨页取指，需要查询两次 ITLB，或者 ITLB 需要把相邻两个页的映射存在一起。这个场景一般比较少，处理器很少会针对这种特殊情况做优化，但也不是没有。经过测试，把循环放在两个页的边界上，发现 Oryon 微架构遇到跨页的取指时确实会拆成两个周期来进行。在此基础上，构造一个循环，循环的第一条指令放在第一个页的最后四个字节，其余指令放第二个页上，那么每次循环的取指时间，就是一个周期（读取第一个页内的指令）加上第二个页内指令需要 Fetch 的周期数，多的这一个周期就足以把 Fetch 宽度从后端限制中区分开，实验结果如下：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_if_width.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;图中蓝线（cross-page）表示的就是上面所述的第一条指令放一个页，其余指令放第二个页的情况，横坐标是第二个页内的指令数，那么一次循环的指令数等于横坐标 +1。纵坐标是运行很多次循环的总 cycle 数除以循环次数，也就是平均每次循环耗费的周期数。可以看到每 16 条指令会多一个周期，因此 Oryon 的前端取指宽度确实是 16 条指令。&lt;/p&gt;&lt;p&gt;为了确认这个瓶颈是由取指造成的，又构造了一组实验，把循环的所有指令都放到一个页中，这个时候 Fetch 不再成为瓶颈（图中 aligned），两个曲线的对比可以明确地得出上述结论。&lt;/p&gt;&lt;h3 id=&#34;l1-icache&#34;&gt;L1 ICache&lt;a class=&#34;headerlink&#34; href=&#34;#l1-icache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;192KB&lt;/strong&gt; &lt;strong&gt;6-way&lt;/strong&gt; L1 ICache&lt;/p&gt;&lt;p&gt;为了测试 L1 ICache 容量，构造一个具有巨大指令 footprint 的循环，由大量的 nop 和最后的分支指令组成。观察在不同 footprint 大小下的 IPC：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_fetch_bandwidth.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 footprint 在 192 KB 之前时可以达到 8 IPC，之后则快速降到 2 IPC，这里的 192 KB 就对应了 L1 ICache 的容量。虽然 Fetch 可以每周期 16 条指令，也就是一条 64B 的缓存行，由于后端的限制，只能观察到 8 的 IPC。&lt;/p&gt;&lt;h3 id=&#34;l1-itlb&#34;&gt;L1 ITLB&lt;a class=&#34;headerlink&#34; href=&#34;#l1-itlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;256-entry&lt;/strong&gt; &lt;strong&gt;8-way&lt;/strong&gt; L1 ITLB，支持 4KB 和 64KB 的页表大小&lt;/p&gt;&lt;p&gt;构造一系列的 B 指令，使得 B 指令分布在不同的 page 上，使得 ITLB 成为瓶颈：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_itlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 256 Page 出现了明显的拐点，对应的就是 256 的 L1 ITLB 容量。注意要避免 ICache 和 BTB 的容量成为瓶颈，把 B 指令分布在不同的 Cache Line 和 BTB entry 上。&lt;/p&gt;&lt;p&gt;如果每两个 page 放一条 B 指令，容量减小到 128 Page；进一步把 B 指令放得更加稀疏，最终在每 32 个 page 放一条 B 指令时，容量减到 8 Page，之后不再减小。说明 L1 ITLB 是 32 Set 8 Way，Index 是 PC[16:12]。这是页表大小为 4KB 的情况，64KB 没有测试，预计是类似的。&lt;/p&gt;&lt;h3 id=&#34;decode&#34;&gt;Decode&lt;a class=&#34;headerlink&#34; href=&#34;#decode&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：8 inst/cycle decoded&lt;/p&gt;&lt;h3 id=&#34;return-stack&#34;&gt;Return Stack&lt;a class=&#34;headerlink&#34; href=&#34;#return-stack&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;50-entry&lt;/strong&gt; return stack&lt;/p&gt;&lt;p&gt;构造不同深度的调用链，测试每次调用花费的平均时间，得到下面的图：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_rs.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到调用链深度为 50 时性能突然变差，因此 Return Stack 深度为 50。&lt;/p&gt;&lt;h3 id=&#34;branch-predictor&#34;&gt;Branch Predictor&lt;a class=&#34;headerlink&#34; href=&#34;#branch-predictor&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：80KB Conditional Predictor, 40KB Indirect Predictor&lt;/p&gt;&lt;h3 id=&#34;btb&#34;&gt;BTB&lt;a class=&#34;headerlink&#34; href=&#34;#btb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;strong&gt;2K+&lt;/strong&gt; entry BTB&lt;/p&gt;&lt;p&gt;构造大量的无条件分支指令（B 指令），BTB 需要记录这些指令的目的地址，那么如果分支数量超过了 BTB 的容量，性能会出现明显下降。当把大量 B 指令紧密放置，也就是每 4 字节一条 B 指令时：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_btb_4b.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可见在 2048 个分支之内可以达到 1 的 CPI，超过 2048 个分支，出现了 3 CPI 的平台，一直延续到 32768 个分支或更多。超出 BTB 容量以后，分支预测时，无法从 BTB 中得到哪些指令是分支指令的信息，只能等到取指甚至译码后才能后知后觉地发现这是一条分支指令，这样就出现了性能损失，出现了 3 CPI 的情况。&lt;/p&gt;&lt;p&gt;降低分支指令的密度，在 B 指令之间插入 NOP 指令，使得每 8 个字节有一条 B 指令，得到如下结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_btb_8b.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 CPI=1 的拐点前移到 1024 个分支，同时 CPI=3 的平台也出现了新的拐点，在 16384 和 32768 之间。拐点的前移，意味着 BTB 采用了组相连的结构，当 B 指令的 PC 的部分低位总是为 0 时，组相连的 Index 可能无法取到所有的 Set，导致表现出来的 BTB 容量只有部分 Set，例如此处容量减半，说明只有一半的 Set 被用到了。&lt;/p&gt;&lt;p&gt;出现新的拐点，对应的是指令 footprint 超出 L1 ICache 的情况：L1 ICache 是 192KB，按照每 8 字节一个 B 指令计算，最多可以存放 24576 条 B 指令，这个值正好处在 16384 和 32768 之间，和拐点吻合。&lt;/p&gt;&lt;p&gt;如果进一步降低 B 指令的密度，使得它的低若干位都等于 0，最终 CPI=1 的拐点定格在 2 条分支，CPI=3/3.5 的拐点定格在 6 条分支。根据这个信息，认为 BTB 是 1024 Set 2 Way 的结构，Index 是 PC[11:2]；同时也侧面佐证了 192KB L1 ICache 是 512 Set 6 Way，Index 是 PC[14:6]。不过考虑到 Oryon 支持跨 64B 边界访存，实际的 L1 ICache 大概率是分 bank 的，这样才能在保持单读口的情况下，一个周期从连续的两个 Cache Line 中取指令。&lt;/p&gt;&lt;p&gt;小结：BTB 容量为 2048 项，采用 2 路组相连方式，当所有分支命中 BTB 时，可以达到 1 CPI；如果超出了 BTB 容量，但没有超出 L1 ICache 容量，可以达到 3 CPI。&lt;/p&gt;&lt;h3 id=&#34;branch-mispredict-latency&#34;&gt;Branch Mispredict Latency&lt;a class=&#34;headerlink&#34; href=&#34;#branch-mispredict-latency&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：13 cycle Branch Mispredict Latency&lt;/p&gt;&lt;h2 id=&#34;后端&#34;&gt;后端&lt;a class=&#34;headerlink&#34; href=&#34;#后端&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;物理寄存器堆&#34;&gt;物理寄存器堆&lt;a class=&#34;headerlink&#34; href=&#34;#物理寄存器堆&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：400+ registers Integer pool, 400+ registers Vector pool&lt;/p&gt;&lt;p&gt;为了测试物理寄存器堆的大小，一般会用两个依赖链很长的操作放在开头和结尾，中间填入若干个无关的指令，并且用这些指令来耗费物理寄存器堆。测试结果见下图：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_prf.png&#34; /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;32b/64b int：测试 32/64 位整数寄存器的数量，拐点在 362-374&lt;/li&gt;&lt;li&gt;fp：测试浮点寄存器的数量，拐点在 362-372&lt;/li&gt;&lt;li&gt;flags：测试 NZCV 寄存器的数量，拐点在 119-126&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可见整数和浮点数都能提供大约 360+ 个寄存器用于乱序执行，加上用于保存架构寄存器的至少 32 个寄存器，加起来和高通宣称的 400+ 是比较一致的。整数和浮点个数测出来一样，可能是这两个寄存器堆大小一样，也可能是整数和浮点放同一个寄存器堆中。经过混合整数和浮点指令测试，认为这两个寄存器堆并不共享，只是数量差不多。&lt;/p&gt;&lt;p&gt;NZCV 重命名则比整数寄存器少得多，只有 120+，也是考虑到 ARMv8 指令集大部分指令不像 X86 那样会修改 NZCV。&lt;/p&gt;&lt;h3 id=&#34;reservation-stations&#34;&gt;Reservation Stations&lt;a class=&#34;headerlink&#34; href=&#34;#reservation-stations&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;IXU 6-wide 64-bit, each with 20 entry queue&lt;/li&gt;&lt;li&gt;VXU 4-wide 128-bit, each with 48 entry queue&lt;/li&gt;&lt;li&gt;LSU 4-wide 128-bit, each with 16 entry queue (注：Hot Chips 上的 Slides 写的是四个 64-entry，出现了不一致)&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;执行单元&#34;&gt;执行单元&lt;a class=&#34;headerlink&#34; href=&#34;#执行单元&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Up to &lt;strong&gt;6&lt;/strong&gt; ALU/cycle&lt;/li&gt;&lt;li&gt;Up to &lt;strong&gt;2&lt;/strong&gt; Branch/cycle&lt;/li&gt;&lt;li&gt;Up to &lt;strong&gt;2&lt;/strong&gt; multiply/MLA per cycle&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在循环中重复下列指令多次，测量 CPI，得到如下结果：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;add x0, x0, 1&lt;/code&gt;：CPI = 6.0，说明可以 6 ALU/cycle&lt;/li&gt;&lt;li&gt;&lt;code&gt;cbnz xzr, target;target:&lt;/code&gt;：CPI = 2.0，说明可以 2 Branch/cycle，注意这里是 not taken 分支&lt;/li&gt;&lt;li&gt;&lt;code&gt;mul x0, x1, x2&lt;/code&gt;：CPI = 2.0，说明可以 2 Multiply/cycle&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;reorder-buffer&#34;&gt;Reorder Buffer&lt;a class=&#34;headerlink&#34; href=&#34;#reorder-buffer&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Retirement 8 uOps/cycle&lt;/li&gt;&lt;li&gt;Reorder Buffer is 650+ uOps&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为了测试 ROB 的大小，设计了一个循环，循环开始是 8 条串行的 fsqrt 指令，每条指令需要 13 个周期，由于数据依赖，一共需要 8*13=104 个周期完成。之后是若干条 NOP 指令，当 NOP 指令比较少时，循环的时候取决于 fsqrt 指令的时间，一次循环大约需要 104 个周期；当 NOP 指令数量过多，填满了 ROB 以后，就会导致 ROB 无法保存下一次循环的 fsqrt 指令，性能出现下降。测试结果如下：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_rob.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;当 NOP 数量达到 676 时，性能开始急剧下滑，而执行 676 条 NOP 只需要 676/8=84.5 个周期，小于 104 个周期，说明瓶颈不在执行 NOP 上，而是因为 ROB 被填满，导致后续的 fsqrt 指令无法及时执行。因此认为 Oryon 的 ROB 大小在 680+。&lt;/p&gt;&lt;p&gt;没有观察到类似 Firestorm 的 Coalesced ROB 的设计。&lt;/p&gt;&lt;h3 id=&#34;load-store-unit--l1-dcache&#34;&gt;Load Store Unit + L1 DCache&lt;a class=&#34;headerlink&#34; href=&#34;#load-store-unit--l1-dcache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;96KB&lt;/strong&gt; 6-way L1 DCache&lt;/li&gt;&lt;li&gt;&lt;strong&gt;224-entry&lt;/strong&gt; &lt;strong&gt;7-way&lt;/strong&gt; L1 DTLB, supports 4KB and 64KB translation granules&lt;/li&gt;&lt;li&gt;Up to 4 Load-Store operations per cycle&lt;/li&gt;&lt;li&gt;192 entry Load Queue, 56 entry Store Queue&lt;/li&gt;&lt;li&gt;Full 64B/cycle for both fills and evictions to L2 cache&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;l1-dcache-容量&#34;&gt;L1 DCache 容量&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dcache-容量&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;构造不同大小 footprint 的 pointer chasing 链，测试不同 footprint 下每条 load 指令耗费的时间：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_l1dc.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 96KB 出现了明显的拐点，对应的就是 96KB 的 L1 DCache 容量。&lt;/p&gt;&lt;h4 id=&#34;l1-dtlb-容量&#34;&gt;L1 DTLB 容量&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dtlb-容量&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;用类似的方法测试 L1 DTLB 容量，只不过这次 pointer chasing 链的指针分布在不同的 page 上，使得 DTLB 成为瓶颈：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_dtlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到 224 Page 出现了明显的拐点，对应的就是 224 的 L1 DTLB 容量。从每个 page 一个指针改成每 32 page 一个指针并注意对齐尽量保证 Index 为 0，此时 L1 DTLB 容量降为 7，说明 L1 DTLB 是 7 路组相连结构，32 个 Set，Index 位是 VA[16:12]，这些页被映射到了相同的 Set 当中：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_dtlb_7.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;横座标为 8，也就是有 8 个页时，此时这 8 个页都映射到同一个 set 当中，有四分之一的概率会出现 L1 DTLB miss，此时 load latency 是 11 cycle，剩下四分之三的概率 L1 DTLB hit，load latency 是 3 cycle，加权平均下来得到 &lt;code&gt;11*1/4+3*3/4=5&lt;/code&gt;，符合预期。这个四分之一对应了某种替换策略。从横座标为 9 开始，则所有访问都出现 L1 DTLB miss，延迟降低到 11 cycle，这代表了 L1 DTLB miss，L2 Unified TLB hit 的延迟。&lt;/p&gt;&lt;p&gt;命中 L1 DTLB 时每条 Load 指令是 3 cycle，意味着高通实现了 3 cycle 的 pointer chasing load to use latency，这个特性在苹果，Exynos M-series 和 Intel 的 E-core 中也可以看到，针对这个优化的讨论，详见 &lt;a href=&#34;../../../../2022/03/31/brief-into-ooo-2/&#34;&gt;浅谈乱序执行 CPU（二：访存）&lt;/a&gt; 的 Load Pipeline 小节。在其他场景下，依然是 4 cycle 的 load to use latency。&lt;/p&gt;&lt;h4 id=&#34;loadstore-带宽&#34;&gt;Load/Store 带宽&lt;a class=&#34;headerlink&#34; href=&#34;#loadstore-带宽&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;针对 Load Store 带宽，实测每个周期可以完成：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;4x 128b Load&lt;/li&gt;&lt;li&gt;3x 128b Load + 1x 128b Store&lt;/li&gt;&lt;li&gt;2x 128b Load + 2x 128b Store&lt;/li&gt;&lt;li&gt;1x 128b Load + 2x 128b Store&lt;/li&gt;&lt;li&gt;2x 128b Store&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果把每条指令的访存位宽从 128b 改成 256b，读写带宽不变，指令吞吐减半。也就是说最大的读带宽是 64B/cyc，最大的写带宽是 32B/cyc，二者不能同时达到。&lt;/p&gt;&lt;p&gt;不太确定的是高通官方的表述里 &lt;code&gt;Up to 4 Load-Store operations per cycle&lt;/code&gt; 对于 4 Store ops per cycle 以什么方式成立，因为从 IPC 来看，只能达到 2 Store Per Cycle。&lt;/p&gt;&lt;h4 id=&#34;l1-dcache-分-bank&#34;&gt;L1 DCache 分 Bank&lt;a class=&#34;headerlink&#34; href=&#34;#l1-dcache-分-bank&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;考虑到 L1 DCache 需要单周期支持 4 条 Load 指令，如果要用单读口的 SRAM，一般的做法是设计 4 个 Bank，每个 Bank 对应一组 SRAM。为了测试 Bank 的粒度，使用不同跨步（Stride）的 Load，观察 IPC：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Stride=1B/2B/4B/8B/16B/32B/64B 时 IPC=4&lt;/li&gt;&lt;li&gt;Stride=128B 时 IPC=2&lt;/li&gt;&lt;li&gt;Stride=256B 时 IPC=1&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;当多个 Load 访问同一个 Cache Line 时，这些 Load 可以同时进行，极限情况下用 4 条 128b Load 可以做到一个周期把整个 64B Cache Line 都读出来；Stride=128B 时，IPC 砍半，说明只有一半的 Bank 得到了利用，进一步 Stride=256B 时，IPC=1，说明只有一个 Bank 被用上。&lt;/p&gt;&lt;p&gt;那么 L1 DCache 的组织方式应该是 4 个 Bank，Bank Index 对应 PA[7:6]，也就是连续的四个 64B Cache Line 会被映射到四个 Bank 上。当多个 Load 被映射到同一个 Bank 且访问的不是同一个 Cache Line 时，会出现性能损失。&lt;/p&gt;&lt;p&gt;这里讨论的是缓存行级别的 Bank，实际上通常缓存行内部也会进行 Bank 划分，但主要是为了功耗，比如从一个 64B 缓存行里读取 8B 数据，不需要把整个 64B 都读出来。&lt;/p&gt;&lt;h4 id=&#34;vipt&#34;&gt;VIPT&lt;a class=&#34;headerlink&#34; href=&#34;#vipt&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;在 4KB page 的情况下，96KB 6-way 的 L1 DCache 不满足 VIPT 的 Index 全在页内偏移的条件（详见 &lt;a href=&#34;../../../../2023/12/08/vipt-l1-cache-page-size/&#34;&gt;VIPT 与缓存大小和页表大小的关系&lt;/a&gt;），此时要么改用 PIPT，要么在 VIPT 的基础上处理 alias 的问题。为了测试这一点，参考 &lt;a href=&#34;https://blog.cyyself.name/why-the-big-l1-cache-is-so-hard/&#34;&gt;浅谈现代处理器实现超大 L1 Cache 的方式&lt;/a&gt; 的测试方法，用 shm 构造出两个 4KB 虚拟页映射到同一个物理页的情况，然后在两个虚拟页之间 copy，发现相比在同一个虚拟页内 copy 有显著的性能下降，并且产生了大量的 L1 DCache Refill：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-0-1&#34;&gt;&lt;a id=&#34;__codelineno-0-1&#34; name=&#34;__codelineno-0-1&#34; href=&#34;#__codelineno-0-1&#34;&gt;&lt;/a&gt;copy from aliased page = 8407465601 cycles, 321782134 refills&lt;/span&gt;&lt;span id=&#34;__span-0-2&#34;&gt;&lt;a id=&#34;__codelineno-0-2&#34; name=&#34;__codelineno-0-2&#34; href=&#34;#__codelineno-0-2&#34;&gt;&lt;/a&gt;baseline = 1239053083 cycles, 20 refills&lt;/span&gt;&lt;span id=&#34;__span-0-3&#34;&gt;&lt;a id=&#34;__codelineno-0-3&#34; name=&#34;__codelineno-0-3&#34; href=&#34;#__codelineno-0-3&#34;&gt;&lt;/a&gt;slowdown = 6.79x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此猜测 L1 DCache 采用的是 VIPT，并做了针对 alias 的正确性处理。如果是 PIPT，那么 L1 DCache 会发现这两个页对应的是相同的物理地址，性能不会下降，也不需要频繁的 refill。&lt;/p&gt;&lt;h4 id=&#34;memory-dependency-predictor&#34;&gt;Memory Dependency Predictor&lt;a class=&#34;headerlink&#34; href=&#34;#memory-dependency-predictor&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;为了预测执行 Load，需要保证 Load 和之前的 Store 访问的内存没有 Overlap，那么就需要有一个预测器来预测 Load 和 Store 之前在内存上的依赖。参考 &lt;a href=&#34;https://blog.stuffedcow.net/2014/01/x86-memory-disambiguation/&#34;&gt;Store-to-Load Forwarding and Memory Disambiguation in x86 Processors&lt;/a&gt; 的方法，构造两个指令模式，分别在地址和数据上有依赖：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;数据依赖，地址无依赖：&lt;code&gt;str x3, [x1]&lt;/code&gt; 和 &lt;code&gt;ldr x3, [x2]&lt;/code&gt;&lt;/li&gt;&lt;li&gt;地址依赖，数据无依赖：&lt;code&gt;str x2, [x1]&lt;/code&gt; 和 &lt;code&gt;ldr x1, [x2]&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;初始化时，&lt;code&gt;x1&lt;/code&gt; 和 &lt;code&gt;x2&lt;/code&gt; 指向同一个地址，重复如上的指令模式，观察到多少条 &lt;code&gt;ldr&lt;/code&gt; 指令时会出现性能下降：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_memory_dependency_predictor.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;有意思的是，两种模式出现了不同的阈值，地址依赖的阈值是 64，而数据依赖的阈值是 96。&lt;/p&gt;&lt;h4 id=&#34;store-to-load-forwarding&#34;&gt;Store to Load Forwarding&lt;a class=&#34;headerlink&#34; href=&#34;#store-to-load-forwarding&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;经过实际测试，如下的情况可以成功转发：&lt;/p&gt;&lt;p&gt;对地址 x 的 Store 转发到对地址 y 的 Load 成功时 y-x 的取值范围：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Store\Load&lt;/th&gt;&lt;th&gt;8b Load&lt;/th&gt;&lt;th&gt;16b Load&lt;/th&gt;&lt;th&gt;32b Load&lt;/th&gt;&lt;th&gt;64b Load&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;8b Store&lt;/td&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;[-1,0]&lt;/td&gt;&lt;td&gt;[-3,0]&lt;/td&gt;&lt;td&gt;[-7,0]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16b Store&lt;/td&gt;&lt;td&gt;[0,1]&lt;/td&gt;&lt;td&gt;[-1,1]&lt;/td&gt;&lt;td&gt;[-3,1]&lt;/td&gt;&lt;td&gt;[-7,1]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;32b Store&lt;/td&gt;&lt;td&gt;[0,3]&lt;/td&gt;&lt;td&gt;[-1,3]&lt;/td&gt;&lt;td&gt;[-3,3]&lt;/td&gt;&lt;td&gt;[-7,3]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;64b Store&lt;/td&gt;&lt;td&gt;[0,7]&lt;/td&gt;&lt;td&gt;[-1,7]&lt;/td&gt;&lt;td&gt;[-3,7]&lt;/td&gt;&lt;td&gt;[-7,7]&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;从上表可以看到，所有 Store 和 Load Overlap 的情况，无论地址偏移，都能成功转发，不过代价是如果 Load 或 Store 跨越 64B 缓存行的边界时就会转发失败，毕竟在只有部分覆盖的情况下，剩下的部分需要从缓存中读取。&lt;a href=&#34;../../../12/26/apple_m1/&#34;&gt;Apple Firestorm&lt;/a&gt; 和 Qualcomm Oryon 比较类似，所有 Overlap 情况下都可以成功转发，但即使是跨越 64B 缓存行也可以成功转发，只需要多花费一个周期。&lt;/p&gt;&lt;p&gt;一个 Load 需要转发两个 Store 的数据的情况比较奇怪：对地址 x 的 32b Store 和对地址 x+4 的 32b Store 转发到对地址 y 的 64b Load，要求 x%4==0，不跨越 64B 缓存行，对 y-x 除了 Overlap 以外没有额外的要求。Apple Firestorm 则没有 x%4==0 这个局限性，但在跨越 64B 缓存行时也不能转发。&lt;/p&gt;&lt;p&gt;但 64b Load 就不支持从 4 个 16b Store 转发了，8 个 8b Store 也不支持。Apple Firestorm 则都支持，相比从单个 Store 转发多 1-4 个周期。&lt;/p&gt;&lt;p&gt;由此看出 Oryon 和 &lt;a href=&#34;../../../11/11/amd_zen5/&#34;&gt;Zen 5&lt;/a&gt; 以及 &lt;a href=&#34;../../../11/07/arm_neoverse_v2/&#34;&gt;Neoverse V2&lt;/a&gt; 在设计思路上的不同：Oryon 追求 Load 和 Store 的自由组合，允许只有一部分覆盖，也无所谓地址偏移是多少，但也牺牲了跨 64B 缓存行时的性能。此外，Oryon 针对一个 Load 转发两个 Store 的情况的支持比较特别，要求 Store 地址对齐到 4B。&lt;/p&gt;&lt;p&gt;成功转发时 9 cycle，有 Overlap 但转发失败时 17-23 cycle，跨缓存行时要 40+ cycle。&lt;/p&gt;&lt;p&gt;小结：Qualcomm Oryon 的 Store to Load Forwarding：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;1 ld + 1 st: 要求不跨越 64B 边界&lt;/li&gt;&lt;li&gt;1 ld + 2 st: 要求 ld 对齐到 4B 边界且不跨越 64B 边界&lt;/li&gt;&lt;li&gt;1 ld + 4 st: 不支持&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;load-to-use-latency&#34;&gt;Load to use latency&lt;a class=&#34;headerlink&#34; href=&#34;#load-to-use-latency&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Oryon 的 Load to use latency 针对 pointer chasing 场景做了优化，在下列的场景下可以达到 3 cycle:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;ldr x0, [x0]&lt;/code&gt;: load 结果转发到基地址，无偏移&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldr x0, [x0, 8]&lt;/code&gt;：load 结果转发到基地址，有立即数偏移&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldr x0, [x0, x1]&lt;/code&gt;：load 结果转发到基地址，有寄存器偏移&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldp x0, x1, [x0]&lt;/code&gt;：load pair 的第一个目的寄存器转发到基地址，无偏移&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在下列场景下 Load to use latency 则是 4 cycle：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;load 的目的寄存器作为 alu 的源寄存器（下称 load to alu latency）&lt;/li&gt;&lt;li&gt;&lt;code&gt;ldr x0, [sp, x0, lsl #3]&lt;/code&gt;：load 结果转发到 index&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在下列场景下 Load to use latency 则是 5 cycle：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;ldp x1, x0, [x0]&lt;/code&gt;：load pair 的第二个目的寄存器转发到基地址，无偏移&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;比较奇怪的是 &lt;code&gt;ldr x0, [x0]&lt;/code&gt; 在跨越 8B 边界时的行为，load to load latency 退化为 6 cycle，load to alu latency 则是 4 cycle。Apple Firestorm 则没有这个问题，在跨越 8B 边界甚至 64B 边界时，实现了 4 cycle load to load latency 和 4 cycle load to alu latency。&lt;/p&gt;&lt;h4 id=&#34;virtual-address-utagway-predictor&#34;&gt;Virtual Address UTag/Way-Predictor&lt;a class=&#34;headerlink&#34; href=&#34;#virtual-address-utagway-predictor&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Linear Address UTag/Way-Predictor 是 AMD 的叫法，但使用相同的测试方法，也可以在 Qualcomm Oryon 上观察到类似的现象，猜想它也用了类似的基于虚拟地址的 UTag/Way Predictor 方案，并测出来它的 UTag 也有 8 bit：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;VA[14] xor VA[22] xor VA[30] xor VA[38] xor VA[46]&lt;/li&gt;&lt;li&gt;VA[15] xor VA[23] xor VA[31] xor VA[39] xor VA[47]&lt;/li&gt;&lt;li&gt;VA[16] xor VA[24] xor VA[32] xor VA[40]&lt;/li&gt;&lt;li&gt;VA[17] xor VA[25] xor VA[33] xor VA[41]&lt;/li&gt;&lt;li&gt;VA[18] xor VA[26] xor VA[34] xor VA[42]&lt;/li&gt;&lt;li&gt;VA[19] xor VA[27] xor VA[35] xor VA[43]&lt;/li&gt;&lt;li&gt;VA[20] xor VA[28] xor VA[36] xor VA[44]&lt;/li&gt;&lt;li&gt;VA[21] xor VA[29] xor VA[37] xor VA[45]&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;一共有 8 bit，由 VA[47:14] 折叠而来，和 Apple M1 一样。&lt;/p&gt;&lt;p&gt;除了 UTag 可能冲突以外，如果 VA[13:12] 出现了 VIPT 导致的 alias，也会出现性能下降。&lt;/p&gt;&lt;h3 id=&#34;mmu&#34;&gt;MMU&lt;a class=&#34;headerlink&#34; href=&#34;#mmu&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;4KB and 64KB translation granules&lt;/li&gt;&lt;li&gt;1 cycle access for L1 ITLB &amp;amp; L1 DTLB&lt;/li&gt;&lt;li&gt;Unified L2 TLB, &lt;strong&gt;8-way&lt;/strong&gt; &amp;gt;8K entry&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;l2-tlb&#34;&gt;L2 TLB&lt;a class=&#34;headerlink&#34; href=&#34;#l2-tlb&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;沿用之前测试 L1 DTLB 的方法，把规模扩大到 L2 Unified TLB 的范围，就可以测出来 L2 Unified TLB 的容量，下面是 Oryon 上的测试结果：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_l2tlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;可以看到拐点是 32768 个 Page 附近，说明 Oryon 的 L2 TLB 容量是 32768 项。我们也可以把测试范围扩大，看到完整的图像：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_tlb.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;第一个拐点是 224 * 4 KB = 896 KB，对应 L1 DTLB，此时访存延迟是 3 cycle；第二个拐点是 32768 * 4 KB = 131072 KB，对应 L2 TLB，此时访存延迟是 29.5 cycle，这个时候对 Cache 的占用是 32768 * 64 = 2 MB，已经超过了 L1 DCache 容量，所以这个延迟包括了 L1 DCache miss 的延迟，如果去掉官方宣称的 17 cycle 的 L1 DCache miss 延迟，就得到 29.5 - 17 = 12.5 cycle。&lt;/p&gt;&lt;p&gt;由于 Oryon 的 L2 TLB 很大，很容易遇到数据缓存容量的瓶颈，因此把指针的跨度调大，使得等效 L2 TLB 容量变小，但数据缓存容量不变，可以测试去掉缓存缺失延迟后的性能：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果每 512 个页一个指针，L2 TLB 拐点在 64，L2 TLB 缺失时 CPI 不太稳定，怀疑有预取&lt;/li&gt;&lt;li&gt;如果每 1024 个页一个指针，L2 TLB 拐点在 32，L2 TLB 缺失时 CPI 为 55-57&lt;/li&gt;&lt;li&gt;如果每 2048 个页一个指针，L2 TLB 拐点在 16，L2 TLB 缺失时 CPI 为 53-57&lt;/li&gt;&lt;li&gt;如果每 4096 个页一个指针，L2 TLB 拐点在 8，L2 TLB 缺失时 CPI 为 59-67&lt;/li&gt;&lt;li&gt;如果每 8192 个页一个指针，L2 TLB 拐点依然在 8，L2 TLB 缺失时 CPI 为 59-71&lt;/li&gt;&lt;li&gt;观察到命中 L1 DTLB 时 CPI 是 3，命中 L2 TLB 时 CPI 是 11（每 1024 个页一个指针时例外，CPI 从 11 缓慢下降到 14.5），此时 L1 数据缓存缺失率为 0，延迟都来自于 L1 DTLB miss&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;认为 Oryon 的 L2 TLB 是 8 Way，4096 Set，那就是 32768 个 entry，Index 是 VA[23:12]。但官方声称的是 &lt;code&gt;&amp;gt;8K&lt;/code&gt;，这个表述比较耐人寻味，可能是 8K 个 entry，每个 entry 最多记录四个页的映射关系。&lt;/p&gt;&lt;p&gt;命中 L2 TLB 的时间有长有短，说明它的 entry 不是等同的，随着访问范围变大，即使都命中，延迟也会上升。&lt;/p&gt;&lt;h3 id=&#34;l2-cache&#34;&gt;L2 Cache&lt;a class=&#34;headerlink&#34; href=&#34;#l2-cache&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;每 4 个核心组成一个 Cluster，Cluster 内的核心共享一个 12MB 12-way L2 Cache&lt;/li&gt;&lt;li&gt;MOESI&lt;/li&gt;&lt;li&gt;&lt;strong&gt;17&lt;/strong&gt; cycle latency for L1 miss to L2 hit&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;构造不同大小 footprint 的 pointer chasing 链，测试不同 footprint 下每条 load 指令耗费的时间：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_l2.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;第一个拐点在 96KB，对应 L1 DCache 的容量，之后延迟在 18-22 周期之间波动，中间一段比较稳定在 20 cycle，这对应了 3 cycle load to load latency + 17 cycle l1 miss penalty。&lt;/p&gt;&lt;p&gt;延迟超过 6MB 以后延迟快速上升，对此有两种猜测：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;L2 Cache 并非所有容量都可以在差不多的时间内访问，离核心近的更快，离核心远的较慢&lt;/li&gt;&lt;li&gt;为了防止某个核心对 L2 Cache 的占用太大，导致同一个 Cluster 内其他核心分不到 L2 缓存，进行 QoS，限制每个核心能够占用的 L2 Cache 容量&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;为了进一步验证以上的猜测，除了周期数以外，也测试了不同 footprint 下 L2D_CACHE_REFILL 事件的次数，发现：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;footprint 在 8MB 范围内时，L2D_CACHE_REFILL 约等于 0，意味着此时数据都命中了 L2 Cache，但当 footprint 达到 8MB 时，访问延迟已经增加到 45 个周期，这符合第一点猜测，即使都命中 L2 Cache，也有快慢之分&lt;/li&gt;&lt;li&gt;footprint 达到 12 MB 时，每次访存的平均 L2D_CACHE_REFILL 约等于 0.23，假如一个核心可以用满整个 L2 Cache，此时应当没有这么高的缺失率，这符合第二点猜测&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;因此可能上述两个猜测都是对的，当然了，也不排除还有别的解释。&lt;/p&gt;&lt;h3 id=&#34;prefetcher&#34;&gt;Prefetcher&lt;a class=&#34;headerlink&#34; href=&#34;#prefetcher&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;为了测试预取器的行为，可以构造不同的 footprint 和不同访存模式的 pointer chasing 链，观察它的性能以及预取器介入次数的性能计数器。涉及到的访存模式如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;64B stride：按照固定的 stride 访存，地址模式是 0B -&amp;gt; 64B -&amp;gt; 128B -&amp;gt; ...&lt;/li&gt;&lt;li&gt;random cache line：把 64B cache line 打乱顺序，每个 cache line 轮流读取一次&lt;/li&gt;&lt;li&gt;first cache line in random page：把 4K 大小的 page 打乱顺序，每个 page 轮流读取一次，读取的是各个页内的第一个 64B cache line；只读取每个页的第一个 64B cache line 是为了达到类似 L1 DCache 的容量用满的效果&lt;/li&gt;&lt;li&gt;one random cache line in random page：把 4K 大小的 page 打乱顺序，每个 page 轮流读取一次，读取的是各个页内的随机但固定位置的一个 64B cache line&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;注：上述的打乱顺序，只是在构建 pointer chasing 链时打乱，因此在访存过程中，不会再调整访存顺序。&lt;/p&gt;&lt;p&gt;同时统计每次访存花费的时间以及 &lt;code&gt;0x8154, L1D_CACHE_HWPRF, Level 1 data cache hardware prefetch&lt;/code&gt; 性能计数器的结果，得到测试结果如下：&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../../../../qualcomm_oryon_prefetcher.png&#34; /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;64B stride：可以看到在超出 96KB 的 L1 DCache 容量以后，访存延迟略微增加到 1ns，同时每次访存对对应一次硬件预取，此时主要是 Stride Prefetcher 在起作用&lt;/li&gt;&lt;li&gt;random cache line：可以看到在超出 L1 DCache 容量后，访存延迟大幅上升，但并没有直接降低到 L2 Cache 的访问延迟，同时也可以看到预取的比例急剧上升；说明即使是随机的访问模式，预取器可以记录下部分访存过程，从而降低了缓存缺失率，此时主要是 Region/Spatial Prefetcher 在起作用&lt;/li&gt;&lt;li&gt;first cache line in random page：可以看到在超出 L1 DCache 容量后，访存延迟快速降低到 L2 Cache 的访问延迟，同时硬件预取器并没有工作；说明硬件没有针对 L1 DCache 实现 Temporal Prefetcher&lt;/li&gt;&lt;li&gt;one random cache line in random page：此时实际的缓存容量只有横座标的 &lt;code&gt;64/4096&lt;/code&gt; 倍，所以这个时候测得的性能拐点 896KB 实际上对应的是 L1 DTLB 的容量&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;memory&#34;&gt;Memory&lt;a class=&#34;headerlink&#34; href=&#34;#memory&#34; title=&#34;Permanent link&#34;&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;官方信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;6MB System Level Cache, 26-29ns latency, 135GB/s bandwidth in each direction&lt;/li&gt;&lt;li&gt;LPDDR5x DRAM, 8448 MT/s, 8 channel of 16 bits, 135GB/s bandwidth, 102-104ns latency&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;通过 dmidecode，可以看到 Surface Laptop 7 的内存型号：&lt;/p&gt;&lt;div class=&#34;language-text highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&#34;__span-1-1&#34;&gt;&lt;a id=&#34;__codelineno-1-1&#34; name=&#34;__codelineno-1-1&#34; href=&#34;#__codelineno-1-1&#34;&gt;&lt;/a&gt;Handle 0x0004, DMI type 17, 92 bytes&lt;/span&gt;&lt;span id=&#34;__span-1-2&#34;&gt;&lt;a id=&#34;__codelineno-1-2&#34; name=&#34;__codelineno-1-2&#34; href=&#34;#__codelineno-1-2&#34;&gt;&lt;/a&gt;Memory Device&lt;/span&gt;&lt;span id=&#34;__span-1-3&#34;&gt;&lt;a id=&#34;__codelineno-1-3&#34; name=&#34;__codelineno-1-3&#34; href=&#34;#__codelineno-1-3&#34;&gt;&lt;/a&gt; Total Width: 16 bits&lt;/span&gt;&lt;span id=&#34;__span-1-4&#34;&gt;&lt;a id=&#34;__codelineno-1-4&#34; name=&#34;__codelineno-1-4&#34; href=&#34;#__codelineno-1-4&#34;&gt;&lt;/a&gt; Data Width: 16 bits&lt;/span&gt;&lt;span id=&#34;__span-1-5&#34;&gt;&lt;a id=&#34;__codelineno-1-5&#34; name=&#34;__codelineno-1-5&#34; href=&#34;#__codelineno-1-5&#34;&gt;&lt;/a&gt; Size: 32 GB&lt;/span&gt;&lt;span id=&#34;__span-1-6&#34;&gt;&lt;a id=&#34;__codelineno-1-6&#34; name=&#34;__codelineno-1-6&#34; href=&#34;#__codelineno-1-6&#34;&gt;&lt;/a&gt; Form Factor: TSOP&lt;/span&gt;&lt;span id=&#34;__span-1-7&#34;&gt;&lt;a id=&#34;__codelineno-1-7&#34; name=&#34;__codelineno-1-7&#34; href=&#34;#__codelineno-1-7&#34;&gt;&lt;/a&gt; Locator: Top - on board&lt;/span&gt;&lt;span id=&#34;__span-1-8&#34;&gt;&lt;a id=&#34;__codelineno-1-8&#34; name=&#34;__codelineno-1-8&#34; href=&#34;#__codelineno-1-8&#34;&gt;&lt;/a&gt; Bank Locator: Bank 0&lt;/span&gt;&lt;span id=&#34;__span-1-9&#34;&gt;&lt;a id=&#34;__codelineno-1-9&#34; name=&#34;__codelineno-1-9&#34; href=&#34;#__codelineno-1-9&#34;&gt;&lt;/a&gt; Type: LPDDR5&lt;/span&gt;&lt;span id=&#34;__span-1-10&#34;&gt;&lt;a id=&#34;__codelineno-1-10&#34; name=&#34;__codelineno-1-10&#34; href=&#34;#__codelineno-1-10&#34;&gt;&lt;/a&gt; Speed: 8448 MT/s&lt;/span&gt;&lt;span id=&#34;__span-1-11&#34;&gt;&lt;a id=&#34;__codelineno-1-11&#34; name=&#34;__codelineno-1-11&#34; href=&#34;#__codelineno-1-11&#34;&gt;&lt;/a&gt; Manufacturer: Hynix&lt;/span&gt;&lt;span id=&#34;__span-1-12&#34;&gt;&lt;a id=&#34;__codelineno-1-12&#34; name=&#34;__codelineno-1-12&#34; href=&#34;#__codelineno-1-12&#34;&gt;&lt;/a&gt; Part Number: H58G66BK8BX067&lt;/span&gt;&lt;span id=&#34;__span-1-13&#34;&gt;&lt;a id=&#34;__codelineno-1-13&#34; name=&#34;__codelineno-1-13&#34; href=&#34;#__codelineno-1-13&#34;&gt;&lt;/a&gt; Configured Memory Speed: 8448 MT/s&lt;/span&gt;&lt;span id=&#34;__span-1-14&#34;&gt;&lt;a id=&#34;__codelineno-1-14&#34; name=&#34;__codelineno-1-14&#34; href=&#34;#__codelineno-1-14&#34;&gt;&lt;/a&gt; Minimum Voltage: 0.348 V&lt;/span&gt;&lt;span id=&#34;__span-1-15&#34;&gt;&lt;a id=&#34;__codelineno-1-15&#34; name=&#34;__codelineno-1-15&#34; href=&#34;#__codelineno-1-15&#34;&gt;&lt;/a&gt; Maximum Voltage: 0.856 V&lt;/span&gt;&lt;span id=&#34;__span-1-16&#34;&gt;&lt;a id=&#34;__codelineno-1-16&#34; name=&#34;__codelineno-1-16&#34; href=&#34;#__codelineno-1-16&#34;&gt;&lt;/a&gt; Configured Voltage: 0.8 V&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><link>https://jia.je/hardware/2024/09/01/qualcomm_oryon/</link> <pubDate>Sun, 01 Sep 2024 00:00:00 +0000</pubDate><source url="https://jia.je/feed_rss_updated.xml">杰哥的{运维，编程，调板子}小笔记</source><guid isPermaLink="true">https://jia.je/hardware/2024/09/01/qualcomm_oryon/</guid> </item> </channel></rss>