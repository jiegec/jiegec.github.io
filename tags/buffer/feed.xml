<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>buffer on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/buffer/</link>
    <description>Recent content in buffer on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Jan 2021 20:34:00 +0000</lastBuildDate><atom:link href="https://jia.je/tags/buffer/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Skid Buffer</title>
      <link>https://jia.je/hardware/2021/01/26/skid-buffer/</link>
      <pubDate>Tue, 26 Jan 2021 20:34:00 +0000</pubDate>
      
      <guid>https://jia.je/hardware/2021/01/26/skid-buffer/</guid>
      <description>Skid buffer Skid buffer 指的就是，对于 valid + ready 的握手信号，用空间（更多的逻辑）来换取时间（更好的时序）的一个硬件模块。
简单来说，背景就是，为了解决 valid 和 ready 信号在数据流水线上一路经过组合逻辑导致的时序问题，在中途加上一些寄存器来阻隔。当然了，代价就是延迟和面积，不过吞吐量还是需要保持的。
由于需求的不同，Skid buffer 也有不同的实现。目前，找到了四个实现，实现上有所不同，特性也不大一样。
统一约定 由于我在 SpinalHDL 语言中重新实现了下面的这些 Skid buffer，所以按照 SpinalHDL 的 Stream 定义接口：
class SkidBufferCommon[T &amp;lt;: Data]( gen: =&amp;gt; T ) extends Component { val io = new Bundle { val s = slave(Stream(gen)) val m = master(Stream(gen)) } } 在这里，io.s 表示从上游取的数据，io.m 表示传递给下游的数据。
输出信号共有：io.s.ready、io.m.valid 和 io.m.payload。
ZipCPU 版本 第一个版本来自 ZipCPU：
博客地址：Building a Skid Buffer for AXI processing 代码地址：skidbuffer.</description>
    </item>
    
  </channel>
</rss>
