<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tencentcloud on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/tencentcloud/</link>
    <description>Recent content in tencentcloud on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Apr 2020 18:13:00 +0800</lastBuildDate>
    
	<atom:link href="https://jia.je/tags/tencentcloud/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在 k8s 内用 Cert Manager 配合 Nginx Ingress Controller 配置 Let&#39;s Encrypt HTTPS 证书</title>
      <link>https://jia.je/devops/2020/04/17/k8s-nginx-cert-manager-le/</link>
      <pubDate>Fri, 17 Apr 2020 18:13:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/04/17/k8s-nginx-cert-manager-le/</guid>
      <description>上一篇博客讲了 nginx ingress 的配置，那自然第一步要配上 https。首先配置 cert-manager：
$ kubectl create namespace cert-manager $ kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.14.1/cert-manager.crds.yaml $ helm repo add jetstack https://charts.jetstack.io $ helm repo update $ helm install \  cert-manager jetstack/cert-manager \  --namespace cert-manager \  --version v0.14.1 然后，配置 Cluster Issuer，应用以下的 yaml：
apiVersion: cert-manager.io/v1alpha2 kind: ClusterIssuer metadata: name: letsencrypt-prod namespace: cert-manager spec: acme: email: example@example.com server: https://acme-v02.api.letsencrypt.org/directory privateKeySecretRef: name: letsencrypt-prod solvers: - http01: ingress: class: nginx 然后在 ingress 里面进行配置：</description>
    </item>
    
    <item>
      <title>在 TKE 上配置不使用 LB 的 Nginx Ingress Controller</title>
      <link>https://jia.je/devops/2020/04/17/tke-nginx-ingress-without-lb/</link>
      <pubDate>Fri, 17 Apr 2020 17:30:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/04/17/tke-nginx-ingress-without-lb/</guid>
      <description>背景 想要在 k8s 里面 host 一个网站，但又不想额外花钱用 LB，想直接用节点的 IP。
方法 首先安装 nginx-ingress：
$ helm repo add nginx-stable https://helm.nginx.com/stable $ helm repo update $ helm install ingress-controller nginx-stable/nginx-ingress --set controller.service.type=NodePort --set controller.hostNetwork=true 这里给 ingress controller chart 传了两个参数：第一个指定 service 类型是 NodePort，替代默认的 LoadBalancer；第二个指定 ingress controller 直接在节点上监听，这样就可以用节点的公网 IP 访问了。
然后配一个 ingress：
apiVersion: networking.k8s.io/v1beta1 kind: Ingress metadata: name: ingress-example annotations: kubernetes.io/ingress.class: &amp;#34;nginx&amp;#34; spec: rules: - host: example.com http: paths: - path: / backend: serviceName: example-service servicePort: 80 然后就可以发现请求被正确路由到 example-service 的 80 端口了。</description>
    </item>
    
    <item>
      <title>体验 Tencent Kubernetes Engine</title>
      <link>https://jia.je/devops/2020/03/17/setup-k8s-tencentcloud/</link>
      <pubDate>Tue, 17 Mar 2020 21:56:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/03/17/setup-k8s-tencentcloud/</guid>
      <description>之前在机器上试验了一下 kubernetes，感觉挺不错的，所以就想把腾讯云上面的机器也交给 kubernetes 管理。找到容器服务，新建集群，选择模板里的标准托管集群就可以了。然后开启下面的公网访问，设置一个比较小的 IP 地址段，按照页面下面的要求合并一下 kube config（因为还有别的 k8s cluster）：
$ KUBECONFIG=~/.kube/config:/path/to/new/config kubectl config view --merge --flatten &amp;gt; new_config $ cp new_config ~/.kube/config 覆盖之前先确认原来的配置还在，然后就可以用 kubectl 切换到新的 context：
$ kubectl config get-contexts $ kubectl config use-context new-context-here $ kubectl get node NAME STATUS ROLES AGE VERSION 172.21.0.17 Ready &amp;lt;none&amp;gt; 75m v1.16.3-tke.3 可以看到我们的 k8s node 已经上线了。我一般习惯先配好 kubernetes-dashboard：
$ kubectl create -f https://raw.githubusercontent.com/cilium/cilium/v1.6/install/kubernetes/quick-install.yaml $ kubectl proxy &amp;amp; $ kubectl -n kubernetes-dashboard describe secret (kubectl -n kubernetes-dashboard get secret | grep admin-user | awk &amp;#39;{print \$1}&amp;#39;) | tail -n1 | awk &amp;#39;{print \$2}&amp;#39; | pbcopy 然后在浏览器里访问 http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/overview?</description>
    </item>
    
  </channel>
</rss>