<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/security/</link>
    <description>Recent content in security on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Feb 2023 21:57:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/security/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenBSD xonly 实现原理</title>
      <link>https://jia.je/system/2023/02/07/openbsd-xonly/</link>
      <pubDate>Tue, 07 Feb 2023 21:57:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2023/02/07/openbsd-xonly/</guid>
      <description>背景 最近看到 xonly status，看到 OpenBSD 最近在实现 xonly，也就是让一些页只能执行，不能读不能写。以往类似的做法是 W^X，也就是可以执行的时候不能写，可以写的时候不能执行。显然，xonly 是更加严格的，连读都不可以。查了一下历史，W^X 最早也是在 OpenBSD 中实现的，说不定以后 xonly 也会被各个操作系统实现。
amd64 上的实现 在 amd64 的页表中，决定执行/读/写权限的是（见 Intel 文档 Table 4-20. Format of a Page-Table Entry that Maps a 4-KByte Page）：
Bit 1(R/W): Read/write; if 0, writes may not be allowed to the 4-KByte page referenced by this entry (see Section 4.6) Bit 63(XD): If IA32_EFER.NXE = 1, execute-disable (if 1, instruction fetches are not allowed from the 4-KByte page controlled by this entry; see Section 4.</description>
    </item>
    
  </channel>
</rss>
