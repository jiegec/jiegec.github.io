<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linker on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/linker/</link>
    <description>Recent content in linker on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 May 2023 12:09:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/linker/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>链接器的工作原理</title>
      <link>https://jia.je/software/2023/05/06/linker/</link>
      <pubDate>Sat, 06 May 2023 12:09:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2023/05/06/linker/</guid>
      <description>背景 最近和同学讨论一些比较复杂的链接问题，遇到一些比较复杂的情况，因此复习一遍链接器的工作原理。
编译 编译器会把源文件编译成 obj，obj 里面有符号表，定义了不同的符号类型。常见的代码与符号的对应关系：
// global in .bss section if -fno-common // common symbol if -fcommon int uninitialized; // global in .bss section int initialized = 0; // global in .data section int initialized_one = 1; // global in .rodata section const int const_initialized = 0; // global in .rodata section const int const_initialized_one = 1; // global undefined symbol extern int external; // local in .bss section static int static_uninitialized; // local in .</description>
    </item>
    
    <item>
      <title>Rust 获取 Linker Script 中的地址</title>
      <link>https://jia.je/programming/2019/01/07/rust-access-linker-script-address/</link>
      <pubDate>Mon, 07 Jan 2019 11:57:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2019/01/07/rust-access-linker-script-address/</guid>
      <description>在 Linker Script 中可以记录下一个地址到一个变量中，大概这样：
.text: { PROVIDE(__text_start = .); *(.text .text.* .gnu.linkonce.t*) PROVIDE(__text_end = .); } 这里的 PROVIDE() 是可选的。这样，代码里就可以获取到 .text 段的地址了。在 C 中，直接 extern 一个同名的变量就可以了，但在 Rust 中，需要这样获取：
extern &amp;#34;C&amp;#34; { fn __text_start(); fn __text_end(); } // __text_start as usize // __text_end as usize 这样就可以拿到地址了。</description>
    </item>
    
  </channel>
</rss>
