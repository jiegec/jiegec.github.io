<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clang on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/clang/</link>
    <description>Recent content in clang on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Jan 2022 21:41:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/clang/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RISC-V Vector 1.0 工具链构建</title>
      <link>https://jia.je/software/2022/01/25/rvv-1.0-toolchain/</link>
      <pubDate>Tue, 25 Jan 2022 21:41:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/01/25/rvv-1.0-toolchain/</guid>
      <description>不久前 RVV 1.0 标准终于是出来了，但是工具链的支持目前基本还处于刚 upstream 还没有 release 的状态。而目前 RVV 1.0 的支持主要在 LLVM 上比较活跃，因此也是采用 LLVM Clang + GCC Newlib Toolchain 的方式进行配合，前者做 RVV 1.0 的编译，后者提供 libc 等基础库。
LLVM Clang 直接采用 upstream 即可。编译选项：
$ cmake -G Ninja ../llvm -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_PREFIX=/prefix/llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS=&amp;#34;clang&amp;#34; -DLLVM_TARGETS_TO_BUILD=&amp;#34;RISCV&amp;#34; $ ninja $ ninja install $ /prefix/llvm/bin/clang --version clang version 14.0.0 (https://github.com/llvm/llvm-project.git 8d298355ca3778a47fd6b3110aeee03ea5e8e02b) Target: x86_64-unknown-linux-gnu Thread model: posix InstalledDir: /data/llvm/bin 还需要配合一个 GCC 工具链才可以完整地工作。可以直接采用 riscv-gnu-toolchain nightly 版本，比如 riscv64-elf-ubuntu-20.04-nightly-2022.01.17-nightly.tar.gz。下载以后解压，得到 riscv 目录，GCC 版本是比较新的：</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 11 的 ABI 问题</title>
      <link>https://jia.je/programming/2021/06/23/cpp-11-abi-problem/</link>
      <pubDate>Wed, 23 Jun 2021 14:48:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2021/06/23/cpp-11-abi-problem/</guid>
      <description>背景 有同学遇到这样的一个问题，代码中链接了一个第三方的动态库，在链接的时候出现了不一致的问题，比如有一个函数签名如下：
void foobar(std::string s) {} 使用 GCC 11.1.0 编译上面的代码，可以发现它需要的符号是 _Z6foobarNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE，但是第三方库里面却是 _Z6foobarSs，因此找不到对应的符号，链接失败。
问题 经过一番研究，发现 Ss 在 Itanium ABI 中表示的是缩写：
In addition, the following catalog of abbreviations of the form &amp;#34;Sx&amp;#34; are used: &amp;lt;substitution&amp;gt; ::= St # ::std:: &amp;lt;substitution&amp;gt; ::= Sa # ::std::allocator &amp;lt;substitution&amp;gt; ::= Sb # ::std::basic_string &amp;lt;substitution&amp;gt; ::= Ss # ::std::basic_string &amp;lt; char, ::std::char_traits&amp;lt;char&amp;gt;, ::std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;lt;substitution&amp;gt; ::= Si # ::std::basic_istream&amp;lt;char, std::char_traits&amp;lt;char&amp;gt; &amp;gt; &amp;lt;substitution&amp;gt; ::= So # ::std::basic_ostream&amp;lt;char, std::char_traits&amp;lt;char&amp;gt; &amp;gt; &amp;lt;substitution&amp;gt; ::= Sd # ::std::basic_iostream&amp;lt;char, std::char_traits&amp;lt;char&amp;gt; &amp;gt; 这看起来很正常，_Z6foobarSs 表示的是 foobar(std::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt;)，但是 GCC 11.</description>
    </item>
    
    <item>
      <title>在 Big Sur(M1) 上解决 LaTeX 找不到楷体字体的问题</title>
      <link>https://jia.je/software/2021/02/09/big-sur-m1-latex-kaiti-fonts/</link>
      <pubDate>Tue, 09 Feb 2021 20:08:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2021/02/09/big-sur-m1-latex-kaiti-fonts/</guid>
      <description>背景 最近在尝试移植 MiKTeX 到 Apple Silicon 上，添加了一些 patch 以后就可以工作了，但遇到了新的问题，即找不到 KaiTi
~/Library/Application Support/MiKTeX/texmfs/install/tex/latex/ctex/fontset/ctex-fontset-macnew.def:99:  Package fontspec Error:  The font &amp;#34;Kaiti SC&amp;#34; cannot be found. 用 miktex-fc-list 命令找了一下，确实没有找到：
$ /Applications/MiKTeX\ Console.app/Contents/bin/miktex-fc-list | grep Kaiti # Nothing 上网搜了一下，找到了一个解决方案：字体在目录 /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Support/FontSubsets/Kaiti.ttc 里，所以手动安装一下，就可以让 LaTeX 找到了。但我觉得，与其安装多一份在文件系统里，不如让 LaTeX 去找它。
解决方法 按照上面的线索，找到了 Kaiti.ttc 所在的路径：
$ fd Kaiti.ttc /System/Library/PrivateFrameworks/FontServices.framework/Versions/A/Resources/Fonts/Subsets/Kaiti.ttc 可以看到，和上面的路径又不大一样。研究了一下 fontconfig，发现可以用 miktex-fc-conflist 找到配置文件的目录：
$ /Applications/MiKTeX\ Console.app/Contents/bin/miktex-fc-conflist + ~/Library/Application Support/MiKTeX/texmfs/config/fontconfig/config/localfonts2.conf: No description + ~/Library/Application Support/MiKTeX/texmfs/config/fontconfig/config/localfonts.conf: No description ... 看了下第一个文件（localfonts.conf）：
&amp;lt;?xml version=&amp;#34;1.</description>
    </item>
    
    <item>
      <title>COMMON 符号</title>
      <link>https://jia.je/software/2021/02/09/common-symbols-linking/</link>
      <pubDate>Tue, 09 Feb 2021 19:02:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2021/02/09/common-symbols-linking/</guid>
      <description>背景 在编译一个程序的时候，遇到了 undefined symbol 的问题。具体情况是这样的：
 一开始的时候，直接把所有的源代码编译成 .o，再一次性链接，这样不会报错 后来，把一些代码编译成静态库，即把其中一部分源代码编译成 .o 后，用 ar 合并到一个 .a 中，再和其余的 .o 链接在一起，这时候就报错了：  Undefined symbols for architecture arm64:  &amp;#34;_abcd&amp;#34;, referenced from:  ... 如果换台机器，编译（使用的是 gcc 10.2.0）就没有问题。
而如果去找这个符号存在的 .o 里，是可以找到的：
$ objdump -t /path/to/abcd.o 0000000000000028 *COM* 00000008 _abcd 在合成的静态库 .a 里，也是存在的（一个定义+若干个引用）：
$ objdump -t /path/to/libabc.a | grep abcd 0000000000000028 *COM* 00000008 _abcd 0000000000000000 *UND* _abcd 0000000000000000 *UND* _abcd 0000000000000000 *UND* _abcd 0000000000000000 *UND* _abcd 0000000000000000 *UND* _abcd 于是觉得很奇怪，就上网搜了一下，找到了一篇 StackOverflow 讲了这个问题。解决方案很简单，就是：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jia.je/programming/2017/12/12/lsp-and-cpp/</link>
      <pubDate>Tue, 12 Dec 2017 08:13:40 +0800</pubDate>
      
      <guid>https://jia.je/programming/2017/12/12/lsp-and-cpp/</guid>
      <description>之前时间，巨硬发布了LSP（Language Server Protocol），目的是解决目前IDE和各语言的m+n问题。想法很好，不过直到最近，终于有我觉得可以用的工具出来了，并且已经代替了我在使用的其它的插件。
由于我最近主要就是做做程设作业，做做OJ这些，主要就是和C++打交道。所以我当然就开始找一些比较成熟的C++的LSP server。有一个 Sourcegraph 维护的 langserver.org ，上面有着目前的各个语言和编辑器/IDE的支持情况，我刚才提到的cquery也会加入到这个列表里去。从这个列表里可以看到，我用的比较多的Python和Haskell都已经有不错的的LSP server，我已经开始在本地体验pyls和hie了，感觉做得挺不错的。
回到C++，我的主力编辑器是Emacs，其次是CLion，而Emacs上的LSP支持 lsp-mode也在快速发展，与之配合的lsp-ui 也出现了很多很棒的功能。
下面开始编译并配置cquery：
git clone https://github.com/jacobdufault/cquery --recursive cd cquery ./waf configure # to use system clang, append --use-system-clang ./waf build 然后配置Emacs：
(use-package lsp-mode  :ensure t  :diminish  lsp-mode  :commands  (lsp-mode)  :config  (lsp-define-stdio-client  lsp-pyls  &amp;#34;python&amp;#34;  #&amp;#39;get-project-root  &amp;#39;(&amp;#34;/usr/local/bin/pyls&amp;#34;)))  (use-package lsp-ui  :commands  lsp-ui-mode  :init  (add-hook &amp;#39;lsp-mode-hook &amp;#39;lsp-ui-mode))  (use-package cquery  :load-path  &amp;#34;path_to_cquery/emacs&amp;#34;  :config  (setq  cquery-executable &amp;#34;path_to_cquery/build/app&amp;#34;  cquery-resource-dir &amp;#34;path_to_cquery/clang_resource_dir&amp;#34;)) 接下来，需要配置 基于Clang的 工具都需要的 Compilation Database 。Sacrasm对这个有一个非常完整的总结 ，可以查看里面的方法。我这里推荐在CMake项目中用CMake自带的，加上nickdiego/compiledb-generator 应付基于Makefile/Autotools的项目。如果都不适用，就按照cquery的README写一个简单的.</description>
    </item>
    
  </channel>
</rss>
