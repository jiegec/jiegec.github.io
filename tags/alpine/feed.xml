<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>alpine on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/alpine/</link>
    <description>Recent content in alpine on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Sep 2020 23:42:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/alpine/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在 rpi4 上用 PXE 运行 Alpine Linux</title>
      <link>https://jia.je/devops/2020/09/11/alpine-rpi-pxe/</link>
      <pubDate>Fri, 11 Sep 2020 23:42:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/09/11/alpine-rpi-pxe/</guid>
      <description>背景 需要给 rpi 配置一个 pxe 的最小环境，然后看到 alpine 有 rpi 的支持，所以尝试给 rpi4 配置 alpine 。
PXE 设置 第一步是设置 rpi4 的启动模式，打开 BOOT UART 并且打开 网络启动：
&amp;gt; cd /lib/firmware/raspberrypi/bootloader/critical &amp;gt; rpi-eeprom-config pieeprom-2021-04-29.bin &amp;gt; config.txt $ cat config.txt [all] BOOT_UART=1 WAKE_ON_GPIO=1 POWER_OFF_ON_HALT=0 DHCP_TIMEOUT=45000 DHCP_REQ_TIMEOUT=4000 TFTP_FILE_TIMEOUT=30000 TFTP_IP= TFTP_PREFIX=0 BOOT_ORDER=0x1 SD_BOOT_MAX_RETRIES=3 NET_BOOT_MAX_RETRIES=5 [none] FREEZE_VERSION=0 &amp;gt; sed &amp;#39;s/BOOT_UART=0/BOOT_UART=1/;s/BOOT_ORDER=0x1/BOOR_ORDER=0x12/&amp;#39; config.txt &amp;gt; config-pxe.txt &amp;gt; rpi-eeprom-config --out pieeprom-2021-04-29-pxe.bin --config config-pxe.txt pieeprom-2021-04-29.bin &amp;gt; rpi-eeprom-update -d -f pieeprom-2021-04-29-pxe.bin &amp;gt; reboot 重启以后，可以用 vcgencmd bootloader_config 查看当前的启动配置，看是否正确地更新了启动配置。比较重要的是 BOOT_ORDER，0x12 表示先尝试网络启动，再尝试 SD 卡启动。</description>
    </item>
    
    <item>
      <title>在古老的 OS 上运行一个干净的新的环境</title>
      <link>https://jia.je/devops/2019/03/21/new-clean-env-on-old-os/</link>
      <pubDate>Thu, 21 Mar 2019 22:46:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2019/03/21/new-clean-env-on-old-os/</guid>
      <description>由于某些课程的原因，需要在一个 CentOS 7 上跑一些编译和运行代码。看到这么古老的软件，我心想不行，肯定要找新一些的软件来用。首先想到的是 tmux ，于是按照网上的脚本 很快装了一个 tmux 2.8 版本，果然好了很多。但是常用的很多软件依然是个问题。试了一下最近比较新的 code-server ，因为ABI问题跑不起来。
于是开始想玩骚操作。首先想到的是 Gentoo Prefix ，不过既然是别人的机器，还是算了。又找了 fakeroot 配合 alpine rootfs 的方案，但编译不过，估计是内核版本问题。又试了一下 fakechroot ，但它需要配合 fakeroot 使用，这就凉了。
然后又找了一些替代方案。一是 uchroot ，但由于 CMake 版本太老也编译不过。最后发现了 PRoot ，直接提供 prebuilt 然后很容易就可以跑起来：
$ ./proot -b /proc -b /dev -r $CHROOT /bin/busybox sh 于是就进到了 alpine 的 rootfs 中，下载地址。进去以后发现没有编辑器，于是出来把 apk 的源改了，加了 resolv.conf ，就成功地安装了很多很新的软件了。</description>
    </item>
    
  </channel>
</rss>
