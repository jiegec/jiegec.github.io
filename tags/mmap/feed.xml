<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mmap on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jiege.ch/tags/mmap/</link>
    <description>Recent content in mmap on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Feb 2020 18:11:00 +0800</lastBuildDate>
    
	<atom:link href="https://jiege.ch/tags/mmap/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在 macOS 上带执行权限 mmap 一个已删除文件遇到的问题和解决方案</title>
      <link>https://jiege.ch/software/2020/02/07/macos-mmap-exec/</link>
      <pubDate>Fri, 07 Feb 2020 18:11:00 +0800</pubDate>
      
      <guid>https://jiege.ch/software/2020/02/07/macos-mmap-exec/</guid>
      <description>背景 实验环境：macOS Catalina 10.15.2
最近在 rcore-rs/zircon-rs 项目中遇到一个比较玄学的问题，首先需求是在 macOS 的用户进程里开辟一段地址空间，然后把这个地址空间多次映射（权限可能不同、同一块内存可能被映射到多个地址），通过 mmap 模拟虚拟地址的映射。采用的是如下的方案：
 在临时目录创建一个文件，把文件大小设为 16M（暂不考虑扩容） 需要映射一个虚拟地址到物理地址的时候，就对这个文件的物理地址偏移进行 FIXED 映射，虚拟地址就是期望的虚拟地址。  这样的方案在 Linux 下运行地很好，但在 macOS下总是以一定概率在第二部出现 EPERM。网上搜了很多，但也没搜到相关的信息，于是自己断断续续地研究了一下，现在有一个比较初步的结果。
TL；DR 先说结论：调用一个带 PROT_EXEC 并且映射文件的 mmap 时，macOS 会进行安全检测，如果此时发现文件在文件系统上消失了，它会认为这可能是一个恶意软件行为，进行拦截，返回 EPERM。
而代码实际上在第一步和第二步之间，把临时目录删了：由于进程持有 fd，所以文件并不会真的删掉，当软件退出的时候文件自然会删除，这是临时文件的常见做法（见 tmpfile(3)）。
研究过程 查看 Console 在网上一番搜索未果后，就尝试在 Console 里面寻找信息。照着程序名字搜索，可以找到一些信息：
temporarySigning type=1 matchFlags=0x0 path=/path/to/executable 这是编译这个 executable 的时候出现的，好像也没啥问题。然后解除过滤，在这个信息前后按照 syspolicyd 寻找：
initiating malware scan (... info_path: /path/to/temp/file proc_path: /path/to/executable) Unable (errno: 2) to read file at &amp;lt;private&amp;gt; for process path: &amp;lt;private&amp;gt; library path: &amp;lt;private&amp;gt; Disallowing load of &amp;lt;private&amp;gt; in 50001, &amp;lt;private&amp;gt; Library load (/path/to/temp/file) rejected: library load denied by system policy 这几条记录比较可疑，每次运行程序，如果跑挂了，就会出现这几条，如果没跑挂，就不会出现这一条。所以很大概率是被 macOS 拦截了。错误信息的用词是 library ，所以大概率是被当成加载动态库了，但既然内容是空的，所以我想的是文件名触碰到了什么奇怪的规则，然后文件名又是随机的，随机导致 EPERM 是概率性出现的，这好像很有道理。于是我把 tmpfile 换成了固定的路径，忽然就好了。但固定的路径只能保证同时只有一个程序在跑，如果路径拼接上pid，怎么删，谁来删又是一个问题。虽然可以放到 /tmp 下面然后随便搞，但 /tmp 的回收并不是那么积极，在临时目录下丢太多文件也会出现问题。</description>
    </item>
    
  </channel>
</rss>