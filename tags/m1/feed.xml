<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>m1 on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/m1/</link>
    <description>Recent content in m1 on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Jul 2023 22:36:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/m1/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在 Apple M1 上试用 Gentoo/Prefix</title>
      <link>https://jia.je/devops/2023/07/08/gentoo-prefix-m1/</link>
      <pubDate>Sat, 08 Jul 2023 22:36:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2023/07/08/gentoo-prefix-m1/</guid>
      <description>背景 上一次折腾 Gentoo/Prefix 是五年多以前，当时还是用的 Intel Mac，最近需要探索一下在现在的 macOS 系统上用 Gentoo/Prefix 会遇到哪些问题，因此今天在 Apple M1 上重新尝试一次。
安装 按照官网的文档，下载脚本并运行：
wget https://gitweb.gentoo.org/repo/proj/prefix.git/plain/scripts/bootstrap-prefix.sh chmod +x bootstrap-prefix.sh ./bootstrap-prefix.sh 按照提示输入即可。
编译使用了四到五个多小时，占用 3GB 的硬盘空间。成功以后进入 Gentoo Prefix：
./startprefix 折腾 编译并运行大概两个小时以后，遇到了编译错误：
Undefined symbols for architecture arm64: &amp;#34;_libintl_bindtextdomain&amp;#34;, referenced from: __locale_bindtextdomain in _localemodule.o &amp;#34;_libintl_dcgettext&amp;#34;, referenced from: __locale_dcgettext in _localemodule.o &amp;#34;_libintl_dgettext&amp;#34;, referenced from: __locale_dgettext in _localemodule.o &amp;#34;_libintl_gettext&amp;#34;, referenced from: __locale_gettext in _localemodule.o &amp;#34;_libintl_setlocale&amp;#34;, referenced from: __locale_setlocale in _localemodule.o __locale_localeconv in _localemodule.o &amp;#34;_libintl_textdomain&amp;#34;, referenced from: __locale_textdomain in _localemodule.</description>
    </item>
    
    <item>
      <title>在 M1 上运行 Windows ARM 虚拟机</title>
      <link>https://jia.je/os/2022/01/30/windows-on-arm-on-m1/</link>
      <pubDate>Sun, 30 Jan 2022 20:50:00 +0800</pubDate>
      
      <guid>https://jia.je/os/2022/01/30/windows-on-arm-on-m1/</guid>
      <description>目前 Windows ARM 出了预览版，可以从 Windows Insider Preview Downloads 下载，得到一个 9.5GB 的 vhdx 文件。
接着，用 qemu-img 转换为 vmdk 格式：
$ qemu-img convert Windows11_InsiderPreview_Client_ARM64_en-us_22533.vhdx -O vmdk -o adapter_type=lsilogic Windows11_InsiderPreview_Client_ARM64_en-us_22533.vmdk 转换后，在 VMWare Fusion for Apple Silicon Tech Preview 中，选择从已有的 vmdk 中创建虚拟机，启动前修改一些设置，特别是内存，默认 256MB 肯定不够，默认单核 CPU 也太少了一些。内存不足可能导致安装失败，记住要第一次启动前设置。
启动以后会无法访问网络，按照下面网页里的方法设置网络：
https://www.gerjon.com/vmware/vmware-fusion-on-apple-silicion-m1/
需要注意的是，bcdedit 选项填的 IP 地址一般是 bridge 上的地址，比如 bridge101 的地址。
然后就可以正常工作了！
在 VMWare 论坛里，还谈到了下面几个问题的解决方法：
为了让声音工作，可以修改 vmx 文件，设置 guestOS：
guestOS = &amp;#34;arm-windows11-64&amp;#34; 这样声音就可以正常播放了。
分辨率的问题，可以用 RDP 来解决：首先在虚拟机里打开 Remote Desktop，然后用 macOS 的 Microsoft Remote Desktop Beta 访问即可。</description>
    </item>
    
    <item>
      <title>在 M1 上用 QEMU 运行 Debian 虚拟机</title>
      <link>https://jia.je/software/2021/01/02/aarch64-debian-in-qemu-m1/</link>
      <pubDate>Sat, 02 Jan 2021 13:05:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2021/01/02/aarch64-debian-in-qemu-m1/</guid>
      <description>背景 看到 @jsteward 在 M1 的 QEMU 中运行了 Windows on ARM，所以我先来试试 Debian on AArch64，这样会简单一些。
参考：https://gist.github.com/niw/e4313b9c14e968764a52375da41b4278#file-readme-md
大约需要 3G 的硬盘空间。
安装 QEMU w/ M1 patches 目前上游的 QEMU 还不支持 M1 的 Hypervisor framework，需要打 patch：
git clone https://mirrors.tuna.tsinghua.edu.cn/git/qemu.git cd qemu git checkout master -b wip/hvf curl &amp;#39;https://patchwork.kernel.org/series/400619/mbox/&amp;#39;|git am --3way mkdir build cd build ../configure --target-list=aarch64-softmmu --enable-cocoa --disable-gnutls make -j4 编译后，得到 qemu-system-aarch64 的二进制
准备好文件系统 需要下载 EFI 固件 和 Debian 安装镜像，解压前者以后把文件放同一个目录中，并且创建需要的文件：
$ ls *.fd QEMU_EFI.fd QEMU_VARS.fd $ dd if=/dev/zero of=pflash0.</description>
    </item>
    
    <item>
      <title>Rust 在 M1 上的 Code Signing 问题和临时解决方法</title>
      <link>https://jia.je/programming/2020/12/04/workaround-rust-on-m1/</link>
      <pubDate>Fri, 04 Dec 2020 09:27:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2020/12/04/workaround-rust-on-m1/</guid>
      <description>不久前，rust 添加了 Tier2 的 aarch64-apple-darwin 的支持，试了一下，确实可以运行，不过当我编译的时候，出现：
error: failed to run custom build command for `xxxx v1.0 (/path/to/xxxx)` Caused by: process didn&amp;#39;t exit successfully: `/path/to/xxx/target/debug/build/xxx-xxxx/build-script-build` (signal: 9, SIGKILL: kill) 看了一下 Console.app 里面的 crash 日志，发现是 codesigning 问题。解决方法是，用 codesign 命令来签名：
# for build.rs codesign -s - target/debug/build/*/build-script-build # for dylib of some crates codesign -s - target/debug/deps/*.dylib # for final executable codesign -s - target/debug/xxx 多次编译并签名后，就可以正常运行最后的二进制了：
target/debug/xxxx: Mach-O 64-bit executable arm64 然后就可以了。等待上游添加 code signing 支持吧。</description>
    </item>
    
    <item>
      <title>ARM M1 MacBook Air 开箱</title>
      <link>https://jia.je/hardware/2020/11/19/arm-m1-macbookair/</link>
      <pubDate>Thu, 19 Nov 2020 18:35:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/11/19/arm-m1-macbookair/</guid>
      <description>购买 我是 11.12 的时候在 Apple Store 上下单的，选的是 MacBookAir，带 M1 芯片，8 核 CPU + 8 核 GPU，加了一些内存和硬盘。今天（11.19）的时候顺丰到货，比 Apple Store 上显示的预计到达时间 21-28 号要更早。另外，我也听朋友说现在一些线下的店也有货，也有朋友直接在京东上买到了 Mac mini，总之第一波 M1 的用户最近应该都可以拿到设备了。
现在这篇博客，就是在 ARM MBA 上编写的，使用的是 Intel 的 VSCode，毕竟 VSCode 的 ARM64 版不久后才正式发布。
开箱 从外观来看，一切都和 Intel MBA 一样，包装上也看不出区别，模具也是一样的。
进了系统才能看得出区别。预装的系统是 macOS Big Sur 11.0，之后手动更新到了目前最新的 11.0.1。
顺带 @FactorialN 同学提醒我在这里提一句：包装里有电源适配器，不太环保。
体验 ARM64 首先自然是传统艺能，证明一下确实是 Apple Silicon：
$ uname -a Darwin macbookair.lan 20.1.0 Darwin Kernel Version 20.1.0: Sat Oct 31 00:07:10 PDT 2020; root:xnu-7195.</description>
    </item>
    
  </channel>
</rss>
