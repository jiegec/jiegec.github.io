<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>windows on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/windows/</link>
    <description>Recent content in windows on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 May 2022 10:24:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/windows/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NUC11 ESXi 中 iGPU 直通虚拟机</title>
      <link>https://jia.je/system/2022/05/05/nuc11-igpu-passthrough/</link>
      <pubDate>Thu, 05 May 2022 10:24:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2022/05/05/nuc11-igpu-passthrough/</guid>
      <description>背景 之前在 NUC11PAKi5 上装了 ESXI 加几个虚拟机系统，但是自带的 iGPU Intel Iris Xe Graphics(Tiger Lake GT-2) 没用上，感觉有些浪费。因此想要给 Windows 直通。在直通到 Windows 后发现会无限重启，最后直通到 Linux 中。
步骤 第一步是到 esxi 的设备设置的地方，把 iGPU 的 Passthrough 打开，这时候会提示需要重启，但是如果重启，会发现还是处于 Needs reboot 状态。网上进行搜索，发现是 ESXi 自己占用了 iGPU 的输出，解决方法如下：
$ esxcli system settings kernel set -s vga -v FALSE 这样设置以后就不会在显卡输出上显示 dcui 了，这是一个比较大的缺点，但是平时也不用自带的显示输出，就无所谓了。
第二步，重启以后，这时候看设备状态就是 Active。回到 Windows 虚拟机，添加 PCI device，然后启动。这时候，我遇到了这样的错误：
Module ‘DevicePowerOn’ power on failed Failed to register the device pciPassthru0 搜索了一番，解决方法是关掉 IOMMU。在虚拟机设计中关掉 IOMMU，就可以正常启动了。
第三步，进入 Windows，这时候就可以看到有一个新的未知设备了，VID=8086，PID=9a49；等待一段时间，Windows 自动安装好了驱动，就可以正常识别了。GPU-Z 中可以看到效果如下：</description>
    </item>
    
    <item>
      <title>在 M1 上运行 Windows ARM 虚拟机</title>
      <link>https://jia.je/os/2022/01/30/windows-on-arm-on-m1/</link>
      <pubDate>Sun, 30 Jan 2022 20:50:00 +0800</pubDate>
      
      <guid>https://jia.je/os/2022/01/30/windows-on-arm-on-m1/</guid>
      <description>目前 Windows ARM 出了预览版，可以从 Windows Insider Preview Downloads 下载，得到一个 9.5GB 的 vhdx 文件。
接着，用 qemu-img 转换为 vmdk 格式：
$ qemu-img convert Windows11_InsiderPreview_Client_ARM64_en-us_22533.vhdx -O vmdk -o adapter_type=lsilogic Windows11_InsiderPreview_Client_ARM64_en-us_22533.vmdk 转换后，在 VMWare Fusion for Apple Silicon Tech Preview 中，选择从已有的 vmdk 中创建虚拟机，启动前修改一些设置，特别是内存，默认 256MB 肯定不够，默认单核 CPU 也太少了一些。内存不足可能导致安装失败，记住要第一次启动前设置。
启动以后会无法访问网络，按照下面网页里的方法设置网络：
https://www.gerjon.com/vmware/vmware-fusion-on-apple-silicion-m1/
需要注意的是，bcdedit 选项填的 IP 地址一般是 bridge 上的地址，比如 bridge101 的地址。
然后就可以正常工作了！
在 VMWare 论坛里，还谈到了下面几个问题的解决方法：
为了让声音工作，可以修改 vmx 文件，设置 guestOS：
guestOS = &amp;#34;arm-windows11-64&amp;#34; 这样声音就可以正常播放了。
分辨率的问题，可以用 RDP 来解决：首先在虚拟机里打开 Remote Desktop，然后用 macOS 的 Microsoft Remote Desktop Beta 访问即可。</description>
    </item>
    
    <item>
      <title>在 WSL 上开启一个 getty 到串口的方法</title>
      <link>https://jia.je/os/2018/05/25/opening-tty-terminal-in-wsl/</link>
      <pubDate>Fri, 25 May 2018 21:56:00 +0800</pubDate>
      
      <guid>https://jia.je/os/2018/05/25/opening-tty-terminal-in-wsl/</guid>
      <description>为了测试一个硬件的 terminal ，想在 Windows 上向串口开一个 tty ，跑各种软件来测试。这件事情在 Linux 上和 macOS 上都有实践，但一直不知道 Windows 上怎么搞。经过了一番搜索，找到了 https://blogs.msdn.microsoft.com/wsl/2017/04/14/serial-support-on-the-windows-subsystem-for-linux/ 和 https://unix.stackexchange.com/a/123559 的方案。
以 COM5 为例：
$ sudo chmod 666 /dev/ttyS5 $ sudo agetty -s 115200 ttyS5 linux 这样就可以看到一个登录的界面了。
在 macOS 上(https://superuser.com/questions/1059744/serial-console-login-on-osx)：
$ screen /dev/tty.SLAB_USBtoUART 115200 # type C-b : exec ::: /usr/libexec/getty std.115200 </description>
    </item>
    
    <item>
      <title>在 Archlinux 上用 winbind 配合 pam 配置 Windows AD 认证登录</title>
      <link>https://jia.je/system/2018/05/05/windows-ad-linux-pam/</link>
      <pubDate>Sat, 05 May 2018 15:39:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2018/05/05/windows-ad-linux-pam/</guid>
      <description>作为不清真的网络管理员，为了配置一套完整的统一认证系统，陈老师采用了 Windows AD 的方法给这里配置统一认证。重装了系统，自然要把之前的统一认证再配到新装的 Archlinux 上。
参考资料： Active Directory Integration
首先安装相应的包：
pacman -S samba 我们还没有配好 Kerberos，所以跳过。
然后配置 /etc/samba/smb.conf ，以下是一个例子。可以根据文档微调。
[global] security = ads realm = YOUR-AD-HERE workgroup = YOUR-GROUP-HERE idmap uid = 10000-20000 idmap gid = 10000-20000 winbind enum users = yes winbind enum groups = yes template homedir = /home/%D/%U template shell = /bin/bash client use spnego = yes client ntlmv2 auth = yes encrypt passwords = yes winbind use default domain = yes restrict anonymous = 2 这样，域上的用户 user 会拿到 home 目录为 /home/YOUR-DOMAIN-HERE/user ，uid 在 10000-2000范围内的用户。在一会经过配置之后，可以通过 getent passwd 验证。</description>
    </item>
    
  </channel>
</rss>
