<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>synthesis on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/synthesis/</link>
    <description>Recent content in synthesis on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Mar 2022 15:22:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/synthesis/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Synopsys Design Compiler 综合实践</title>
      <link>https://jia.je/hardware/2022/03/14/design-compiler-synthesis/</link>
      <pubDate>Mon, 14 Mar 2022 15:22:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/03/14/design-compiler-synthesis/</guid>
      <description>工艺库 综合很重要的一步是把 HDL 的逻辑变成一个个单元，这些单元加上连接方式就成为了网表。那么，基本单元有哪些，怎么决定用哪些基本单元？
这个就需要工艺库了，工艺库定义了一个个单元，单元的引脚、功能，还有各种参数，这样 Design Compiler 就可以按照这些信息去找到一个优化的网表。
Liberty 格式 网上可以找到一些 Liberty 格式的工艺库，比如 Nangate45，它的设定是 25 摄氏度，1.10 伏，属于 TT（Typical/Typical）的 Process Corner。
在里面可以看到一些基本单元的定理，比如 AND2_X1，就是一个 drive strength 是 1 的二输入与门：
cell (AND2_X1) { drive_strength : 1; pin (A1) { direction : input; } pin (A2) { direction : input; } pin (ZN) { direction : output; function : &amp;#34;(A1 &amp;amp; A2)&amp;#34;; } /* ... */ } 这样就定义了两个输入 pin，一个输出 pin，还有它实现的功能。还有很重要的一点是保存了时序信息，比如：
lu_table_template (Timing_7_7) { variable_1 : input_net_transition; variable_2 : total_output_net_capacitance; index_1 (&amp;#34;0.</description>
    </item>
    
    <item>
      <title>OpenROAD Flow 初尝试</title>
      <link>https://jia.je/hardware/2022/03/12/try-openroad-flow/</link>
      <pubDate>Sat, 12 Mar 2022 22:52:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/03/12/try-openroad-flow/</guid>
      <description>背景 最近在尝试接触一些芯片前后端的知识。正好有现成的开源工具链 OpenROAD 来做这个事情，借此机会来学习一下整个流程。
尝试过程 首先 clone 仓库 OpenROAD-flow-scripts，然后运行：./build_openroad.sh，脚本会克隆一些仓库，自动进行编译。
编译中会找不到一些库，比如可能需要安装这些依赖：liblemon-dev libeigen3-dev libreadline-dev swig，此外运行的时候还需要 klayout 依赖。
如果遇到解决 cmake 找不到 LEMON 的问题，这是一个 BUG，可以运行下面的命令解决：
cd /usr/lib/x86_64-linux-gnu/cmake/lemon cp lemonConfig.cmake LEMONConfig.cmake 编译后整个目录大概有 4.8G，输出的二进制目录是 133M。
如果要跑一下样例里的 nangate45 工艺的 gcd 例子，运行：
cd flow make DESIGN_CONFIG=./designs/nangate45/gcd/config.mk 分析 GCD 测例 这个测例的代码提供了这样一个接口：
module gcd (  input wire clk,  input wire [ 31:0] req_msg,  output wire req_rdy,  input wire req_val,  input wire reset,  output wire [ 15:0] resp_msg,  input wire resp_rdy,  output wire resp_val ); endmodule 从名字可以推断出，外部通过 req 发送请求到 GCD 模块，然后模块计算出 GCD 后再返回结果。</description>
    </item>
    
  </channel>
</rss>
