<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sram on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/sram/</link>
    <description>Recent content in sram on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 May 2022 08:40:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/sram/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「教学」异步 SRAM 时序</title>
      <link>https://jia.je/hardware/2022/05/19/async-sram-timing/</link>
      <pubDate>Thu, 19 May 2022 08:40:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2022/05/19/async-sram-timing/</guid>
      <description>背景 在一些场合里，我们会使用异步的（即没有时钟信号的）外部 SRAM 来存储数据，而我们经常使用的很多外部接口都是同步接口（即有时钟信号的接口），比如 SPI 和 I2C 等等，UART 虽然是异步，但是它速度很低，不怎么需要考虑时序的问题。所以在 FPGA 上编写一个正确的异步 SRAM 控制器是具有一定的挑战的。
寄存器时序 考虑到读者可能已经不记得寄存器的时序了，这里首先来复习一下 setup 和 hold 的概念。如果你已经比较熟悉了，可以直接阅读下一节。
寄存器在时钟的上升沿（下图的 a）进行采样，为了保证采样的稳定性，输入引脚 D 需要在时钟上升沿之前 \(t_{su}\) 的时刻（下图的 b）到时钟上升沿之后 \(t_h\) 的时刻（下图的 c）保持稳定，输出引脚 Q 会在时钟上升沿之后 \(t_{cko}\) 的时刻（下图的 d）变化：
{ signal: [ { name: &#34;C&#34;, wave: &#34;p.&#34;, period: 4, node: &#34;.a&#34;}, { name: &#34;D&#34;, wave: &#34;x..3.x&#34;, phase: 0.2, node: &#34;...b.c&#34;}, { name: &#34;Q&#34;, wave: &#34;x...3.&#34;, node: &#34;....d&#34;} ] }  接口 首先我们来看看异步 SRAM 的接口。下文中，采用 IS61WV102416BLL-10TLI 和 AS7C34098A-10TCN 作为例子：</description>
    </item>
    
  </channel>
</rss>
