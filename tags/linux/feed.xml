<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/linux/</link>
    <description>Recent content in linux on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Oct 2021 08:35:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/linux/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>移植系统到 Rocket Chip on VCU128</title>
      <link>https://jia.je/hardware/2021/10/18/port-system-to-rocket-chip-on-vcu128/</link>
      <pubDate>Mon, 18 Oct 2021 08:35:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/10/18/port-system-to-rocket-chip-on-vcu128/</guid>
      <description>背景 最近需要在 VCU128 上搭建一个 SOC，然后想到可以把 OpenSBI、U-Boot 和 Linux 移植到这个平台上方便测试，于是又开始折腾这些东西。代码仓库都已经开源：
 rocket-chip-vcu128 opensbi u-boot linux  Rocket Chip on VCU128 第一部分是基于之前 rocket2thinpad 在 Thinpad 上移植 Rocket Chip 的经验，做了一些更新，主要是因为 VCU128 的外设不大一样，同时我也要运行更复杂的程序，主要做了这些事情：
 添加了 VCU128 的内存和外设：HBM、SPI、I2C、UART、ETH 打开了更多核心选项：S-mode 和 U-mode  主要踩过的坑：
 BSCAN 不工作，估计是因为一些参数不对，@jsteward 之前在 zcu 平台上做了一些测试，估计要用类似的办法进行修改；我最后直接去掉了这部分逻辑 这个板子的 PHY RESET 信号要通过 I2C 接口访问 TI 的 Port Expander，所以没法直接连，要通过 gpio 输出来手动 reset SPI Startup Flash 的时序配置，见我之前的博客 Xilinx PCS/PMA IP 也会自己挂一个设备到 MDIO bus上，应该有自己的 PHY 地址，而不要和物理的 PHY 冲突  U-Boot 在 U-Boot 上花了比较多的时间，用它的目的主要是：</description>
    </item>
    
    <item>
      <title>一次从 RHEL 6 到 CentOS 7 的更新</title>
      <link>https://jia.je/system/2021/08/30/rhel6-upgrade-centos7/</link>
      <pubDate>Mon, 30 Aug 2021 13:20:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2021/08/30/rhel6-upgrade-centos7/</guid>
      <description>背景 有一台 RHEL 6 的服务器，各种软件版本太老了，用起来很难受，因此想升级。一开始想升级到 RHEL 7，但是发现必须要从 RedHat 下载 ISO，比较慢，所以我就先切换到 CentOS 6，再升级到 CentOS 7
过程 RHEL 6 Pre upgrade 一开始还是打算升级到 RHEL 7，所以跟随 RedHat 的文档去做 pre upgrade check，发现有一步要跑好久，网上搜了一下，发现这个步骤会扫描已有的各种程序，检查升级以后会不会出现不能运行的问题。但是如果有很多小文件，这一个过程就会进行很久，好在可以设置 exclusion 目录。最后检查出来的结果就是 GNOME 没法升级，建议卸载。
倒腾了一下升级工具，发现需要离线安装，比较麻烦，我就干脆换 CentOS 了。
RHEL 6 -&amp;gt; CentOS 6 首先，把软件源都切换到 CentOS，这一步很简单，因为包都是一样的。只不过，因为 CentOS 6 在 centos-vault 里面，所以用起来比较麻烦。
CentOS 6 -&amp;gt; CentOS 7 由于 CentOS 6 到 CentOS 7 升级涉及的改动比较多，官方提供了一个升级工具。一开始，我想直接升级到 CentOS 7 最新版本，但是报错，看到网上说可以升级到 CentOS 7 的早期版本，试了一下，确实没问题。
一通升级以后，重启，进入更新过程，发现很多包都安装失败了。重启以后，因为找不到 rootfs，挂在了 dracut 的 initramfs 里面。</description>
    </item>
    
    <item>
      <title>USB/IP 模拟 USB 设备</title>
      <link>https://jia.je/software/2020/05/15/usb-ip-simulation/</link>
      <pubDate>Fri, 15 May 2020 20:20:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2020/05/15/usb-ip-simulation/</guid>
      <description>背景 2018 年的时候发过一篇博客，讲如何用 USB/IP 协议在两台 Linux 电脑之间共享 USB 设备。最近刚好有一个需求，就是针对一个现成的 USB device 的代码，通过 USB/IP 模拟出一个 USB 设备，然后进行调试。
USB/IP 协议 USB/IP 只有一个简略的文档，为数不多的使用 USB/IP 的代码，所以有一些细节没有说的很清楚，只能一点点去尝试。
首先，USB/IP 基于 TCP，端口号 3240 。客户端向服务端发送请求，服务端向客户端进行回应。
请求的类型：OP_REQ_DEVLIST OP_REQ_IMPORT USBIP_CMD_SUBMIT 和 USBIP_CMD_UNLINK
回应的类型：OP_REP_DEVLIST OP_REP_IMPORT USBIP_RET_SUBMIT USBIP_RET_UNLINK
工作的过程大概如下：
 OP_REQ_DEVLIST 请求获取设备列表 OP_REP_DEVLIST 返回设备列表 OP_REQ_IMPORT 请求 USB 设备 OP_REP_IMPORT 返回 USB 设备 USBIP_CMD_SUBMIT 发送 URB USBIP_RET_SUBMIT 返回 URB  （先不考虑 CMD_UNLINK 和 RET_UNLINK）
其中前面四个比较简单清晰，所需要的字段也都是 Descriptor 中对应的字段。后面两个就相对复杂一些：URB data 的长度需要根据 endpoint 类型和 direction 共同决定。URB 实际上是 Linux 内核里的一个数据结构。</description>
    </item>
    
    <item>
      <title>TP-Link Archer T4U V3 Linux 驱动安装</title>
      <link>https://jia.je/system/2020/01/05/archer-t4u-v3-driver/</link>
      <pubDate>Sun, 05 Jan 2020 01:21:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2020/01/05/archer-t4u-v3-driver/</guid>
      <description>之前因为 MacBookPro 内置的 Wi-Fi 总是有问题，就找了个 USB 的无线网卡：TP-Link Archer T4U V3（VID：2357，PID：0115），这个网卡也没有主线的驱动，在网上找到了现成的驱动：cilynx/rtl88x2bu，按照 README 用 DKMS 安装即可，实测可用。</description>
    </item>
    
    <item>
      <title>MacBookPro 14,3 Wi-Fi 驱动问题解决方案</title>
      <link>https://jia.je/system/2020/01/05/macbookpro-linux-wifi/</link>
      <pubDate>Sun, 05 Jan 2020 00:53:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2020/01/05/macbookpro-linux-wifi/</guid>
      <description>之前在 MacBookPro 14,3 安装 Linux 后，很多东西的驱动都有了解决方法，参考 1，参考 2，触摸板和键盘等等都可以正常使用，触摸板的使用效果比我意料要好一些，虽然还是没有 macOS 原生那么好。但 Wi-Fi 一直有能扫到信号但连不上的问题，最近终于有了比较完善的解决方案，地址，也是两个月前才出来的方案，我测试了一下，确实可以很好的解决网络问题，网卡型号是 BCM43602，驱动用的是 brcmfmac。
另一方面，带 T2 的 MacBook 似乎也有了支持，见 aunali1/linux-mbp-arch，有一些尚未 upstream 的 patch，但我没有设备，就没有测试了。需要吐槽的是 ArchWiki 不怎么更新新 Model 的 MacBook 的教程，都是到处找散落的 github repo 和 gist 找别人的方案。
P.S. 可以正常工作的有：Wi-Fi，键盘，触摸板，Touchbar，内置摄像头，键盘背光，蓝牙 P.P.S MacBookPro11,2 的网卡是 BCM4360，直接用 broadcom-wl 驱动就可以。</description>
    </item>
    
    <item>
      <title>在 macOS 上创建 ESP 镜像文件</title>
      <link>https://jia.je/software/2019/09/14/create-esp-partition-macos/</link>
      <pubDate>Sat, 14 Sep 2019 16:07:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2019/09/14/create-esp-partition-macos/</guid>
      <description>最近 rCore 添加了 UEFI 支持，在 QEMU 里跑自然是没有问题，然后尝试放到 VMWare 虚拟机里跑，这时候问题就来了：需要一个带有 ESP 盘的 vmdk 虚拟盘。搜索了一下网络，找到了解决方案：
hdiutil create -fs fat32 -ov -size 60m -volname ESP -format UDTO -srcfolder esp uefi.cdr 其中 60m  esp 和 uefi.cdr 都可以按照实际情况修改。它会把 esp 目录下的文件放到 ESP 分区中，然后得到一个镜像文件：
uefi.cdr: DOS/MBR boot sector; partition 1 : ID=0xb, start-CHS (0x3ff,254,63), end-CHS (0x3ff,254,63), startsector 1, 122879 sectors, extended partition table (last) 接着转换为 vmdk ：
qemu-img convert -O vmdk uefi.cdr uefi.vmdk 这样就可以了。</description>
    </item>
    
    <item>
      <title>在 Linux 下捕获 Framebuffer</title>
      <link>https://jia.je/software/2019/08/12/framebuffer-capture/</link>
      <pubDate>Mon, 12 Aug 2019 20:18:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2019/08/12/framebuffer-capture/</guid>
      <description>最近需要在 linux 下抓取 Framebuffer 的内容，在网上找到了两种方法，在我这里只有第二、第三种可以成功，没有细究具体原因，可能与我的 Framebuffer 配置有关。方法如下：
 fbgrab ：命令就是 fbgrab image.png ，直接得到 png 文件，格式是对的，但是用软件打开就是一片空白。用 ImageMagick 转换为 jpg可以看到一些内容，但是和实际有些不一样。 fbdump ：命令就是 fbdump &amp;gt; image.ppm ，得到裸的 ppm 文件，图像是正确的，也可以转换为别的格式正常打开。 cat+脚本处理：直接 cat /dev/fb0 &amp;gt; image.rgb ，然后用下面的脚本转换为 png 。由于 Framebuffer 格式为 RGB ，本来 A 所在的 channel 都为 0 ，所以用一些软件直接打开都是空白，只好写了脚本直接跳过 Alpha Channel 。  Framebuffer 配置（ fbset 输出）：
mode &amp;quot;640x480-0&amp;quot; # D: 0.000 MHz, H: 0.000 kHz, V: 0.000 Hz geometry 640 480 1024 480 32 timings 0 0 0 0 0 0 0 accel false rgba 8/16,8/8,8/0,0/0 endmode 转换脚本（参考[Tips] 擷取framebuffer畫面）：</description>
    </item>
    
    <item>
      <title>在 Linux 中用 C 代码获取 DNS 服务器列表</title>
      <link>https://jia.je/software/2019/04/30/get-resolvers-in-c/</link>
      <pubDate>Tue, 30 Apr 2019 17:39:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2019/04/30/get-resolvers-in-c/</guid>
      <description>最近在做一个作业的时候，发现里面有个步骤是获取 Linux 系统中的 DNS 服务器列表，它的方法很粗暴，直接 cat grep cut 再处理。我就在想有没有完全代码的实现，然后搜了一下，果然有：
#include &amp;lt;resolv.h&amp;gt;// ... res_init(); // _res.nsaddr_list is an array of resolvers 用到了全局变量 _res ，虽然很 hacky ，但是至少是工作的，不清楚兼容性几何。</description>
    </item>
    
    <item>
      <title>使用 Rust 实现 VirtIO 驱动</title>
      <link>https://jia.je/programming/2019/01/29/virtio-drivers-implementation/</link>
      <pubDate>Tue, 29 Jan 2019 17:23:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2019/01/29/virtio-drivers-implementation/</guid>
      <description>背景 最近在给 rCore 添加驱动层的支持。一开始是想做网卡驱动，后来发现， qemu-system-riscv32 只支持如下的驱动：
# qemu-system-riscv32 -device help Storage devices: name &amp;#34;scsi-cd&amp;#34;, bus SCSI, desc &amp;#34;virtual SCSI CD-ROM&amp;#34; name &amp;#34;scsi-disk&amp;#34;, bus SCSI, desc &amp;#34;virtual SCSI disk or CD-ROM (legacy)&amp;#34; name &amp;#34;scsi-hd&amp;#34;, bus SCSI, desc &amp;#34;virtual SCSI disk&amp;#34; name &amp;#34;virtio-blk-device&amp;#34;, bus virtio-bus name &amp;#34;virtio-scsi-device&amp;#34;, bus virtio-bus Network devices: name &amp;#34;virtio-net-device&amp;#34;, bus virtio-bus Input devices: name &amp;#34;virtconsole&amp;#34;, bus virtio-serial-bus name &amp;#34;virtio-keyboard-device&amp;#34;, bus virtio-bus name &amp;#34;virtio-mouse-device&amp;#34;, bus virtio-bus name &amp;#34;virtio-serial-device&amp;#34;, bus virtio-bus name &amp;#34;virtio-tablet-device&amp;#34;, bus virtio-bus name &amp;#34;virtserialport&amp;#34;, bus virtio-serial-bus Display devices: name &amp;#34;virtio-gpu-device&amp;#34;, bus virtio-bus Misc devices: name &amp;#34;loader&amp;#34;, desc &amp;#34;Generic Loader&amp;#34; name &amp;#34;virtio-balloon-device&amp;#34;, bus virtio-bus name &amp;#34;virtio-crypto-device&amp;#34;, bus virtio-bus name &amp;#34;virtio-rng-device&amp;#34;, bus virtio-bus 所以要实现网卡的话，只能实现这里的 virtio-net-device ，而 VirtIO 驱动之间有很多共通的地方，于是顺带把 gpu mouse 和 blk 实现了。</description>
    </item>
    
    <item>
      <title>Mac 上安装 Arch Linux ， ZFS 真香</title>
      <link>https://jia.je/software/2018/11/26/zfs-on-macos-and-linux/</link>
      <pubDate>Mon, 26 Nov 2018 20:51:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/11/26/zfs-on-macos-and-linux/</guid>
      <description>最近在 Mac 上装了 Arch Linux ，按照 Mac - Arch Linux Wiki 一路一路走，创建单独的一个 EFI 分区给 Arch Linux 放 GRUB 和内核，一个 ext4 作为根分区。由于 Arch ISO 不支持 Broadcom 的无线网卡，于是先拿 Apple Ethernet Adapter 连到路由器上装机。然后把一些需要的驱动装上了，桌面用的 KDE Plasma ，Trackpad 用的 xf86-input-mtrack-git ， HiDPI 设置为 2x Scale ，各种体验都还可以，就是 Wi-Fi 的 802.1X 没配置好，然后 kwalletd5 老是崩没找到原因。常见的应用除了微信基本都有，也终于可以体验 Steam Play ，利用 Proton 在 Linux 上跑一些只支持 Windows 的游戏，不过我已经很少玩游戏了。
然后我就想，怎么做 macOS 和 Linux 之间的文件共享。典型的操作可能是 exFAT ，但是作为数据盘的话，这还是不大适合。或者就直接用 ext4 ，配合 extFS For Mac by Paragon 使用，也可以，最后我选择了 ZFS 。</description>
    </item>
    
    <item>
      <title>USB/IP 实践</title>
      <link>https://jia.je/software/2018/11/20/usb-ip/</link>
      <pubDate>Tue, 20 Nov 2018 18:50:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/11/20/usb-ip/</guid>
      <description>之前一直想玩 USB/IP ，但是一直没有找俩 Linux 设备然后共享，今天终于尝试了一下，没有什么大问题。这次采用的设备是 Raspberri Pi 3 和 SaltedFish Pi 。一开始尝试从后者向前者共享，但总是出现这个错误：
libusbip: error: udev_device_get_sysattr_value failed usbip: error: open vhci_driver 然后我反过来做就好了，比较神奇。
主要过程如下：
 pacman -S usbip 安装用户态软件 systemctl enable --now usbipd 启动 USB/IP 的端口监听 daemon usbip list -l 查看本地有哪些 USB 设备可以共享 usbip bind -b [BUS_ID] 把指定的 USB 设备共享出去，其中 BUS_ID 从上个命令中查看 usbip list -r [IP] 在另一个设备上查看这个设备共享的 USB 设备，可以看到许多信息 usbip attach -r [IP] -b [BUS_ID] 把对方共享的 USB 设备 attach 到本地  效果：把一个 U 盘成功映射到了本地：</description>
    </item>
    
    <item>
      <title>咸鱼派的启动配置</title>
      <link>https://jia.je/hardware/2018/11/05/salted-fish-pi/</link>
      <pubDate>Mon, 05 Nov 2018 22:17:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2018/11/05/salted-fish-pi/</guid>
      <description>最近刚拿到了一个咸鱼派的测试板子，准备自己把 U-Boot 和 Linux 内核这一套东西跑通，都用主线的东西，尽量减少魔改的部分。首先是编译 u-boot ，我用的是现在的 master 分支的最新版 99431c1c ：
$ # Archlinux $ sudo pacman -Sy arm-none-eabi-gcc $ make LicheePi_Zero_defconfig $ make ARCH=arm CROSS_COMPILE=arm-none-eabi- -j24 这时候会得到一个 u-boot-sunxi-with-spl.bin 的文件。我们只要把它写到 SD 卡的 8192 偏移处，就可以把 U-Boot 跑起来了：
$ diskutil unmountDisk /dev/disk4 $ sudo dd if=u-boot-sunxi-with-spl.bin of=/dev/disk4 bs=1024 seek=8 接着我们做一下分区。我采用的是 MBR 分区，这样保证不会和 U-Boot 冲突。使用 fdisk进行分区，我从 1M 处开始分了一个 10M 的 FAT-32 分区作为启动分区，然后之后都是 EXT4 的系统盘分区。接着就是编译内核。
我用的是八月份时候的 4.18.2 内核，虽然不是很新但也足够新了。一番调整内核参数后，得到了一个可用的内核，然后把 zImage 和 sun8i-v3s-licheepi-zero.dtb 都复制到刚才创建的 FAT-32 启动分区，然后进入 U-Boot 进行启动：</description>
    </item>
    
    <item>
      <title>构建简易的 initramfs</title>
      <link>https://jia.je/os/2018/07/16/build-custom-initramfs/</link>
      <pubDate>Mon, 16 Jul 2018 03:43:00 +0800</pubDate>
      
      <guid>https://jia.je/os/2018/07/16/build-custom-initramfs/</guid>
      <description>一直对 Linux 的启动很感兴趣，但对 initrd 和 initramfs 等概念不大了解，于是上网找了资料，自己成功地看到了现象。
参考资料： Build and boot a minimal Linux system with qemu Custom Initramfs initramfs vs initrd ramfs, rootfs and initramfs The Kernel Newbie Corner: &amp;ldquo;initrd&amp;rdquo; and &amp;ldquo;initramfs&amp;rdquo;&amp;ndash; What&amp;rsquo;s Up With That?
具体步骤：
$ cat hello.c #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; int main() { for (;;) { printf(&amp;#34;Hello, world!\n&amp;#34;); } } $ gcc -static hello.c -o init $ echo init | cpio -o -H newc | gzip &amp;gt; initrd $ qemu-system-x86_64 -kernel /boot/vmlinuz-linux -initrd initrd -nographic -append &amp;#39;console=ttyS0&amp;#39; # Use C-a c q u i t &amp;lt;Enter&amp;gt; to exit 可以看到过一会（三四秒？），可以看到满屏的 Hello world 在输出。</description>
    </item>
    
    <item>
      <title>在脚本中寻找 X11 的 DISPLAY 和 XAUTHORITY</title>
      <link>https://jia.je/programming/2018/05/11/finding-x11-display-and-xauthority/</link>
      <pubDate>Fri, 11 May 2018 14:21:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/05/11/finding-x11-display-and-xauthority/</guid>
      <description>之前在搞一个小工具，在里面需要访问 X11 server ，但是访问 X11 server 我们需要两个东西：DISPLAY和XAUTHORITY两个环境变量。但是，由于它们在不同的发型版和Display Manager下都有些不同，所以花了不少功夫才写了一些。
为了验证我们是否可以连上 X11 server， 我们使用这一句：
DIMENSIONS=$(xdpyinfo | grep &amp;#39;dimensions:&amp;#39; | awk &amp;#39;{print $2;exit}&amp;#39;) 它尝试打开当前的 DISPLAY，并且输出它的分辨率。接下来，我对不同的一些发型版，综合网上的方法，尝试去找到正确的环境变量。
对于 Debian:
DISPLAY=$(w -hs | awk -v tty=&amp;#34;$(cat /sys/class/tty/tty0/active)&amp;#34; &amp;#39;$2 == tty &amp;amp;&amp;amp; $3 != &amp;#34;-&amp;#34; {print $3; exit}&amp;#39;) USER=$(w -hs | awk -v tty=&amp;#34;$(cat /sys/class/tty/tty0/active)&amp;#34; &amp;#39;$2 == tty &amp;amp;&amp;amp; $3 != &amp;#34;-&amp;#34; {print $1; exit}&amp;#39;) eval XAUTHORITY=~$USER/.Xauthority export DISPLAY export XAUTHORITY DIMENSIONS=$(xdpyinfo | grep &amp;#39;dimensions:&amp;#39; | awk &amp;#39;{print $2;exit}&amp;#39;) 对于 Archlinux：</description>
    </item>
    
    <item>
      <title>在 macOS 和 Linux 之间搭建 tinc 网络</title>
      <link>https://jia.je/networking/2018/05/09/tinc-between-macos-and-linux/</link>
      <pubDate>Wed, 09 May 2018 10:02:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/05/09/tinc-between-macos-and-linux/</guid>
      <description>一直听说 tinc 比较科学，所以尝试自己用 tinc 搭建一个网络。这里，macOS 这段没有固定 IP 地址，Linux 机器有固定 IP 地址 linux_ip 。假设网络名称为 example , macOS 端名为 macos 地址为 192.168.0.2, linux 端名为 linux 地址为 192.168.0.1。
2018-11-11 注：本文用的 tinc 版本为 1.0.x ，而不是 1.1-pre ，两个分支命令不同，但协议可以兼容。
在 macOS 上配置：
brew install tinc mkdir -p /usr/local/etc/tinc/example 新建 /usr/local/etc/tinc/example/tinc.conf:
Name = macos Device = utun0 # use an unused number ConnectTo = linux 编辑 /usr/local/etc/tinc/example/tinc-up:
#!/bin/sh ifconfig $INTERFACE 192.168.0.2 192.168.0.1 mtu 1500 netmask 255.255.255.255 和 /usr/local/etc/tinc/example/tinc-down:</description>
    </item>
    
    <item>
      <title>使用 Nginx 转发 VMware ESXi</title>
      <link>https://jia.je/networking/2018/05/08/nginx-proxy-vmware-esxi/</link>
      <pubDate>Tue, 08 May 2018 19:26:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/05/08/nginx-proxy-vmware-esxi/</guid>
      <description>我们的 VMware ESXi 在一台 NAT Router 之后，但是我们希望通过域名可以直接访问 VMware ESXi 。我们首先的尝试是，把 8443 转发到它的 443 端口，比如：
socat TCP-LISTEN:8443,reuseaddr,fork TCP:esxi_addr:443 它能工作地很好（假的，如果你把 8443 换成 9443 它就不工作了），但是，我们想要的是，直接通过 esxi.example.org 就可以访问它。于是，我们需要 Nginx 在其中做一个转发的功能。在这个过程中遇到了很多的坑，最后终于是做好了 （VMware Remote Console等功能还不行，需要继续研究）。
首先讲讲为啥把 8443 换成 9443 不能工作吧 &amp;ndash; 很简单，ESXi 的网页界面会请求 8443 端口。只是恰好我用 8443 转发到 443， 所以可以正常工作。这个很迷，但是测试的结果确实如此。VMware Remote Console 还用到了别的端口，我还在研究之中。
来谈谈怎么配置这个 Nginx 转发吧。首先是 80 跳转 443:
server { listen 80; listen 8080; server_name esxi.example.org; return 301 https://$host$request_uri; } 这个很简单，接下来是转发 443 端口：
 server { listen 443 ssl; server_name esxi.</description>
    </item>
    
    <item>
      <title>搭建 FTP server behind NAT</title>
      <link>https://jia.je/networking/2018/05/08/ftp-behind-nat/</link>
      <pubDate>Tue, 08 May 2018 13:34:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/05/08/ftp-behind-nat/</guid>
      <description>我们出现新的需求，要把以前的 FTP 服务器迁移到 NAT 之后的一台机器上。但是，FTP 不仅用到 20 21 端口， PASV 还会用到高端口，这给端口转发带来了一些麻烦。我们一开始测试，直接在 Router 上转发 20 和 21 端口到 Server 上。但是很快发现， Filezilla 通过 PASV 获取到地址为 （内网地址，端口高8位，端口低8位），然后，Filezilla 检测出这个地址是内网地址，于是转而向 router_ip:port 发包，这自然是不会得到结果的。
此时我们去网上找了找资料，找到了一个很粗暴的方法：
iptables -A PREROUTING -i external_interface -p tcp -m tcp --dport 20 -j DNAT --to-destination internal_ip:20 iptables -A PREROUTING -i external_interface -p tcp -m tcp --dport 21 -j DNAT --to-destination internal_ip:21 iptables -A PREROUTING -i external_interface -p tcp -m tcp --dport 1024:65535 -j DNAT --to-destination internal_ip:1024-65535 有趣地是， macOS 自带的 ftp 命令（High Sierra似乎已经删去）可以正常使用。研究发现，它用 EPSV（Extended Passive Mode） 代替 PASV ，这里并没有写内网地址，因而可以正常使用。</description>
    </item>
    
    <item>
      <title>使用 iptables 和策略路由进行带源地址的 forwarding</title>
      <link>https://jia.je/networking/2018/05/06/nat-forwarding-with-src-address/</link>
      <pubDate>Sun, 06 May 2018 14:07:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/05/06/nat-forwarding-with-src-address/</guid>
      <description>陈老师打开他的服务器，突然发现 CPU 莫名高负载，然后发现是有一个用户被远程登录拿来挖矿了。但是这台机器在 NAT 后，所以登录的源地址全是 NAT 路由，所以不知道对方的地址是什么。我们为了能使用 fail2ban 来禁用多次尝试失败的 IP ，但又不想因为别人把 NAT 路由的地址给禁了，这样我们自己也用不了了。所以必须要让这台机器能够知道 ssh 的源地址，我们现在简单的 socat 方案不能满足这个需求。
需求：
 可以在外网连 NAT 路由的高端口（如2222）来访问这台机器。 在内网中，既可以直接连它的内网地址，也可以连 NAT 路由的高端口来访问这台服务器。此时，由于连 ssh 的机器就在同一个子网中，如果保留了源地址，服务器发的包会直接回来不经过 NAT 。所以我们还是保留了 socat 的方案。  实现方法：
在 NAT Router 上配置 DNAT ，这样发到 NAT Router 上的包就可以转发到服务器上：
iptables -t nat -A PREROUTING -i external_interface -p tcp -m tcp --dport 2222 -j DNAT --to-destination internal_server_ip:22 但是，从服务器回来的包到了 NAT Router 上后，由于路由表的配置问题，默认的路由并不能把包送达对方。
方法1: 我们首先给包打上 mark：
iptables -t mangle -A PREROUTING -i internal_interface -p tcp -m tcp --sport 22 -j MARK --set-mark 0x2222 然后配置策略路由：</description>
    </item>
    
  </channel>
</rss>
