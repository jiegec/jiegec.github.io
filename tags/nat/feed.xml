<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nat on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/nat/</link>
    <description>Recent content in nat on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 May 2018 19:26:00 +0800</lastBuildDate>
    
	<atom:link href="https://jia.je/tags/nat/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 Nginx 转发 VMware ESXi</title>
      <link>https://jia.je/networking/2018/05/08/nginx-proxy-vmware-esxi/</link>
      <pubDate>Tue, 08 May 2018 19:26:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/05/08/nginx-proxy-vmware-esxi/</guid>
      <description>我们的 VMware ESXi 在一台 NAT Router 之后，但是我们希望通过域名可以直接访问 VMware ESXi 。我们首先的尝试是，把 8443 转发到它的 443 端口，比如：
socat TCP-LISTEN:8443,reuseaddr,fork TCP:esxi_addr:443 它能工作地很好（假的，如果你把 8443 换成 9443 它就不工作了），但是，我们想要的是，直接通过 esxi.example.org 就可以访问它。于是，我们需要 Nginx 在其中做一个转发的功能。在这个过程中遇到了很多的坑，最后终于是做好了 （VMware Remote Console等功能还不行，需要继续研究）。
首先讲讲为啥把 8443 换成 9443 不能工作吧 &amp;ndash; 很简单，ESXi 的网页界面会请求 8443 端口。只是恰好我用 8443 转发到 443， 所以可以正常工作。这个很迷，但是测试的结果确实如此。VMware Remote Console 还用到了别的端口，我还在研究之中。
来谈谈怎么配置这个 Nginx 转发吧。首先是 80 跳转 443:
server { listen 80; listen 8080; server_name esxi.example.org; return 301 https://$host$request_uri; } 这个很简单，接下来是转发 443 端口：
 server { listen 443 ssl; server_name esxi.</description>
    </item>
    
    <item>
      <title>搭建 FTP server behind NAT</title>
      <link>https://jia.je/networking/2018/05/08/ftp-behind-nat/</link>
      <pubDate>Tue, 08 May 2018 13:34:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/05/08/ftp-behind-nat/</guid>
      <description>我们出现新的需求，要把以前的 FTP 服务器迁移到 NAT 之后的一台机器上。但是，FTP 不仅用到 20 21 端口， PASV 还会用到高端口，这给端口转发带来了一些麻烦。我们一开始测试，直接在 Router 上转发 20 和 21 端口到 Server 上。但是很快发现， Filezilla 通过 PASV 获取到地址为 （内网地址，端口高8位，端口低8位），然后，Filezilla 检测出这个地址是内网地址，于是转而向 router_ip:port 发包，这自然是不会得到结果的。
此时我们去网上找了找资料，找到了一个很粗暴的方法：
iptables -A PREROUTING -i external_interface -p tcp -m tcp --dport 20 -j DNAT --to-destination internal_ip:20 iptables -A PREROUTING -i external_interface -p tcp -m tcp --dport 21 -j DNAT --to-destination internal_ip:21 iptables -A PREROUTING -i external_interface -p tcp -m tcp --dport 1024:65535 -j DNAT --to-destination internal_ip:1024-65535 有趣地是， macOS 自带的 ftp 命令（High Sierra似乎已经删去）可以正常使用。研究发现，它用 EPSV（Extended Passive Mode） 代替 PASV ，这里并没有写内网地址，因而可以正常使用。</description>
    </item>
    
    <item>
      <title>使用 iptables 和策略路由进行带源地址的 forwarding</title>
      <link>https://jia.je/networking/2018/05/06/nat-forwarding-with-src-address/</link>
      <pubDate>Sun, 06 May 2018 14:07:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/05/06/nat-forwarding-with-src-address/</guid>
      <description>陈老师打开他的服务器，突然发现 CPU 莫名高负载，然后发现是有一个用户被远程登录拿来挖矿了。但是这台机器在 NAT 后，所以登录的源地址全是 NAT 路由，所以不知道对方的地址是什么。我们为了能使用 fail2ban 来禁用多次尝试失败的 IP ，但又不想因为别人把 NAT 路由的地址给禁了，这样我们自己也用不了了。所以必须要让这台机器能够知道 ssh 的源地址，我们现在简单的 socat 方案不能满足这个需求。
需求：
 可以在外网连 NAT 路由的高端口（如2222）来访问这台机器。 在内网中，既可以直接连它的内网地址，也可以连 NAT 路由的高端口来访问这台服务器。此时，由于连 ssh 的机器就在同一个子网中，如果保留了源地址，服务器发的包会直接回来不经过 NAT 。所以我们还是保留了 socat 的方案。  实现方法：
在 NAT Router 上配置 DNAT ，这样发到 NAT Router 上的包就可以转发到服务器上：
iptables -t nat -A PREROUTING -i external_interface -p tcp -m tcp --dport 2222 -j DNAT --to-destination internal_server_ip:22 但是，从服务器回来的包到了 NAT Router 上后，由于路由表的配置问题，默认的路由并不能把包送达对方。
方法1: 我们首先给包打上 mark：
iptables -t mangle -A PREROUTING -i internal_interface -p tcp -m tcp --sport 22 -j MARK --set-mark 0x2222 然后配置策略路由：</description>
    </item>
    
    <item>
      <title>利用 UPnP 协议进行 mosh NAT 穿透的研究</title>
      <link>https://jia.je/networking/2018/05/05/mosh-behind-nat-with-upnp/</link>
      <pubDate>Sat, 05 May 2018 20:25:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/05/05/mosh-behind-nat-with-upnp/</guid>
      <description>由于经常要从宿舍、教室等不同的 Wi-Fi 之间切换，但是 ssh 连接又总是断，所以想用 mosh 代替 ssh 。但是 mosh 也有它的问题：
 不能滚动。这个可以在 mosh 中嵌套一层 tmux 解决。我目前写了一些自动 mosh 后打开 tmux 并且开启鼠标支持的脚本，但还是有缺陷。 在高端口 60000+ 监听 UDP ，这使得 NAT 后的服务器难以直接通过端口转发。如果直接转发到 NAT 后的机器，那么 NAT 后面如果有多台机器，这又失效了。  于是找了找网上的 NAT 穿透的一些文章，看到了 UPnP 的方法。大致就是，用户可以向路由器注册一个临时的转发规则，路由会自动在 iptables 上配置转发。但是，这样也会遇到一个问题：路由上的 mosh-server 不知道这个转发的存在，所以它可能会尝试监听同样的端口。解决方案下面会提到。
需求：
Server &amp;lt;---&amp;gt; NAT Router &amp;lt;---&amp;gt; My Laptop On NAT Router, port 8022 is forwarded to Server:22 1. mosh router # works 2. mosh --ssh=&amp;quot;ssh -p 8022&amp;quot; router # works 首先在 NAT Router 上配置 miniupnpd （以 Debian 为例）</description>
    </item>
    
    <item>
      <title>NAT64 初尝试</title>
      <link>https://jia.je/networking/2018/01/02/first-trail-of-nat64/</link>
      <pubDate>Tue, 02 Jan 2018 19:41:22 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/01/02/first-trail-of-nat64/</guid>
      <description>最近宿舍里有线网络的 IPv4 总是拿不到地址，只能连无线网，不禁对计算机系学生的可怕的设备数量有了深刻的认识。不过，作为一个有道德（误）的良好青年，还是不要给已经枯竭的 IPv4 地址填堵了，还是赶紧玩玩 IPv6 的网络吧。然后在 TUNA 群里受青年千人续本达 (@heroxbd) 的安利，本地搭建一下 NAT64+DNS64 的环境。不过考虑到宿舍还是拿不到有线的 IPv4 地址，我就先利用苹果先前在强制 iOS 的应用支持 NAT64 网络的同时，在 macOS 上为了方便开发者调试，提供的便捷的建立 NAT64 网络的能力。
首先在设置中按住 Option 键打开 Sharing ， 点击 Internet Sharing ，勾上 Create NAT64 Network 然后把网络共享给设备。然后在手机上关掉 Wi-Fi 和 Cellular ，发现还能正常上网。此时可以打开 Wireshark 验证我们的成果了：
在手机上打开浏览器，浏览千度，得到如下的 Wireshark 截图： 这里，2001:2:0:aab1::1 是本机在这个子网中的地址，2001:2::aab1:cda2:5de:87f6:fd78 是我的 iOS 设备的地址，然后 iOS 向 macOS 发出了 DNS请求， macOS 发送 DNS 请求后得到 baidu.com 的 IPv4 地址之一为 111.13.101.208 ： 上图中，我们可以看到， baidu.com 的 AAAA 记录是 2001:2:0:1baa::6f0d:65d0 ，这个就是 DNS64 转译的地址，前面为网关的 prefix ，后面就是对应的 IPv4 地址： 0x6f=111, 0x0d=13, 0x65=101, 0xd0=208 ，当客户端向这个地址发包的时候，网关发现前缀符合条件，把最后的这部分 IPv4 地址取出来，自己把包发送到真实的地址上去，再把返回来的包再转为 IPv6 的地址返还给客户端。可以验证，剩下的几个地址也符合这个转译规则。</description>
    </item>
    
  </channel>
</rss>