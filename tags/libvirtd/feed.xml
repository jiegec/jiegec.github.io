<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>libvirtd on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/libvirtd/</link>
    <description>Recent content in libvirtd on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Jun 2023 16:03:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/libvirtd/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从 libvirtd 迁移到 Proxmox VE</title>
      <link>https://jia.je/software/2023/06/15/libvirtd-migrate-proxmox-ve/</link>
      <pubDate>Thu, 15 Jun 2023 16:03:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2023/06/15/libvirtd-migrate-proxmox-ve/</guid>
      <description>背景 之前用 libvirtd + virt-manager 做 Linux 上的虚拟化，好处是比较轻量级，但是远程控制起来比较麻烦，要么通过 RDP 访问 virt-manager 的 UI，要么就用 cockpit 在网页里去配置虚拟机。此时就会比较怀念 VMware ESXi 的网页，但是 ESXi 装完以后，宿主机就很不自由了，很多东西没法自定义。最后就想到在 Debian 上装一个 Proxmox VE，希望得到一个比较好的中间态。
Proxmox VE 安装 按照官方的 Install Proxmox VE on Debian 11 Bullseye 去安装即可。我的环境是 Debian Bookworm，把路径改成 Bookworm 的 pvetest 即可。安装的时候可能会遇到一些小问题，例如用 ifupdown2 替换 ifupdown 的时候会检查 config 是否正确等等。安装完以后重启，就可以用 root 用户访问 Proxmox VE 了。
迁移 libvirtd 虚拟机 下一步是迁移 libvirtd 虚拟机。在网上搜索，会看到提供的方法是，在 Proxmox VE 里创建一个同样大小的镜像，然后把原来的 qcow2 的数据复制一份，但是这样复制的时候得存两份数据，而且对稀疏 qcow2 的支持也不太好。
最后实际的解决办法是：在 Proxmox VE 里创建一个和 qcow2 大小一样的镜像，设置为 qcow2 格式，然后去 /var/lib/vz/images 路径下找到新建的 qcow2，直接用原来 libvirtd 创建的 qcow2 覆盖过去。目前来看，还没有遇到问题，毕竟 ProxmoxVE 用的也是 QEMU，和 libvirtd 一样。</description>
    </item>
    
  </channel>
</rss>
