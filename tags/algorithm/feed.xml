<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/algorithm/</link>
    <description>Recent content in algorithm on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 May 2020 11:12:30 +0800</lastBuildDate>
    
	<atom:link href="https://jia.je/tags/algorithm/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>解释 BB84 协议</title>
      <link>https://jia.je/others/2020/05/01/bb84-explained/</link>
      <pubDate>Fri, 01 May 2020 11:12:30 +0800</pubDate>
      
      <guid>https://jia.je/others/2020/05/01/bb84-explained/</guid>
      <description>背景 这周密码学课程，来自 BUPT 的高飞老师讲了一下 qkd 里的 BB84 协议，老师讲得很好，我也想记录一下这个协议的流程和方法。我不是这方面的专业人士，如果有什么问题请指出。
背景知识 QKD（Quantum Key Distribution）目的是让通信双方获得同一个密钥，它需要同时需要量子信道和经典信道。其中经典信道被认为是可信的，它可以被监听，但不能被中间人攻击。
在 BB84（Charles H. Bennett and Gilles Brassard (1984)）协议中，传输的是一个光子，它具有如下的特性：
可以用两个基去测量光子：➕️和✖️️，然后光子有四个偏振角度，分别是 ⬆️️ ⬇️️ ↘️️ ↗️️。定义一个二进制位和偏振角度的对应关系如下：
   位 0 1 0 1     基 ➕️ ✖️️ ✖️️ ✖️️   偏振角度 ⬆️️ ⬇️️ ↗️️ ↘️️    对于一个未知光子，可以用两种基进行测量，测量的结果：
   偏振角度 ⬆️️ ⬇️️ ↗️️ ↘️️     用➕️测量 0 1 0/1 0/1   用✖️️测量 0/1 0/1 0 1    这里的 0/1 表示有 50% 概率测得 0，有 50% 概率测得 1 。</description>
    </item>
    
    <item>
      <title>分析一个我第一次见的素数测试函数</title>
      <link>https://jia.je/programming/2017/10/17/analysis-on-a-primality-test/</link>
      <pubDate>Tue, 17 Oct 2017 21:05:28 +0800</pubDate>
      
      <guid>https://jia.je/programming/2017/10/17/analysis-on-a-primality-test/</guid>
      <description>今天逛到这个连接，发现其中的第四种素数判定方法很有意思：
#include&amp;lt;stdio.h&amp;gt; #include&amp;lt;math.h&amp;gt; int p[8]={4,2,4,2,4,6,2,6}; int prime(int n) { int i=7,j,q; if(n==1)return 0; if(n==2||n==5||n==3)return 1; if(n%2==0||n%3==0||n%5==0)return 0; q=(int)sqrt(n); for(;i&amp;lt;=q;){ for(j=0;j&amp;lt;8;j++){ if(n%i==0)return 0; i+=p[j]; } if(n%i==0)return 0; } return 1; } void main() { int n; scanf(&amp;quot;%d&amp;quot;,&amp;amp;n); if(prime(n))puts(&amp;quot;Yes&amp;quot;); else puts(&amp;quot;No&amp;quot;); } 仔细研究发现，这里利用的是这样的原理：
 判断是不是1, 2, 3, 5及其倍数 从7开始，不断考虑其是否是素数，那么，这个p是什么回事呢？  首先把p的各个元素加起来，和为30，然后就可以发现一个规律： 7为质数，7+2=9不是质数，7+4=11为质数，11+2=13为质数，13+2=15为合数，15+2=17为质数，17+2=19为质数，19+2=21为合数，21+2=23为质数，23+2=25为合数，25+2=27为合数，27+2=29为质数，29+1=31为质数，31+2=33为合数，33+2=35为合数，35+2=37为质数。 观察以上所有的合数，都含有2或者3或者5的因子，而30又是2,3,5的公倍数，也就是说，后面的素数模30的余数不可能是上面这些合数，而剩下的素数才可能是真正的素数，于是跳过了很多素数的判断。
至于这个函数的性能如何，还需要进一步测试来进行判断。</description>
    </item>
    
    <item>
      <title>一个搞笑的伸展树的Wiki</title>
      <link>https://jia.je/others/2017/10/16/a-funny-wiki-of-splay-tree/</link>
      <pubDate>Mon, 16 Oct 2017 19:59:30 +0800</pubDate>
      
      <guid>https://jia.je/others/2017/10/16/a-funny-wiki-of-splay-tree/</guid>
      <description>光哲同学在群里发了这个链接，特别搞笑，特此分享： 伸展树 - 百度百科
 伸展树（Spaly Tree，事实上在国内 IO 界常常被称作 Tajarn 发明的 Spaly Tree，与此同理的还有 Terap），也叫分裂树，是一种二叉排序树，它能在 O(n log n) 内完成插入、查找和删除操作。它由 Daniel Sleator 和 Robert Tajarn 发现，后者对其进行了改造。它的优势可以不断伸展枝干（一个月 2~3 次），从而使树冠散开，提高光合作用效率。木材坚硬，是重要的经济类乔木。与其他植物不同的是，伸展树可以进行出芽生殖，繁殖速度极快。
 </description>
    </item>
    
  </channel>
</rss>