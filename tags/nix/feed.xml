<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nix on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/nix/</link>
    <description>Recent content in nix on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Aug 2022 14:28:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/nix/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用 Nix 编译 Rust 项目</title>
      <link>https://jia.je/software/2022/08/02/rust-nix/</link>
      <pubDate>Tue, 02 Aug 2022 14:28:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/08/02/rust-nix/</guid>
      <description>背景 Rust 项目一般是用 Cargo 管理，但是它的缺点是每个项目都要重新编译一次所有依赖，硬盘空间占用较大，不能跨项目共享编译缓存。调研了一下，有若干基于 Nix 的 Rust 构建工具：
cargo2nix: https://github.com/cargo2nix/cargo2nix carnix: 不再更新 crane: https://github.com/ipetkov/crane crate2nix: https://github.com/kolloch/crate2nix naersk: https://github.com/nix-community/naersk nocargo: https://github.com/oxalica/nocargo 下面我分别来尝试一下这几个工具的使用。
下面出现的一些命令参考了对应项目的文档。
cargo2nix 卖点 cargo2nix 的 README 提到了它的卖点：
Development Shell - knowing all the dependencies means easy creation of complete shells. Run nix develop or direnv allow in this repo and see! Caching - CI &amp;amp; CD pipelines move faster when purity guarantees allow skipping more work! Reproducibility - Pure builds.</description>
    </item>
    
    <item>
      <title>Nix Cookbook</title>
      <link>https://jia.je/software/2022/06/07/nix-cookbook/</link>
      <pubDate>Tue, 07 Jun 2022 22:29:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2022/06/07/nix-cookbook/</guid>
      <description>背景 最近在尝试 NixOS 和在 macOS 上跑 Nix，下面记录一些我在使用过程中遇到的一些小问题和解决思路。
NixOS 全局配置 NixOS 的全局配置路径：/etc/nixos/configuration.nix 和 /etc/nixos/hardware-configuration.nix
应用更新后的全局配置：
nixos-rebuild switch # or nixos-rebuild switch --upgrade 应用 Flakes 配置文件并显示变化：
#!/usr/bin/env python3 import os user = os.getenv(&amp;#34;USER&amp;#34;) home = f&amp;#34;/nix/var/nix/profiles/&amp;#34; old = home + os.readlink(f&amp;#34;{home}system&amp;#34;) os.system(&amp;#34;sudo nixos-rebuild switch --flake .&amp;#34;) new = home + os.readlink(f&amp;#34;{home}system&amp;#34;) os.system(f&amp;#34;nix store diff-closures {old} {new}&amp;#34;) 更新大版本 如果要更新 NixOS 21.11 到 22.05:
nix-channel --list nix-channel --add https://nixos.org/channels/nixos-22.05 nixos nixos-rebuild switch --upgrade 可以考虑改或者不改 /etc/nixos/configuration.</description>
    </item>
    
  </channel>
</rss>
