<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>forwarding on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/forwarding/</link>
    <description>Recent content in forwarding on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Sep 2018 13:20:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/forwarding/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>通过 SSH 隧道连接 ADB 和 Android 设备</title>
      <link>https://jia.je/programming/2018/09/13/adb-over-ssh-tunnel/</link>
      <pubDate>Thu, 13 Sep 2018 13:20:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2018/09/13/adb-over-ssh-tunnel/</guid>
      <description>由于本机算力不足，想要在远程编译 LineageOS ，其中有一步需要连接到已有的设备，于是突发奇想：
adb 可以通过 网络连接 ssh 可以进行端口转发，这里是把 remote 的端口转发到 Android 设备上的端口。 方法如下：
$ adb shell ip -f inet addr show wlan0 $ # remember the ip address here $ adb tcpip PORT1 $ ssh -R PORT2:ANDROID_IP:PORT1 REMOTE (remote)$ adb connect localhost:PORT2 # trust this device on Android 参考文档：
How can I connect to Android with ADB over TCP? SSH PORT FORWARDING EXAMPLE </description>
    </item>
    
    <item>
      <title>使用 Nginx 转发 VMware ESXi</title>
      <link>https://jia.je/networking/2018/05/08/nginx-proxy-vmware-esxi/</link>
      <pubDate>Tue, 08 May 2018 19:26:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/05/08/nginx-proxy-vmware-esxi/</guid>
      <description>我们的 VMware ESXi 在一台 NAT Router 之后，但是我们希望通过域名可以直接访问 VMware ESXi。我们首先的尝试是，把 8443 转发到它的 443 端口，比如：
socat TCP-LISTEN:8443,reuseaddr,fork TCP:esxi_addr:443 它能工作地很好（假的，如果你把 8443 换成 9443 它就不工作了），但是，我们想要的是，直接通过 esxi.example.org 就可以访问它。于是，我们需要 Nginx 在其中做一个转发的功能。在这个过程中遇到了很多的坑，最后终于是做好了（VMware Remote Console 等功能还不行，需要继续研究）。
首先讲讲为啥把 8443 换成 9443 不能工作吧 &amp;ndash; 很简单，ESXi 的网页界面会请求 8443 端口。只是恰好我用 8443 转发到 443，所以可以正常工作。这个很迷，但是测试的结果确实如此。VMware Remote Console 还用到了别的端口，我还在研究之中。
来谈谈怎么配置这个 Nginx 转发吧。首先是 80 跳转 443:
server { listen 80; listen 8080; server_name esxi.example.org; return 301 https://$host$request_uri; } 这个很简单，接下来是转发 443 端口：
server { listen 443 ssl; server_name esxi.</description>
    </item>
    
    <item>
      <title>搭建 FTP server behind NAT</title>
      <link>https://jia.je/networking/2018/05/08/ftp-behind-nat/</link>
      <pubDate>Tue, 08 May 2018 13:34:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/05/08/ftp-behind-nat/</guid>
      <description>我们出现新的需求，要把以前的 FTP 服务器迁移到 NAT 之后的一台机器上。但是，FTP 不仅用到 20 21 端口，PASV 还会用到高端口，这给端口转发带来了一些麻烦。我们一开始测试，直接在 Router 上转发 20 和 21 端口到 Server 上。但是很快发现，Filezilla 通过 PASV 获取到地址为（内网地址，端口高 8 位，端口低 8 位），然后，Filezilla 检测出这个地址是内网地址，于是转而向 router_ip:port 发包，这自然是不会得到结果的。
此时我们去网上找了找资料，找到了一个很粗暴的方法：
iptables -A PREROUTING -i external_interface -p tcp -m tcp --dport 20 -j DNAT --to-destination internal_ip:20 iptables -A PREROUTING -i external_interface -p tcp -m tcp --dport 21 -j DNAT --to-destination internal_ip:21 iptables -A PREROUTING -i external_interface -p tcp -m tcp --dport 1024:65535 -j DNAT --to-destination internal_ip:1024-65535 有趣地是，macOS 自带的 ftp 命令（High Sierra 似乎已经删去）可以正常使用。研究发现，它用 EPSV（Extended Passive Mode）代替 PASV，这里并没有写内网地址，因而可以正常使用。</description>
    </item>
    
    <item>
      <title>使用 iptables 和策略路由进行带源地址的 forwarding</title>
      <link>https://jia.je/networking/2018/05/06/nat-forwarding-with-src-address/</link>
      <pubDate>Sun, 06 May 2018 14:07:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2018/05/06/nat-forwarding-with-src-address/</guid>
      <description>陈老师打开他的服务器，突然发现 CPU 莫名高负载，然后发现是有一个用户被远程登录拿来挖矿了。但是这台机器在 NAT 后，所以登录的源地址全是 NAT 路由，所以不知道对方的地址是什么。我们为了能使用 fail2ban 来禁用多次尝试失败的 IP，但又不想因为别人把 NAT 路由的地址给禁了，这样我们自己也用不了了。所以必须要让这台机器能够知道 ssh 的源地址，我们现在简单的 socat 方案不能满足这个需求。
需求：
可以在外网连 NAT 路由的高端口（如 2222）来访问这台机器。 在内网中，既可以直接连它的内网地址，也可以连 NAT 路由的高端口来访问这台服务器。此时，由于连 ssh 的机器就在同一个子网中，如果保留了源地址，服务器发的包会直接回来不经过 NAT。所以我们还是保留了 socat 的方案。 实现方法：
在 NAT Router 上配置 DNAT，这样发到 NAT Router 上的包就可以转发到服务器上：
iptables -t nat -A PREROUTING -i external_interface -p tcp -m tcp --dport 2222 -j DNAT --to-destination internal_server_ip:22 但是，从服务器回来的包到了 NAT Router 上后，由于路由表的配置问题，默认的路由并不能把包送达对方。
方法 1: 我们首先给包打上 mark：
iptables -t mangle -A PREROUTING -i internal_interface -p tcp -m tcp --sport 22 -j MARK --set-mark 0x2222 然后配置策略路由：</description>
    </item>
    
  </channel>
</rss>
