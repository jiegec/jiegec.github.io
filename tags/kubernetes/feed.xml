<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jiege.ch/tags/kubernetes/</link>
    <description>Recent content in kubernetes on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Mar 2020 21:56:00 +0800</lastBuildDate>
    
	<atom:link href="https://jiege.ch/tags/kubernetes/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>体验 Tencent Kubernetes Engine</title>
      <link>https://jiege.ch/devops/2020/03/17/setup-k8s-tencentcloud/</link>
      <pubDate>Tue, 17 Mar 2020 21:56:00 +0800</pubDate>
      
      <guid>https://jiege.ch/devops/2020/03/17/setup-k8s-tencentcloud/</guid>
      <description>之前在机器上试验了一下 kubernetes，感觉挺不错的，所以就想把腾讯云上面的机器也交给 kubernetes 管理。找到容器服务，新建集群，选择模板里的标准托管集群就可以了。然后开启下面的公网访问，设置一个比较小的 IP 地址段，按照页面下面的要求合并一下 kube config（因为还有别的 k8s cluster）：
$ KUBECONFIG=~/.kube/config:/path/to/new/config kubectl config view --merge --flatten &amp;gt; new_config $ cp new_config ~/.kube/config 覆盖之前先确认原来的配置还在，然后就可以用 kubectl 切换到新的 context：
$ kubectl config get-contexts $ kubectl config use-context new-context-here $ kubectl get node NAME STATUS ROLES AGE VERSION 172.21.0.17 Ready &amp;lt;none&amp;gt; 75m v1.16.3-tke.3 可以看到我们的 k8s node 已经上线了。我一般习惯先配好 kubernetes-dashboard：
$ kubectl create -f https://raw.githubusercontent.com/cilium/cilium/v1.6/install/kubernetes/quick-install.yaml $ kubectl proxy &amp;amp; $ kubectl -n kubernetes-dashboard describe secret (kubectl -n kubernetes-dashboard get secret | grep admin-user | awk &amp;#39;{print \$1}&amp;#39;) | tail -n1 | awk &amp;#39;{print \$2}&amp;#39; | pbcopy 然后在浏览器里访问 http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/overview?</description>
    </item>
    
    <item>
      <title>在 Kubernetes 集群上部署 gitlab—runner</title>
      <link>https://jiege.ch/devops/2020/03/14/k8s-gitlab-runner/</link>
      <pubDate>Sat, 14 Mar 2020 23:05:00 +0800</pubDate>
      
      <guid>https://jiege.ch/devops/2020/03/14/k8s-gitlab-runner/</guid>
      <description>按照 GitLab 上的教程试着把 gitlab-runner 部署到 k8s 集群上，发现异常地简单，所以简单做个笔记：
编辑 values.yaml
gitlabUrl: GITLAB_URL runnerRegistrationToken: &amp;#34;REDACTED&amp;#34; rbac: create: true 此处的信息按照 &amp;ldquo;Set up a specific Runner manually&amp;rdquo; 下面的提示填写。然后用 Helm 进行安装：
$ helm repo add gitlab https://charts.gitlab.io $ kubectl create namespace gitlab-runner $ helm install --namespace gitlab-runner gitlab-runner -f values.yaml gitlab/gitlab-runner 然后去 Kubernetes Dashboard 就可以看到部署的情况，回到 GitLab 也可以看到出现了 “Runners activated for this project” ，表示配置成功。
参考配置：https://docs.gitlab.com/runner/install/kubernetes.html</description>
    </item>
    
    <item>
      <title>用 Kubernetes 部署无状态服务</title>
      <link>https://jiege.ch/devops/2020/03/10/k8s-deploy-with-hpa/</link>
      <pubDate>Tue, 10 Mar 2020 13:57:00 +0800</pubDate>
      
      <guid>https://jiege.ch/devops/2020/03/10/k8s-deploy-with-hpa/</guid>
      <description>背景 最近需要部署一个用来跑编译的服务，服务从 MQ 取任务，编译完以后提交任务。最初的做法是包装成 docker，然后用 docker-compose 来 scale up。但既然有 k8s 这么好的工具，就试着学习了一下，踩了很多坑，总结了一些需要用到的命令。
搭建 Docker Registry 首先搭建一个本地的 Docker Repository，首先设置密码：
$ mkdir auth $ htpasswd user pass &amp;gt; auth/passwd 然后运行 registry：
$ docker run -d -p 5000:5000 \  --restart=always \  --name registry \  -v &amp;#34;$(pwd)/registry&amp;#34;:/var/lib/registry \  -v &amp;#34;$(pwd)/auth&amp;#34;:/auth \  -e &amp;#34;REGISTRY_AUTH=htpasswd&amp;#34; \  -e &amp;#34;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&amp;#34; \  -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \  registry:2 简单起见没有配 tls。然后吧本地的 image push 上去：</description>
    </item>
    
  </channel>
</rss>