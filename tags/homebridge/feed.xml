<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>homebridge on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/homebridge/</link>
    <description>Recent content in homebridge on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Jul 2021 20:42:00 +0000</lastBuildDate><atom:link href="https://jia.je/tags/homebridge/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>配置 homebridge-broadlink-rm-pro</title>
      <link>https://jia.je/software/2021/07/24/homebridge-rm-mini-3/</link>
      <pubDate>Sat, 24 Jul 2021 20:42:00 +0000</pubDate>
      
      <guid>https://jia.je/software/2021/07/24/homebridge-rm-mini-3/</guid>
      <description>背景 最近发现空调遥控器电池有点不足，有时候会自动关机，于是拿出以前买的 Broadlink RM mini 3 充当远程的空调遥控器使用。为了方便手机上配置，分别采用了官方的 App 智慧星和 homebridge 进行配置。
步骤 首先用官方的智慧星配置好 Broadlink RM mini 3 的网络，然后配置 homebridge-broadlink-rm-pro。最早的插件作者不怎么更新了，这个版本是目前用的比较多的一个 fork。
安装好以后，在 Home 里面可以看到 Scan Code 的开关。打开以后，用遥控器在 Broadlink RM mini 3 附近按按键，就可以在 Homebridge 日志里看到 hex code 了。然后，就按照插件教程里的方法写配置，例子如下：
{ &amp;#34;platform&amp;#34;: &amp;#34;BroadlinkRM&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Broadlink RM&amp;#34;, &amp;#34;accessories&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Air Conditioner&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;air-conditioner&amp;#34;, &amp;#34;noHumidity&amp;#34;: true, &amp;#34;minTemperature&amp;#34;: 26, &amp;#34;maxTemperature&amp;#34;: 28, &amp;#34;defaultCoolTemperature&amp;#34;: 27, &amp;#34;data&amp;#34;: { &amp;#34;off&amp;#34;: &amp;#34;2600...&amp;#34;, &amp;#34;cool28&amp;#34;: { &amp;#34;data&amp;#34;: &amp;#34;2600...&amp;#34; }, &amp;#34;cool27&amp;#34;: { &amp;#34;data&amp;#34;: &amp;#34;2600.</description>
    </item>
    
    <item>
      <title>配置 homebridge-mi-aqara 并添加为 telegraf 的数据源</title>
      <link>https://jia.je/software/2018/12/13/homebridge-mi-aqara-telegraf/</link>
      <pubDate>Thu, 13 Dec 2018 20:07:00 +0000</pubDate>
      
      <guid>https://jia.je/software/2018/12/13/homebridge-mi-aqara-telegraf/</guid>
      <description>最近有了设备，想把设备拿到的数据都导一份存到 influxdb 里，但是目前找到的只有 homebridge-mi-aqara 可以访问并拿到数据，然后它又提供了 mqtt 的数据获取方案，于是自己写了个脚本去读取这些数据。
首先当然是配置一下 homebridge-mi-aqara ，按照网上的教程来，这个不难。然后本地开一个 MQTT Broker （如 mosquitto ），配置为本地监听，然后我编写了脚本 telegraf-mi-aqara.py ，使用前需要 pip install paho-mqtt，并且按照实际路径修改一下内容 。验证能够跑起来后，写一个 telegraf 配置：
[[inputs.exec]] commands = [&amp;#34;/usr/bin/python3 /path/to/telegraf-mi-aqara.py&amp;#34;] timeout = &amp;#34;5s&amp;#34; data_format = &amp;#34;influx&amp;#34; 现在就可以读取到各项信息，如温度，湿度，是否开门，开关用电情况等等。
2018-12-16 更新：
研究了一下绿米网关局域网通信协议，得到了第二个版本 telegraf-mi-aqara-v2.py，它与第一版的区别是，第一版是主动向网关读取信息，而这一版则是监听组播包，等待网关发消息。这个脚本负责把读取到的组播信息发送到 MQTT ，再让 telegraf 从 MQTT 里解析 JSON 消息，写入数据库。Telegraf 配置如下：
[[inputs.mqtt_consumer]] servers = [&amp;#34;tcp://127.0.0.1:1883&amp;#34;] qos = 0 connection_timeout = &amp;#34;30s&amp;#34; topics = [ &amp;#34;/telegraf-mi-aqara&amp;#34; ] persistent_session = true client_id = &amp;#34;Telegraf&amp;#34; data_format = &amp;#34;json&amp;#34; json_string_fields = [&amp;#34;model&amp;#34;, &amp;#34;sid&amp;#34;, &amp;#34;status&amp;#34;] tag_keys = [&amp;#34;model&amp;#34;, &amp;#34;sid&amp;#34;, &amp;#34;short_id&amp;#34;] 由于设备不全，有些字段可能不完整。如果大家自己要用的话，可能需要自行修改一下。</description>
    </item>
    
    <item>
      <title>使用 HomeBridge 把小米空气净化器加入到 HomeKit 中</title>
      <link>https://jia.je/software/2018/11/04/mi-air-purifier-homekit/</link>
      <pubDate>Sun, 04 Nov 2018 10:47:00 +0000</pubDate>
      
      <guid>https://jia.je/software/2018/11/04/mi-air-purifier-homekit/</guid>
      <description>受 @NSBlink 安利，自己部署了一下 HomeBridge ，然后在 iOS 的家庭上就可以看到它。然后，通过 homebrdige-mi-airpurifier 和 miio 按照教程进行配置。然后就可以在家庭里看到小米空气净化器，包括空气质量，湿度，睡眠模式，温度，打开状态。然后我就可以做一些配置，如离开宿舍的时候自动关闭空气净化器，回来的时候自动打开。不过由于自己没有一个一直放在宿舍的 iPad、Apple TV 或者 HomePod ，失去了中枢，这个功能可能会打折扣。
后续想买一些智能的灯啊，然后就可以用 Siri 进行打开 / 关闭了。
此外，我又试了下，可以用 homebridge-camera-ffmpeg 把摄像头配置到 HomeKit 中。这样，就可以远程查看视频流了。</description>
    </item>
    
  </channel>
</rss>
