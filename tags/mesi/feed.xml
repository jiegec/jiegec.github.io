<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mesi on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/mesi/</link>
    <description>Recent content in mesi on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Dec 2021 07:39:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/mesi/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>缓存一致性协议分析</title>
      <link>https://jia.je/hardware/2021/12/17/cache-coherency-protocol/</link>
      <pubDate>Fri, 17 Dec 2021 07:39:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/12/17/cache-coherency-protocol/</guid>
      <description>参考文档  Cache coherence MSI protocol Write-once (cache coherence) MESI protocol MOESI protocol A Strategy to Verify an AXI/ACE Compliant Interconnect (2 of 4) Directory-based cache coherence  Write-invalidate 和 Write-update 最基础的缓存一致性思想有两种：
 Write-invalidate：写入数据的时候，将其他 Cache 中这条 Cache Line 设为 Invalid Write-update：写入数据的时候，把新的结果写入到有这条 Cache Line 的其他 Cache  Write-once 协议 Write-once 协议定义了四个状态：
 Invalid：表示这个块不合法 Valid：表示这个块合法，并可能是共享的，同时数据没有修改 Reserved：表示这个块合法，不是共享的，同时数据没有更改 Dirty：表示这个块合法，不是共享的，数据做了修改，和内存不同。  可见，当一个缓存状态在 R 或者 D，其他缓存只能是 I；而缓存状态是 V 的时候，可以有多个缓存在 V 状态。
Write-once 协议的特点是，第一次写的时候，会写入到内存（类似 Write-through），连续写入则只写到缓存中，类似 Write-back。
当 Read hit 的时候，状态不变。</description>
    </item>
    
  </channel>
</rss>
