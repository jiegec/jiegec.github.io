<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>routing on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jiege.ch/tags/routing/</link>
    <description>Recent content in routing on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Aug 2018 09:17:00 +0800</lastBuildDate>
    
	<atom:link href="https://jiege.ch/tags/routing/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在 WireGuard 构建的 Overlay Network 上跑 babel 路由协议</title>
      <link>https://jiege.ch/networking/2018/08/10/use-babel-in-overlay-network-with-wireguard/</link>
      <pubDate>Fri, 10 Aug 2018 09:17:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/08/10/use-babel-in-overlay-network-with-wireguard/</guid>
      <description>受 Run Babeld over Wireguard - Fugoes&amp;rsquo;s Blog 和 Route-based VPN on Linux with WireGuard 启发，自己也想尝试一下，在一个有多个结点的网络中，如何通过 WireGuard 构建一个 overlay network，并通过 babel 自动进行结点发现和路径选择。
首先建立点对点的 WireGuard Tunnel 。由于我们用 babel 进行路由，所以我们不能采用 Wiregurad 本身基于目的地址的端口复用，所以每一个 WireGuard interface 都只有一个 Peer 。
配置一个点对点的 WireGuard Tunnel：
$ # for wg-quick $ cat wg0.conf [Interface] Address = IPV4/32, fe80::ID/64 PrivateKey = REDACTED ListenPort = PORT1 Table = off # ask wg-quick not to insert peer address into routing table [Peer] PublicKey = REDACTED AllowedIPs = 0.</description>
    </item>
    
  </channel>
</rss>