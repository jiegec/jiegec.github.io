<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gitlab on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/gitlab/</link>
    <description>Recent content in gitlab on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Mar 2021 08:41:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/gitlab/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用 gitlab ci 构建并部署应用到 k8s</title>
      <link>https://jia.je/devops/2021/03/16/gitlab-ci-k8s-integration/</link>
      <pubDate>Tue, 16 Mar 2021 08:41:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2021/03/16/gitlab-ci-k8s-integration/</guid>
      <description>背景 在 k8s 集群中部署了 gitlab-runner，并且希望在 gitlab ci 构建完成后，把新的 docker image push 到 private repo，然后更新应用。
参考文档：Gitlab CI 与 Kubernetes 的结合，Using Docker to build Docker images。
在 gitlab ci 中构建 docker 镜像 这一步需要 DinD 来实现在容器中构建容器。为了达到这个目的，首先要在 gitlab-runner 的配置中添加一个 volume 来共享 DinD 的证书路径：
gitlabUrl: REDACTED rbac: create: true runnerRegistrationToken: REDACTED runners: config: | [[runners]] [runners.kubernetes] image = &amp;#34;ubuntu:20.04&amp;#34; privileged = true [[runners.kubernetes.volumes.empty_dir]] name = &amp;#34;docker-certs&amp;#34; mount_path = &amp;#34;/certs/client&amp;#34; medium = &amp;#34;Memory&amp;#34; privileged: true 注意两点：1. privileged 2.</description>
    </item>
    
    <item>
      <title>在 Kubernetes 集群上部署 gitlab—runner</title>
      <link>https://jia.je/devops/2020/03/14/k8s-gitlab-runner/</link>
      <pubDate>Sat, 14 Mar 2020 23:05:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/03/14/k8s-gitlab-runner/</guid>
      <description>按照 GitLab 上的教程试着把 gitlab-runner 部署到 k8s 集群上，发现异常地简单，所以简单做个笔记：
编辑 values.yaml
gitlabUrl: GITLAB_URL runnerRegistrationToken: &amp;#34;REDACTED&amp;#34; rbac: create: true 此处的信息按照 &amp;ldquo;Set up a specific Runner manually&amp;rdquo; 下面的提示填写。然后用 Helm 进行安装：
$ helm repo add gitlab https://charts.gitlab.io $ kubectl create namespace gitlab-runner $ helm install --namespace gitlab-runner gitlab-runner -f values.yaml gitlab/gitlab-runner 然后去 Kubernetes Dashboard 就可以看到部署的情况，回到 GitLab 也可以看到出现了“Runners activated for this project” ，表示配置成功。
参考配置：https://docs.gitlab.com/runner/install/kubernetes.html</description>
    </item>
    
    <item>
      <title>软工平台踩坑记</title>
      <link>https://jia.je/software/2018/10/12/secoder-platform-sucks/</link>
      <pubDate>Fri, 12 Oct 2018 00:09:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/10/12/secoder-platform-sucks/</guid>
      <description>老师要求我们搞 CI/CD，CI 自然是很快就搞好了，不过 CD 还得配一下。今天研究了一下它的 Deployer 架构，发现了若干易用性问题：
缺乏文档 只有样例配置没有讲解 已有的文档 语焉不详 官方对此回复：功能太多，还没忙过来写文档 于是只好经常戳助教然后尝试理解这个东西。。然后遇到了很多的 BUG：
容器没有重启功能。。。 容器死了还是活着看一个图的颜色。。。毫无说明 容器虽然有 Console，但是输入过长后直接回到行首没有换行。。。 容器对外的域名里有下划线。。。Django 上来就一句 Invalid HTTP_HOST header: &#39;xxxx_xxx.app.secoder.net&#39;. The domain name provided is not valid according to RFC 1034/1035. Express 直接就 Invalid Host header 放弃治疗。。。 助教对上一条的回复是，等我忙完 DDL 有空再做吧。。。也就是说现在要做只能自己再开一个 Nginx 容器然后自己在 proxy_set_header 上做手脚。。。 </description>
    </item>
    
  </channel>
</rss>
