<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>slurm on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/slurm/</link>
    <description>Recent content in slurm on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 Nov 2020 00:51:00 +0000</lastBuildDate><atom:link href="https://jia.je/tags/slurm/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在 Spack 中用 external 的 Slurm 依赖编译 OpenMPI</title>
      <link>https://jia.je/software/2020/11/08/spack-openmpi-slurm-external/</link>
      <pubDate>Sun, 08 Nov 2020 00:51:00 +0000</pubDate>
      
      <guid>https://jia.je/software/2020/11/08/spack-openmpi-slurm-external/</guid>
      <description>最近在一个集群上，需要用一个自己编译的 openmpi，但并没有 root 权限，所以需要自己搞一个 spack，在 spack 里面装 openmpi。但默认的安装选项下，它没有打开 slurm 支持，所以 srun 的话会出问题，只能 sbatch 然后指定 host 去做。于是我研究了一下怎么在 spack 里引入 external 的 slurm，然后用它来编译 openmpi
首先，编译 ~/.spack/packages.yaml：
packages: slurm: buildable: False paths: &amp;#34;slurm@15-08-7-1%gcc@8.3.0 arch=linux-ubuntu16.04-haswell&amp;#34;: /usr 这里 slurm 版本是 15.08.7，我就按照 spack 里面 slurm 的版本号来写了。可以用 spack spec openmpi schedulers=slurm +pmi 来确认一下外部的 slurm 确实出现在了依赖之中。
这一步配好的话，安装的时候就会直接跳过 spack 里面 slurm 的安装。但又出现了 configure 错误，找不到 pmi 的库。于是，先用 external 的 mpirun 看一下配置：
$ module load openmpi-3.0.0 $ ompi_info ... --with-pmi=/usr --with-pmi-libdir=/usr/lib/x86_64-linux-gnu .</description>
    </item>
    
    <item>
      <title>在古老的 OS 上运行一个干净的新的环境</title>
      <link>https://jia.je/devops/2019/03/21/new-clean-env-on-old-os/</link>
      <pubDate>Thu, 21 Mar 2019 22:46:00 +0000</pubDate>
      
      <guid>https://jia.je/devops/2019/03/21/new-clean-env-on-old-os/</guid>
      <description>由于某些课程的原因，需要在一个 CentOS 7 上跑一些编译和运行代码。看到这么古老的软件，我心想不行，肯定要找新一些的软件来用。首先想到的是 tmux ，于是按照网上的脚本 很快装了一个 tmux 2.8 版本，果然好了很多。但是常用的很多软件依然是个问题。试了一下最近比较新的 code-server ，因为ABI问题跑不起来。
于是开始想玩骚操作。首先想到的是 Gentoo Prefix ，不过既然是别人的机器，还是算了。又找了 fakeroot 配合 alpine rootfs 的方案，但编译不过，估计是内核版本问题。又试了一下 fakechroot ，但它需要配合 fakeroot 使用，这就凉了。
然后又找了一些替代方案。一是 uchroot ，但由于 CMake 版本太老也编译不过。最后发现了 PRoot ，直接提供 prebuilt 然后很容易就可以跑起来：
$ ./proot -b /proc -b /dev -r $CHROOT /bin/busybox sh 于是就进到了 alpine 的 rootfs 中，下载地址。进去以后发现没有编辑器，于是出来把 apk 的源改了，加了 resolv.conf ，就成功地安装了很多很新的软件了。</description>
    </item>
    
  </channel>
</rss>
