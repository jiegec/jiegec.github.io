<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iptables on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jiege.ch/tags/iptables/</link>
    <description>Recent content in iptables on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Aug 2018 15:47:00 +0800</lastBuildDate>
    
	<atom:link href="https://jiege.ch/tags/iptables/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>通过 Ipfilter Extension 实现 RFC8367</title>
      <link>https://jiege.ch/networking/2018/08/31/implementing-rfc8367-as-iptables-extension/</link>
      <pubDate>Fri, 31 Aug 2018 15:47:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/08/31/implementing-rfc8367-as-iptables-extension/</guid>
      <description>前几天无聊闲逛看到了一个很有趣的 RFC8367 - Wrongful Termination of Internet Protocol (IP) Packets ，看到日期大家应该都懂了，这是个粥客，不过里面还是反映了一些事情，咳。
之前看到闪客实现了 shankerwangmiao/xt_PROTO ，想到自己也可以做一个 iptables 扩展，于是就写了 jiegec/xt_EQUALIZE 。它是这样使用的：
$ git clone git@github.com:jiegec/xt_EQUALIZE.git $ make $ sudo make install $ sudo iptables -t filter -A INPUT -j EQUALIZE $ sudo dmesg -w &amp;amp; $ # Make some random network requests to see the effect! $ ping 1.1.1.1 $ ping 8.8.8.8 $ ping ::1  目前还没有把参数都变成可以配置的。如果真的有人需要这个模块的话，我再改吧（逃</description>
    </item>
    
    <item>
      <title>通过 iptables 在同一个端口根据源地址解复用（demux）</title>
      <link>https://jiege.ch/networking/2018/07/06/use-iptables-to-serve-different-services-on-one-port/</link>
      <pubDate>Fri, 06 Jul 2018 09:36:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/07/06/use-iptables-to-serve-different-services-on-one-port/</guid>
      <description>现在遇到一个场景，原来的一个服务只给一个客户端用，但现在增加了一个客户端，由于客户端配置相同，但是服务端需要区别对待两个客户端的服务端配置，所以利用 iptables 根据源地址做了一个端口转发，实现了 demux 。
假设：服务器在 192.168.0.1 ，客户端分别在 192.168.0.2 和 192.168.0.3 。客户端配置的服务端地址是 192.168.0.1:8000 。之前，在服务器上只跑了一个服务，监听着 8000 端口。
现在，在服务器上再跑一个服务，监听 8001 端口，同时根据需求进行相应的配置。然后，加上如下 iptables 规则：
$ sudo iptables -t nat -A PREROUTING -s 192.168.0.3 -d 192.168.0.1 -p tcp -m tcp --dport 8000 -j REDIRECT --to-ports 8001  这样，在不需要更改客户端的情况下，完成了需要的效果。</description>
    </item>
    
  </channel>
</rss>