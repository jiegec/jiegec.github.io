<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gbk on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/gbk/</link>
    <description>Recent content in gbk on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Jul 2019 13:05:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/gbk/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>前端解析上传的 CSV</title>
      <link>https://jia.je/programming/2019/07/17/parse-upload-csv-frontend/</link>
      <pubDate>Wed, 17 Jul 2019 13:05:00 +0800</pubDate>
      
      <guid>https://jia.je/programming/2019/07/17/parse-upload-csv-frontend/</guid>
      <description>之前做过一个在前端解析上传的 CSV 的功能，但是只能支持部分的 encoding，遇到 gbk 就傻眼了。一番研究以后，找到了比较科学的方案：
import * as Chardet from &amp;#39;chardet&amp;#39;; import * as Iconv from &amp;#39;iconv-lite&amp;#39;; const reader = new FileReader(); reader.onload = (e) =&amp;gt; { const data = e.target.result; const view = Buffer.from(data); // detect encoding and convert const encoding = Chardet.detect(view); const result = Iconv.decode(view, encoding); const csvData = Papa.parse(result).data; // do anything with it }; reader.readAsArrayBuffer(blob_here); 依赖了两个库：chardet 和 iconv-lite ，测试了一下，解析 UTF-8 GBK UTF-16BE 都没问题。
P.S. 在生成 csv 的时候，也会出现 Excel 打开后乱码的问题，一开始我以为需要转 UTF-16 然后再添加 BOM Mark ，后来发现只要在最前面加上 0xEF 0xBB 0xFB （UTF-8 编码下的 BOM Mark）即可。</description>
    </item>
    
  </channel>
</rss>
