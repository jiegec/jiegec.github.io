<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ecdsa on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/ecdsa/</link>
    <description>Recent content in ecdsa on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Jul 2023 17:26:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/ecdsa/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ECDSA</title>
      <link>https://jia.je/crypto/2023/07/14/ecdsa/</link>
      <pubDate>Fri, 14 Jul 2023 17:26:00 +0800</pubDate>
      
      <guid>https://jia.je/crypto/2023/07/14/ecdsa/</guid>
      <description>本文参考 ECDSA - Wikipedia。
ECDSA 是一个基于椭圆曲线的签名算法，使用时需要确定一个椭圆曲线，以及它的 base point \( G \)，且 \( G \) 的阶是素数 \( n \)。
生成 key pair 生成 key pair 的时候，私钥是整数 \( d_A \in [1, n-1] \)，那么公钥就是圆锥曲线上一点 \( Q_A = d_A \times G \)，这里 \( \times \) 表示整数与圆锥曲线上一点的乘法。
签名 签名的时候，对于给定的消息 \( m \)，签名流程如下：
计算哈希：\( e = \mathrm{HASH}(m) \)，例如用 SHA 系列的哈希算法 考虑到 \( e \) 的位数可能比 \( n \) 的位数更多，取 \( e \) 的高位，使得位数和 \( n \) 一致，得到的结果记为 \( z \) 生成一个密码学安全的随机数 \( k \in [1, n-1] \) 计算 \( k \times G \)，取它的 X 坐标为 \( x_1 \) 计算 \( r = x_1 \bmod n \) 计算 \( s = k^{-1}(z + r d_A) \bmod n \) 如果 \( r \) 或者 \( s \) 等于 0，取新的 \( k \) 再重试 得到的 ECDSA 签名就是 \( (r, s) \) 两个数 验证 验证签名的时候，已知 \( r, s, m, Q_A \)，按照下面的流程进行：</description>
    </item>
    
  </channel>
</rss>
