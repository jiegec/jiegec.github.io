<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ipv6 on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jiege.ch/tags/ipv6/</link>
    <description>Recent content in ipv6 on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Oct 2018 11:05:00 +0800</lastBuildDate>
    
	<atom:link href="https://jiege.ch/tags/ipv6/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 veth 实现 IPv6-only 的 Brouter 功能</title>
      <link>https://jiege.ch/networking/2018/10/07/use-veth-for-ipv6-brouter/</link>
      <pubDate>Sun, 07 Oct 2018 11:05:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/10/07/use-veth-for-ipv6-brouter/</guid>
      <description>最近从 @shankerwangmiao 学到了一个方法：通过 veth 把两个 bridge 的 IPv6 桥接起来。方法如下：
$ ip link add veth-v6-in type veth peer name veth-v6-out $ brctl addif br-in veth-v6-in $ brctl addif br-out veth-v6-out $ ebtables -t filter -A FORWARD -p ! IPv6 -o veth-v6-in -j DROP $ ebtables -t filter -A FORWARD -p ! IPv6 -o veth-v6-out -j DROP  这样就可以看到 veth 上仅有 IPv6 的流量了。</description>
    </item>
    
    <item>
      <title>在 Android 上打开 LTE 的 IPv6</title>
      <link>https://jiege.ch/networking/2018/10/04/enable-lte-ipv6-on-android/</link>
      <pubDate>Thu, 04 Oct 2018 22:47:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/10/04/enable-lte-ipv6-on-android/</guid>
      <description>听闻北京移动给 LTE 配置了 SLAAC ，但现在需要手动打开，方法如下：
Settings -&amp;gt; Network &amp;amp; Internet -&amp;gt; Mobile Network -&amp;gt; Advanced -&amp;gt; Access Point Names -&amp;gt; 中国移动 GPRS (China Mobile) -&amp;gt; 把 APN procotol 和 APN roaming protocol 两项都改成 IPv4/IPv6
然后在 test-ipv6.com 上可以看到确实分配了 IPv6 地址，不过目前评分只有 1&amp;frasl;10 。也就是说可用性还不佳。
而在 iOS 上，通过 HE 的 Network Tools 能看到，确实拿到了 IPv6 的地址，但是出不去，怀疑是运营商没有下发相关配置，所以还不能使用，只能继续等。
2018-11-06 更新：现在 iOS 用户也有 LTE 的 v6 了。评分是 9&amp;frasl;10 。目前可用性已经可以了，就是国内互联还不大好。</description>
    </item>
    
    <item>
      <title>在 macOS 上 TAP Interface 上启用 IPv6 自动配置</title>
      <link>https://jiege.ch/networking/2018/08/25/enable-ipv6-autoconfiguration-on-tap-interfaces-in-macos/</link>
      <pubDate>Sat, 25 Aug 2018 19:07:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/08/25/enable-ipv6-autoconfiguration-on-tap-interfaces-in-macos/</guid>
      <description>由于 macOS 对 TAP Interface 不会自动出现一个设置中对应的服务，所以需要手动进行配置。一番测试后，发现可以通过：
$ sudo ipconfig set [tap_if] automatic-v6 $ sudo ipconfig set [tap_if] dhcp  启用系统自带的 dhcp 和 ra 功能。也许有方法可以把这些 tap 搬到系统的设置中去。
UPDATE:
可以把 TAP Interface 加到系统的设置中去。方法参考Virtual network interface in Mac OS X。完成以后可以直接通过系统设置界面进行配置。</description>
    </item>
    
    <item>
      <title>向 Lenovo y1s 刷入 OpenWRT 17.01.5 固件，并把 IPv6 bridge 到内网中和配置认证脚本</title>
      <link>https://jiege.ch/networking/2018/07/26/flashing-lenovo-y1s-and-bridge-ipv6/</link>
      <pubDate>Thu, 26 Jul 2018 20:48:00 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/07/26/flashing-lenovo-y1s-and-bridge-ipv6/</guid>
      <description>首先参照OpenWRT Wiki - Lenovo Y1 v1找到刷固件教程：
 下载Lenovo y1s 的固件备用 断开电源，等待一段时间，插入电源同时快速按下重置按钮，如果面板双闪，则说明进入了恢复模式 电脑连接到四个 LAN 口中任意一个，配置静态地址在 192.168.1.0/24 网段 打开 192.168.1.1 可以看到刷固件的页面 上传固件，等待路由器重启 配置 IP 地址为 DHCP 模式，打开 192.168.1.1 进行配置  然后就是常规的密码设置，opkg 源设置为 tuna 的源，配置 ssh 和 公钥。
接下来，我们为了使用学校的 SLAAC ，采用 ebtables 直接把学校的 IPv6 bridge 进来，而 IPv4 由于准入系统，需要 NAT 。
参考Bridge IPv6 connections to WAN，下载v6brouter_openwrt.sh到某个地方，然后修改一下里面的一些参数：
# For Lenovo y1s WAN_DEV=eth0.2 BRIDGE=br-lan # the rest remain unchanged  然后跑起来之后，自己的电脑可以成功拿到原生的 IPv6 地址了，不需要用难用的 NAT66 技术。
下一步是采用z4yx/GoAuthing。</description>
    </item>
    
    <item>
      <title>NAT64 初尝试</title>
      <link>https://jiege.ch/networking/2018/01/02/first-trail-of-nat64/</link>
      <pubDate>Tue, 02 Jan 2018 19:41:22 +0800</pubDate>
      
      <guid>https://jiege.ch/networking/2018/01/02/first-trail-of-nat64/</guid>
      <description>最近宿舍里有线网络的 IPv4 总是拿不到地址，只能连无线网，不禁对计算机系学生的可怕的设备数量有了深刻的认识。不过，作为一个有道德（误）的良好青年，还是不要给已经枯竭的 IPv4 地址填堵了，还是赶紧玩玩 IPv6 的网络吧。然后在 TUNA 群里受青年千人续本达 (@heroxbd) 的安利，本地搭建一下 NAT64+DNS64 的环境。不过考虑到宿舍还是拿不到有线的 IPv4 地址，我就先利用苹果先前在强制 iOS 的应用支持 NAT64 网络的同时，在 macOS 上为了方便开发者调试，提供的便捷的建立 NAT64 网络的能力。
首先在设置中按住 Option 键打开 Sharing ， 点击 Internet Sharing ，勾上 Create NAT64 Network 然后把网络共享给设备。然后在手机上关掉 Wi-Fi 和 Cellular ，发现还能正常上网。此时可以打开 Wireshark 验证我们的成果了：
在手机上打开浏览器，浏览千度，得到如下的 Wireshark 截图： 这里，2001:2:0:aab1::1 是本机在这个子网中的地址，2001:2::aab1:cda2:5de:87f6:fd78 是我的 iOS 设备的地址，然后 iOS 向 macOS 发出了 DNS请求， macOS 发送 DNS 请求后得到 baidu.com 的 IPv4 地址之一为 111.13.101.208 ： 上图中，我们可以看到， baidu.com 的 AAAA 记录是 2001:2:0:1baa::6f0d:65d0 ，这个就是 DNS64 转译的地址，前面为网关的 prefix ，后面就是对应的 IPv4 地址： 0x6f=111, 0x0d=13, 0x65=101, 0xd0=208 ，当客户端向这个地址发包的时候，网关发现前缀符合条件，把最后的这部分 IPv4 地址取出来，自己把包发送到真实的地址上去，再把返回来的包再转为 IPv6 的地址返还给客户端。可以验证，剩下的几个地址也符合这个转译规则。</description>
    </item>
    
  </channel>
</rss>