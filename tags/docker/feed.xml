<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/docker/</link>
    <description>Recent content in docker on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Sep 2021 10:29:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/docker/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>研究 k8s 网络工作原理</title>
      <link>https://jia.je/devops/2021/09/18/k8s-networking/</link>
      <pubDate>Sat, 18 Sep 2021 10:29:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2021/09/18/k8s-networking/</guid>
      <description>背景 用 k8s 也有一段时间了，之前遇到过 iptables 等出现问题，导致 k8s 节点间网络出现问题，于是想研究一下 k8s 的网络工作原理。
Docker 网络 首先研究一下 Docker 网络连接是如何实现的。Docker 首先会创建一个 bridge，名为 bridge0:
$ ip a show docker0 3: docker0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP group default link/ether 02:42:c4:87:73:bf brd ff:ff:ff:ff:ff:ff inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0 valid_lft forever preferred_lft forever inet6 fe80::42:c4ff:fe87:73bf/64 scope link valid_lft forever preferred_lft forever 默认情况下，每个容器都会有单独的一个 netns，然后创建一对 veth pair，一端留在 global netns，另一端放到容器中。在 global netns 中的 veth 端口会加入到 docker0 中：</description>
    </item>
    
    <item>
      <title>用 gitlab ci 构建并部署应用到 k8s</title>
      <link>https://jia.je/devops/2021/03/16/gitlab-ci-k8s-integration/</link>
      <pubDate>Tue, 16 Mar 2021 08:41:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2021/03/16/gitlab-ci-k8s-integration/</guid>
      <description>背景 在 k8s 集群中部署了 gitlab-runner，并且希望在 gitlab ci 构建完成后，把新的 docker image push 到 private repo，然后更新应用。
参考文档：Gitlab CI 与 Kubernetes 的结合，Using Docker to build Docker images。
在 gitlab ci 中构建 docker 镜像 这一步需要 DinD 来实现在容器中构建容器。为了达到这个目的，首先要在 gitlab-runner 的配置中添加一个 volume 来共享 DinD 的证书路径：
gitlabUrl: REDACTED rbac: create: true runnerRegistrationToken: REDACTED runners: config: | [[runners]] [runners.kubernetes] image = &amp;#34;ubuntu:20.04&amp;#34; privileged = true [[runners.kubernetes.volumes.empty_dir]] name = &amp;#34;docker-certs&amp;#34; mount_path = &amp;#34;/certs/client&amp;#34; medium = &amp;#34;Memory&amp;#34; privileged: true 注意两点：1. privileged 2.</description>
    </item>
    
    <item>
      <title>用 Kubernetes 部署无状态服务</title>
      <link>https://jia.je/devops/2020/03/10/k8s-deploy-with-hpa/</link>
      <pubDate>Tue, 10 Mar 2020 13:57:00 +0800</pubDate>
      
      <guid>https://jia.je/devops/2020/03/10/k8s-deploy-with-hpa/</guid>
      <description>背景 最近需要部署一个用来跑编译的服务，服务从 MQ 取任务，编译完以后提交任务。最初的做法是包装成 docker，然后用 docker-compose 来 scale up。但既然有 k8s 这么好的工具，就试着学习了一下，踩了很多坑，总结了一些需要用到的命令。
搭建 Docker Registry 首先搭建一个本地的 Docker Repository，首先设置密码：
$ mkdir auth $ htpasswd user pass &amp;gt; auth/passwd 然后运行 registry：
$ docker run -d -p 5000:5000 \ --restart=always \ --name registry \ -v &amp;#34;$(pwd)/registry&amp;#34;:/var/lib/registry \ -v &amp;#34;$(pwd)/auth&amp;#34;:/auth \ -e &amp;#34;REGISTRY_AUTH=htpasswd&amp;#34; \ -e &amp;#34;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&amp;#34; \ -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \ registry:2 简单起见没有配 tls。然后吧本地的 image push 上去：
$ docker tag $image localhost:5000/$image $ docker push localhost:5000/$image 这样就可以了。</description>
    </item>
    
    <item>
      <title>部署 adminMongo 的 Docker 镜像</title>
      <link>https://jia.je/software/2018/10/23/admin-mongo-docker/</link>
      <pubDate>Tue, 23 Oct 2018 20:08:00 +0800</pubDate>
      
      <guid>https://jia.je/software/2018/10/23/admin-mongo-docker/</guid>
      <description>之前在软工的平台上部署了一个 MongoDB，但是自然是仅内网访问，想要浏览内容只能通过网页上的 Console 进去看，体验特别不好。所以想着能不能找一个在线的 MongoDB 浏览器。由于软工平台只能部署 Docker 镜像，所以我找到了mongo-express和adicom/admin-mongo。但软工平台现在还没实现环境变量的配置，所以我选了后者。
首先本地创建一个 app.json，让它监听 0.0.0.0:80，通过 deployer 传到平台上的配置，然后再把配置 mount 到 /app/config 路径上。现在就可以成功地在网页上浏览 MongoDB 了。</description>
    </item>
    
  </channel>
</rss>
