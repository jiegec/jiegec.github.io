<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tli on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/tags/tli/</link>
    <description>Recent content in tli on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Feb 2023 20:52:00 +0800</lastBuildDate><atom:link href="https://jia.je/tags/tli/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Transport Layer Interface 考古</title>
      <link>https://jia.je/networking/2023/02/12/transport-layer-interface/</link>
      <pubDate>Sun, 12 Feb 2023 20:52:00 +0800</pubDate>
      
      <guid>https://jia.je/networking/2023/02/12/transport-layer-interface/</guid>
      <description>Transport Layer Interface 现在网络编程主要采用的是 BSD Sockets API，但实际上当年还有另一套 API，就是 TLI（Transport Layer Interface），后来 BSD Sockets 胜出，进入了 POSIX 标准，TLI 后面也标准化为了 XTI，现在可以在部分 Unix 系统中找到。TLI/XTI 的使用方法和 Sockets API 有些类似，但是比较特别的一点在于，Sockets API 第一步是 socket 调用，传的参数就决定了这是 TCP 还是 UDP 还是其他什么协议，而 TLI 是通过打开不同的设备文件来进行区分：
int fd = t_open(&amp;#34;/dev/udp&amp;#34;, O_RDWR, NULL); 比如 TCP 就是 /dev/tcp，UDP 就是 /dev/udp，同理还有 /dev/icmp 等等。这颇有 Unix 的哲学：everything is a file。而 BSD Sockets API 则是有对应的系统调用，libc 基本不需要做什么事情。
沿着这个思路，既然 TLI 第一步是打开一个文件，难道后面的一系列的 bind、connect、send、recv 等操作也是对文件读写吗？是的！如果我们查看 illumos 的源码，会发现 t_connect 函数的核心实现是：
creq = (struct T_conn_req *)ctlbufp-&amp;gt;buf; creq-&amp;gt;PRIM_type = T_CONN_REQ; creq-&amp;gt;DEST_length = call-&amp;gt;addr.</description>
    </item>
    
  </channel>
</rss>
