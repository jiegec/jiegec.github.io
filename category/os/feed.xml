<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>os on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jiege.ch/category/os/</link>
    <description>Recent content in os on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 May 2019 11:04:00 +0800</lastBuildDate>
    
	<atom:link href="https://jiege.ch/category/os/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>给 Rocket Chip 挂接串口外设</title>
      <link>https://jiege.ch/os/2019/05/08/axi-uart-interrupt/</link>
      <pubDate>Wed, 08 May 2019 11:04:00 +0800</pubDate>
      
      <guid>https://jiege.ch/os/2019/05/08/axi-uart-interrupt/</guid>
      <description>前沿 最近在给 rCore 添加 Rocket Chip 支持。下面讲讲最近做了哪些工作，遇到了哪些坑，都是怎么解决的。
踩坑过程 Rocket Chip 运行代码 首先分析了一下已有的代码和工作方式，这个 Rocket Chip （ucb-bar/fpga-zynq）的设计大概是这样的：在 PS 上通过 fesvr 向 Rocket Chip 写入程序。Rocket Chip 本身暴露出一个 TSI ，一个串口的调试接口，通过 Zynq Adapter 挂到了 PS 下的 AXI 总线，暴露出若干个寄存器，大概如下：
/***Address Map *0x00 - serial out FIFO data *0x04 - serial out FIFO data available (words) *0x08 - serial in FIFO data *0x0C - serial in FIFO space available (words) *0x10 - system reset *0x20 - req FIFO data *0x24 - req FIFO data available (words) *0x28 - data FIFO data *0x2C - data FIFO data available (words) *0x30 - resp FIFO data *0x34 - resp FIFO space available (words) *0x38 - nsectors *0x3C - max request length */ 前面的是调试接口，后面的是 block device 和 network ，我们暂时还没有用到这些 UCB BAR 做的私货。在 Vivado 中，地址 Offset 是 0x43C00000 ，所以代码中就这样访问对应的物理地址：</description>
    </item>
    
    <item>
      <title>在 macOS 的 VirtualBox 上从 USB 启动</title>
      <link>https://jiege.ch/os/2018/09/14/virtualbox-booting-from-usb-on-mac/</link>
      <pubDate>Fri, 14 Sep 2018 23:57:00 +0800</pubDate>
      
      <guid>https://jiege.ch/os/2018/09/14/virtualbox-booting-from-usb-on-mac/</guid>
      <description>做了一个 Windows 10 安装 U 盘，想测试一下能不能启动，于是想用 VirtualBox 起一个虚拟机。但是发现，一般情况下要从 ISO 或者把 U 盘克隆成一个 vdi/vmdk etc 再启动。不过找到了 Cem Arslan 的 VirtualBox - Booting From USB (MAC) 实验了一下，确实可以用，以 /dev/disk2 为例方法如下：
$ diskutil unmountDisk /dev/disk2 $ sudo chown $(whoami) /dev/disk2 $ VBoxManage internalcommands createrawvmdk -filename PATH_TO_VMDK -rawdisk /dev/disk2 $ # Now boot from VirtualBox 对于其它平台，可以参考 Tu Nguyen 的 How to boot from USB in VirtualBox 。
研究了一下生成的 vmdk 文件，大概是这样的：
# Disk DescriptorFile version=1 CID=12345678 parentCID=ffffffff createType=&amp;quot;fullDevice&amp;quot; # Extent description RW 12345678 FLAT &amp;quot;/dev/disk2&amp;quot; 0 # The disk Data Base #DDB ddb.</description>
    </item>
    
    <item>
      <title>更改 macOS 屏幕亮度的按键</title>
      <link>https://jiege.ch/os/2018/08/05/changing-screen-brightness-key/</link>
      <pubDate>Sun, 05 Aug 2018 09:59:00 +0800</pubDate>
      
      <guid>https://jiege.ch/os/2018/08/05/changing-screen-brightness-key/</guid>
      <description>由于我打开了「Invert Fn」功能，所以需要调亮度的时候，是采用Fn+F1/F2的方法。但是，我的机械键盘则是，不按Fn时为1-9,按着Fn时为对应的F1-F9，但是就无法调整亮度和声音了。
然后捣腾了一下，发现可以用ScLk和Pa/Br（名称在各个键盘上不大一样）调整亮度。不过，还没发现如何更改音量。。。</description>
    </item>
    
    <item>
      <title>构建简易的 initramfs</title>
      <link>https://jiege.ch/os/2018/07/16/build-custom-initramfs/</link>
      <pubDate>Mon, 16 Jul 2018 03:43:00 +0800</pubDate>
      
      <guid>https://jiege.ch/os/2018/07/16/build-custom-initramfs/</guid>
      <description>一直对 Linux 的启动很感兴趣，但对 initrd 和 initramfs 等概念不大了解，于是上网找了资料，自己成功地看到了现象。
参考资料： Build and boot a minimal Linux system with qemu Custom Initramfs initramfs vs initrd ramfs, rootfs and initramfs The Kernel Newbie Corner: &amp;ldquo;initrd&amp;rdquo; and &amp;ldquo;initramfs&amp;rdquo;&amp;ndash; What&amp;rsquo;s Up With That?
具体步骤：
$ cat hello.c #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; int main() { for (;;) { printf(&amp;#34;Hello, world!\n&amp;#34;); } } $ gcc -static hello.c -o init $ echo init | cpio -o -H newc | gzip &amp;gt; initrd $ qemu-system-x86_64 -kernel /boot/vmlinuz-linux -initrd initrd -nographic -append &amp;#39;console=ttyS0&amp;#39; # Use C-a c q u i t &amp;lt;Enter&amp;gt; to exit 可以看到过一会（三四秒？），可以看到满屏的 Hello world 在输出。</description>
    </item>
    
    <item>
      <title>向 Nexus 6P 中刷入 LineageOS 实践</title>
      <link>https://jiege.ch/os/2018/05/29/flashing-lineageos-in-nexus6p/</link>
      <pubDate>Tue, 29 May 2018 07:18:00 +0800</pubDate>
      
      <guid>https://jiege.ch/os/2018/05/29/flashing-lineageos-in-nexus6p/</guid>
      <description>Nexus 6P 自带的系统没有允许 Root ，所以需要自己解锁 bootloader 并且刷上别的系统。我选择了 LineageOS 。Nexus 6P 的代号为 angler， 首先可以找到官方的安装教程。
我们需要下载的东西：
$ wget https://mirrorbits.lineageos.org/full/angler/20180521/lineage-15.1-20180521-nightly-angler-signed.zip $ wget https://mirrorbits.lineageos.org/full/angler/20180521/lineage-15.1-20180521-nightly-angler-signed.zip?sha256 -O lineage-15.1-20180521-nightly-angler-signed.zip.sha256 $ wget https://mirrorbits.lineageos.org/su/addonsu-15.1-arm64-signed.zip $ wget https://mirrorbits.lineageos.org/su/addonsu-15.1-arm64-signed.zip?sha256 -O addonsu-15.1-arm64-signed.zip $ wget https://github.com/opengapps/arm64/releases/download/20180527/open_gapps-arm64-8.1-full-20180527.zip $ wget https://github.com/opengapps/arm64/releases/download/20180527/open_gapps-arm64-8.1-full-20180527.zip.md5 $ wget https://dl.twrp.me/angler/twrp-3.2.1-0-angler.img $ wget https://dl.twrp.me/angler/twrp-3.2.1-0-angler.img.asc $ wget https://dl.twrp.me/angler/twrp-3.2.1-0-angler.img.md5 $ gpg --verify *.asc $ md5sum -c *.md5 $ sha256sum -c *.sha256 其中 Open GApps 可以自己考虑选择 full 还是其它的选择。
接下来，按照教程，先解锁 bootloader 。连接手机，进入 USB Debugging Mode ，重启进入 bootloader 并且解锁：</description>
    </item>
    
    <item>
      <title>在 WSL 上开启一个 getty 到串口的方法</title>
      <link>https://jiege.ch/os/2018/05/25/opening-tty-terminal-in-wsl/</link>
      <pubDate>Fri, 25 May 2018 21:56:00 +0800</pubDate>
      
      <guid>https://jiege.ch/os/2018/05/25/opening-tty-terminal-in-wsl/</guid>
      <description>为了测试一个硬件的 terminal ，想在 Windows 上向串口开一个 tty ，跑各种软件来测试。这件事情在 Linux 上和 macOS 上都有实践，但一直不知道 Windows 上怎么搞。经过了一番搜索，找到了 https://blogs.msdn.microsoft.com/wsl/2017/04/14/serial-support-on-the-windows-subsystem-for-linux/ 和 https://unix.stackexchange.com/a/123559 的方案。
以 COM5 为例：
$ sudo chmod 666 /dev/ttyS5 $ sudo agetty -s 115200 ttyS5 linux 这样就可以看到一个登录的界面了。
在 macOS 上(https://superuser.com/questions/1059744/serial-console-login-on-osx)：
$ screen /dev/tty.SLAB_USBtoUART 115200 # type C-b : exec ::: /usr/libexec/getty std.115200 </description>
    </item>
    
    <item>
      <title>体验 Fedora on RISCV</title>
      <link>https://jiege.ch/os/2018/05/24/trying-fedora-on-riscv/</link>
      <pubDate>Thu, 24 May 2018 23:40:00 +0800</pubDate>
      
      <guid>https://jiege.ch/os/2018/05/24/trying-fedora-on-riscv/</guid>
      <description>看到 RISCV 很久了，但一直没能体验。最近工具链不断更新， QEMU 在 2.12.0 也正式加入了 riscv 的模拟。但是自己编译一个内核又太麻烦，就找到了 Fedora 做的 RISCV port，下载下来试用了一下。之前试过一次，但是遇到了一些问题，刚才总算是成功地搞出来了。
官方文档地址： https://fedorapeople.org/groups/risc-v/disk-images/readme.txt 首先下载 https://fedorapeople.org/groups/risc-v/disk-images/ 下的 bbl vmlinux 和 stage4-disk.img.xz 三个文件，然后解压 stage4-disk.img.xz ，大约有 5G 的样子。之前作者在脚本里作死开得特别大，导致我以前光是解压这一步就成功不了。现在终于解决了。
然后启动 qemu 命令打开虚拟机：
qemu-system-riscv64 \  -nographic \  -machine virt \  -m 2G \  -kernel bbl \  -object rng-random,filename=/dev/urandom,id=rng0 \  -device virtio-rng-device,rng=rng0 \  -append &amp;#34;console=ttyS0 ro root=/dev/vda&amp;#34; \  -device virtio-blk-device,drive=hd0 \  -drive file=stage4-disk.img,format=raw,id=hd0 \  -device virtio-net-device,netdev=usernet \  -netdev user,id=usernet,hostfwd=tcp::10000-:22 这段命令摘自 readme.</description>
    </item>
    
  </channel>
</rss>