<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>system on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/category/system/</link>
    <description>Recent content in system on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 May 2022 10:24:00 +0800</lastBuildDate><atom:link href="https://jia.je/category/system/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NUC11 ESXi 中 iGPU 直通虚拟机</title>
      <link>https://jia.je/system/2022/05/05/nuc11-igpu-passthrough/</link>
      <pubDate>Thu, 05 May 2022 10:24:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2022/05/05/nuc11-igpu-passthrough/</guid>
      <description>背景 之前在 NUC11PAKi5 上装了 ESXI 加几个虚拟机系统，但是自带的 iGPU Intel Iris Xe Graphics(Tiger Lake GT-2) 没用上，感觉有些浪费。因此想要给 Windows 直通。在直通到 Windows 后发现会无限重启，最后直通到 Linux 中。
步骤 第一步是到 esxi 的设备设置的地方，把 iGPU 的 Passthrough 打开，这时候会提示需要重启，但是如果重启，会发现还是处于 Needs reboot 状态。网上进行搜索，发现是 ESXi 自己占用了 iGPU 的输出，解决方法如下：
$ esxcli system settings kernel set -s vga -v FALSE 这样设置以后就不会在显卡输出上显示 dcui 了，这是一个比较大的缺点，但是平时也不用自带的显示输出，就无所谓了。
第二步，重启以后，这时候看设备状态就是 Active。回到 Windows 虚拟机，添加 PCI device，然后启动。这时候，我遇到了这样的错误：
Module ‘DevicePowerOn’ power on failed Failed to register the device pciPassthru0 搜索了一番，解决方法是关掉 IOMMU。在虚拟机设计中关掉 IOMMU，就可以正常启动了。
第三步，进入 Windows，这时候就可以看到有一个新的未知设备了，VID=8086，PID=9a49；等待一段时间，Windows 自动安装好了驱动，就可以正常识别了。GPU-Z 中可以看到效果如下：</description>
    </item>
    
    <item>
      <title>一次从 RHEL 6 到 CentOS 7 的更新</title>
      <link>https://jia.je/system/2021/08/30/rhel6-upgrade-centos7/</link>
      <pubDate>Mon, 30 Aug 2021 13:20:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2021/08/30/rhel6-upgrade-centos7/</guid>
      <description>背景 有一台 RHEL 6 的服务器，各种软件版本太老了，用起来很难受，因此想升级。一开始想升级到 RHEL 7，但是发现必须要从 RedHat 下载 ISO，比较慢，所以我就先切换到 CentOS 6，再升级到 CentOS 7
过程 RHEL 6 Pre upgrade 一开始还是打算升级到 RHEL 7，所以跟随 RedHat 的文档去做 pre upgrade check，发现有一步要跑好久，网上搜了一下，发现这个步骤会扫描已有的各种程序，检查升级以后会不会出现不能运行的问题。但是如果有很多小文件，这一个过程就会进行很久，好在可以设置 exclusion 目录。最后检查出来的结果就是 GNOME 没法升级，建议卸载。
倒腾了一下升级工具，发现需要离线安装，比较麻烦，我就干脆换 CentOS 了。
RHEL 6 -&amp;gt; CentOS 6 首先，把软件源都切换到 CentOS，这一步很简单，因为包都是一样的。只不过，因为 CentOS 6 在 centos-vault 里面，所以用起来比较麻烦。
CentOS 6 -&amp;gt; CentOS 7 由于 CentOS 6 到 CentOS 7 升级涉及的改动比较多，官方提供了一个升级工具。一开始，我想直接升级到 CentOS 7 最新版本，但是报错，看到网上说可以升级到 CentOS 7 的早期版本，试了一下，确实没问题。
一通升级以后，重启，进入更新过程，发现很多包都安装失败了。重启以后，因为找不到 rootfs，挂在了 dracut 的 initramfs 里面。</description>
    </item>
    
    <item>
      <title>静态编译 ipmitool</title>
      <link>https://jia.je/system/2021/03/29/static-ipmitool/</link>
      <pubDate>Mon, 29 Mar 2021 12:20:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2021/03/29/static-ipmitool/</guid>
      <description>为了在 ESXi 上运行 ipmitool，需要静态编译 ipmitool。网上已经有一些解决方案：
https://github.com/ryanbarrie/ESXI-ipmitool https://github.com/hobbsh/static-ipmitool https://github.com/ewenmcneill/docker-build-static-ipmitool
我稍微修改了一下，用来编译最新 ipmitool：
#!/bin/bash set -x export VERSION=1.8.18 rm -rf ipmitool_$VERSION curl -L -o ipmitool_$VERSION.tar.bz2 http://deb.debian.org/debian/pool/main/i/ipmitool/ipmitool_$VERSION.orig.tar.bz2 tar xvf ipmitool_$VERSION.tar.bz2 cd ipmitool-$VERSION CC=gcc CFLAGS=-m64 LDFLAGS=-static ./configure make -j24 cd src ../libtool --silent --tag=CC --mode=link gcc -m64 -fno-strict-aliasing -Wreturn-type -all-static -o ipmitool.static ipmitool.o ipmishell.o ../lib/libipmitool.la plugins/libintf.la file $PWD/ipmitool.static 复制下来，编译完成后 scp 到 esxi 中即可使用。</description>
    </item>
    
    <item>
      <title>通过 ipmitool 配置 iLO 4 管理端口</title>
      <link>https://jia.je/system/2021/03/29/ilo-nic-selection-ipmitool/</link>
      <pubDate>Mon, 29 Mar 2021 08:30:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2021/03/29/ilo-nic-selection-ipmitool/</guid>
      <description>ipmitool 自带了对 iDRAC 的支持，可以通过 ipmitool delloem 设置 iDRAC 的管理端口。但是对 iLO 的支持并没有实现。研究了一番，找到了通过 raw command 配置 iLO 4 管理端口的方法。
这篇文章 讲述了 ipmitool lan 命令实际会发送的命令：
读取配置：
$ ipmitool raw 0x0c 0x02 CHANNEL KEY SET BLOCK 一般来说 SET 和 BLOCK 都是 0。KEY 的常见取值：
3: IP 地址 4: IP 地址来源 5: MAC 地址 6: 子网掩码 12: 默认网关 返回的数据中，第一个字节忽略，剩下的就是数据了。
写入配置：
$ ipmitool raw 0x0c 0x01 CHANNEL KEY DATA... 知道如何读取配置后，接下来就是找到 iLO 4 配置 NIC 的地方了。一番搜索，找到了 HPE iLO IPMI User Guide。在第 101 页，可以找到一个用于配置 iLO NIC 选择的设置：</description>
    </item>
    
    <item>
      <title>iDRAC 各版本</title>
      <link>https://jia.je/system/2021/03/03/idrac-versions/</link>
      <pubDate>Wed, 03 Mar 2021 20:13:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2021/03/03/idrac-versions/</guid>
      <description>iDRAC 版本 目前接触到的 iDRAC 版本有：7 8 9 。一些常见的服务器型号和 iDRAC 版本对应关系：
7: PowerEdge R320，PowerEdge R720 8: PowerEdge R730xd，PowerEdge R630，PowerEdge R730，PowerEdge C4130 9: PowerEdge R7425 基本上，如果是 PowerEdge R 什么的，就看第二位数字，就可以推断出版本号了。
下面列举了一下可能会用到的版本。
iDRAC 7 iDRAC 7 在 2020 年 2 月停止更新了，最新版本是 2.65.65.65。
升级路线参考：Reddit。
1.66.65 下载页面，2014 年 12 月版本。 2.10.10.10 下载页面，2015 年 4 月版本。 2.65.65.65 下载页面，2020 年 3 月版本，添加了 HSTS 。 iDRAC 8 2.10.10.10 下载页面，2015 年 3 月版本。 2.30.30.30: 下载页面，2016 年 2 月版本，添加了 HTML5 virtual console 支持。 2.</description>
    </item>
    
    <item>
      <title>IBM Power S822LC(8335-GTB) BMC 升级</title>
      <link>https://jia.je/system/2020/10/09/upgrade-power8-bmc/</link>
      <pubDate>Fri, 09 Oct 2020 08:16:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2020/10/09/upgrade-power8-bmc/</guid>
      <description>背景 最近拿到一台 IBM Power S822LC（8335-GTB） 机器的访问权限，这也是我第一次碰 ppc64le 指令集的服务器。然后发现，它的 BMC 版本比较老，我想连接 Remote Control 失败了，原因是 JViewer 不支持 macOS，我就想着能不能升级一下。
升级过程 首先，在网上找了一下文档，首先用 ipmitool 找一下机器型号：
$ sudo ipmitool fru print 3 Chassis Type : Unknown Chassis Part Number : 8335-GTB Chassis Serial : REDACTED 可以看到，这台机器是 8335-GTB 型号，按照这个型号在 Fix Central 上搜索，可以找到若干个版本的 firmware，其中最老的版本是 OP8_v1.11_2.1，对比了一下，和原来的版本一致：
$ sudo ipmitool fru print 47 Product Name : OpenPOWER Firmware Product Version : IBM-garrison-ibm-OP8_v1.11_2.1 Product Extra : op-build-da02863 Product Extra : buildroot-81b8d98 Product Extra : skiboot-5.</description>
    </item>
    
    <item>
      <title>TP-Link Archer T4U V3 Linux 驱动安装</title>
      <link>https://jia.je/system/2020/01/05/archer-t4u-v3-driver/</link>
      <pubDate>Sun, 05 Jan 2020 01:21:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2020/01/05/archer-t4u-v3-driver/</guid>
      <description>之前因为 MacBookPro 内置的 Wi-Fi 总是有问题，就找了个 USB 的无线网卡：TP-Link Archer T4U V3（VID：2357，PID：0115），这个网卡也没有主线的驱动，在网上找到了现成的驱动：cilynx/rtl88x2bu，按照 README 用 DKMS 安装即可，实测可用。</description>
    </item>
    
    <item>
      <title>MacBookPro 14,3 Wi-Fi 驱动问题解决方案</title>
      <link>https://jia.je/system/2020/01/05/macbookpro-linux-wifi/</link>
      <pubDate>Sun, 05 Jan 2020 00:53:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2020/01/05/macbookpro-linux-wifi/</guid>
      <description>之前在 MacBookPro 14,3 安装 Linux 后，很多东西的驱动都有了解决方法，参考 1，参考 2，触摸板和键盘等等都可以正常使用，触摸板的使用效果比我意料要好一些，虽然还是没有 macOS 原生那么好。但 Wi-Fi 一直有能扫到信号但连不上的问题，最近终于有了比较完善的解决方案，地址，也是两个月前才出来的方案，我测试了一下，确实可以很好的解决网络问题，网卡型号是 BCM43602，驱动用的是 brcmfmac。
另一方面，带 T2 的 MacBook 似乎也有了支持，见 aunali1/linux-mbp-arch，有一些尚未 upstream 的 patch，但我没有设备，就没有测试了。需要吐槽的是 ArchWiki 不怎么更新新 Model 的 MacBook 的教程，都是到处找散落的 github repo 和 gist 找别人的方案。
P.S. 可以正常工作的有：Wi-Fi，键盘，触摸板，Touchbar，内置摄像头，键盘背光，蓝牙 P.P.S MacBookPro11,2 的网卡是 BCM4360，直接用 broadcom-wl 驱动就可以。</description>
    </item>
    
    <item>
      <title>在 Archlinux 上用 winbind 配合 pam 配置 Windows AD 认证登录</title>
      <link>https://jia.je/system/2018/05/05/windows-ad-linux-pam/</link>
      <pubDate>Sat, 05 May 2018 15:39:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2018/05/05/windows-ad-linux-pam/</guid>
      <description>作为不清真的网络管理员，为了配置一套完整的统一认证系统，陈老师采用了 Windows AD 的方法给这里配置统一认证。重装了系统，自然要把之前的统一认证再配到新装的 Archlinux 上。
参考资料： Active Directory Integration
首先安装相应的包：
pacman -S samba 我们还没有配好 Kerberos，所以跳过。
然后配置 /etc/samba/smb.conf ，以下是一个例子。可以根据文档微调。
[global] security = ads realm = YOUR-AD-HERE workgroup = YOUR-GROUP-HERE idmap uid = 10000-20000 idmap gid = 10000-20000 winbind enum users = yes winbind enum groups = yes template homedir = /home/%D/%U template shell = /bin/bash client use spnego = yes client ntlmv2 auth = yes encrypt passwords = yes winbind use default domain = yes restrict anonymous = 2 这样，域上的用户 user 会拿到 home 目录为 /home/YOUR-DOMAIN-HERE/user ，uid 在 10000-2000范围内的用户。在一会经过配置之后，可以通过 getent passwd 验证。</description>
    </item>
    
    <item>
      <title>在服务器上安装 Archlinux 记录</title>
      <link>https://jia.je/system/2018/05/01/installing-arch-experience/</link>
      <pubDate>Tue, 01 May 2018 16:46:00 +0800</pubDate>
      
      <guid>https://jia.je/system/2018/05/01/installing-arch-experience/</guid>
      <description>有一台服务器的 Ubuntu 挂了，我们想在上面重装一个 Archlinux 。我们首先下载了 archlinux-2018.04.01 的 ISO, 直接 dd 到 U 盘上，但是遇到了问题。
首先遇到的问题是，一启动之后就会花屏。我们一开始怀疑是 NVIDIA 驱动的问题，于是想改 kernel param 但是发现，这个 ISO 是 hybrid 的，我们在 macOS 和 Windows 上都不能 mount 上这种类型的盘。于是我们选择自己搞分区表。我们把 U 盘插到电脑上，然后在 Linux 虚拟机内重新分区为 GPT ，然后 mount 到 /mnt/usb ，再重新下载 archlinux iso ，不过此时刚好上游更新了 archlinux-2018.05.01 的影响。我们把 ISO 中根分区 mount 到 /mnt/iso 上来，然后 cp -a /mnt/iso/* /mnt/usb 。调整了 grub 中的内核参数，仍然无果。我们认为问题可能在显卡上，就把那张显卡拔下来了，果然显示就正常了，但是新的问题就来了。
一启动， fstab 尝试把 LABEL=ARCHISO_201805 挂在上来，但是失败。于是我们把 U 盘插到 mac 上，用 Disk Utility 给分区命了名，再插回去，然后这个 Live CD 的 Systemd 就成功起来了。接下来就是根据官方的 Installation Guide 进行安装各种东西。安装完后，在 /boot/EFI 的操作上也出现了一些问题，一开始忘记调用 grub-mkconfig ，导致重启以后进入 grub-rescue ，所以又回到 Live CD 重新 grub-mkconfig 。同时对 systemd-networkd 也进行了相应的调整，这样开机以后可以配好网络。主要就是在网卡上配上两个 VLAN 和相应的 DHCP 和静态地址。</description>
    </item>
    
    <item>
      <title>In macOS Sierra, Karabiner-Elements finally support complex modifications</title>
      <link>https://jia.je/system/2017/06/15/macos-sierra-karabiner-finally-support-complex-modifications/</link>
      <pubDate>Thu, 15 Jun 2017 17:22:20 +0800</pubDate>
      
      <guid>https://jia.je/system/2017/06/15/macos-sierra-karabiner-finally-support-complex-modifications/</guid>
      <description>In favor of this commit, Karabiner-Elements now supports the much welcomed yet long-lost feature, namely complex modifications that enable users to trigger complex keypress.
Now I can achieve this:
If I press &amp;lt;Enter&amp;gt;, then: 1. If &amp;lt;Enter&amp;gt; is pressed alone, then send &amp;lt;Enter&amp;gt;. 2. If &amp;lt;Enter&amp;gt; is pressed along with other keys, then send &amp;lt;Control&amp;gt; + Other. By adding this code to ~/.config/karabiner/karabiner.json :
&amp;#34;complex_modifications&amp;#34;: { &amp;#34;rules&amp;#34;: [ { &amp;#34;manipulators&amp;#34;: [ { &amp;#34;description&amp;#34;: &amp;#34;Change return_or_enter to left_control.</description>
    </item>
    
  </channel>
</rss>
