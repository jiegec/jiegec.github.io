<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hardwares on 杰哥的{运维,编程,调板子}小笔记</title>
    <link>https://jia.je/hardware/</link>
    <description>Recent content in Hardwares on 杰哥的{运维,编程,调板子}小笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Dec 2021 15:06:00 +0800</lastBuildDate><atom:link href="https://jia.je/hardware/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DRAM 分析</title>
      <link>https://jia.je/hardware/2021/12/12/dram/</link>
      <pubDate>Sun, 12 Dec 2021 15:06:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/12/12/dram/</guid>
      <description>参考文档  Memory systems: Cache, DRAM &amp;amp; Disk 译文： DDR4 SDRAM - Understanding the Basics（上） 译文： DDR4 SDRAM - Understanding the Basics（下） JEDEC STANDARD DDR4 SDRAM JESD79-4B  DRAM 是如何组织的 DRAM 分成很多层次：Bank Group，Bank，Row，Column，从大到小，容量也是各级别的乘积。
举例子：
 4 Bank Group 4 Bank per Bank Group 32,768 Row per Bank 1024 Column per Row 4 Bits per Column  那么总大小就是 4*4*32768*1024*4=2 Gb。
访问模式 DRAM 的访问模式决定了访问内存的实际带宽。对于每次访问，需要这样的操作：
 用 ACT(Bank Activate) 命令打开某个 Bank Group 下面的某个 Bank 的某个 Row，此时整个 Row 的数据都会复制到 Sense Amplifier 中。这一步叫做 RAS（Row Address Strobe） 用 RD(Read)/WR(Write) 命令按照 Column 访问数据。这一步叫做 CAS（Column Address Strobe）。 在访问其他 Row 之前，需要用 PRE(Single Bank Precharge) 命令将 Sense Amplifier 中整个 Row 的数据写回 Row 中。  可以看到，如果访问连续的地址，就可以省下 ACT 命令的时间，可以连续的进行 RD/WR 命令操作。</description>
    </item>
    
    <item>
      <title>RISC-V Debug 分析</title>
      <link>https://jia.je/hardware/2021/12/12/riscv-debug/</link>
      <pubDate>Sun, 12 Dec 2021 14:01:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/12/12/riscv-debug/</guid>
      <description>参考文档  RISC-V Debug Spec 0.13 IEEE Standard for JTAG 1149.1-2013 OpenOCD 相关代码  背景 之前用过一些 RISC-V 核心，但是遇到调试相关的内容的时候就两眼一抹黑，不知道原理，出了问题也不知道如何排查，趁此机会研究一下工作原理。
架构 为了调试 RISC-V 核心，需要很多部件一起工作。按 RISC-V Debug Spec 所述，有这么几部分：
 Debugger: GDB，连接到 OpenOCD 启动的 GDB Server Debug Translator: OpenOCD，向 GDB 提供 Server 实现，同时会通过 FTDI 等芯片控制 JTAG Debug Transport Hardware: 比如 FTDI 的芯片，可以提供 USB 接口，让 OpenOCD 控制 JTAG 信号 TMS/TDI/TCK 的变化，并读取 TDO Debug Transport Module: 在芯片内部的 JTAG 控制器（TAP），符合 JTAG 标准 Debug Module Interface：RISC-V 自定义的一系列寄存器，通过这些寄存器来控制 Debug Module 的行为 Debug Module：调试器，控制 RISC-V 核心，同时也支持直接访问总线，也有内部的 Program Buffer  可以看到，DMI 是实际的调试接口，而 JTAG 可以认为是一个传输协议。</description>
    </item>
    
    <item>
      <title>Manycore 处理器架构分析</title>
      <link>https://jia.je/hardware/2021/12/06/manycore/</link>
      <pubDate>Mon, 06 Dec 2021 00:11:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/12/06/manycore/</guid>
      <description>参考文档  Intel® Many Integrated Core Architecture (Intel® MIC Architecture) - Advanced Intel® Xeon Phi coprocessor (codename Knights Corner) https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=7453080 Knights Landing (KNL): 2nd Generation Intel® Xeon Phi™ Processor Fujitsu A64FX Fujitsu Presents Post-K CPU Specifications Fujitsu High Performance CPU for the Post-K Computer SUPERCOMPUTER FUGAKU - SUPERCOMPUTER FUGAKU, A64FX 48C 2.2GHZ, TOFU INTERCONNECT D Preliminary Performance Evaluation of the Fujitsu A64FX Using HPC Applications FUJITSU Processor A64FX  Xeon Phi - Intel MIC MIC: Many Integrated Core Architecture</description>
    </item>
    
    <item>
      <title>Sunway 处理器架构分析</title>
      <link>https://jia.je/hardware/2021/12/04/sunway/</link>
      <pubDate>Sat, 04 Dec 2021 09:13:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/12/04/sunway/</guid>
      <description>参考文档  高性能众核处理器申威26010 稀疏矩阵向量乘法在申威众核架构上的性能优化 Sunway SW26010 The Sunway TaihuLight supercomputer: system and applications Report on the Sunway TaihuLight System Closing the “Quantum Supremacy” Gap: Achieving Real-Time Simulation of a Random Quantum Circuit Using a New Sunway Supercomputer SW_Qsim: A Minimize-Memory Quantum Simulator with High-Performance on a New Sunway Supercomputer 18.9-Pflops Nonlinear Earthquake Simulation on Sunway TaihuLight: Enabling Depiction of 18-Hz and 8-Meter Scenarios A FIRST PEEK AT CHINA’S SUNWAY EXASCALE SUPERCOMPUTER THE NITTY GRITTY OF THE SUNWAY EXASCALE SYSTEM NETWORK AND STORAGE Sunway supercomputer architecture towards exascale computing: analysis and practice  SW26010 Sunway TaihuLight 的层次：</description>
    </item>
    
    <item>
      <title>移植系统到 Rocket Chip on VCU128</title>
      <link>https://jia.je/hardware/2021/10/18/port-system-to-rocket-chip-on-vcu128/</link>
      <pubDate>Mon, 18 Oct 2021 08:35:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/10/18/port-system-to-rocket-chip-on-vcu128/</guid>
      <description>背景 最近需要在 VCU128 上搭建一个 SOC，然后想到可以把 OpenSBI、U-Boot 和 Linux 移植到这个平台上方便测试，于是又开始折腾这些东西。代码仓库都已经开源：
 rocket-chip-vcu128 opensbi u-boot linux  Rocket Chip on VCU128 第一部分是基于之前 rocket2thinpad 在 Thinpad 上移植 Rocket Chip 的经验，做了一些更新，主要是因为 VCU128 的外设不大一样，同时我也要运行更复杂的程序，主要做了这些事情：
 添加了 VCU128 的内存和外设：HBM、SPI、I2C、UART、ETH 打开了更多核心选项：S-mode 和 U-mode  主要踩过的坑：
 BSCAN 不工作，估计是因为一些参数不对，@jsteward 之前在 zcu 平台上做了一些测试，估计要用类似的办法进行修改；我最后直接去掉了这部分逻辑 这个板子的 PHY RESET 信号要通过 I2C 接口访问 TI 的 Port Expander，所以没法直接连，要通过 gpio 输出来手动 reset SPI Startup Flash 的时序配置，见我之前的博客 Xilinx PCS/PMA IP 也会自己挂一个设备到 MDIO bus上，应该有自己的 PHY 地址，而不要和物理的 PHY 冲突  U-Boot 在 U-Boot 上花了比较多的时间，用它的目的主要是：</description>
    </item>
    
    <item>
      <title>AXI Quad SPI 时序理解</title>
      <link>https://jia.je/hardware/2021/09/27/xilinx-axi-quad-spi-timing/</link>
      <pubDate>Mon, 27 Sep 2021 22:22:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/09/27/xilinx-axi-quad-spi-timing/</guid>
      <description>背景 之前一直没搞懂 Vivado 中 xdc 需要怎么编写，遇到一些必须要写 xdc 的时候就很头疼，不知道怎么写才可以得到正确的结果。今天分析了一下 AXI Quad SPI 的时序 xdc，终于理解了其中的含义。
AXI Quad SPI AXI Quad SPI 是一个 SPI 的控制器，它支持 XIP（eXecute In Place）模式，即可以暴露一个只读 AXI Slave 接口，当接收到读请求的时候，就按照标准的 SPI Flash 命令去对应的地址进行读取，然后返回结果。由于不同厂家的 SPI Flash 支持有所不同，所以 IP 上的设置可以看到厂家的选择。
特别地，一个常见的需求是希望访问 Cfg（Configuration） Flash，亦即用来保存 Bitstream 的 Flash。当 FPGA 上电的时候，如果启动模式设置为 SPI Flash，FPGA 就会向 Cfg Flash 读取 Bitstream，Cfg Flash 需要连接到 FPGA 的指定引脚上，当 FPGA 初始化的时候由内部逻辑驱动，初始化完成后又要转交给用户逻辑。转交的方式就是通过 STARTUP 系列的 primitive。
通常，如果要连接外部的 SPI Flash，需要连接几条信号线到顶层，然后通过 xdc 把信号绑定到引脚上，然后引脚连接了一个外部的 SPI Flash。但由于 Cfg Flash 比较特殊，所以信号从 AXI Quad SPI 直接连到 STARTUP 系列的 primitive 上。如果是采用 STARTUPE2 原语的 7 系列的 FPGA，那么只有时钟会通过 STARTUPE2 pritimive 连接到 SPI Flash 上，其他数据信号还是正常通过顶层绑定；如果是采用 STARTUPE3 原语的 UltraScale 系列的 FPGA，那么时钟和数据都通过 STARTUPE3 primitive 连接到 SPI Flash。</description>
    </item>
    
    <item>
      <title>浅谈乱序执行 CPU</title>
      <link>https://jia.je/hardware/2021/09/14/brief-into-ooo/</link>
      <pubDate>Tue, 14 Sep 2021 13:47:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/09/14/brief-into-ooo/</guid>
      <description>背景 最早学习乱序执行 CPU 的时候，是在 Wikipedia 上自学的，后来在计算机系统结构课上又学了一遍，但发现学的和现在实际采用的乱序执行 CPU 又有很大区别，后来又仔细研究了一下，觉得理解更多了，就想总结一下。
经典 Tomasulo 参考 Stanford 教材
经典 Tomasulo，也是 Wikipedia 上描述的 Tomasulo 算法，它的核心是保留站。指令在 Decode 之后，会被分配到一个保留站中。保留站有以下的这些属性：
 Op：需要执行的操作 Qj，Qk：操作数依赖的指令目前所在的保留站 ID Vj，Qk：操作数的值 Rj，Rk：操作数是否 ready（或者用特殊的 Qj，Qk 值表示是否 ready） Busy：这个保留站被占用  此外还有一个 mapping（Wikipedia 上叫做 RegisterStat），记录了寄存器是否会被某个保留站中的指令写入。
指令分配到保留站的时候，会查询 RegisterStat，得知操作数寄存器是否 ready，如果不 ready，说明有一个先前的指令要写入这个寄存器，那就记录下对应的保留站 ID。当操作数都 ready 了，就可以进入计算单元计算。当一条指令在执行单元中完成的时候，未出现 WAW 时会把结果写入寄存器堆，并且通过 Common Data Bus 进行广播，目前在保留站中的指令如果发现，它所需要的操作数刚好计算出来了，就会把取值保存下来。
这里有一些细节：因为保留站中的指令可能要等待其他指令的完成，为了保证计算单元利用率更高，对于同一个计算类型（比如 ALU），需要有若干个同类的保留站（比如 Add1，Add2，Add3）。在 Wikipedia 的表述中，每个保留站对应了一个计算单元，这样性能比较好，但自然面积也就更大。如果节省面积，也可以减少计算单元的数量，然后每个计算单元从多个保留站中获取计算的指令。
可以思考一下，这种方法的瓶颈在什么地方。首先，每条指令都放在一个保留站中，当保留站满的时候就不能发射新的指令。其次，如果计算单元的吞吐跟不上保留站的填充速度，也会导致阻塞。
这种方法的一个比较麻烦的点在于难以实现精确异常。精确异常的关键在于，异常之前的指令都生效，异常和异常之后的指令不生效，但这种方法无法进行区分。
从寄存器重命名的角度来看，可以认为这种方法属于 Implicit Register Renaming，也就是说，把 Register 重命名为保留站的 ID。
再分析一下寄存器堆需要哪些读写口。有一条规律是，寄存器堆的面积与读写口个数的平方成正比。对于每条发射的指令，都需要从寄存器堆读操作数，所以读口是操作数x指令发射数。当执行单元完成计算的时候，需要写入寄存器堆，所以每个执行单元都对应一个寄存器堆的写口。
硬件实现的时候，为了性能，希望保留站可以做的比较多，这样可以容纳更多的指令。但是，保留站里面至少要保存操作数的值，会比较占用面积，并且时延也比较大。
ROB（ReOrder Buffer） 参考教材
为了实现精确异常，我们需要引入 ROB。在上面的 Tomasulo 算法中，计算单元计算完成的时候，就会把结果写入到寄存器堆中，因此精确异常时难以得到正确的寄存器堆取值。既然我们希望寄存器堆的状态与顺序执行的结果一致，我们需要引入 ROB。</description>
    </item>
    
    <item>
      <title>硬盘相关的概念</title>
      <link>https://jia.je/hardware/2021/05/06/disk/</link>
      <pubDate>Thu, 06 May 2021 11:37:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/05/06/disk/</guid>
      <description>ATA ATA 定义了发送给硬盘的命令，标准定义了命令:
 ech IDENTIFY DEVICE: 获取设备信息 25h READ DMA EXT: 读取扇区 35h WRITE DMA EXT: 写入扇区  ATA 同时也是接口，图片如下。ATA 前身是 IDE，现在 ATA 叫做 PATA。
AHCI AHCI 可以简单理解为 PCIe &amp;lt;-&amp;gt; SATA 的转换器。AHCI 暴露为一个 PCIe 设备：
$ lspci -vv 00:1f.2 SATA controller: Intel Corporation C600/X79 series chipset 6-Port SATA AHCI Controller (rev 05) Kernel modules: ahci 处理器通过 IO port/MMIO 访问 AHCI，然后 AHCI HBA 连接到 SATA 设备。
SATA SATA 一般说的是接口。它一般分为两个部分，数据和电源。数据部分只有 7 个 pin，三个 GND 和两对差分线（A+A- B+B-），图片如下：</description>
    </item>
    
    <item>
      <title>Linksys E8450 OpenWRT 配置 w/ 802.11ax</title>
      <link>https://jia.je/hardware/2021/03/18/linksys-e8450-openwrt/</link>
      <pubDate>Thu, 18 Mar 2021 12:25:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/03/18/linksys-e8450-openwrt/</guid>
      <description>背景 之前用的 newifi 路由器（Lenovo y1s）无线网总是出问题，于是换了一个新的支持 802.11ax 的路由器 Linksys E8450，目前在 openwrt snapshot 支持。Openwrt 的支持页面：Linksys E8450。
过程 按照支持页面，下载固件：
$ wget https://downloads.openwrt.org/snapshots/targets/mediatek/mt7622/openwrt-mediatek-mt7622-linksys_e8450-squashfs-sysupgrade.bin 然后访问固件升级页面：http://192.168.1.1/config-admin-firmware.html#firmware，选择下载的 bin 文件。点击 “开始升级”，然后等待。一段时间后，ssh 到路由器：
$ ssh root@192.168.1.1 The authenticity of host &amp;#39;192.168.1.1 (192.168.1.1)&amp;#39; can&amp;#39;t be established. ED25519 key fingerprint is SHA256:REDACTED. No matching host key fingerprint found in DNS. This key is not known by any other names Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added &amp;#39;192.</description>
    </item>
    
    <item>
      <title>PCB 笔记</title>
      <link>https://jia.je/hardware/2021/03/08/pcb-notes/</link>
      <pubDate>Mon, 08 Mar 2021 00:03:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/03/08/pcb-notes/</guid>
      <description>记录一下在学习画板子过程中学到的心得。
工具 目前使用过 KiCad 和 lceda：
 KiCad: 开源软件，跨平台。 lceda：在线编辑，不需要安装，和 lcsc 有深度集成。  项目 jiegec/HT42B534USB2UART 采用的是 KiCad 5 编写的。目前正在做的另一个项目采用 lceda
流程  选择所需要使用的芯片，查找芯片的 datasheet。 寻找采用了芯片的一些设计，特别是看 schematic。 按照 datasheet 里面推荐的电路，或者是其他人的设计，画自己需要的 schematic。 设置好各个元件的 footprint，然后转到 PCB 设计。 在 PCB 里面布线，生成 Gerber 等文件。 把 Gerber 给到生产商（比如 jlc），交付生产。 如果是自己焊接，则需要购买元件，比如从 lcsc 购买。 收到 PCB 和元件后，自己按照 BOM 和 schematic 焊接各个元件。  笔记  对于一些连接很多元件的信号，比如 GND，可以留作铺铜解决。也就是说，先不管 GND，把其他所有的信号都接好以后，再在顶层铺铜；如果还是有没有连接上的 GND，可以通过过孔（Via）走到底层，在底层再铺一层铜。 对于外部供电的 VCC 和 GND，在 KiCad 中需要用 PWR_FLAG 标记一下。 在 KiCad 中设计 PCB 前，要把生产商的工艺参数设置好，不然画了也要重画。 lceda 在选择元件的时候，可以直接从 lcsc 里选择，这样可以保证封装和商品可以对得上，不需要手动进行匹配。 如果要用 jlc 的 SMT 贴片，先在 SMT 元件列表 里搜索所需要的元件；推荐用基本库，如果用其他库，则要加钱；选好元件以后，用元件编号去 lceda 里搜索并添加到 schematic。 对于涉及模拟信号的设计，比如音频，需要特别注意模拟信号的电和地都是单独的：AVCC 和 AGND。所以要特别注意 datasheet 里面不同的地的表示方法。最后，再用磁珠把 VCC 和 AVCC、GND 和 AGND 分别连接起来就可以了。可以参考 DE2 板子中第 19 页的音频部分设计 和 Staying well grounded。 在 schematic 里经常会出现在电源附近的电容，那么，在 PCB 中，也尽量把这些电容放在对应的电源的旁边。 耳机插座里面，一般分三种组成部件：Tip，Ring，Sleeve。只有两段的是 TS，三段的是 TRS，四段的是 TRRS。TS 是单声道，T 是声音，S 是地。TRS 是双声道，T 是左声道（或者单声道），R 是右声道，S 是地。TRRS 则是双声道加录音。一般来说，LINE IN 是双声道，MIC IN 是单声道，它们的阻抗也不同；LINE OUT 和 HEADPHONE OUT 都是双声道，但 HEADPHONE OUT 经过了额外的放大器。 遇到一个 SPI 协议没有 SPI_MISO 引脚的芯片，可能说明它是 write-only 的。 手焊的基本元件，一般用 0603 加一些 Padding 的封装；SMT 的话，则建议用 0402 封装。 I2C 的信号线一般需要加一个几 K 欧姆的上拉电阻到 VCC。  未完待续。</description>
    </item>
    
    <item>
      <title>Skid Buffer</title>
      <link>https://jia.je/hardware/2021/01/26/skid-buffer/</link>
      <pubDate>Tue, 26 Jan 2021 20:34:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2021/01/26/skid-buffer/</guid>
      <description>Skid buffer Skid buffer 指的就是，对于 valid + ready 的握手信号，用空间（更多的逻辑）来换取时间（更好的时序）的一个硬件模块。
简单来说，背景就是，为了解决 valid 和 ready 信号在数据流水线上一路经过组合逻辑导致的时序问题，在中途加上一些寄存器来阻隔。当然了，代价就是延迟和面积，不过吞吐量还是需要保持的。
由于需求的不同，Skid buffer 也有不同的实现。目前，找到了四个实现，实现上有所不同，特性也不大一样。
统一约定 由于我在 SpinalHDL 语言中重新实现了下面的这些 Skid buffer，所以按照 SpinalHDL 的 Stream 定义接口：
class SkidBufferCommon[T &amp;lt;: Data]( gen: =&amp;gt; T ) extends Component { val io = new Bundle { val s = slave(Stream(gen)) val m = master(Stream(gen)) } } 在这里，io.s 表示从上游取的数据，io.m 表示传递给下游的数据。
输出信号共有：io.s.ready、io.m.valid 和 io.m.payload。
ZipCPU 版本 第一个版本来自 ZipCPU：
博客地址：Building a Skid Buffer for AXI processing 代码地址：skidbuffer.</description>
    </item>
    
    <item>
      <title>以太网的物理接口</title>
      <link>https://jia.je/hardware/2020/12/27/ethernet-physical-interfaces/</link>
      <pubDate>Sun, 27 Dec 2020 08:46:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/12/27/ethernet-physical-interfaces/</guid>
      <description>背景 最近逐渐接触到了一些高速的以太网的接口，被一大堆的名字搞得有点懵，所以特意学习了一下并整理成这篇博客。
更新：经 @z4yx 指出，还可以看华为的介绍文档
几几 BASE 杠什么是什么意思 在下文里，经常可以看到类似 100BASE-TX 这种写法，它表示的意思是：
 BASE 前面的数字表示速率，比如 10，100，1000，10G等等 BASE 之后的第一个字母，常见的 T 表示双绞线，S 表示 850nm 光纤，L 表示 1310nm 光纤，C 表示同轴电缆 之后可能还有别的字母，比如 X 表示 8b/10b 或者 4b/5b（FE） 的编码，R 表示 64b/66b 的编码 之后可能还有别的数字，如果是 LAN PHY 表示的是所使用的 lane 数量；如果是 WAN PHY 表示的是传输的公里数  详见 Wikipedia - Ethernet Physical Layer # Naming Conventions 和 IEEE 802.3 1.2.3 节 Physical Layer and media notation：
The data rate, if only a number, is in Mb/s, and if suffixed by a “G”, is in Gb/s.</description>
    </item>
    
    <item>
      <title>ARM M1 MacBook Air 开箱</title>
      <link>https://jia.je/hardware/2020/11/19/arm-m1-macbookair/</link>
      <pubDate>Thu, 19 Nov 2020 18:35:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/11/19/arm-m1-macbookair/</guid>
      <description>购买 我是 11.12 的时候在 Apple Store 上下单的，选的是 MacBookAir ，带 M1 芯片，8 核 CPU + 8 核 GPU，加了一些内存和硬盘。今天（11.19）的时候顺丰到货，比 Apple Store 上显示的预计到达时间 21-28 号要更早。另外，我也听朋友说现在一些线下的店也有货，也有朋友直接在京东上买到了 Mac mini，总之第一波 M1 的用户最近应该都可以拿到设备了。
现在这篇博客，就是在 ARM MBA 上编写的，使用的是 Intel 的 VSCode，毕竟 VSCode 的 ARM64 版不久后才正式发布。
开箱 从外观来看，一切都和 Intel MBA 一样，包装上也看不出区别，模具也是一样的。
进了系统才能看得出区别。预装的系统是 macOS Big Sur 11.0，之后手动更新到了目前最新的 11.0.1。
顺带 @FactorialN 同学提醒我在这里提一句：包装里有电源适配器，不太环保。
体验 ARM64 首先自然是传统艺能，证明一下确实是 Apple Silicon：
$ uname -a Darwin macbookair.lan 20.1.0 Darwin Kernel Version 20.1.0: Sat Oct 31 00:07:10 PDT 2020; root:xnu-7195.</description>
    </item>
    
    <item>
      <title>FIDO U2F、FIDO2 和 CTAP 的关系</title>
      <link>https://jia.je/hardware/2020/05/18/fido-u2f-fido2-ctap/</link>
      <pubDate>Mon, 18 May 2020 10:30:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/05/18/fido-u2f-fido2-ctap/</guid>
      <description>背景 2012 年，Yubico 和 Google 设计了 U2F 协议，第二年 U2F 成为 FIDO 组织的标准，之后加入了 NFC 的支持。之后，FIDO2 作为替代 U2F 的新标准产生，原来的 U2F 以兼容的方式成为了 CTAP1，而采用 CBOR 封装格式的 CTAP(CTAP2) 则是 FIDO2 的主要协议。
U2F 命令格式 U2F 定义了它的命令格式，基于 ISO7816-4 APDU（short APDU） ：
   CLA INS P1 P2 Lc data Le     1 byte 1 byte 1 byte 1 byte 0-1 bytes variable length 0-1 bytes    比如 U2F_VERSION 就是：
   CLA INS P1 P2 Lc data Le     00 03 00 00 0 empty 00    返回的数据就是 U2F_V2 的 ASCII 加上 9000 的状态。</description>
    </item>
    
    <item>
      <title>MIFARE Classic 上配置 NDEF</title>
      <link>https://jia.je/hardware/2020/05/10/mifare-classic-ndef/</link>
      <pubDate>Sun, 10 May 2020 09:19:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/05/10/mifare-classic-ndef/</guid>
      <description>背景 最近买了一堆 NFC 的智能卡拿来测试，其中一张 MIFARE Classic 的总是在 iOS 上读不出来，无论是以 Tag 模式还是 NDEF 模式。于是通过一系列的研究，终于知道上怎么一回事，然后成功地把一个 MIFARE Classic 卡配置成了 NDEF。
背景知识 NFC 有很多协议，其中 MIFARE Classic 基于 ISO 14443-3 Type A 标准，里面有一些 MIFARE 的命令。通过这些命令，就可以控制 MIFARE Classic 卡的内容。具体来说，以我使用的 MIFARE Classic EV1 4K S70 为例，这篇文章会涉及到如下的背景知识：
MIFARE Classic 内存布局 在 MIFARE Classic 中，有 Sector 和 Block 的概念，每个 Sector 有若干个 Block，其中最后一个 Block 是特殊的（称为 Sector Trailer），保存了这个 Sector 的一些信息：Key A、Access Bits、GPB 和 Key B。对于 Classic 4K，首先是 32 个有 4 blocks 的 sector，然后是 8 个 有 16 blocks 的 sector， 整体的内存布局大概是：</description>
    </item>
    
    <item>
      <title>在命令行中进行 Vivado 仿真</title>
      <link>https://jia.je/hardware/2020/04/04/vivado-simulation-command/</link>
      <pubDate>Sat, 04 Apr 2020 18:50:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/04/04/vivado-simulation-command/</guid>
      <description>想要在命令行里进行 Vivado 仿真，所以查了下 Xilinx 的 UG900 文档，找到了命令行仿真的方法。首先是生成仿真所需的文件：
# assuming batch mode open_project xxx.xpr set_property top YOUR_SIM_TOP [current_fileset -simset] export_ip_user_files -no_script -force export_simulation -simulator xsim -force 可以把这些语句放到 tcl 文件里然后用 batch mode 执行。执行成功以后，会在 export_sim/xsim 目录下生成一些文件。里面会有生成的脚本以供仿真：
cd export_sim/xsim &amp;amp;&amp;amp; ./YOUR_SIM_TOP.sh 默认情况下它会执行 export_sim/xsim/cmd.tcl 里面的命令。如果想要记录 vcd 文件，修改内容为：
open_vcd log_vcd run 20us close_vcd quit 这样就可以把仿真的波形输出到 dump.vcd 文件，拖到本地然后用 GTKWave 看。更多支持的命令可以到 UG900 里找。</description>
    </item>
    
    <item>
      <title>在 Rocket Chip 上挂接 TLRAM</title>
      <link>https://jia.je/hardware/2020/03/17/rocket-chip-tlram-load/</link>
      <pubDate>Tue, 17 Mar 2020 23:20:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/03/17/rocket-chip-tlram-load/</guid>
      <description>最近遇到一个需求，需要在 Rocket Chip 里面开辟一块空间，通过 verilog 的 $readmemh 来进行初始化而不是用 BootROM ，这样每次修改内容不需要重新跑一次 Chisel -&amp;gt; Verilog 的流程。然后到处研究了一下，找到了解决的方案：
首先是新建一个 TLRAM 然后挂接到 cbus 上：
import freechips.rocketchip.tilelink.TLRAM import freechips.rocketchip.tilelink.TLFragmenter import freechips.rocketchip.diplomacy.LazyModule import freechips.rocketchip.diplomacy.AddressSet trait HasTestRAM { this: BaseSubsystem =&amp;gt; val testRAM = LazyModule( new TLRAM(AddressSet(0x40000000, 0x1FFF), beatBytes = cbus.beatBytes) ) testRAM.node := cbus.coupleTo(&amp;#34;bootrom&amp;#34;) { TLFragmenter(cbus) := _ } } 这里的地址和大小都可以自由定义。然后添加到自己的 Top Module 中：
class TestTop(implicit p:Parameters) extends RocketSystem // ... 	with HasTestRAM //... 	{ overide lazy .</description>
    </item>
    
    <item>
      <title>在 Vivado 中对 chisel3 产生的 verilog 代码仿真</title>
      <link>https://jia.je/hardware/2020/02/10/simulate-chisel3-on-vivado/</link>
      <pubDate>Mon, 10 Feb 2020 23:09:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/02/10/simulate-chisel3-on-vivado/</guid>
      <description>默认情况下，chisel3 生成的 verilog 代码在 Vivado 中仿真会出现很多信号大面积变成 X。解决方法在一个不起眼的 Wiki 页面：Randomization flags：
`define RANDOMIZE_REG_INIT `define RANDOMIZE_MEM_INIT `define RANDOMIZE_GARBAGE_ASSIGN `define RANDOMIZE_INVALID_ASSIGN 在生成的 verilog 前面加上这四句，就可以正常仿真了。</description>
    </item>
    
    <item>
      <title>通过 BSCAN JTAG 对 Rocket Chip 进行调试</title>
      <link>https://jia.je/hardware/2020/02/10/rocket-chip-bscan-debug/</link>
      <pubDate>Mon, 10 Feb 2020 15:08:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/02/10/rocket-chip-bscan-debug/</guid>
      <description>前言 在上一个 post 里研究了原理，今天也是成功在 Artix 7 上实现了调试。效果如下：
OpenOCD 输出：
Info : JTAG tap: riscv.cpu tap/device found: 0x0362d093 (mfg: 0x049 (Xilinx), part: 0x362d, ver: 0x0) Info : datacount=1 progbufsize=16 Info : Disabling abstract command reads from CSRs. Info : Examined RISC-V core; found 1 harts Info : hart 0: XLEN=32, misa=0x40801105 Info : Listening on port 3333 for gdb connections GDB 输出：
Remote debugging using localhost:3333 0x0001018c in getc () at bootloader.</description>
    </item>
    
    <item>
      <title>研究 Rocket Chip 的 BSCAN 调试原理</title>
      <link>https://jia.je/hardware/2020/02/09/rocket-chip-bscan-analysis/</link>
      <pubDate>Sun, 09 Feb 2020 15:11:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/02/09/rocket-chip-bscan-analysis/</guid>
      <description>前言 最近 @jsteward 在研究如何通过 JTAG 对 FPGA 里的 Rocket Chip 进行调试。之前 @sequencer 已经做了一些实践，我们在重复他的工作，同时也研究了一下这是怎么工作的。
原理 我们从 @sequencer 得到了一份可用的 Scala 代码 和 OpenOCD 配置，并且了解到：
 可以通过 openocd 找到并调试 Rocket Chip openocd 是通过 JTAG 向 FPGA 的 TAP 的 IR 写入 USER4，然后往 DR 写入特定格式的数据，然后控制 Rocket Chip 的 JTAG。  这里涉及到一个“封装”的过程，在一个仅可以控制 DR 的 JTAG 中控制另一个 JTAG。首先可以找到 OpenOCD 端的操作代码：
tunneled_ir[3].num_bits = 3; tunneled_ir[3].out_value = bscan_zero; tunneled_ir[3].in_value = NULL; tunneled_ir[2].num_bits = bscan_tunnel_ir_width; tunneled_ir[2].out_value = ir_dtmcontrol; tunneled_ir[1].in_value = NULL; tunneled_ir[1].</description>
    </item>
    
    <item>
      <title>在 macOS 烧写 Artix7 FPGA</title>
      <link>https://jia.je/hardware/2020/02/09/program-artix7-on-macos/</link>
      <pubDate>Sun, 09 Feb 2020 00:35:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2020/02/09/program-artix7-on-macos/</guid>
      <description>首先安装好openocd：
brew install openocd --HEAD
测试所用版本为 0.10.0+dev-01052-g09580964 (2020-02-08-15:09)。
然后编写如下的 openocd.cfg：
adapter driver ftdi adapter speed 10000 ftdi_vid_pid 0x0403 0x6014 ftdi_layout_init 0x0008 0x004b source [find cpld/xilinx-xc7.cfg] init xc7_program xc7.tap pld load 0 /path/to/bitstream.bit shutdown 上面的 ftdi 开头的两行按照实际的 JTAG Adapter 修改。可以参考 openocd 自带的一些 cfg。
然后在 openocd.cfg 的目录运行 openocd 即可：
$ openocd Open On-Chip Debugger 0.10.0+dev-01052-g09580964 (2020-02-08-15:09) Licensed under GNU GPL v2 For bug reports, read http://openocd.org/doc/doxygen/bugs.html Info : auto-selecting first available session transport &amp;#34;jtag&amp;#34;.</description>
    </item>
    
    <item>
      <title>用 PulseView 配合 DSLogic 调试 SPI Flash</title>
      <link>https://jia.je/hardware/2019/08/02/pulseview-dslogic/</link>
      <pubDate>Fri, 02 Aug 2019 23:15:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2019/08/02/pulseview-dslogic/</guid>
      <description>最近需要用到逻辑分析仪来调试 SPI Flash，设备是 DreamSourceLab 的 DSLogic ，最开始用的是官方的 DSView ，确实能够抓到 SPI 的信号，也可以解析出一些 SPI Flash 的数据，但是很多是不完整的。
后来把源码下载下来，发现是基于 sigrok 和 PulseView 做的一个魔改版，然后 sigrok 官网上最新的版本已经支持了 DSLogic ，于是就用 PulseView 替代 DSView 。一开始遇到的问题是没有 firmware ，一番搜索找到了解决方案，按照脚本下载好文件即可。
进到 PulseView 以后，把 SPI 的四路信号接上，然后抓了一段信号，解析：
可以看到它正确地解析出来了 Fast Read 命令。由于 DSView 它 fork 自一个比较老的版本，所以它并不能正确解析出来。
P.S. Linux 下它界面显示比 macOS 下好看一些，估计是没有适配好。</description>
    </item>
    
    <item>
      <title>在 FPGA 上实现路由器（3）</title>
      <link>https://jia.je/hardware/2019/06/02/router-on-fpga-3/</link>
      <pubDate>Sun, 02 Jun 2019 09:24:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2019/06/02/router-on-fpga-3/</guid>
      <description>前言 又半个月过去了，在写了上篇系列博文之后也是做了很多新的更改。上次做的主要是关于性能方面的提升，怎么提高频率，从而达到比较大的流量，而这段时间做的则是功能，做实现 RIP 协议和转发表的动态更新。
软件部分 软件部分目前是用 C 代码写的，用 Xilinx SDK 提供的各个 AXI 外设的驱动和PS自己的驱动，实现了所需要的，RIP协议的处理，转发表的更新和统计信息的读取。
实际上做的时候比较粗暴，主要是通过三种 AXI 外设与硬件部分进行交互：AXI Stream FIFO，AXI GPIO 和 AXI BRAM Controller 。其中 AXI Stream FIFO 是用来接收和发送需要CPU处理的以太网帧的，AXI GPIO则是用来读取统计的信息，AXI BRAM Controller 是用来读写转发表的。最后在顶层设计中把这些外设连接起来。
硬件部分 硬件部分还是继续之前的部分往下写，添加了统计信息，直接暴露出去，让 CPU 走 AXI GPIO 读，因为不需要很高的精确度；转发表本身，一开始想的是自己写一些接口转换，后来发现，直接用 True Dual Port RAM 然后把一个 port 暴露给 AXI BRAM Controller 即可，免去了各种麻烦，PS可以直接进行修改，不需要额外的工作。
最终效果 为了测试这套东西是否正常工作，就开了两个 Arch Linux 的虚拟机，分别 Bridge 到两个千兆的 USB 网卡上，都连到 FPGA 上。然后在两边都配上了 BIRD ，配置 RIP 和一些路由，确实能更新硬件的转发表，并两边的 RIP 可以学习到对方的路由。</description>
    </item>
    
    <item>
      <title>在 FPGA 上实现路由器（2）</title>
      <link>https://jia.je/hardware/2019/05/15/router-on-fpga-2/</link>
      <pubDate>Wed, 15 May 2019 20:39:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2019/05/15/router-on-fpga-2/</guid>
      <description>前言 月初的时候，有了一个完整可用的路由器（上一篇系列博文），但当时测了一下速度，只有几十 Mb/s ，只要往上提就会失效，得 reset 才能继续。当时也先没管性能的事情，先把和 OS 交互的部分做了。现在又回头来做性能调优。
之前，逻辑部分的主频只有 10 MHz ，这自然不行，不提高肯定做不到千兆。于是试着把主频拉高， FIFO 加大，然后遇到了很多问题，慢慢修复了，学到了很多新知识，目前也接近千兆的水平了吧，贴图：
TCP 测速：
UDP 测速：
测试环境是 macOS 虚拟机外打虚拟机内，走网桥把虚拟机和一个 USB 网卡接起来，然后从另一个 USB 网卡打到路由器。
尝试 700Mb/s 接下来讲讲，在这个过程中遇到了什么问题，怎么解决的。第一个是速度过快就会挂，这肯定是丢包逻辑没写对，后来在仿真里开够了时间，于是就找到了一个 BUG ，其实就是一行的修复。接着就是提高主频，但大家也知道，CPU不能随便超频，由于各种延迟的原因，比如 Setup 时间，如果超了一个时钟周期的时间，本来应该下个周期就得到新数据的，结果到了下下周期才有，那有的状态可能就乱了，我目前遇到的也主要就是这个问题。
于是就对着 Timing 里汇报的各种问题修啊修，发现了很多以前没有注意到的问题，它们不影响功能，但是会让逻辑变慢。第一个问题是 High Fanout ，以上就是说一个输出接到了很多输入，这看起来没啥问题，但数设课上也讲过，每个门的输入输出电流是有限制的，例如按书上的数据，一个门输出只能带十个门，更多只能级联一层。级联的话，延迟自然就高了。后来发现，这里的原因是，开了一个大的数组，但是没有变成 RAM ，综合出了几千个逻辑单元，自然是出问题。解决方法很简单，用 xpm_memory_tpdram 即可。这样一搞，主频就能上 200MHz 了。
这个时候测了一下，发现 UDP 能打到 700Mb/s 了，TCP 由于丢包率比较高，只有 400Mb/s ，距离预期还有一段距离。于是继续进行优化。
向 900Mb/s 进发 要继续提速，自然要提高主频。下一个主频目标就是 250MHz 。随着提高主频，时序的要求也会更高，自然也出现了新的问题。
这次的问题主要在于，一个路径上逻辑门数过多，多的有7到10个，每一步零点几到一点几纳秒，叠起来4纳秒哪里够用。于是把一些不需要依赖条件的逻辑挪到条件外面，这样就减少了一些路径的依赖。
解决了这个以后，现在的 WNS （Worst Negative Slack）只剩下 0.6 ns 了。这时候的问题一部分还是来自于逻辑门过多，但这个时候就没这么简单了，只能继续细化流水线，打一拍，这样才能把延迟降下来。
虽然 Timing 没有完全解决，但还是写进了 FPGA 中。幸好工作一切正常，就得到了上面那个图片的结果，接近千兆的速度了。</description>
    </item>
    
    <item>
      <title>在 FPGA 上实现路由器</title>
      <link>https://jia.je/hardware/2019/04/24/router-on-fpga/</link>
      <pubDate>Wed, 24 Apr 2019 19:41:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2019/04/24/router-on-fpga/</guid>
      <description>最近在做 FPGA 上硬件的路由器，感觉接近一个基本可用的阶段了吧，大概谈一谈做这个的思路、过程和踩过的坑。
首先，做实验用的板子是 Alinx AX7021 ，FPGA 是 Xilinx xc7z020clg484-2 ，扩展板上有 4PL+1PS 个网口和千兆 KSZ9031RNX PHY ，采用的接口是 RGMII 。一开始做的自然是做 RGMII ，但是遇到了困难，RGMII在千兆模式下传输的是 DDR 信号，而时序和延迟就是个比较麻烦的事情。一开始先直接拿 Xilinx 的 AXI Ethernet IP 来用，然后上 ILA 看到了 IDDR 后的信号，第一次看到了完整的以太网帧，从 Preamble 和 SFD 到最后的 FCS 。于是就特别振奋，想着手写 RGMII ，先做收，再做发。确实，收很容易，很快就做出来了，但是写总是出问题，当时也不懂跨时钟域的一些问题，总之各种没调出来。于是就退而求其次，选择了 Xilinx 的 Tri Mode Ethernet IP 了。
Tri Mode Ethernet IP 有很多选项，为了简单，直接采用了 AXI-Stream 的接口，不要 AXI4-Lite 什么的，都不要，因为我需要直接写剩余的逻辑。其他东西能省也都省掉了。这个 IP 确实很给力，很快就可以完成收和发的操作了，这次终于知道了怎么处理跨时钟域的问题 — XPM FIFO ASYNC ，一下推进了很大的进度。
既然可以收，也可以发了，就扩展到多个网口。这个 IP 中可以选择 Shared Logic 在内部，也可以在外部，研究了一下发现，应该是一个放内部，其余选外部，然后接起来就可以了。不过目前为了简单，还是只用了俩端口。在这个基础上，就开始解析收进来的以太网帧了。
第一步自然是填 ARP 表，自然问题来了，如果多个网口同时进来数据，怎么保证 ARP 表读写的正确性？自然就想到总线上需要做仲裁，于是写了一个简单的总线仲裁，顺带学习到了 unique case(z) 和 priority case(z) 的语法。然后 ARP 表怎么实现呢，大概就是一个哈希表，然后表里维护了（IP，MAC，PORT）三元组，然后实现了一些冲突和覆盖的处理逻辑，做这些的同时也对各个模块编写相应的测试。有了 ARP 表，就可以在解析以太网帧的时候，拆解出里面的信息，然后请求 ARP 表总线，然后写入。</description>
    </item>
    
    <item>
      <title>向咸鱼派写入 ArchlinuxARM</title>
      <link>https://jia.je/hardware/2018/11/06/archlinuxarm-on-sfpi/</link>
      <pubDate>Tue, 06 Nov 2018 19:18:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2018/11/06/archlinuxarm-on-sfpi/</guid>
      <description>之前由于我的 macOS 上不知道为啥不能把我的 TF 卡设备放到我的虚拟机里，所以之前就没能刷 ArchLinuxARM 上去。今天我想到了一个方法，完成了这件时期：
$ wget https://mirrors.tuna.tsinghua.edu.cn/archlinuxarm/os/ArchLinuxARM-armv7-latest.tar.gz $ dd if=/dev/zero of=archlinuxarm.img bs=1M count=1024 $ mkfs.ext4 archlinuxarm.img $ sudo mkdir -p /mnt/archlinuxarm $ sudo mount -o loop archlinuxarm.img /mnt/archlinuxarm $ sudo bsdtar -xpf ArchLinuxARM-armv7-latest.tar.gz -C /mnt/archlinuxarm $ sudo umount /mnt/archlinuxarm 这样就获得了一个 ext4 的 ArchlinuxARM 镜像。刚好解压出来不到 1G ，所以开了 1G 的镜像刚好放得下。然后把 archlinuxarm.img 拷回 macOS ，然后用 dd 写进去：
$ sudo dd if=archlinuxarm.img of=/dev/rdisk4s2 bs=1048576 这时候可以确认，我们确实是得到了一个正确的 ext4fs ：
$ sudo /usr/local/opt/e2fsprogs/sbin/tune2fs -l /dev/disk4s2 不过，我们实际的分区大小可能不止 1G ，所以可以修改一下大小：</description>
    </item>
    
    <item>
      <title>咸鱼派的启动配置</title>
      <link>https://jia.je/hardware/2018/11/05/salted-fish-pi/</link>
      <pubDate>Mon, 05 Nov 2018 22:17:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2018/11/05/salted-fish-pi/</guid>
      <description>最近刚拿到了一个咸鱼派的测试板子，准备自己把 U-Boot 和 Linux 内核这一套东西跑通，都用主线的东西，尽量减少魔改的部分。首先是编译 u-boot ，我用的是现在的 master 分支的最新版 99431c1c ：
$ # Archlinux $ sudo pacman -Sy arm-none-eabi-gcc $ make LicheePi_Zero_defconfig $ make ARCH=arm CROSS_COMPILE=arm-none-eabi- -j24 这时候会得到一个 u-boot-sunxi-with-spl.bin 的文件。我们只要把它写到 SD 卡的 8192 偏移处，就可以把 U-Boot 跑起来了：
$ diskutil unmountDisk /dev/disk4 $ sudo dd if=u-boot-sunxi-with-spl.bin of=/dev/disk4 bs=1024 seek=8 接着我们做一下分区。我采用的是 MBR 分区，这样保证不会和 U-Boot 冲突。使用 fdisk进行分区，我从 1M 处开始分了一个 10M 的 FAT-32 分区作为启动分区，然后之后都是 EXT4 的系统盘分区。接着就是编译内核。
我用的是八月份时候的 4.18.2 内核，虽然不是很新但也足够新了。一番调整内核参数后，得到了一个可用的内核，然后把 zImage 和 sun8i-v3s-licheepi-zero.dtb 都复制到刚才创建的 FAT-32 启动分区，然后进入 U-Boot 进行启动：</description>
    </item>
    
    <item>
      <title>在荔枝糖（Lichee Tang）上初次体验 FPGA</title>
      <link>https://jia.je/hardware/2018/10/07/my-first-fpga-experience-on-lichee-tang/</link>
      <pubDate>Sun, 07 Oct 2018 22:34:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2018/10/07/my-first-fpga-experience-on-lichee-tang/</guid>
      <description>今天从张宇翔学长那拿到了 荔枝糖（Lichee Tang） 的 FPGA 板子，于是立即开始把前段时间学到的Verilog应用上来。不过想到现在我手上没有多少外设，然后又必须远程到 Windows 电脑上去操作，于是先实现了一下 UART 通信。
在网上找到了 ben-marshall/uart 一个简易的实现，很快做到了一直在串口上打印 A 字符。接着我开始尝试实现一个简单的串口回显。一开始，我直接把 UART 读到的数据直接输出，果然可以了，但是一旦传输速率跟不上了，就会丢失数据。于是我添加了 FIFO IP 核，然后把读入的数据存入 FIFO ，又从 FIFO 中读取数据写入到 UART 中去。不过发现了一个小 BUG：每次打印的是倒数第二次输入的字符，即丢失了第一个字符。在张宇翔学长的帮助下找到了问题：当 FIFO 的读使能信号为高时，其数据在下一个时钟周期才来，于是解决方案就是等到数据来的时候再向 UART 中写数据：
always @ (posedge clk_in) begin uart_tx_en &amp;lt;= uart_fifo_re; end 这样就解决了这个问题。完整代码在 jiegec/learn_licheetang 中。</description>
    </item>
    
    <item>
      <title>在 macOS 上读取移动硬盘的 S.M.A.R.T. 信息</title>
      <link>https://jia.je/hardware/2018/09/07/reading-smart-info-of-external-drives-under-macos/</link>
      <pubDate>Fri, 07 Sep 2018 10:20:00 +0800</pubDate>
      
      <guid>https://jia.je/hardware/2018/09/07/reading-smart-info-of-external-drives-under-macos/</guid>
      <description>之前想看看自己各个盘的情况，但是发现只能看电脑内置的 SSD 的 S.M.A.R.T 信息，而移动硬盘的都显示：
$ smartctl -a /dev/disk2 smartctl 6.6 2017-11-05 r4594 [Darwin 17.7.0 x86_64] (local build) Copyright (C) 2002-17, Bruce Allen, Christian Franke, www.smartmontools.org /dev/disk2: Unable to detect device type Please specify device type with the -d option. Use smartctl -h to get a usage summary 一开始我怀疑是个别盘不支持，但换了几个盘都不能工作，问题应该出现在了 USB 上。查了下资料，果然如此。根据 USB devices and smartmontools ，获取 S.M.A.R.T 信息需要直接发送 ATA 命令，但是由于经过了 USB ，于是需要进行一个转换，导致无法直接发送 ATA 命令。这个问题自然是有解决方案，大概就是直接把 ATA 命令发送过去（pass-through）。上面这个地址里写到，如果需要在 macOS 上使用，需要安装一个内核驱动。可以找到，源码在 kasbert/OS-X-SAT-SMART-Driver 并且有一个带签名的安装包在 External USB / FireWire drive diagnostics support 中可以下载。丢到 VirusTotal 上没查出问题，用 v0.</description>
    </item>
    
  </channel>
</rss>
