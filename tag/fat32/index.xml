<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Tag - FAT32</title>
 <link href="https://jiegec.github.io/tag/fat32/index.xml" rel="self"/>
 <link href="https://jiegec.github.io/tag/FAT32.html"/>
 <updated>2018-02-27T22:58:45+08:00</updated>
 <id>https://jiegec.github.io/tag/FAT32.html</id>
 <author>
   <name>Jiege Chen</name>
 </author>
 
 <entry>
   <title>近来做 Stanford CS140e 的一些进展和思考（4）</title>
   <link href="https://jiegec.github.io/programming/2018/02/27/thoughts-on-stanford-cs140e-4/"/>
   <updated>2018-02-27T22:42:59+08:00</updated>
   <id>https://jiegec.github.io/programming/2018/02/27/thoughts-on-stanford-cs140e-4</id>
   <content type="html">&lt;p&gt;在&lt;a href=&quot;/programming/2018/02/16/thoughts-on-stanford-cs140e-3/&quot;&gt;上一篇文章&lt;/a&gt;之后，作者多次延期跳票之后，终于放出了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Assignment 2 Phase 2:32-bit Lipids&lt;/code&gt; ，这两天就把只读 &lt;code class=&quot;highlighter-rouge&quot;&gt;FAT32&lt;/code&gt; 写完了（不过封装得并不好，许多地方利用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;pub(super)&lt;/code&gt; 把变量可以访问的范围控制到 &lt;code class=&quot;highlighter-rouge&quot;&gt;vfat&lt;/code&gt; 中，然后直接读，只有少数需要特殊处理的进行了函数的封装）。首先当然是研究了半天 &lt;code class=&quot;highlighter-rouge&quot;&gt;MBR&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;FAT32&lt;/code&gt; 的结构，拿了不同来源的 &lt;code class=&quot;highlighter-rouge&quot;&gt;FAT&lt;/code&gt; 结构说明进行对比和验证，最后终于把格式搞清楚了，先实现了 &lt;code class=&quot;highlighter-rouge&quot;&gt;MasterBootRecord&lt;/code&gt; ，这个其实很好实现，以前也有接触过 &lt;code class=&quot;highlighter-rouge&quot;&gt;MBR&lt;/code&gt; ，本身也很简单。然后就是根据 &lt;code class=&quot;highlighter-rouge&quot;&gt;MBR&lt;/code&gt; 找到第一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;FAT32&lt;/code&gt; 的分区，根据偏移找到分区的开头，开头的第一个扇区就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;EBPB&lt;/code&gt; 数据结构，里面保存了 &lt;code class=&quot;highlighter-rouge&quot;&gt;FAT32&lt;/code&gt; 分区的各种信息。根据里面的信息，可以找到 &lt;code class=&quot;highlighter-rouge&quot;&gt;FAT&lt;/code&gt; 表的位置和数量，还有数据部分的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cluster&lt;/code&gt; 的位置和数量。接着，解析一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;FAT&lt;/code&gt; 表，实际上是一个与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cluster&lt;/code&gt; 一一对应的链表结构，用特殊的数据代表链表的尾和空、坏扇区。利用这些，和 &lt;code class=&quot;highlighter-rouge&quot;&gt;EBPB&lt;/code&gt; 中根目录所在的第一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cluster&lt;/code&gt; ，先在 &lt;code class=&quot;highlighter-rouge&quot;&gt;VFat&lt;/code&gt; 里面实现了读取一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cluster&lt;/code&gt; 链的内容的函数，利用这个函数读取一个一个的目录项，解析目录项，把长文件名的项合并到一个之中，然后对应地丢到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Entry&lt;/code&gt; 对象中，目录则可以枚举子目录项，根据名字比较去找子目录或者子文件夹，文件则实现了 &lt;code class=&quot;highlighter-rouge&quot;&gt;io::Read&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;io::Seek&lt;/code&gt; 使得可以读取文件的内容。实现好了这些以后，就拿了 &lt;code class=&quot;highlighter-rouge&quot;&gt;raspbian-strech-lite.img&lt;/code&gt; 作为硬盘映像，从文件里读取文件信息，成功地把 &lt;code class=&quot;highlighter-rouge&quot;&gt;config.txt&lt;/code&gt; 读取出来。&lt;/p&gt;

&lt;p&gt;其中还是遇到许多困难，如各种偏移的计算，如何处理跨 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cluster&lt;/code&gt; 和跨 &lt;code class=&quot;highlighter-rouge&quot;&gt;Sector&lt;/code&gt; 的读写，等等，有不少的坑在其中，花了两天的空余时间才差不多完善了这个功能。还有就是利用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Rust&lt;/code&gt; 现有的功能完成 &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; 里面很轻易就可以实现的指针操作，也花了不少时间。&lt;/p&gt;
</content>
 </entry>
 
</feed>
