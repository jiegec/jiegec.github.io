<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Tag - uart</title>
 <link href="https://jiegec.me/tag/uart/index.xml" rel="self"/>
 <link href="https://jiegec.me/tag/uart.html"/>
 <updated>2018-10-07T23:19:43+08:00</updated>
 <id>https://jiegec.me/tag/uart.html</id>
 <author>
   <name>Jiege Chen</name>
 </author>
 
 <entry>
   <title>在荔枝糖（Lichee Tang）上初次体验 FPGA</title>
   <link href="https://jiegec.me/hardware/2018/10/07/my-first-fpga-experience-on-lichee-tang/"/>
   <updated>2018-10-07T22:34:00+08:00</updated>
   <id>https://jiegec.me/hardware/2018/10/07/my-first-fpga-experience-on-lichee-tang</id>
   <content type="html">&lt;p&gt;今天从张宇翔学长那拿到了 &lt;a href=&quot;http://tang.lichee.pro/&quot;&gt;荔枝糖（Lichee Tang）&lt;/a&gt; 的 FPGA 板子，于是立即开始把前段时间学到的Verilog应用上来。不过想到现在我手上没有多少外设，然后又必须远程到 Windows 电脑上去操作，于是先实现了一下 UART 通信。&lt;/p&gt;

&lt;p&gt;在网上找到了 &lt;a href=&quot;https://github.com/ben-marshall/uart&quot;&gt;ben-marshall/uart&lt;/a&gt; 一个简易的实现，很快做到了一直在串口上打印 &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; 字符。接着我开始尝试实现一个简单的串口回显。一开始，我直接把 UART 读到的数据直接输出，果然可以了，但是一旦传输速率跟不上了，就会丢失数据。于是我添加了 FIFO IP 核，然后把读入的数据存入 FIFO ，又从 FIFO 中读取数据写入到 UART 中去。不过发现了一个小 BUG：每次打印的是倒数第二次输入的字符，即丢失了第一个字符。在张宇翔学长的帮助下找到了问题：当 FIFO 的读使能信号为高时，其数据在下一个时钟周期才来，于是解决方案就是等到数据来的时候再向 UART 中写数据：&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uart_tx_en&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uart_fifo_re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就解决了这个问题。完整代码在 &lt;a href=&quot;https://github.com/jiegec/learn_licheetang&quot;&gt;jiegec/learn_licheetang&lt;/a&gt; 中。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>近来做 Stanford CS140e 的一些进展和思考（2）</title>
   <link href="https://jiegec.me/programming/2018/02/06/thoughts-on-stanford-cs140e-2/"/>
   <updated>2018-02-06T12:52:59+08:00</updated>
   <id>https://jiegec.me/programming/2018/02/06/thoughts-on-stanford-cs140e-2</id>
   <content type="html">在[上一篇文章](/programming/2018/02/04/thoughts-on-stanford-cs140e/)之后，我又有了一些进展：`UART` ，简易的`shell` ，修复了之前写的 `xmodem` 中的 BUG，一个可以从 `UART` 接收一个 `kernel` 写入到内存中再跳转过去的 `bootloader` 。

首先是 `UART` ，就是通过两个 `GPIO pin` 进行数据传输，首先在 `memory mapped IO` 上进行相应的初始化，然后包装了 `io::Read` 和 `io::Write` （这里实现一开始有 BUG，后来修复了），然后很快地完成了一个仅仅能 `echo` 的 `kernel` 。

然后实现了 `CONSOLE` ，一个对 `MiniUart` 和单例封装，就可以用 `kprint!/kprintln!` 宏来输出到 `UART` ，接着实现了一个 `echo` 的 `shell` ，读入一行输出一行。然后实现退格键和方向键，这里的难点在于要控制光标并且用读入的或者空格覆盖掉屏幕上已经显示而不应该显示的内容。接着，利用 `skeleton` 中的 `Command` 做了一个简单的 `echo` 命令。

接着，利用之前编写的 `tty` ，配合上新编写的 `bootloader` ，实现通过 `UART` 把新的 `kernel` 通过 `XMODEM` 协议发送到设备，写入 `0x80000` 启动地址并且调转到新加载的 `kernel` 中执行。

最后，又实现了 `uptime` （输出设备启动到现在的时间）和 `exit` （跳转回 `bootloader` ，可以上传新的 `kernel` ）。并添加了 `TUNA` 作为 `shell` 启动时输出的 `BANNER` 。

整个过程挺虐的，踩了很多的坑，由于很多东西都没有，输入输出目前也只有 `UART` ，写了 `UART` 后又遇到 `XMODEM` 难以调试的问题。十分感谢 `#tuna` 上的 @BenYip 及时地指出了代码的几处问题，节省了我许多时间。

更新：[下一篇在这里](/programming/2018/02/16/thoughts-on-stanford-cs140e-3/)。
</content>
 </entry>
 
</feed>
