<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Tag - uart</title>
 <link href="https://jiegec.me/tag/uart/index.xml" rel="self"/>
 <link href="https://jiegec.me/tag/uart.html"/>
 <updated>2018-08-04T22:42:46+08:00</updated>
 <id>https://jiegec.me/tag/uart.html</id>
 <author>
   <name>Jiege Chen</name>
 </author>
 
 <entry>
   <title>近来做 Stanford CS140e 的一些进展和思考（2）</title>
   <link href="https://jiegec.me/programming/2018/02/06/thoughts-on-stanford-cs140e-2/"/>
   <updated>2018-02-06T12:52:59+08:00</updated>
   <id>https://jiegec.me/programming/2018/02/06/thoughts-on-stanford-cs140e-2</id>
   <content type="html">&lt;p&gt;在&lt;a href=&quot;/programming/2018/02/04/thoughts-on-stanford-cs140e/&quot;&gt;上一篇文章&lt;/a&gt;之后，我又有了一些进展：&lt;code class=&quot;highlighter-rouge&quot;&gt;UART&lt;/code&gt; ，简易的&lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; ，修复了之前写的 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmodem&lt;/code&gt; 中的 BUG，一个可以从 &lt;code class=&quot;highlighter-rouge&quot;&gt;UART&lt;/code&gt; 接收一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel&lt;/code&gt; 写入到内存中再跳转过去的 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootloader&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;首先是 &lt;code class=&quot;highlighter-rouge&quot;&gt;UART&lt;/code&gt; ，就是通过两个 &lt;code class=&quot;highlighter-rouge&quot;&gt;GPIO pin&lt;/code&gt; 进行数据传输，首先在 &lt;code class=&quot;highlighter-rouge&quot;&gt;memory mapped IO&lt;/code&gt; 上进行相应的初始化，然后包装了 &lt;code class=&quot;highlighter-rouge&quot;&gt;io::Read&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;io::Write&lt;/code&gt; （这里实现一开始有 BUG，后来修复了），然后很快地完成了一个仅仅能 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;然后实现了 &lt;code class=&quot;highlighter-rouge&quot;&gt;CONSOLE&lt;/code&gt; ，一个对 &lt;code class=&quot;highlighter-rouge&quot;&gt;MiniUart&lt;/code&gt; 和单例封装，就可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;kprint!/kprintln!&lt;/code&gt; 宏来输出到 &lt;code class=&quot;highlighter-rouge&quot;&gt;UART&lt;/code&gt; ，接着实现了一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; ，读入一行输出一行。然后实现退格键和方向键，这里的难点在于要控制光标并且用读入的或者空格覆盖掉屏幕上已经显示而不应该显示的内容。接着，利用 &lt;code class=&quot;highlighter-rouge&quot;&gt;skeleton&lt;/code&gt; 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Command&lt;/code&gt; 做了一个简单的 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; 命令。&lt;/p&gt;

&lt;p&gt;接着，利用之前编写的 &lt;code class=&quot;highlighter-rouge&quot;&gt;tty&lt;/code&gt; ，配合上新编写的 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootloader&lt;/code&gt; ，实现通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;UART&lt;/code&gt; 把新的 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel&lt;/code&gt; 通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;XMODEM&lt;/code&gt; 协议发送到设备，写入 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x80000&lt;/code&gt; 启动地址并且调转到新加载的 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel&lt;/code&gt; 中执行。&lt;/p&gt;

&lt;p&gt;最后，又实现了 &lt;code class=&quot;highlighter-rouge&quot;&gt;uptime&lt;/code&gt; （输出设备启动到现在的时间）和 &lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt; （跳转回 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootloader&lt;/code&gt; ，可以上传新的 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel&lt;/code&gt; ）。并添加了 &lt;code class=&quot;highlighter-rouge&quot;&gt;TUNA&lt;/code&gt; 作为 &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; 启动时输出的 &lt;code class=&quot;highlighter-rouge&quot;&gt;BANNER&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;整个过程挺虐的，踩了很多的坑，由于很多东西都没有，输入输出目前也只有 &lt;code class=&quot;highlighter-rouge&quot;&gt;UART&lt;/code&gt; ，写了 &lt;code class=&quot;highlighter-rouge&quot;&gt;UART&lt;/code&gt; 后又遇到 &lt;code class=&quot;highlighter-rouge&quot;&gt;XMODEM&lt;/code&gt; 难以调试的问题。十分感谢 &lt;code class=&quot;highlighter-rouge&quot;&gt;#tuna&lt;/code&gt; 上的 @BenYip 及时地指出了代码的几处问题，节省了我许多时间。&lt;/p&gt;
</content>
 </entry>
 
</feed>
