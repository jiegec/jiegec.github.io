<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Tag - stanford</title>
 <link href="https://jiegec.me/tag/stanford/index.xml" rel="self"/>
 <link href="https://jiegec.me/tag/stanford.html"/>
 <updated>2018-10-07T22:32:08+08:00</updated>
 <id>https://jiegec.me/tag/stanford.html</id>
 <author>
   <name>Jiege Chen</name>
 </author>
 
 <entry>
   <title>近来做 Stanford CS140e 的一些进展和思考（8）</title>
   <link href="https://jiegec.me/programming/2018/04/10/thoughts-on-stanford-cs140e-8/"/>
   <updated>2018-04-10T17:27:00+08:00</updated>
   <id>https://jiegec.me/programming/2018/04/10/thoughts-on-stanford-cs140e-8</id>
   <content type="html">在[上一篇文章](/programming/2018/04/07/thoughts-on-stanford-cs140e-7/)之后，我其实还是很忙，但是一直心理惦记着这件事，毕竟只剩最后的一点点就可以做完了，不做完总是觉得心痒。

今天做的部分是调度。我们目前只在 EL0 运行了一个 shell ，每当触发 exception 时回到 kernel 进行处理，再回到原来的地方。但现在，我要实现一个 preemtive round-robin scheduler ，就需要管理当前的所有进程，并且维护当前的进程状态，当时钟中断到来的时候，决定下一个 time slice 要执行的进程，再切换过去。这个过程当然会遇到不少的坑。

首先，我们需要判断一个进程是否可以执行了。考虑到阻塞的 IO ，作者提供了一个优雅的方法：如果这个进程阻塞在 IO 上，那么，提供一个函数，在 scheduler 中调用，判断所需要的数据是否到达。这样，我们就可以一个循环把下一个 time slice 要执行的线程找到。如果找不到，就等待 interrupt 再尝试。

困难的地方在于，在启动的时候，切换到一个起始线程。并且在上下文切换的时候，在 process 1 -&gt; kernel -&gt; process 2 这两步过程中，有许多寄存器都需要仔细考虑如何实现。并且在这个过程中，我也发现了之前写的代码中的问题，最终修复了（目前来看是 working 了）。

我的代码实现在 [这里](https://github.com/jiegec/cs140e/commit/977f179a9b28e88e85f4ba9577a0682bf2b6c57b) 。下一步就要写 syscall 了。希望能在期中前抽时间赶紧把这个做完。

18:54 PM Update: 刚实现完了 sleep 的 syscall 。比预想中要简单。果然找到了自己实现的调度器的 BUG 。此系列大概是完结了。
</content>
 </entry>
 
 <entry>
   <title>近来做 Stanford CS140e 的一些进展和思考（7）</title>
   <link href="https://jiegec.me/programming/2018/04/07/thoughts-on-stanford-cs140e-7/"/>
   <updated>2018-04-07T14:05:00+08:00</updated>
   <id>https://jiegec.me/programming/2018/04/07/thoughts-on-stanford-cs140e-7</id>
   <content type="html">在[上一篇文章](/programming/2018/03/05/thoughts-on-stanford-cs140e-6/)之后，我很长时间都没有在继续我这个项目，清明节刚好闲下来了我就回来继续啃它。Stanford那边已经结课，最后的 `3-spawn` 也只有一部分，剩下的部分不知道什么时候作者才会填上去了。

这次主要要写的代码就是，对异常的处理。这里的异常并不是我们编程语言中的 catch/throw ，而是硬件的异常。AArch64 和 x86 一样，也有不同的特权级别的区分，前者是 EL0~EL3 ，后者则是 RING0 和 RING3 。特权级别高可以往特权级别低转换，但是反过来，只能通过异常的方式提高特权等级，并且切换特权等级后只有固定的一些代码可能会跳转，这就是 `exception handler/vectors` 。这些函数可以知道是什么原因调用了他们，根据硬件规定好的文档，我们可以知道发生了什么事情，是对齐出错了呢，还是用户调用了 syscall 呢，等等。根据不同的情况，我们需要进行不同的处理。当处理完之后，我们需要考虑，跳转回用户代码的时候，回到哪里，提供什么值，不提供什么。

实现的话，需要很多步骤。首先是构造好 `exception vector` ，这里作者已经写好了一个宏（这里 @BenYip 遇到了一个 assembler 的 BUG ），直接用宏就可以把它写出来。然后，我们需要把它加载到当前 EL 的 `VBAR_ELx` 寄存器中，当 CPU 抛出异常的时候，就会找到这里相应的处理器进行处理。进到这里以后，我们首先先不考虑太多上下文保存的事情--我们先保证能处理异常，恢复也是个有很多坑的步骤，作者也是在这里分成了两个 Subphase 。首先还是从 `ESR_ELx` 中解析到错误的来源的具体内容，如果是我们在 `shell` 中自己调用的 `brk 2` 指令，我们就自己新开一个 `shell` ，修改了提示符以示区别。这样，我们就成功地捕捉到了这个异常。由于我们还无法恢复回去，所以我们直接死循环。

接下来我们要做的是，从异常中恢复出来。由于用户代码可能在各种地方抛出异常，异常也分同步和异步两种情况，这里有许多需要考虑的问题。为了简化，我们目前只考虑同步的 `brk 2` 导致的 Brk 异常。为了能恢复之后能够正常运行，我们需要把所有的寄存器都保存下来，即 `TrapFrame` 。保存的时候需要讲究 AArch64 平台下 SP 寄存器的对齐问题。我们也要把一些特殊的寄存器保存下来。还有一点，就是，因为 `exception handler` 中调用了 `context_save` 函数，所以此时的 lr 本身也需要进行保存，这个地方也卡了我很久。最后，再把这些一个一个地恢复到原来的样子，调整 `ELR_EL1` 使得退回到原来的状态时，会跳过当前的 `brk 2` 指令，调用它的下一调指令。这样，我们就成功地在遇到异常时，弹出一个 `shell` ，而且还可以回退回来。

学到了很多很多。之后大三，我们可能需要做自己的 CPU ，在自己的 CPU 上跑自己的操作系统，在自己的操作系统中跑自己的编译器，在自己的编译器中编译一个数据库。希望到时我还活着吧。#flag

更新：[下一篇在这里](/programming/2018/04/10/thoughts-on-stanford-cs140e-8/)。</content>
 </entry>
 
 <entry>
   <title>近来做 Stanford CS140e 的一些进展和思考（6）</title>
   <link href="https://jiegec.me/programming/2018/03/05/thoughts-on-stanford-cs140e-6/"/>
   <updated>2018-03-05T19:55:49+08:00</updated>
   <id>https://jiegec.me/programming/2018/03/05/thoughts-on-stanford-cs140e-6</id>
   <content type="html">在[上一篇文章](/programming/2018/03/03/thoughts-on-stanford-cs140e-5/)之后，作者终于更新了测试的用例，我的程序终于可以成功跑过所有测试，也成功在树莓派跑起来。不过，我的代码中很多地方的错误处理比较偷懒，往往直接 `panic` ，显然并不友好。同时，我想到了使用 [cargo-fuzz](https://github.com/rust-fuzz/cargo-fuzz) 来进行自动化测试，果然，使用这个很快就修复了不少我没想到的会出错的地方，比如乘法溢出，目录项没有正确结束等等。目前还发现一个 `timeout` 的问题，研究发现大概是文件的 `cluster chain` 中出现了环，导致一直读取文件而没有停止。要解决这个问题，我目前想到的是 `Floyd` 的判圈算法，但还没上实现。等过几天，新的 `Assignment 3` 出了以后，再继续更新。希望作者少点跳票，多点勤奋，哈哈哈哈哈

更新：[下一篇在这里](/programming/2018/04/07/thoughts-on-stanford-cs140e-7/)。</content>
 </entry>
 
 <entry>
   <title>近来做 Stanford CS140e 的一些进展和思考（5）</title>
   <link href="https://jiegec.me/programming/2018/03/03/thoughts-on-stanford-cs140e-5/"/>
   <updated>2018-03-03T11:07:30+08:00</updated>
   <id>https://jiegec.me/programming/2018/03/03/thoughts-on-stanford-cs140e-5</id>
   <content type="html">在[上一篇文章](/programming/2018/02/27/thoughts-on-stanford-cs140e-4/)之后，作者多次延期跳票之后（again），终于放出了 `Assignment 2 Phase 3: Saddle Up` 。这次，我们要做的变成了把已经写好的（错漏百出）的 `fat32` 的驱动搬到树莓派里面去，然后实现一些基本的 `shell` 命令： `ls` `cat` `cd` 等等。作者首先更新了老版本的新的测试样例，放了一些映像然后提供了预期的结果，结果发现，这里的 `fat32` 有一些不同，主要的就是 `bytes_per_sector` 不是 `512` 了，意味着物理的扇区和逻辑扇区并不一致。同时， `sectors_per_cluster` 也不是 `1` 了，需要考虑多个扇区的情况。同时， `read_cluster` 传入的 `offset` 也可能不再是第一个 `sector` 中的，所以需要做一个处理。对于物理和逻辑扇区的问题，作者推荐的方案是，把 `fat32` 之外的扇区保持不变，把其内的扇区视为逻辑扇区。这样，其它代码都可以透明地工作，而不用到处更改，这就体现了封装的威力。接着，作者提供了一个写好了的 `libsd` 和一些导出的函数，使用这些函数即可。不过，在错误处理和 `timeout` 上也遇到了一些坑。后面，把东西搬到树莓派上运行，问题就出现了：读取了第一个扇区（即 `MBR` 所在的扇区）之后，直接就死掉了。想了半天都没找到方案，突然想起可以利用 `panic!` 对错误语句进行二分查找。查找了大概有七八个小时之后，终于发现，问题出现在读取一个 `u32` 类型的变量上。我起初怀疑是栈出了问题，所以放到堆上分配，然而还是不行。忽然想起以前遇到的对齐问题，在 `AArch64` 架构上，可能为了简化，读取的 `u32` 必须对齐到四个字节上。于是找了找 `Rust` 中的对齐方面的文档，找到了 `#[repr(align=4)]` 这种表示方法，代替了原来的 `#[repr(packed)]` ，并且把数据先拷贝到对齐后的栈上的对应数据结构，然后再读取对应的项。果然，这个问题就解决了。然后又发现我的盘中会出现 `lfn` 项并不是从后往前的情况，于是我又修改了一下相关的代码。现在，终于可以成功地 `ls` `cat` `cd` 。

不过还是要吐槽一下，作者的测试用的映像文件中，会出现 `0xE5` 表示这个项已经被删除的情况，但是似乎作者的代码并没有处理这个，所以在预期的输出中出现了一些明显不正确的结果，导致我的代码跑测试并不能通过。而且，作者的代码在一些情况下会把文件的后缀漏掉。作者后来更新了几次测试的文件，不过这个问题只解决了一部分，并没有完全解决。坐等作者继续放出新的测试文件吧。

更新：[下一篇在这里](/programming/2018/03/05/thoughts-on-stanford-cs140e-6/)。</content>
 </entry>
 
 <entry>
   <title>近来做 Stanford CS140e 的一些进展和思考（4）</title>
   <link href="https://jiegec.me/programming/2018/02/27/thoughts-on-stanford-cs140e-4/"/>
   <updated>2018-02-27T22:42:59+08:00</updated>
   <id>https://jiegec.me/programming/2018/02/27/thoughts-on-stanford-cs140e-4</id>
   <content type="html">在[上一篇文章](/programming/2018/02/16/thoughts-on-stanford-cs140e-3/)之后，作者多次延期跳票之后，终于放出了 `Assignment 2 Phase 2:32-bit Lipids` ，这两天就把只读 `FAT32` 写完了（不过封装得并不好，许多地方利用了 `pub(super)` 把变量可以访问的范围控制到 `vfat` 中，然后直接读，只有少数需要特殊处理的进行了函数的封装）。首先当然是研究了半天 `MBR` 和 `FAT32` 的结构，拿了不同来源的 `FAT` 结构说明进行对比和验证，最后终于把格式搞清楚了，先实现了 `MasterBootRecord` ，这个其实很好实现，以前也有接触过 `MBR` ，本身也很简单。然后就是根据 `MBR` 找到第一个 `FAT32` 的分区，根据偏移找到分区的开头，开头的第一个扇区就是 `EBPB` 数据结构，里面保存了 `FAT32` 分区的各种信息。根据里面的信息，可以找到 `FAT` 表的位置和数量，还有数据部分的 `Cluster` 的位置和数量。接着，解析一下 `FAT` 表，实际上是一个与 `Cluster` 一一对应的链表结构，用特殊的数据代表链表的尾和空、坏扇区。利用这些，和 `EBPB` 中根目录所在的第一个 `Cluster` ，先在 `VFat` 里面实现了读取一个 `Cluster` 链的内容的函数，利用这个函数读取一个一个的目录项，解析目录项，把长文件名的项合并到一个之中，然后对应地丢到 `Entry` 对象中，目录则可以枚举子目录项，根据名字比较去找子目录或者子文件夹，文件则实现了 `io::Read`和 `io::Seek` 使得可以读取文件的内容。实现好了这些以后，就拿了 `raspbian-strech-lite.img` 作为硬盘映像，从文件里读取文件信息，成功地把 `config.txt` 读取出来。

其中还是遇到许多困难，如各种偏移的计算，如何处理跨 `Cluster` 和跨 `Sector` 的读写，等等，有不少的坑在其中，花了两天的空余时间才差不多完善了这个功能。还有就是利用 `Rust` 现有的功能完成 `C` 里面很轻易就可以实现的指针操作，也花了不少时间。

更新：[下一篇在这里](/programming/2018/03/03/thoughts-on-stanford-cs140e-5/)。</content>
 </entry>
 
 <entry>
   <title>近来做 Stanford CS140e 的一些进展和思考（3）</title>
   <link href="https://jiegec.me/programming/2018/02/16/thoughts-on-stanford-cs140e-3/"/>
   <updated>2018-02-16T20:09:00+08:00</updated>
   <id>https://jiegec.me/programming/2018/02/16/thoughts-on-stanford-cs140e-3</id>
   <content type="html">由于 `Assignment 2: File System ` 延期发布，所以中间那段时间转向 `MIT 6.828` 稍微研究了一下。前几天放出了新的任务，在[上一篇文章](/programming/2018/02/06/thoughts-on-stanford-cs140e-2/)之后，我又有了一些进展： 实现了从内存中读取 `ATAGS(ARM Tags)` 信息的代码，从而可以获得内存大小的信息，根据这个信息，实现了 `bump` 和 `bin` 两种内存分配器，并且把二者之一注册为全局内存分配器，利用上更新了的 `std` 就可以使用需要动态分配内存的相关工具了。利用这个，我实现了 `shell` 输入历史的回溯，把输入历史保存在一个动态增长的数组中，再特殊处理上下键，把当前的行替换为历史。

这个过程也不是没有踩坑。一开始代码放出来了，但是题目说明还没出，我就自己按照代码做了 `ATAGS` 和 `bump` 分配器，后来做完了，看到说明出了以后，发现理解还是有偏差，把代码更改了并修复了分配器的 BUG 。看到 `bin` 分配器的时候，我按照网上的 `buddy memory allocation` 实现了一个内存分配器，原理看起来简单实现起来还是有很多细节问题，后来按照新放出的单元测试，修修补补才写得差不多可用了。同时，原来的 `bootloader` 因为用了新的 `std` 而缺失了 `alloc` 不能编译，我就把 `kernel` 下的相关文件软连接过去，调了数次后把问题解决。此时， `kernel` 文件大小已经有 40K ，按照 115200 Baudrate 发送需要几秒才能传输过去，我就调到了 230400 Baudrate ，果然现在的传输速度就有所提升，可以接受了。等之后写了 `EMMC(SD card)` 的驱动和 `FAT32` 的文件系统后，就可以实现更多的 `shell` 的功能了。中间还遇到一个问题，就是如果给 `kernel` 开启了 `bin` 分配器，使用 `exit` 回到 `bootloader` 就无法传新的 `kernel` 上去了，结果发现是因为 `bin` 中用到的侵入式 `LinkedList` 实现覆盖了部分 `bootloader` 的代码，换回不能回收内存的 `bump` 分配器即可，反正目前远远还用不了那么多内存。

之后还要在 `aarch64` 上用 `MMU` 实现虚拟内存，之前在 `MIT 6.828` 里被页表整得脑子眩晕，希望到时我还活着吧（逃

更新：[下一篇在这里](/programming/2018/02/27/thoughts-on-stanford-cs140e-4/)。
</content>
 </entry>
 
 <entry>
   <title>近来做 Stanford CS140e 的一些进展和思考（2）</title>
   <link href="https://jiegec.me/programming/2018/02/06/thoughts-on-stanford-cs140e-2/"/>
   <updated>2018-02-06T12:52:59+08:00</updated>
   <id>https://jiegec.me/programming/2018/02/06/thoughts-on-stanford-cs140e-2</id>
   <content type="html">在[上一篇文章](/programming/2018/02/04/thoughts-on-stanford-cs140e/)之后，我又有了一些进展：`UART` ，简易的`shell` ，修复了之前写的 `xmodem` 中的 BUG，一个可以从 `UART` 接收一个 `kernel` 写入到内存中再跳转过去的 `bootloader` 。

首先是 `UART` ，就是通过两个 `GPIO pin` 进行数据传输，首先在 `memory mapped IO` 上进行相应的初始化，然后包装了 `io::Read` 和 `io::Write` （这里实现一开始有 BUG，后来修复了），然后很快地完成了一个仅仅能 `echo` 的 `kernel` 。

然后实现了 `CONSOLE` ，一个对 `MiniUart` 和单例封装，就可以用 `kprint!/kprintln!` 宏来输出到 `UART` ，接着实现了一个 `echo` 的 `shell` ，读入一行输出一行。然后实现退格键和方向键，这里的难点在于要控制光标并且用读入的或者空格覆盖掉屏幕上已经显示而不应该显示的内容。接着，利用 `skeleton` 中的 `Command` 做了一个简单的 `echo` 命令。

接着，利用之前编写的 `tty` ，配合上新编写的 `bootloader` ，实现通过 `UART` 把新的 `kernel` 通过 `XMODEM` 协议发送到设备，写入 `0x80000` 启动地址并且调转到新加载的 `kernel` 中执行。

最后，又实现了 `uptime` （输出设备启动到现在的时间）和 `exit` （跳转回 `bootloader` ，可以上传新的 `kernel` ）。并添加了 `TUNA` 作为 `shell` 启动时输出的 `BANNER` 。

整个过程挺虐的，踩了很多的坑，由于很多东西都没有，输入输出目前也只有 `UART` ，写了 `UART` 后又遇到 `XMODEM` 难以调试的问题。十分感谢 `#tuna` 上的 @BenYip 及时地指出了代码的几处问题，节省了我许多时间。

更新：[下一篇在这里](/programming/2018/02/16/thoughts-on-stanford-cs140e-3/)。
</content>
 </entry>
 
 <entry>
   <title>近来做 Stanford CS140e 的一些进展和思考</title>
   <link href="https://jiegec.me/programming/2018/02/04/thoughts-on-stanford-cs140e/"/>
   <updated>2018-02-04T22:28:23+08:00</updated>
   <id>https://jiegec.me/programming/2018/02/04/thoughts-on-stanford-cs140e</id>
   <content type="html">最近，受各路安利，剁手买下了 [这个淘宝商家的树莓派的套餐C](https://item.taobao.com/item.htm?id=537501616420) ，还买了许多 LED 灯泡、杜邦线和电阻，开始按照 [CS 140e](http://web.stanford.edu/class/cs140e/) 学习 Rust 并且用 Rust 编译写一个简易的操作系统。Assignment 0 的目标就是编写一个向 GPIO 16 连接的 LED 灯闪烁。首先当然就是愉快地按照教程下载 bootloader ，下载交叉编译工具链，顺带装一个 Raspbian 到机器上，随时可以当成一个低性能的 ARM/ARM64 （实际上，Raspbian 只用了armv7l，没有用 64bit）机器来用，以后如果配上 [@scateu](https://scateu.me) 团购的 Motorola Laptop Dock 的话就是一个几百块的笔记本了。把课程上的文件丢上去，可以看到绿色的活动指示灯闪烁，后面又把 CP2102 模块连上去，又能看到 Blink on, Blink off 的输出。然后按照要求，自己先码一段 C 语言，实现 blinky:

```c++
#define GPIO_BASE (0x3F000000 + 0x200000)

volatile unsigned *GPIO_FSEL1 = (volatile unsigned *)(GPIO_BASE + 0x04);
volatile unsigned *GPIO_SET0  = (volatile unsigned *)(GPIO_BASE + 0x1C);
volatile unsigned *GPIO_CLR0  = (volatile unsigned *)(GPIO_BASE + 0x28);

static void spin_sleep_us(unsigned int us) {
  for (unsigned int i = 0; i &lt; us * 6; i++) {
    asm volatile(&quot;nop&quot;);
  }
}

static void spin_sleep_ms(unsigned int ms) {
  spin_sleep_us(ms * 1000);
}

int main(void) {
  // STEP 1: Set GPIO Pin 16 as output.
  *GPIO_FSEL1 = 0b001 &lt;&lt; 18;
  // STEP 2: Continuously set and clear GPIO 16.
  while (1) {
    *GPIO_SET0 = 1 &lt;&lt; 16;
    spin_sleep_ms(1000);
    *GPIO_CLR0 = 1 &lt;&lt; 16;
    spin_sleep_ms(1000);
  }
}
```

其中大部分代码都已经给出了，自己要实现也只是查询一下 BCM2837 SoC 的 GPIO 文档，按照文档把该做的内存操作和位运算都写一下即可。最后发现，闪烁的频率特别慢，几秒钟才闪烁一次。毕竟是按照 CPU 的 clock speed 进行粗略的计时，而生成的代码也不是很高效，没有 inline。接着则是用 Rust 再实现一下上面这部分的代码：

```rust
#![feature(compiler_builtins_lib, lang_items, asm, pointer_methods)]
#![no_builtins]
#![no_std]

extern crate compiler_builtins;

pub mod lang_items;

const GPIO_BASE: usize = 0x3F000000 + 0x200000;

const GPIO_FSEL1: *mut u32 = (GPIO_BASE + 0x04) as *mut u32;
const GPIO_SET0: *mut u32 = (GPIO_BASE + 0x1C) as *mut u32;
const GPIO_CLR0: *mut u32 = (GPIO_BASE + 0x28) as *mut u32;

#[inline(never)]
fn spin_sleep_ms(ms: usize) {
    for _ in 0..(ms * 600) {
        unsafe { asm!(&quot;nop&quot; :::: &quot;volatile&quot;); }
    }
}

#[no_mangle]
pub unsafe extern &quot;C&quot; fn kmain() {
    // STEP 1: Set GPIO Pin 16 as output.
    GPIO_FSEL1.write_volatile(1 &lt;&lt; 18);
    // STEP 2: Continuously set and clear GPIO 16.
    loop {
        GPIO_SET0.write_volatile(1 &lt;&lt; 16);
        spin_sleep_ms(1000);
        GPIO_CLR0.write_volatile(1 &lt;&lt; 16);
        spin_sleep_ms(1000);
    }
}
```

这边和上面一样，很多东西都已经给出了，只是重新改写一下而已。不过，这边的实测结果则是，一秒钟会闪烁很多下，看了下汇编，生成的循环比较紧凑，所以也没有达到想要的效果，不过后面到我实现了 Timer 的读取之后，就很精准了。

接下来就是痛苦的学习 Rust 的过程，Assignment 1 上来就是解答关于 Rust 语言的一些问题，在过程中被 Rust 十分严格的 Lifetime 和 Borrow checker 弄得想死，好歹最后还是让测试都通过了。接下来就是真正地提供一些封装硬件接口的 API，然后利用这些 API 去实现更多功能，首先是利用栈上分配的空间模拟一个变长数组的 API：`stack-vec` ，然后是把底层的直接操作硬件的内存操作封装成类型安全的 `volatile` ，然后实现一个简单的支持断点续传的传文件的协议 `xmodem` ，又做了一个辅助电脑上使用 TTY+XMODEM 的小工具 `ttywrite` ，然后就开始撸硬件了：时钟 `timer` ，针对 GPIO pin 的类型安全的状态机 `GPIO` 。目前只实现到这里，然后做出了一个准确一秒闪烁的 blinky （令人惊讶的是，因为这里的 kernel 直接从文件头开始就是代码，最后的 binary 异常地小，而之前的代码从文件的偏移 0x8000 开始。目前看来，是因为之前的代码是整个文件加载到 0x0000 上，而代码默认了从  0x8000 开始，所以除了最开头的一个跳转指令，中间留了许多空余的空间。而这里的代码是直接被 bootloader 加载到了 0x80000 处并且跳转到这里执行，所以省去了许多空间）：

```rust
fn blinky() {
    let mut pin16 = Gpio::new(16);
    let mut pin_out16 = pin16.into_output();

    loop {
        pin_out16.set();
        spin_sleep_ms(1000);
        pin_out16.clear();
        spin_sleep_ms(1000);
    }
}

#[no_mangle]
pub extern &quot;C&quot; fn kmain() {
    // FIXME: Start the shell.
    blinky();
}
```

目前只做到这里。后面还有大把的坑要踩，难写的 Rust 还得继续啃下去。我的代码都以 diff 的形式放在了 [jiegec/cs140e](https://github.com/jiegec/cs140e) ，写得并不美观。接下来就是实现 `UART` 了，终于要实现串口通信了。

2018-01-06 更新： [下一篇文章已经更新](/programming/2018/02/06/thoughts-on-stanford-cs140e-2/) 。
</content>
 </entry>
 
</feed>
