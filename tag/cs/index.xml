<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Tag - CS</title>
 <link href="https://jiegec.github.io/tag/cs/index.xml" rel="self"/>
 <link href="https://jiegec.github.io/tag/CS.html"/>
 <updated>2017-12-02T23:56:42+08:00</updated>
 <id>https://jiegec.github.io/tag/CS.html</id>
 <author>
   <name>Jiege Chen</name>
 </author>
 
 <entry>
   <title>分析一个我第一次见的素数测试函数</title>
   <link href="https://jiegec.github.io/programming/2017/10/17/analysis-on-a-primality-test/"/>
   <updated>2017-10-17T21:05:28+08:00</updated>
   <id>https://jiegec.github.io/programming/2017/10/17/analysis-on-a-primality-test</id>
   <content type="html">&lt;p&gt;今天逛到这个&lt;a href=&quot;http://blog.csdn.net/l04205613/article/details/6025118&quot;&gt;连接&lt;/a&gt;，发现其中的第四种素数判定方法很有意思：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;math.h&amp;gt;
int p[8]={4,2,4,2,4,6,2,6};
int prime(int n)
{
    int i=7,j,q;
    if(n==1)return 0;
    if(n==2||n==5||n==3)return 1;
    if(n%2==0||n%3==0||n%5==0)return 0;
    q=(int)sqrt(n);
    for(;i&amp;lt;=q;){
        for(j=0;j&amp;lt;8;j++){
            if(n%i==0)return 0;
            i+=p[j];
        }
        if(n%i==0)return 0;
    }
    return 1;
}
void main()
{
    int n;
    scanf(&quot;%d&quot;,&amp;amp;n);
    if(prime(n))puts(&quot;Yes&quot;);
    else puts(&quot;No&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;仔细研究发现，这里利用的是这样的原理：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;判断是不是1, 2, 3, 5及其倍数&lt;/li&gt;
  &lt;li&gt;从7开始，不断考虑其是否是素数，那么，这个p是什么回事呢？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;首先把p的各个元素加起来，和为30，然后就可以发现一个规律：
7为质数，7+2=9不是质数，7+4=11为质数，11+2=13为质数，13+2=15为合数，15+2=17为质数，17+2=19为质数，19+2=21为合数，21+2=23为质数，23+2=25为合数，25+2=27为合数，27+2=29为质数，29+1=31为质数，31+2=33为合数，33+2=35为合数，35+2=37为质数。
观察以上所有的合数，都含有2或者3或者5的因子，而30又是2,3,5的公倍数，也就是说，后面的素数模30的余数不可能是上面这些合数，而剩下的素数才可能是真正的素数，于是跳过了很多素数的判断。&lt;/p&gt;

&lt;p&gt;至于这个函数的性能如何，还需要进一步测试来进行判断。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>关于scanf和scanf_s的问题</title>
   <link href="https://jiegec.github.io/programming/2017/10/17/on-scanf-and-scanf_s/"/>
   <updated>2017-10-17T16:46:40+08:00</updated>
   <id>https://jiegec.github.io/programming/2017/10/17/on-scanf-and-scanf_s</id>
   <content type="html">&lt;p&gt;最近作为程设基础的小教员，收到很多同学的求助，关于&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s&lt;/code&gt;的问题已经遇到了两次，特此写一篇博文来叙述一下这个问题。&lt;/p&gt;

&lt;p&gt;一开始，有同学问我，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char a;
scanf(&quot;%c&quot;,&amp;amp;a);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;为什么会报错？我说，vs默认强制要求使用scanf_s函数，于是我建议这位同学把这个错误信息关掉了。嗯。经过百度，这位同学的问题解决了。&lt;/p&gt;

&lt;p&gt;后来，又有一位同学问我，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char a;
scanf_s(&quot;%c&quot;,&amp;amp;a);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;程序为什么会崩溃？我想了想，如果scanf_s和scanf是一样的行为，这段代码是没问题的。但scanf_s既然安全，必然是在字符串方面做了处理。这里的char*勉强也算一个？网上一查，果然，应该写成&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s(&quot;%c&quot;,&amp;amp;a,1);&lt;/code&gt;，字符串则要写成&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s(&quot;%s&quot;,str,sizeof(str))&lt;/code&gt;，来保证缓冲区不会溢出。&lt;/p&gt;

&lt;p&gt;但是，这样解决这个问题又面临着不同的选择：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;学习&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;的不同，把所有&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;换成&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s&lt;/code&gt;并做相应的修改。
这样当然符合了语言进化的潮流，也会让vs闭嘴。但是，scanf_s只有在C11标准中有，而且，根据&lt;a href=&quot;http://en.cppreference.com/w/c/io/fscanf&quot;&gt;cpprefrence.com上关于scanf的描述&lt;/a&gt;，只有在&lt;code class=&quot;highlighter-rouge&quot;&gt;__STDC_LIB_EXT1__&lt;/code&gt;被定义且在&lt;code class=&quot;highlighter-rouge&quot;&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/code&gt;之前&lt;code class=&quot;highlighter-rouge&quot;&gt;#define __STDC_WANT_LIB_EXT1__&lt;/code&gt;才能确保使用&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s&lt;/code&gt;能使用，当然在vs较新版本中是默认可以使用的。但是，程设基础的作业是要丢到oj上的，而oj上的编译器不一定支持这些，所以这个选项不行。&lt;/li&gt;
  &lt;li&gt;坚持用&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;，自己按照题目要求保证缓冲区不溢出，同时让vs闭嘴。
网上已有&lt;a href=&quot;https://www.cnblogs.com/wangduo/p/5554465.html&quot;&gt;教程&lt;/a&gt;，已经讲的很全面了，大家可以根据这个教程把vs教训一顿。为了能在oj里跑，建议用里面的方法五到八。（个人最推荐在文件头添加&lt;code class=&quot;highlighter-rouge&quot;&gt;#define _CRT_SECURE_NO_WARNINGS&lt;/code&gt;）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以后再遇到这个问题，我就丢这个连接上来就好了咯。yeah！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>回顾昨天的酒井知识竞赛</title>
   <link href="https://jiegec.github.io/others/2017/10/16/review-on-yesterdays-jiujing-adi-contest/"/>
   <updated>2017-10-16T10:36:28+08:00</updated>
   <id>https://jiegec.github.io/others/2017/10/16/review-on-yesterdays-jiujing-adi-contest</id>
   <content type="html">&lt;p&gt;昨天晚上，我作为蒟蒻组的一员在三教2102参加了酒井知识竞赛，并因此鸽掉了TUNA和Lab mU的迎新会hhh，不过运气好拿到了二等奖的好成绩，获得Paperang便携打印机一台。中间遇到了好一些网络方面的知识，这对于没有记忆OSI模型的我无疑有巨大的难度。下面是几道比较有印象的题目：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;以下哪个不是编程语言？
A. J B. L C. R D. K
这题不难，R肯定对，J见过，K略微有印象，选B&lt;/li&gt;
  &lt;li&gt;IPv6链路层地址解析的协议是？
A. ARP B. Neighbour Solicitation C. Neighbour Advertisement D. Neighbour Discovery
对于一个没研究过IPv6的人来说这只好蒙了。。。ARP是IPv4时代的，ND(Neighbour Discovery则是IPv6时代的新产物，把ARP和ICMP等协议的功能都包含了进来，并且有新的功能。之前样题里还出现过问IPv6中去掉了Unicast,Anycast,Multicast,Broadcast中的哪种，答案是Broadcast。&lt;/li&gt;
  &lt;li&gt;第一个把程序错误称做bug的是？
 选项太多忘了，答案是Grace Hopper，因为当时一只飞蛾意外飞入了机器导致了故障，后来慢慢就流传下来了。&lt;/li&gt;
  &lt;li&gt;以下不是网络操作系统的是？
 A. Windows NT B. OS/2 warp C. DOS D. Netware
 当时我没见过D，于是就选了。。。然后就挂了，Netware是Novell开发的系统，OS/2 warp当然是历史悠久的系统啦，而DOS=Disk Operating System所以没有“网络”二字。。。晕倒&lt;/li&gt;
  &lt;li&gt;以下是用作局域网的协议是？
 A. TCP/IP B. IPX/SPX C. NetBEUI D. RS-232-C
 TCP/IP当然不仅限于局域网，RS-232-C是接口，当时蒙了B结果就对了，白白拿了50分哈哈哈。IPX/SPX是Novell设计用在Netware系统上的局域网协议，NetBEUI则是NetBIOS的一个历史遗留的一个“别称”。&lt;/li&gt;
  &lt;li&gt;姚期智的夫人给谁取了中文名？
 当然是Donald Ervin Knuth啦！高德纳万岁！&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
</feed>
