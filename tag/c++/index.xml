<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Tag - c++</title>
 <link href="https://jiege.ch/tag/c++/index.xml" rel="self"/>
 <link href="https://jiege.ch/tag/c++.html"/>
 <updated>2019-01-11T17:56:51+08:00</updated>
 <id>https://jiege.ch/tag/c++.html</id>
 <author>
   <name>Jiege Chen</name>
 </author>
 
 <entry>
   <title>〖新手向〗绕过 C++ 类的访问限制</title>
   <link href="https://jiege.ch/programming/2018/03/07/breaking-C++-weak-access-control/"/>
   <updated>2018-03-07T07:59:20+08:00</updated>
   <id>https://jiege.ch/programming/2018/03/07/breaking-C++-weak-access-control</id>
   <content type="html">&lt;p&gt;这是一篇很水的文章，面向萌新，已经知道了的可以自觉绕道。&lt;/p&gt;

&lt;p&gt;昨天上课，有同学问，如果用户偷偷把 &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; 改成 &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; 再和原有的库链接，是不是就可以在用户代码里更改了。这个答案是肯定的。下面我们就做个实验：&lt;/p&gt;

&lt;p&gt;首先，创建 good_class.h 和 good_class.cpp:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;good_class.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，首先编译，&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;clang++ &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; good_class.cpp &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; good_class.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，修改 good_class.cpp 并写一个 evil_user.cpp&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &quot;good_class.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SomeClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;编译：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;clang++ good_class.o evil_user.cpp &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; evil
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;evil&lt;/code&gt; 如愿地输出了 &lt;code class=&quot;highlighter-rouge&quot;&gt;37&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;一些提醒：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C++&lt;/code&gt; 的访问控制十分的弱，仅仅是编译期。所以是很容易绕过的。&lt;/li&gt;
  &lt;li&gt;对于不想泄露源代码的库，不要导出 &lt;code class=&quot;highlighter-rouge&quot;&gt;C++&lt;/code&gt; 的类和函数。选择导出 &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; 函数，结构体用 incomplete type 或者干脆 &lt;code class=&quot;highlighter-rouge&quot;&gt;void *&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;扩展阅读： &lt;a href=&quot;https://liam0205.me/2018/01/23/crack-private-member-function-by-vtable/&quot;&gt;L叔的通过虚函数表访问私有函数&lt;/a&gt; 。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>再次吐槽 VS 关于 scanf 和 scanf_s 的问题</title>
   <link href="https://jiege.ch/programming/2018/01/30/more-on-scanf-and-scanf_s/"/>
   <updated>2018-01-30T16:05:33+08:00</updated>
   <id>https://jiege.ch/programming/2018/01/30/more-on-scanf-and-scanf_s</id>
   <content type="html">&lt;p&gt;继&lt;a href=&quot;https://jiegec.github.io/programming/2017/10/17/on-scanf-and-scanf_s/&quot;&gt;上次的吐槽&lt;/a&gt;后，今天再次遇到同学因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt; 在 VS 下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;deprecation error&lt;/code&gt; 感到十分迷茫，在知乎上求助又因为拍照的原因被说，我就在此再次吐槽一下 VS 这对初学者很不友善很不友善的两点。&lt;/p&gt;

&lt;p&gt;一点就是上面提到的这个，另一点就是程序结束后任意键以退出这一功能要做得更加醒目一点 。前者由于大多数新手在学习 &lt;code class=&quot;highlighter-rouge&quot;&gt;C/C++&lt;/code&gt; 的时候都会跟着书上或者网上的代码敲一遍输入输出的代码，很容易就会撞到这个问题。后者则会让新手习惯性地以为程序闪退了，没有出结果，而不知道其实是程序执行结束后关闭而已。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Run Cpp In Jupyter Notebook</title>
   <link href="https://jiege.ch/programming/2017/11/30/run-cpp-in-jupyter-notebook/"/>
   <updated>2017-11-30T18:07:10+08:00</updated>
   <id>https://jiege.ch/programming/2017/11/30/run-cpp-in-jupyter-notebook</id>
   <content type="html">&lt;p&gt;刚刚在HN上看到了这么一个文章：&lt;a href=&quot;https://blog.jupyter.org/interactive-workflows-for-c-with-jupyter-fe9b54227d92&quot;&gt;Interactive Workflows for C++ with Jupyter&lt;/a&gt; &lt;a href=&quot;https://news.ycombinator.com/item?id=15808809&quot;&gt;HN&lt;/a&gt; ，终于可以在Jupyter Notebook里跑C++代码了，很开心，于是开始自己研究了起来怎么本地跑。&lt;/p&gt;

&lt;p&gt;首先当然是更新一波jupyter，安装一波cling：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 install &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; jupyter
brew install cling
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后根据&lt;a href=&quot;https://github.com/root-project/cling/tree/master/tools/Jupyter&quot;&gt;官方教程&lt;/a&gt;里的要求执行：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/share/cling/Jupyter/kernel
pip3 install &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
jupyter kernelspec install cling-cpp11
jupyter kernelspec install cling-cpp14
jupyter kernelspec install cling-cpp17
jupyter kernelspec install cling-cpp1z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结果发现找不到&lt;code class=&quot;highlighter-rouge&quot;&gt;jupyter-kernelspec&lt;/code&gt;，遂重装了一下&lt;code class=&quot;highlighter-rouge&quot;&gt;jupyter-client&lt;/code&gt;这个包，果然就可以了。打开一个notebook测试：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jupyter notebook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后创建一个C++14的Notebook，结果发现一直Kernel rebooting，错误信息是说找不到&lt;code class=&quot;highlighter-rouge&quot;&gt;../Cellar/cling/0.5/lib/libclingJupyter.dylib&lt;/code&gt;。这一看就是路径处理的问题，当前目录肯定不是&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local&lt;/code&gt;，肯定出现了什么问题，然后研究发现&lt;code class=&quot;highlighter-rouge&quot;&gt;cling-kernel.py&lt;/code&gt;中对&lt;code class=&quot;highlighter-rouge&quot;&gt;cling&lt;/code&gt;判断是否是个连接，如果是连接则按照连接去找&lt;code class=&quot;highlighter-rouge&quot;&gt;cling&lt;/code&gt;的安装目录，但是！没有考虑到这个连接是个相对路径的问题（Homebrew你背锅吗）。于是我愉快地改了代码并提交了&lt;a href=&quot;https://github.com/root-project/cling/pull/198&quot;&gt;PR&lt;/a&gt;。修复了以后就可以用了。&lt;/p&gt;

&lt;p&gt;以下是一个小小的例子：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; jupyter console &lt;span class=&quot;nt&quot;&gt;--kernel&lt;/span&gt; cling-cpp14
Jupyter console 5.2.0

cling-X


In &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1]: &lt;span class=&quot;c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
Out[1]:

In &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2]: char &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;s &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
input_line_4:2:12: warning: ISO C++11 does not allow conversion from string literal to &lt;span class=&quot;s1&quot;&gt;'char *'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Wwritable-strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
 char &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;s &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
           ^
Out[2]:

In &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3]: &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%s&quot;&lt;/span&gt;,s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
Hello, world!Out[3]:
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 13

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay，大功告成！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>关于scanf和scanf_s的问题</title>
   <link href="https://jiege.ch/programming/2017/10/17/on-scanf-and-scanf_s/"/>
   <updated>2017-10-17T16:46:40+08:00</updated>
   <id>https://jiege.ch/programming/2017/10/17/on-scanf-and-scanf_s</id>
   <content type="html">&lt;p&gt;最近作为程设基础的小教员，收到很多同学的求助，关于&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s&lt;/code&gt;的问题已经遇到了两次，特此写一篇博文来叙述一下这个问题。&lt;/p&gt;

&lt;p&gt;一开始，有同学问我，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char a;
scanf(&quot;%c&quot;,&amp;amp;a);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;为什么会报错？我说，vs默认强制要求使用scanf_s函数，于是我建议这位同学把这个错误信息关掉了。嗯。经过百度，这位同学的问题解决了。&lt;/p&gt;

&lt;p&gt;后来，又有一位同学问我，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char a;
scanf_s(&quot;%c&quot;,&amp;amp;a);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;程序为什么会崩溃？我想了想，如果scanf_s和scanf是一样的行为，这段代码是没问题的。但scanf_s既然安全，必然是在字符串方面做了处理。这里的char*勉强也算一个？网上一查，果然，应该写成&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s(&quot;%c&quot;,&amp;amp;a,1);&lt;/code&gt;，字符串则要写成&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s(&quot;%s&quot;,str,sizeof(str))&lt;/code&gt;，来保证缓冲区不会溢出。&lt;/p&gt;

&lt;p&gt;但是，这样解决这个问题又面临着不同的选择：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;学习&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;的不同，把所有&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;换成&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s&lt;/code&gt;并做相应的修改。
这样当然符合了语言进化的潮流，也会让vs闭嘴。但是，scanf_s只有在C11标准中有，而且，根据&lt;a href=&quot;http://en.cppreference.com/w/c/io/fscanf&quot;&gt;cpprefrence.com上关于scanf的描述&lt;/a&gt;，只有在&lt;code class=&quot;highlighter-rouge&quot;&gt;__STDC_LIB_EXT1__&lt;/code&gt;被定义且在&lt;code class=&quot;highlighter-rouge&quot;&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/code&gt;之前&lt;code class=&quot;highlighter-rouge&quot;&gt;#define __STDC_WANT_LIB_EXT1__&lt;/code&gt;才能确保使用&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf_s&lt;/code&gt;能使用，当然在vs较新版本中是默认可以使用的。但是，程设基础的作业是要丢到oj上的，而oj上的编译器不一定支持这些，所以这个选项不行。&lt;/li&gt;
  &lt;li&gt;坚持用&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;，自己按照题目要求保证缓冲区不溢出，同时让vs闭嘴。
网上已有&lt;a href=&quot;https://www.cnblogs.com/wangduo/p/5554465.html&quot;&gt;教程&lt;/a&gt;，已经讲的很全面了，大家可以根据这个教程把vs教训一顿。为了能在oj里跑，建议用里面的方法五到八。（个人最推荐在文件头添加&lt;code class=&quot;highlighter-rouge&quot;&gt;#define _CRT_SECURE_NO_WARNINGS&lt;/code&gt;）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以后再遇到这个问题，我就丢这个连接上来就好了咯。yeah！&lt;/p&gt;
</content>
 </entry>
 
</feed>
