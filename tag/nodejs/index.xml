<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Tag - nodejs</title>
 <link href="https://jiegec.me/tag/nodejs/index.xml" rel="self"/>
 <link href="https://jiegec.me/tag/nodejs.html"/>
 <updated>2018-12-27T21:38:44+08:00</updated>
 <id>https://jiegec.me/tag/nodejs.html</id>
 <author>
   <name>Jiege Chen</name>
 </author>
 
 <entry>
   <title>Grafana 可视化实践：清华大学 2018 年度人物评选</title>
   <link href="https://jiegec.me/software/2018/12/07/grafana-visualize-vote18/"/>
   <updated>2018-12-07T23:03:00+08:00</updated>
   <id>https://jiegec.me/software/2018/12/07/grafana-visualize-vote18</id>
   <content type="html">&lt;p&gt;最近这段时间，清华内部正在投票选出今年的年度人物，想到最近刚好在学习使用 Grafana+InfluxDB+Telegraf 全家桶，于是想着能不能写个爬虫把数据都拿下来，然后用 Grafana 画出来，就可以得到一个投票随时间变化的趋势。爬虫很简单，就是登录，获取页面信息，然后按照 InfluxDB 的输入格式进行输出即可。代码放在了 &lt;a href=&quot;https://github.com/jiegec/student-tsinghua-vote18&quot;&gt;jiegec/student-tsinghua-vote18&lt;/a&gt; 下。&lt;/p&gt;

&lt;p&gt;接着就是用 Grafana 进行可视化，大概得到了这样一个曲线：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vote18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为保护隐私，把名字隐去了。实际上的投票时间是从 12-3 号开始到 12-7号结束，但由于宿舍停电的原因所以采样的点在半夜的时候都没有，所以看起来有点奇怪，但还是能够反应总体的趋势的。比如可以看到前两名很早就一马当先，而后一直遥遥领先，下面的选手则排名变动很大，特别是截止前最后一段时间，大家都在拼命拉票，可见大家都是 DDL 选手啊。如果对上面这个图求个导，看看变化率的话：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vote18-speed.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这显现出了很有意思的一个趋势，就是每天十二点左右都有一个高峰期，然后在零点前大概熄灯附近的时间也是一个高峰期，另外就是截止前最后的抢票阶段，大家都在疯狂拉票，从中午拉到最后时刻。由于停电的原因，在零点附近的数据都比较的鬼畜，不过影响不大，趋势一目了然。&lt;/p&gt;

&lt;p&gt;Grafana 真香！期望可以学到更多高端的查询语法和可视化的骚操作，现在有很多东西不知道该怎么可视化，比较苦恼，不知道大家有没有什么经验可以分享。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>最近写 Node.js 遇到的若干坑</title>
   <link href="https://jiegec.me/programming/2018/06/08/nodejs-experiences/"/>
   <updated>2018-06-08T10:33:00+08:00</updated>
   <id>https://jiegec.me/programming/2018/06/08/nodejs-experiences</id>
   <content type="html">&lt;p&gt;最近在做前后端分离，前端在用 Vue.js 逐步重写，后端则变为 api 的形式。同时，我尝试了用 autocannon 和 clinic 工具测试自己的 api endpoint 的性能，一开始发现有几个延迟会特别高，即使是一个很简单的 api 也有不正常的高延迟。&lt;/p&gt;

&lt;p&gt;于是，我用 clinic 生成了 flamegraph ，发现了一些问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;我在 session 里保存了一些缓存的信息，这部分内容比较大， express-session 在保存到数据库前会先 JSON.stringify 再 crc 判断是否有改变，如果有改变则保存下来。但是由于我的这个对象嵌套层数多，所以时间花得很多。我调整了这个对象的结构，缩小了很多以后，果然这部分快了很多&lt;/li&gt;
  &lt;li&gt;有一个 API 需要大量的数据库查询，原本是 O（结点总数）次查询，我考虑到我们数据的结构，改成了O（深度），果然快了许多&lt;/li&gt;
  &lt;li&gt;之前遇到一个小问题，就是即使我没有登录，服务器也会记录 session 并且返回一个 cookie 。检查以后发现，是 connect-flash 即使在没有使用的时候，也会往 cookie 中写入一个空的对象，这就导致 express-session 认为需要保存，所以出现了问题。解决方案就是，换成了它的一个 fork ： connect-flash-plus ，它解决了这个问题&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
</feed>
