<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Tag - ipv6</title>
 <link href="https://jiegec.me/tag/ipv6/index.xml" rel="self"/>
 <link href="https://jiegec.me/tag/ipv6.html"/>
 <updated>2018-10-13T22:59:08+08:00</updated>
 <id>https://jiegec.me/tag/ipv6.html</id>
 <author>
   <name>Jiege Chen</name>
 </author>
 
 <entry>
   <title>使用 veth 实现 IPv6-only 的 Brouter 功能</title>
   <link href="https://jiegec.me/networking/2018/10/07/use-veth-for-ipv6-brouter/"/>
   <updated>2018-10-07T11:05:00+08:00</updated>
   <id>https://jiegec.me/networking/2018/10/07/use-veth-for-ipv6-brouter</id>
   <content type="html">&lt;p&gt;最近从 @shankerwangmiao 学到了一个方法：通过 veth 把两个 bridge 的 IPv6 桥接起来。方法如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ip link add veth-v6-in type veth peer name veth-v6-out
$ brctl addif br-in veth-v6-in
$ brctl addif br-out veth-v6-out
$ ebtables -t filter -A FORWARD -p ! IPv6 -o veth-v6-in -j DROP
$ ebtables -t filter -A FORWARD -p ! IPv6 -o veth-v6-out -j DROP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就可以看到 veth 上仅有 IPv6 的流量了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>在 Android 上打开 LTE 的 IPv6</title>
   <link href="https://jiegec.me/networking/2018/10/04/enable-lte-ipv6-on-android/"/>
   <updated>2018-10-04T22:47:00+08:00</updated>
   <id>https://jiegec.me/networking/2018/10/04/enable-lte-ipv6-on-android</id>
   <content type="html">&lt;p&gt;听闻北京移动给 LTE 配置了 SLAAC ，但现在需要手动打开，方法如下：&lt;/p&gt;

&lt;p&gt;Settings -&amp;gt; Network &amp;amp; Internet -&amp;gt; Mobile Network -&amp;gt; Advanced -&amp;gt; Access Point Names -&amp;gt; 中国移动 GPRS (China Mobile) -&amp;gt; 把 APN procotol 和 APN roaming protocol 两项都改成 IPv4/IPv6&lt;/p&gt;

&lt;p&gt;然后在 &lt;a href=&quot;https://test-ipv6.com&quot;&gt;test-ipv6.com&lt;/a&gt; 上可以看到确实分配了 IPv6 地址，不过目前评分只有 1/10 。也就是说可用性还不佳。&lt;/p&gt;

&lt;p&gt;而在 iOS 上，通过 HE 的 Network Tools 能看到，确实拿到了 IPv6 的地址，但是出不去，怀疑是运营商没有下发相关配置，所以还不能使用，只能继续等。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>在 macOS 上 TAP Interface 上启用 IPv6 自动配置</title>
   <link href="https://jiegec.me/networking/2018/08/25/enable-ipv6-autoconfiguration-on-tap-interfaces-in-macos/"/>
   <updated>2018-08-25T19:07:00+08:00</updated>
   <id>https://jiegec.me/networking/2018/08/25/enable-ipv6-autoconfiguration-on-tap-interfaces-in-macos</id>
   <content type="html">&lt;p&gt;由于 macOS 对 TAP Interface 不会自动出现一个设置中对应的服务，所以需要手动进行配置。一番测试后，发现可以通过：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ipconfig set [tap_if] automatic-v6
$ sudo ipconfig set [tap_if] dhcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;启用系统自带的 dhcp 和 ra 功能。也许有方法可以把这些 tap 搬到系统的设置中去。&lt;/p&gt;

&lt;p&gt;UPDATE:&lt;/p&gt;

&lt;p&gt;可以把 TAP Interface 加到系统的设置中去。方法参考&lt;a href=&quot;https://stackoverflow.com/a/6375307&quot;&gt;Virtual network interface in Mac OS X&lt;/a&gt;。完成以后可以直接通过系统设置界面进行配置。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>向 Lenovo y1s 刷入 OpenWRT 17.01.5 固件，并把 IPv6 bridge 到内网中和配置认证脚本</title>
   <link href="https://jiegec.me/networking/2018/07/26/flashing-lenovo-y1s-and-bridge-ipv6/"/>
   <updated>2018-07-26T20:48:00+08:00</updated>
   <id>https://jiegec.me/networking/2018/07/26/flashing-lenovo-y1s-and-bridge-ipv6</id>
   <content type="html">&lt;p&gt;首先参照&lt;a href=&quot;https://wiki.openwrt.org/toh/lenovo/lenovo_y1_v1&quot;&gt;OpenWRT Wiki - Lenovo Y1 v1&lt;/a&gt;找到刷固件教程：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;下载&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/lede/releases/17.01.5/targets/ramips/mt7620/lede-17.01.5-ramips-mt7620-y1s-squashfs-sysupgrade.bin&quot;&gt;Lenovo y1s 的固件&lt;/a&gt;备用&lt;/li&gt;
  &lt;li&gt;断开电源，等待一段时间，插入电源同时快速按下重置按钮，如果面板双闪，则说明进入了恢复模式&lt;/li&gt;
  &lt;li&gt;电脑连接到四个 LAN 口中任意一个，配置静态地址在 192.168.1.0/24 网段&lt;/li&gt;
  &lt;li&gt;打开 192.168.1.1 可以看到刷固件的页面&lt;/li&gt;
  &lt;li&gt;上传固件，等待路由器重启&lt;/li&gt;
  &lt;li&gt;配置 IP 地址为 DHCP 模式，打开 192.168.1.1 进行配置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后就是常规的密码设置，opkg 源设置为 tuna 的源，配置 ssh 和 公钥。&lt;/p&gt;

&lt;p&gt;接下来，我们为了使用学校的 SLAAC ，采用 ebtables 直接把学校的 IPv6 bridge 进来，而 IPv4 由于准入系统，需要 NAT 。&lt;/p&gt;

&lt;p&gt;参考&lt;a href=&quot;https://tmikey.tech/tech_daily/lede/2017/08/25/bridge_ipv6_lede.html&quot;&gt;Bridge IPv6 connections to WAN&lt;/a&gt;，下载&lt;a href=&quot;https://github.com/cvmiller/v6brouter/blob/master/v6brouter_openwrt.sh&quot;&gt;v6brouter_openwrt.sh&lt;/a&gt;到某个地方，然后修改一下里面的一些参数：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# For Lenovo y1s&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;WAN_DEV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;eth0.2
&lt;span class=&quot;nv&quot;&gt;BRIDGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;br-lan
&lt;span class=&quot;c&quot;&gt;# the rest remain unchanged&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后跑起来之后，自己的电脑可以成功拿到原生的 IPv6 地址了，不需要用难用的 NAT66 技术。&lt;/p&gt;

&lt;p&gt;下一步是采用&lt;a href=&quot;https://github.com/z4yx/GoAuthing&quot;&gt;z4yx/GoAuthing&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go get &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; github.com/z4yx/GoAuthing
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/src/github.com/z4yx/GoAuthing/cli
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;env &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOOS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;linux &lt;span class=&quot;nv&quot;&gt;GOARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mipsle &lt;span class=&quot;nv&quot;&gt;GOMIPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;softfloat go build main.go
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mipsel-linux-gnu-strip main
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;scp main root@192.168.1.1:~/GoAuthing
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh root@192.168.1.1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;opkg &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ca-certificates
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./GoAuthing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里参考了&lt;a href=&quot;https://blog.csdn.net/QQ531456898/article/details/80095707&quot;&gt;解决GO语言编译程序在openwrt(mipsle架构)上运行提示Illegal instruction问题&lt;/a&gt;，配置了 GOMIPS 环境变量。为了访问 HTTPS 网站，参考了&lt;a href=&quot;https://wiki.openwrt.org/doc/howto/wget-ssl-certs&quot;&gt;OpenWRT Wiki - SSL and Certificates in wget&lt;/a&gt;。有毒的是，这个环境变量，在 macOS 上不能正常工作，而在 Linux 机子上是没有问题的。&lt;/p&gt;

&lt;p&gt;然后就可以成功地跑起来 GoAuthing ，解决了上校园网认证的问题。&lt;/p&gt;

&lt;p&gt;感谢&lt;a href=&quot;https://github.com/z4yx&quot;&gt;宇翔&lt;/a&gt;编写的 GoAuthing 小工具。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>NAT64 初尝试</title>
   <link href="https://jiegec.me/networking/2018/01/02/first-trial-of-NAT64/"/>
   <updated>2018-01-02T19:41:22+08:00</updated>
   <id>https://jiegec.me/networking/2018/01/02/first-trial-of-NAT64</id>
   <content type="html">&lt;p&gt;最近宿舍里有线网络的 IPv4 总是拿不到地址，只能连无线网，不禁对计算机系学生的可怕的设备数量有了深刻的认识。不过，作为一个有道德（误）的良好青年，还是不要给已经枯竭的 IPv4 地址填堵了，还是赶紧玩玩 IPv6 的网络吧。然后在 TUNA 群里受青年千人续本达 (@heroxbd) 的安利，本地搭建一下 NAT64+DNS64 的环境。不过考虑到宿舍还是拿不到有线的 IPv4 地址，我就先利用苹果先前在强制 iOS 的应用支持 NAT64 网络的同时，在 macOS 上为了方便开发者调试，提供的便捷的建立 NAT64 网络的能力。&lt;/p&gt;

&lt;p&gt;首先在设置中按住 Option 键打开 Sharing ， 点击 Internet Sharing ，勾上 Create NAT64 Network 然后把网络共享给设备。然后在手机上关掉 Wi-Fi 和 Cellular ，发现还能正常上网。此时可以打开 Wireshark 验证我们的成果了：&lt;/p&gt;

&lt;p&gt;在手机上打开浏览器，浏览千度，得到如下的 Wireshark 截图：
&lt;img src=&quot;/assets/baidu-nat64.jpg&quot; alt=&quot;baidu-nat64&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里，&lt;code class=&quot;highlighter-rouge&quot;&gt;2001:2:0:aab1::1&lt;/code&gt; 是本机在这个子网中的地址，&lt;code class=&quot;highlighter-rouge&quot;&gt;2001:2::aab1:cda2:5de:87f6:fd78&lt;/code&gt; 是我的 iOS 设备的地址，然后 iOS 向 macOS 发出了 DNS请求， macOS 发送 DNS 请求后得到 &lt;code class=&quot;highlighter-rouge&quot;&gt;baidu.com&lt;/code&gt; 的 IPv4 地址之一为 &lt;code class=&quot;highlighter-rouge&quot;&gt;111.13.101.208&lt;/code&gt; ：
&lt;img src=&quot;/assets/baidu-dns.jpg&quot; alt=&quot;baidu-dns&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图中，我们可以看到， &lt;code class=&quot;highlighter-rouge&quot;&gt;baidu.com&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;AAAA&lt;/code&gt; 记录是 &lt;code class=&quot;highlighter-rouge&quot;&gt;2001:2:0:1baa::6f0d:65d0&lt;/code&gt; ，这个就是 DNS64 转译的地址，前面为网关的 &lt;code class=&quot;highlighter-rouge&quot;&gt;prefix&lt;/code&gt; ，后面就是对应的 IPv4 地址： &lt;code class=&quot;highlighter-rouge&quot;&gt;0x6f=111, 0x0d=13, 0x65=101, 0xd0=208&lt;/code&gt; ，当客户端向这个地址发包的时候，网关发现前缀符合条件，把最后的这部分 IPv4 地址取出来，自己把包发送到真实的地址上去，再把返回来的包再转为 IPv6 的地址返还给客户端。可以验证，剩下的几个地址也符合这个转译规则。&lt;/p&gt;

&lt;p&gt;这就实现了：利用一台连接着 IPv6 和 IPv4 两种网络的网关，可以使得 IPv6 这个网络通过网关访问 IPv4 。通过配置，也可以使得 IPv4 访问 IPv6 中的地址（即 Stateful 和 Stateless 的区分，需要手动配置映射）。&lt;/p&gt;

&lt;p&gt;好处：作为比较成熟的 IPv4 到 IPv6 过渡方案之一，可以让自己组建的 IPv6 网络访问一些仅 IPv4 的网站。
坏处：依赖于 DNS64 ，必须要经过一层翻译，一些应用或协议可能写死了 IPv4 的地址，该方法可能会失效。&lt;/p&gt;
</content>
 </entry>
 
</feed>
