<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Tag - mit 6.828</title>
 <link href="https://jiegec.me/tag/mit-6.828/index.xml" rel="self"/>
 <link href="https://jiegec.me/tag/mit 6.828.html"/>
 <updated>2018-12-29T10:29:19+08:00</updated>
 <id>https://jiegec.me/tag/mit 6.828.html</id>
 <author>
   <name>Jiege Chen</name>
 </author>
 
 <entry>
   <title>近来做 Stanford CS140e 的一些进展和思考（3）</title>
   <link href="https://jiegec.me/programming/2018/02/16/thoughts-on-stanford-cs140e-3/"/>
   <updated>2018-02-16T20:09:00+08:00</updated>
   <id>https://jiegec.me/programming/2018/02/16/thoughts-on-stanford-cs140e-3</id>
   <content type="html">&lt;p&gt;由于 &lt;code class=&quot;highlighter-rouge&quot;&gt;Assignment 2: File System &lt;/code&gt; 延期发布，所以中间那段时间转向 &lt;code class=&quot;highlighter-rouge&quot;&gt;MIT 6.828&lt;/code&gt; 稍微研究了一下。前几天放出了新的任务，在&lt;a href=&quot;/programming/2018/02/06/thoughts-on-stanford-cs140e-2/&quot;&gt;上一篇文章&lt;/a&gt;之后，我又有了一些进展： 实现了从内存中读取 &lt;code class=&quot;highlighter-rouge&quot;&gt;ATAGS(ARM Tags)&lt;/code&gt; 信息的代码，从而可以获得内存大小的信息，根据这个信息，实现了 &lt;code class=&quot;highlighter-rouge&quot;&gt;bump&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt; 两种内存分配器，并且把二者之一注册为全局内存分配器，利用上更新了的 &lt;code class=&quot;highlighter-rouge&quot;&gt;std&lt;/code&gt; 就可以使用需要动态分配内存的相关工具了。利用这个，我实现了 &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; 输入历史的回溯，把输入历史保存在一个动态增长的数组中，再特殊处理上下键，把当前的行替换为历史。&lt;/p&gt;

&lt;p&gt;这个过程也不是没有踩坑。一开始代码放出来了，但是题目说明还没出，我就自己按照代码做了 &lt;code class=&quot;highlighter-rouge&quot;&gt;ATAGS&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;bump&lt;/code&gt; 分配器，后来做完了，看到说明出了以后，发现理解还是有偏差，把代码更改了并修复了分配器的 BUG 。看到 &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt; 分配器的时候，我按照网上的 &lt;code class=&quot;highlighter-rouge&quot;&gt;buddy memory allocation&lt;/code&gt; 实现了一个内存分配器，原理看起来简单实现起来还是有很多细节问题，后来按照新放出的单元测试，修修补补才写得差不多可用了。同时，原来的 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootloader&lt;/code&gt; 因为用了新的 &lt;code class=&quot;highlighter-rouge&quot;&gt;std&lt;/code&gt; 而缺失了 &lt;code class=&quot;highlighter-rouge&quot;&gt;alloc&lt;/code&gt; 不能编译，我就把 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel&lt;/code&gt; 下的相关文件软连接过去，调了数次后把问题解决。此时， &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel&lt;/code&gt; 文件大小已经有 40K ，按照 115200 Baudrate 发送需要几秒才能传输过去，我就调到了 230400 Baudrate ，果然现在的传输速度就有所提升，可以接受了。等之后写了 &lt;code class=&quot;highlighter-rouge&quot;&gt;EMMC(SD card)&lt;/code&gt; 的驱动和 &lt;code class=&quot;highlighter-rouge&quot;&gt;FAT32&lt;/code&gt; 的文件系统后，就可以实现更多的 &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; 的功能了。中间还遇到一个问题，就是如果给 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel&lt;/code&gt; 开启了 &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt; 分配器，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt; 回到 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootloader&lt;/code&gt; 就无法传新的 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel&lt;/code&gt; 上去了，结果发现是因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt; 中用到的侵入式 &lt;code class=&quot;highlighter-rouge&quot;&gt;LinkedList&lt;/code&gt; 实现覆盖了部分 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootloader&lt;/code&gt; 的代码，换回不能回收内存的 &lt;code class=&quot;highlighter-rouge&quot;&gt;bump&lt;/code&gt; 分配器即可，反正目前远远还用不了那么多内存。&lt;/p&gt;

&lt;p&gt;之后还要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;aarch64&lt;/code&gt; 上用 &lt;code class=&quot;highlighter-rouge&quot;&gt;MMU&lt;/code&gt; 实现虚拟内存，之前在 &lt;code class=&quot;highlighter-rouge&quot;&gt;MIT 6.828&lt;/code&gt; 里被页表整得脑子眩晕，希望到时我还活着吧（逃&lt;/p&gt;

&lt;p&gt;更新：&lt;a href=&quot;/programming/2018/02/27/thoughts-on-stanford-cs140e-4/&quot;&gt;下一篇在这里&lt;/a&gt;。&lt;/p&gt;
</content>
 </entry>
 
</feed>
