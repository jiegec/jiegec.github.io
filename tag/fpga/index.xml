<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Tag - fpga</title>
 <link href="https://jiege.ch/tag/fpga/index.xml" rel="self"/>
 <link href="https://jiege.ch/tag/fpga.html"/>
 <updated>2019-04-05T23:38:48+08:00</updated>
 <id>https://jiege.ch/tag/fpga.html</id>
 <author>
   <name>Jiege Chen</name>
 </author>
 
 <entry>
   <title>高云 FPGA 踩坑</title>
   <link href="https://jiege.ch/hardware/2019/04/01/gowin-fpga/"/>
   <updated>2019-04-01T09:00:00+08:00</updated>
   <id>https://jiege.ch/hardware/2019/04/01/gowin-fpga</id>
   <content type="html">&lt;p&gt;最近那到了高云 FPGA GW2A-18 开发版，想在这上面做一些小工程。不过首先要配置好环境什么的。官方提供了 Linux 和 Windows 的两套工具，自然是拥抱 Linux 咯，但是由于官方适配的是 Redhat 系的操作系统，所以用 Debian 系的时候出现了若干问题，后面会谈到怎么解决的。&lt;/p&gt;

&lt;p&gt;首先是官网下载了它的软件，大概有IDE，综合器，布线器和Programmer四个工具，然后开始跑，发现缺少了 libcrypt.so.1.0.0 。上网搜了一下解决方案，需要重新编译 openssl-1.0.0 ，于是下载并且编译了 openssl-1.0.0t 并且把 .so 的路径调好了，这时候就可以打开 IDE 了。然后发现需要 License ，这个很简单，去官网申请一下，一天邮件就下来了。&lt;/p&gt;

&lt;p&gt;接下来配置 License， IDE 很容易，直接选择邮件里发下来的 node-locked License 即可。不过 Synplify Pro 的 Linux 版本不支持直接单文件 node-locked 的 License ，只允许跑 SCL … 不过高云也提供了 SCL 的下载，和 IDE 的 License Server 放在一起，安装完以后，在得到的 License 里加上两行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SERVER &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hostid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
VENDER snpslmd /path/to/scl/2018.06/linux64/bin/snpslmd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后把 $LM_LICENSE_FILE 指向这个文件路径，就可以了。这一部分感谢 @Jackey-Huo。&lt;/p&gt;

&lt;p&gt;随手写了一个简化版的点亮数字人生（没有数码管），得到了 bistream ，准备往板子里刷，然后问题出现了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ImportError: /path/to/Gowin_YunYuan_V1.9.0Beta_linux/Programmer/bin/librt.so.1: symbol __vdso_clock_gettime version GLIBC_PRIVATE not defined in file libc.so.6 with link time reference
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;目测是 glibc 版本问题 … 这就很难处理了。另外又从官网下载了独立的 Programmer ，仍然不行，检测不到设备。&lt;/p&gt;

&lt;p&gt;最后想了想，找到了终极办法，在 Docker 里运行 CentOS 的 Privileged Container ，再跑 programmer ：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker pull centos
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /home:/home centos /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CentOS 镜像出乎意料地小。进去以后，找到 Programmer 路径，然后 scan ：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ./programmer_cli --scan&lt;/span&gt;
 Scanning!
Current download-cable channel:0
Device Info:
        Family: GW2A
        Name: GW2A-18
        ID: 0xREDACTED
 1 device&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; found!
 Cost 0.54 second&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接着烧到 SRAM 中：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ./programmer_cli -d GW2A-18 --fsFile /path/to/bitstream.fs --run 2&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;SRAM Program&quot;&lt;/span&gt; starting on device-1...
Programming...: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#########################] 100%&lt;/span&gt;
 User Code: 0xREDACTED
 Status Code: 0xREDACTED
 Cost 4.54 second&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;烧录成功，功能测试也没有问题。可以继续进行下一步工作了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>在荔枝糖（Lichee Tang）上初次体验 FPGA</title>
   <link href="https://jiege.ch/hardware/2018/10/07/my-first-fpga-experience-on-lichee-tang/"/>
   <updated>2018-10-07T22:34:00+08:00</updated>
   <id>https://jiege.ch/hardware/2018/10/07/my-first-fpga-experience-on-lichee-tang</id>
   <content type="html">&lt;p&gt;今天从张宇翔学长那拿到了 &lt;a href=&quot;http://tang.lichee.pro/&quot;&gt;荔枝糖（Lichee Tang）&lt;/a&gt; 的 FPGA 板子，于是立即开始把前段时间学到的Verilog应用上来。不过想到现在我手上没有多少外设，然后又必须远程到 Windows 电脑上去操作，于是先实现了一下 UART 通信。&lt;/p&gt;

&lt;p&gt;在网上找到了 &lt;a href=&quot;https://github.com/ben-marshall/uart&quot;&gt;ben-marshall/uart&lt;/a&gt; 一个简易的实现，很快做到了一直在串口上打印 &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; 字符。接着我开始尝试实现一个简单的串口回显。一开始，我直接把 UART 读到的数据直接输出，果然可以了，但是一旦传输速率跟不上了，就会丢失数据。于是我添加了 FIFO IP 核，然后把读入的数据存入 FIFO ，又从 FIFO 中读取数据写入到 UART 中去。不过发现了一个小 BUG：每次打印的是倒数第二次输入的字符，即丢失了第一个字符。在张宇翔学长的帮助下找到了问题：当 FIFO 的读使能信号为高时，其数据在下一个时钟周期才来，于是解决方案就是等到数据来的时候再向 UART 中写数据：&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uart_tx_en&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uart_fifo_re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就解决了这个问题。完整代码在 &lt;a href=&quot;https://github.com/jiegec/learn_licheetang&quot;&gt;jiegec/learn_licheetang&lt;/a&gt; 中。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Verilog 初体验</title>
   <link href="https://jiege.ch/programming/2018/06/21/verilog-first-try/"/>
   <updated>2018-06-21T21:36:00+08:00</updated>
   <id>https://jiege.ch/programming/2018/06/21/verilog-first-try</id>
   <content type="html">&lt;p&gt;自己以前一直对硬件方面没有接触，但是大二大三很快就要接触相关知识，所以自己就先预习一下 Verilog HDL，以便以后造计算机。听学长们推荐了一本书叫《自己动手写CPU》，由于自己手中只有很老的 Spartan-3 板子，手上没有可以用来试验的 FPGA ，所以选择用 Verilog + Verilator 进行模拟。既然是模拟，自然是会有一定的问题，不过这个以后再说。&lt;/p&gt;

&lt;p&gt;然后就是模仿着这本书的例子，写了指令的获取和指令的解码两部分很少很少的代码，只能解码 ori (or with immidiate) 这一个指令。然后，通过 verilator 跑模拟，输出 vcd 文件，再用 gtkwave 显示波形，终于能够看到我想要的结果了。能够看到，前一个时钟周期获取指令，下一个时钟周期进行解码，出现了流水线的结果。这让我十分开心。&lt;/p&gt;

&lt;p&gt;接下来就是实现一些基本的算术指令，然后讲计算的结果写入到相应的寄存器中。这样做完之后，就可以做一个基于 verilator 的简易 A+B 程序了。&lt;/p&gt;

&lt;p&gt;我的代码发布在&lt;a href=&quot;https://github.com/jiegec/learn_verilog&quot;&gt;jiegec/learn_verilog&lt;/a&gt;中。最近马上到考试周，可能到暑假会更频繁地更新吧。&lt;/p&gt;
</content>
 </entry>
 
</feed>
