<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Tag - compilation_database</title>
 <link href="https://jiegec.me/tag/compilation_database/index.xml" rel="self"/>
 <link href="https://jiegec.me/tag/compilation_database.html"/>
 <updated>2018-12-16T15:26:36+08:00</updated>
 <id>https://jiegec.me/tag/compilation_database.html</id>
 <author>
   <name>Jiege Chen</name>
 </author>
 
 <entry>
   <title>Lsp And Cpp</title>
   <link href="https://jiegec.me/programming/2017/12/12/lsp-and-cpp/"/>
   <updated>2017-12-12T08:13:40+08:00</updated>
   <id>https://jiegec.me/programming/2017/12/12/lsp-and-cpp</id>
   <content type="html">&lt;p&gt;之前时间，巨硬发布了LSP（Language Server Protocol），目的是解决目前IDE和各语言的m+n问题。想法很好，不过直到最近，终于有我觉得可以用的工具出来了，并且已经代替了我在使用的其它的插件。&lt;/p&gt;

&lt;p&gt;由于我最近主要就是做做程设作业，做做OJ这些，主要就是和C++打交道。所以我当然就开始找一些比较成熟的C++的LSP server。有一个 Sourcegraph 维护的 &lt;a href=&quot;https://langserver.org/&quot;&gt;langserver.org&lt;/a&gt; ，上面有着目前的各个语言和编辑器/IDE的支持情况，我刚才提到的cquery也会加入到这个列表里去。从这个列表里可以看到，我用的比较多的Python和Haskell都已经有不错的的LSP server，我已经开始在本地体验pyls和hie了，感觉做得挺不错的。&lt;/p&gt;

&lt;p&gt;回到C++，我的主力编辑器是Emacs，其次是CLion，而Emacs上的&lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode&quot;&gt;LSP支持 lsp-mode&lt;/a&gt;也在快速发展，与之配合的&lt;a href=&quot;https://github.com/emacs-lsp/lsp-ui&quot;&gt;lsp-ui&lt;/a&gt; 也出现了很多很棒的功能。&lt;/p&gt;

&lt;p&gt;下面开始编译并配置&lt;a href=&quot;https://github.com/jacobdufault/cquery&quot;&gt;cquery&lt;/a&gt;：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/jacobdufault/cquery &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;cquery
./waf configure &lt;span class=&quot;c&quot;&gt;# to use system clang, append --use-system-clang&lt;/span&gt;
./waf build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后配置Emacs：&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;use-package&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lsp-mode&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:ensure&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:diminish&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;lsp-mode&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:commands&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lsp-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:config&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lsp-define-stdio-client&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;lsp-pyls&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;python&quot;&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;#'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;get-project-root&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/usr/local/bin/pyls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;use-package&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lsp-ui&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:commands&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;lsp-ui-mode&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:init&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'lsp-mode-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'lsp-ui-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;use-package&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cquery&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:load-path&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;path_to_cquery/emacs&quot;&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:config&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;cquery-executable&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;path_to_cquery/build/app&quot;&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;cquery-resource-dir&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;path_to_cquery/clang_resource_dir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来，需要配置 基于Clang的 工具都需要的 Compilation Database 。Sacrasm对这个有一个非常完整的&lt;a href=&quot;https://sarcasm.github.io/notes/dev/compilation-database.html&quot;&gt;总结&lt;/a&gt; ，可以查看里面的方法。我这里推荐在CMake项目中用CMake自带的，加上&lt;a href=&quot;https://github.com/nickdiego/compiledb-generator&quot;&gt;nickdiego/compiledb-generator&lt;/a&gt; 应付基于Makefile/Autotools的项目。如果都不适用，就按照cquery的README写一个简单的.cquery文件即可，不需要Bear那种必须关闭SIP的方案。&lt;/p&gt;

&lt;p&gt;然后就可以享受很多功能了！还是挺好用的。&lt;/p&gt;
</content>
 </entry>
 
</feed>
