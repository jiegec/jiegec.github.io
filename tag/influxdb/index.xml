<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Tag - influxdb</title>
 <link href="https://jiege.ch/tag/influxdb/index.xml" rel="self"/>
 <link href="https://jiege.ch/tag/influxdb.html"/>
 <updated>2019-04-20T22:45:42+08:00</updated>
 <id>https://jiege.ch/tag/influxdb.html</id>
 <author>
   <name>Jiege Chen</name>
 </author>
 
 <entry>
   <title>Grafana 中可视化 Ping 时把 Timeout 显示为指定值</title>
   <link href="https://jiege.ch/software/2019/01/13/grafana-influxdb-visualize-ping/"/>
   <updated>2019-01-13T18:36:00+08:00</updated>
   <id>https://jiege.ch/software/2019/01/13/grafana-influxdb-visualize-ping</id>
   <content type="html">&lt;p&gt;刚遇到一个需求，就是用 Telegraf 收集 ping 信息，然后在 Grafana 里可视化当前的延迟，如果超时了，就显示一个指定值，如 999 ，这样就可以放到一个 Gauge 里面可视化了。但是，问题在于，Telegraf 的 ping input 在超时的时候只会在 result_code 里写一个 &lt;a href=&quot;https://github.com/influxdata/telegraf/tree/master/plugins/inputs/ping&quot;&gt;2&lt;/a&gt; ，其他项都是空的，因而如果直接用 GROUP BY time(interval) fill(999) 会导致最新的一个数据经常得到 999 。这意味着需要根据 “result_code” 来进行区分 Timeout 的情况。最后捣腾了很久，得到了这个方案：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; select &quot;average_response_ms&quot; * (2 - &quot;result_code&quot;) / 2 + &quot;result_code&quot; / 2 * 999 from (select &quot;average_response_ms&quot;, &quot;result_code&quot; from ping where $timeFilter fill(0))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后的方法很粗糙：当 “result_code” 是 0 也就是成功的时候，得到延迟，而当 “result_code” 是 2 也就是超时的时候，直接得到 999 。这样就解决了这个问题。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>配置 homebridge-mi-aqara 并添加为 telegraf 的数据源</title>
   <link href="https://jiege.ch/software/2018/12/13/homebridge-mi-aqara-telegraf/"/>
   <updated>2018-12-13T20:07:00+08:00</updated>
   <id>https://jiege.ch/software/2018/12/13/homebridge-mi-aqara-telegraf</id>
   <content type="html">&lt;p&gt;最近有了设备，想把设备拿到的数据都导一份存到 influxdb 里，但是目前找到的只有 &lt;a href=&quot;https://github.com/YinHangCode/homebridge-mi-aqara&quot;&gt;homebridge-mi-aqara&lt;/a&gt; 可以访问并拿到数据，然后它又提供了 mqtt 的数据获取方案，于是自己写了个脚本去读取这些数据。&lt;/p&gt;

&lt;p&gt;首先当然是配置一下 homebridge-mi-aqara ，按照网上的教程来，这个不难。然后本地开一个 MQTT Broker （如 mosquitto ），配置为本地监听，然后我编写了&lt;a href=&quot;https://github.com/jiegec/tools/blob/master/telegraf-mi-aqara.py&quot;&gt;脚本 telegraf-mi-aqara.py&lt;/a&gt; ，使用前需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install paho-mqtt&lt;/code&gt;，并且按照实际路径修改一下内容 。验证能够跑起来后，写一个 telegraf 配置：&lt;/p&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[[inputs.exec]]&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/usr/bin/python3 /path/to/telegraf-mi-aqara.py&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5s&quot;&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;data_format&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;influx&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在就可以读取到各项信息，如温度，湿度，是否开门，开关用电情况等等。&lt;/p&gt;

&lt;p&gt;2018-12-16 更新：&lt;/p&gt;

&lt;p&gt;研究了一下&lt;a href=&quot;https://github.com/aqara/aiot-gateway-local-api&quot;&gt;绿米网关局域网通信协议&lt;/a&gt;，得到了&lt;a href=&quot;https://github.com/jiegec/tools/blob/master/telegraf-mi-aqara-v2.py&quot;&gt;第二个版本 telegraf-mi-aqara-v2.py&lt;/a&gt;，它与第一版的区别是，第一版是主动向网关读取信息，而这一版则是监听组播包，等待网关发消息。这个脚本负责把读取到的组播信息发送到 MQTT ，再让 telegraf 从 MQTT 里解析 JSON 消息，写入数据库。Telegraf 配置如下：&lt;/p&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[[inputs.mqtt_consumer]]&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;servers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;tcp://127.0.0.1:1883&quot;]&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;qos&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;connection_timeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;30s&quot;&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;topics&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;/telegraf-mi-aqara&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;persistent_session&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;client_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Telegraf&quot;&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;data_format&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;json&quot;&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;json_string_fields&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;tag_keys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;short_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于设备不全，有些字段可能不完整。如果大家自己要用的话，可能需要自行修改一下。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Grafana 可视化实践：清华大学 2018 年度人物评选</title>
   <link href="https://jiege.ch/software/2018/12/07/grafana-visualize-vote18/"/>
   <updated>2018-12-07T23:03:00+08:00</updated>
   <id>https://jiege.ch/software/2018/12/07/grafana-visualize-vote18</id>
   <content type="html">&lt;p&gt;最近这段时间，清华内部正在投票选出今年的年度人物，想到最近刚好在学习使用 Grafana+InfluxDB+Telegraf 全家桶，于是想着能不能写个爬虫把数据都拿下来，然后用 Grafana 画出来，就可以得到一个投票随时间变化的趋势。爬虫很简单，就是登录，获取页面信息，然后按照 InfluxDB 的输入格式进行输出即可。代码放在了 &lt;a href=&quot;https://github.com/jiegec/student-tsinghua-vote18&quot;&gt;jiegec/student-tsinghua-vote18&lt;/a&gt; 下。&lt;/p&gt;

&lt;p&gt;接着就是用 Grafana 进行可视化，大概得到了这样一个曲线：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vote18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为保护隐私，把名字隐去了。实际上的投票时间是从 12-3 号开始到 12-7号结束，但由于宿舍停电的原因所以采样的点在半夜的时候都没有，所以看起来有点奇怪，但还是能够反应总体的趋势的。比如可以看到前两名很早就一马当先，而后一直遥遥领先，下面的选手则排名变动很大，特别是截止前最后一段时间，大家都在拼命拉票，可见大家都是 DDL 选手啊。如果对上面这个图求个导，看看变化率的话：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vote18-speed.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这显现出了很有意思的一个趋势，就是每天十二点左右都有一个高峰期，然后在零点前大概熄灯附近的时间也是一个高峰期，另外就是截止前最后的抢票阶段，大家都在疯狂拉票，从中午拉到最后时刻。由于停电的原因，在零点附近的数据都比较的鬼畜，不过影响不大，趋势一目了然。&lt;/p&gt;

&lt;p&gt;Grafana 真香！期望可以学到更多高端的查询语法和可视化的骚操作，现在有很多东西不知道该怎么可视化，比较苦恼，不知道大家有没有什么经验可以分享。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>配置 Grafana+InfluxDB+Telegraf 并添加 MIIO 数据来源</title>
   <link href="https://jiege.ch/software/2018/11/27/grafana-influxdb-telegraf-miio/"/>
   <updated>2018-11-27T20:33:00+08:00</updated>
   <id>https://jiege.ch/software/2018/11/27/grafana-influxdb-telegraf-miio</id>
   <content type="html">&lt;p&gt;之前一直想配一个监控系统，现在有机会了，就简单配了一下。发现真的特别简单，用 Homebrew 安装这三个软件并且都跑起来，然后稍微动一下配置，就可以得到可观的效果了。&lt;/p&gt;

&lt;p&gt;然后想利用 miio 配置一下，把宿舍的空气净化器各项参数拿到，以 Telegraf 的插件形式定时上报，然后通过 Grafana 进行可视化。插件放在了 &lt;a href=&quot;https://github.com/jiegec/tools/blob/master/telegraf/miio.py&quot;&gt;jiegec/tools&lt;/a&gt; 下，就是一个简单的 Python 脚本。配置方法如下：&lt;/p&gt;

&lt;p&gt;编辑 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/etc/telegraf.d/miio.conf&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[[inputs.exec]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;[&quot;/usr/local/bin/python3 /Volumes/Data/tools/telegraf/miio.py MIID_HERE&quot;]&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5s&quot;&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;data_format&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;influx&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;默认了 miio 路径为 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/miio&lt;/code&gt; 。&lt;/p&gt;
</content>
 </entry>
 
</feed>
