<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Tag - shell</title>
 <link href="https://jiegec.me/tag/shell/index.xml" rel="self"/>
 <link href="https://jiegec.me/tag/shell.html"/>
 <updated>2018-10-07T23:13:40+08:00</updated>
 <id>https://jiegec.me/tag/shell.html</id>
 <author>
   <name>Jiege Chen</name>
 </author>
 
 <entry>
   <title>近来做 Stanford CS140e 的一些进展和思考（3）</title>
   <link href="https://jiegec.me/programming/2018/02/16/thoughts-on-stanford-cs140e-3/"/>
   <updated>2018-02-16T20:09:00+08:00</updated>
   <id>https://jiegec.me/programming/2018/02/16/thoughts-on-stanford-cs140e-3</id>
   <content type="html">由于 `Assignment 2: File System ` 延期发布，所以中间那段时间转向 `MIT 6.828` 稍微研究了一下。前几天放出了新的任务，在[上一篇文章](/programming/2018/02/06/thoughts-on-stanford-cs140e-2/)之后，我又有了一些进展： 实现了从内存中读取 `ATAGS(ARM Tags)` 信息的代码，从而可以获得内存大小的信息，根据这个信息，实现了 `bump` 和 `bin` 两种内存分配器，并且把二者之一注册为全局内存分配器，利用上更新了的 `std` 就可以使用需要动态分配内存的相关工具了。利用这个，我实现了 `shell` 输入历史的回溯，把输入历史保存在一个动态增长的数组中，再特殊处理上下键，把当前的行替换为历史。

这个过程也不是没有踩坑。一开始代码放出来了，但是题目说明还没出，我就自己按照代码做了 `ATAGS` 和 `bump` 分配器，后来做完了，看到说明出了以后，发现理解还是有偏差，把代码更改了并修复了分配器的 BUG 。看到 `bin` 分配器的时候，我按照网上的 `buddy memory allocation` 实现了一个内存分配器，原理看起来简单实现起来还是有很多细节问题，后来按照新放出的单元测试，修修补补才写得差不多可用了。同时，原来的 `bootloader` 因为用了新的 `std` 而缺失了 `alloc` 不能编译，我就把 `kernel` 下的相关文件软连接过去，调了数次后把问题解决。此时， `kernel` 文件大小已经有 40K ，按照 115200 Baudrate 发送需要几秒才能传输过去，我就调到了 230400 Baudrate ，果然现在的传输速度就有所提升，可以接受了。等之后写了 `EMMC(SD card)` 的驱动和 `FAT32` 的文件系统后，就可以实现更多的 `shell` 的功能了。中间还遇到一个问题，就是如果给 `kernel` 开启了 `bin` 分配器，使用 `exit` 回到 `bootloader` 就无法传新的 `kernel` 上去了，结果发现是因为 `bin` 中用到的侵入式 `LinkedList` 实现覆盖了部分 `bootloader` 的代码，换回不能回收内存的 `bump` 分配器即可，反正目前远远还用不了那么多内存。

之后还要在 `aarch64` 上用 `MMU` 实现虚拟内存，之前在 `MIT 6.828` 里被页表整得脑子眩晕，希望到时我还活着吧（逃

更新：[下一篇在这里](/programming/2018/02/27/thoughts-on-stanford-cs140e-4/)。
</content>
 </entry>
 
 <entry>
   <title>近来做 Stanford CS140e 的一些进展和思考（2）</title>
   <link href="https://jiegec.me/programming/2018/02/06/thoughts-on-stanford-cs140e-2/"/>
   <updated>2018-02-06T12:52:59+08:00</updated>
   <id>https://jiegec.me/programming/2018/02/06/thoughts-on-stanford-cs140e-2</id>
   <content type="html">在[上一篇文章](/programming/2018/02/04/thoughts-on-stanford-cs140e/)之后，我又有了一些进展：`UART` ，简易的`shell` ，修复了之前写的 `xmodem` 中的 BUG，一个可以从 `UART` 接收一个 `kernel` 写入到内存中再跳转过去的 `bootloader` 。

首先是 `UART` ，就是通过两个 `GPIO pin` 进行数据传输，首先在 `memory mapped IO` 上进行相应的初始化，然后包装了 `io::Read` 和 `io::Write` （这里实现一开始有 BUG，后来修复了），然后很快地完成了一个仅仅能 `echo` 的 `kernel` 。

然后实现了 `CONSOLE` ，一个对 `MiniUart` 和单例封装，就可以用 `kprint!/kprintln!` 宏来输出到 `UART` ，接着实现了一个 `echo` 的 `shell` ，读入一行输出一行。然后实现退格键和方向键，这里的难点在于要控制光标并且用读入的或者空格覆盖掉屏幕上已经显示而不应该显示的内容。接着，利用 `skeleton` 中的 `Command` 做了一个简单的 `echo` 命令。

接着，利用之前编写的 `tty` ，配合上新编写的 `bootloader` ，实现通过 `UART` 把新的 `kernel` 通过 `XMODEM` 协议发送到设备，写入 `0x80000` 启动地址并且调转到新加载的 `kernel` 中执行。

最后，又实现了 `uptime` （输出设备启动到现在的时间）和 `exit` （跳转回 `bootloader` ，可以上传新的 `kernel` ）。并添加了 `TUNA` 作为 `shell` 启动时输出的 `BANNER` 。

整个过程挺虐的，踩了很多的坑，由于很多东西都没有，输入输出目前也只有 `UART` ，写了 `UART` 后又遇到 `XMODEM` 难以调试的问题。十分感谢 `#tuna` 上的 @BenYip 及时地指出了代码的几处问题，节省了我许多时间。

更新：[下一篇在这里](/programming/2018/02/16/thoughts-on-stanford-cs140e-3/)。
</content>
 </entry>
 
</feed>
