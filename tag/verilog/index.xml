<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Tag - verilog</title>
 <link href="https://jiege.ch/tag/verilog/index.xml" rel="self"/>
 <link href="https://jiege.ch/tag/verilog.html"/>
 <updated>2019-04-15T17:55:24+08:00</updated>
 <id>https://jiege.ch/tag/verilog.html</id>
 <author>
   <name>Jiege Chen</name>
 </author>
 
 <entry>
   <title>在荔枝糖（Lichee Tang）上初次体验 FPGA</title>
   <link href="https://jiege.ch/hardware/2018/10/07/my-first-fpga-experience-on-lichee-tang/"/>
   <updated>2018-10-07T22:34:00+08:00</updated>
   <id>https://jiege.ch/hardware/2018/10/07/my-first-fpga-experience-on-lichee-tang</id>
   <content type="html">&lt;p&gt;今天从张宇翔学长那拿到了 &lt;a href=&quot;http://tang.lichee.pro/&quot;&gt;荔枝糖（Lichee Tang）&lt;/a&gt; 的 FPGA 板子，于是立即开始把前段时间学到的Verilog应用上来。不过想到现在我手上没有多少外设，然后又必须远程到 Windows 电脑上去操作，于是先实现了一下 UART 通信。&lt;/p&gt;

&lt;p&gt;在网上找到了 &lt;a href=&quot;https://github.com/ben-marshall/uart&quot;&gt;ben-marshall/uart&lt;/a&gt; 一个简易的实现，很快做到了一直在串口上打印 &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; 字符。接着我开始尝试实现一个简单的串口回显。一开始，我直接把 UART 读到的数据直接输出，果然可以了，但是一旦传输速率跟不上了，就会丢失数据。于是我添加了 FIFO IP 核，然后把读入的数据存入 FIFO ，又从 FIFO 中读取数据写入到 UART 中去。不过发现了一个小 BUG：每次打印的是倒数第二次输入的字符，即丢失了第一个字符。在张宇翔学长的帮助下找到了问题：当 FIFO 的读使能信号为高时，其数据在下一个时钟周期才来，于是解决方案就是等到数据来的时候再向 UART 中写数据：&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uart_tx_en&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uart_fifo_re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就解决了这个问题。完整代码在 &lt;a href=&quot;https://github.com/jiegec/learn_licheetang&quot;&gt;jiegec/learn_licheetang&lt;/a&gt; 中。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Verilog 初体验</title>
   <link href="https://jiege.ch/programming/2018/06/21/verilog-first-try/"/>
   <updated>2018-06-21T21:36:00+08:00</updated>
   <id>https://jiege.ch/programming/2018/06/21/verilog-first-try</id>
   <content type="html">&lt;p&gt;自己以前一直对硬件方面没有接触，但是大二大三很快就要接触相关知识，所以自己就先预习一下 Verilog HDL，以便以后造计算机。听学长们推荐了一本书叫《自己动手写CPU》，由于自己手中只有很老的 Spartan-3 板子，手上没有可以用来试验的 FPGA ，所以选择用 Verilog + Verilator 进行模拟。既然是模拟，自然是会有一定的问题，不过这个以后再说。&lt;/p&gt;

&lt;p&gt;然后就是模仿着这本书的例子，写了指令的获取和指令的解码两部分很少很少的代码，只能解码 ori (or with immidiate) 这一个指令。然后，通过 verilator 跑模拟，输出 vcd 文件，再用 gtkwave 显示波形，终于能够看到我想要的结果了。能够看到，前一个时钟周期获取指令，下一个时钟周期进行解码，出现了流水线的结果。这让我十分开心。&lt;/p&gt;

&lt;p&gt;接下来就是实现一些基本的算术指令，然后讲计算的结果写入到相应的寄存器中。这样做完之后，就可以做一个基于 verilator 的简易 A+B 程序了。&lt;/p&gt;

&lt;p&gt;我的代码发布在&lt;a href=&quot;https://github.com/jiegec/learn_verilog&quot;&gt;jiegec/learn_verilog&lt;/a&gt;中。最近马上到考试周，可能到暑假会更频繁地更新吧。&lt;/p&gt;
</content>
 </entry>
 
</feed>
