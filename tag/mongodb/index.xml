<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Tag - mongodb</title>
 <link href="https://jiegec.me/tag/mongodb/index.xml" rel="self"/>
 <link href="https://jiegec.me/tag/mongodb.html"/>
 <updated>2018-10-07T22:32:08+08:00</updated>
 <id>https://jiegec.me/tag/mongodb.html</id>
 <author>
   <name>Jiege Chen</name>
 </author>
 
 <entry>
   <title>在 Ubuntu 上跨版本迁移 MongoDB</title>
   <link href="https://jiegec.me/software/2018/09/13/migrate-mongodb-on-ubuntu/"/>
   <updated>2018-09-13T14:27:00+08:00</updated>
   <id>https://jiegec.me/software/2018/09/13/migrate-mongodb-on-ubuntu</id>
   <content type="html">由于 MongoDB 只支持当前版本和上一个版本的数据库格式，然后刚刚滚系统升级的时候升级到了 3.6.x ，而数据库格式仍然是 3.2.x 的，于是需要先安装回 3.4.x 版本的 MongoDB，输入命令把数据库升级到 3.4.x 版本后，再用 3.6.x 的数据库进行升级。

以 从 Ubuntu 14.04 LTS 升级到 Ubuntu 18.04.1 LTS 为例，方法如下：

```shell
$ wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.4.17.tgz
$ tar xvf mongodb-linux-x86_64-ubuntu1604-3.4.17.tgz
$ cd mongodb-linux-x86_64-ubuntu1604-3.4.17/bin/
$ sudo ./mongod --config /etc/mongodb.conf &amp;
$ mongo
&gt; db.adminCommand( { setFeatureCompatibilityVersion: '3.4' } )
{ &quot;ok&quot; : 1 }
$ fg
^C
$ sudo chown -R mongodb:mongodb /var/lib/mongodb
$ sudo systemctl start mongodb
$ mongo
&gt; db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )
{ &quot;featureCompatibilityVersion&quot; : { &quot;version&quot; : &quot;3.4&quot; }, &quot;ok&quot; : 1 }
&gt; db.adminCommand( { setFeatureCompatibilityVersion: '3.6' } )
{ &quot;ok&quot; : 1 }
&gt; db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )
{ &quot;featureCompatibilityVersion&quot; : { &quot;version&quot; : &quot;3.6&quot; }, &quot;ok&quot; : 1 }
$ # Okay now
```</content>
 </entry>
 
 <entry>
   <title>升级 MongoDB 到 4.0</title>
   <link href="https://jiegec.me/programming/2018/07/04/upgrade-mongodb-to-4.0/"/>
   <updated>2018-07-04T07:22:00+08:00</updated>
   <id>https://jiegec.me/programming/2018/07/04/upgrade-mongodb-to-4.0</id>
   <content type="html">MongoDB 4.0 刚刚发布，加入了我很想要的 Transaction 功能。不过，我一更新就发现 MongoDB 起不来了。研究了一下日志，发现由于我创建数据库时，MongoDB版本是 3.4 ，虽然后来升级到了 3.6 ，但还是用着 3.4的兼容模式。这个可以这样来检测：

```shell
$ mongo
&gt; db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )
```

如果不是 3.6， 升级到 4.0 之前，需要先执行如下操作：

```shell
$ # MongoDB version 3.6
$ mongo
&gt; db.adminCommand( { setFeatureCompatibilityVersion: &quot;3.6&quot; } )
```

然后再升级到 MongoDB 4.0 ，才能正常地启动 MongoDB 4.0 。之后可以考虑尝试使用 MongoDB 4.0 的 Transaction 了。不知道什么时候进入 Debian 的 stretch-backports 源中。

为了使用 MongoDB 4.0 的新特性，输入以下命令：

```shell
$ mongo
&gt; db.adminCommand( { setFeatureCompatibilityVersion: &quot;4.0&quot; } )
```

之后会尝试一下 MongoDB 4.0 的 Transaction 功能。
</content>
 </entry>
 
 <entry>
   <title>最近写 Node.js 遇到的若干坑</title>
   <link href="https://jiegec.me/programming/2018/06/08/nodejs-experiences/"/>
   <updated>2018-06-08T10:33:00+08:00</updated>
   <id>https://jiegec.me/programming/2018/06/08/nodejs-experiences</id>
   <content type="html">最近在做前后端分离，前端在用 Vue.js 逐步重写，后端则变为 api 的形式。同时，我尝试了用 autocannon 和 clinic 工具测试自己的 api endpoint 的性能，一开始发现有几个延迟会特别高，即使是一个很简单的 api 也有不正常的高延迟。

于是，我用 clinic 生成了 flamegraph ，发现了一些问题：

1. 我在 session 里保存了一些缓存的信息，这部分内容比较大， express-session 在保存到数据库前会先 JSON.stringify 再 crc 判断是否有改变，如果有改变则保存下来。但是由于我的这个对象嵌套层数多，所以时间花得很多。我调整了这个对象的结构，缩小了很多以后，果然这部分快了很多
2. 有一个 API 需要大量的数据库查询，原本是 O（结点总数）次查询，我考虑到我们数据的结构，改成了O（深度），果然快了许多
3. 之前遇到一个小问题，就是即使我没有登录，服务器也会记录 session 并且返回一个 cookie 。检查以后发现，是 connect-flash 即使在没有使用的时候，也会往 cookie 中写入一个空的对象，这就导致 express-session 认为需要保存，所以出现了问题。解决方案就是，换成了它的一个 fork ： connect-flash-plus ，它解决了这个问题

</content>
 </entry>
 
</feed>
